use crate::libbb::ptr_to_globals::bb_errno;
use crate::libbb::skip_whitespace::skip_whitespace;
use crate::libbb::xfuncs_printf::xmalloc;
use crate::librb::signal::__sighandler_t;
use crate::librb::size_t;
use crate::librb::smallint;
use libc;
use libc::access;
use libc::close;
use libc::free;
use libc::fstat;
use libc::getenv;
use libc::getopt;
use libc::off64_t;
use libc::open;
use libc::pollfd;
use libc::printf;
use libc::puts;
use libc::sigset_t;
use libc::sprintf;
use libc::sscanf;
use libc::stat;
use libc::strcasecmp;
use libc::strchr;
use libc::strcpy;
use libc::system;
use libc::termios;
use libc::FILE;
extern "C" {
  #[no_mangle]
  fn memcpy(_: *mut libc::c_void, _: *const libc::c_void, _: libc::c_ulong) -> *mut libc::c_void;
  #[no_mangle]
  fn memmove(_: *mut libc::c_void, _: *const libc::c_void, _: libc::c_ulong) -> *mut libc::c_void;
  #[no_mangle]
  fn memset(_: *mut libc::c_void, _: libc::c_int, _: libc::c_ulong) -> *mut libc::c_void;
  #[no_mangle]
  fn memchr(_: *const libc::c_void, _: libc::c_int, _: libc::c_ulong) -> *mut libc::c_void;
  #[no_mangle]
  fn memrchr(__s: *const libc::c_void, __c: libc::c_int, __n: size_t) -> *mut libc::c_void;

  #[no_mangle]
  fn strcat(_: *mut libc::c_char, _: *const libc::c_char) -> *mut libc::c_char;

  #[no_mangle]
  static mut optarg: *mut libc::c_char;
  #[no_mangle]
  static mut optind: libc::c_int;

  #[no_mangle]
  fn ftruncate(__fd: libc::c_int, __length: off64_t) -> libc::c_int;

  #[no_mangle]
  fn strchrnul(__s: *const libc::c_char, __c: libc::c_int) -> *mut libc::c_char;
  #[no_mangle]
  fn __sigsetjmp(__env: *mut __jmp_buf_tag, __savemask: libc::c_int) -> libc::c_int;
  #[no_mangle]
  fn siglongjmp(_: *mut __jmp_buf_tag, _: libc::c_int) -> !;
  #[no_mangle]
  fn signal(__sig: libc::c_int, __handler: __sighandler_t) -> __sighandler_t;
  #[no_mangle]
  fn raise(__sig: libc::c_int) -> libc::c_int;
  #[no_mangle]
  static mut stdout: *mut FILE;

  #[no_mangle]
  fn snprintf(
    _: *mut libc::c_char,
    _: libc::c_ulong,
    _: *const libc::c_char,
    _: ...
  ) -> libc::c_int;
  #[no_mangle]
  fn vsnprintf(
    _: *mut libc::c_char,
    _: libc::c_ulong,
    _: *const libc::c_char,
    _: ::std::ffi::VaList,
  ) -> libc::c_int;

  #[no_mangle]
  fn fputs_unlocked(__s: *const libc::c_char, __stream: *mut FILE) -> libc::c_int;

  #[no_mangle]
  fn strncmp(_: *const libc::c_char, _: *const libc::c_char, _: libc::c_ulong) -> libc::c_int;

  #[no_mangle]
  fn strspn(_: *const libc::c_char, _: *const libc::c_char) -> libc::c_ulong;
  #[no_mangle]
  fn strlen(__s: *const libc::c_char) -> size_t;

  #[no_mangle]
  fn strncasecmp(_: *const libc::c_char, _: *const libc::c_char, _: libc::c_ulong) -> libc::c_int;

  #[no_mangle]
  static ptr_to_globals: *mut globals;
}
pub type __builtin_va_list = [__va_list_tag; 1];

#[repr(C)]
#[derive(Copy, Clone)]
pub struct __va_list_tag {
  pub gp_offset: libc::c_uint,
  pub fp_offset: libc::c_uint,
  pub overflow_arg_area: *mut libc::c_void,
  pub reg_save_area: *mut libc::c_void,
}

pub type __int64_t = libc::c_long;
pub type int64_t = __int64_t;
pub type smalluint = libc::c_uchar;
pub type uintptr_t = libc::c_ulong;
/* NB: unaligned parameter should be a pointer, aligned one -
 * a lvalue. This makes it more likely to not swap them by mistake
 */
/* #elif ... - add your favorite arch today! */
/* Unaligned, fixed-endian accessors */
/* unxz needs an aligned fixed-endian accessor.
 * (however, the compiler does not realize it's aligned, the cast is still necessary)
 */
/* ---- Size-saving "small" ints (arch-dependent) ----------- */
/* add other arches which benefit from this... */

pub type __jmp_buf = [libc::c_long; 8];

#[repr(C)]
#[derive(Copy, Clone)]
pub struct __jmp_buf_tag {
  pub __jmpbuf: __jmp_buf,
  pub __mask_was_saved: libc::c_int,
  pub __saved_mask: sigset_t,
}
pub type sigjmp_buf = [__jmp_buf_tag; 1];
pub type va_list = __builtin_va_list;
pub type nfds_t = libc::c_ulong;

pub type C2RustUnnamed = libc::c_int;
pub const KEYCODE_BUFFER_SIZE: C2RustUnnamed = 16;
pub const KEYCODE_CURSOR_POS: C2RustUnnamed = -256;
pub const KEYCODE_ALT_D: C2RustUnnamed = -45;
pub const KEYCODE_ALT_BACKSPACE: C2RustUnnamed = -44;
pub const KEYCODE_ALT_LEFT: C2RustUnnamed = -37;
pub const KEYCODE_ALT_RIGHT: C2RustUnnamed = -36;
pub const KEYCODE_CTRL_LEFT: C2RustUnnamed = -69;
pub const KEYCODE_CTRL_RIGHT: C2RustUnnamed = -68;
pub const KEYCODE_D: C2RustUnnamed = -13;
pub const KEYCODE_BACKSPACE: C2RustUnnamed = -12;
pub const KEYCODE_PAGEDOWN: C2RustUnnamed = -11;
pub const KEYCODE_PAGEUP: C2RustUnnamed = -10;
pub const KEYCODE_DELETE: C2RustUnnamed = -9;
pub const KEYCODE_INSERT: C2RustUnnamed = -8;
pub const KEYCODE_END: C2RustUnnamed = -7;
pub const KEYCODE_HOME: C2RustUnnamed = -6;
pub const KEYCODE_LEFT: C2RustUnnamed = -5;
pub const KEYCODE_RIGHT: C2RustUnnamed = -4;
pub const KEYCODE_DOWN: C2RustUnnamed = -3;
pub const KEYCODE_UP: C2RustUnnamed = -2;

#[repr(C)]
#[derive(Copy, Clone)]
pub struct globals {
  pub text: *mut libc::c_char,
  pub end: *mut libc::c_char,
  pub dot: *mut libc::c_char,
  pub text_size: libc::c_int,
  pub vi_setops: smallint,
  pub readonly_mode: smallint,
  pub editing: smallint,
  pub cmd_mode: smallint,
  pub modified_count: libc::c_int,
  pub last_modified_count: libc::c_int,
  pub cmdline_filecnt: libc::c_int,
  pub cmdcnt: libc::c_int,
  pub rows: libc::c_uint,
  pub columns: libc::c_uint,
  pub get_rowcol_error: libc::c_int,
  pub crow: libc::c_int,
  pub ccol: libc::c_int,
  pub offset: libc::c_int,
  pub have_status_msg: libc::c_int,
  pub last_status_cksum: libc::c_int,
  pub current_filename: *mut libc::c_char,
  pub screenbegin: *mut libc::c_char,
  pub screen: *mut libc::c_char,
  pub screensize: libc::c_int,
  pub tabstop: libc::c_int,
  pub last_forward_char: libc::c_int,
  pub adding2q: smallint,
  pub lmc_len: libc::c_int,
  pub ioq: *mut libc::c_char,
  pub ioq_start: *mut libc::c_char,
  pub last_search_pattern: *mut libc::c_char,
  pub edit_file__cur_line: *mut libc::c_char,
  pub refresh__old_offset: libc::c_int,
  pub format_edit_status__tot: libc::c_int,
  pub YDreg: smalluint,
  pub reg: [*mut libc::c_char; 28],
  pub mark: [*mut libc::c_char; 28],
  pub context_start: *mut libc::c_char,
  pub context_end: *mut libc::c_char,
  pub restart: sigjmp_buf,
  pub term_orig: termios,
  pub initial_cmds: [*mut libc::c_char; 3],
  pub readbuffer: [libc::c_char; 16],
  pub status_buffer: [libc::c_char; 200],
  pub last_modifying_cmd: [libc::c_char; 128],
  pub get_input_line__buf: [libc::c_char; 128],
  pub scr_out_buf: [libc::c_char; 4160],
  pub undo_queue_state: libc::c_char,
  pub undo_q: libc::c_int,
  pub undo_queue_spos: *mut libc::c_char,
  pub undo_queue: [libc::c_char; 256],
  pub undo_stack_tail: *mut undo_object,
}

#[repr(C)]
#[derive(Copy, Clone)]
pub struct undo_object {
  pub prev: *mut undo_object,
  pub start: libc::c_int,
  pub length: libc::c_int,
  pub u_type: u8,
  pub undo_text: [libc::c_char; 1],
}
pub type C2RustUnnamed_0 = libc::c_uint;
pub const MAX_SCR_ROWS: C2RustUnnamed_0 = 4096;
pub const MAX_SCR_COLS: C2RustUnnamed_0 = 4096;
pub const MAX_INPUT_LEN: C2RustUnnamed_0 = 128;
pub const MAX_TABSTOP: C2RustUnnamed_0 = 32;
pub type C2RustUnnamed_1 = libc::c_int;
pub const S_END_ALNUM: C2RustUnnamed_1 = 5;
pub const S_END_PUNCT: C2RustUnnamed_1 = 4;
pub const S_OVER_WS: C2RustUnnamed_1 = 3;
pub const S_TO_WS: C2RustUnnamed_1 = 2;
pub const S_BEFORE_WS: C2RustUnnamed_1 = 1;
pub const FULL: C2RustUnnamed_1 = 1;
pub const LIMITED: C2RustUnnamed_1 = 0;
pub const BACK: C2RustUnnamed_1 = -1;
pub const FORWARD: C2RustUnnamed_1 = 1;
pub const YANKDEL: C2RustUnnamed_1 = 1;
pub const YANKONLY: C2RustUnnamed_1 = 0;
#[inline(always)]
unsafe extern "C" fn not_const_pp(mut p: *const libc::c_void) -> *mut libc::c_void {
  return p as *mut libc::c_void;
}
#[inline(always)]
unsafe extern "C" fn bb_ascii_isalnum(mut a: libc::c_uchar) -> libc::c_int {
  let mut b: libc::c_uchar = (a as libc::c_int - '0' as i32) as libc::c_uchar;
  if b as libc::c_int <= 9i32 {
    return (b as libc::c_int <= 9i32) as libc::c_int;
  }
  b = ((a as libc::c_int | 0x20i32) - 'a' as i32) as libc::c_uchar;
  return (b as libc::c_int <= 'z' as i32 - 'a' as i32) as libc::c_int;
}
#[inline(always)]
unsafe extern "C" fn bb_ascii_toupper(mut a: libc::c_uchar) -> libc::c_uchar {
  let mut b: libc::c_uchar = (a as libc::c_int - 'a' as i32) as libc::c_uchar;
  if b as libc::c_int <= 'z' as i32 - 'a' as i32 {
    a = (a as libc::c_int - ('a' as i32 - 'A' as i32)) as libc::c_uchar
  }
  return a;
}
#[inline(always)]
unsafe extern "C" fn bb_ascii_tolower(mut a: libc::c_uchar) -> libc::c_uchar {
  let mut b: libc::c_uchar = (a as libc::c_int - 'A' as i32) as libc::c_uchar;
  if b as libc::c_int <= 'Z' as i32 - 'A' as i32 {
    a = (a as libc::c_int + ('a' as i32 - 'A' as i32)) as libc::c_uchar
  }
  return a;
}
static mut modifying_cmds: [libc::c_char; 22] = [
  97, 65, 99, 67, 100, 68, 105, 73, 74, 111, 79, 112, 80, 114, 82, 115, 120, 88, 60, 62, 126, 0,
];
unsafe extern "C" fn show_help() {
  puts(b"These features are available:\n\tPattern searches with / and ?\n\tLast command repeat with .\n\tLine marking with \'x\n\tNamed buffers with \"x\n\tSome colon mode commands with :\n\tSettable options with \":set\"\n\tSignal catching- ^C\n\tJob suspend and resume with ^Z\n\tAdapt to window re-sizes\x00"
             as *const u8 as *const libc::c_char);
}
unsafe extern "C" fn write1(mut out: *const libc::c_char) {
  fputs_unlocked(out, stdout);
}
unsafe extern "C" fn query_screen_dimensions() -> libc::c_int {
  let mut err: libc::c_int = crate::libbb::xfuncs::get_terminal_width_height(
    0,
    &mut (*ptr_to_globals).columns,
    &mut (*ptr_to_globals).rows,
  );
  if (*ptr_to_globals).rows > MAX_SCR_ROWS as libc::c_int as libc::c_uint {
    (*ptr_to_globals).rows = MAX_SCR_ROWS as libc::c_int as libc::c_uint
  }
  if (*ptr_to_globals).columns > MAX_SCR_COLS as libc::c_int as libc::c_uint {
    (*ptr_to_globals).columns = MAX_SCR_COLS as libc::c_int as libc::c_uint
  }
  return err;
}
// sleep for 'h' 1/100 seconds, return 1/0 if stdin is (ready for read)/(not ready)
unsafe extern "C" fn mysleep(mut hund: libc::c_int) -> libc::c_int {
  let mut pfd: [pollfd; 1] = [pollfd {
    fd: 0,
    events: 0,
    revents: 0,
  }; 1];
  if hund != 0 {
    crate::libbb::xfuncs_printf::fflush_all();
  }
  pfd[0].fd = 0;
  pfd[0].events = 0x1i32 as libc::c_short;
  return (crate::libbb::safe_poll::safe_poll(pfd.as_mut_ptr(), 1i32 as nfds_t, hund * 10i32) > 0)
    as libc::c_int;
}
//----- Set terminal attributes --------------------------------
unsafe extern "C" fn rawmode() {
  // no TERMIOS_CLEAR_ISIG: leave ISIG on - allow signals
  crate::libbb::xfuncs::set_termios_to_raw(
    0,
    &mut (*ptr_to_globals).term_orig,
    1i32 << 1i32 | 1i32 << 2i32,
  );
}
unsafe extern "C" fn cookmode() {
  crate::libbb::xfuncs_printf::fflush_all();
  crate::libbb::xfuncs::tcsetattr_stdin_TCSANOW(&mut (*ptr_to_globals).term_orig);
}
//----- Terminal Drawing ---------------------------------------
// The terminal is made up of 'rows' line of 'columns' columns.
// classically this would be 24 x 80.
//  screen coordinates
//  0,0     ...     0,79
//  1,0     ...     1,79
//  .       ...     .
//  .       ...     .
//  22,0    ...     22,79
//  23,0    ...     23,79   <- status line
//----- Move the cursor to row x col (count from 0, not 1) -------
unsafe extern "C" fn place_cursor(mut row: libc::c_int, mut col: libc::c_int) {
  let mut cm1: [libc::c_char; 33] = [0; 33];
  if row < 0 {
    row = 0
  }
  if row as libc::c_uint >= (*ptr_to_globals).rows {
    row = (*ptr_to_globals).rows.wrapping_sub(1i32 as libc::c_uint) as libc::c_int
  }
  if col < 0 {
    col = 0
  }
  if col as libc::c_uint >= (*ptr_to_globals).columns {
    col = (*ptr_to_globals).columns.wrapping_sub(1i32 as libc::c_uint) as libc::c_int
  }
  sprintf(
    cm1.as_mut_ptr(),
    b"\x1b[%u;%uH\x00" as *const u8 as *const libc::c_char,
    row + 1i32,
    col + 1i32,
  );
  write1(cm1.as_mut_ptr());
}
//----- Erase from cursor to end of line -----------------------
unsafe extern "C" fn clear_to_eol() {
  write1(b"\x1b[K\x00" as *const u8 as *const libc::c_char);
}
unsafe extern "C" fn go_bottom_and_clear_to_eol() {
  place_cursor(
    (*ptr_to_globals).rows.wrapping_sub(1i32 as libc::c_uint) as libc::c_int,
    0,
  );
  clear_to_eol();
}
//----- Start standout mode ------------------------------------
unsafe extern "C" fn standout_start() {
  write1(b"\x1b[7m\x00" as *const u8 as *const libc::c_char);
}
//----- End standout mode --------------------------------------
unsafe extern "C" fn standout_end() {
  write1(b"\x1b[m\x00" as *const u8 as *const libc::c_char);
}
//----- Text Movement Routines ---------------------------------
unsafe extern "C" fn begin_line(mut p: *mut libc::c_char) -> *mut libc::c_char
// return pointer to first char cur line
{
  if p > (*ptr_to_globals).text {
    p = memrchr(
      (*ptr_to_globals).text as *const libc::c_void,
      '\n' as i32,
      p.wrapping_offset_from((*ptr_to_globals).text) as libc::c_long as size_t,
    ) as *mut libc::c_char;
    if p.is_null() {
      return (*ptr_to_globals).text;
    }
    return p.offset(1);
  }
  return p;
}
unsafe extern "C" fn end_line(mut p: *mut libc::c_char) -> *mut libc::c_char
// return pointer to NL of cur line
{
  if p < (*ptr_to_globals).end.offset(-1) {
    p = memchr(
      p as *const libc::c_void,
      '\n' as i32,
      ((*ptr_to_globals).end.wrapping_offset_from(p) as libc::c_long - 1) as libc::c_ulong,
    ) as *mut libc::c_char;
    if p.is_null() {
      return (*ptr_to_globals).end.offset(-1);
    }
  }
  return p;
}
unsafe extern "C" fn dollar_line(mut p: *mut libc::c_char) -> *mut libc::c_char
// return pointer to just before NL line
{
  p = end_line(p);
  // Try to stay off of the Newline
  if *p as libc::c_int == '\n' as i32 && p.wrapping_offset_from(begin_line(p)) as libc::c_long > 0 {
    p = p.offset(-1)
  }
  return p;
}
unsafe extern "C" fn prev_line(mut p: *mut libc::c_char) -> *mut libc::c_char
// return pointer first char prev line
{
  p = begin_line(p); // goto beginning of cur line
  if p > (*ptr_to_globals).text && *p.offset(-1i32 as isize) as libc::c_int == '\n' as i32 {
    p = p.offset(-1)
  } // step to prev line
  p = begin_line(p); // goto beginning of prev line
  return p;
}
unsafe extern "C" fn next_line(mut p: *mut libc::c_char) -> *mut libc::c_char
// return pointer first char next line
{
  p = end_line(p); // step to next line
  if p < (*ptr_to_globals).end.offset(-1) && *p as libc::c_int == '\n' as i32 {
    p = p.offset(1)
  }
  return p;
}
//----- Text Information Routines ------------------------------
unsafe extern "C" fn end_screen() -> *mut libc::c_char {
  let mut q: *mut libc::c_char = std::ptr::null_mut::<libc::c_char>();
  let mut cnt: libc::c_int = 0;
  // find new bottom line
  q = (*ptr_to_globals).screenbegin;
  cnt = 0;
  while (cnt as libc::c_uint) < (*ptr_to_globals).rows.wrapping_sub(2i32 as libc::c_uint) {
    q = next_line(q);
    cnt += 1
  }
  q = end_line(q);
  return q;
}
// count line from start to stop
unsafe extern "C" fn count_lines(
  mut start: *mut libc::c_char,
  mut stop: *mut libc::c_char,
) -> libc::c_int {
  let mut q: *mut libc::c_char = std::ptr::null_mut::<libc::c_char>();
  let mut cnt: libc::c_int = 0;
  if stop < start {
    // start and stop are backwards- reverse them
    q = start;
    start = stop;
    stop = q
  }
  cnt = 0;
  stop = end_line(stop);
  while start <= stop && start <= (*ptr_to_globals).end.offset(-1) {
    start = end_line(start);
    if *start as libc::c_int == '\n' as i32 {
      cnt += 1
    }
    start = start.offset(1)
  }
  return cnt;
}
unsafe extern "C" fn find_line(mut li: libc::c_int) -> *mut libc::c_char
// find beginning of line #li
{
  let mut q: *mut libc::c_char = std::ptr::null_mut::<libc::c_char>();
  q = (*ptr_to_globals).text;
  while li > 1i32 {
    q = next_line(q);
    li -= 1
  }
  return q;
}
unsafe extern "C" fn next_tabstop(mut col: libc::c_int) -> libc::c_int {
  return col + ((*ptr_to_globals).tabstop - 1i32 - col % (*ptr_to_globals).tabstop);
}
//----- Erase the Screen[] memory ------------------------------
unsafe extern "C" fn screen_erase() {
  memset(
    (*ptr_to_globals).screen as *mut libc::c_void,
    ' ' as i32,
    (*ptr_to_globals).screensize as libc::c_ulong,
  );
  // clear new screen
}
unsafe extern "C" fn new_screen(mut ro: libc::c_int, mut co: libc::c_int) {
  let mut s: *mut libc::c_char = std::ptr::null_mut::<libc::c_char>();
  free((*ptr_to_globals).screen as *mut libc::c_void);
  (*ptr_to_globals).screensize = ro * co + 8i32;
  (*ptr_to_globals).screen = xmalloc((*ptr_to_globals).screensize as size_t) as *mut libc::c_char;
  s = (*ptr_to_globals).screen;
  // initialize the new screen. assume this will be a empty file.
  screen_erase();
  // non-existent text[] lines start with a tilde (~).
  //screen[(1 * co) + 0] = '~';
  //screen[(2 * co) + 0] = '~';
  //..
  //screen[((ro-2) * co) + 0] = '~';
  ro -= 2i32;
  loop {
    ro -= 1;
    if !(ro >= 0) {
      break;
    }
    s = s.offset(co as isize);
    *s = '~' as i32 as libc::c_char
  }
}
//----- Synchronize the cursor to Dot --------------------------
#[inline(never)]
unsafe extern "C" fn sync_cursor(
  mut d: *mut libc::c_char,
  mut row: *mut libc::c_int,
  mut col: *mut libc::c_int,
) {
  let mut beg_cur: *mut libc::c_char = std::ptr::null_mut::<libc::c_char>(); // begin and end of "d" line
  let mut tp: *mut libc::c_char = std::ptr::null_mut::<libc::c_char>(); // first char of cur line
  let mut cnt: libc::c_int = 0;
  let mut ro: libc::c_int = 0;
  let mut co: libc::c_int = 0;
  beg_cur = begin_line(d);
  let mut current_block_16: u64;
  if beg_cur < (*ptr_to_globals).screenbegin {
    // "d" is before top line on screen
    // how many lines do we have to move
    cnt = count_lines(beg_cur, (*ptr_to_globals).screenbegin); // begin and end of screen
    current_block_16 = 4352155799676625979; // last char of screen
  } else {
    let mut end_scr: *mut libc::c_char = std::ptr::null_mut::<libc::c_char>();
    end_scr = end_screen();
    if beg_cur > end_scr {
      // "d" is after bottom line on screen
      // how many lines do we have to move
      cnt = count_lines(end_scr, beg_cur); // too many lines
      if cnt as libc::c_uint
        > (*ptr_to_globals)
          .rows
          .wrapping_sub(1i32 as libc::c_uint)
          .wrapping_div(2i32 as libc::c_uint)
      {
        current_block_16 = 4352155799676625979;
      } else {
        ro = 0;
        while ro < cnt - 1i32 {
          // move screen begin the same amount
          (*ptr_to_globals).screenbegin = next_line((*ptr_to_globals).screenbegin);
          // now, move the end of screen
          end_scr = next_line(end_scr);
          end_scr = end_line(end_scr);
          ro += 1
        }
        current_block_16 = 5634871135123216486;
      }
    } else {
      current_block_16 = 5634871135123216486;
    }
  }
  match current_block_16 {
    4352155799676625979 => {
      (*ptr_to_globals).screenbegin = beg_cur;
      if cnt as libc::c_uint
        > (*ptr_to_globals)
          .rows
          .wrapping_sub(1i32 as libc::c_uint)
          .wrapping_div(2i32 as libc::c_uint)
      {
        // we moved too many lines. put "dot" in middle of screen
        cnt = 0;
        while (cnt as libc::c_uint)
          < (*ptr_to_globals)
            .rows
            .wrapping_sub(1i32 as libc::c_uint)
            .wrapping_div(2i32 as libc::c_uint)
        {
          (*ptr_to_globals).screenbegin = prev_line((*ptr_to_globals).screenbegin);
          cnt += 1
        }
      }
    }
    _ => {}
  }
  // "d" is on screen- find out which row
  tp = (*ptr_to_globals).screenbegin;
  ro = 0;
  while (ro as libc::c_uint) < (*ptr_to_globals).rows.wrapping_sub(1i32 as libc::c_uint) {
    // drive "ro" to correct row
    if tp == beg_cur {
      break;
    }
    tp = next_line(tp);
    ro += 1
  }
  // find out what col "d" is on
  co = 0;
  while tp < d {
    // drive "co" to correct column
    if *tp as libc::c_int == '\n' as i32 {
      break;
    }
    if *tp as libc::c_int == '\t' as i32 {
      // handle tabs like real vi
      if d == tp && (*ptr_to_globals).cmd_mode as libc::c_int != 0 {
        break;
      }
      co = next_tabstop(co)
    } else if (*tp as libc::c_uchar as libc::c_int) < ' ' as i32 || *tp as libc::c_int == 0x7fi32 {
      co += 1
      // display as ^X, use 2 columns
    }
    co += 1;
    tp = tp.offset(1)
  }
  // "co" is the column where "dot" is.
  // The screen has "columns" columns.
  // The currently displayed columns are  0+offset -- columns+ofset
  // |-------------------------------------------------------------|
  //               ^ ^                                ^
  //        offset | |------- columns ----------------|
  //
  // If "co" is already in this range then we do not have to adjust offset
  //      but, we do have to subtract the "offset" bias from "co".
  // If "co" is outside this range then we have to change "offset".
  // If the first char of a line is a tab the cursor will try to stay
  //  in column 7, but we have to set offset to 0.
  if co < 0 + (*ptr_to_globals).offset {
    (*ptr_to_globals).offset = co
  }
  if co as libc::c_uint
    >= (*ptr_to_globals)
      .columns
      .wrapping_add((*ptr_to_globals).offset as libc::c_uint)
  {
    (*ptr_to_globals).offset = (co as libc::c_uint)
      .wrapping_sub((*ptr_to_globals).columns)
      .wrapping_add(1i32 as libc::c_uint) as libc::c_int
  }
  // if the first char of the line is a tab, and "dot" is sitting on it
  //  force offset to 0.
  if d == beg_cur && *d as libc::c_int == '\t' as i32 {
    (*ptr_to_globals).offset = 0
  }
  co -= (*ptr_to_globals).offset;
  *row = ro;
  *col = co;
}
//----- Format a text[] line into a buffer ---------------------
unsafe extern "C" fn format_line(mut src: *mut libc::c_char) -> *mut libc::c_char
/*, int li*/ {
  let mut c: libc::c_uchar = 0; // [MAX_SCR_COLS + MAX_TABSTOP * 2]
  let mut co: libc::c_int = 0; // char in col 0 in non-existent lines is '~'
  let mut ofs: libc::c_int = (*ptr_to_globals).offset;
  let mut dest: *mut libc::c_char = (*ptr_to_globals).scr_out_buf.as_mut_ptr();
  c = '~' as i32 as libc::c_uchar;
  co = 0;
  while (co as libc::c_uint)
    < (*ptr_to_globals)
      .columns
      .wrapping_add((*ptr_to_globals).tabstop as libc::c_uint)
  {
    // have we gone past the end?
    if src < (*ptr_to_globals).end {
      let fresh0 = src;
      src = src.offset(1);
      c = *fresh0 as libc::c_uchar;
      if c as libc::c_int == '\n' as i32 {
        break;
      }
      if c as libc::c_int & 0x80i32 != 0
        && !(c as libc::c_int >= ' ' as i32 && (c as libc::c_int) < 0x7fi32)
      {
        c = '.' as i32 as libc::c_uchar
      }
      if (c as libc::c_int) < ' ' as i32 || c as libc::c_int == 0x7fi32 {
        if c as libc::c_int == '\t' as i32 {
          c = ' ' as i32 as libc::c_uchar;
          //      co %    8     !=     7
          while co % (*ptr_to_globals).tabstop != (*ptr_to_globals).tabstop - 1i32 {
            let fresh1 = co;
            co = co + 1;
            *dest.offset(fresh1 as isize) = c as libc::c_char
          }
        } else {
          let fresh2 = co;
          co = co + 1;
          *dest.offset(fresh2 as isize) = '^' as i32 as libc::c_char;
          if c as libc::c_int == 0x7fi32 {
            c = '?' as i32 as libc::c_uchar
          } else {
            c = (c as libc::c_int + '@' as i32) as libc::c_uchar
          }
          // Ctrl-X -> 'X'
        }
      }
    }
    let fresh3 = co;
    co = co + 1;
    *dest.offset(fresh3 as isize) = c as libc::c_char;
    // discard scrolled-off-to-the-left portion,
    // in tabstop-sized pieces
    if ofs >= (*ptr_to_globals).tabstop && co >= (*ptr_to_globals).tabstop {
      memmove(
        dest as *mut libc::c_void,
        dest.offset((*ptr_to_globals).tabstop as isize) as *const libc::c_void,
        co as libc::c_ulong,
      );
      co -= (*ptr_to_globals).tabstop;
      ofs -= (*ptr_to_globals).tabstop
    }
    if src >= (*ptr_to_globals).end {
      break;
    }
  }
  // check "short line, gigantic offset" case
  if co < ofs {
    ofs = co
  }
  // discard last scrolled off part
  co -= ofs;
  dest = dest.offset(ofs as isize);
  // fill the rest with spaces
  if (co as libc::c_uint) < (*ptr_to_globals).columns {
    memset(
      &mut *dest.offset(co as isize) as *mut libc::c_char as *mut libc::c_void,
      ' ' as i32,
      (*ptr_to_globals).columns.wrapping_sub(co as libc::c_uint) as libc::c_ulong,
    );
  }
  return dest;
}
//----- Refresh the changed screen lines -----------------------
// Copy the source line from text[] into the buffer and note
// if the current screenline is different from the new buffer.
// If they differ then that line needs redrawing on the terminal.
//
unsafe extern "C" fn refresh(mut full_screen: libc::c_int) {
  let mut li: libc::c_int = 0; // pointer into text[] and screen[]
  let mut changed: libc::c_int = 0; // where cursor will be (on "dot")
  let mut tp: *mut libc::c_char = std::ptr::null_mut::<libc::c_char>(); // index into text[] of top line
  let mut sp: *mut libc::c_char = std::ptr::null_mut::<libc::c_char>();
  if 1i32 != 0 && (*ptr_to_globals).get_rowcol_error == 0 {
    let mut c: libc::c_uint = (*ptr_to_globals).columns;
    let mut r: libc::c_uint = (*ptr_to_globals).rows;
    query_screen_dimensions();
    full_screen = (full_screen as libc::c_uint
      | (c.wrapping_sub((*ptr_to_globals).columns) | r.wrapping_sub((*ptr_to_globals).rows)))
      as libc::c_int
  }
  sync_cursor(
    (*ptr_to_globals).dot,
    &mut (*ptr_to_globals).crow,
    &mut (*ptr_to_globals).ccol,
  );
  tp = (*ptr_to_globals).screenbegin;
  // compare text[] to screen[] and mark screen[] lines that need updating
  li = 0; // column start & end
  while (li as libc::c_uint) < (*ptr_to_globals).rows.wrapping_sub(1i32 as libc::c_uint) {
    let mut current_block_34: u64;
    let mut cs: libc::c_int = 0;
    let mut ce: libc::c_int = 0;
    let mut out_buf: *mut libc::c_char = std::ptr::null_mut::<libc::c_char>();
    // format current text line
    out_buf = format_line(tp);
    // skip to the end of the current text[] line
    if tp < (*ptr_to_globals).end {
      let mut t: *mut libc::c_char = memchr(
        tp as *const libc::c_void,
        '\n' as i32,
        (*ptr_to_globals).end.wrapping_offset_from(tp) as libc::c_long as libc::c_ulong,
      ) as *mut libc::c_char;
      if t.is_null() {
        t = (*ptr_to_globals).end.offset(-1)
      }
      tp = t.offset(1)
    }
    // see if there are any changes between virtual screen and out_buf
    changed = 0; // assume no change
    cs = 0; // start of screen line
    ce = (*ptr_to_globals).columns.wrapping_sub(1i32 as libc::c_uint) as libc::c_int;
    sp = &mut *(*ptr_to_globals)
      .screen
      .offset((li as libc::c_uint).wrapping_mul((*ptr_to_globals).columns) as isize)
      as *mut libc::c_char;
    if full_screen != 0 {
      current_block_34 = 4283963503649295902;
    } else {
      // compare newly formatted buffer with virtual screen
      // look forward for first difference between buf and screen
      while cs <= ce {
        if *out_buf.offset(cs as isize) as libc::c_int != *sp.offset(cs as isize) as libc::c_int {
          changed = 1i32; // mark for redraw
          break;
        } else {
          cs += 1
        }
      }
      // look backward for last difference between out_buf and screen
      while ce >= cs {
        if *out_buf.offset(ce as isize) as libc::c_int != *sp.offset(ce as isize) as libc::c_int {
          changed = 1i32; // mark for redraw
          break;
        } else {
          ce -= 1
        }
      }
      // now, cs is index of first diff, and ce is index of last diff
      // if horz offset has changed, force a redraw
      if (*ptr_to_globals).offset != (*ptr_to_globals).refresh__old_offset {
        current_block_34 = 4283963503649295902;
      } else {
        current_block_34 = 1118134448028020070;
      }
    }
    match current_block_34 {
      4283963503649295902 =>
      // force re-draw of every single column from 0 - columns-1
      {
        changed = 1i32
      }
      _ => {}
    }
    // make a sanity check of columns indexes
    if cs < 0 {
      cs = 0
    }
    if ce as libc::c_uint > (*ptr_to_globals).columns.wrapping_sub(1i32 as libc::c_uint) {
      ce = (*ptr_to_globals).columns.wrapping_sub(1i32 as libc::c_uint) as libc::c_int
    }
    if cs > ce {
      cs = 0;
      ce = (*ptr_to_globals).columns.wrapping_sub(1i32 as libc::c_uint) as libc::c_int
    }
    // is there a change between virtual screen and out_buf
    if changed != 0 {
      // copy changed part of buffer to virtual screen
      memcpy(
        sp.offset(cs as isize) as *mut libc::c_void,
        out_buf.offset(cs as isize) as *const libc::c_void,
        (ce - cs + 1i32) as libc::c_ulong,
      );
      place_cursor(li, cs);
      // write line out to terminal
      libc::fwrite(
        &mut *sp.offset(cs as isize) as *mut libc::c_char as *const libc::c_void,
        (ce - cs + 1) as usize,
        1,
        stdout,
      );
    }
    li += 1
  }
  place_cursor((*ptr_to_globals).crow, (*ptr_to_globals).ccol);
  (*ptr_to_globals).refresh__old_offset = (*ptr_to_globals).offset;
}
//----- Force refresh of all Lines -----------------------------
unsafe extern "C" fn redraw(mut full_screen: libc::c_int) {
  // cursor to top,left; clear to the end of screen
  write1(b"\x1b[H\x1b[J\x00" as *const u8 as *const libc::c_char); // erase the internal screen buffer
  screen_erase(); // force status update
  (*ptr_to_globals).last_status_cksum = 0; // this will redraw the entire display
  refresh(full_screen);
  show_status_line();
}
//----- Flash the screen  --------------------------------------
unsafe extern "C" fn flash(mut h: libc::c_int) {
  standout_start();
  redraw(1i32);
  mysleep(h);
  standout_end();
  redraw(1i32);
}
unsafe extern "C" fn indicate_error() {
  if (*ptr_to_globals).vi_setops as libc::c_int & 8i32 == 0 {
    write1(b"\x07\x00" as *const u8 as *const libc::c_char);
  } else {
    flash(10i32);
  };
}
//----- IO Routines --------------------------------------------
unsafe extern "C" fn readit() -> libc::c_int
// read (maybe cursor) key from stdin
{
  let mut c: libc::c_int = 0;
  crate::libbb::xfuncs_printf::fflush_all();
  // Wait for input. TIMEOUT = -1 makes read_key wait even
  // on nonblocking stdin.
  // Note: read_key sets errno to 0 on success.
  loop
  // paranoia
  {
    c = crate::libbb::read_key::read_key(0i32, (*ptr_to_globals).readbuffer.as_mut_ptr(), -1i32)
      as libc::c_int;
    if c == -1i32 {
      // EOF/error
      if *bb_errno == 11i32 {
        continue; // terminal to "cooked"
      }
      go_bottom_and_clear_to_eol();
      cookmode();
      crate::libbb::verror_msg::bb_simple_error_msg_and_die(
        b"can\'t read user input\x00" as *const u8 as *const libc::c_char,
      );
    } else {
      return c;
    }
  }
}
unsafe extern "C" fn get_one_char() -> libc::c_int {
  let mut c: libc::c_int = 0;
  if (*ptr_to_globals).adding2q == 0 {
    // we are not adding to the q.
    // but, we may be reading from a saved q.
    // (checking "ioq" for NULL is wrong, it's not reset to NULL
    // when done - "ioq_start" is reset instead).
    if !(*ptr_to_globals).ioq_start.is_null() {
      // there is a queue to get chars from.
      // careful with correct sign expansion!
      let fresh4 = (*ptr_to_globals).ioq;
      (*ptr_to_globals).ioq = (*ptr_to_globals).ioq.offset(1);
      c = *fresh4 as libc::c_uchar as libc::c_int;
      if c != '\u{0}' as i32 {
        return c;
      }
      // read from STDIN:
      free((*ptr_to_globals).ioq_start as *mut libc::c_void);
      (*ptr_to_globals).ioq_start = std::ptr::null_mut::<libc::c_char>()
    }
    return readit();
  }
  // the end of the q
  // we are adding STDIN chars to q.
  c = readit();
  if (*ptr_to_globals).lmc_len as libc::c_uint
    >= ((::std::mem::size_of::<[libc::c_char; 128]>() as libc::c_ulong)
      .wrapping_div(::std::mem::size_of::<libc::c_char>() as libc::c_ulong) as libc::c_uint)
      .wrapping_sub(1i32 as libc::c_uint)
  {
    // last_modifying_cmd[] is too small, can't remeber the cmd
    // - drop it
    (*ptr_to_globals).adding2q = 0 as smallint;
    (*ptr_to_globals).lmc_len = 0
  } else {
    let fresh5 = (*ptr_to_globals).lmc_len;
    (*ptr_to_globals).lmc_len = (*ptr_to_globals).lmc_len + 1;
    (*ptr_to_globals).last_modifying_cmd[fresh5 as usize] = c as libc::c_char
  }
  return c;
}
// Get input line (uses "status line" area)
unsafe extern "C" fn get_input_line(mut prompt: *const libc::c_char) -> *mut libc::c_char {
  // char [MAX_INPUT_LEN]
  let mut c: libc::c_int = 0; // force status update
  let mut i: libc::c_int = 0; // write out the :, /, or ? prompt
  strcpy((*ptr_to_globals).get_input_line__buf.as_mut_ptr(), prompt); // this is end of input
  (*ptr_to_globals).last_status_cksum = 0;
  go_bottom_and_clear_to_eol();
  write1(prompt);
  i = strlen((*ptr_to_globals).get_input_line__buf.as_mut_ptr()) as libc::c_int;
  while i < MAX_INPUT_LEN as libc::c_int {
    c = get_one_char();
    if c == '\n' as i32 || c == '\r' as i32 || c == 27i32 {
      break;
    }
    if c == (*ptr_to_globals).term_orig.c_cc[2] as libc::c_int || c == 8i32 || c == 127i32 {
      // user wants to erase prev char
      i -= 1; // erase char on screen
      (*ptr_to_globals).get_input_line__buf[i as usize] = '\u{0}' as i32 as libc::c_char;
      write1(b"\x08 \x08\x00" as *const u8 as *const libc::c_char);
      if i <= 0 {
        break;
      }
    } else if c > 0 && c < 256i32 {
      // exclude Unicode
      // (TODO: need to handle Unicode)
      (*ptr_to_globals).get_input_line__buf[i as usize] = c as libc::c_char;
      i += 1;
      (*ptr_to_globals).get_input_line__buf[i as usize] = '\u{0}' as i32 as libc::c_char;
      crate::libbb::xfuncs_printf::bb_putchar(c);
    }
  }
  refresh(0i32);
  return (*ptr_to_globals).get_input_line__buf.as_mut_ptr();
}
unsafe extern "C" fn Hit_Return() {
  let mut c: libc::c_int = 0;
  standout_start();
  write1(b"[Hit return to continue]\x00" as *const u8 as *const libc::c_char);
  standout_end();
  loop {
    c = get_one_char();
    if !(c != '\n' as i32 && c != '\r' as i32) {
      break;
    }
  }
  redraw(1i32);
  // force redraw all
}
//----- Draw the status line at bottom of the screen -------------
// show file status on status line
unsafe extern "C" fn format_edit_status() -> libc::c_int {
  static mut cmd_mode_indicator: [libc::c_char; 5] = [45, 73, 82, 45, 0];
  let mut cur: libc::c_int = 0;
  let mut percent: libc::c_int = 0;
  let mut ret: libc::c_int = 0;
  let mut trunc_at: libc::c_int = 0;
  // modified_count is now a counter rather than a flag.  this
  // helps reduce the amount of line counting we need to do.
  // (this will cause a mis-reporting of modified status
  // once every MAXINT editing operations.)
  // it would be nice to do a similar optimization here -- if
  // we haven't done a motion that could have changed which line
  // we're on, then we shouldn't have to do this count_lines()
  cur = count_lines((*ptr_to_globals).text, (*ptr_to_globals).dot);
  // count_lines() is expensive.
  // Call it only if something was changed since last time
  // we were here:
  if (*ptr_to_globals).modified_count != (*ptr_to_globals).last_modified_count {
    (*ptr_to_globals).format_edit_status__tot =
      cur + count_lines((*ptr_to_globals).dot, (*ptr_to_globals).end.offset(-1)) - 1i32;
    (*ptr_to_globals).last_modified_count = (*ptr_to_globals).modified_count
  }
  //    current line         percent
  //   -------------    ~~ ----------
  //    total lines            100
  if (*ptr_to_globals).format_edit_status__tot > 0 {
    percent = 100i32 * cur / (*ptr_to_globals).format_edit_status__tot
  } else {
    (*ptr_to_globals).format_edit_status__tot = 0; // it all fit
    cur = (*ptr_to_globals).format_edit_status__tot;
    percent = 100i32
  }
  trunc_at = if (*ptr_to_globals).columns < (200i32 - 1i32) as libc::c_uint {
    (*ptr_to_globals).columns
  } else {
    (200i32 - 1i32) as libc::c_uint
  } as libc::c_int;
  ret = snprintf(
    (*ptr_to_globals).status_buffer.as_mut_ptr(),
    (trunc_at + 1i32) as libc::c_ulong,
    b"%c %s%s%s %d/%d %d%%\x00" as *const u8 as *const libc::c_char,
    cmd_mode_indicator[((*ptr_to_globals).cmd_mode as libc::c_int & 3i32) as usize] as libc::c_int,
    if !(*ptr_to_globals).current_filename.is_null() {
      (*ptr_to_globals).current_filename
    } else {
      b"No file\x00" as *const u8 as *const libc::c_char
    },
    if (*ptr_to_globals).readonly_mode as libc::c_int != 0 {
      b" [Readonly]\x00" as *const u8 as *const libc::c_char
    } else {
      b"\x00" as *const u8 as *const libc::c_char
    },
    if (*ptr_to_globals).modified_count != 0 {
      b" [Modified]\x00" as *const u8 as *const libc::c_char
    } else {
      b"\x00" as *const u8 as *const libc::c_char
    },
    cur,
    (*ptr_to_globals).format_edit_status__tot,
    percent,
  );
  if ret >= 0 && ret < trunc_at {
    return ret;
  }
  return trunc_at;
  // had to truncate
}
unsafe extern "C" fn bufsum(mut buf: *mut libc::c_char, mut count: libc::c_int) -> libc::c_int {
  let mut sum: libc::c_int = 0;
  let mut e: *mut libc::c_char = buf.offset(count as isize);
  while buf < e {
    let fresh6 = buf;
    buf = buf.offset(1);
    sum += *fresh6 as libc::c_uchar as libc::c_int
  }
  return sum;
}
/* ENABLE_FEATURE_VI_UNDO */
//#define Ureg           (G.Ureg          )
/* "" but has space for 2 chars: */
unsafe extern "C" fn show_status_line() {
  let mut cnt: libc::c_int = 0;
  let mut cksum: libc::c_int = 0;
  // either we already have an error or status message, or we
  // create one.
  if (*ptr_to_globals).have_status_msg == 0 {
    cnt = format_edit_status(); // remember if we have seen this line
    cksum = bufsum((*ptr_to_globals).status_buffer.as_mut_ptr(), cnt)
  }
  if (*ptr_to_globals).have_status_msg != 0
    || cnt > 0 && (*ptr_to_globals).last_status_cksum != cksum
  {
    (*ptr_to_globals).last_status_cksum = cksum;
    go_bottom_and_clear_to_eol();
    write1((*ptr_to_globals).status_buffer.as_mut_ptr());
    if (*ptr_to_globals).have_status_msg != 0 {
      if (strlen((*ptr_to_globals).status_buffer.as_mut_ptr()) as libc::c_int
        - ((*ptr_to_globals).have_status_msg - 1i32)) as libc::c_uint
        > (*ptr_to_globals).columns.wrapping_sub(1i32 as libc::c_uint)
      {
        (*ptr_to_globals).have_status_msg = 0;
        Hit_Return();
      }
      (*ptr_to_globals).have_status_msg = 0
    }
    place_cursor((*ptr_to_globals).crow, (*ptr_to_globals).ccol);
    // put cursor back in correct place
  }
  crate::libbb::xfuncs_printf::fflush_all();
}
//----- format the status buffer, the bottom line of screen ------
unsafe extern "C" fn status_line(mut format: *const libc::c_char, mut args: ...) {
  let mut args_0: ::std::ffi::VaListImpl;
  args_0 = args.clone();
  vsnprintf(
    (*ptr_to_globals).status_buffer.as_mut_ptr(),
    200i32 as libc::c_ulong,
    format,
    args_0.as_va_list(),
  );
  (*ptr_to_globals).have_status_msg = 1i32;
}
// put a message on the bottom line
unsafe extern "C" fn status_line_bold(mut format: *const libc::c_char, mut args: ...) {
  let mut args_0: ::std::ffi::VaListImpl;
  args_0 = args.clone();
  strcpy(
    (*ptr_to_globals).status_buffer.as_mut_ptr(),
    b"\x1b[7m\x00" as *const u8 as *const libc::c_char,
  );
  vsnprintf(
    (*ptr_to_globals).status_buffer.as_mut_ptr().offset(
      (::std::mem::size_of::<[libc::c_char; 5]>() as libc::c_ulong)
        .wrapping_sub(1i32 as libc::c_ulong) as isize,
    ),
    (200i32 as libc::c_ulong)
      .wrapping_sub(::std::mem::size_of::<[libc::c_char; 5]>() as libc::c_ulong)
      .wrapping_sub(::std::mem::size_of::<[libc::c_char; 4]>() as libc::c_ulong),
    format,
    args_0.as_va_list(),
  );
  strcat(
    (*ptr_to_globals).status_buffer.as_mut_ptr(),
    b"\x1b[m\x00" as *const u8 as *const libc::c_char,
  );
  (*ptr_to_globals).have_status_msg = (1i32 as libc::c_ulong)
    .wrapping_add(
      (::std::mem::size_of::<[libc::c_char; 5]>() as libc::c_ulong)
        .wrapping_sub(1i32 as libc::c_ulong),
    )
    .wrapping_add(
      (::std::mem::size_of::<[libc::c_char; 4]>() as libc::c_ulong)
        .wrapping_sub(1i32 as libc::c_ulong),
    ) as libc::c_int;
}
unsafe extern "C" fn status_line_bold_errno(mut fn_0: *const libc::c_char) {
  status_line_bold(b"\'%s\' %m\x00" as *const u8 as *const libc::c_char, fn_0);
}
// copy s to buf, convert unprintable
unsafe extern "C" fn print_literal(mut buf: *mut libc::c_char, mut s: *const libc::c_char) {
  let mut d: *mut libc::c_char = std::ptr::null_mut::<libc::c_char>(); // 0x40
  let mut c: libc::c_uchar = 0;
  *buf.offset(0) = '\u{0}' as i32 as libc::c_char;
  if *s.offset(0) == 0 {
    s = b"(NULL)\x00" as *const u8 as *const libc::c_char
  }
  d = buf;
  while *s != 0 {
    let mut c_is_no_print: libc::c_int = 0;
    c = *s as libc::c_uchar;
    c_is_no_print = (c as libc::c_int & 0x80i32 != 0
      && !(c as libc::c_int >= ' ' as i32 && (c as libc::c_int) < 0x7fi32))
      as libc::c_int;
    if c_is_no_print != 0 {
      strcpy(d, b"\x1b[m\x00" as *const u8 as *const libc::c_char);
      d = d.offset(
        (::std::mem::size_of::<[libc::c_char; 4]>() as libc::c_ulong)
          .wrapping_sub(1i32 as libc::c_ulong) as isize,
      );
      c = '.' as i32 as libc::c_uchar
    }
    if (c as libc::c_int) < ' ' as i32 || c as libc::c_int == 0x7fi32 {
      let fresh7 = d;
      d = d.offset(1);
      *fresh7 = '^' as i32 as libc::c_char;
      c = (c as libc::c_int | '@' as i32) as libc::c_uchar;
      if c as libc::c_int == 0x7fi32 {
        c = '?' as i32 as libc::c_uchar
      }
    }
    let fresh8 = d;
    d = d.offset(1);
    *fresh8 = c as libc::c_char;
    *d = '\u{0}' as i32 as libc::c_char;
    if c_is_no_print != 0 {
      strcpy(d, b"\x1b[7m\x00" as *const u8 as *const libc::c_char);
      d = d.offset(
        (::std::mem::size_of::<[libc::c_char; 5]>() as libc::c_ulong)
          .wrapping_sub(1i32 as libc::c_ulong) as isize,
      )
    }
    if *s as libc::c_int == '\n' as i32 {
      let fresh9 = d;
      d = d.offset(1);
      *fresh9 = '$' as i32 as libc::c_char;
      *d = '\u{0}' as i32 as libc::c_char
    }
    if d.wrapping_offset_from(buf) as libc::c_long
      > (MAX_INPUT_LEN as libc::c_int - 10i32) as libc::c_long
    {
      break;
    }
    s = s.offset(1)
  }
}
unsafe extern "C" fn not_implemented(mut s: *const libc::c_char) {
  let mut buf: [libc::c_char; 128] = [0; 128];
  print_literal(buf.as_mut_ptr(), s);
  status_line_bold(
    b"\'%s\' is not implemented\x00" as *const u8 as *const libc::c_char,
    buf.as_mut_ptr(),
  );
}
//----- Block insert/delete, undo ops --------------------------
unsafe extern "C" fn text_yank(
  mut p: *mut libc::c_char,
  mut q: *mut libc::c_char,
  mut dest: libc::c_int,
) -> *mut libc::c_char
// copy text into a register
{
  let mut cnt: libc::c_int = q.wrapping_offset_from(p) as libc::c_long as libc::c_int;
  if cnt < 0 {
    // they are backwards- reverse them
    p = q; //  if already a yank register, free it
    cnt = -cnt
  } // default to D-reg
  free((*ptr_to_globals).reg[dest as usize] as *mut libc::c_void);
  (*ptr_to_globals).reg[dest as usize] = crate::libbb::xfuncs_printf::xstrndup(p, cnt + 1i32);
  return p;
}
unsafe extern "C" fn what_reg() -> libc::c_char {
  let mut c: libc::c_char = 0;
  c = 'D' as i32 as libc::c_char;
  if (*ptr_to_globals).YDreg as libc::c_int <= 25i32 {
    c = ('a' as i32 + (*ptr_to_globals).YDreg as libc::c_char as libc::c_int) as libc::c_char
  }
  if (*ptr_to_globals).YDreg as libc::c_int == 26i32 {
    c = 'D' as i32 as libc::c_char
  }
  if (*ptr_to_globals).YDreg as libc::c_int == 27i32 {
    c = 'U' as i32 as libc::c_char
  }
  return c;
}
unsafe extern "C" fn check_context(mut cmd: libc::c_char) {
  // A context is defined to be "modifying text"
  // Any modifying command establishes a new context.
  if (*ptr_to_globals).dot < (*ptr_to_globals).context_start
    || (*ptr_to_globals).dot > (*ptr_to_globals).context_end
  {
    if !strchr(modifying_cmds.as_ptr(), cmd as libc::c_int).is_null() {
      // we are trying to modify text[]- make this the current context
      (*ptr_to_globals).mark[27] = (*ptr_to_globals).mark[26]; // move cur to prev
                                                               //loiter= start_loiter= now;
      (*ptr_to_globals).mark[26] = (*ptr_to_globals).dot; // move local to cur
      (*ptr_to_globals).context_start = prev_line(prev_line((*ptr_to_globals).dot));
      (*ptr_to_globals).context_end = next_line(next_line((*ptr_to_globals).dot))
    }
  };
}
unsafe extern "C" fn swap_context(mut p: *mut libc::c_char) -> *mut libc::c_char
// goto new context for '' command make this the current context
{
  let mut tmp: *mut libc::c_char = std::ptr::null_mut::<libc::c_char>();
  // the current context is in mark[26]
  // the previous context is in mark[27]
  // only swap context if other context is valid
  if (*ptr_to_globals).text <= (*ptr_to_globals).mark[27]
    && (*ptr_to_globals).mark[27] <= (*ptr_to_globals).end.offset(-1)
  {
    tmp = (*ptr_to_globals).mark[27];
    (*ptr_to_globals).mark[27] = p;
    p = tmp;
    (*ptr_to_globals).mark[26] = p;
    (*ptr_to_globals).context_start = prev_line(prev_line(prev_line(p)));
    (*ptr_to_globals).context_end = next_line(next_line(next_line(p)))
  }
  return p;
}
// open a hole in text[]
// might reallocate text[]! use p += text_hole_make(p, ...),
// and be careful to not use pointers into potentially freed text[]!
unsafe extern "C" fn text_hole_make(mut p: *mut libc::c_char, mut size: libc::c_int) -> uintptr_t
// at "p", make a 'size' byte hole
{
  let mut bias: uintptr_t = 0 as uintptr_t; // adjust the new END
  if size <= 0 {
    return bias;
  } // clear new hole
  (*ptr_to_globals).end = (*ptr_to_globals).end.offset(size as isize);
  if (*ptr_to_globals).end
    >= (*ptr_to_globals)
      .text
      .offset((*ptr_to_globals).text_size as isize)
  {
    let mut new_text: *mut libc::c_char = std::ptr::null_mut::<libc::c_char>();
    (*ptr_to_globals).text_size = ((*ptr_to_globals).text_size as libc::c_long
      + ((*ptr_to_globals).end.wrapping_offset_from(
        (*ptr_to_globals)
          .text
          .offset((*ptr_to_globals).text_size as isize),
      ) as libc::c_long
        + 10240i32 as libc::c_long)) as libc::c_int;
    new_text = crate::libbb::xfuncs_printf::xrealloc(
      (*ptr_to_globals).text as *mut libc::c_void,
      (*ptr_to_globals).text_size as size_t,
    ) as *mut libc::c_char;
    bias = new_text.wrapping_offset_from((*ptr_to_globals).text) as libc::c_long as uintptr_t;
    (*ptr_to_globals).screenbegin = (*ptr_to_globals).screenbegin.offset(bias as isize);
    (*ptr_to_globals).dot = (*ptr_to_globals).dot.offset(bias as isize);
    (*ptr_to_globals).end = (*ptr_to_globals).end.offset(bias as isize);
    p = p.offset(bias as isize);
    let mut i: libc::c_int = 0;
    i = 0;
    while (i as libc::c_uint)
      < (::std::mem::size_of::<[*mut libc::c_char; 28]>() as libc::c_ulong)
        .wrapping_div(::std::mem::size_of::<*mut libc::c_char>() as libc::c_ulong)
        as libc::c_uint
    {
      if !(*ptr_to_globals).mark[i as usize].is_null() {
        (*ptr_to_globals).mark[i as usize] =
          (*ptr_to_globals).mark[i as usize].offset(bias as isize)
      }
      i += 1
    }
    (*ptr_to_globals).text = new_text
  }
  memmove(
    p.offset(size as isize) as *mut libc::c_void,
    p as *const libc::c_void,
    (*ptr_to_globals)
      .end
      .offset(-(size as isize))
      .wrapping_offset_from(p) as libc::c_long as libc::c_ulong,
  );
  memset(p as *mut libc::c_void, ' ' as i32, size as libc::c_ulong);
  return bias;
}
// close a hole in text[] - delete "p" through "q", inclusive
// "undo" value indicates if this operation should be undo-able
unsafe extern "C" fn text_hole_delete(
  mut p: *mut libc::c_char,
  mut q: *mut libc::c_char,
  mut undo: libc::c_int,
) -> *mut libc::c_char {
  let mut src: *mut libc::c_char = std::ptr::null_mut::<libc::c_char>();
  let mut dest: *mut libc::c_char = std::ptr::null_mut::<libc::c_char>();
  let mut cnt: libc::c_int = 0;
  let mut hole_size: libc::c_int = 0;
  // move forwards, from beginning
  // assume p <= q
  src = q.offset(1);
  dest = p;
  if q < p {
    // they are backward- swap them
    src = p.offset(1); // just delete the end of the buffer
    dest = q
  } // adjust the new END
  hole_size = (q.wrapping_offset_from(p) as libc::c_long + 1) as libc::c_int; // make sure dest in below end-1
  cnt = (*ptr_to_globals).end.wrapping_offset_from(src) as libc::c_long as libc::c_int; // keep pointers valid
  match undo {
    1 => {
      undo_push(p, hole_size as libc::c_uint, 1i32 as libc::c_uchar);
    }
    2 => {
      undo_push(p, hole_size as libc::c_uint, 3i32 as libc::c_uchar);
    }
    3 => {
      undo_push(p, hole_size as libc::c_uint, 5i32 as libc::c_uchar);
    }
    0 | _ => {}
  }
  (*ptr_to_globals).modified_count -= 1;
  if !(src < (*ptr_to_globals).text || src > (*ptr_to_globals).end) {
    if !(dest < (*ptr_to_globals).text || dest >= (*ptr_to_globals).end) {
      (*ptr_to_globals).modified_count += 1;
      if !(src >= (*ptr_to_globals).end) {
        memmove(
          dest as *mut libc::c_void,
          src as *const libc::c_void,
          cnt as libc::c_ulong,
        );
      }
      (*ptr_to_globals).end = (*ptr_to_globals).end.offset(-(hole_size as isize));
      if dest >= (*ptr_to_globals).end {
        dest = (*ptr_to_globals).end.offset(-1)
      }
      if (*ptr_to_globals).end <= (*ptr_to_globals).text {
        (*ptr_to_globals).end = (*ptr_to_globals).text;
        dest = (*ptr_to_globals).end
      }
    }
  }
  return dest;
}
// Flush any queued objects to the undo stack
unsafe extern "C" fn undo_queue_commit() {
  // Pushes the queue object onto the undo stack
  if (*ptr_to_globals).undo_q > 0 {
    // Deleted character undo events grow from the end
    undo_push(
      (*ptr_to_globals)
        .undo_queue
        .as_mut_ptr()
        .offset(256)
        .offset(-((*ptr_to_globals).undo_q as isize)),
      (*ptr_to_globals).undo_q as libc::c_uint,
      ((*ptr_to_globals).undo_queue_state as libc::c_int | 32i32) as libc::c_uchar,
    );
    (*ptr_to_globals).undo_queue_state = 64i32 as libc::c_char;
    (*ptr_to_globals).undo_q = 0
  };
}
unsafe extern "C" fn flush_undo_data() {
  let mut undo_entry: *mut undo_object = std::ptr::null_mut();
  while !(*ptr_to_globals).undo_stack_tail.is_null() {
    undo_entry = (*ptr_to_globals).undo_stack_tail;
    (*ptr_to_globals).undo_stack_tail = (*undo_entry).prev;
    free(undo_entry as *mut libc::c_void);
  }
}
/* FEATURE_VI_YANKMARK */
// Undo functions and hooks added by Jody Bruchon (jody@jodybruchon.com)
// Add to the undo stack
unsafe extern "C" fn undo_push(
  mut src: *mut libc::c_char,
  mut length: libc::c_uint,
  mut u_type: u8,
) {
  let mut undo_entry: *mut undo_object = std::ptr::null_mut();
  // "u_type" values
  // UNDO_INS: insertion, undo will remove from buffer
  // UNDO_DEL: deleted text, undo will restore to buffer
  // UNDO_{INS,DEL}_CHAIN: Same as above but also calls undo_pop() when complete
  // The CHAIN operations are for handling multiple operations that the user
  // performs with a single action, i.e. REPLACE mode or find-and-replace commands
  // UNDO_{INS,DEL}_QUEUED: If queuing feature is enabled, allow use of the queue
  // for the INS/DEL operation. The raw values should be equal to the values of
  // UNDO_{INS,DEL} ORed with UNDO_QUEUED_FLAG
  // This undo queuing functionality groups multiple character typing or backspaces
  // into a single large undo object. This greatly reduces calls to malloc() for
  // single-character operations while typing and has the side benefit of letting
  // an undo operation remove chunks of text rather than a single character.
  match u_type as libc::c_int {
    64 => {
      // Just in case this ever happens...
      return;
    }
    5 => {
      if length != 1i32 as libc::c_uint {
        return;
      } // Only queue single characters
      's_73: {
        match (*ptr_to_globals).undo_queue_state as libc::c_int {
          64 => (*ptr_to_globals).undo_queue_state = 1i32 as libc::c_char,
          1 => {}
          0 => {
            // Switch from storing inserted text to deleted text
            undo_queue_commit();
            undo_push(src, length, 5i32 as libc::c_uchar);
            return;
          }
          _ => {
            break 's_73;
          }
        }
        (*ptr_to_globals).undo_queue_spos = src;
        (*ptr_to_globals).undo_q += 1;
        (*ptr_to_globals).undo_queue[(256i32 - (*ptr_to_globals).undo_q) as usize] = *src;
        // If queue is full, dump it into an object
        if (*ptr_to_globals).undo_q == 256i32 {
          undo_queue_commit();
        }
        return;
      }
    }
    4 => {
      if length < 1i32 as libc::c_uint {
        return;
      }
      's_145: {
        match (*ptr_to_globals).undo_queue_state as libc::c_int {
          64 => {
            (*ptr_to_globals).undo_queue_state = 0 as libc::c_char;
            (*ptr_to_globals).undo_queue_spos = src
          }
          0 => {}
          1 => {
            // Switch from storing deleted text to inserted text
            undo_queue_commit(); // Don't need to save any data for insertions
            undo_push(src, length, 4i32 as libc::c_uchar);
            return;
          }
          _ => {
            break 's_145;
          }
        }
        loop {
          let fresh10 = length;
          length = length.wrapping_sub(1);
          if !(fresh10 != 0) {
            break;
          }
          (*ptr_to_globals).undo_q += 1;
          if (*ptr_to_globals).undo_q == 256i32 {
            undo_queue_commit();
          }
        }
        return;
      }
    }
    _ => {}
  }
  // Allocate a new undo object
  if u_type as libc::c_int == 1i32 || u_type as libc::c_int == 3i32 {
    // For UNDO_DEL objects, save deleted text
    if (*ptr_to_globals).text.offset(length as isize) == (*ptr_to_globals).end {
      length = length.wrapping_sub(1)
    }
    // If this deletion empties text[], strip the newline. When the buffer becomes
    // zero-length, a newline is added back, which requires this to compensate.
    undo_entry = crate::libbb::xfuncs_printf::xzalloc((17 as libc::c_ulong).wrapping_add(length as libc::c_ulong))
      as *mut undo_object;
    memcpy(
      (*undo_entry).undo_text.as_mut_ptr() as *mut libc::c_void,
      src as *const libc::c_void,
      length as libc::c_ulong,
    );
  } else {
    undo_entry =
      crate::libbb::xfuncs_printf::xzalloc(::std::mem::size_of::<undo_object>() as libc::c_ulong)
        as *mut undo_object
  }
  (*undo_entry).length = length as libc::c_int;
  if u_type as libc::c_int & 32i32 != 0 {
    (*undo_entry).start = (*ptr_to_globals)
      .undo_queue_spos
      .wrapping_offset_from((*ptr_to_globals).text) as libc::c_long
      as libc::c_int
  // use start position from queue
  } else {
    (*undo_entry).start =
      src.wrapping_offset_from((*ptr_to_globals).text) as libc::c_long as libc::c_int
    // use offset from start of text buffer
  }
  u_type = (u_type as libc::c_int & !32i32) as u8;
  (*undo_entry).u_type = u_type;
  // Push it on undo stack
  (*undo_entry).prev = (*ptr_to_globals).undo_stack_tail;
  (*ptr_to_globals).undo_stack_tail = undo_entry;
  (*ptr_to_globals).modified_count += 1;
}
unsafe extern "C" fn undo_push_insert(
  mut p: *mut libc::c_char,
  mut len: libc::c_int,
  mut undo: libc::c_int,
) {
  match undo {
    1 => {
      undo_push(p, len as libc::c_uint, 0 as libc::c_uchar);
    }
    2 => {
      undo_push(p, len as libc::c_uint, 2i32 as libc::c_uchar);
    }
    3 => {
      undo_push(p, len as libc::c_uint, 4i32 as libc::c_uchar);
    }
    _ => {}
  };
}
// Undo the last operation
unsafe extern "C" fn undo_pop() {
  let mut repeat: libc::c_int = 0;
  let mut u_start: *mut libc::c_char = std::ptr::null_mut::<libc::c_char>();
  let mut u_end: *mut libc::c_char = std::ptr::null_mut::<libc::c_char>();
  let mut undo_entry: *mut undo_object = std::ptr::null_mut();
  // Commit pending undo queue before popping (should be unnecessary)
  undo_queue_commit();
  undo_entry = (*ptr_to_globals).undo_stack_tail;
  // Check for an empty undo stack
  if undo_entry.is_null() {
    status_line(b"Already at oldest change\x00" as *const u8 as *const libc::c_char);
    return;
  }
  match (*undo_entry).u_type as libc::c_int {
    1 | 3 => {
      // make hole and put in text that was deleted; deallocate text
      u_start = (*ptr_to_globals).text.offset((*undo_entry).start as isize);
      text_hole_make(u_start, (*undo_entry).length);
      memcpy(
        u_start as *mut libc::c_void,
        (*undo_entry).undo_text.as_mut_ptr() as *const libc::c_void,
        (*undo_entry).length as libc::c_ulong,
      );
      status_line(
        b"Undo [%d] %s %d chars at position %d\x00" as *const u8 as *const libc::c_char,
        (*ptr_to_globals).modified_count,
        b"restored\x00" as *const u8 as *const libc::c_char,
        (*undo_entry).length,
        (*undo_entry).start,
      );
    }
    0 | 2 => {
      // delete what was inserted
      u_start = (*ptr_to_globals).text.offset((*undo_entry).start as isize);
      u_end = u_start.offset(-1).offset((*undo_entry).length as isize);
      text_hole_delete(u_start, u_end, 0);
      status_line(
        b"Undo [%d] %s %d chars at position %d\x00" as *const u8 as *const libc::c_char,
        (*ptr_to_globals).modified_count,
        b"deleted\x00" as *const u8 as *const libc::c_char,
        (*undo_entry).length,
        (*undo_entry).start,
      );
    }
    _ => {}
  }
  repeat = 0;
  match (*undo_entry).u_type as libc::c_int {
    1 | 0 => {
      // If this is the end of a chain, lower modification count and refresh display
      (*ptr_to_globals).dot = (*ptr_to_globals).text.offset((*undo_entry).start as isize);
      refresh(0i32);
    }
    3 | 2 => repeat = 1i32,
    _ => {}
  }
  // Deallocate the undo object we just processed
  (*ptr_to_globals).undo_stack_tail = (*undo_entry).prev;
  free(undo_entry as *mut libc::c_void);
  (*ptr_to_globals).modified_count -= 1;
  // For chained operations, continue popping all the way down the chain.
  if repeat != 0 {
    undo_pop();
    // Follow the undo chain if one exists
  };
}
/* ENABLE_FEATURE_VI_UNDO */
//----- Dot Movement Routines ----------------------------------
unsafe extern "C" fn dot_left() {
  undo_queue_commit();
  if (*ptr_to_globals).dot > (*ptr_to_globals).text
    && *(*ptr_to_globals).dot.offset(-1i32 as isize) as libc::c_int != '\n' as i32
  {
    (*ptr_to_globals).dot = (*ptr_to_globals).dot.offset(-1)
  };
}
unsafe extern "C" fn dot_right() {
  undo_queue_commit();
  if (*ptr_to_globals).dot < (*ptr_to_globals).end.offset(-1)
    && *(*ptr_to_globals).dot as libc::c_int != '\n' as i32
  {
    (*ptr_to_globals).dot = (*ptr_to_globals).dot.offset(1)
  };
}
unsafe extern "C" fn dot_begin() {
  undo_queue_commit();
  (*ptr_to_globals).dot = begin_line((*ptr_to_globals).dot);
  // return pointer to first char cur line
}
unsafe extern "C" fn dot_end() {
  undo_queue_commit();
  (*ptr_to_globals).dot = end_line((*ptr_to_globals).dot);
  // return pointer to last char cur line
}
unsafe extern "C" fn move_to_col(
  mut p: *mut libc::c_char,
  mut l: libc::c_int,
) -> *mut libc::c_char {
  let mut co: libc::c_int = 0;
  p = begin_line(p);
  co = 0;
  while co < l && p < (*ptr_to_globals).end {
    if *p as libc::c_int == '\n' as i32 {
      break;
    }
    if *p as libc::c_int == '\t' as i32 {
      co = next_tabstop(co)
    } else if (*p as libc::c_int) < ' ' as i32 || *p as libc::c_int == 127i32 {
      co += 1
      // display as ^X, use 2 columns
    }
    co += 1;
    p = p.offset(1)
  }
  return p;
}
unsafe extern "C" fn dot_next() {
  undo_queue_commit();
  (*ptr_to_globals).dot = next_line((*ptr_to_globals).dot);
}
unsafe extern "C" fn dot_prev() {
  undo_queue_commit();
  (*ptr_to_globals).dot = prev_line((*ptr_to_globals).dot);
}
unsafe extern "C" fn dot_skip_over_ws() {
  // skip WS
  while ({
    let mut bb__isspace: libc::c_uchar =
      (*(*ptr_to_globals).dot as libc::c_int - 9i32) as libc::c_uchar;
    (bb__isspace as libc::c_int == ' ' as i32 - 9i32 || bb__isspace as libc::c_int <= 13i32 - 9i32)
      as libc::c_int
  }) != 0
    && *(*ptr_to_globals).dot as libc::c_int != '\n' as i32
    && (*ptr_to_globals).dot < (*ptr_to_globals).end.offset(-1)
  {
    (*ptr_to_globals).dot = (*ptr_to_globals).dot.offset(1)
  }
}
unsafe extern "C" fn dot_scroll(mut cnt: libc::c_int, mut dir: libc::c_int) {
  let mut q: *mut libc::c_char = std::ptr::null_mut::<libc::c_char>();
  undo_queue_commit();
  while cnt > 0 {
    if dir < 0 {
      // scroll Backwards
      // ctrl-Y scroll up one line
      (*ptr_to_globals).screenbegin = prev_line((*ptr_to_globals).screenbegin)
    } else {
      // scroll Forwards
      // ctrl-E scroll down one line
      (*ptr_to_globals).screenbegin = next_line((*ptr_to_globals).screenbegin)
    }
    cnt -= 1
  }
  // make sure "dot" stays on the screen so we dont scroll off
  if (*ptr_to_globals).dot < (*ptr_to_globals).screenbegin {
    (*ptr_to_globals).dot = (*ptr_to_globals).screenbegin
  } // find new bottom line
  q = end_screen(); // is dot is below bottom line?
  if (*ptr_to_globals).dot > q {
    (*ptr_to_globals).dot = begin_line(q)
  }
  dot_skip_over_ws();
}
unsafe extern "C" fn bound_dot(mut p: *mut libc::c_char) -> *mut libc::c_char
// make sure  text[0] <= P < "end"
{
  if p >= (*ptr_to_globals).end && (*ptr_to_globals).end > (*ptr_to_globals).text {
    p = (*ptr_to_globals).end.offset(-1);
    indicate_error();
  }
  if p < (*ptr_to_globals).text {
    p = (*ptr_to_globals).text;
    indicate_error();
  }
  return p;
}
unsafe extern "C" fn start_new_cmd_q(mut c: libc::c_char) {
  // get buffer for new cmd
  // if there is a current cmd count put it in the buffer first
  if (*ptr_to_globals).cmdcnt > 0 {
    (*ptr_to_globals).lmc_len = sprintf(
      (*ptr_to_globals).last_modifying_cmd.as_mut_ptr(),
      b"%u%c\x00" as *const u8 as *const libc::c_char,
      (*ptr_to_globals).cmdcnt,
      c as libc::c_int,
    )
  } else {
    (*ptr_to_globals).last_modifying_cmd[0] = c; // just save char c onto queue
    (*ptr_to_globals).lmc_len = 1i32
  } // go back to default Yank/Delete reg
  (*ptr_to_globals).adding2q = 1i32 as smallint;
}
unsafe extern "C" fn end_cmd_q() {
  (*ptr_to_globals).YDreg = 26i32 as smalluint;
  (*ptr_to_globals).adding2q = 0 as smallint;
}
/* FEATURE_VI_DOT_CMD */
// copy text into register, then delete text.
// if dist <= 0, do not include, or go past, a NewLine
//
unsafe extern "C" fn yank_delete(
  mut start: *mut libc::c_char,
  mut stop: *mut libc::c_char,
  mut dist: libc::c_int,
  mut yf: libc::c_int,
  mut undo: libc::c_int,
) -> *mut libc::c_char {
  let mut p: *mut libc::c_char = std::ptr::null_mut::<libc::c_char>();
  // make sure start <= stop
  if start > stop {
    // they are backwards, reverse them
    p = start;
    start = stop;
    stop = p
  }
  if dist <= 0 {
    // we cannot cross NL boundaries
    p = start;
    if *p as libc::c_int == '\n' as i32 {
      return p;
    }
    // dont go past a NewLine
    while p.offset(1) <= stop {
      if *p.offset(1) as libc::c_int == '\n' as i32 {
        stop = p; // "stop" just before NewLine
        break; // delete lines
      } else {
        p = p.offset(1)
      }
    }
  }
  p = start;
  text_yank(start, stop, (*ptr_to_globals).YDreg as libc::c_int);
  if yf == YANKDEL as libc::c_int {
    p = text_hole_delete(start, stop, undo)
  }
  return p;
}
// might reallocate text[]!
unsafe extern "C" fn file_insert(
  mut fn_0: *const libc::c_char,
  mut p: *mut libc::c_char,
  mut initial: libc::c_int,
) -> libc::c_int {
  let mut cnt: libc::c_int = -1i32;
  let mut fd: libc::c_int = 0;
  let mut size: libc::c_int = 0;
  let mut statbuf: stat = std::mem::zeroed();
  if p < (*ptr_to_globals).text {
    p = (*ptr_to_globals).text
  }
  if p > (*ptr_to_globals).end {
    p = (*ptr_to_globals).end
  }
  fd = open(fn_0, 0);
  if fd < 0 {
    if initial == 0 {
      status_line_bold_errno(fn_0);
    }
    return cnt;
  }
  // Validate file
  if fstat(fd, &mut statbuf) < 0 {
    status_line_bold_errno(fn_0);
  } else if !(statbuf.st_mode & 0o170000i32 as libc::c_uint == 0o100000i32 as libc::c_uint) {
    status_line_bold(
      b"\'%s\' is not a regular file\x00" as *const u8 as *const libc::c_char,
      fn_0,
    );
  } else {
    size = if statbuf.st_size < 2147483647i32 as libc::c_long {
      statbuf.st_size as libc::c_int
    } else {
      2147483647i32
    };
    p = p.offset(text_hole_make(p, size) as isize);
    cnt = crate::libbb::read::full_read(fd, p as *mut libc::c_void, size as size_t) as libc::c_int;
    if cnt < 0 {
      status_line_bold_errno(fn_0);
      p = text_hole_delete(p, p.offset(size as isize).offset(-1), 0)
    // un-do buffer insert
    } else if cnt < size {
      // There was a partial read, shrink unused space
      p = text_hole_delete(
        p.offset(cnt as isize),
        p.offset(size as isize).offset(-1),
        0,
      );
      status_line_bold(
        b"can\'t read \'%s\'\x00" as *const u8 as *const libc::c_char,
        fn_0,
      );
    }
  }
  close(fd);
  if initial != 0
    && (access(fn_0, 2i32) < 0
      || statbuf.st_mode & (0o200i32 | 0o200i32 >> 3i32 | 0o200i32 >> 3i32 >> 3i32) as libc::c_uint
        == 0)
  {
    (*ptr_to_globals).readonly_mode =
      ((*ptr_to_globals).readonly_mode as libc::c_int | 0x1i32) as smallint
  }
  return cnt;
}
// find matching char of pair  ()  []  {}
// will crash if c is not one of these
unsafe extern "C" fn find_pair(mut p: *mut libc::c_char, c: libc::c_char) -> *mut libc::c_char {
  let mut braces: *const libc::c_char = b"()[]{}\x00" as *const u8 as *const libc::c_char; // 1 for ([{, -1 for )\}
  let mut match_0: libc::c_char = 0;
  let mut dir: libc::c_int = 0;
  let mut level: libc::c_int = 0;
  dir =
    strchr(braces, c as libc::c_int).wrapping_offset_from(braces) as libc::c_long as libc::c_int;
  dir ^= 1i32;
  match_0 = *braces.offset(dir as isize);
  dir = ((dir & 1i32) << 1i32) - 1i32;
  // look for match, count levels of pairs  (( ))
  level = 1i32; // increase pair levels
  loop {
    p = p.offset(dir as isize); // reduce pair level
    if p < (*ptr_to_globals).text || p >= (*ptr_to_globals).end {
      return std::ptr::null_mut::<libc::c_char>();
    }
    if *p as libc::c_int == c as libc::c_int {
      level += 1
    }
    if *p as libc::c_int == match_0 as libc::c_int {
      level -= 1;
      if level == 0 {
        return p;
      }
      // found matching pair
    }
  }
}
// show the matching char of a pair,  ()  []  {}
unsafe extern "C" fn showmatching(mut p: *mut libc::c_char) {
  let mut q: *mut libc::c_char = std::ptr::null_mut::<libc::c_char>();
  let mut save_dot: *mut libc::c_char = std::ptr::null_mut::<libc::c_char>();
  // we found half of a pair
  q = find_pair(p, *p); // get loc of matching char
  if q.is_null() {
    indicate_error();
  // no matching char
  } else {
    // "q" now points to matching pair
    save_dot = (*ptr_to_globals).dot; // remember where we are
    (*ptr_to_globals).dot = q; // go to new loc
    refresh(0i32); // let the user see it
    mysleep(40i32); // give user some time
    (*ptr_to_globals).dot = save_dot; // go back to old loc
    refresh(0i32);
  };
}
/* FEATURE_VI_SETOPTS */
// might reallocate text[]! use p += stupid_insert(p, ...),
// and be careful to not use pointers into potentially freed text[]!
unsafe extern "C" fn stupid_insert(mut p: *mut libc::c_char, mut c: libc::c_char) -> uintptr_t
// stupidly insert the char c at 'p'
{
  let mut bias: uintptr_t = 0;
  bias = text_hole_make(p, 1i32);
  p = p.offset(bias as isize);
  *p = c;
  return bias;
}
unsafe extern "C" fn char_insert(
  mut p: *mut libc::c_char,
  mut c: libc::c_char,
  mut undo: libc::c_int,
) -> *mut libc::c_char
// insert the char c at 'p'
{
  if c as libc::c_int == 22i32 {
    // Is this an ctrl-V?
    p = p.offset(stupid_insert(p, '^' as i32 as libc::c_char) as isize); // use ^ to indicate literal next
    refresh(0i32); // show the ^
    c = get_one_char() as libc::c_char;
    *p = c;
    undo_push_insert(p, 1i32, undo);
    p = p.offset(1)
  } else if c as libc::c_int == 27i32 {
    // Is this an ESC?
    (*ptr_to_globals).cmd_mode = 0 as smallint; // stop adding to q
    undo_queue_commit(); // force status update
    (*ptr_to_globals).cmdcnt = 0;
    end_cmd_q();
    (*ptr_to_globals).last_status_cksum = 0;
    if *p.offset(-1i32 as isize) as libc::c_int != '\n' as i32
      && (*ptr_to_globals).dot > (*ptr_to_globals).text
    {
      p = p.offset(-1)
    }
  } else if c as libc::c_int == (*ptr_to_globals).term_orig.c_cc[2] as libc::c_int
    || c as libc::c_int == 8i32
    || c as libc::c_int == 127i32
  {
    // Is this a BS
    if p > (*ptr_to_globals).text {
      p = p.offset(-1);
      p = text_hole_delete(p, p, 3i32)
      // shrink buffer 1 char
    }
  } else {
    // insert a char into text[]
    if c as libc::c_int == 13i32 {
      c = '\n' as i32 as libc::c_char
    } // translate \r to \n
    if c as libc::c_int == '\n' as i32 {
      undo_queue_commit(); // insert the char
    }
    undo_push_insert(p, 1i32, undo);
    p = p.offset((1i32 as libc::c_ulong).wrapping_add(stupid_insert(p, c)) as isize);
    if (*ptr_to_globals).vi_setops as libc::c_int & 2i32 != 0
      && !strchr(
        b")]}\x00" as *const u8 as *const libc::c_char,
        c as libc::c_int,
      )
      .is_null()
    {
      showmatching(p.offset(-1));
    }
    if (*ptr_to_globals).vi_setops as libc::c_int & 1i32 != 0 && c as libc::c_int == '\n' as i32 {
      // auto indent the new line
      let mut q: *mut libc::c_char = std::ptr::null_mut::<libc::c_char>(); // use prev line as template
      let mut len: size_t = 0; // space or tab
      q = prev_line(p);
      len = strspn(q, b" \t\x00" as *const u8 as *const libc::c_char);
      if len != 0 {
        let mut bias: uintptr_t = 0;
        bias = text_hole_make(p, len as libc::c_int);
        p = p.offset(bias as isize);
        q = q.offset(bias as isize);
        undo_push_insert(p, len as libc::c_int, undo);
        memcpy(p as *mut libc::c_void, q as *const libc::c_void, len);
        p = p.offset(len as isize)
      }
    }
  }
  return p;
}
// read text from file or create an empty buf
// will also update current_filename
unsafe extern "C" fn init_text_buffer(mut fn_0: *mut libc::c_char) -> libc::c_int {
  let mut rc: libc::c_int = 0;
  // allocate/reallocate text buffer
  free((*ptr_to_globals).text as *mut libc::c_void);
  (*ptr_to_globals).text_size = 10240i32;
  (*ptr_to_globals).text =
    crate::libbb::xfuncs_printf::xzalloc((*ptr_to_globals).text_size as size_t)
      as *mut libc::c_char;
  (*ptr_to_globals).end = (*ptr_to_globals).text;
  (*ptr_to_globals).dot = (*ptr_to_globals).end;
  (*ptr_to_globals).screenbegin = (*ptr_to_globals).dot;
  if fn_0 != (*ptr_to_globals).current_filename {
    free((*ptr_to_globals).current_filename as *mut libc::c_void);
    (*ptr_to_globals).current_filename = crate::libbb::xfuncs_printf::xstrdup(fn_0)
  }
  rc = file_insert(fn_0, (*ptr_to_globals).text, 1i32);
  if rc < 0 {
    // file doesnt exist. Start empty buf with dummy line
    char_insert((*ptr_to_globals).text, '\n' as i32 as libc::c_char, 0);
  }
  flush_undo_data();
  (*ptr_to_globals).modified_count = 0;
  (*ptr_to_globals).last_modified_count = -1i32;
  // init the marks
  memset(
    (*ptr_to_globals).mark.as_mut_ptr() as *mut libc::c_void,
    0,
    ::std::mem::size_of::<[*mut libc::c_char; 28]>() as libc::c_ulong,
  );
  return rc;
}
// might reallocate text[]! use p += string_insert(p, ...),
// and be careful to not use pointers into potentially freed text[]!
unsafe extern "C" fn string_insert(
  mut p: *mut libc::c_char,
  mut s: *const libc::c_char,
  mut undo: libc::c_int,
) -> uintptr_t
// insert the string at 'p'
{
  let mut bias: uintptr_t = 0;
  let mut i: libc::c_int = 0;
  i = strlen(s) as libc::c_int;
  undo_push_insert(p, i, undo);
  bias = text_hole_make(p, i);
  p = p.offset(bias as isize);
  memcpy(
    p as *mut libc::c_void,
    s as *const libc::c_void,
    i as libc::c_ulong,
  );
  let mut cnt: libc::c_int = 0;
  cnt = 0;
  while *s as libc::c_int != '\u{0}' as i32 {
    if *s as libc::c_int == '\n' as i32 {
      cnt += 1
    }
    s = s.offset(1)
  }
  status_line(
    b"Put %d lines (%d chars) from [%c]\x00" as *const u8 as *const libc::c_char,
    cnt,
    i,
    what_reg() as libc::c_int,
  );
  return bias;
}
unsafe extern "C" fn file_write(
  mut fn_0: *mut libc::c_char,
  mut first: *mut libc::c_char,
  mut last: *mut libc::c_char,
) -> libc::c_int {
  let mut fd: libc::c_int = 0;
  let mut cnt: libc::c_int = 0;
  let mut charcnt: libc::c_int = 0;
  if fn_0.is_null() {
    status_line_bold(b"No current filename\x00" as *const u8 as *const libc::c_char);
    return -2i32;
  }
  // By popular request we do not open file with O_TRUNC,
  // but instead ftruncate() it _after_ successful write.
  // Might reduce amount of data lost on power fail etc.
  fd = open(fn_0, 0o1i32 | 0o100i32, 0o666i32); //BACK
  if fd < 0 {
    return -1i32;
  }
  cnt = (last.wrapping_offset_from(first) as libc::c_long + 1) as libc::c_int;
  charcnt = crate::libbb::full_write::full_write(fd, first as *const libc::c_void, cnt as size_t)
    as libc::c_int;
  ftruncate(fd, charcnt as off64_t);
  if !(charcnt == cnt) {
    charcnt = 0
  }
  close(fd);
  return charcnt;
}
unsafe extern "C" fn mycmp(
  mut s1: *const libc::c_char,
  mut s2: *const libc::c_char,
  mut len: libc::c_int,
) -> libc::c_int {
  if (*ptr_to_globals).vi_setops as libc::c_int & 4i32 != 0 {
    return strncasecmp(s1, s2, len as libc::c_ulong);
  }
  return strncmp(s1, s2, len as libc::c_ulong);
}
unsafe extern "C" fn char_search(
  mut p: *mut libc::c_char,
  mut pat: *const libc::c_char,
  mut dir_and_range: libc::c_int,
) -> *mut libc::c_char {
  let mut start: *mut libc::c_char = std::ptr::null_mut::<libc::c_char>();
  let mut stop: *mut libc::c_char = std::ptr::null_mut::<libc::c_char>();
  let mut len: libc::c_int = 0;
  let mut range: libc::c_int = 0;
  len = strlen(pat) as libc::c_int;
  range = dir_and_range & 1i32;
  if dir_and_range > 0 {
    //FORWARD?
    stop = (*ptr_to_globals).end.offset(-1); // assume range is p..end-1
    if range == LIMITED as libc::c_int {
      stop = next_line(p)
    } // range is to next line
    start = p; // assume range is text..p
    while start < stop {
      if mycmp(start, pat, len) == 0 {
        return start;
      } // range is to prev line
      start = start.offset(1)
    }
  } else {
    stop = (*ptr_to_globals).text;
    if range == LIMITED as libc::c_int {
      stop = prev_line(p)
    }
    start = p.offset(-(len as isize));
    while start >= stop {
      if mycmp(start, pat, len) == 0 {
        return start;
      }
      start = start.offset(-1)
    }
  }
  // pattern not found
  return std::ptr::null_mut::<libc::c_char>();
}
/* FEATURE_VI_SEARCH */
//----- The Colon commands -------------------------------------
unsafe extern "C" fn get_one_address(
  mut p: *mut libc::c_char,
  mut addr: *mut libc::c_int,
) -> *mut libc::c_char
// get colon addr, if present
{
  let mut st: libc::c_int = 0; // assume no addr
  let mut q: *mut libc::c_char = std::ptr::null_mut::<libc::c_char>();
  let mut c: libc::c_char = 0;
  let mut pat: *mut libc::c_char = std::ptr::null_mut::<libc::c_char>();
  *addr = -1i32;
  if *p as libc::c_int == '.' as i32 {
    // the current line
    p = p.offset(1);
    q = begin_line((*ptr_to_globals).dot);
    *addr = count_lines((*ptr_to_globals).text, q)
  } else if *p as libc::c_int == '\'' as i32 {
    // is this a mark addr
    p = p.offset(1);
    c = bb_ascii_tolower(*p as libc::c_uchar) as libc::c_char;
    p = p.offset(1);
    if c as libc::c_int >= 'a' as i32 && c as libc::c_int <= 'z' as i32 {
      // we have a mark
      c = (c as libc::c_int - 'a' as i32) as libc::c_char;
      q = (*ptr_to_globals).mark[c as libc::c_uchar as usize];
      if !q.is_null() {
        // is mark valid
        *addr = count_lines((*ptr_to_globals).text, q)
      }
    }
  } else if *p as libc::c_int == '/' as i32 {
    // a search pattern
    p = p.offset(1); // save copy of pattern
    q = strchrnul(p, '/' as i32);
    pat = crate::libbb::xfuncs_printf::xstrndup(
      p,
      q.wrapping_offset_from(p) as libc::c_long as libc::c_int,
    );
    p = q;
    if *p as libc::c_int == '/' as i32 {
      p = p.offset(1)
    }
    q = char_search(
      (*ptr_to_globals).dot,
      pat,
      (FORWARD as libc::c_int) << 1i32 | FULL as libc::c_int,
    );
    if !q.is_null() {
      *addr = count_lines((*ptr_to_globals).text, q)
    }
    free(pat as *mut libc::c_void);
  } else if *p as libc::c_int == '$' as i32 {
    // the last line in file
    p = p.offset(1);
    q = begin_line((*ptr_to_globals).end.offset(-1));
    *addr = count_lines((*ptr_to_globals).text, q)
  } else if (*p as libc::c_int - '0' as i32) as libc::c_uchar as libc::c_int <= 9i32 {
    // specific line number
    sscanf(
      p,
      b"%d%n\x00" as *const u8 as *const libc::c_char,
      addr,
      &mut st as *mut libc::c_int,
    );
    p = p.offset(st as isize)
  } else {
    // unrecognized address - assume -1
    *addr = -1i32
  }
  return p;
}
unsafe extern "C" fn get_address(
  mut p: *mut libc::c_char,
  mut b: *mut libc::c_int,
  mut e: *mut libc::c_int,
) -> *mut libc::c_char
// get two colon addrs, if present
{
  //----- get the address' i.e., 1,3   'a,'b  -----
  // get FIRST addr, if present
  while ({
    let mut bb__isblank: libc::c_uchar = *p as libc::c_uchar; // skip over leading spaces
    (bb__isblank as libc::c_int == ' ' as i32 || bb__isblank as libc::c_int == '\t' as i32)
      as libc::c_int
  }) != 0
  {
    p = p.offset(1)
  }
  if *p as libc::c_int == '%' as i32 {
    // alias for 1,$
    p = p.offset(1);
    *b = 1i32;
    *e = count_lines((*ptr_to_globals).text, (*ptr_to_globals).end.offset(-1))
  } else {
    p = get_one_address(p, b);
    while ({
      let mut bb__isblank: libc::c_uchar = *p as libc::c_uchar;
      (bb__isblank as libc::c_int == ' ' as i32 || bb__isblank as libc::c_int == '\t' as i32)
        as libc::c_int
    }) != 0
    {
      p = p.offset(1)
    }
    if *p as libc::c_int == ',' as i32 {
      // is there a address separator
      p = p.offset(1);
      while ({
        let mut bb__isblank: libc::c_uchar = *p as libc::c_uchar;
        (bb__isblank as libc::c_int == ' ' as i32 || bb__isblank as libc::c_int == '\t' as i32)
          as libc::c_int
      }) != 0
      {
        p = p.offset(1)
      }
      // get SECOND addr, if present
      p = get_one_address(p, e)
    }
  } // skip over trailing spaces
  while ({
    let mut bb__isblank: libc::c_uchar = *p as libc::c_uchar; // opname have + ' '
    (bb__isblank as libc::c_int == ' ' as i32 || bb__isblank as libc::c_int == '\t' as i32)
      as libc::c_int
  }) != 0
  {
    p = p.offset(1)
  }
  return p;
}
unsafe extern "C" fn setops(
  mut args: *const libc::c_char,
  mut opname: *const libc::c_char,
  mut flg_no: libc::c_int,
  mut short_opname: *const libc::c_char,
  mut opt: libc::c_int,
) {
  let mut a: *const libc::c_char = args.offset(flg_no as isize);
  let mut l: libc::c_int = strlen(opname).wrapping_sub(1i32 as libc::c_ulong) as libc::c_int;
  // maybe strncmp? we had tons of erroneous strncasecmp's...
  if strncasecmp(a, opname, l as libc::c_ulong) == 0
    || strncasecmp(a, short_opname, 2i32 as libc::c_ulong) == 0
  {
    if flg_no != 0 {
      (*ptr_to_globals).vi_setops = ((*ptr_to_globals).vi_setops as libc::c_int & !opt) as smallint
    } else {
      (*ptr_to_globals).vi_setops = ((*ptr_to_globals).vi_setops as libc::c_int | opt) as smallint
    }
  };
}
/* FEATURE_VI_COLON */
// buf must be no longer than MAX_INPUT_LEN!
unsafe extern "C" fn colon(mut buf: *mut libc::c_char) {
  let mut current_block: u64;
  let mut c: libc::c_char = 0;
  let mut buf1: *mut libc::c_char = std::ptr::null_mut::<libc::c_char>();
  let mut q: *mut libc::c_char = std::ptr::null_mut::<libc::c_char>();
  let mut r: *mut libc::c_char = std::ptr::null_mut::<libc::c_char>();
  let mut fn_0: *mut libc::c_char = std::ptr::null_mut::<libc::c_char>();
  let mut cmd: [libc::c_char; 128] = [0; 128];
  let mut args: [libc::c_char; 128] = [0; 128];
  let mut i: libc::c_int = 0;
  let mut l: libc::c_int = 0;
  let mut li: libc::c_int = 0;
  let mut b: libc::c_int = 0;
  let mut e: libc::c_int = 0;
  let mut useforce: libc::c_int = 0;
  let mut orig_buf: *mut libc::c_char = std::ptr::null_mut::<libc::c_char>();
  // :3154	// if (-e line 3154) goto it  else stay put
  // :4,33w! foo	// write a portion of buffer to file "foo"
  // :w		// write all of buffer to current file
  // :q		// quit
  // :q!		// quit- dont care about modified file
  // :'a,'z!sort -u   // filter block through sort
  // :'f		// goto mark "f"
  // :'fl		// list literal the mark "f" line
  // :.r bar	// read file "bar" into buffer before dot
  // :/123/,/abc/d    // delete lines from "123" line to "abc" line
  // :/xyz/	// goto the "xyz" line
  // :s/find/replace/ // substitute pattern "find" with "replace"
  // :!<cmd>	// run <cmd> then return
  //
  if !(*buf.offset(0) == 0) {
    if *buf as libc::c_int == ':' as i32 {
      buf = buf.offset(1)
    } // move past the ':'
    i = 0; // assume 1,$ for the range
    li = i;
    e = -1i32;
    b = e;
    q = (*ptr_to_globals).text;
    r = (*ptr_to_globals).end.offset(-1);
    li = count_lines((*ptr_to_globals).text, (*ptr_to_globals).end.offset(-1));
    fn_0 = (*ptr_to_globals).current_filename;
    // look for optional address(es)  :.  :1  :1,9   :'q,'a   :%
    buf = get_address(buf, &mut b, &mut e);
    // remember orig command line
    orig_buf = buf;
    // get the COMMAND into cmd[]
    buf1 = cmd.as_mut_ptr();
    while *buf as libc::c_int != '\u{0}' as i32 {
      if ({
        let mut bb__isspace: libc::c_uchar = (*buf as libc::c_int - 9i32) as libc::c_uchar;
        (bb__isspace as libc::c_int == ' ' as i32 - 9i32
          || bb__isspace as libc::c_int <= 13i32 - 9i32) as libc::c_int
      }) != 0
      {
        break;
      }
      let fresh11 = buf;
      buf = buf.offset(1);
      let fresh12 = buf1;
      buf1 = buf1.offset(1);
      *fresh12 = *fresh11
    }
    *buf1 = '\u{0}' as i32 as libc::c_char;
    // get any ARGuments
    while ({
      let mut bb__isblank: libc::c_uchar = *buf as libc::c_uchar;
      (bb__isblank as libc::c_int == ' ' as i32 || bb__isblank as libc::c_int == '\t' as i32)
        as libc::c_int
    }) != 0
    {
      buf = buf.offset(1)
    }
    strcpy(args.as_mut_ptr(), buf);
    useforce = 0;
    buf1 = crate::libbb::last_char_is::last_char_is(cmd.as_mut_ptr(), '!' as i32);
    if !buf1.is_null() {
      useforce = 1i32;
      *buf1 = '\u{0}' as i32 as libc::c_char
      // get rid of !
    }
    if b >= 0 {
      // if there is only one addr, then the addr
      // is the line number of the single line the
      // user wants. So, reset the end
      // pointer to point at end of the "b" line
      q = find_line(b); // what line is #b
      r = end_line(q);
      li = 1i32
    }
    if e >= 0 {
      // we were given two addrs.  change the
      // end pointer to the addr given by user.
      r = find_line(e); // what line is #e
      r = end_line(r);
      li = e - b + 1i32
    }
    // ------------ now look for the command ------------
    i = strlen(cmd.as_mut_ptr()) as libc::c_int;
    if i == 0 {
      // :123CR goto line #123
      if b >= 0 {
        (*ptr_to_globals).dot = find_line(b); // what line is #b
        dot_skip_over_ws();
      }
    } else if cmd[0] as libc::c_int == '!' as i32 {
      // run a cmd
      let mut retcode: libc::c_int = 0;
      // :!ls   run the <cmd>
      go_bottom_and_clear_to_eol(); // run the cmd
      cookmode();
      retcode = system(orig_buf.offset(1));
      if retcode != 0 {
        printf(
          b"\nshell returned %i\n\n\x00" as *const u8 as *const libc::c_char,
          retcode,
        );
      }
      rawmode();
      Hit_Return();
    } else if cmd[0] as libc::c_int == '=' as i32 && cmd[1] == 0 {
      // where is the address
      if b < 0 {
        // no addr given- use defaults
        e = count_lines((*ptr_to_globals).text, (*ptr_to_globals).dot);
        b = e
      }
      status_line(b"%d\x00" as *const u8 as *const libc::c_char, b);
    } else if strncmp(
      cmd.as_mut_ptr(),
      b"delete\x00" as *const u8 as *const libc::c_char,
      i as libc::c_ulong,
    ) == 0
    {
      // delete lines
      if b < 0 {
        // no addr given- use defaults
        q = begin_line((*ptr_to_globals).dot); // assume .,. for the range
        r = end_line((*ptr_to_globals).dot)
      } // save, then delete lines
      (*ptr_to_globals).dot = yank_delete(q, r, 1i32, YANKDEL as libc::c_int, 1i32);
      dot_skip_over_ws();
    } else if strncmp(
      cmd.as_mut_ptr(),
      b"edit\x00" as *const u8 as *const libc::c_char,
      i as libc::c_ulong,
    ) == 0
    {
      // Edit a file
      let mut size: libc::c_int = 0;
      // don't edit, if the current file has been modified
      if (*ptr_to_globals).modified_count != 0 && useforce == 0 {
        status_line_bold(
          b"No write since last change (:%s! overrides)\x00" as *const u8 as *const libc::c_char,
          cmd.as_mut_ptr(),
        );
      } else {
        if args[0] != 0 {
          // the user supplied a file name
          fn_0 = args.as_mut_ptr();
          current_block = 7330218953828964527;
        } else if !(*ptr_to_globals).current_filename.is_null()
          && *(*ptr_to_globals).current_filename.offset(0) as libc::c_int != 0
        {
          current_block = 7330218953828964527;
        } else {
          // no user file name, no current name- punt
          status_line_bold(b"No current filename\x00" as *const u8 as *const libc::c_char);
          current_block = 11009327605418749796;
        }
        match current_block {
          11009327605418749796 => {}
          _ =>
          // no user supplied name- use the current filename
          // fn = current_filename;  was set by default
          {
            size = init_text_buffer(fn_0); //   free orig line reg- for 'U'
            if 27i32 >= 0 && 27i32 < 28i32 {
              free((*ptr_to_globals).reg[27] as *mut libc::c_void);
              (*ptr_to_globals).reg[27] = std::ptr::null_mut::<libc::c_char>()
            }
            /*if (YDreg < 28) - always true*/
            free((*ptr_to_globals).reg[(*ptr_to_globals).YDreg as usize] as *mut libc::c_void); //   free default yank/delete register
            (*ptr_to_globals).reg[(*ptr_to_globals).YDreg as usize] =
              std::ptr::null_mut::<libc::c_char>();
            // how many lines in text[]?
            li = count_lines((*ptr_to_globals).text, (*ptr_to_globals).end.offset(-1));
            status_line(
              b"\'%s\'%s%s %uL, %uC\x00" as *const u8 as *const libc::c_char,
              (*ptr_to_globals).current_filename,
              if size < 0 {
                b" [New file]\x00" as *const u8 as *const libc::c_char
              } else {
                b"\x00" as *const u8 as *const libc::c_char
              },
              if (*ptr_to_globals).readonly_mode as libc::c_int != 0 {
                b" [Readonly]\x00" as *const u8 as *const libc::c_char
              } else {
                b"\x00" as *const u8 as *const libc::c_char
              },
              li,
              (*ptr_to_globals)
                .end
                .wrapping_offset_from((*ptr_to_globals).text) as libc::c_long
                as libc::c_int,
            );
          }
        }
      }
    } else if strncmp(
      cmd.as_mut_ptr(),
      b"file\x00" as *const u8 as *const libc::c_char,
      i as libc::c_ulong,
    ) == 0
    {
      // what File is this
      if b != -1i32 || e != -1i32 {
        status_line_bold(
          b"No address allowed on this command\x00" as *const u8 as *const libc::c_char,
        );
      } else if args[0] != 0 {
        // user wants a new filename
        free((*ptr_to_globals).current_filename as *mut libc::c_void);
        (*ptr_to_globals).current_filename = crate::libbb::xfuncs_printf::xstrdup(args.as_mut_ptr())
      } else {
        // user wants file status info
        (*ptr_to_globals).last_status_cksum = 0
        // force status update
      }
    } else if strncmp(
      cmd.as_mut_ptr(),
      b"features\x00" as *const u8 as *const libc::c_char,
      i as libc::c_ulong,
    ) == 0
    {
      // what features are available
      // print out values of all features
      go_bottom_and_clear_to_eol();
      cookmode();
      show_help();
      rawmode();
      Hit_Return();
    } else if strncmp(
      cmd.as_mut_ptr(),
      b"list\x00" as *const u8 as *const libc::c_char,
      i as libc::c_ulong,
    ) == 0
    {
      // literal print line
      if b < 0 {
        // no addr given- use defaults
        q = begin_line((*ptr_to_globals).dot); // assume .,. for the range
        r = end_line((*ptr_to_globals).dot)
      }
      go_bottom_and_clear_to_eol();
      puts(b"\r\x00" as *const u8 as *const libc::c_char);
      while q <= r {
        let mut c_is_no_print: libc::c_int = 0;
        c = *q;
        c_is_no_print = (c as libc::c_int & 0x80i32 != 0
          && !(c as libc::c_uchar as libc::c_int >= ' ' as i32
            && (c as libc::c_uchar as libc::c_int) < 0x7fi32))
          as libc::c_int;
        if c_is_no_print != 0 {
          c = '.' as i32 as libc::c_char;
          standout_start();
        }
        if c as libc::c_int == '\n' as i32 {
          write1(b"$\r\x00" as *const u8 as *const libc::c_char);
        } else if (c as libc::c_int) < ' ' as i32 || c as libc::c_int == 127i32 {
          crate::libbb::xfuncs_printf::bb_putchar('^' as i32);
          if c as libc::c_int == 127i32 {
            c = '?' as i32 as libc::c_char
          } else {
            c = (c as libc::c_int + '@' as i32) as libc::c_char
          }
        }
        crate::libbb::xfuncs_printf::bb_putchar(c as libc::c_int);
        if c_is_no_print != 0 {
          standout_end();
        }
        q = q.offset(1)
      }
      Hit_Return();
    } else if strncmp(
      cmd.as_mut_ptr(),
      b"quit\x00" as *const u8 as *const libc::c_char,
      i as libc::c_ulong,
    ) == 0
      || strncmp(
        cmd.as_mut_ptr(),
        b"next\x00" as *const u8 as *const libc::c_char,
        i as libc::c_ulong,
      ) == 0
      || strncmp(
        cmd.as_mut_ptr(),
        b"prev\x00" as *const u8 as *const libc::c_char,
        i as libc::c_ulong,
      ) == 0
    {
      // edit previous file
      let mut n: libc::c_int = 0;
      if useforce != 0 {
        if *cmd.as_mut_ptr() as libc::c_int == 'q' as i32 {
          // force end of argv list
          optind = (*ptr_to_globals).cmdline_filecnt
        }
        (*ptr_to_globals).editing = 0 as smallint
      } else if (*ptr_to_globals).modified_count != 0 {
        status_line_bold(
          b"No write since last change (:%s! overrides)\x00" as *const u8 as *const libc::c_char,
          cmd.as_mut_ptr(),
        );
      } else {
        // don't exit if the file been modified
        // are there other file to edit
        n = (*ptr_to_globals).cmdline_filecnt - optind - 1i32;
        if *cmd.as_mut_ptr() as libc::c_int == 'q' as i32 && n > 0 {
          status_line_bold(
            b"%u more file(s) to edit\x00" as *const u8 as *const libc::c_char,
            n,
          );
        } else if *cmd.as_mut_ptr() as libc::c_int == 'n' as i32 && n <= 0 {
          status_line_bold(b"No more files to edit\x00" as *const u8 as *const libc::c_char);
        } else {
          if *cmd.as_mut_ptr() as libc::c_int == 'p' as i32 {
            // are there previous files to edit
            if optind < 1i32 {
              status_line_bold(
                b"No previous files to edit\x00" as *const u8 as *const libc::c_char,
              );
              current_block = 11009327605418749796;
            } else {
              optind -= 2i32;
              current_block = 1180384664817104288;
            }
          } else {
            current_block = 1180384664817104288;
          }
          match current_block {
            11009327605418749796 => {}
            _ => (*ptr_to_globals).editing = 0 as smallint,
          }
        }
      }
    } else if strncmp(
      cmd.as_mut_ptr(),
      b"read\x00" as *const u8 as *const libc::c_char,
      i as libc::c_ulong,
    ) == 0
    {
      // read file into text[]
      let mut size_0: libc::c_int = 0;
      fn_0 = args.as_mut_ptr();
      if *fn_0.offset(0) == 0 {
        status_line_bold(b"No filename given\x00" as *const u8 as *const libc::c_char);
      } else {
        if b < 0 {
          // no addr given- use defaults
          q = begin_line((*ptr_to_globals).dot)
          // assume "dot"
        }
        // read after current line- unless user said ":0r foo"
        if b != 0 {
          q = next_line(q);
          // read after last line
          if q == (*ptr_to_globals).end.offset(-1) {
            q = q.offset(1)
          }
        }
        // dance around potentially-reallocated text[]
        let mut ofs: uintptr_t =
          q.wrapping_offset_from((*ptr_to_globals).text) as libc::c_long as uintptr_t; // nothing was inserted
        size_0 = file_insert(fn_0, q, 0);
        q = (*ptr_to_globals).text.offset(ofs as isize);
        if !(size_0 < 0) {
          // how many lines in text[]?
          li = count_lines(q, q.offset(size_0 as isize).offset(-1));
          status_line(
            b"\'%s\'%s %uL, %uC\x00" as *const u8 as *const libc::c_char,
            fn_0,
            if (*ptr_to_globals).readonly_mode as libc::c_int != 0 {
              b" [Readonly]\x00" as *const u8 as *const libc::c_char
            } else {
              b"\x00" as *const u8 as *const libc::c_char
            },
            li,
            size_0,
          );
          if size_0 > 0 {
            // if the insert is before "dot" then we need to update
            if q <= (*ptr_to_globals).dot {
              (*ptr_to_globals).dot = (*ptr_to_globals).dot.offset(size_0 as isize)
            }
          }
        }
      }
    } else if strncmp(
      cmd.as_mut_ptr(),
      b"rewind\x00" as *const u8 as *const libc::c_char,
      i as libc::c_ulong,
    ) == 0
    {
      // rewind cmd line args
      if (*ptr_to_globals).modified_count != 0 && useforce == 0 {
        status_line_bold(
          b"No write since last change (:%s! overrides)\x00" as *const u8 as *const libc::c_char,
          cmd.as_mut_ptr(),
        );
      } else {
        // reset the filenames to edit
        optind = -1i32; // start from 0th file
        (*ptr_to_globals).editing = 0 as smallint
      }
    } else if strncmp(
      cmd.as_mut_ptr(),
      b"set\x00" as *const u8 as *const libc::c_char,
      i as libc::c_ulong,
    ) == 0
    {
      // set or clear features
      let mut argp: *mut libc::c_char = std::ptr::null_mut::<libc::c_char>(); // offset into args
      i = 0;
      // only blank is regarded as args delimiter. What about tab '\t'?
      if args[0] == 0
        || strcasecmp(
          args.as_mut_ptr(),
          b"all\x00" as *const u8 as *const libc::c_char,
        ) == 0
      {
        // print out values of all options
        status_line_bold(
          b"%sautoindent %sflash %signorecase %sshowmatch tabstop=%u\x00" as *const u8
            as *const libc::c_char,
          if (*ptr_to_globals).vi_setops as libc::c_int & 1i32 != 0 {
            b"\x00" as *const u8 as *const libc::c_char
          } else {
            b"no\x00" as *const u8 as *const libc::c_char
          },
          if (*ptr_to_globals).vi_setops as libc::c_int & 8i32 != 0 {
            b"\x00" as *const u8 as *const libc::c_char
          } else {
            b"no\x00" as *const u8 as *const libc::c_char
          },
          if (*ptr_to_globals).vi_setops as libc::c_int & 4i32 != 0 {
            b"\x00" as *const u8 as *const libc::c_char
          } else {
            b"no\x00" as *const u8 as *const libc::c_char
          },
          if (*ptr_to_globals).vi_setops as libc::c_int & 2i32 != 0 {
            b"\x00" as *const u8 as *const libc::c_char
          } else {
            b"no\x00" as *const u8 as *const libc::c_char
          },
          (*ptr_to_globals).tabstop,
        ); // ":set noautoindent"
      } else {
        argp = args.as_mut_ptr();
        while *argp != 0 {
          if strncmp(
            argp,
            b"no\x00" as *const u8 as *const libc::c_char,
            2i32 as libc::c_ulong,
          ) == 0
          {
            i = 2i32
          }
          setops(
            argp,
            b"autoindent \x00" as *const u8 as *const libc::c_char,
            i,
            b"ai\x00" as *const u8 as *const libc::c_char,
            1i32,
          );
          setops(
            argp,
            b"flash \x00" as *const u8 as *const libc::c_char,
            i,
            b"fl\x00" as *const u8 as *const libc::c_char,
            8i32,
          );
          setops(
            argp,
            b"ignorecase \x00" as *const u8 as *const libc::c_char,
            i,
            b"ic\x00" as *const u8 as *const libc::c_char,
            4i32,
          );
          setops(
            argp,
            b"showmatch \x00" as *const u8 as *const libc::c_char,
            i,
            b"sm\x00" as *const u8 as *const libc::c_char,
            2i32,
          );
          if strncmp(
            argp.offset(i as isize),
            b"tabstop=\x00" as *const u8 as *const libc::c_char,
            8i32 as libc::c_ulong,
          ) == 0
          {
            let mut t: libc::c_int = 0;
            sscanf(
              argp.offset(i as isize).offset(8),
              b"%u\x00" as *const u8 as *const libc::c_char,
              &mut t as *mut libc::c_int,
            );
            if t > 0 && t <= MAX_TABSTOP as libc::c_int {
              (*ptr_to_globals).tabstop = t
            }
          }
          argp = crate::libbb::skip_whitespace::skip_non_whitespace(argp);
          argp = skip_whitespace(argp)
        }
      }
    /* FEATURE_VI_SETOPTS */
    /* FEATURE_VI_SET */
    } else if cmd[0] as libc::c_int == 's' as i32 {
      // substitute a pattern with a replacement pattern
      let mut F: *mut libc::c_char = std::ptr::null_mut::<libc::c_char>(); // global replace flag
      let mut R: *mut libc::c_char = std::ptr::null_mut::<libc::c_char>();
      let mut flags: *mut libc::c_char = std::ptr::null_mut::<libc::c_char>();
      let mut len_F: size_t = 0;
      let mut len_R: size_t = 0;
      let mut gflag: libc::c_int = 0;
      let mut dont_chain_first_item: libc::c_int = 1i32;
      // F points to the "find" pattern
      // R points to the "replace" pattern
      // replace the cmd line delimiters "/" with NULs
      c = *orig_buf.offset(1); // what is the delimiter
      F = orig_buf.offset(2); // start of "find"
      R = strchr(F, c as libc::c_int); // middle delimiter
      if R.is_null() {
        current_block = 10464649869538968490; // terminate "find"
      } else {
        len_F = R.wrapping_offset_from(F) as libc::c_long as size_t; // terminate "replace"
        let fresh13 = R;
        R = R.offset(1);
        *fresh13 = '\u{0}' as i32 as libc::c_char;
        flags = strchr(R, c as libc::c_int);
        if flags.is_null() {
          current_block = 10464649869538968490;
        } else {
          len_R = flags.wrapping_offset_from(R) as libc::c_long as size_t;
          let fresh14 = flags;
          flags = flags.offset(1);
          *fresh14 = '\u{0}' as i32 as libc::c_char;
          gflag = *flags as libc::c_int;
          q = begin_line(q);
          if b < 0 {
            // maybe :s/foo/bar/
            q = begin_line((*ptr_to_globals).dot);
            b = count_lines((*ptr_to_globals).text, q) // start with cur line
                                                       // cur line number
          } // maybe :.s/foo/bar/
          if e < 0 {
            e = b
          }
          i = b;
          while i <= e {
            // so, :20,23 s \0 find \0 replace \0
            let mut ls: *mut libc::c_char = q; // orig line start
            let mut found: *mut libc::c_char = std::ptr::null_mut::<libc::c_char>(); // search cur line only for "find"
            loop {
              found = char_search(
                q,
                F,
                (FORWARD as libc::c_int) << 1i32 | LIMITED as libc::c_int,
              );
              if found.is_null() {
                break;
              }
              let mut bias: uintptr_t = 0;
              // we found the "find" pattern - delete it
              // For undo support, the first item should not be chained
              text_hole_delete(
                found,
                found.offset(len_F as isize).offset(-1),
                dont_chain_first_item,
              );
              dont_chain_first_item = 2i32;
              // insert the "replace" patern
              bias = string_insert(found, R, 2i32);
              found = found.offset(bias as isize);
              ls = ls.offset(bias as isize);
              //q += bias; - recalculated anyway
              // check for "global"  :s/foo/bar/g
              if !(gflag == 'g' as i32) {
                break;
              }
              if !(found.offset(len_R as isize) < end_line(ls)) {
                break;
              }
              q = found.offset(len_R as isize)
              // don't let q move past cur line
            }
            q = next_line(ls);
            i += 1
          }
          current_block = 11009327605418749796;
        }
      }
      match current_block {
        11009327605418749796 => {}
        _ => {
          status_line(b":s expression missing delimiters\x00" as *const u8 as *const libc::c_char);
          return;
        }
      }
    /* FEATURE_VI_SEARCH */
    } else if strncmp(
      cmd.as_mut_ptr(),
      b"version\x00" as *const u8 as *const libc::c_char,
      i as libc::c_ulong,
    ) == 0
    {
      // show software version
      status_line(b"1.32.0.git\x00" as *const u8 as *const libc::c_char);
    } else if strncmp(
      cmd.as_mut_ptr(),
      b"write\x00" as *const u8 as *const libc::c_char,
      i as libc::c_ulong,
    ) == 0
      || strncmp(
        cmd.as_mut_ptr(),
        b"wq\x00" as *const u8 as *const libc::c_char,
        i as libc::c_ulong,
      ) == 0
      || strncmp(
        cmd.as_mut_ptr(),
        b"wn\x00" as *const u8 as *const libc::c_char,
        i as libc::c_ulong,
      ) == 0
      || cmd[0] as libc::c_int == 'x' as i32 && cmd[1] == 0
    {
      let mut size_1: libc::c_int = 0;
      //int forced = FALSE;
      // is there a file name to write to?
      if args[0] != 0 {
        fn_0 = args.as_mut_ptr()
      }
      if (*ptr_to_globals).readonly_mode as libc::c_int != 0 && useforce == 0 {
        status_line_bold(
          b"\'%s\' is read only\x00" as *const u8 as *const libc::c_char,
          fn_0,
        );
      } else {
        //if (useforce) {
        // if "fn" is not write-able, chmod u+w
        // sprintf(syscmd, "chmod u+w %s", fn);
        // system(syscmd);
        // forced = TRUE;
        //}
        if (*ptr_to_globals).modified_count != 0 || cmd[0] as libc::c_int != 'x' as i32 {
          size_1 = (r.wrapping_offset_from(q) as libc::c_long + 1) as libc::c_int;
          l = file_write(fn_0, q, r)
        } else {
          size_1 = 0;
          l = 0
        }
        //if (useforce && forced) {
        // chmod u-w
        // sprintf(syscmd, "chmod u-w %s", fn);
        // system(syscmd);
        // forced = FALSE;
        //}
        if l < 0 {
          if l == -1i32 {
            status_line_bold_errno(fn_0);
          }
        } else {
          // how many lines written
          li = count_lines(q, q.offset(l as isize).offset(-1));
          status_line(
            b"\'%s\' %uL, %uC\x00" as *const u8 as *const libc::c_char,
            fn_0,
            li,
            l,
          );
          if l == size_1 {
            if q == (*ptr_to_globals).text && q.offset(l as isize) == (*ptr_to_globals).end {
              (*ptr_to_globals).modified_count = 0;
              (*ptr_to_globals).last_modified_count = -1i32
            }
            if cmd[0] as libc::c_int == 'x' as i32
              || cmd[1] as libc::c_int == 'q' as i32
              || cmd[1] as libc::c_int == 'n' as i32
              || cmd[1] as libc::c_int == 'Q' as i32
              || cmd[1] as libc::c_int == 'N' as i32
            {
              (*ptr_to_globals).editing = 0 as smallint
            }
          }
        }
      }
    } else if strncmp(
      cmd.as_mut_ptr(),
      b"yank\x00" as *const u8 as *const libc::c_char,
      i as libc::c_ulong,
    ) == 0
    {
      // yank lines
      if b < 0 {
        // no addr given- use defaults
        q = begin_line((*ptr_to_globals).dot); // assume .,. for the range
        r = end_line((*ptr_to_globals).dot)
      }
      text_yank(q, r, (*ptr_to_globals).YDreg as libc::c_int);
      li = count_lines(q, r);
      status_line(
        b"Yank %d lines (%d chars) into [%c]\x00" as *const u8 as *const libc::c_char,
        li,
        strlen((*ptr_to_globals).reg[(*ptr_to_globals).YDreg as usize]),
        what_reg() as libc::c_int,
      );
    } else {
      // cmd unknown
      not_implemented(cmd.as_mut_ptr()); // make sure "dot" is valid
    }
  }
  (*ptr_to_globals).dot = bound_dot((*ptr_to_globals).dot);
  /* FEATURE_VI_COLON */
}
//----- Char Routines --------------------------------------------
// Chars that are part of a word-
//    0123456789_ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz
// Chars that are Not part of a word (stoppers)
//    !"#$%&'()*+,-./:;<=>?@[\]^`{|}~
// Chars that are WhiteSpace
//    TAB NEWLINE VT FF RETURN SPACE
// DO NOT COUNT NEWLINE AS WHITESPACE
unsafe extern "C" fn st_test(
  mut p: *mut libc::c_char,
  mut type_0: libc::c_int,
  mut dir: libc::c_int,
  mut tested: *mut libc::c_char,
) -> libc::c_int {
  let mut c: libc::c_char = 0;
  let mut c0: libc::c_char = 0;
  let mut ci: libc::c_char = 0;
  let mut test: libc::c_int = 0;
  let mut inc: libc::c_int = 0;
  inc = dir;
  c0 = *p.offset(0);
  c = c0;
  ci = *p.offset(inc as isize);
  test = 0;
  if type_0 == S_BEFORE_WS as libc::c_int {
    c = ci;
    test = (({
      let mut bb__isspace: libc::c_uchar = (c as libc::c_int - 9i32) as libc::c_uchar;
      (bb__isspace as libc::c_int == ' ' as i32 - 9i32
        || bb__isspace as libc::c_int <= 13i32 - 9i32) as libc::c_int
    }) == 0
      || c as libc::c_int == '\n' as i32) as libc::c_int
  }
  if type_0 == S_TO_WS as libc::c_int {
    c = c0;
    test = (({
      let mut bb__isspace: libc::c_uchar = (c as libc::c_int - 9i32) as libc::c_uchar;
      (bb__isspace as libc::c_int == ' ' as i32 - 9i32
        || bb__isspace as libc::c_int <= 13i32 - 9i32) as libc::c_int
    }) == 0
      || c as libc::c_int == '\n' as i32) as libc::c_int
  }
  if type_0 == S_OVER_WS as libc::c_int {
    c = c0;
    test = {
      let mut bb__isspace: libc::c_uchar = (c as libc::c_int - 9i32) as libc::c_uchar;
      (bb__isspace as libc::c_int == ' ' as i32 - 9i32
        || bb__isspace as libc::c_int <= 13i32 - 9i32) as libc::c_int
    }
  }
  if type_0 == S_END_PUNCT as libc::c_int {
    c = ci;
    test = *strchrnul(
      b"!\"#$%&\'()*+,-./:;<=>?@[\\]^_`{|}~\x00" as *const u8 as *const libc::c_char,
      c as libc::c_int,
    )
    .offset(0) as libc::c_int
  }
  if type_0 == S_END_ALNUM as libc::c_int {
    c = ci;
    test =
      (bb_ascii_isalnum(c as libc::c_uchar) != 0 || c as libc::c_int == '_' as i32) as libc::c_int
  }
  *tested = c;
  return test;
}
unsafe extern "C" fn skip_thing(
  mut p: *mut libc::c_char,
  mut linecnt: libc::c_int,
  mut dir: libc::c_int,
  mut type_0: libc::c_int,
) -> *mut libc::c_char {
  let mut c: libc::c_char = 0;
  while st_test(p, type_0, dir, &mut c) != 0 {
    // make sure we limit search to correct number of lines
    if c as libc::c_int == '\n' as i32 && {
      linecnt -= 1;
      (linecnt) < 1i32
    } {
      break;
    }
    if dir >= 0 && p >= (*ptr_to_globals).end.offset(-1) {
      break;
    }
    if dir < 0 && p <= (*ptr_to_globals).text {
      break;
    }
    p = p.offset(dir as isize)
    // move to next char
  }
  return p;
}
unsafe extern "C" fn winch_handler(mut _sig: libc::c_int) {
  let mut save_errno: libc::c_int = *bb_errno;
  // FIXME: do it in main loop!!!
  signal(
    28i32,
    Some(winch_handler as unsafe extern "C" fn(_: libc::c_int) -> ()),
  ); // get memory for virtual screen
  query_screen_dimensions(); // re-draw the screen
  new_screen(
    (*ptr_to_globals).rows as libc::c_int,
    (*ptr_to_globals).columns as libc::c_int,
  );
  redraw(1i32);
  *bb_errno = save_errno;
}
unsafe extern "C" fn tstp_handler(mut _sig: libc::c_int) {
  let mut save_errno: libc::c_int = *bb_errno;
  // ioctl inside cookmode() was seen to generate SIGTTOU,
  // stopping us too early. Prevent that:
  signal(
    22i32,
    ::std::mem::transmute::<libc::intptr_t, __sighandler_t>(1i32 as libc::intptr_t),
  ); // terminal to "cooked"
  go_bottom_and_clear_to_eol();
  cookmode();
  // stop now
  //signal(SIGTSTP, SIG_DFL);
  //raise(SIGTSTP);
  raise(19i32); // avoid "dance" with TSTP handler - use SIGSTOP instead
                //signal(SIGTSTP, tstp_handler);
                // we have been "continued" with SIGCONT, restore screen and termios
  rawmode(); // terminal to "raw"
  (*ptr_to_globals).last_status_cksum = 0; // force status update
  redraw(1i32); // re-draw the screen
  *bb_errno = save_errno;
}
unsafe extern "C" fn int_handler(mut sig: libc::c_int) {
  signal(
    2i32,
    Some(int_handler as unsafe extern "C" fn(_: libc::c_int) -> ()),
  );
  siglongjmp((*ptr_to_globals).restart.as_mut_ptr(), sig);
}
unsafe extern "C" fn find_range(
  mut start: *mut *mut libc::c_char,
  mut stop: *mut *mut libc::c_char,
  mut c: libc::c_char,
) -> libc::c_int {
  let mut save_dot: *mut libc::c_char = std::ptr::null_mut::<libc::c_char>();
  let mut p: *mut libc::c_char = std::ptr::null_mut::<libc::c_char>();
  let mut q: *mut libc::c_char = std::ptr::null_mut::<libc::c_char>();
  let mut t: *mut libc::c_char = std::ptr::null_mut::<libc::c_char>();
  let mut cnt: libc::c_int = 0;
  let mut multiline: libc::c_int = 0;
  let mut forward: libc::c_int = 0;
  save_dot = (*ptr_to_globals).dot;
  q = (*ptr_to_globals).dot;
  p = q;
  // will a 'G' command move forwards or backwards?
  forward = ((*ptr_to_globals).cmdcnt == 0
    || (*ptr_to_globals).cmdcnt > count_lines((*ptr_to_globals).text, (*ptr_to_globals).dot))
    as libc::c_int;
  if !strchr(
    b"cdy><\x00" as *const u8 as *const libc::c_char,
    c as libc::c_int,
  )
  .is_null()
  {
    // these cmds operate on whole lines
    q = begin_line(p);
    p = q;
    cnt = 1i32;
    while cnt < (*ptr_to_globals).cmdcnt {
      q = next_line(q);
      cnt += 1
    }
    q = end_line(q)
  } else if !strchr(
    b"^%$0bBeEfth\x08\x7f\x00" as *const u8 as *const libc::c_char,
    c as libc::c_int,
  )
  .is_null()
  {
    // These cmds operate on char positions
    do_cmd(c as libc::c_int); // execute movement cmd
    q = (*ptr_to_globals).dot
  } else if !strchr(
    b"wW\x00" as *const u8 as *const libc::c_char,
    c as libc::c_int,
  )
  .is_null()
  {
    do_cmd(c as libc::c_int); // execute movement cmd
                              // if we are at the next word's first char
                              // step back one char
                              // but check the possibilities when it is true
    if (*ptr_to_globals).dot > (*ptr_to_globals).text
      && (({
        let mut bb__isspace: libc::c_uchar =
          (*(*ptr_to_globals).dot.offset(-1i32 as isize) as libc::c_int - 9i32) as libc::c_uchar; // move back off of next word
        (bb__isspace as libc::c_int == ' ' as i32 - 9i32
          || bb__isspace as libc::c_int <= 13i32 - 9i32) as libc::c_int
      }) != 0
        && ({
          let mut bb__isspace: libc::c_uchar =
            (*(*ptr_to_globals).dot.offset(0) as libc::c_int - 9i32) as libc::c_uchar; // stay off NL
          (bb__isspace as libc::c_int == ' ' as i32 - 9i32
            || bb__isspace as libc::c_int <= 13i32 - 9i32) as libc::c_int
        }) == 0
        || *strchrnul(
          b"!\"#$%&\'()*+,-./:;<=>?@[\\]^_`{|}~\x00" as *const u8 as *const libc::c_char,
          *(*ptr_to_globals).dot.offset(-1i32 as isize) as libc::c_int,
        )
        .offset(0) as libc::c_int
          != 0
          && *strchrnul(
            b"!\"#$%&\'()*+,-./:;<=>?@[\\]^_`{|}~\x00" as *const u8 as *const libc::c_char,
            *(*ptr_to_globals).dot.offset(0) as libc::c_int,
          )
          .offset(0)
            == 0
        || bb_ascii_isalnum(*(*ptr_to_globals).dot.offset(-1i32 as isize) as libc::c_uchar) != 0
          && bb_ascii_isalnum(*(*ptr_to_globals).dot.offset(0) as libc::c_uchar) == 0)
    {
      (*ptr_to_globals).dot = (*ptr_to_globals).dot.offset(-1)
    }
    if (*ptr_to_globals).dot > (*ptr_to_globals).text
      && *(*ptr_to_globals).dot as libc::c_int == '\n' as i32
    {
      (*ptr_to_globals).dot = (*ptr_to_globals).dot.offset(-1)
    }
    q = (*ptr_to_globals).dot
  } else if !strchr(
    b"H-k{\x00" as *const u8 as *const libc::c_char,
    c as libc::c_int,
  )
  .is_null()
    || c as libc::c_int == 'G' as i32 && forward == 0
  {
    // these operate on multi-lines backwards
    q = end_line((*ptr_to_globals).dot); // find NL
    do_cmd(c as libc::c_int); // execute movement cmd
    dot_begin();
    p = (*ptr_to_globals).dot
  } else if !strchr(
    b"L+j}\r\n\x00" as *const u8 as *const libc::c_char,
    c as libc::c_int,
  )
  .is_null()
    || c as libc::c_int == 'G' as i32 && forward != 0
  {
    // these operate on multi-lines forwards
    p = begin_line((*ptr_to_globals).dot); // execute movement cmd
    do_cmd(c as libc::c_int); // find NL
    dot_end();
    q = (*ptr_to_globals).dot
  }
  if q < p {
    t = q;
    q = p;
    p = t
  }
  // backward char movements don't include start position
  if q > p
    && !strchr(
      b"^0bBh\x08\x7f\x00" as *const u8 as *const libc::c_char,
      c as libc::c_int,
    )
    .is_null()
  {
    q = q.offset(-1)
  }
  multiline = 0;
  t = p;
  while t <= q {
    if *t as libc::c_int == '\n' as i32 {
      multiline = 1i32;
      break;
    } else {
      t = t.offset(1)
    }
  }
  *start = p;
  *stop = q;
  (*ptr_to_globals).dot = save_dot;
  return multiline;
}
/* FEATURE_VI_USE_SIGNALS */
//---------------------------------------------------------------------
//----- the Ascii Chart -----------------------------------------------
//  00 nul   01 soh   02 stx   03 etx   04 eot   05 enq   06 ack   07 bel
//  08 bs    09 ht    0a nl    0b vt    0c np    0d cr    0e so    0f si
//  10 dle   11 dc1   12 dc2   13 dc3   14 dc4   15 nak   16 syn   17 etb
//  18 can   19 em    1a sub   1b esc   1c fs    1d gs    1e rs    1f us
//  20 sp    21 !     22 "     23 #     24 $     25 %     26 &     27 '
//  28 (     29 )     2a *     2b +     2c ,     2d -     2e .     2f /
//  30 0     31 1     32 2     33 3     34 4     35 5     36 6     37 7
//  38 8     39 9     3a :     3b ;     3c <     3d =     3e >     3f ?
//  40 @     41 A     42 B     43 C     44 D     45 E     46 F     47 G
//  48 H     49 I     4a J     4b K     4c L     4d M     4e N     4f O
//  50 P     51 Q     52 R     53 S     54 T     55 U     56 V     57 W
//  58 X     59 Y     5a Z     5b [     5c \     5d ]     5e ^     5f _
//  60 `     61 a     62 b     63 c     64 d     65 e     66 f     67 g
//  68 h     69 i     6a j     6b k     6c l     6d m     6e n     6f o
//  70 p     71 q     72 r     73 s     74 t     75 u     76 v     77 w
//  78 x     79 y     7a z     7b {     7c |     7d }     7e ~     7f del
//---------------------------------------------------------------------
//----- Execute a Vi Command -----------------------------------
unsafe extern "C" fn do_cmd(mut c: libc::c_int) {
  let mut msg: *const libc::c_char = std::ptr::null();
  let mut current_block: u64;
  let mut p: *mut libc::c_char = std::ptr::null_mut::<libc::c_char>();
  let mut q: *mut libc::c_char = std::ptr::null_mut::<libc::c_char>();
  let mut save_dot: *mut libc::c_char = std::ptr::null_mut::<libc::c_char>();
  let mut buf: [libc::c_char; 12] = [0; 12];
  let mut dir: libc::c_int = 0;
  let mut cnt: libc::c_int = 0;
  let mut i: libc::c_int = 0;
  let mut j: libc::c_int = 0;
  let mut c1: libc::c_int = 0;
  //	c1 = c; // quiet the compiler
  //	cnt = yf = 0; // quiet the compiler
  //	p = q = save_dot = buf; // quiet the compiler
  memset(
    buf.as_mut_ptr() as *mut libc::c_void,
    '\u{0}' as i32,
    ::std::mem::size_of::<[libc::c_char; 12]>() as libc::c_ulong,
  );
  show_status_line();
  // if this is a cursor key, skip these checks
  match c {
    -2 | -3 | -5 | -4 | -6 | -7 | -10 | -11 | -9 => {
      current_block = 7747620188854052080;
    }
    _ => {
      if (*ptr_to_globals).cmd_mode as libc::c_int == 2i32 {
        //  flip-flop Insert/Replace mode
        if c == KEYCODE_INSERT as libc::c_int {
          current_block = 8629930936610358348;
        } else if *(*ptr_to_globals).dot as libc::c_int == '\n' as i32 {
          // we are 'R'eplacing the current *dot with new char
          // don't Replace past E-o-l
          (*ptr_to_globals).cmd_mode = 1i32 as smallint; // convert to insert
          undo_queue_commit(); // delete char
          current_block = 2838571290723028321;
        } else {
          if 1i32 <= c
            || c as libc::c_uchar as libc::c_int >= ' ' as i32
              && (c as libc::c_uchar as libc::c_int) < 0x7fi32
          {
            if c != 27i32 {
              (*ptr_to_globals).dot = yank_delete(
                (*ptr_to_globals).dot,
                (*ptr_to_globals).dot,
                0,
                YANKDEL as libc::c_int,
                1i32,
              )
            }
            (*ptr_to_globals).dot = char_insert((*ptr_to_globals).dot, c as libc::c_char, 2i32)
            // insert new char
          }
          current_block = 15129665204879337069;
        }
      } else {
        current_block = 2838571290723028321;
      }
      match current_block {
        8629930936610358348 => {}
        15129665204879337069 => {}
        _ => {
          if (*ptr_to_globals).cmd_mode as libc::c_int == 1i32 {
            // hitting "Insert" twice means "R" replace mode
            if c == KEYCODE_INSERT as libc::c_int {
              current_block = 14485563909071777978;
            } else {
              // insert the char c at "dot"
              if 1i32 <= c
                || c as libc::c_uchar as libc::c_int >= ' ' as i32
                  && (c as libc::c_uchar as libc::c_int) < 0x7fi32
              {
                (*ptr_to_globals).dot = char_insert((*ptr_to_globals).dot, c as libc::c_char, 3i32)
              }
              current_block = 15129665204879337069;
            }
          } else {
            current_block = 7747620188854052080;
          }
        }
      }
    }
  }
  match current_block {
    7747620188854052080 => {
      match c {
        0 => {
          current_block = 17440971994642376514;
          match current_block {
            16992905640583886232 => {
              loop
              // ~- flip the case of letters   a-z -> A-Z
              {
                if (*(*ptr_to_globals).dot as libc::c_int - 'a' as i32) as libc::c_uchar
                  as libc::c_int
                  <= 'z' as i32 - 'a' as i32
                {
                  undo_push(
                    (*ptr_to_globals).dot,
                    1i32 as libc::c_uint,
                    1i32 as libc::c_uchar,
                  ); // stop adding to q
                  *(*ptr_to_globals).dot =
                    bb_ascii_toupper(*(*ptr_to_globals).dot as libc::c_uchar) as libc::c_char; // get the replacement char
                  undo_push(
                    (*ptr_to_globals).dot,
                    1i32 as libc::c_uint,
                    2i32 as libc::c_uchar,
                  );
                } else if (*(*ptr_to_globals).dot as libc::c_int - 'A' as i32) as libc::c_uchar
                  as libc::c_int
                  <= 'Z' as i32 - 'A' as i32
                {
                  undo_push(
                    (*ptr_to_globals).dot,
                    1i32 as libc::c_uint,
                    1i32 as libc::c_uchar,
                  );
                  *(*ptr_to_globals).dot =
                    bb_ascii_tolower(*(*ptr_to_globals).dot as libc::c_uchar) as libc::c_char;
                  undo_push(
                    (*ptr_to_globals).dot,
                    1i32 as libc::c_uint,
                    2i32 as libc::c_uchar,
                  );
                }
                dot_right();
                (*ptr_to_globals).cmdcnt -= 1;
                if !((*ptr_to_globals).cmdcnt > 0) {
                  break;
                }
              }
              end_cmd_q();
              current_block = 15129665204879337069;
            }
            8729655159604064397 =>
            // z-
            {
              c1 = get_one_char(); // put dot at center
              cnt = 0; // put dot at bottom
              if c1 == '.' as i32 {
                cnt = (*ptr_to_globals)
                  .rows
                  .wrapping_sub(2i32 as libc::c_uint)
                  .wrapping_div(2i32 as libc::c_uint) as libc::c_int
              } // start dot at top
              if c1 == '-' as i32 {
                cnt = (*ptr_to_globals).rows.wrapping_sub(2i32 as libc::c_uint) as libc::c_int
              }
              (*ptr_to_globals).screenbegin = begin_line((*ptr_to_globals).dot);
              dot_scroll(cnt, -1i32);
              current_block = 15129665204879337069;
            }
            15899500648299942075 => {
              // t- move to char prior to next x
              (*ptr_to_globals).last_forward_char = get_one_char(); // get the replacement char
              do_cmd(';' as i32);
              if *(*ptr_to_globals).dot as libc::c_int == (*ptr_to_globals).last_forward_char {
                dot_left();
              }
              (*ptr_to_globals).last_forward_char = 0;
              current_block = 15129665204879337069;
            }
            9051390181078481641 =>
            // r- replace the current char with user input
            {
              c1 = get_one_char(); // stop adding to q
              if *(*ptr_to_globals).dot as libc::c_int != '\n' as i32 {
                (*ptr_to_globals).dot =
                  text_hole_delete((*ptr_to_globals).dot, (*ptr_to_globals).dot, 1i32);
                (*ptr_to_globals).dot =
                  char_insert((*ptr_to_globals).dot, c1 as libc::c_char, 2i32);
                dot_left();
              }
              end_cmd_q();
              current_block = 15129665204879337069;
            }
            877115918601926659 =>
            // b- back a word
            // e- end of word
            {
              dir = FORWARD as libc::c_int;
              if c == 'b' as i32 {
                dir = BACK as libc::c_int
              }
              while !((*ptr_to_globals).dot.offset(dir as isize) < (*ptr_to_globals).text
                || (*ptr_to_globals).dot.offset(dir as isize) > (*ptr_to_globals).end.offset(-1))
              {
                (*ptr_to_globals).dot = (*ptr_to_globals).dot.offset(dir as isize);
                if ({
                  let mut bb__isspace: libc::c_uchar =
                    (*(*ptr_to_globals).dot as libc::c_int - 9i32) as libc::c_uchar;
                  (bb__isspace as libc::c_int == ' ' as i32 - 9i32
                    || bb__isspace as libc::c_int <= 13i32 - 9i32) as libc::c_int
                }) != 0
                {
                  (*ptr_to_globals).dot = skip_thing(
                    (*ptr_to_globals).dot,
                    if c == 'e' as i32 { 2i32 } else { 1i32 },
                    dir,
                    S_OVER_WS as libc::c_int,
                  )
                }
                if bb_ascii_isalnum(*(*ptr_to_globals).dot as libc::c_uchar) != 0
                  || *(*ptr_to_globals).dot as libc::c_int == '_' as i32
                {
                  (*ptr_to_globals).dot =
                    skip_thing((*ptr_to_globals).dot, 1i32, dir, S_END_ALNUM as libc::c_int)
                } else if *strchrnul(
                  b"!\"#$%&\'()*+,-./:;<=>?@[\\]^_`{|}~\x00" as *const u8 as *const libc::c_char,
                  *(*ptr_to_globals).dot as libc::c_int,
                )
                .offset(0)
                  != 0
                {
                  (*ptr_to_globals).dot =
                    skip_thing((*ptr_to_globals).dot, 1i32, dir, S_END_PUNCT as libc::c_int)
                }
                (*ptr_to_globals).cmdcnt -= 1;
                if !((*ptr_to_globals).cmdcnt > 0) {
                  break;
                }
              }
              current_block = 15129665204879337069;
            }
            1085022737867179637 => {
              // ^- move to first non-blank on line
              dot_begin();
              dot_skip_over_ws();
              current_block = 15129665204879337069;
            }
            3113147720494587438 => {
              // Z- if modified, {write}; exit
              // ZZ means to save file (if necessary), then exit
              c1 = get_one_char();
              if c1 != 'Z' as i32 {
                indicate_error();
              } else if (*ptr_to_globals).modified_count != 0 {
                if 1i32 != 0 && (*ptr_to_globals).readonly_mode as libc::c_int != 0 {
                  status_line_bold(
                    b"\'%s\' is read only\x00" as *const u8 as *const libc::c_char,
                    (*ptr_to_globals).current_filename,
                  );
                } else {
                  cnt = file_write(
                    (*ptr_to_globals).current_filename,
                    (*ptr_to_globals).text,
                    (*ptr_to_globals).end.offset(-1),
                  );
                  if cnt < 0 {
                    if cnt == -1i32 {
                      status_line_bold(b"Write error: %m\x00" as *const u8 as *const libc::c_char);
                    }
                  } else if cnt as libc::c_long
                    == (*ptr_to_globals)
                      .end
                      .offset(-1)
                      .wrapping_offset_from((*ptr_to_globals).text)
                      as libc::c_long
                      + 1
                  {
                    (*ptr_to_globals).editing = 0 as smallint
                  }
                }
              } else {
                (*ptr_to_globals).editing = 0 as smallint
              }
              current_block = 15129665204879337069;
            }
            12960118908218882441 => {
              // O- open a empty line above
              //    0i\n ESC -i
              p = begin_line((*ptr_to_globals).dot); // 0
              if *p.offset(-1i32 as isize) as libc::c_int == '\n' as i32 {
                dot_prev();
                current_block = 2087484904894455135;
              } else {
                dot_begin();
                // -
                (*ptr_to_globals).dot =
                  char_insert((*ptr_to_globals).dot, '\n' as i32 as libc::c_char, 1i32); // i\n ESC
                dot_prev();
                current_block = 8629930936610358348;
              }
            }
            8720450212473544924 => {
              // M- goto middle line on screen
              (*ptr_to_globals).dot = (*ptr_to_globals).screenbegin;
              cnt = 0;
              while (cnt as libc::c_uint)
                < (*ptr_to_globals)
                  .rows
                  .wrapping_sub(1i32 as libc::c_uint)
                  .wrapping_div(2i32 as libc::c_uint)
              {
                (*ptr_to_globals).dot = next_line((*ptr_to_globals).dot);
                cnt += 1
              }
              current_block = 15129665204879337069;
            }
            13015277209715431090 => {
              // L- goto bottom line on screen
              (*ptr_to_globals).dot = end_screen();
              if (*ptr_to_globals).cmdcnt as libc::c_uint
                > (*ptr_to_globals).rows.wrapping_sub(1i32 as libc::c_uint)
              {
                (*ptr_to_globals).cmdcnt =
                  (*ptr_to_globals).rows.wrapping_sub(1i32 as libc::c_uint) as libc::c_int
              }
              (*ptr_to_globals).cmdcnt -= 1;
              if (*ptr_to_globals).cmdcnt > 0 {
                do_cmd('-' as i32);
              }
              dot_begin();
              dot_skip_over_ws();
              current_block = 15129665204879337069;
            }
            9800435767766781385 => {
              loop
              // J- join current and next lines together
              {
                dot_end(); // move to NL
                if (*ptr_to_globals).dot < (*ptr_to_globals).end.offset(-1) {
                  // make sure not last char in text[]
                  undo_push(
                    (*ptr_to_globals).dot,
                    1i32 as libc::c_uint,
                    1i32 as libc::c_uchar,
                  ); // replace NL with space
                  let fresh15 = (*ptr_to_globals).dot;
                  (*ptr_to_globals).dot = (*ptr_to_globals).dot.offset(1);
                  *fresh15 = ' ' as i32 as libc::c_char;
                  undo_push(
                    (*ptr_to_globals).dot.offset(-1),
                    1i32 as libc::c_uint,
                    2i32 as libc::c_uchar,
                  );
                  while ({
                    let mut bb__isblank: libc::c_uchar = *(*ptr_to_globals).dot as libc::c_uchar;
                    (bb__isblank as libc::c_int == ' ' as i32
                      || bb__isblank as libc::c_int == '\t' as i32)
                      as libc::c_int
                  }) != 0
                  {
                    // delete leading WS
                    text_hole_delete((*ptr_to_globals).dot, (*ptr_to_globals).dot, 2i32);
                    // stop adding to q
                  }
                } // 0
                (*ptr_to_globals).cmdcnt -= 1;
                if !((*ptr_to_globals).cmdcnt > 0) {
                  break;
                }
              }
              end_cmd_q();
              current_block = 15129665204879337069;
            }
            3432363526595694666 =>
            // I- insert before first non-blank
            {
              dot_begin();
              dot_skip_over_ws();
              //**** fall through to ... 'i'
              current_block = 3268579060917229304; // start inserting
            }
            3494829253343353619 => {
              // H- goto top line on screen
              (*ptr_to_globals).dot = (*ptr_to_globals).screenbegin;
              if (*ptr_to_globals).cmdcnt as libc::c_uint
                > (*ptr_to_globals).rows.wrapping_sub(1i32 as libc::c_uint)
              {
                (*ptr_to_globals).cmdcnt =
                  (*ptr_to_globals).rows.wrapping_sub(1i32 as libc::c_uint) as libc::c_int
              }
              (*ptr_to_globals).cmdcnt -= 1;
              if (*ptr_to_globals).cmdcnt > 0 {
                do_cmd('+' as i32);
              }
              dot_skip_over_ws();
              current_block = 15129665204879337069;
            }
            17973101765331640574 => {
              // 'gg' goto a line number (vim) (default: very first line)
              c1 = get_one_char();
              if c1 != 'g' as i32 {
                buf[0] = 'g' as i32 as libc::c_char;
                // c1 < 0 if the key was special. Try "g<up-arrow>"
                // TODO: if Unicode?
                buf[1] = if c1 >= 0 { c1 } else { '*' as i32 } as libc::c_char;
                buf[2] = '\u{0}' as i32 as libc::c_char;
                not_implemented(buf.as_mut_ptr());
                current_block = 15129665204879337069;
              } else {
                if (*ptr_to_globals).cmdcnt == 0 {
                  (*ptr_to_globals).cmdcnt = 1i32
                }
                current_block = 11945623545738147997;
              }
            }
            16546625800574160972 =>
            // C- Change to e-o-l
            // D- delete to e-o-l
            {
              save_dot = (*ptr_to_globals).dot; // move to before NL
              (*ptr_to_globals).dot = dollar_line((*ptr_to_globals).dot);
              // copy text into a register and delete
              (*ptr_to_globals).dot = yank_delete(
                save_dot,
                (*ptr_to_globals).dot,
                0,
                YANKDEL as libc::c_int,
                1i32,
              ); // delete to e-o-l
              if c == 'C' as i32 {
                current_block = 8629930936610358348; // start inserting
              } else {
                if c == 'D' as i32 {
                  end_cmd_q(); // stop adding to q
                }
                current_block = 15129665204879337069;
              }
            }
            11937696639986586685 =>
            // <- Left  shift something
            // >- Right shift something
            {
              cnt = count_lines((*ptr_to_globals).text, (*ptr_to_globals).dot); // get the type of thing to delete
              c1 = get_one_char(); // save copy before change
              find_range(&mut p, &mut q, c1 as libc::c_char); // # of lines we are shifting
              yank_delete(p, q, 1i32, YANKONLY as libc::c_int, 0);
              p = begin_line(p);
              q = end_line(q);
              i = count_lines(p, q);
              while i > 0 {
                if c == '<' as i32 {
                  // shift left- remove tab or 8 spaces
                  if *p as libc::c_int == '\t' as i32 {
                    // shrink buffer 1 char
                    text_hole_delete(p, p, 0);
                  } else if *p as libc::c_int == ' ' as i32 {
                    // we should be calculating columns, not just SPACE
                    j = 0;
                    while *p as libc::c_int == ' ' as i32 && j < (*ptr_to_globals).tabstop {
                      text_hole_delete(p, p, 0);
                      j += 1
                    }
                  }
                } else if c == '>' as i32 {
                  // shift right -- add tab or 8 spaces
                  char_insert(p, '\t' as i32 as libc::c_char, 1i32); // what line were we on
                } // stop adding to q
                i -= 1; // get input line- use "status line"
                p = next_line(p)
              }
              (*ptr_to_globals).dot = find_line(cnt);
              dot_skip_over_ws();
              end_cmd_q();
              current_block = 15129665204879337069;
            }
            17725350714912028156 =>
            // :- the colon mode commands
            {
              p = get_input_line(b":\x00" as *const u8 as *const libc::c_char); // execute the command
              colon(p);
              current_block = 15129665204879337069;
            }
            14526470074083880812 => {
              // }- move forward paragraph
              q = char_search(
                (*ptr_to_globals).dot,
                b"\n\n\x00" as *const u8 as *const libc::c_char,
                (FORWARD as libc::c_int) << 1i32 | FULL as libc::c_int,
              );
              if !q.is_null() {
                // found blank line
                (*ptr_to_globals).dot = next_line(q)
                // move to next blank line
              }
              current_block = 15129665204879337069;
            }
            8893187391306414141 => {
              // {- move backward paragraph
              q = char_search(
                (*ptr_to_globals).dot,
                b"\n\n\x00" as *const u8 as *const libc::c_char,
                ((BACK as libc::c_int as libc::c_uint) << 1i32
                  | FULL as libc::c_int as libc::c_uint) as libc::c_int,
              );
              if !q.is_null() {
                // found blank line
                (*ptr_to_globals).dot = next_line(q)
                // move to next blank line
              } // assume BACKWARD search
              current_block = 15129665204879337069;
            }
            7021673758293221412 =>
            // N- backward search for last pattern
            {
              dir = BACK as libc::c_int;
              p = (*ptr_to_globals).dot.offset(-1);
              if *(*ptr_to_globals).last_search_pattern.offset(0) as libc::c_int == '?' as i32 {
                dir = FORWARD as libc::c_int;
                p = (*ptr_to_globals).dot.offset(1)
              }
              current_block = 4166979493554389389;
            }
            18374191879090272823 =>
            // /- search for a pattern
            // /- search for a pattern
            {
              buf[0] = c as libc::c_char; // get input line- use "status line"
              buf[1] = '\u{0}' as i32 as libc::c_char;
              q = get_input_line(buf.as_mut_ptr());
              if *q.offset(0) as libc::c_int != 0 && *q.offset(1) == 0 {
                if *(*ptr_to_globals).last_search_pattern.offset(0) != 0 {
                  *(*ptr_to_globals).last_search_pattern.offset(0) = c as libc::c_char
                }
                current_block = 7392824444931029276;
              // if no pat re-use old pat
              } else if *q.offset(0) != 0 {
                // strlen(q) > 1: new pat- save it and find
                // there is a new pat
                free((*ptr_to_globals).last_search_pattern as *mut libc::c_void);
                (*ptr_to_globals).last_search_pattern = crate::libbb::xfuncs_printf::xstrdup(q);
                current_block = 7392824444931029276;
              // now find the pattern
              } else {
                current_block = 15129665204879337069;
              }
            }
            16407828456666301883 =>
            // repeat latest 'f' in opposite direction
            {
              if (*ptr_to_globals).last_forward_char == 0 {
                current_block = 15129665204879337069;
              } else {
                loop {
                  q = (*ptr_to_globals).dot.offset(-1);
                  while q >= (*ptr_to_globals).text
                    && *q as libc::c_int != '\n' as i32
                    && *q as libc::c_int != (*ptr_to_globals).last_forward_char
                  {
                    q = q.offset(-1)
                  }
                  if q >= (*ptr_to_globals).text
                    && *q as libc::c_int == (*ptr_to_globals).last_forward_char
                  {
                    (*ptr_to_globals).dot = q
                  }
                  (*ptr_to_globals).cmdcnt -= 1;
                  if !((*ptr_to_globals).cmdcnt > 0) {
                    break;
                  }
                }
                current_block = 15129665204879337069;
              }
            }
            9018432604062702004 => {
              // %- find matching char of pair () [] {}
              q = (*ptr_to_globals).dot;
              while q < (*ptr_to_globals).end && *q as libc::c_int != '\n' as i32 {
                if !strchr(
                  b"()[]{}\x00" as *const u8 as *const libc::c_char,
                  *q as libc::c_int,
                )
                .is_null()
                {
                  // we found half of a pair
                  p = find_pair(q, *q);
                  if p.is_null() {
                    indicate_error();
                  } else {
                    (*ptr_to_globals).dot = p
                  }
                  break;
                } else {
                  q = q.offset(1)
                }
              }
              if *q as libc::c_int == '\n' as i32 {
                indicate_error();
              }
              current_block = 15129665204879337069;
            }
            10247103787464459848 =>
            // P- Put register before
            // p- put register after
            {
              p = (*ptr_to_globals).reg[(*ptr_to_globals).YDreg as usize];
              if p.is_null() {
                status_line_bold(
                  b"Nothing in register %c\x00" as *const u8 as *const libc::c_char,
                  what_reg() as libc::c_int,
                );
              } else {
                // are we putting whole lines or strings
                if !strchr(p, '\n' as i32).is_null() {
                  if c == 'P' as i32 {
                    dot_begin();
                    // putting lines- Put above
                  }
                  if c == 'p' as i32 {
                    // are we putting after very last line?
                    if end_line((*ptr_to_globals).dot) == (*ptr_to_globals).end.offset(-1) {
                      (*ptr_to_globals).dot = (*ptr_to_globals).end
                    // force dot to end of text[]
                    } else {
                      dot_next();
                      // next line, then put before
                    }
                  }
                } else if c == 'p' as i32 {
                  dot_right();
                }
                // move to right, can move to NL
                string_insert((*ptr_to_globals).dot, p, 1i32); // insert the string
                end_cmd_q(); // stop adding to q
              }
              current_block = 15129665204879337069;
            }
            15260732871948875843 => {
              // m- Mark a line
              // this is really stupid.  If there are any inserts or deletes
              // between text[0] and dot then this mark will not point to the
              // correct location! It could be off by many lines!
              // Well..., at least its quick and dirty.
              c1 = (get_one_char() | 0x20i32) - 'a' as i32;
              if c1 as libc::c_uint <= 25i32 as libc::c_uint {
                // a-z?
                // remember the line
                (*ptr_to_globals).mark[c1 as usize] = (*ptr_to_globals).dot
              } else {
                indicate_error();
              }
              current_block = 15129665204879337069;
            }
            12738322036487086035 => {
              // '- goto a specific mark
              c1 = get_one_char() | 0x20i32;
              if (c1 - 'a' as i32) as libc::c_uint <= 25i32 as libc::c_uint {
                // a-z?
                c1 = c1 - 'a' as i32;
                // get the b-o-l
                q = (*ptr_to_globals).mark[c1 as usize]; // go to B-o-l
                if (*ptr_to_globals).text <= q && q < (*ptr_to_globals).end {
                  (*ptr_to_globals).dot = q;
                  dot_begin();
                  dot_skip_over_ws();
                }
              } else if c1 == '\'' as i32 {
                // goto previous context
                (*ptr_to_globals).dot = swap_context((*ptr_to_globals).dot); // swap current and previous context
                dot_begin(); // go to B-o-l
                dot_skip_over_ws(); // | 0x20 is tolower()
              } else {
                indicate_error();
              }
              current_block = 15129665204879337069;
            }
            13255096073384561358 =>
            // "- name a register to use for Delete/Yank
            {
              c1 = (get_one_char() | 0x20i32) - 'a' as i32;
              if c1 as libc::c_uint <= 25i32 as libc::c_uint {
                // a-z?
                (*ptr_to_globals).YDreg = c1 as smalluint
              } else {
                indicate_error();
              }
              current_block = 15129665204879337069;
            }
            10258711639984089377 => {
              // esc
              if (*ptr_to_globals).cmd_mode as libc::c_int == 0 {
                indicate_error(); // stop inserting
              } // force status update
              (*ptr_to_globals).cmd_mode = 0 as smallint;
              undo_queue_commit();
              end_cmd_q();
              (*ptr_to_globals).last_status_cksum = 0;
              current_block = 15129665204879337069;
            }
            11439127087547047736 =>
            //case 0x01:	// soh
            //case 0x09:	// ht
            //case 0x0b:	// vt
            //case 0x0e:	// so
            //case 0x0f:	// si
            //case 0x10:	// dle
            //case 0x11:	// dc1
            //case 0x13:	// dc3
            //case 0x16:	// syn
            //case 0x17:	// etb
            //case 0x18:	// can
            //case 0x1c:	// fs
            //case 0x1d:	// gs
            //case 0x1e:	// rs
            //case 0x1f:	// us
            //case '!':	// !-
            //case '#':	// #-
            //case '&':	// &-
            //case '(':	// (-
            //case ')':	// )-
            //case '*':	// *-
            //case '=':	// =-
            //case '@':	// @-
            //case 'F':	// F-
            //case 'K':	// K-
            //case 'Q':	// Q-
            //case 'S':	// S-
            //case 'T':	// T-
            //case 'V':	// V-
            //case '[':	// [-
            //case '\\':	// \-
            //case ']':	// ]-
            //case '_':	// _-
            //case '`':	// `-
            //case 'v':	// v-
            // unrecognized command
            {
              buf[0] = c as libc::c_char; // stop adding to q
              buf[1] = '\u{0}' as i32 as libc::c_char;
              not_implemented(buf.as_mut_ptr());
              end_cmd_q();
              current_block = 17440971994642376514;
            }
            7961798899781870241 =>
            // ctrl-B  scroll up   full screen
            // Cursor Key Page Up
            {
              dot_scroll(
                (*ptr_to_globals).rows.wrapping_sub(2i32 as libc::c_uint) as libc::c_int,
                -1i32,
              );
              current_block = 15129665204879337069;
            }
            9426343755402444879 => {
              // ctrl-D  scroll down half screen
              dot_scroll(
                (*ptr_to_globals)
                  .rows
                  .wrapping_sub(2i32 as libc::c_uint)
                  .wrapping_div(2i32 as libc::c_uint) as libc::c_int,
                1i32,
              );
              current_block = 15129665204879337069;
            }
            13352459794680105913 => {
              // ctrl-E  scroll down one line
              dot_scroll(1i32, 1i32);
              current_block = 15129665204879337069;
            }
            14142272253464333006 =>
            // ctrl-F  scroll down full screen
            // Cursor Key Page Down
            {
              dot_scroll(
                (*ptr_to_globals).rows.wrapping_sub(2i32 as libc::c_uint) as libc::c_int,
                1i32,
              ); // force status update
              current_block = 15129665204879337069;
            }
            10758177197742640066 =>
            // ctrl-G  show current status
            {
              (*ptr_to_globals).last_status_cksum = 0;
              current_block = 15129665204879337069;
            }
            6152256259730122749 =>
            // h- move left
            {
              current_block = 7534742345255184552;
            }
            12883932598258173301 =>
            // Newline ^J
            {
              current_block = 8800996768013373992;
            }
            11242998110520238401 =>
            // ctrl-L  force redraw whole screen
            // ctrl-R  force redraw
            {
              redraw(1i32);
              current_block = 15129665204879337069;
            }
            13619733043935729992 =>
            // Carriage Return ^M
            {
              loop
              // +- goto next line
              {
                dot_next();
                dot_skip_over_ws();
                (*ptr_to_globals).cmdcnt -= 1;
                if !((*ptr_to_globals).cmdcnt > 0) {
                  break;
                }
              }
              current_block = 15129665204879337069;
            }
            9339065157412720613 => {
              // ctrl-U  scroll up half screen
              dot_scroll(
                (*ptr_to_globals)
                  .rows
                  .wrapping_sub(2i32 as libc::c_uint)
                  .wrapping_div(2i32 as libc::c_uint) as libc::c_int,
                -1i32,
              );
              current_block = 15129665204879337069;
            }
            11447082683497798022 => {
              // ctrl-Y  scroll up one line
              dot_scroll(1i32, -1i32);
              current_block = 15129665204879337069;
            }
            5182000506326660482 =>
            // move right
            {
              current_block = 13993698454868426881;
            }
            1105010766850597332 => {
              // U- Undo; replace current line with original version
              if !(*ptr_to_globals).reg[27].is_null() {
                p = begin_line((*ptr_to_globals).dot); // delete cur line
                q = end_line((*ptr_to_globals).dot); // insert orig line
                p = text_hole_delete(p, q, 1i32);
                p = p.offset(string_insert(p, (*ptr_to_globals).reg[27], 2i32) as isize);
                (*ptr_to_globals).dot = p;
                dot_skip_over_ws();
              }
              current_block = 15129665204879337069;
            }
            8616046655533110204 =>
            /* FEATURE_VI_YANKMARK */
            // u- undo last operation
            {
              undo_pop();
              current_block = 15129665204879337069;
            }
            5127767458142431603 =>
            // $- goto end of line
            {
              loop
              // Cursor Key End
              {
                (*ptr_to_globals).dot = end_line((*ptr_to_globals).dot); // get the search char
                (*ptr_to_globals).cmdcnt -= 1;
                if (*ptr_to_globals).cmdcnt <= 0 {
                  break;
                }
                dot_next();
              }
              current_block = 15129665204879337069;
            }
            222014967776118151 =>
            // f- forward to a user specified char
            {
              (*ptr_to_globals).last_forward_char = get_one_char();
              current_block = 7856905509180742666;
            }
            11209792479411604110 => {
              loop
              // -- goto prev line
              {
                dot_prev();
                dot_skip_over_ws();
                (*ptr_to_globals).cmdcnt -= 1;
                if !((*ptr_to_globals).cmdcnt > 0) {
                  break;
                }
              }
              current_block = 15129665204879337069;
            }
            3364823792826654116 => {
              // .- repeat the last modifying command
              // Stuff the last_modifying_cmd back into stdin
              // and let it be re-executed.
              if (*ptr_to_globals).lmc_len != 0 {
                (*ptr_to_globals).ioq_start = crate::libbb::xfuncs_printf::xstrndup(
                  (*ptr_to_globals).last_modifying_cmd.as_mut_ptr(),
                  (*ptr_to_globals).lmc_len,
                );
                (*ptr_to_globals).ioq = (*ptr_to_globals).ioq_start
              }
              current_block = 15129665204879337069;
            }
            18096603330221575131 =>
            // 0- goto beginning of line
            {
              current_block = 17498168302144015873; // go to e-o-l
            }
            16891123271837848903 =>
            // A- append at e-o-l
            {
              dot_end();
              current_block = 1752638907092016026;
            }
            8517235759107662071 =>
            // B- back a blank-delimited Word
            {
              current_block = 5847749760081351726;
            }
            12525254419223051704 => {
              if (*ptr_to_globals).dot < (*ptr_to_globals).end.offset(-1) {
                (*ptr_to_globals).dot = yank_delete(
                  (*ptr_to_globals).dot,
                  (*ptr_to_globals).dot,
                  1i32,
                  YANKDEL as libc::c_int,
                  1i32,
                )
              }
              current_block = 15129665204879337069;
            }
            15232911949322867522 =>
            // X- delete char before dot
            {
              current_block = 17251831742223396249;
            }
            10863374208794025069 =>
            // c- change something
            {
              current_block = 1895262434596074581;
            }
            451126677064669119 =>
            // k- goto prev line, same col
            {
              loop
              // cursor key Up
              {
                dot_prev();
                (*ptr_to_globals).dot = move_to_col(
                  (*ptr_to_globals).dot,
                  (*ptr_to_globals).ccol + (*ptr_to_globals).offset,
                );
                (*ptr_to_globals).cmdcnt -= 1;
                if !((*ptr_to_globals).cmdcnt > 0) {
                  break;
                }
              }
              current_block = 15129665204879337069;
            }
            4611735929166613116 => {
              loop
              // try stay in same col
              // w- forward a word
              {
                if bb_ascii_isalnum(*(*ptr_to_globals).dot as libc::c_uchar) != 0
                  || *(*ptr_to_globals).dot as libc::c_int == '_' as i32
                {
                  // we are on ALNUM
                  (*ptr_to_globals).dot = skip_thing(
                    (*ptr_to_globals).dot,
                    1i32,
                    FORWARD as libc::c_int,
                    S_END_ALNUM as libc::c_int,
                  )
                } else if *strchrnul(
                  b"!\"#$%&\'()*+,-./:;<=>?@[\\]^_`{|}~\x00" as *const u8 as *const libc::c_char,
                  *(*ptr_to_globals).dot as libc::c_int,
                )
                .offset(0)
                  != 0
                {
                  // we are on PUNCT
                  (*ptr_to_globals).dot = skip_thing(
                    (*ptr_to_globals).dot,
                    1i32,
                    FORWARD as libc::c_int,
                    S_END_PUNCT as libc::c_int,
                  )
                } // move over word
                if (*ptr_to_globals).dot < (*ptr_to_globals).end.offset(-1) {
                  (*ptr_to_globals).dot = (*ptr_to_globals).dot.offset(1)
                } // try to move to column
                if ({
                  let mut bb__isspace: libc::c_uchar =
                    (*(*ptr_to_globals).dot as libc::c_int - 9i32) as libc::c_uchar;
                  (bb__isspace as libc::c_int == ' ' as i32 - 9i32
                    || bb__isspace as libc::c_int <= 13i32 - 9i32) as libc::c_int
                }) != 0
                {
                  (*ptr_to_globals).dot = skip_thing(
                    (*ptr_to_globals).dot,
                    2i32,
                    FORWARD as libc::c_int,
                    S_OVER_WS as libc::c_int,
                  )
                }
                (*ptr_to_globals).cmdcnt -= 1;
                if !((*ptr_to_globals).cmdcnt > 0) {
                  break;
                }
              }
              current_block = 15129665204879337069;
            }
            4386451087681909888 =>
            // |- move to column "cmdcnt"
            {
              (*ptr_to_globals).dot =
                move_to_col((*ptr_to_globals).dot, (*ptr_to_globals).cmdcnt - 1i32);
              current_block = 15129665204879337069;
            }
            1296397779060594135 =>
            //----- The Cursor and Function Keys -----------------------------
            // Cursor Key Home
            {
              dot_begin();
              current_block = 15129665204879337069;
            }
            _ => {}
          }
          match current_block {
            15129665204879337069 => {}
            8629930936610358348 => {}
            _ => {
              match current_block {
                17251831742223396249 =>
                // x- delete the current char
                // s- substitute the current char
                {
                  dir = 0; // delete prev char
                  if c == 'X' as i32 {
                    dir = -1i32
                  }
                  loop {
                    if *(*ptr_to_globals).dot.offset(dir as isize) as libc::c_int != '\n' as i32 {
                      if c == 'X' as i32 {
                        (*ptr_to_globals).dot = (*ptr_to_globals).dot.offset(-1)
                      }
                      (*ptr_to_globals).dot = yank_delete(
                        (*ptr_to_globals).dot,
                        (*ptr_to_globals).dot,
                        0,
                        YANKDEL as libc::c_int,
                        1i32,
                      )
                      // delete char
                    } // stop adding to q
                    (*ptr_to_globals).cmdcnt -= 1; // start inserting
                    if !((*ptr_to_globals).cmdcnt > 0) {
                      break;
                    }
                  }
                  end_cmd_q();
                  if c == 's' as i32 {
                    current_block = 8629930936610358348;
                  } else {
                    current_block = 15129665204879337069;
                  }
                }
                2087484904894455135 => {
                  // o- open a empty line below; Yes, I know it is in the middle of the "if (..."
                  dot_end();
                  (*ptr_to_globals).dot =
                    char_insert((*ptr_to_globals).dot, '\n' as i32 as libc::c_char, 1i32);
                  current_block = 8629930936610358348;
                }
                11945623545738147997 =>
                // fall through
                {
                  (*ptr_to_globals).dot = (*ptr_to_globals).end.offset(-1); // assume E-O-F
                  if (*ptr_to_globals).cmdcnt > 0 {
                    (*ptr_to_globals).dot = find_line((*ptr_to_globals).cmdcnt)
                    // G- goto to a line number (default= E-O-F)
                    // what line is #cmdcnt
                  }
                  dot_skip_over_ws();
                  current_block = 15129665204879337069;
                }
                5847749760081351726 =>
                // E- end of a blank-delimited word
                // W- forward a blank-delimited word
                {
                  dir = FORWARD as libc::c_int;
                  if c == 'B' as i32 {
                    dir = BACK as libc::c_int
                  }
                  loop {
                    if c == 'W' as i32
                      || ({
                        let mut bb__isspace: libc::c_uchar =
                          (*(*ptr_to_globals).dot.offset(dir as isize) as libc::c_int - 9i32)
                            as libc::c_uchar;
                        (bb__isspace as libc::c_int == ' ' as i32 - 9i32
                          || bb__isspace as libc::c_int <= 13i32 - 9i32)
                          as libc::c_int
                      }) != 0
                    {
                      (*ptr_to_globals).dot =
                        skip_thing((*ptr_to_globals).dot, 1i32, dir, S_TO_WS as libc::c_int);
                      (*ptr_to_globals).dot =
                        skip_thing((*ptr_to_globals).dot, 2i32, dir, S_OVER_WS as libc::c_int)
                    }
                    if c != 'W' as i32 {
                      (*ptr_to_globals).dot =
                        skip_thing((*ptr_to_globals).dot, 1i32, dir, S_BEFORE_WS as libc::c_int)
                    }
                    (*ptr_to_globals).cmdcnt -= 1;
                    if !((*ptr_to_globals).cmdcnt > 0) {
                      break;
                    }
                  }
                  current_block = 15129665204879337069;
                }
                17440971994642376514 =>
                // nul- ignore
                {
                  current_block = 15129665204879337069;
                }
                7534742345255184552 =>
                // cursor key Left
                {
                  current_block = 17247297260531395789;
                }
                8800996768013373992 =>
                // j- goto next line, same col
                {
                  loop
                  // cursor key Down
                  {
                    dot_next(); // go to next B-o-l
                                // try stay in same col
                    (*ptr_to_globals).dot = move_to_col(
                      (*ptr_to_globals).dot,
                      (*ptr_to_globals).ccol + (*ptr_to_globals).offset,
                    );
                    (*ptr_to_globals).cmdcnt -= 1;
                    if !((*ptr_to_globals).cmdcnt > 0) {
                      break;
                    }
                  }
                  current_block = 15129665204879337069;
                }
                13993698454868426881 =>
                // move right
                {
                  loop
                  // Cursor Key Right
                  {
                    dot_right();
                    (*ptr_to_globals).cmdcnt -= 1;
                    if !((*ptr_to_globals).cmdcnt > 0) {
                      break;
                    }
                  }
                  current_block = 15129665204879337069;
                }
                7856905509180742666 =>
                //
                // dont separate these two commands. 'f' depends on ';'
                //
                //**** fall through to ... ';'
                // ;- look at rest of line for last forward char
                {
                  while !((*ptr_to_globals).last_forward_char == 0) {
                    q = (*ptr_to_globals).dot.offset(1);
                    while q < (*ptr_to_globals).end.offset(-1)
                      && *q as libc::c_int != '\n' as i32
                      && *q as libc::c_int != (*ptr_to_globals).last_forward_char
                    {
                      q = q.offset(1)
                    }
                    if *q as libc::c_int == (*ptr_to_globals).last_forward_char {
                      (*ptr_to_globals).dot = q
                    }
                    (*ptr_to_globals).cmdcnt -= 1;
                    if !((*ptr_to_globals).cmdcnt > 0) {
                      break;
                    }
                  }
                  current_block = 15129665204879337069;
                }
                17498168302144015873 =>
                // 1-
                {
                  current_block = 8681395796513813967;
                }
                1752638907092016026 =>
                //**** fall through to ... 'a'
                // a- append after current char
                {
                  if *(*ptr_to_globals).dot as libc::c_int != '\n' as i32 {
                    (*ptr_to_globals).dot = (*ptr_to_globals).dot.offset(1)
                  }
                  current_block = 8629930936610358348;
                }
                3268579060917229304 =>
                // i- insert before current char
                {
                  current_block = 8629930936610358348;
                }
                1895262434596074581 =>
                // d- delete something
                {
                  current_block = 8908416993177701018;
                }
                _ => {}
              }
              match current_block {
                8629930936610358348 => {}
                15129665204879337069 => {}
                _ => {
                  match current_block {
                    17247297260531395789 =>
                    // ctrl-H- move left    (This may be ERASE char)
                    {
                      loop
                      // DEL- move left   (This may be ERASE char)
                      {
                        dot_left();
                        (*ptr_to_globals).cmdcnt -= 1;
                        if !((*ptr_to_globals).cmdcnt > 0) {
                          break;
                        }
                      }
                      current_block = 15129665204879337069;
                    }
                    8681395796513813967 =>
                    // 2-
                    {
                      current_block = 5591548203144509315;
                    }
                    8908416993177701018 =>
                    // y- yank   something
                    {
                      current_block = 16124761010012532485;
                    }
                    _ => {}
                  }
                  match current_block {
                    15129665204879337069 => {}
                    _ => {
                      match current_block {
                        16124761010012532485 =>
                        // Y- Yank a line
                        {
                          let mut yf: libc::c_int = 0; // assume either "c" or "d"
                          let mut ml: libc::c_int = 0; // get the type of thing to delete
                          let mut whole: libc::c_int = 0;
                          yf = YANKDEL as libc::c_int;
                          if c == 'y' as i32 || c == 'Y' as i32 {
                            yf = YANKONLY as libc::c_int
                          }
                          c1 = 'y' as i32;
                          if c != 'Y' as i32 {
                            c1 = get_one_char()
                          }
                          // determine range, and whether it spans lines
                          ml = find_range(&mut p, &mut q, c1 as libc::c_char);
                          place_cursor(0i32, 0);
                          if c1 == 27i32 {
                            // ESC- user changed mind and wants out
                            c1 = 27i32;
                            c = c1
                          // Escape- do nothing
                          } else if !strchr(b"wW\x00" as *const u8 as *const libc::c_char, c1)
                            .is_null()
                          {
                            ml = 0;
                            if c == 'c' as i32 {
                              // multi-line ranges aren't allowed for words
                              // delete word
                              // don't include trailing WS as part of word
                              while ({
                                let mut bb__isspace: libc::c_uchar =
                                  (*q as libc::c_int - 9i32) as libc::c_uchar;
                                (bb__isspace as libc::c_int == ' ' as i32 - 9i32
                                  || bb__isspace as libc::c_int <= 13i32 - 9i32)
                                  as libc::c_int
                              }) != 0
                                && q > p
                              {
                                q = q.offset(-1)
                              }
                            }
                            (*ptr_to_globals).dot = yank_delete(p, q, ml, yf, 1i32)
                          } else if !strchr(
                            b"^0bBeEft%$ lh\x08\x7f\x00" as *const u8 as *const libc::c_char,
                            c1,
                          )
                          .is_null()
                          {
                            // partial line copy text into a register and delete
                            (*ptr_to_globals).dot = yank_delete(p, q, ml, yf, 1i32)
                          // delete word
                          } else if !strchr(
                            b"cdykjGHL+-{}\r\n\x00" as *const u8 as *const libc::c_char,
                            c1,
                          )
                          .is_null()
                          {
                            // whole line copy text into a register and delete
                            (*ptr_to_globals).dot = yank_delete(p, q, ml, yf, 1i32); // delete lines
                            whole = 1i32
                          } else {
                            // could not recognize object
                            c1 = 27i32; // error-
                            c = c1;
                            ml = 0;
                            indicate_error();
                          }
                          if ml != 0 && whole != 0 {
                            if c == 'c' as i32 {
                              (*ptr_to_globals).dot = char_insert(
                                (*ptr_to_globals).dot,
                                '\n' as i32 as libc::c_char,
                                2i32,
                              );
                              // on the last line of file don't move to prev line
                              if whole != 0
                                && (*ptr_to_globals).dot != (*ptr_to_globals).end.offset(-1)
                              {
                                dot_prev();
                              }
                            } else if c == 'd' as i32 {
                              dot_begin();
                              dot_skip_over_ws();
                            }
                          }
                          if c1 != 27i32 {
                            // if CHANGING, not deleting, start inserting after the delete
                            if c == 'c' as i32 {
                              strcpy(
                                buf.as_mut_ptr(),
                                b"Change\x00" as *const u8 as *const libc::c_char,
                              );
                              current_block = 8629930936610358348;
                            // start inserting
                            } else {
                              if c == 'd' as i32 {
                                strcpy(
                                  buf.as_mut_ptr(),
                                  b"Delete\x00" as *const u8 as *const libc::c_char,
                                );
                              }
                              if c == 'y' as i32 || c == 'Y' as i32 {
                                strcpy(
                                  buf.as_mut_ptr(),
                                  b"Yank\x00" as *const u8 as *const libc::c_char,
                                );
                              }
                              p = (*ptr_to_globals).reg[(*ptr_to_globals).YDreg as usize];
                              q = p.offset(strlen(p) as isize);
                              cnt = 0;
                              while p <= q {
                                if *p as libc::c_int == '\n' as i32 {
                                  cnt += 1
                                }
                                p = p.offset(1)
                              }
                              status_line(
                                b"%s %u lines (%u chars) using [%c]\x00" as *const u8
                                  as *const libc::c_char,
                                buf.as_mut_ptr(),
                                cnt,
                                strlen((*ptr_to_globals).reg[(*ptr_to_globals).YDreg as usize])
                                  as libc::c_uint,
                                what_reg() as libc::c_int,
                              );
                              end_cmd_q();
                              current_block = 15129665204879337069;
                            }
                          // stop adding to q
                          } else {
                            current_block = 15129665204879337069;
                          }
                        }
                        5591548203144509315 =>
                        // 3-
                        {
                          current_block = 2636677179867529885;
                        }
                        _ => {}
                      }
                      match current_block {
                        15129665204879337069 => {}
                        8629930936610358348 => {}
                        _ => {
                          match current_block {
                            2636677179867529885 =>
                            // 4-
                            {
                              current_block = 12309206730560524281;
                            }
                            _ => {}
                          }
                          match current_block {
                            12309206730560524281 =>
                            // 5-
                            {
                              current_block = 3325768110057758661;
                            }
                            _ => {}
                          }
                          match current_block {
                            3325768110057758661 =>
                            // 6-
                            {
                              current_block = 14815832896553429982;
                            }
                            _ => {}
                          }
                          match current_block {
                            14815832896553429982 =>
                            // 7-
                            {
                              current_block = 10731695520297161438;
                            }
                            _ => {}
                          }
                          match current_block {
                            10731695520297161438 =>
                            // 8-
                            // 9-
                            {
                              if c == '0' as i32 && (*ptr_to_globals).cmdcnt < 1i32 {
                                dot_begin();
                              // this was a standalone zero
                              } else {
                                (*ptr_to_globals).cmdcnt =
                                  (*ptr_to_globals).cmdcnt * 10i32 + (c - '0' as i32)
                                // this 0 is part of a number
                              }
                              current_block = 15129665204879337069;
                            }
                            _ => {}
                          }
                          match current_block {
                            15129665204879337069 => {}
                            _ => {
                              loop {
                                match current_block {
                                  16813369756331276724 =>
                                  // n- repeat search for last pattern
                                  // search rest of text[] starting at next char
                                  // if search fails return orignal "p" not the "p+1" address
                                  {
                                    msg = std::ptr::null(); // assume FORWARD search
                                    current_block = 7392824444931029276; // now search for pattern
                                  }
                                  7392824444931029276 => {
                                    dir = FORWARD as libc::c_int; // good search, update "dot"
                                    p = (*ptr_to_globals).dot.offset(1);
                                    if *(*ptr_to_globals).last_search_pattern.offset(0)
                                      as libc::c_int
                                      == '?' as i32
                                    {
                                      dir = BACK as libc::c_int;
                                      p = (*ptr_to_globals).dot.offset(-1)
                                    }
                                    current_block = 4166979493554389389;
                                  }
                                  _ => {
                                    q = char_search(
                                      p,
                                      (*ptr_to_globals).last_search_pattern.offset(1),
                                      dir << 1i32 | FULL as libc::c_int,
                                    );
                                    if !q.is_null() {
                                      (*ptr_to_globals).dot = q;
                                      msg = std::ptr::null()
                                    } else {
                                      // no pattern found between "dot" and "end"- continue at top
                                      p = (*ptr_to_globals).text;
                                      if dir == BACK as libc::c_int {
                                        p = (*ptr_to_globals).end.offset(-1)
                                      }
                                      q = char_search(
                                        p,
                                        (*ptr_to_globals).last_search_pattern.offset(1),
                                        dir << 1i32 | FULL as libc::c_int,
                                      );
                                      if !q.is_null() {
                                        // found something
                                        (*ptr_to_globals).dot = q; // found new pattern- goto it
                                        msg = b"search hit BOTTOM, continuing at TOP\x00"
                                          as *const u8
                                          as *const libc::c_char;
                                        if dir == BACK as libc::c_int {
                                          msg = b"search hit TOP, continuing at BOTTOM\x00"
                                            as *const u8
                                            as *const libc::c_char
                                        }
                                      } else {
                                        msg = b"Pattern not found\x00" as *const u8
                                          as *const libc::c_char
                                      }
                                    }
                                    if !msg.is_null() {
                                      status_line_bold(
                                        b"%s\x00" as *const u8 as *const libc::c_char,
                                        msg,
                                      );
                                    }
                                    (*ptr_to_globals).cmdcnt -= 1;
                                    if (*ptr_to_globals).cmdcnt > 0 {
                                      current_block = 16813369756331276724;
                                    } else {
                                      break;
                                    }
                                  }
                                }
                              }
                              current_block = 15129665204879337069;
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
        2 | -10 => {
          current_block = 7961798899781870241;
          match current_block {
            16992905640583886232 => {
              loop {
                if (*(*ptr_to_globals).dot as libc::c_int - 'a' as i32) as libc::c_uchar
                  as libc::c_int
                  <= 'z' as i32 - 'a' as i32
                {
                  undo_push(
                    (*ptr_to_globals).dot,
                    1i32 as libc::c_uint,
                    1i32 as libc::c_uchar,
                  );
                  *(*ptr_to_globals).dot =
                    bb_ascii_toupper(*(*ptr_to_globals).dot as libc::c_uchar) as libc::c_char;
                  undo_push(
                    (*ptr_to_globals).dot,
                    1i32 as libc::c_uint,
                    2i32 as libc::c_uchar,
                  );
                } else if (*(*ptr_to_globals).dot as libc::c_int - 'A' as i32) as libc::c_uchar
                  as libc::c_int
                  <= 'Z' as i32 - 'A' as i32
                {
                  undo_push(
                    (*ptr_to_globals).dot,
                    1i32 as libc::c_uint,
                    1i32 as libc::c_uchar,
                  );
                  *(*ptr_to_globals).dot =
                    bb_ascii_tolower(*(*ptr_to_globals).dot as libc::c_uchar) as libc::c_char;
                  undo_push(
                    (*ptr_to_globals).dot,
                    1i32 as libc::c_uint,
                    2i32 as libc::c_uchar,
                  );
                }
                dot_right();
                (*ptr_to_globals).cmdcnt -= 1;
                if !((*ptr_to_globals).cmdcnt > 0) {
                  break;
                }
              }
              end_cmd_q();
              current_block = 15129665204879337069;
            }
            8729655159604064397 => {
              c1 = get_one_char();
              cnt = 0;
              if c1 == '.' as i32 {
                cnt = (*ptr_to_globals)
                  .rows
                  .wrapping_sub(2i32 as libc::c_uint)
                  .wrapping_div(2i32 as libc::c_uint) as libc::c_int
              }
              if c1 == '-' as i32 {
                cnt = (*ptr_to_globals).rows.wrapping_sub(2i32 as libc::c_uint) as libc::c_int
              }
              (*ptr_to_globals).screenbegin = begin_line((*ptr_to_globals).dot);
              dot_scroll(cnt, -1i32);
              current_block = 15129665204879337069;
            }
            15899500648299942075 => {
              (*ptr_to_globals).last_forward_char = get_one_char();
              do_cmd(';' as i32);
              if *(*ptr_to_globals).dot as libc::c_int == (*ptr_to_globals).last_forward_char {
                dot_left();
              }
              (*ptr_to_globals).last_forward_char = 0;
              current_block = 15129665204879337069;
            }
            9051390181078481641 => {
              c1 = get_one_char();
              if *(*ptr_to_globals).dot as libc::c_int != '\n' as i32 {
                (*ptr_to_globals).dot =
                  text_hole_delete((*ptr_to_globals).dot, (*ptr_to_globals).dot, 1i32);
                (*ptr_to_globals).dot =
                  char_insert((*ptr_to_globals).dot, c1 as libc::c_char, 2i32);
                dot_left();
              }
              end_cmd_q();
              current_block = 15129665204879337069;
            }
            877115918601926659 => {
              dir = FORWARD as libc::c_int;
              if c == 'b' as i32 {
                dir = BACK as libc::c_int
              }
              while !((*ptr_to_globals).dot.offset(dir as isize) < (*ptr_to_globals).text
                || (*ptr_to_globals).dot.offset(dir as isize) > (*ptr_to_globals).end.offset(-1))
              {
                (*ptr_to_globals).dot = (*ptr_to_globals).dot.offset(dir as isize);
                if ({
                  let mut bb__isspace: libc::c_uchar =
                    (*(*ptr_to_globals).dot as libc::c_int - 9i32) as libc::c_uchar;
                  (bb__isspace as libc::c_int == ' ' as i32 - 9i32
                    || bb__isspace as libc::c_int <= 13i32 - 9i32) as libc::c_int
                }) != 0
                {
                  (*ptr_to_globals).dot = skip_thing(
                    (*ptr_to_globals).dot,
                    if c == 'e' as i32 { 2i32 } else { 1i32 },
                    dir,
                    S_OVER_WS as libc::c_int,
                  )
                }
                if bb_ascii_isalnum(*(*ptr_to_globals).dot as libc::c_uchar) != 0
                  || *(*ptr_to_globals).dot as libc::c_int == '_' as i32
                {
                  (*ptr_to_globals).dot =
                    skip_thing((*ptr_to_globals).dot, 1i32, dir, S_END_ALNUM as libc::c_int)
                } else if *strchrnul(
                  b"!\"#$%&\'()*+,-./:;<=>?@[\\]^_`{|}~\x00" as *const u8 as *const libc::c_char,
                  *(*ptr_to_globals).dot as libc::c_int,
                )
                .offset(0)
                  != 0
                {
                  (*ptr_to_globals).dot =
                    skip_thing((*ptr_to_globals).dot, 1i32, dir, S_END_PUNCT as libc::c_int)
                }
                (*ptr_to_globals).cmdcnt -= 1;
                if !((*ptr_to_globals).cmdcnt > 0) {
                  break;
                }
              }
              current_block = 15129665204879337069;
            }
            1085022737867179637 => {
              dot_begin();
              dot_skip_over_ws();
              current_block = 15129665204879337069;
            }
            3113147720494587438 => {
              c1 = get_one_char();
              if c1 != 'Z' as i32 {
                indicate_error();
              } else if (*ptr_to_globals).modified_count != 0 {
                if 1i32 != 0 && (*ptr_to_globals).readonly_mode as libc::c_int != 0 {
                  status_line_bold(
                    b"\'%s\' is read only\x00" as *const u8 as *const libc::c_char,
                    (*ptr_to_globals).current_filename,
                  );
                } else {
                  cnt = file_write(
                    (*ptr_to_globals).current_filename,
                    (*ptr_to_globals).text,
                    (*ptr_to_globals).end.offset(-1),
                  );
                  if cnt < 0 {
                    if cnt == -1i32 {
                      status_line_bold(b"Write error: %m\x00" as *const u8 as *const libc::c_char);
                    }
                  } else if cnt as libc::c_long
                    == (*ptr_to_globals)
                      .end
                      .offset(-1)
                      .wrapping_offset_from((*ptr_to_globals).text)
                      as libc::c_long
                      + 1
                  {
                    (*ptr_to_globals).editing = 0 as smallint
                  }
                }
              } else {
                (*ptr_to_globals).editing = 0 as smallint
              }
              current_block = 15129665204879337069;
            }
            12960118908218882441 => {
              p = begin_line((*ptr_to_globals).dot);
              if *p.offset(-1i32 as isize) as libc::c_int == '\n' as i32 {
                dot_prev();
                current_block = 2087484904894455135;
              } else {
                dot_begin();
                (*ptr_to_globals).dot =
                  char_insert((*ptr_to_globals).dot, '\n' as i32 as libc::c_char, 1i32);
                dot_prev();
                current_block = 8629930936610358348;
              }
            }
            8720450212473544924 => {
              (*ptr_to_globals).dot = (*ptr_to_globals).screenbegin;
              cnt = 0;
              while (cnt as libc::c_uint)
                < (*ptr_to_globals)
                  .rows
                  .wrapping_sub(1i32 as libc::c_uint)
                  .wrapping_div(2i32 as libc::c_uint)
              {
                (*ptr_to_globals).dot = next_line((*ptr_to_globals).dot);
                cnt += 1
              }
              current_block = 15129665204879337069;
            }
            13015277209715431090 => {
              (*ptr_to_globals).dot = end_screen();
              if (*ptr_to_globals).cmdcnt as libc::c_uint
                > (*ptr_to_globals).rows.wrapping_sub(1i32 as libc::c_uint)
              {
                (*ptr_to_globals).cmdcnt =
                  (*ptr_to_globals).rows.wrapping_sub(1i32 as libc::c_uint) as libc::c_int
              }
              (*ptr_to_globals).cmdcnt -= 1;
              if (*ptr_to_globals).cmdcnt > 0 {
                do_cmd('-' as i32);
              }
              dot_begin();
              dot_skip_over_ws();
              current_block = 15129665204879337069;
            }
            9800435767766781385 => {
              loop {
                dot_end();
                if (*ptr_to_globals).dot < (*ptr_to_globals).end.offset(-1) {
                  undo_push(
                    (*ptr_to_globals).dot,
                    1i32 as libc::c_uint,
                    1i32 as libc::c_uchar,
                  );
                  let fresh15 = (*ptr_to_globals).dot;
                  (*ptr_to_globals).dot = (*ptr_to_globals).dot.offset(1);
                  *fresh15 = ' ' as i32 as libc::c_char;
                  undo_push(
                    (*ptr_to_globals).dot.offset(-1),
                    1i32 as libc::c_uint,
                    2i32 as libc::c_uchar,
                  );
                  while ({
                    let mut bb__isblank: libc::c_uchar = *(*ptr_to_globals).dot as libc::c_uchar;
                    (bb__isblank as libc::c_int == ' ' as i32
                      || bb__isblank as libc::c_int == '\t' as i32)
                      as libc::c_int
                  }) != 0
                  {
                    text_hole_delete((*ptr_to_globals).dot, (*ptr_to_globals).dot, 2i32);
                  }
                }
                (*ptr_to_globals).cmdcnt -= 1;
                if !((*ptr_to_globals).cmdcnt > 0) {
                  break;
                }
              }
              end_cmd_q();
              current_block = 15129665204879337069;
            }
            3432363526595694666 => {
              dot_begin();
              dot_skip_over_ws();
              current_block = 3268579060917229304;
            }
            3494829253343353619 => {
              (*ptr_to_globals).dot = (*ptr_to_globals).screenbegin;
              if (*ptr_to_globals).cmdcnt as libc::c_uint
                > (*ptr_to_globals).rows.wrapping_sub(1i32 as libc::c_uint)
              {
                (*ptr_to_globals).cmdcnt =
                  (*ptr_to_globals).rows.wrapping_sub(1i32 as libc::c_uint) as libc::c_int
              }
              (*ptr_to_globals).cmdcnt -= 1;
              if (*ptr_to_globals).cmdcnt > 0 {
                do_cmd('+' as i32);
              }
              dot_skip_over_ws();
              current_block = 15129665204879337069;
            }
            17973101765331640574 => {
              c1 = get_one_char();
              if c1 != 'g' as i32 {
                buf[0] = 'g' as i32 as libc::c_char;
                buf[1] = if c1 >= 0 { c1 } else { '*' as i32 } as libc::c_char;
                buf[2] = '\u{0}' as i32 as libc::c_char;
                not_implemented(buf.as_mut_ptr());
                current_block = 15129665204879337069;
              } else {
                if (*ptr_to_globals).cmdcnt == 0 {
                  (*ptr_to_globals).cmdcnt = 1i32
                }
                current_block = 11945623545738147997;
              }
            }
            16546625800574160972 => {
              save_dot = (*ptr_to_globals).dot;
              (*ptr_to_globals).dot = dollar_line((*ptr_to_globals).dot);
              (*ptr_to_globals).dot = yank_delete(
                save_dot,
                (*ptr_to_globals).dot,
                0,
                YANKDEL as libc::c_int,
                1i32,
              );
              if c == 'C' as i32 {
                current_block = 8629930936610358348;
              } else {
                if c == 'D' as i32 {
                  end_cmd_q();
                }
                current_block = 15129665204879337069;
              }
            }
            11937696639986586685 => {
              cnt = count_lines((*ptr_to_globals).text, (*ptr_to_globals).dot);
              c1 = get_one_char();
              find_range(&mut p, &mut q, c1 as libc::c_char);
              yank_delete(p, q, 1i32, YANKONLY as libc::c_int, 0);
              p = begin_line(p);
              q = end_line(q);
              i = count_lines(p, q);
              while i > 0 {
                if c == '<' as i32 {
                  if *p as libc::c_int == '\t' as i32 {
                    text_hole_delete(p, p, 0);
                  } else if *p as libc::c_int == ' ' as i32 {
                    j = 0;
                    while *p as libc::c_int == ' ' as i32 && j < (*ptr_to_globals).tabstop {
                      text_hole_delete(p, p, 0);
                      j += 1
                    }
                  }
                } else if c == '>' as i32 {
                  char_insert(p, '\t' as i32 as libc::c_char, 1i32);
                }
                i -= 1;
                p = next_line(p)
              }
              (*ptr_to_globals).dot = find_line(cnt);
              dot_skip_over_ws();
              end_cmd_q();
              current_block = 15129665204879337069;
            }
            17725350714912028156 => {
              p = get_input_line(b":\x00" as *const u8 as *const libc::c_char);
              colon(p);
              current_block = 15129665204879337069;
            }
            14526470074083880812 => {
              q = char_search(
                (*ptr_to_globals).dot,
                b"\n\n\x00" as *const u8 as *const libc::c_char,
                (FORWARD as libc::c_int) << 1i32 | FULL as libc::c_int,
              );
              if !q.is_null() {
                (*ptr_to_globals).dot = next_line(q)
              }
              current_block = 15129665204879337069;
            }
            8893187391306414141 => {
              q = char_search(
                (*ptr_to_globals).dot,
                b"\n\n\x00" as *const u8 as *const libc::c_char,
                ((BACK as libc::c_int as libc::c_uint) << 1i32
                  | FULL as libc::c_int as libc::c_uint) as libc::c_int,
              );
              if !q.is_null() {
                (*ptr_to_globals).dot = next_line(q)
              }
              current_block = 15129665204879337069;
            }
            7021673758293221412 => {
              dir = BACK as libc::c_int;
              p = (*ptr_to_globals).dot.offset(-1);
              if *(*ptr_to_globals).last_search_pattern.offset(0) as libc::c_int == '?' as i32 {
                dir = FORWARD as libc::c_int;
                p = (*ptr_to_globals).dot.offset(1)
              }
              current_block = 4166979493554389389;
            }
            18374191879090272823 => {
              buf[0] = c as libc::c_char;
              buf[1] = '\u{0}' as i32 as libc::c_char;
              q = get_input_line(buf.as_mut_ptr());
              if *q.offset(0) as libc::c_int != 0 && *q.offset(1) == 0 {
                if *(*ptr_to_globals).last_search_pattern.offset(0) != 0 {
                  *(*ptr_to_globals).last_search_pattern.offset(0) = c as libc::c_char
                }
                current_block = 7392824444931029276;
              } else if *q.offset(0) != 0 {
                free((*ptr_to_globals).last_search_pattern as *mut libc::c_void);
                (*ptr_to_globals).last_search_pattern = crate::libbb::xfuncs_printf::xstrdup(q);
                current_block = 7392824444931029276;
              } else {
                current_block = 15129665204879337069;
              }
            }
            16407828456666301883 => {
              if (*ptr_to_globals).last_forward_char == 0 {
                current_block = 15129665204879337069;
              } else {
                loop {
                  q = (*ptr_to_globals).dot.offset(-1);
                  while q >= (*ptr_to_globals).text
                    && *q as libc::c_int != '\n' as i32
                    && *q as libc::c_int != (*ptr_to_globals).last_forward_char
                  {
                    q = q.offset(-1)
                  }
                  if q >= (*ptr_to_globals).text
                    && *q as libc::c_int == (*ptr_to_globals).last_forward_char
                  {
                    (*ptr_to_globals).dot = q
                  }
                  (*ptr_to_globals).cmdcnt -= 1;
                  if !((*ptr_to_globals).cmdcnt > 0) {
                    break;
                  }
                }
                current_block = 15129665204879337069;
              }
            }
            9018432604062702004 => {
              q = (*ptr_to_globals).dot;
              while q < (*ptr_to_globals).end && *q as libc::c_int != '\n' as i32 {
                if !strchr(
                  b"()[]{}\x00" as *const u8 as *const libc::c_char,
                  *q as libc::c_int,
                )
                .is_null()
                {
                  p = find_pair(q, *q);
                  if p.is_null() {
                    indicate_error();
                  } else {
                    (*ptr_to_globals).dot = p
                  }
                  break;
                } else {
                  q = q.offset(1)
                }
              }
              if *q as libc::c_int == '\n' as i32 {
                indicate_error();
              }
              current_block = 15129665204879337069;
            }
            10247103787464459848 => {
              p = (*ptr_to_globals).reg[(*ptr_to_globals).YDreg as usize];
              if p.is_null() {
                status_line_bold(
                  b"Nothing in register %c\x00" as *const u8 as *const libc::c_char,
                  what_reg() as libc::c_int,
                );
              } else {
                if !strchr(p, '\n' as i32).is_null() {
                  if c == 'P' as i32 {
                    dot_begin();
                  }
                  if c == 'p' as i32 {
                    if end_line((*ptr_to_globals).dot) == (*ptr_to_globals).end.offset(-1) {
                      (*ptr_to_globals).dot = (*ptr_to_globals).end
                    } else {
                      dot_next();
                    }
                  }
                } else if c == 'p' as i32 {
                  dot_right();
                }
                string_insert((*ptr_to_globals).dot, p, 1i32);
                end_cmd_q();
              }
              current_block = 15129665204879337069;
            }
            15260732871948875843 => {
              c1 = (get_one_char() | 0x20i32) - 'a' as i32;
              if c1 as libc::c_uint <= 25i32 as libc::c_uint {
                (*ptr_to_globals).mark[c1 as usize] = (*ptr_to_globals).dot
              } else {
                indicate_error();
              }
              current_block = 15129665204879337069;
            }
            12738322036487086035 => {
              c1 = get_one_char() | 0x20i32;
              if (c1 - 'a' as i32) as libc::c_uint <= 25i32 as libc::c_uint {
                c1 = c1 - 'a' as i32;
                q = (*ptr_to_globals).mark[c1 as usize];
                if (*ptr_to_globals).text <= q && q < (*ptr_to_globals).end {
                  (*ptr_to_globals).dot = q;
                  dot_begin();
                  dot_skip_over_ws();
                }
              } else if c1 == '\'' as i32 {
                (*ptr_to_globals).dot = swap_context((*ptr_to_globals).dot);
                dot_begin();
                dot_skip_over_ws();
              } else {
                indicate_error();
              }
              current_block = 15129665204879337069;
            }
            13255096073384561358 => {
              c1 = (get_one_char() | 0x20i32) - 'a' as i32;
              if c1 as libc::c_uint <= 25i32 as libc::c_uint {
                (*ptr_to_globals).YDreg = c1 as smalluint
              } else {
                indicate_error();
              }
              current_block = 15129665204879337069;
            }
            10258711639984089377 => {
              if (*ptr_to_globals).cmd_mode as libc::c_int == 0 {
                indicate_error();
              }
              (*ptr_to_globals).cmd_mode = 0 as smallint;
              undo_queue_commit();
              end_cmd_q();
              (*ptr_to_globals).last_status_cksum = 0;
              current_block = 15129665204879337069;
            }
            11439127087547047736 => {
              buf[0] = c as libc::c_char;
              buf[1] = '\u{0}' as i32 as libc::c_char;
              not_implemented(buf.as_mut_ptr());
              end_cmd_q();
              current_block = 17440971994642376514;
            }
            7961798899781870241 => {
              dot_scroll(
                (*ptr_to_globals).rows.wrapping_sub(2i32 as libc::c_uint) as libc::c_int,
                -1i32,
              );
              current_block = 15129665204879337069;
            }
            9426343755402444879 => {
              dot_scroll(
                (*ptr_to_globals)
                  .rows
                  .wrapping_sub(2i32 as libc::c_uint)
                  .wrapping_div(2i32 as libc::c_uint) as libc::c_int,
                1i32,
              );
              current_block = 15129665204879337069;
            }
            13352459794680105913 => {
              dot_scroll(1i32, 1i32);
              current_block = 15129665204879337069;
            }
            14142272253464333006 => {
              dot_scroll(
                (*ptr_to_globals).rows.wrapping_sub(2i32 as libc::c_uint) as libc::c_int,
                1i32,
              );
              current_block = 15129665204879337069;
            }
            10758177197742640066 => {
              (*ptr_to_globals).last_status_cksum = 0;
              current_block = 15129665204879337069;
            }
            6152256259730122749 => {
              current_block = 7534742345255184552;
            }
            12883932598258173301 => {
              current_block = 8800996768013373992;
            }
            11242998110520238401 => {
              redraw(1i32);
              current_block = 15129665204879337069;
            }
            13619733043935729992 => {
              loop {
                dot_next();
                dot_skip_over_ws();
                (*ptr_to_globals).cmdcnt -= 1;
                if !((*ptr_to_globals).cmdcnt > 0) {
                  break;
                }
              }
              current_block = 15129665204879337069;
            }
            9339065157412720613 => {
              dot_scroll(
                (*ptr_to_globals)
                  .rows
                  .wrapping_sub(2i32 as libc::c_uint)
                  .wrapping_div(2i32 as libc::c_uint) as libc::c_int,
                -1i32,
              );
              current_block = 15129665204879337069;
            }
            11447082683497798022 => {
              dot_scroll(1i32, -1i32);
              current_block = 15129665204879337069;
            }
            5182000506326660482 => {
              current_block = 13993698454868426881;
            }
            1105010766850597332 => {
              if !(*ptr_to_globals).reg[27].is_null() {
                p = begin_line((*ptr_to_globals).dot);
                q = end_line((*ptr_to_globals).dot);
                p = text_hole_delete(p, q, 1i32);
                p = p.offset(string_insert(p, (*ptr_to_globals).reg[27], 2i32) as isize);
                (*ptr_to_globals).dot = p;
                dot_skip_over_ws();
              }
              current_block = 15129665204879337069;
            }
            8616046655533110204 => {
              undo_pop();
              current_block = 15129665204879337069;
            }
            5127767458142431603 => {
              loop {
                (*ptr_to_globals).dot = end_line((*ptr_to_globals).dot);
                (*ptr_to_globals).cmdcnt -= 1;
                if (*ptr_to_globals).cmdcnt <= 0 {
                  break;
                }
                dot_next();
              }
              current_block = 15129665204879337069;
            }
            222014967776118151 => {
              (*ptr_to_globals).last_forward_char = get_one_char();
              current_block = 7856905509180742666;
            }
            11209792479411604110 => {
              loop {
                dot_prev();
                dot_skip_over_ws();
                (*ptr_to_globals).cmdcnt -= 1;
                if !((*ptr_to_globals).cmdcnt > 0) {
                  break;
                }
              }
              current_block = 15129665204879337069;
            }
            3364823792826654116 => {
              if (*ptr_to_globals).lmc_len != 0 {
                (*ptr_to_globals).ioq_start = crate::libbb::xfuncs_printf::xstrndup(
                  (*ptr_to_globals).last_modifying_cmd.as_mut_ptr(),
                  (*ptr_to_globals).lmc_len,
                );
                (*ptr_to_globals).ioq = (*ptr_to_globals).ioq_start
              }
              current_block = 15129665204879337069;
            }
            18096603330221575131 => {
              current_block = 17498168302144015873;
            }
            16891123271837848903 => {
              dot_end();
              current_block = 1752638907092016026;
            }
            8517235759107662071 => {
              current_block = 5847749760081351726;
            }
            12525254419223051704 => {
              if (*ptr_to_globals).dot < (*ptr_to_globals).end.offset(-1) {
                (*ptr_to_globals).dot = yank_delete(
                  (*ptr_to_globals).dot,
                  (*ptr_to_globals).dot,
                  1i32,
                  YANKDEL as libc::c_int,
                  1i32,
                )
              }
              current_block = 15129665204879337069;
            }
            15232911949322867522 => {
              current_block = 17251831742223396249;
            }
            10863374208794025069 => {
              current_block = 1895262434596074581;
            }
            451126677064669119 => {
              loop {
                dot_prev();
                (*ptr_to_globals).dot = move_to_col(
                  (*ptr_to_globals).dot,
                  (*ptr_to_globals).ccol + (*ptr_to_globals).offset,
                );
                (*ptr_to_globals).cmdcnt -= 1;
                if !((*ptr_to_globals).cmdcnt > 0) {
                  break;
                }
              }
              current_block = 15129665204879337069;
            }
            4611735929166613116 => {
              loop {
                if bb_ascii_isalnum(*(*ptr_to_globals).dot as libc::c_uchar) != 0
                  || *(*ptr_to_globals).dot as libc::c_int == '_' as i32
                {
                  (*ptr_to_globals).dot = skip_thing(
                    (*ptr_to_globals).dot,
                    1i32,
                    FORWARD as libc::c_int,
                    S_END_ALNUM as libc::c_int,
                  )
                } else if *strchrnul(
                  b"!\"#$%&\'()*+,-./:;<=>?@[\\]^_`{|}~\x00" as *const u8 as *const libc::c_char,
                  *(*ptr_to_globals).dot as libc::c_int,
                )
                .offset(0)
                  != 0
                {
                  (*ptr_to_globals).dot = skip_thing(
                    (*ptr_to_globals).dot,
                    1i32,
                    FORWARD as libc::c_int,
                    S_END_PUNCT as libc::c_int,
                  )
                }
                if (*ptr_to_globals).dot < (*ptr_to_globals).end.offset(-1) {
                  (*ptr_to_globals).dot = (*ptr_to_globals).dot.offset(1)
                }
                if ({
                  let mut bb__isspace: libc::c_uchar =
                    (*(*ptr_to_globals).dot as libc::c_int - 9i32) as libc::c_uchar;
                  (bb__isspace as libc::c_int == ' ' as i32 - 9i32
                    || bb__isspace as libc::c_int <= 13i32 - 9i32) as libc::c_int
                }) != 0
                {
                  (*ptr_to_globals).dot = skip_thing(
                    (*ptr_to_globals).dot,
                    2i32,
                    FORWARD as libc::c_int,
                    S_OVER_WS as libc::c_int,
                  )
                }
                (*ptr_to_globals).cmdcnt -= 1;
                if !((*ptr_to_globals).cmdcnt > 0) {
                  break;
                }
              }
              current_block = 15129665204879337069;
            }
            4386451087681909888 => {
              (*ptr_to_globals).dot =
                move_to_col((*ptr_to_globals).dot, (*ptr_to_globals).cmdcnt - 1i32);
              current_block = 15129665204879337069;
            }
            1296397779060594135 => {
              dot_begin();
              current_block = 15129665204879337069;
            }
            _ => {}
          }
          match current_block {
            15129665204879337069 => {}
            8629930936610358348 => {}
            _ => {
              match current_block {
                17251831742223396249 => {
                  dir = 0;
                  if c == 'X' as i32 {
                    dir = -1i32
                  }
                  loop {
                    if *(*ptr_to_globals).dot.offset(dir as isize) as libc::c_int != '\n' as i32 {
                      if c == 'X' as i32 {
                        (*ptr_to_globals).dot = (*ptr_to_globals).dot.offset(-1)
                      }
                      (*ptr_to_globals).dot = yank_delete(
                        (*ptr_to_globals).dot,
                        (*ptr_to_globals).dot,
                        0,
                        YANKDEL as libc::c_int,
                        1i32,
                      )
                    }
                    (*ptr_to_globals).cmdcnt -= 1;
                    if !((*ptr_to_globals).cmdcnt > 0) {
                      break;
                    }
                  }
                  end_cmd_q();
                  if c == 's' as i32 {
                    current_block = 8629930936610358348;
                  } else {
                    current_block = 15129665204879337069;
                  }
                }
                2087484904894455135 => {
                  dot_end();
                  (*ptr_to_globals).dot =
                    char_insert((*ptr_to_globals).dot, '\n' as i32 as libc::c_char, 1i32);
                  current_block = 8629930936610358348;
                }
                11945623545738147997 => {
                  (*ptr_to_globals).dot = (*ptr_to_globals).end.offset(-1);
                  if (*ptr_to_globals).cmdcnt > 0 {
                    (*ptr_to_globals).dot = find_line((*ptr_to_globals).cmdcnt)
                  }
                  dot_skip_over_ws();
                  current_block = 15129665204879337069;
                }
                5847749760081351726 => {
                  dir = FORWARD as libc::c_int;
                  if c == 'B' as i32 {
                    dir = BACK as libc::c_int
                  }
                  loop {
                    if c == 'W' as i32
                      || ({
                        let mut bb__isspace: libc::c_uchar =
                          (*(*ptr_to_globals).dot.offset(dir as isize) as libc::c_int - 9i32)
                            as libc::c_uchar;
                        (bb__isspace as libc::c_int == ' ' as i32 - 9i32
                          || bb__isspace as libc::c_int <= 13i32 - 9i32)
                          as libc::c_int
                      }) != 0
                    {
                      (*ptr_to_globals).dot =
                        skip_thing((*ptr_to_globals).dot, 1i32, dir, S_TO_WS as libc::c_int);
                      (*ptr_to_globals).dot =
                        skip_thing((*ptr_to_globals).dot, 2i32, dir, S_OVER_WS as libc::c_int)
                    }
                    if c != 'W' as i32 {
                      (*ptr_to_globals).dot =
                        skip_thing((*ptr_to_globals).dot, 1i32, dir, S_BEFORE_WS as libc::c_int)
                    }
                    (*ptr_to_globals).cmdcnt -= 1;
                    if !((*ptr_to_globals).cmdcnt > 0) {
                      break;
                    }
                  }
                  current_block = 15129665204879337069;
                }
                17440971994642376514 => {
                  current_block = 15129665204879337069;
                }
                7534742345255184552 => {
                  current_block = 17247297260531395789;
                }
                8800996768013373992 => {
                  loop {
                    dot_next();
                    (*ptr_to_globals).dot = move_to_col(
                      (*ptr_to_globals).dot,
                      (*ptr_to_globals).ccol + (*ptr_to_globals).offset,
                    );
                    (*ptr_to_globals).cmdcnt -= 1;
                    if !((*ptr_to_globals).cmdcnt > 0) {
                      break;
                    }
                  }
                  current_block = 15129665204879337069;
                }
                13993698454868426881 => {
                  loop {
                    dot_right();
                    (*ptr_to_globals).cmdcnt -= 1;
                    if !((*ptr_to_globals).cmdcnt > 0) {
                      break;
                    }
                  }
                  current_block = 15129665204879337069;
                }
                7856905509180742666 => {
                  while !((*ptr_to_globals).last_forward_char == 0) {
                    q = (*ptr_to_globals).dot.offset(1);
                    while q < (*ptr_to_globals).end.offset(-1)
                      && *q as libc::c_int != '\n' as i32
                      && *q as libc::c_int != (*ptr_to_globals).last_forward_char
                    {
                      q = q.offset(1)
                    }
                    if *q as libc::c_int == (*ptr_to_globals).last_forward_char {
                      (*ptr_to_globals).dot = q
                    }
                    (*ptr_to_globals).cmdcnt -= 1;
                    if !((*ptr_to_globals).cmdcnt > 0) {
                      break;
                    }
                  }
                  current_block = 15129665204879337069;
                }
                17498168302144015873 => {
                  current_block = 8681395796513813967;
                }
                1752638907092016026 => {
                  if *(*ptr_to_globals).dot as libc::c_int != '\n' as i32 {
                    (*ptr_to_globals).dot = (*ptr_to_globals).dot.offset(1)
                  }
                  current_block = 8629930936610358348;
                }
                3268579060917229304 => {
                  current_block = 8629930936610358348;
                }
                1895262434596074581 => {
                  current_block = 8908416993177701018;
                }
                _ => {}
              }
              match current_block {
                8629930936610358348 => {}
                15129665204879337069 => {}
                _ => {
                  match current_block {
                    17247297260531395789 => {
                      loop {
                        dot_left();
                        (*ptr_to_globals).cmdcnt -= 1;
                        if !((*ptr_to_globals).cmdcnt > 0) {
                          break;
                        }
                      }
                      current_block = 15129665204879337069;
                    }
                    8681395796513813967 => {
                      current_block = 5591548203144509315;
                    }
                    8908416993177701018 => {
                      current_block = 16124761010012532485;
                    }
                    _ => {}
                  }
                  match current_block {
                    15129665204879337069 => {}
                    _ => {
                      match current_block {
                        16124761010012532485 => {
                          let mut yf: libc::c_int = 0;
                          let mut ml: libc::c_int = 0;
                          let mut whole: libc::c_int = 0;
                          yf = YANKDEL as libc::c_int;
                          if c == 'y' as i32 || c == 'Y' as i32 {
                            yf = YANKONLY as libc::c_int
                          }
                          c1 = 'y' as i32;
                          if c != 'Y' as i32 {
                            c1 = get_one_char()
                          }
                          ml = find_range(&mut p, &mut q, c1 as libc::c_char);
                          place_cursor(0i32, 0);
                          if c1 == 27i32 {
                            c1 = 27i32;
                            c = c1
                          } else if !strchr(b"wW\x00" as *const u8 as *const libc::c_char, c1)
                            .is_null()
                          {
                            ml = 0;
                            if c == 'c' as i32 {
                              while ({
                                let mut bb__isspace: libc::c_uchar =
                                  (*q as libc::c_int - 9i32) as libc::c_uchar;
                                (bb__isspace as libc::c_int == ' ' as i32 - 9i32
                                  || bb__isspace as libc::c_int <= 13i32 - 9i32)
                                  as libc::c_int
                              }) != 0
                                && q > p
                              {
                                q = q.offset(-1)
                              }
                            }
                            (*ptr_to_globals).dot = yank_delete(p, q, ml, yf, 1i32)
                          } else if !strchr(
                            b"^0bBeEft%$ lh\x08\x7f\x00" as *const u8 as *const libc::c_char,
                            c1,
                          )
                          .is_null()
                          {
                            (*ptr_to_globals).dot = yank_delete(p, q, ml, yf, 1i32)
                          } else if !strchr(
                            b"cdykjGHL+-{}\r\n\x00" as *const u8 as *const libc::c_char,
                            c1,
                          )
                          .is_null()
                          {
                            (*ptr_to_globals).dot = yank_delete(p, q, ml, yf, 1i32);
                            whole = 1i32
                          } else {
                            c1 = 27i32;
                            c = c1;
                            ml = 0;
                            indicate_error();
                          }
                          if ml != 0 && whole != 0 {
                            if c == 'c' as i32 {
                              (*ptr_to_globals).dot = char_insert(
                                (*ptr_to_globals).dot,
                                '\n' as i32 as libc::c_char,
                                2i32,
                              );
                              if whole != 0
                                && (*ptr_to_globals).dot != (*ptr_to_globals).end.offset(-1)
                              {
                                dot_prev();
                              }
                            } else if c == 'd' as i32 {
                              dot_begin();
                              dot_skip_over_ws();
                            }
                          }
                          if c1 != 27i32 {
                            if c == 'c' as i32 {
                              strcpy(
                                buf.as_mut_ptr(),
                                b"Change\x00" as *const u8 as *const libc::c_char,
                              );
                              current_block = 8629930936610358348;
                            } else {
                              if c == 'd' as i32 {
                                strcpy(
                                  buf.as_mut_ptr(),
                                  b"Delete\x00" as *const u8 as *const libc::c_char,
                                );
                              }
                              if c == 'y' as i32 || c == 'Y' as i32 {
                                strcpy(
                                  buf.as_mut_ptr(),
                                  b"Yank\x00" as *const u8 as *const libc::c_char,
                                );
                              }
                              p = (*ptr_to_globals).reg[(*ptr_to_globals).YDreg as usize];
                              q = p.offset(strlen(p) as isize);
                              cnt = 0;
                              while p <= q {
                                if *p as libc::c_int == '\n' as i32 {
                                  cnt += 1
                                }
                                p = p.offset(1)
                              }
                              status_line(
                                b"%s %u lines (%u chars) using [%c]\x00" as *const u8
                                  as *const libc::c_char,
                                buf.as_mut_ptr(),
                                cnt,
                                strlen((*ptr_to_globals).reg[(*ptr_to_globals).YDreg as usize])
                                  as libc::c_uint,
                                what_reg() as libc::c_int,
                              );
                              end_cmd_q();
                              current_block = 15129665204879337069;
                            }
                          } else {
                            current_block = 15129665204879337069;
                          }
                        }
                        5591548203144509315 => {
                          current_block = 2636677179867529885;
                        }
                        _ => {}
                      }
                      match current_block {
                        15129665204879337069 => {}
                        8629930936610358348 => {}
                        _ => {
                          match current_block {
                            2636677179867529885 => {
                              current_block = 12309206730560524281;
                            }
                            _ => {}
                          }
                          match current_block {
                            12309206730560524281 => {
                              current_block = 3325768110057758661;
                            }
                            _ => {}
                          }
                          match current_block {
                            3325768110057758661 => {
                              current_block = 14815832896553429982;
                            }
                            _ => {}
                          }
                          match current_block {
                            14815832896553429982 => {
                              current_block = 10731695520297161438;
                            }
                            _ => {}
                          }
                          match current_block {
                            10731695520297161438 => {
                              if c == '0' as i32 && (*ptr_to_globals).cmdcnt < 1i32 {
                                dot_begin();
                              } else {
                                (*ptr_to_globals).cmdcnt =
                                  (*ptr_to_globals).cmdcnt * 10i32 + (c - '0' as i32)
                              }
                              current_block = 15129665204879337069;
                            }
                            _ => {}
                          }
                          match current_block {
                            15129665204879337069 => {}
                            _ => {
                              loop {
                                match current_block {
                                  16813369756331276724 => {
                                    msg = std::ptr::null();
                                    current_block = 7392824444931029276;
                                  }
                                  7392824444931029276 => {
                                    dir = FORWARD as libc::c_int;
                                    p = (*ptr_to_globals).dot.offset(1);
                                    if *(*ptr_to_globals).last_search_pattern.offset(0)
                                      as libc::c_int
                                      == '?' as i32
                                    {
                                      dir = BACK as libc::c_int;
                                      p = (*ptr_to_globals).dot.offset(-1)
                                    }
                                    current_block = 4166979493554389389;
                                  }
                                  _ => {
                                    q = char_search(
                                      p,
                                      (*ptr_to_globals).last_search_pattern.offset(1),
                                      dir << 1i32 | FULL as libc::c_int,
                                    );
                                    if !q.is_null() {
                                      (*ptr_to_globals).dot = q;
                                      msg = std::ptr::null()
                                    } else {
                                      p = (*ptr_to_globals).text;
                                      if dir == BACK as libc::c_int {
                                        p = (*ptr_to_globals).end.offset(-1)
                                      }
                                      q = char_search(
                                        p,
                                        (*ptr_to_globals).last_search_pattern.offset(1),
                                        dir << 1i32 | FULL as libc::c_int,
                                      );
                                      if !q.is_null() {
                                        (*ptr_to_globals).dot = q;
                                        msg = b"search hit BOTTOM, continuing at TOP\x00"
                                          as *const u8
                                          as *const libc::c_char;
                                        if dir == BACK as libc::c_int {
                                          msg = b"search hit TOP, continuing at BOTTOM\x00"
                                            as *const u8
                                            as *const libc::c_char
                                        }
                                      } else {
                                        msg = b"Pattern not found\x00" as *const u8
                                          as *const libc::c_char
                                      }
                                    }
                                    if !msg.is_null() {
                                      status_line_bold(
                                        b"%s\x00" as *const u8 as *const libc::c_char,
                                        msg,
                                      );
                                    }
                                    (*ptr_to_globals).cmdcnt -= 1;
                                    if (*ptr_to_globals).cmdcnt > 0 {
                                      current_block = 16813369756331276724;
                                    } else {
                                      break;
                                    }
                                  }
                                }
                              }
                              current_block = 15129665204879337069;
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
        4 => {
          current_block = 9426343755402444879;
          match current_block {
            16992905640583886232 => {
              loop {
                if (*(*ptr_to_globals).dot as libc::c_int - 'a' as i32) as libc::c_uchar
                  as libc::c_int
                  <= 'z' as i32 - 'a' as i32
                {
                  undo_push(
                    (*ptr_to_globals).dot,
                    1i32 as libc::c_uint,
                    1i32 as libc::c_uchar,
                  );
                  *(*ptr_to_globals).dot =
                    bb_ascii_toupper(*(*ptr_to_globals).dot as libc::c_uchar) as libc::c_char;
                  undo_push(
                    (*ptr_to_globals).dot,
                    1i32 as libc::c_uint,
                    2i32 as libc::c_uchar,
                  );
                } else if (*(*ptr_to_globals).dot as libc::c_int - 'A' as i32) as libc::c_uchar
                  as libc::c_int
                  <= 'Z' as i32 - 'A' as i32
                {
                  undo_push(
                    (*ptr_to_globals).dot,
                    1i32 as libc::c_uint,
                    1i32 as libc::c_uchar,
                  );
                  *(*ptr_to_globals).dot =
                    bb_ascii_tolower(*(*ptr_to_globals).dot as libc::c_uchar) as libc::c_char;
                  undo_push(
                    (*ptr_to_globals).dot,
                    1i32 as libc::c_uint,
                    2i32 as libc::c_uchar,
                  );
                }
                dot_right();
                (*ptr_to_globals).cmdcnt -= 1;
                if !((*ptr_to_globals).cmdcnt > 0) {
                  break;
                }
              }
              end_cmd_q();
              current_block = 15129665204879337069;
            }
            8729655159604064397 => {
              c1 = get_one_char();
              cnt = 0;
              if c1 == '.' as i32 {
                cnt = (*ptr_to_globals)
                  .rows
                  .wrapping_sub(2i32 as libc::c_uint)
                  .wrapping_div(2i32 as libc::c_uint) as libc::c_int
              }
              if c1 == '-' as i32 {
                cnt = (*ptr_to_globals).rows.wrapping_sub(2i32 as libc::c_uint) as libc::c_int
              }
              (*ptr_to_globals).screenbegin = begin_line((*ptr_to_globals).dot);
              dot_scroll(cnt, -1i32);
              current_block = 15129665204879337069;
            }
            15899500648299942075 => {
              (*ptr_to_globals).last_forward_char = get_one_char();
              do_cmd(';' as i32);
              if *(*ptr_to_globals).dot as libc::c_int == (*ptr_to_globals).last_forward_char {
                dot_left();
              }
              (*ptr_to_globals).last_forward_char = 0;
              current_block = 15129665204879337069;
            }
            9051390181078481641 => {
              c1 = get_one_char();
              if *(*ptr_to_globals).dot as libc::c_int != '\n' as i32 {
                (*ptr_to_globals).dot =
                  text_hole_delete((*ptr_to_globals).dot, (*ptr_to_globals).dot, 1i32);
                (*ptr_to_globals).dot =
                  char_insert((*ptr_to_globals).dot, c1 as libc::c_char, 2i32);
                dot_left();
              }
              end_cmd_q();
              current_block = 15129665204879337069;
            }
            877115918601926659 => {
              dir = FORWARD as libc::c_int;
              if c == 'b' as i32 {
                dir = BACK as libc::c_int
              }
              while !((*ptr_to_globals).dot.offset(dir as isize) < (*ptr_to_globals).text
                || (*ptr_to_globals).dot.offset(dir as isize) > (*ptr_to_globals).end.offset(-1))
              {
                (*ptr_to_globals).dot = (*ptr_to_globals).dot.offset(dir as isize);
                if ({
                  let mut bb__isspace: libc::c_uchar =
                    (*(*ptr_to_globals).dot as libc::c_int - 9i32) as libc::c_uchar;
                  (bb__isspace as libc::c_int == ' ' as i32 - 9i32
                    || bb__isspace as libc::c_int <= 13i32 - 9i32) as libc::c_int
                }) != 0
                {
                  (*ptr_to_globals).dot = skip_thing(
                    (*ptr_to_globals).dot,
                    if c == 'e' as i32 { 2i32 } else { 1i32 },
                    dir,
                    S_OVER_WS as libc::c_int,
                  )
                }
                if bb_ascii_isalnum(*(*ptr_to_globals).dot as libc::c_uchar) != 0
                  || *(*ptr_to_globals).dot as libc::c_int == '_' as i32
                {
                  (*ptr_to_globals).dot =
                    skip_thing((*ptr_to_globals).dot, 1i32, dir, S_END_ALNUM as libc::c_int)
                } else if *strchrnul(
                  b"!\"#$%&\'()*+,-./:;<=>?@[\\]^_`{|}~\x00" as *const u8 as *const libc::c_char,
                  *(*ptr_to_globals).dot as libc::c_int,
                )
                .offset(0)
                  != 0
                {
                  (*ptr_to_globals).dot =
                    skip_thing((*ptr_to_globals).dot, 1i32, dir, S_END_PUNCT as libc::c_int)
                }
                (*ptr_to_globals).cmdcnt -= 1;
                if !((*ptr_to_globals).cmdcnt > 0) {
                  break;
                }
              }
              current_block = 15129665204879337069;
            }
            1085022737867179637 => {
              dot_begin();
              dot_skip_over_ws();
              current_block = 15129665204879337069;
            }
            3113147720494587438 => {
              c1 = get_one_char();
              if c1 != 'Z' as i32 {
                indicate_error();
              } else if (*ptr_to_globals).modified_count != 0 {
                if 1i32 != 0 && (*ptr_to_globals).readonly_mode as libc::c_int != 0 {
                  status_line_bold(
                    b"\'%s\' is read only\x00" as *const u8 as *const libc::c_char,
                    (*ptr_to_globals).current_filename,
                  );
                } else {
                  cnt = file_write(
                    (*ptr_to_globals).current_filename,
                    (*ptr_to_globals).text,
                    (*ptr_to_globals).end.offset(-1),
                  );
                  if cnt < 0 {
                    if cnt == -1i32 {
                      status_line_bold(b"Write error: %m\x00" as *const u8 as *const libc::c_char);
                    }
                  } else if cnt as libc::c_long
                    == (*ptr_to_globals)
                      .end
                      .offset(-1)
                      .wrapping_offset_from((*ptr_to_globals).text)
                      as libc::c_long
                      + 1
                  {
                    (*ptr_to_globals).editing = 0 as smallint
                  }
                }
              } else {
                (*ptr_to_globals).editing = 0 as smallint
              }
              current_block = 15129665204879337069;
            }
            12960118908218882441 => {
              p = begin_line((*ptr_to_globals).dot);
              if *p.offset(-1i32 as isize) as libc::c_int == '\n' as i32 {
                dot_prev();
                current_block = 2087484904894455135;
              } else {
                dot_begin();
                (*ptr_to_globals).dot =
                  char_insert((*ptr_to_globals).dot, '\n' as i32 as libc::c_char, 1i32);
                dot_prev();
                current_block = 8629930936610358348;
              }
            }
            8720450212473544924 => {
              (*ptr_to_globals).dot = (*ptr_to_globals).screenbegin;
              cnt = 0;
              while (cnt as libc::c_uint)
                < (*ptr_to_globals)
                  .rows
                  .wrapping_sub(1i32 as libc::c_uint)
                  .wrapping_div(2i32 as libc::c_uint)
              {
                (*ptr_to_globals).dot = next_line((*ptr_to_globals).dot);
                cnt += 1
              }
              current_block = 15129665204879337069;
            }
            13015277209715431090 => {
              (*ptr_to_globals).dot = end_screen();
              if (*ptr_to_globals).cmdcnt as libc::c_uint
                > (*ptr_to_globals).rows.wrapping_sub(1i32 as libc::c_uint)
              {
                (*ptr_to_globals).cmdcnt =
                  (*ptr_to_globals).rows.wrapping_sub(1i32 as libc::c_uint) as libc::c_int
              }
              (*ptr_to_globals).cmdcnt -= 1;
              if (*ptr_to_globals).cmdcnt > 0 {
                do_cmd('-' as i32);
              }
              dot_begin();
              dot_skip_over_ws();
              current_block = 15129665204879337069;
            }
            9800435767766781385 => {
              loop {
                dot_end();
                if (*ptr_to_globals).dot < (*ptr_to_globals).end.offset(-1) {
                  undo_push(
                    (*ptr_to_globals).dot,
                    1i32 as libc::c_uint,
                    1i32 as libc::c_uchar,
                  );
                  let fresh15 = (*ptr_to_globals).dot;
                  (*ptr_to_globals).dot = (*ptr_to_globals).dot.offset(1);
                  *fresh15 = ' ' as i32 as libc::c_char;
                  undo_push(
                    (*ptr_to_globals).dot.offset(-1),
                    1i32 as libc::c_uint,
                    2i32 as libc::c_uchar,
                  );
                  while ({
                    let mut bb__isblank: libc::c_uchar = *(*ptr_to_globals).dot as libc::c_uchar;
                    (bb__isblank as libc::c_int == ' ' as i32
                      || bb__isblank as libc::c_int == '\t' as i32)
                      as libc::c_int
                  }) != 0
                  {
                    text_hole_delete((*ptr_to_globals).dot, (*ptr_to_globals).dot, 2i32);
                  }
                }
                (*ptr_to_globals).cmdcnt -= 1;
                if !((*ptr_to_globals).cmdcnt > 0) {
                  break;
                }
              }
              end_cmd_q();
              current_block = 15129665204879337069;
            }
            3432363526595694666 => {
              dot_begin();
              dot_skip_over_ws();
              current_block = 3268579060917229304;
            }
            3494829253343353619 => {
              (*ptr_to_globals).dot = (*ptr_to_globals).screenbegin;
              if (*ptr_to_globals).cmdcnt as libc::c_uint
                > (*ptr_to_globals).rows.wrapping_sub(1i32 as libc::c_uint)
              {
                (*ptr_to_globals).cmdcnt =
                  (*ptr_to_globals).rows.wrapping_sub(1i32 as libc::c_uint) as libc::c_int
              }
              (*ptr_to_globals).cmdcnt -= 1;
              if (*ptr_to_globals).cmdcnt > 0 {
                do_cmd('+' as i32);
              }
              dot_skip_over_ws();
              current_block = 15129665204879337069;
            }
            17973101765331640574 => {
              c1 = get_one_char();
              if c1 != 'g' as i32 {
                buf[0] = 'g' as i32 as libc::c_char;
                buf[1] = if c1 >= 0 { c1 } else { '*' as i32 } as libc::c_char;
                buf[2] = '\u{0}' as i32 as libc::c_char;
                not_implemented(buf.as_mut_ptr());
                current_block = 15129665204879337069;
              } else {
                if (*ptr_to_globals).cmdcnt == 0 {
                  (*ptr_to_globals).cmdcnt = 1i32
                }
                current_block = 11945623545738147997;
              }
            }
            16546625800574160972 => {
              save_dot = (*ptr_to_globals).dot;
              (*ptr_to_globals).dot = dollar_line((*ptr_to_globals).dot);
              (*ptr_to_globals).dot = yank_delete(
                save_dot,
                (*ptr_to_globals).dot,
                0,
                YANKDEL as libc::c_int,
                1i32,
              );
              if c == 'C' as i32 {
                current_block = 8629930936610358348;
              } else {
                if c == 'D' as i32 {
                  end_cmd_q();
                }
                current_block = 15129665204879337069;
              }
            }
            11937696639986586685 => {
              cnt = count_lines((*ptr_to_globals).text, (*ptr_to_globals).dot);
              c1 = get_one_char();
              find_range(&mut p, &mut q, c1 as libc::c_char);
              yank_delete(p, q, 1i32, YANKONLY as libc::c_int, 0);
              p = begin_line(p);
              q = end_line(q);
              i = count_lines(p, q);
              while i > 0 {
                if c == '<' as i32 {
                  if *p as libc::c_int == '\t' as i32 {
                    text_hole_delete(p, p, 0);
                  } else if *p as libc::c_int == ' ' as i32 {
                    j = 0;
                    while *p as libc::c_int == ' ' as i32 && j < (*ptr_to_globals).tabstop {
                      text_hole_delete(p, p, 0);
                      j += 1
                    }
                  }
                } else if c == '>' as i32 {
                  char_insert(p, '\t' as i32 as libc::c_char, 1i32);
                }
                i -= 1;
                p = next_line(p)
              }
              (*ptr_to_globals).dot = find_line(cnt);
              dot_skip_over_ws();
              end_cmd_q();
              current_block = 15129665204879337069;
            }
            17725350714912028156 => {
              p = get_input_line(b":\x00" as *const u8 as *const libc::c_char);
              colon(p);
              current_block = 15129665204879337069;
            }
            14526470074083880812 => {
              q = char_search(
                (*ptr_to_globals).dot,
                b"\n\n\x00" as *const u8 as *const libc::c_char,
                (FORWARD as libc::c_int) << 1i32 | FULL as libc::c_int,
              );
              if !q.is_null() {
                (*ptr_to_globals).dot = next_line(q)
              }
              current_block = 15129665204879337069;
            }
            8893187391306414141 => {
              q = char_search(
                (*ptr_to_globals).dot,
                b"\n\n\x00" as *const u8 as *const libc::c_char,
                ((BACK as libc::c_int as libc::c_uint) << 1i32
                  | FULL as libc::c_int as libc::c_uint) as libc::c_int,
              );
              if !q.is_null() {
                (*ptr_to_globals).dot = next_line(q)
              }
              current_block = 15129665204879337069;
            }
            7021673758293221412 => {
              dir = BACK as libc::c_int;
              p = (*ptr_to_globals).dot.offset(-1);
              if *(*ptr_to_globals).last_search_pattern.offset(0) as libc::c_int == '?' as i32 {
                dir = FORWARD as libc::c_int;
                p = (*ptr_to_globals).dot.offset(1)
              }
              current_block = 4166979493554389389;
            }
            18374191879090272823 => {
              buf[0] = c as libc::c_char;
              buf[1] = '\u{0}' as i32 as libc::c_char;
              q = get_input_line(buf.as_mut_ptr());
              if *q.offset(0) as libc::c_int != 0 && *q.offset(1) == 0 {
                if *(*ptr_to_globals).last_search_pattern.offset(0) != 0 {
                  *(*ptr_to_globals).last_search_pattern.offset(0) = c as libc::c_char
                }
                current_block = 7392824444931029276;
              } else if *q.offset(0) != 0 {
                free((*ptr_to_globals).last_search_pattern as *mut libc::c_void);
                (*ptr_to_globals).last_search_pattern = crate::libbb::xfuncs_printf::xstrdup(q);
                current_block = 7392824444931029276;
              } else {
                current_block = 15129665204879337069;
              }
            }
            16407828456666301883 => {
              if (*ptr_to_globals).last_forward_char == 0 {
                current_block = 15129665204879337069;
              } else {
                loop {
                  q = (*ptr_to_globals).dot.offset(-1);
                  while q >= (*ptr_to_globals).text
                    && *q as libc::c_int != '\n' as i32
                    && *q as libc::c_int != (*ptr_to_globals).last_forward_char
                  {
                    q = q.offset(-1)
                  }
                  if q >= (*ptr_to_globals).text
                    && *q as libc::c_int == (*ptr_to_globals).last_forward_char
                  {
                    (*ptr_to_globals).dot = q
                  }
                  (*ptr_to_globals).cmdcnt -= 1;
                  if !((*ptr_to_globals).cmdcnt > 0) {
                    break;
                  }
                }
                current_block = 15129665204879337069;
              }
            }
            9018432604062702004 => {
              q = (*ptr_to_globals).dot;
              while q < (*ptr_to_globals).end && *q as libc::c_int != '\n' as i32 {
                if !strchr(
                  b"()[]{}\x00" as *const u8 as *const libc::c_char,
                  *q as libc::c_int,
                )
                .is_null()
                {
                  p = find_pair(q, *q);
                  if p.is_null() {
                    indicate_error();
                  } else {
                    (*ptr_to_globals).dot = p
                  }
                  break;
                } else {
                  q = q.offset(1)
                }
              }
              if *q as libc::c_int == '\n' as i32 {
                indicate_error();
              }
              current_block = 15129665204879337069;
            }
            10247103787464459848 => {
              p = (*ptr_to_globals).reg[(*ptr_to_globals).YDreg as usize];
              if p.is_null() {
                status_line_bold(
                  b"Nothing in register %c\x00" as *const u8 as *const libc::c_char,
                  what_reg() as libc::c_int,
                );
              } else {
                if !strchr(p, '\n' as i32).is_null() {
                  if c == 'P' as i32 {
                    dot_begin();
                  }
                  if c == 'p' as i32 {
                    if end_line((*ptr_to_globals).dot) == (*ptr_to_globals).end.offset(-1) {
                      (*ptr_to_globals).dot = (*ptr_to_globals).end
                    } else {
                      dot_next();
                    }
                  }
                } else if c == 'p' as i32 {
                  dot_right();
                }
                string_insert((*ptr_to_globals).dot, p, 1i32);
                end_cmd_q();
              }
              current_block = 15129665204879337069;
            }
            15260732871948875843 => {
              c1 = (get_one_char() | 0x20i32) - 'a' as i32;
              if c1 as libc::c_uint <= 25i32 as libc::c_uint {
                (*ptr_to_globals).mark[c1 as usize] = (*ptr_to_globals).dot
              } else {
                indicate_error();
              }
              current_block = 15129665204879337069;
            }
            12738322036487086035 => {
              c1 = get_one_char() | 0x20i32;
              if (c1 - 'a' as i32) as libc::c_uint <= 25i32 as libc::c_uint {
                c1 = c1 - 'a' as i32;
                q = (*ptr_to_globals).mark[c1 as usize];
                if (*ptr_to_globals).text <= q && q < (*ptr_to_globals).end {
                  (*ptr_to_globals).dot = q;
                  dot_begin();
                  dot_skip_over_ws();
                }
              } else if c1 == '\'' as i32 {
                (*ptr_to_globals).dot = swap_context((*ptr_to_globals).dot);
                dot_begin();
                dot_skip_over_ws();
              } else {
                indicate_error();
              }
              current_block = 15129665204879337069;
            }
            13255096073384561358 => {
              c1 = (get_one_char() | 0x20i32) - 'a' as i32;
              if c1 as libc::c_uint <= 25i32 as libc::c_uint {
                (*ptr_to_globals).YDreg = c1 as smalluint
              } else {
                indicate_error();
              }
              current_block = 15129665204879337069;
            }
            10258711639984089377 => {
              if (*ptr_to_globals).cmd_mode as libc::c_int == 0 {
                indicate_error();
              }
              (*ptr_to_globals).cmd_mode = 0 as smallint;
              undo_queue_commit();
              end_cmd_q();
              (*ptr_to_globals).last_status_cksum = 0;
              current_block = 15129665204879337069;
            }
            11439127087547047736 => {
              buf[0] = c as libc::c_char;
              buf[1] = '\u{0}' as i32 as libc::c_char;
              not_implemented(buf.as_mut_ptr());
              end_cmd_q();
              current_block = 17440971994642376514;
            }
            7961798899781870241 => {
              dot_scroll(
                (*ptr_to_globals).rows.wrapping_sub(2i32 as libc::c_uint) as libc::c_int,
                -1i32,
              );
              current_block = 15129665204879337069;
            }
            9426343755402444879 => {
              dot_scroll(
                (*ptr_to_globals)
                  .rows
                  .wrapping_sub(2i32 as libc::c_uint)
                  .wrapping_div(2i32 as libc::c_uint) as libc::c_int,
                1i32,
              );
              current_block = 15129665204879337069;
            }
            13352459794680105913 => {
              dot_scroll(1i32, 1i32);
              current_block = 15129665204879337069;
            }
            14142272253464333006 => {
              dot_scroll(
                (*ptr_to_globals).rows.wrapping_sub(2i32 as libc::c_uint) as libc::c_int,
                1i32,
              );
              current_block = 15129665204879337069;
            }
            10758177197742640066 => {
              (*ptr_to_globals).last_status_cksum = 0;
              current_block = 15129665204879337069;
            }
            6152256259730122749 => {
              current_block = 7534742345255184552;
            }
            12883932598258173301 => {
              current_block = 8800996768013373992;
            }
            11242998110520238401 => {
              redraw(1i32);
              current_block = 15129665204879337069;
            }
            13619733043935729992 => {
              loop {
                dot_next();
                dot_skip_over_ws();
                (*ptr_to_globals).cmdcnt -= 1;
                if !((*ptr_to_globals).cmdcnt > 0) {
                  break;
                }
              }
              current_block = 15129665204879337069;
            }
            9339065157412720613 => {
              dot_scroll(
                (*ptr_to_globals)
                  .rows
                  .wrapping_sub(2i32 as libc::c_uint)
                  .wrapping_div(2i32 as libc::c_uint) as libc::c_int,
                -1i32,
              );
              current_block = 15129665204879337069;
            }
            11447082683497798022 => {
              dot_scroll(1i32, -1i32);
              current_block = 15129665204879337069;
            }
            5182000506326660482 => {
              current_block = 13993698454868426881;
            }
            1105010766850597332 => {
              if !(*ptr_to_globals).reg[27].is_null() {
                p = begin_line((*ptr_to_globals).dot);
                q = end_line((*ptr_to_globals).dot);
                p = text_hole_delete(p, q, 1i32);
                p = p.offset(string_insert(p, (*ptr_to_globals).reg[27], 2i32) as isize);
                (*ptr_to_globals).dot = p;
                dot_skip_over_ws();
              }
              current_block = 15129665204879337069;
            }
            8616046655533110204 => {
              undo_pop();
              current_block = 15129665204879337069;
            }
            5127767458142431603 => {
              loop {
                (*ptr_to_globals).dot = end_line((*ptr_to_globals).dot);
                (*ptr_to_globals).cmdcnt -= 1;
                if (*ptr_to_globals).cmdcnt <= 0 {
                  break;
                }
                dot_next();
              }
              current_block = 15129665204879337069;
            }
            222014967776118151 => {
              (*ptr_to_globals).last_forward_char = get_one_char();
              current_block = 7856905509180742666;
            }
            11209792479411604110 => {
              loop {
                dot_prev();
                dot_skip_over_ws();
                (*ptr_to_globals).cmdcnt -= 1;
                if !((*ptr_to_globals).cmdcnt > 0) {
                  break;
                }
              }
              current_block = 15129665204879337069;
            }
            3364823792826654116 => {
              if (*ptr_to_globals).lmc_len != 0 {
                (*ptr_to_globals).ioq_start = crate::libbb::xfuncs_printf::xstrndup(
                  (*ptr_to_globals).last_modifying_cmd.as_mut_ptr(),
                  (*ptr_to_globals).lmc_len,
                );
                (*ptr_to_globals).ioq = (*ptr_to_globals).ioq_start
              }
              current_block = 15129665204879337069;
            }
            18096603330221575131 => {
              current_block = 17498168302144015873;
            }
            16891123271837848903 => {
              dot_end();
              current_block = 1752638907092016026;
            }
            8517235759107662071 => {
              current_block = 5847749760081351726;
            }
            12525254419223051704 => {
              if (*ptr_to_globals).dot < (*ptr_to_globals).end.offset(-1) {
                (*ptr_to_globals).dot = yank_delete(
                  (*ptr_to_globals).dot,
                  (*ptr_to_globals).dot,
                  1i32,
                  YANKDEL as libc::c_int,
                  1i32,
                )
              }
              current_block = 15129665204879337069;
            }
            15232911949322867522 => {
              current_block = 17251831742223396249;
            }
            10863374208794025069 => {
              current_block = 1895262434596074581;
            }
            451126677064669119 => {
              loop {
                dot_prev();
                (*ptr_to_globals).dot = move_to_col(
                  (*ptr_to_globals).dot,
                  (*ptr_to_globals).ccol + (*ptr_to_globals).offset,
                );
                (*ptr_to_globals).cmdcnt -= 1;
                if !((*ptr_to_globals).cmdcnt > 0) {
                  break;
                }
              }
              current_block = 15129665204879337069;
            }
            4611735929166613116 => {
              loop {
                if bb_ascii_isalnum(*(*ptr_to_globals).dot as libc::c_uchar) != 0
                  || *(*ptr_to_globals).dot as libc::c_int == '_' as i32
                {
                  (*ptr_to_globals).dot = skip_thing(
                    (*ptr_to_globals).dot,
                    1i32,
                    FORWARD as libc::c_int,
                    S_END_ALNUM as libc::c_int,
                  )
                } else if *strchrnul(
                  b"!\"#$%&\'()*+,-./:;<=>?@[\\]^_`{|}~\x00" as *const u8 as *const libc::c_char,
                  *(*ptr_to_globals).dot as libc::c_int,
                )
                .offset(0)
                  != 0
                {
                  (*ptr_to_globals).dot = skip_thing(
                    (*ptr_to_globals).dot,
                    1i32,
                    FORWARD as libc::c_int,
                    S_END_PUNCT as libc::c_int,
                  )
                }
                if (*ptr_to_globals).dot < (*ptr_to_globals).end.offset(-1) {
                  (*ptr_to_globals).dot = (*ptr_to_globals).dot.offset(1)
                }
                if ({
                  let mut bb__isspace: libc::c_uchar =
                    (*(*ptr_to_globals).dot as libc::c_int - 9i32) as libc::c_uchar;
                  (bb__isspace as libc::c_int == ' ' as i32 - 9i32
                    || bb__isspace as libc::c_int <= 13i32 - 9i32) as libc::c_int
                }) != 0
                {
                  (*ptr_to_globals).dot = skip_thing(
                    (*ptr_to_globals).dot,
                    2i32,
                    FORWARD as libc::c_int,
                    S_OVER_WS as libc::c_int,
                  )
                }
                (*ptr_to_globals).cmdcnt -= 1;
                if !((*ptr_to_globals).cmdcnt > 0) {
                  break;
                }
              }
              current_block = 15129665204879337069;
            }
            4386451087681909888 => {
              (*ptr_to_globals).dot =
                move_to_col((*ptr_to_globals).dot, (*ptr_to_globals).cmdcnt - 1i32);
              current_block = 15129665204879337069;
            }
            1296397779060594135 => {
              dot_begin();
              current_block = 15129665204879337069;
            }
            _ => {}
          }
          match current_block {
            15129665204879337069 => {}
            8629930936610358348 => {}
            _ => {
              match current_block {
                17251831742223396249 => {
                  dir = 0;
                  if c == 'X' as i32 {
                    dir = -1i32
                  }
                  loop {
                    if *(*ptr_to_globals).dot.offset(dir as isize) as libc::c_int != '\n' as i32 {
                      if c == 'X' as i32 {
                        (*ptr_to_globals).dot = (*ptr_to_globals).dot.offset(-1)
                      }
                      (*ptr_to_globals).dot = yank_delete(
                        (*ptr_to_globals).dot,
                        (*ptr_to_globals).dot,
                        0,
                        YANKDEL as libc::c_int,
                        1i32,
                      )
                    }
                    (*ptr_to_globals).cmdcnt -= 1;
                    if !((*ptr_to_globals).cmdcnt > 0) {
                      break;
                    }
                  }
                  end_cmd_q();
                  if c == 's' as i32 {
                    current_block = 8629930936610358348;
                  } else {
                    current_block = 15129665204879337069;
                  }
                }
                2087484904894455135 => {
                  dot_end();
                  (*ptr_to_globals).dot =
                    char_insert((*ptr_to_globals).dot, '\n' as i32 as libc::c_char, 1i32);
                  current_block = 8629930936610358348;
                }
                11945623545738147997 => {
                  (*ptr_to_globals).dot = (*ptr_to_globals).end.offset(-1);
                  if (*ptr_to_globals).cmdcnt > 0 {
                    (*ptr_to_globals).dot = find_line((*ptr_to_globals).cmdcnt)
                  }
                  dot_skip_over_ws();
                  current_block = 15129665204879337069;
                }
                5847749760081351726 => {
                  dir = FORWARD as libc::c_int;
                  if c == 'B' as i32 {
                    dir = BACK as libc::c_int
                  }
                  loop {
                    if c == 'W' as i32
                      || ({
                        let mut bb__isspace: libc::c_uchar =
                          (*(*ptr_to_globals).dot.offset(dir as isize) as libc::c_int - 9i32)
                            as libc::c_uchar;
                        (bb__isspace as libc::c_int == ' ' as i32 - 9i32
                          || bb__isspace as libc::c_int <= 13i32 - 9i32)
                          as libc::c_int
                      }) != 0
                    {
                      (*ptr_to_globals).dot =
                        skip_thing((*ptr_to_globals).dot, 1i32, dir, S_TO_WS as libc::c_int);
                      (*ptr_to_globals).dot =
                        skip_thing((*ptr_to_globals).dot, 2i32, dir, S_OVER_WS as libc::c_int)
                    }
                    if c != 'W' as i32 {
                      (*ptr_to_globals).dot =
                        skip_thing((*ptr_to_globals).dot, 1i32, dir, S_BEFORE_WS as libc::c_int)
                    }
                    (*ptr_to_globals).cmdcnt -= 1;
                    if !((*ptr_to_globals).cmdcnt > 0) {
                      break;
                    }
                  }
                  current_block = 15129665204879337069;
                }
                17440971994642376514 => {
                  current_block = 15129665204879337069;
                }
                7534742345255184552 => {
                  current_block = 17247297260531395789;
                }
                8800996768013373992 => {
                  loop {
                    dot_next();
                    (*ptr_to_globals).dot = move_to_col(
                      (*ptr_to_globals).dot,
                      (*ptr_to_globals).ccol + (*ptr_to_globals).offset,
                    );
                    (*ptr_to_globals).cmdcnt -= 1;
                    if !((*ptr_to_globals).cmdcnt > 0) {
                      break;
                    }
                  }
                  current_block = 15129665204879337069;
                }
                13993698454868426881 => {
                  loop {
                    dot_right();
                    (*ptr_to_globals).cmdcnt -= 1;
                    if !((*ptr_to_globals).cmdcnt > 0) {
                      break;
                    }
                  }
                  current_block = 15129665204879337069;
                }
                7856905509180742666 => {
                  while !((*ptr_to_globals).last_forward_char == 0) {
                    q = (*ptr_to_globals).dot.offset(1);
                    while q < (*ptr_to_globals).end.offset(-1)
                      && *q as libc::c_int != '\n' as i32
                      && *q as libc::c_int != (*ptr_to_globals).last_forward_char
                    {
                      q = q.offset(1)
                    }
                    if *q as libc::c_int == (*ptr_to_globals).last_forward_char {
                      (*ptr_to_globals).dot = q
                    }
                    (*ptr_to_globals).cmdcnt -= 1;
                    if !((*ptr_to_globals).cmdcnt > 0) {
                      break;
                    }
                  }
                  current_block = 15129665204879337069;
                }
                17498168302144015873 => {
                  current_block = 8681395796513813967;
                }
                1752638907092016026 => {
                  if *(*ptr_to_globals).dot as libc::c_int != '\n' as i32 {
                    (*ptr_to_globals).dot = (*ptr_to_globals).dot.offset(1)
                  }
                  current_block = 8629930936610358348;
                }
                3268579060917229304 => {
                  current_block = 8629930936610358348;
                }
                1895262434596074581 => {
                  current_block = 8908416993177701018;
                }
                _ => {}
              }
              match current_block {
                8629930936610358348 => {}
                15129665204879337069 => {}
                _ => {
                  match current_block {
                    17247297260531395789 => {
                      loop {
                        dot_left();
                        (*ptr_to_globals).cmdcnt -= 1;
                        if !((*ptr_to_globals).cmdcnt > 0) {
                          break;
                        }
                      }
                      current_block = 15129665204879337069;
                    }
                    8681395796513813967 => {
                      current_block = 5591548203144509315;
                    }
                    8908416993177701018 => {
                      current_block = 16124761010012532485;
                    }
                    _ => {}
                  }
                  match current_block {
                    15129665204879337069 => {}
                    _ => {
                      match current_block {
                        16124761010012532485 => {
                          let mut yf: libc::c_int = 0;
                          let mut ml: libc::c_int = 0;
                          let mut whole: libc::c_int = 0;
                          yf = YANKDEL as libc::c_int;
                          if c == 'y' as i32 || c == 'Y' as i32 {
                            yf = YANKONLY as libc::c_int
                          }
                          c1 = 'y' as i32;
                          if c != 'Y' as i32 {
                            c1 = get_one_char()
                          }
                          ml = find_range(&mut p, &mut q, c1 as libc::c_char);
                          place_cursor(0i32, 0);
                          if c1 == 27i32 {
                            c1 = 27i32;
                            c = c1
                          } else if !strchr(b"wW\x00" as *const u8 as *const libc::c_char, c1)
                            .is_null()
                          {
                            ml = 0;
                            if c == 'c' as i32 {
                              while ({
                                let mut bb__isspace: libc::c_uchar =
                                  (*q as libc::c_int - 9i32) as libc::c_uchar;
                                (bb__isspace as libc::c_int == ' ' as i32 - 9i32
                                  || bb__isspace as libc::c_int <= 13i32 - 9i32)
                                  as libc::c_int
                              }) != 0
                                && q > p
                              {
                                q = q.offset(-1)
                              }
                            }
                            (*ptr_to_globals).dot = yank_delete(p, q, ml, yf, 1i32)
                          } else if !strchr(
                            b"^0bBeEft%$ lh\x08\x7f\x00" as *const u8 as *const libc::c_char,
                            c1,
                          )
                          .is_null()
                          {
                            (*ptr_to_globals).dot = yank_delete(p, q, ml, yf, 1i32)
                          } else if !strchr(
                            b"cdykjGHL+-{}\r\n\x00" as *const u8 as *const libc::c_char,
                            c1,
                          )
                          .is_null()
                          {
                            (*ptr_to_globals).dot = yank_delete(p, q, ml, yf, 1i32);
                            whole = 1i32
                          } else {
                            c1 = 27i32;
                            c = c1;
                            ml = 0;
                            indicate_error();
                          }
                          if ml != 0 && whole != 0 {
                            if c == 'c' as i32 {
                              (*ptr_to_globals).dot = char_insert(
                                (*ptr_to_globals).dot,
                                '\n' as i32 as libc::c_char,
                                2i32,
                              );
                              if whole != 0
                                && (*ptr_to_globals).dot != (*ptr_to_globals).end.offset(-1)
                              {
                                dot_prev();
                              }
                            } else if c == 'd' as i32 {
                              dot_begin();
                              dot_skip_over_ws();
                            }
                          }
                          if c1 != 27i32 {
                            if c == 'c' as i32 {
                              strcpy(
                                buf.as_mut_ptr(),
                                b"Change\x00" as *const u8 as *const libc::c_char,
                              );
                              current_block = 8629930936610358348;
                            } else {
                              if c == 'd' as i32 {
                                strcpy(
                                  buf.as_mut_ptr(),
                                  b"Delete\x00" as *const u8 as *const libc::c_char,
                                );
                              }
                              if c == 'y' as i32 || c == 'Y' as i32 {
                                strcpy(
                                  buf.as_mut_ptr(),
                                  b"Yank\x00" as *const u8 as *const libc::c_char,
                                );
                              }
                              p = (*ptr_to_globals).reg[(*ptr_to_globals).YDreg as usize];
                              q = p.offset(strlen(p) as isize);
                              cnt = 0;
                              while p <= q {
                                if *p as libc::c_int == '\n' as i32 {
                                  cnt += 1
                                }
                                p = p.offset(1)
                              }
                              status_line(
                                b"%s %u lines (%u chars) using [%c]\x00" as *const u8
                                  as *const libc::c_char,
                                buf.as_mut_ptr(),
                                cnt,
                                strlen((*ptr_to_globals).reg[(*ptr_to_globals).YDreg as usize])
                                  as libc::c_uint,
                                what_reg() as libc::c_int,
                              );
                              end_cmd_q();
                              current_block = 15129665204879337069;
                            }
                          } else {
                            current_block = 15129665204879337069;
                          }
                        }
                        5591548203144509315 => {
                          current_block = 2636677179867529885;
                        }
                        _ => {}
                      }
                      match current_block {
                        15129665204879337069 => {}
                        8629930936610358348 => {}
                        _ => {
                          match current_block {
                            2636677179867529885 => {
                              current_block = 12309206730560524281;
                            }
                            _ => {}
                          }
                          match current_block {
                            12309206730560524281 => {
                              current_block = 3325768110057758661;
                            }
                            _ => {}
                          }
                          match current_block {
                            3325768110057758661 => {
                              current_block = 14815832896553429982;
                            }
                            _ => {}
                          }
                          match current_block {
                            14815832896553429982 => {
                              current_block = 10731695520297161438;
                            }
                            _ => {}
                          }
                          match current_block {
                            10731695520297161438 => {
                              if c == '0' as i32 && (*ptr_to_globals).cmdcnt < 1i32 {
                                dot_begin();
                              } else {
                                (*ptr_to_globals).cmdcnt =
                                  (*ptr_to_globals).cmdcnt * 10i32 + (c - '0' as i32)
                              }
                              current_block = 15129665204879337069;
                            }
                            _ => {}
                          }
                          match current_block {
                            15129665204879337069 => {}
                            _ => {
                              loop {
                                match current_block {
                                  16813369756331276724 => {
                                    msg = std::ptr::null();
                                    current_block = 7392824444931029276;
                                  }
                                  7392824444931029276 => {
                                    dir = FORWARD as libc::c_int;
                                    p = (*ptr_to_globals).dot.offset(1);
                                    if *(*ptr_to_globals).last_search_pattern.offset(0)
                                      as libc::c_int
                                      == '?' as i32
                                    {
                                      dir = BACK as libc::c_int;
                                      p = (*ptr_to_globals).dot.offset(-1)
                                    }
                                    current_block = 4166979493554389389;
                                  }
                                  _ => {
                                    q = char_search(
                                      p,
                                      (*ptr_to_globals).last_search_pattern.offset(1),
                                      dir << 1i32 | FULL as libc::c_int,
                                    );
                                    if !q.is_null() {
                                      (*ptr_to_globals).dot = q;
                                      msg = std::ptr::null()
                                    } else {
                                      p = (*ptr_to_globals).text;
                                      if dir == BACK as libc::c_int {
                                        p = (*ptr_to_globals).end.offset(-1)
                                      }
                                      q = char_search(
                                        p,
                                        (*ptr_to_globals).last_search_pattern.offset(1),
                                        dir << 1i32 | FULL as libc::c_int,
                                      );
                                      if !q.is_null() {
                                        (*ptr_to_globals).dot = q;
                                        msg = b"search hit BOTTOM, continuing at TOP\x00"
                                          as *const u8
                                          as *const libc::c_char;
                                        if dir == BACK as libc::c_int {
                                          msg = b"search hit TOP, continuing at BOTTOM\x00"
                                            as *const u8
                                            as *const libc::c_char
                                        }
                                      } else {
                                        msg = b"Pattern not found\x00" as *const u8
                                          as *const libc::c_char
                                      }
                                    }
                                    if !msg.is_null() {
                                      status_line_bold(
                                        b"%s\x00" as *const u8 as *const libc::c_char,
                                        msg,
                                      );
                                    }
                                    (*ptr_to_globals).cmdcnt -= 1;
                                    if (*ptr_to_globals).cmdcnt > 0 {
                                      current_block = 16813369756331276724;
                                    } else {
                                      break;
                                    }
                                  }
                                }
                              }
                              current_block = 15129665204879337069;
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
        5 => {
          current_block = 13352459794680105913;
          match current_block {
            16992905640583886232 => {
              loop {
                if (*(*ptr_to_globals).dot as libc::c_int - 'a' as i32) as libc::c_uchar
                  as libc::c_int
                  <= 'z' as i32 - 'a' as i32
                {
                  undo_push(
                    (*ptr_to_globals).dot,
                    1i32 as libc::c_uint,
                    1i32 as libc::c_uchar,
                  );
                  *(*ptr_to_globals).dot =
                    bb_ascii_toupper(*(*ptr_to_globals).dot as libc::c_uchar) as libc::c_char;
                  undo_push(
                    (*ptr_to_globals).dot,
                    1i32 as libc::c_uint,
                    2i32 as libc::c_uchar,
                  );
                } else if (*(*ptr_to_globals).dot as libc::c_int - 'A' as i32) as libc::c_uchar
                  as libc::c_int
                  <= 'Z' as i32 - 'A' as i32
                {
                  undo_push(
                    (*ptr_to_globals).dot,
                    1i32 as libc::c_uint,
                    1i32 as libc::c_uchar,
                  );
                  *(*ptr_to_globals).dot =
                    bb_ascii_tolower(*(*ptr_to_globals).dot as libc::c_uchar) as libc::c_char;
                  undo_push(
                    (*ptr_to_globals).dot,
                    1i32 as libc::c_uint,
                    2i32 as libc::c_uchar,
                  );
                }
                dot_right();
                (*ptr_to_globals).cmdcnt -= 1;
                if !((*ptr_to_globals).cmdcnt > 0) {
                  break;
                }
              }
              end_cmd_q();
              current_block = 15129665204879337069;
            }
            8729655159604064397 => {
              c1 = get_one_char();
              cnt = 0;
              if c1 == '.' as i32 {
                cnt = (*ptr_to_globals)
                  .rows
                  .wrapping_sub(2i32 as libc::c_uint)
                  .wrapping_div(2i32 as libc::c_uint) as libc::c_int
              }
              if c1 == '-' as i32 {
                cnt = (*ptr_to_globals).rows.wrapping_sub(2i32 as libc::c_uint) as libc::c_int
              }
              (*ptr_to_globals).screenbegin = begin_line((*ptr_to_globals).dot);
              dot_scroll(cnt, -1i32);
              current_block = 15129665204879337069;
            }
            15899500648299942075 => {
              (*ptr_to_globals).last_forward_char = get_one_char();
              do_cmd(';' as i32);
              if *(*ptr_to_globals).dot as libc::c_int == (*ptr_to_globals).last_forward_char {
                dot_left();
              }
              (*ptr_to_globals).last_forward_char = 0;
              current_block = 15129665204879337069;
            }
            9051390181078481641 => {
              c1 = get_one_char();
              if *(*ptr_to_globals).dot as libc::c_int != '\n' as i32 {
                (*ptr_to_globals).dot =
                  text_hole_delete((*ptr_to_globals).dot, (*ptr_to_globals).dot, 1i32);
                (*ptr_to_globals).dot =
                  char_insert((*ptr_to_globals).dot, c1 as libc::c_char, 2i32);
                dot_left();
              }
              end_cmd_q();
              current_block = 15129665204879337069;
            }
            877115918601926659 => {
              dir = FORWARD as libc::c_int;
              if c == 'b' as i32 {
                dir = BACK as libc::c_int
              }
              while !((*ptr_to_globals).dot.offset(dir as isize) < (*ptr_to_globals).text
                || (*ptr_to_globals).dot.offset(dir as isize) > (*ptr_to_globals).end.offset(-1))
              {
                (*ptr_to_globals).dot = (*ptr_to_globals).dot.offset(dir as isize);
                if ({
                  let mut bb__isspace: libc::c_uchar =
                    (*(*ptr_to_globals).dot as libc::c_int - 9i32) as libc::c_uchar;
                  (bb__isspace as libc::c_int == ' ' as i32 - 9i32
                    || bb__isspace as libc::c_int <= 13i32 - 9i32) as libc::c_int
                }) != 0
                {
                  (*ptr_to_globals).dot = skip_thing(
                    (*ptr_to_globals).dot,
                    if c == 'e' as i32 { 2i32 } else { 1i32 },
                    dir,
                    S_OVER_WS as libc::c_int,
                  )
                }
                if bb_ascii_isalnum(*(*ptr_to_globals).dot as libc::c_uchar) != 0
                  || *(*ptr_to_globals).dot as libc::c_int == '_' as i32
                {
                  (*ptr_to_globals).dot =
                    skip_thing((*ptr_to_globals).dot, 1i32, dir, S_END_ALNUM as libc::c_int)
                } else if *strchrnul(
                  b"!\"#$%&\'()*+,-./:;<=>?@[\\]^_`{|}~\x00" as *const u8 as *const libc::c_char,
                  *(*ptr_to_globals).dot as libc::c_int,
                )
                .offset(0)
                  != 0
                {
                  (*ptr_to_globals).dot =
                    skip_thing((*ptr_to_globals).dot, 1i32, dir, S_END_PUNCT as libc::c_int)
                }
                (*ptr_to_globals).cmdcnt -= 1;
                if !((*ptr_to_globals).cmdcnt > 0) {
                  break;
                }
              }
              current_block = 15129665204879337069;
            }
            1085022737867179637 => {
              dot_begin();
              dot_skip_over_ws();
              current_block = 15129665204879337069;
            }
            3113147720494587438 => {
              c1 = get_one_char();
              if c1 != 'Z' as i32 {
                indicate_error();
              } else if (*ptr_to_globals).modified_count != 0 {
                if 1i32 != 0 && (*ptr_to_globals).readonly_mode as libc::c_int != 0 {
                  status_line_bold(
                    b"\'%s\' is read only\x00" as *const u8 as *const libc::c_char,
                    (*ptr_to_globals).current_filename,
                  );
                } else {
                  cnt = file_write(
                    (*ptr_to_globals).current_filename,
                    (*ptr_to_globals).text,
                    (*ptr_to_globals).end.offset(-1),
                  );
                  if cnt < 0 {
                    if cnt == -1i32 {
                      status_line_bold(b"Write error: %m\x00" as *const u8 as *const libc::c_char);
                    }
                  } else if cnt as libc::c_long
                    == (*ptr_to_globals)
                      .end
                      .offset(-1)
                      .wrapping_offset_from((*ptr_to_globals).text)
                      as libc::c_long
                      + 1
                  {
                    (*ptr_to_globals).editing = 0 as smallint
                  }
                }
              } else {
                (*ptr_to_globals).editing = 0 as smallint
              }
              current_block = 15129665204879337069;
            }
            12960118908218882441 => {
              p = begin_line((*ptr_to_globals).dot);
              if *p.offset(-1i32 as isize) as libc::c_int == '\n' as i32 {
                dot_prev();
                current_block = 2087484904894455135;
              } else {
                dot_begin();
                (*ptr_to_globals).dot =
                  char_insert((*ptr_to_globals).dot, '\n' as i32 as libc::c_char, 1i32);
                dot_prev();
                current_block = 8629930936610358348;
              }
            }
            8720450212473544924 => {
              (*ptr_to_globals).dot = (*ptr_to_globals).screenbegin;
              cnt = 0;
              while (cnt as libc::c_uint)
                < (*ptr_to_globals)
                  .rows
                  .wrapping_sub(1i32 as libc::c_uint)
                  .wrapping_div(2i32 as libc::c_uint)
              {
                (*ptr_to_globals).dot = next_line((*ptr_to_globals).dot);
                cnt += 1
              }
              current_block = 15129665204879337069;
            }
            13015277209715431090 => {
              (*ptr_to_globals).dot = end_screen();
              if (*ptr_to_globals).cmdcnt as libc::c_uint
                > (*ptr_to_globals).rows.wrapping_sub(1i32 as libc::c_uint)
              {
                (*ptr_to_globals).cmdcnt =
                  (*ptr_to_globals).rows.wrapping_sub(1i32 as libc::c_uint) as libc::c_int
              }
              (*ptr_to_globals).cmdcnt -= 1;
              if (*ptr_to_globals).cmdcnt > 0 {
                do_cmd('-' as i32);
              }
              dot_begin();
              dot_skip_over_ws();
              current_block = 15129665204879337069;
            }
            9800435767766781385 => {
              loop {
                dot_end();
                if (*ptr_to_globals).dot < (*ptr_to_globals).end.offset(-1) {
                  undo_push(
                    (*ptr_to_globals).dot,
                    1i32 as libc::c_uint,
                    1i32 as libc::c_uchar,
                  );
                  let fresh15 = (*ptr_to_globals).dot;
                  (*ptr_to_globals).dot = (*ptr_to_globals).dot.offset(1);
                  *fresh15 = ' ' as i32 as libc::c_char;
                  undo_push(
                    (*ptr_to_globals).dot.offset(-1),
                    1i32 as libc::c_uint,
                    2i32 as libc::c_uchar,
                  );
                  while ({
                    let mut bb__isblank: libc::c_uchar = *(*ptr_to_globals).dot as libc::c_uchar;
                    (bb__isblank as libc::c_int == ' ' as i32
                      || bb__isblank as libc::c_int == '\t' as i32)
                      as libc::c_int
                  }) != 0
                  {
                    text_hole_delete((*ptr_to_globals).dot, (*ptr_to_globals).dot, 2i32);
                  }
                }
                (*ptr_to_globals).cmdcnt -= 1;
                if !((*ptr_to_globals).cmdcnt > 0) {
                  break;
                }
              }
              end_cmd_q();
              current_block = 15129665204879337069;
            }
            3432363526595694666 => {
              dot_begin();
              dot_skip_over_ws();
              current_block = 3268579060917229304;
            }
            3494829253343353619 => {
              (*ptr_to_globals).dot = (*ptr_to_globals).screenbegin;
              if (*ptr_to_globals).cmdcnt as libc::c_uint
                > (*ptr_to_globals).rows.wrapping_sub(1i32 as libc::c_uint)
              {
                (*ptr_to_globals).cmdcnt =
                  (*ptr_to_globals).rows.wrapping_sub(1i32 as libc::c_uint) as libc::c_int
              }
              (*ptr_to_globals).cmdcnt -= 1;
              if (*ptr_to_globals).cmdcnt > 0 {
                do_cmd('+' as i32);
              }
              dot_skip_over_ws();
              current_block = 15129665204879337069;
            }
            17973101765331640574 => {
              c1 = get_one_char();
              if c1 != 'g' as i32 {
                buf[0] = 'g' as i32 as libc::c_char;
                buf[1] = if c1 >= 0 { c1 } else { '*' as i32 } as libc::c_char;
                buf[2] = '\u{0}' as i32 as libc::c_char;
                not_implemented(buf.as_mut_ptr());
                current_block = 15129665204879337069;
              } else {
                if (*ptr_to_globals).cmdcnt == 0 {
                  (*ptr_to_globals).cmdcnt = 1i32
                }
                current_block = 11945623545738147997;
              }
            }
            16546625800574160972 => {
              save_dot = (*ptr_to_globals).dot;
              (*ptr_to_globals).dot = dollar_line((*ptr_to_globals).dot);
              (*ptr_to_globals).dot = yank_delete(
                save_dot,
                (*ptr_to_globals).dot,
                0,
                YANKDEL as libc::c_int,
                1i32,
              );
              if c == 'C' as i32 {
                current_block = 8629930936610358348;
              } else {
                if c == 'D' as i32 {
                  end_cmd_q();
                }
                current_block = 15129665204879337069;
              }
            }
            11937696639986586685 => {
              cnt = count_lines((*ptr_to_globals).text, (*ptr_to_globals).dot);
              c1 = get_one_char();
              find_range(&mut p, &mut q, c1 as libc::c_char);
              yank_delete(p, q, 1i32, YANKONLY as libc::c_int, 0);
              p = begin_line(p);
              q = end_line(q);
              i = count_lines(p, q);
              while i > 0 {
                if c == '<' as i32 {
                  if *p as libc::c_int == '\t' as i32 {
                    text_hole_delete(p, p, 0);
                  } else if *p as libc::c_int == ' ' as i32 {
                    j = 0;
                    while *p as libc::c_int == ' ' as i32 && j < (*ptr_to_globals).tabstop {
                      text_hole_delete(p, p, 0);
                      j += 1
                    }
                  }
                } else if c == '>' as i32 {
                  char_insert(p, '\t' as i32 as libc::c_char, 1i32);
                }
                i -= 1;
                p = next_line(p)
              }
              (*ptr_to_globals).dot = find_line(cnt);
              dot_skip_over_ws();
              end_cmd_q();
              current_block = 15129665204879337069;
            }
            17725350714912028156 => {
              p = get_input_line(b":\x00" as *const u8 as *const libc::c_char);
              colon(p);
              current_block = 15129665204879337069;
            }
            14526470074083880812 => {
              q = char_search(
                (*ptr_to_globals).dot,
                b"\n\n\x00" as *const u8 as *const libc::c_char,
                (FORWARD as libc::c_int) << 1i32 | FULL as libc::c_int,
              );
              if !q.is_null() {
                (*ptr_to_globals).dot = next_line(q)
              }
              current_block = 15129665204879337069;
            }
            8893187391306414141 => {
              q = char_search(
                (*ptr_to_globals).dot,
                b"\n\n\x00" as *const u8 as *const libc::c_char,
                ((BACK as libc::c_int as libc::c_uint) << 1i32
                  | FULL as libc::c_int as libc::c_uint) as libc::c_int,
              );
              if !q.is_null() {
                (*ptr_to_globals).dot = next_line(q)
              }
              current_block = 15129665204879337069;
            }
            7021673758293221412 => {
              dir = BACK as libc::c_int;
              p = (*ptr_to_globals).dot.offset(-1);
              if *(*ptr_to_globals).last_search_pattern.offset(0) as libc::c_int == '?' as i32 {
                dir = FORWARD as libc::c_int;
                p = (*ptr_to_globals).dot.offset(1)
              }
              current_block = 4166979493554389389;
            }
            18374191879090272823 => {
              buf[0] = c as libc::c_char;
              buf[1] = '\u{0}' as i32 as libc::c_char;
              q = get_input_line(buf.as_mut_ptr());
              if *q.offset(0) as libc::c_int != 0 && *q.offset(1) == 0 {
                if *(*ptr_to_globals).last_search_pattern.offset(0) != 0 {
                  *(*ptr_to_globals).last_search_pattern.offset(0) = c as libc::c_char
                }
                current_block = 7392824444931029276;
              } else if *q.offset(0) != 0 {
                free((*ptr_to_globals).last_search_pattern as *mut libc::c_void);
                (*ptr_to_globals).last_search_pattern = crate::libbb::xfuncs_printf::xstrdup(q);
                current_block = 7392824444931029276;
              } else {
                current_block = 15129665204879337069;
              }
            }
            16407828456666301883 => {
              if (*ptr_to_globals).last_forward_char == 0 {
                current_block = 15129665204879337069;
              } else {
                loop {
                  q = (*ptr_to_globals).dot.offset(-1);
                  while q >= (*ptr_to_globals).text
                    && *q as libc::c_int != '\n' as i32
                    && *q as libc::c_int != (*ptr_to_globals).last_forward_char
                  {
                    q = q.offset(-1)
                  }
                  if q >= (*ptr_to_globals).text
                    && *q as libc::c_int == (*ptr_to_globals).last_forward_char
                  {
                    (*ptr_to_globals).dot = q
                  }
                  (*ptr_to_globals).cmdcnt -= 1;
                  if !((*ptr_to_globals).cmdcnt > 0) {
                    break;
                  }
                }
                current_block = 15129665204879337069;
              }
            }
            9018432604062702004 => {
              q = (*ptr_to_globals).dot;
              while q < (*ptr_to_globals).end && *q as libc::c_int != '\n' as i32 {
                if !strchr(
                  b"()[]{}\x00" as *const u8 as *const libc::c_char,
                  *q as libc::c_int,
                )
                .is_null()
                {
                  p = find_pair(q, *q);
                  if p.is_null() {
                    indicate_error();
                  } else {
                    (*ptr_to_globals).dot = p
                  }
                  break;
                } else {
                  q = q.offset(1)
                }
              }
              if *q as libc::c_int == '\n' as i32 {
                indicate_error();
              }
              current_block = 15129665204879337069;
            }
            10247103787464459848 => {
              p = (*ptr_to_globals).reg[(*ptr_to_globals).YDreg as usize];
              if p.is_null() {
                status_line_bold(
                  b"Nothing in register %c\x00" as *const u8 as *const libc::c_char,
                  what_reg() as libc::c_int,
                );
              } else {
                if !strchr(p, '\n' as i32).is_null() {
                  if c == 'P' as i32 {
                    dot_begin();
                  }
                  if c == 'p' as i32 {
                    if end_line((*ptr_to_globals).dot) == (*ptr_to_globals).end.offset(-1) {
                      (*ptr_to_globals).dot = (*ptr_to_globals).end
                    } else {
                      dot_next();
                    }
                  }
                } else if c == 'p' as i32 {
                  dot_right();
                }
                string_insert((*ptr_to_globals).dot, p, 1i32);
                end_cmd_q();
              }
              current_block = 15129665204879337069;
            }
            15260732871948875843 => {
              c1 = (get_one_char() | 0x20i32) - 'a' as i32;
              if c1 as libc::c_uint <= 25i32 as libc::c_uint {
                (*ptr_to_globals).mark[c1 as usize] = (*ptr_to_globals).dot
              } else {
                indicate_error();
              }
              current_block = 15129665204879337069;
            }
            12738322036487086035 => {
              c1 = get_one_char() | 0x20i32;
              if (c1 - 'a' as i32) as libc::c_uint <= 25i32 as libc::c_uint {
                c1 = c1 - 'a' as i32;
                q = (*ptr_to_globals).mark[c1 as usize];
                if (*ptr_to_globals).text <= q && q < (*ptr_to_globals).end {
                  (*ptr_to_globals).dot = q;
                  dot_begin();
                  dot_skip_over_ws();
                }
              } else if c1 == '\'' as i32 {
                (*ptr_to_globals).dot = swap_context((*ptr_to_globals).dot);
                dot_begin();
                dot_skip_over_ws();
              } else {
                indicate_error();
              }
              current_block = 15129665204879337069;
            }
            13255096073384561358 => {
              c1 = (get_one_char() | 0x20i32) - 'a' as i32;
              if c1 as libc::c_uint <= 25i32 as libc::c_uint {
                (*ptr_to_globals).YDreg = c1 as smalluint
              } else {
                indicate_error();
              }
              current_block = 15129665204879337069;
            }
            10258711639984089377 => {
              if (*ptr_to_globals).cmd_mode as libc::c_int == 0 {
                indicate_error();
              }
              (*ptr_to_globals).cmd_mode = 0 as smallint;
              undo_queue_commit();
              end_cmd_q();
              (*ptr_to_globals).last_status_cksum = 0;
              current_block = 15129665204879337069;
            }
            11439127087547047736 => {
              buf[0] = c as libc::c_char;
              buf[1] = '\u{0}' as i32 as libc::c_char;
              not_implemented(buf.as_mut_ptr());
              end_cmd_q();
              current_block = 17440971994642376514;
            }
            7961798899781870241 => {
              dot_scroll(
                (*ptr_to_globals).rows.wrapping_sub(2i32 as libc::c_uint) as libc::c_int,
                -1i32,
              );
              current_block = 15129665204879337069;
            }
            9426343755402444879 => {
              dot_scroll(
                (*ptr_to_globals)
                  .rows
                  .wrapping_sub(2i32 as libc::c_uint)
                  .wrapping_div(2i32 as libc::c_uint) as libc::c_int,
                1i32,
              );
              current_block = 15129665204879337069;
            }
            13352459794680105913 => {
              dot_scroll(1i32, 1i32);
              current_block = 15129665204879337069;
            }
            14142272253464333006 => {
              dot_scroll(
                (*ptr_to_globals).rows.wrapping_sub(2i32 as libc::c_uint) as libc::c_int,
                1i32,
              );
              current_block = 15129665204879337069;
            }
            10758177197742640066 => {
              (*ptr_to_globals).last_status_cksum = 0;
              current_block = 15129665204879337069;
            }
            6152256259730122749 => {
              current_block = 7534742345255184552;
            }
            12883932598258173301 => {
              current_block = 8800996768013373992;
            }
            11242998110520238401 => {
              redraw(1i32);
              current_block = 15129665204879337069;
            }
            13619733043935729992 => {
              loop {
                dot_next();
                dot_skip_over_ws();
                (*ptr_to_globals).cmdcnt -= 1;
                if !((*ptr_to_globals).cmdcnt > 0) {
                  break;
                }
              }
              current_block = 15129665204879337069;
            }
            9339065157412720613 => {
              dot_scroll(
                (*ptr_to_globals)
                  .rows
                  .wrapping_sub(2i32 as libc::c_uint)
                  .wrapping_div(2i32 as libc::c_uint) as libc::c_int,
                -1i32,
              );
              current_block = 15129665204879337069;
            }
            11447082683497798022 => {
              dot_scroll(1i32, -1i32);
              current_block = 15129665204879337069;
            }
            5182000506326660482 => {
              current_block = 13993698454868426881;
            }
            1105010766850597332 => {
              if !(*ptr_to_globals).reg[27].is_null() {
                p = begin_line((*ptr_to_globals).dot);
                q = end_line((*ptr_to_globals).dot);
                p = text_hole_delete(p, q, 1i32);
                p = p.offset(string_insert(p, (*ptr_to_globals).reg[27], 2i32) as isize);
                (*ptr_to_globals).dot = p;
                dot_skip_over_ws();
              }
              current_block = 15129665204879337069;
            }
            8616046655533110204 => {
              undo_pop();
              current_block = 15129665204879337069;
            }
            5127767458142431603 => {
              loop {
                (*ptr_to_globals).dot = end_line((*ptr_to_globals).dot);
                (*ptr_to_globals).cmdcnt -= 1;
                if (*ptr_to_globals).cmdcnt <= 0 {
                  break;
                }
                dot_next();
              }
              current_block = 15129665204879337069;
            }
            222014967776118151 => {
              (*ptr_to_globals).last_forward_char = get_one_char();
              current_block = 7856905509180742666;
            }
            11209792479411604110 => {
              loop {
                dot_prev();
                dot_skip_over_ws();
                (*ptr_to_globals).cmdcnt -= 1;
                if !((*ptr_to_globals).cmdcnt > 0) {
                  break;
                }
              }
              current_block = 15129665204879337069;
            }
            3364823792826654116 => {
              if (*ptr_to_globals).lmc_len != 0 {
                (*ptr_to_globals).ioq_start = crate::libbb::xfuncs_printf::xstrndup(
                  (*ptr_to_globals).last_modifying_cmd.as_mut_ptr(),
                  (*ptr_to_globals).lmc_len,
                );
                (*ptr_to_globals).ioq = (*ptr_to_globals).ioq_start
              }
              current_block = 15129665204879337069;
            }
            18096603330221575131 => {
              current_block = 17498168302144015873;
            }
            16891123271837848903 => {
              dot_end();
              current_block = 1752638907092016026;
            }
            8517235759107662071 => {
              current_block = 5847749760081351726;
            }
            12525254419223051704 => {
              if (*ptr_to_globals).dot < (*ptr_to_globals).end.offset(-1) {
                (*ptr_to_globals).dot = yank_delete(
                  (*ptr_to_globals).dot,
                  (*ptr_to_globals).dot,
                  1i32,
                  YANKDEL as libc::c_int,
                  1i32,
                )
              }
              current_block = 15129665204879337069;
            }
            15232911949322867522 => {
              current_block = 17251831742223396249;
            }
            10863374208794025069 => {
              current_block = 1895262434596074581;
            }
            451126677064669119 => {
              loop {
                dot_prev();
                (*ptr_to_globals).dot = move_to_col(
                  (*ptr_to_globals).dot,
                  (*ptr_to_globals).ccol + (*ptr_to_globals).offset,
                );
                (*ptr_to_globals).cmdcnt -= 1;
                if !((*ptr_to_globals).cmdcnt > 0) {
                  break;
                }
              }
              current_block = 15129665204879337069;
            }
            4611735929166613116 => {
              loop {
                if bb_ascii_isalnum(*(*ptr_to_globals).dot as libc::c_uchar) != 0
                  || *(*ptr_to_globals).dot as libc::c_int == '_' as i32
                {
                  (*ptr_to_globals).dot = skip_thing(
                    (*ptr_to_globals).dot,
                    1i32,
                    FORWARD as libc::c_int,
                    S_END_ALNUM as libc::c_int,
                  )
                } else if *strchrnul(
                  b"!\"#$%&\'()*+,-./:;<=>?@[\\]^_`{|}~\x00" as *const u8 as *const libc::c_char,
                  *(*ptr_to_globals).dot as libc::c_int,
                )
                .offset(0)
                  != 0
                {
                  (*ptr_to_globals).dot = skip_thing(
                    (*ptr_to_globals).dot,
                    1i32,
                    FORWARD as libc::c_int,
                    S_END_PUNCT as libc::c_int,
                  )
                }
                if (*ptr_to_globals).dot < (*ptr_to_globals).end.offset(-1) {
                  (*ptr_to_globals).dot = (*ptr_to_globals).dot.offset(1)
                }
                if ({
                  let mut bb__isspace: libc::c_uchar =
                    (*(*ptr_to_globals).dot as libc::c_int - 9i32) as libc::c_uchar;
                  (bb__isspace as libc::c_int == ' ' as i32 - 9i32
                    || bb__isspace as libc::c_int <= 13i32 - 9i32) as libc::c_int
                }) != 0
                {
                  (*ptr_to_globals).dot = skip_thing(
                    (*ptr_to_globals).dot,
                    2i32,
                    FORWARD as libc::c_int,
                    S_OVER_WS as libc::c_int,
                  )
                }
                (*ptr_to_globals).cmdcnt -= 1;
                if !((*ptr_to_globals).cmdcnt > 0) {
                  break;
                }
              }
              current_block = 15129665204879337069;
            }
            4386451087681909888 => {
              (*ptr_to_globals).dot =
                move_to_col((*ptr_to_globals).dot, (*ptr_to_globals).cmdcnt - 1i32);
              current_block = 15129665204879337069;
            }
            1296397779060594135 => {
              dot_begin();
              current_block = 15129665204879337069;
            }
            _ => {}
          }
          match current_block {
            15129665204879337069 => {}
            8629930936610358348 => {}
            _ => {
              match current_block {
                17251831742223396249 => {
                  dir = 0;
                  if c == 'X' as i32 {
                    dir = -1i32
                  }
                  loop {
                    if *(*ptr_to_globals).dot.offset(dir as isize) as libc::c_int != '\n' as i32 {
                      if c == 'X' as i32 {
                        (*ptr_to_globals).dot = (*ptr_to_globals).dot.offset(-1)
                      }
                      (*ptr_to_globals).dot = yank_delete(
                        (*ptr_to_globals).dot,
                        (*ptr_to_globals).dot,
                        0,
                        YANKDEL as libc::c_int,
                        1i32,
                      )
                    }
                    (*ptr_to_globals).cmdcnt -= 1;
                    if !((*ptr_to_globals).cmdcnt > 0) {
                      break;
                    }
                  }
                  end_cmd_q();
                  if c == 's' as i32 {
                    current_block = 8629930936610358348;
                  } else {
                    current_block = 15129665204879337069;
                  }
                }
                2087484904894455135 => {
                  dot_end();
                  (*ptr_to_globals).dot =
                    char_insert((*ptr_to_globals).dot, '\n' as i32 as libc::c_char, 1i32);
                  current_block = 8629930936610358348;
                }
                11945623545738147997 => {
                  (*ptr_to_globals).dot = (*ptr_to_globals).end.offset(-1);
                  if (*ptr_to_globals).cmdcnt > 0 {
                    (*ptr_to_globals).dot = find_line((*ptr_to_globals).cmdcnt)
                  }
                  dot_skip_over_ws();
                  current_block = 15129665204879337069;
                }
                5847749760081351726 => {
                  dir = FORWARD as libc::c_int;
                  if c == 'B' as i32 {
                    dir = BACK as libc::c_int
                  }
                  loop {
                    if c == 'W' as i32
                      || ({
                        let mut bb__isspace: libc::c_uchar =
                          (*(*ptr_to_globals).dot.offset(dir as isize) as libc::c_int - 9i32)
                            as libc::c_uchar;
                        (bb__isspace as libc::c_int == ' ' as i32 - 9i32
                          || bb__isspace as libc::c_int <= 13i32 - 9i32)
                          as libc::c_int
                      }) != 0
                    {
                      (*ptr_to_globals).dot =
                        skip_thing((*ptr_to_globals).dot, 1i32, dir, S_TO_WS as libc::c_int);
                      (*ptr_to_globals).dot =
                        skip_thing((*ptr_to_globals).dot, 2i32, dir, S_OVER_WS as libc::c_int)
                    }
                    if c != 'W' as i32 {
                      (*ptr_to_globals).dot =
                        skip_thing((*ptr_to_globals).dot, 1i32, dir, S_BEFORE_WS as libc::c_int)
                    }
                    (*ptr_to_globals).cmdcnt -= 1;
                    if !((*ptr_to_globals).cmdcnt > 0) {
                      break;
                    }
                  }
                  current_block = 15129665204879337069;
                }
                17440971994642376514 => {
                  current_block = 15129665204879337069;
                }
                7534742345255184552 => {
                  current_block = 17247297260531395789;
                }
                8800996768013373992 => {
                  loop {
                    dot_next();
                    (*ptr_to_globals).dot = move_to_col(
                      (*ptr_to_globals).dot,
                      (*ptr_to_globals).ccol + (*ptr_to_globals).offset,
                    );
                    (*ptr_to_globals).cmdcnt -= 1;
                    if !((*ptr_to_globals).cmdcnt > 0) {
                      break;
                    }
                  }
                  current_block = 15129665204879337069;
                }
                13993698454868426881 => {
                  loop {
                    dot_right();
                    (*ptr_to_globals).cmdcnt -= 1;
                    if !((*ptr_to_globals).cmdcnt > 0) {
                      break;
                    }
                  }
                  current_block = 15129665204879337069;
                }
                7856905509180742666 => {
                  while !((*ptr_to_globals).last_forward_char == 0) {
                    q = (*ptr_to_globals).dot.offset(1);
                    while q < (*ptr_to_globals).end.offset(-1)
                      && *q as libc::c_int != '\n' as i32
                      && *q as libc::c_int != (*ptr_to_globals).last_forward_char
                    {
                      q = q.offset(1)
                    }
                    if *q as libc::c_int == (*ptr_to_globals).last_forward_char {
                      (*ptr_to_globals).dot = q
                    }
                    (*ptr_to_globals).cmdcnt -= 1;
                    if !((*ptr_to_globals).cmdcnt > 0) {
                      break;
                    }
                  }
                  current_block = 15129665204879337069;
                }
                17498168302144015873 => {
                  current_block = 8681395796513813967;
                }
                1752638907092016026 => {
                  if *(*ptr_to_globals).dot as libc::c_int != '\n' as i32 {
                    (*ptr_to_globals).dot = (*ptr_to_globals).dot.offset(1)
                  }
                  current_block = 8629930936610358348;
                }
                3268579060917229304 => {
                  current_block = 8629930936610358348;
                }
                1895262434596074581 => {
                  current_block = 8908416993177701018;
                }
                _ => {}
              }
              match current_block {
                8629930936610358348 => {}
                15129665204879337069 => {}
                _ => {
                  match current_block {
                    17247297260531395789 => {
                      loop {
                        dot_left();
                        (*ptr_to_globals).cmdcnt -= 1;
                        if !((*ptr_to_globals).cmdcnt > 0) {
                          break;
                        }
                      }
                      current_block = 15129665204879337069;
                    }
                    8681395796513813967 => {
                      current_block = 5591548203144509315;
                    }
                    8908416993177701018 => {
                      current_block = 16124761010012532485;
                    }
                    _ => {}
                  }
                  match current_block {
                    15129665204879337069 => {}
                    _ => {
                      match current_block {
                        16124761010012532485 => {
                          let mut yf: libc::c_int = 0;
                          let mut ml: libc::c_int = 0;
                          let mut whole: libc::c_int = 0;
                          yf = YANKDEL as libc::c_int;
                          if c == 'y' as i32 || c == 'Y' as i32 {
                            yf = YANKONLY as libc::c_int
                          }
                          c1 = 'y' as i32;
                          if c != 'Y' as i32 {
                            c1 = get_one_char()
                          }
                          ml = find_range(&mut p, &mut q, c1 as libc::c_char);
                          place_cursor(0i32, 0);
                          if c1 == 27i32 {
                            c1 = 27i32;
                            c = c1
                          } else if !strchr(b"wW\x00" as *const u8 as *const libc::c_char, c1)
                            .is_null()
                          {
                            ml = 0;
                            if c == 'c' as i32 {
                              while ({
                                let mut bb__isspace: libc::c_uchar =
                                  (*q as libc::c_int - 9i32) as libc::c_uchar;
                                (bb__isspace as libc::c_int == ' ' as i32 - 9i32
                                  || bb__isspace as libc::c_int <= 13i32 - 9i32)
                                  as libc::c_int
                              }) != 0
                                && q > p
                              {
                                q = q.offset(-1)
                              }
                            }
                            (*ptr_to_globals).dot = yank_delete(p, q, ml, yf, 1i32)
                          } else if !strchr(
                            b"^0bBeEft%$ lh\x08\x7f\x00" as *const u8 as *const libc::c_char,
                            c1,
                          )
                          .is_null()
                          {
                            (*ptr_to_globals).dot = yank_delete(p, q, ml, yf, 1i32)
                          } else if !strchr(
                            b"cdykjGHL+-{}\r\n\x00" as *const u8 as *const libc::c_char,
                            c1,
                          )
                          .is_null()
                          {
                            (*ptr_to_globals).dot = yank_delete(p, q, ml, yf, 1i32);
                            whole = 1i32
                          } else {
                            c1 = 27i32;
                            c = c1;
                            ml = 0;
                            indicate_error();
                          }
                          if ml != 0 && whole != 0 {
                            if c == 'c' as i32 {
                              (*ptr_to_globals).dot = char_insert(
                                (*ptr_to_globals).dot,
                                '\n' as i32 as libc::c_char,
                                2i32,
                              );
                              if whole != 0
                                && (*ptr_to_globals).dot != (*ptr_to_globals).end.offset(-1)
                              {
                                dot_prev();
                              }
                            } else if c == 'd' as i32 {
                              dot_begin();
                              dot_skip_over_ws();
                            }
                          }
                          if c1 != 27i32 {
                            if c == 'c' as i32 {
                              strcpy(
                                buf.as_mut_ptr(),
                                b"Change\x00" as *const u8 as *const libc::c_char,
                              );
                              current_block = 8629930936610358348;
                            } else {
                              if c == 'd' as i32 {
                                strcpy(
                                  buf.as_mut_ptr(),
                                  b"Delete\x00" as *const u8 as *const libc::c_char,
                                );
                              }
                              if c == 'y' as i32 || c == 'Y' as i32 {
                                strcpy(
                                  buf.as_mut_ptr(),
                                  b"Yank\x00" as *const u8 as *const libc::c_char,
                                );
                              }
                              p = (*ptr_to_globals).reg[(*ptr_to_globals).YDreg as usize];
                              q = p.offset(strlen(p) as isize);
                              cnt = 0;
                              while p <= q {
                                if *p as libc::c_int == '\n' as i32 {
                                  cnt += 1
                                }
                                p = p.offset(1)
                              }
                              status_line(
                                b"%s %u lines (%u chars) using [%c]\x00" as *const u8
                                  as *const libc::c_char,
                                buf.as_mut_ptr(),
                                cnt,
                                strlen((*ptr_to_globals).reg[(*ptr_to_globals).YDreg as usize])
                                  as libc::c_uint,
                                what_reg() as libc::c_int,
                              );
                              end_cmd_q();
                              current_block = 15129665204879337069;
                            }
                          } else {
                            current_block = 15129665204879337069;
                          }
                        }
                        5591548203144509315 => {
                          current_block = 2636677179867529885;
                        }
                        _ => {}
                      }
                      match current_block {
                        15129665204879337069 => {}
                        8629930936610358348 => {}
                        _ => {
                          match current_block {
                            2636677179867529885 => {
                              current_block = 12309206730560524281;
                            }
                            _ => {}
                          }
                          match current_block {
                            12309206730560524281 => {
                              current_block = 3325768110057758661;
                            }
                            _ => {}
                          }
                          match current_block {
                            3325768110057758661 => {
                              current_block = 14815832896553429982;
                            }
                            _ => {}
                          }
                          match current_block {
                            14815832896553429982 => {
                              current_block = 10731695520297161438;
                            }
                            _ => {}
                          }
                          match current_block {
                            10731695520297161438 => {
                              if c == '0' as i32 && (*ptr_to_globals).cmdcnt < 1i32 {
                                dot_begin();
                              } else {
                                (*ptr_to_globals).cmdcnt =
                                  (*ptr_to_globals).cmdcnt * 10i32 + (c - '0' as i32)
                              }
                              current_block = 15129665204879337069;
                            }
                            _ => {}
                          }
                          match current_block {
                            15129665204879337069 => {}
                            _ => {
                              loop {
                                match current_block {
                                  16813369756331276724 => {
                                    msg = std::ptr::null();
                                    current_block = 7392824444931029276;
                                  }
                                  7392824444931029276 => {
                                    dir = FORWARD as libc::c_int;
                                    p = (*ptr_to_globals).dot.offset(1);
                                    if *(*ptr_to_globals).last_search_pattern.offset(0)
                                      as libc::c_int
                                      == '?' as i32
                                    {
                                      dir = BACK as libc::c_int;
                                      p = (*ptr_to_globals).dot.offset(-1)
                                    }
                                    current_block = 4166979493554389389;
                                  }
                                  _ => {
                                    q = char_search(
                                      p,
                                      (*ptr_to_globals).last_search_pattern.offset(1),
                                      dir << 1i32 | FULL as libc::c_int,
                                    );
                                    if !q.is_null() {
                                      (*ptr_to_globals).dot = q;
                                      msg = std::ptr::null()
                                    } else {
                                      p = (*ptr_to_globals).text;
                                      if dir == BACK as libc::c_int {
                                        p = (*ptr_to_globals).end.offset(-1)
                                      }
                                      q = char_search(
                                        p,
                                        (*ptr_to_globals).last_search_pattern.offset(1),
                                        dir << 1i32 | FULL as libc::c_int,
                                      );
                                      if !q.is_null() {
                                        (*ptr_to_globals).dot = q;
                                        msg = b"search hit BOTTOM, continuing at TOP\x00"
                                          as *const u8
                                          as *const libc::c_char;
                                        if dir == BACK as libc::c_int {
                                          msg = b"search hit TOP, continuing at BOTTOM\x00"
                                            as *const u8
                                            as *const libc::c_char
                                        }
                                      } else {
                                        msg = b"Pattern not found\x00" as *const u8
                                          as *const libc::c_char
                                      }
                                    }
                                    if !msg.is_null() {
                                      status_line_bold(
                                        b"%s\x00" as *const u8 as *const libc::c_char,
                                        msg,
                                      );
                                    }
                                    (*ptr_to_globals).cmdcnt -= 1;
                                    if (*ptr_to_globals).cmdcnt > 0 {
                                      current_block = 16813369756331276724;
                                    } else {
                                      break;
                                    }
                                  }
                                }
                              }
                              current_block = 15129665204879337069;
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
        6 | -11 => {
          current_block = 14142272253464333006;
          match current_block {
            16992905640583886232 => {
              loop {
                if (*(*ptr_to_globals).dot as libc::c_int - 'a' as i32) as libc::c_uchar
                  as libc::c_int
                  <= 'z' as i32 - 'a' as i32
                {
                  undo_push(
                    (*ptr_to_globals).dot,
                    1i32 as libc::c_uint,
                    1i32 as libc::c_uchar,
                  );
                  *(*ptr_to_globals).dot =
                    bb_ascii_toupper(*(*ptr_to_globals).dot as libc::c_uchar) as libc::c_char;
                  undo_push(
                    (*ptr_to_globals).dot,
                    1i32 as libc::c_uint,
                    2i32 as libc::c_uchar,
                  );
                } else if (*(*ptr_to_globals).dot as libc::c_int - 'A' as i32) as libc::c_uchar
                  as libc::c_int
                  <= 'Z' as i32 - 'A' as i32
                {
                  undo_push(
                    (*ptr_to_globals).dot,
                    1i32 as libc::c_uint,
                    1i32 as libc::c_uchar,
                  );
                  *(*ptr_to_globals).dot =
                    bb_ascii_tolower(*(*ptr_to_globals).dot as libc::c_uchar) as libc::c_char;
                  undo_push(
                    (*ptr_to_globals).dot,
                    1i32 as libc::c_uint,
                    2i32 as libc::c_uchar,
                  );
                }
                dot_right();
                (*ptr_to_globals).cmdcnt -= 1;
                if !((*ptr_to_globals).cmdcnt > 0) {
                  break;
                }
              }
              end_cmd_q();
              current_block = 15129665204879337069;
            }
            8729655159604064397 => {
              c1 = get_one_char();
              cnt = 0;
              if c1 == '.' as i32 {
                cnt = (*ptr_to_globals)
                  .rows
                  .wrapping_sub(2i32 as libc::c_uint)
                  .wrapping_div(2i32 as libc::c_uint) as libc::c_int
              }
              if c1 == '-' as i32 {
                cnt = (*ptr_to_globals).rows.wrapping_sub(2i32 as libc::c_uint) as libc::c_int
              }
              (*ptr_to_globals).screenbegin = begin_line((*ptr_to_globals).dot);
              dot_scroll(cnt, -1i32);
              current_block = 15129665204879337069;
            }
            15899500648299942075 => {
              (*ptr_to_globals).last_forward_char = get_one_char();
              do_cmd(';' as i32);
              if *(*ptr_to_globals).dot as libc::c_int == (*ptr_to_globals).last_forward_char {
                dot_left();
              }
              (*ptr_to_globals).last_forward_char = 0;
              current_block = 15129665204879337069;
            }
            9051390181078481641 => {
              c1 = get_one_char();
              if *(*ptr_to_globals).dot as libc::c_int != '\n' as i32 {
                (*ptr_to_globals).dot =
                  text_hole_delete((*ptr_to_globals).dot, (*ptr_to_globals).dot, 1i32);
                (*ptr_to_globals).dot =
                  char_insert((*ptr_to_globals).dot, c1 as libc::c_char, 2i32);
                dot_left();
              }
              end_cmd_q();
              current_block = 15129665204879337069;
            }
            877115918601926659 => {
              dir = FORWARD as libc::c_int;
              if c == 'b' as i32 {
                dir = BACK as libc::c_int
              }
              while !((*ptr_to_globals).dot.offset(dir as isize) < (*ptr_to_globals).text
                || (*ptr_to_globals).dot.offset(dir as isize) > (*ptr_to_globals).end.offset(-1))
              {
                (*ptr_to_globals).dot = (*ptr_to_globals).dot.offset(dir as isize);
                if ({
                  let mut bb__isspace: libc::c_uchar =
                    (*(*ptr_to_globals).dot as libc::c_int - 9i32) as libc::c_uchar;
                  (bb__isspace as libc::c_int == ' ' as i32 - 9i32
                    || bb__isspace as libc::c_int <= 13i32 - 9i32) as libc::c_int
                }) != 0
                {
                  (*ptr_to_globals).dot = skip_thing(
                    (*ptr_to_globals).dot,
                    if c == 'e' as i32 { 2i32 } else { 1i32 },
                    dir,
                    S_OVER_WS as libc::c_int,
                  )
                }
                if bb_ascii_isalnum(*(*ptr_to_globals).dot as libc::c_uchar) != 0
                  || *(*ptr_to_globals).dot as libc::c_int == '_' as i32
                {
                  (*ptr_to_globals).dot =
                    skip_thing((*ptr_to_globals).dot, 1i32, dir, S_END_ALNUM as libc::c_int)
                } else if *strchrnul(
                  b"!\"#$%&\'()*+,-./:;<=>?@[\\]^_`{|}~\x00" as *const u8 as *const libc::c_char,
                  *(*ptr_to_globals).dot as libc::c_int,
                )
                .offset(0)
                  != 0
                {
                  (*ptr_to_globals).dot =
                    skip_thing((*ptr_to_globals).dot, 1i32, dir, S_END_PUNCT as libc::c_int)
                }
                (*ptr_to_globals).cmdcnt -= 1;
                if !((*ptr_to_globals).cmdcnt > 0) {
                  break;
                }
              }
              current_block = 15129665204879337069;
            }
            1085022737867179637 => {
              dot_begin();
              dot_skip_over_ws();
              current_block = 15129665204879337069;
            }
            3113147720494587438 => {
              c1 = get_one_char();
              if c1 != 'Z' as i32 {
                indicate_error();
              } else if (*ptr_to_globals).modified_count != 0 {
                if 1i32 != 0 && (*ptr_to_globals).readonly_mode as libc::c_int != 0 {
                  status_line_bold(
                    b"\'%s\' is read only\x00" as *const u8 as *const libc::c_char,
                    (*ptr_to_globals).current_filename,
                  );
                } else {
                  cnt = file_write(
                    (*ptr_to_globals).current_filename,
                    (*ptr_to_globals).text,
                    (*ptr_to_globals).end.offset(-1),
                  );
                  if cnt < 0 {
                    if cnt == -1i32 {
                      status_line_bold(b"Write error: %m\x00" as *const u8 as *const libc::c_char);
                    }
                  } else if cnt as libc::c_long
                    == (*ptr_to_globals)
                      .end
                      .offset(-1)
                      .wrapping_offset_from((*ptr_to_globals).text)
                      as libc::c_long
                      + 1
                  {
                    (*ptr_to_globals).editing = 0 as smallint
                  }
                }
              } else {
                (*ptr_to_globals).editing = 0 as smallint
              }
              current_block = 15129665204879337069;
            }
            12960118908218882441 => {
              p = begin_line((*ptr_to_globals).dot);
              if *p.offset(-1i32 as isize) as libc::c_int == '\n' as i32 {
                dot_prev();
                current_block = 2087484904894455135;
              } else {
                dot_begin();
                (*ptr_to_globals).dot =
                  char_insert((*ptr_to_globals).dot, '\n' as i32 as libc::c_char, 1i32);
                dot_prev();
                current_block = 8629930936610358348;
              }
            }
            8720450212473544924 => {
              (*ptr_to_globals).dot = (*ptr_to_globals).screenbegin;
              cnt = 0;
              while (cnt as libc::c_uint)
                < (*ptr_to_globals)
                  .rows
                  .wrapping_sub(1i32 as libc::c_uint)
                  .wrapping_div(2i32 as libc::c_uint)
              {
                (*ptr_to_globals).dot = next_line((*ptr_to_globals).dot);
                cnt += 1
              }
              current_block = 15129665204879337069;
            }
            13015277209715431090 => {
              (*ptr_to_globals).dot = end_screen();
              if (*ptr_to_globals).cmdcnt as libc::c_uint
                > (*ptr_to_globals).rows.wrapping_sub(1i32 as libc::c_uint)
              {
                (*ptr_to_globals).cmdcnt =
                  (*ptr_to_globals).rows.wrapping_sub(1i32 as libc::c_uint) as libc::c_int
              }
              (*ptr_to_globals).cmdcnt -= 1;
              if (*ptr_to_globals).cmdcnt > 0 {
                do_cmd('-' as i32);
              }
              dot_begin();
              dot_skip_over_ws();
              current_block = 15129665204879337069;
            }
            9800435767766781385 => {
              loop {
                dot_end();
                if (*ptr_to_globals).dot < (*ptr_to_globals).end.offset(-1) {
                  undo_push(
                    (*ptr_to_globals).dot,
                    1i32 as libc::c_uint,
                    1i32 as libc::c_uchar,
                  );
                  let fresh15 = (*ptr_to_globals).dot;
                  (*ptr_to_globals).dot = (*ptr_to_globals).dot.offset(1);
                  *fresh15 = ' ' as i32 as libc::c_char;
                  undo_push(
                    (*ptr_to_globals).dot.offset(-1),
                    1i32 as libc::c_uint,
                    2i32 as libc::c_uchar,
                  );
                  while ({
                    let mut bb__isblank: libc::c_uchar = *(*ptr_to_globals).dot as libc::c_uchar;
                    (bb__isblank as libc::c_int == ' ' as i32
                      || bb__isblank as libc::c_int == '\t' as i32)
                      as libc::c_int
                  }) != 0
                  {
                    text_hole_delete((*ptr_to_globals).dot, (*ptr_to_globals).dot, 2i32);
                  }
                }
                (*ptr_to_globals).cmdcnt -= 1;
                if !((*ptr_to_globals).cmdcnt > 0) {
                  break;
                }
              }
              end_cmd_q();
              current_block = 15129665204879337069;
            }
            3432363526595694666 => {
              dot_begin();
              dot_skip_over_ws();
              current_block = 3268579060917229304;
            }
            3494829253343353619 => {
              (*ptr_to_globals).dot = (*ptr_to_globals).screenbegin;
              if (*ptr_to_globals).cmdcnt as libc::c_uint
                > (*ptr_to_globals).rows.wrapping_sub(1i32 as libc::c_uint)
              {
                (*ptr_to_globals).cmdcnt =
                  (*ptr_to_globals).rows.wrapping_sub(1i32 as libc::c_uint) as libc::c_int
              }
              (*ptr_to_globals).cmdcnt -= 1;
              if (*ptr_to_globals).cmdcnt > 0 {
                do_cmd('+' as i32);
              }
              dot_skip_over_ws();
              current_block = 15129665204879337069;
            }
            17973101765331640574 => {
              c1 = get_one_char();
              if c1 != 'g' as i32 {
                buf[0] = 'g' as i32 as libc::c_char;
                buf[1] = if c1 >= 0 { c1 } else { '*' as i32 } as libc::c_char;
                buf[2] = '\u{0}' as i32 as libc::c_char;
                not_implemented(buf.as_mut_ptr());
                current_block = 15129665204879337069;
              } else {
                if (*ptr_to_globals).cmdcnt == 0 {
                  (*ptr_to_globals).cmdcnt = 1i32
                }
                current_block = 11945623545738147997;
              }
            }
            16546625800574160972 => {
              save_dot = (*ptr_to_globals).dot;
              (*ptr_to_globals).dot = dollar_line((*ptr_to_globals).dot);
              (*ptr_to_globals).dot = yank_delete(
                save_dot,
                (*ptr_to_globals).dot,
                0,
                YANKDEL as libc::c_int,
                1i32,
              );
              if c == 'C' as i32 {
                current_block = 8629930936610358348;
              } else {
                if c == 'D' as i32 {
                  end_cmd_q();
                }
                current_block = 15129665204879337069;
              }
            }
            11937696639986586685 => {
              cnt = count_lines((*ptr_to_globals).text, (*ptr_to_globals).dot);
              c1 = get_one_char();
              find_range(&mut p, &mut q, c1 as libc::c_char);
              yank_delete(p, q, 1i32, YANKONLY as libc::c_int, 0);
              p = begin_line(p);
              q = end_line(q);
              i = count_lines(p, q);
              while i > 0 {
                if c == '<' as i32 {
                  if *p as libc::c_int == '\t' as i32 {
                    text_hole_delete(p, p, 0);
                  } else if *p as libc::c_int == ' ' as i32 {
                    j = 0;
                    while *p as libc::c_int == ' ' as i32 && j < (*ptr_to_globals).tabstop {
                      text_hole_delete(p, p, 0);
                      j += 1
                    }
                  }
                } else if c == '>' as i32 {
                  char_insert(p, '\t' as i32 as libc::c_char, 1i32);
                }
                i -= 1;
                p = next_line(p)
              }
              (*ptr_to_globals).dot = find_line(cnt);
              dot_skip_over_ws();
              end_cmd_q();
              current_block = 15129665204879337069;
            }
            17725350714912028156 => {
              p = get_input_line(b":\x00" as *const u8 as *const libc::c_char);
              colon(p);
              current_block = 15129665204879337069;
            }
            14526470074083880812 => {
              q = char_search(
                (*ptr_to_globals).dot,
                b"\n\n\x00" as *const u8 as *const libc::c_char,
                (FORWARD as libc::c_int) << 1i32 | FULL as libc::c_int,
              );
              if !q.is_null() {
                (*ptr_to_globals).dot = next_line(q)
              }
              current_block = 15129665204879337069;
            }
            8893187391306414141 => {
              q = char_search(
                (*ptr_to_globals).dot,
                b"\n\n\x00" as *const u8 as *const libc::c_char,
                ((BACK as libc::c_int as libc::c_uint) << 1i32
                  | FULL as libc::c_int as libc::c_uint) as libc::c_int,
              );
              if !q.is_null() {
                (*ptr_to_globals).dot = next_line(q)
              }
              current_block = 15129665204879337069;
            }
            7021673758293221412 => {
              dir = BACK as libc::c_int;
              p = (*ptr_to_globals).dot.offset(-1);
              if *(*ptr_to_globals).last_search_pattern.offset(0) as libc::c_int == '?' as i32 {
                dir = FORWARD as libc::c_int;
                p = (*ptr_to_globals).dot.offset(1)
              }
              current_block = 4166979493554389389;
            }
            18374191879090272823 => {
              buf[0] = c as libc::c_char;
              buf[1] = '\u{0}' as i32 as libc::c_char;
              q = get_input_line(buf.as_mut_ptr());
              if *q.offset(0) as libc::c_int != 0 && *q.offset(1) == 0 {
                if *(*ptr_to_globals).last_search_pattern.offset(0) != 0 {
                  *(*ptr_to_globals).last_search_pattern.offset(0) = c as libc::c_char
                }
                current_block = 7392824444931029276;
              } else if *q.offset(0) != 0 {
                free((*ptr_to_globals).last_search_pattern as *mut libc::c_void);
                (*ptr_to_globals).last_search_pattern = crate::libbb::xfuncs_printf::xstrdup(q);
                current_block = 7392824444931029276;
              } else {
                current_block = 15129665204879337069;
              }
            }
            16407828456666301883 => {
              if (*ptr_to_globals).last_forward_char == 0 {
                current_block = 15129665204879337069;
              } else {
                loop {
                  q = (*ptr_to_globals).dot.offset(-1);
                  while q >= (*ptr_to_globals).text
                    && *q as libc::c_int != '\n' as i32
                    && *q as libc::c_int != (*ptr_to_globals).last_forward_char
                  {
                    q = q.offset(-1)
                  }
                  if q >= (*ptr_to_globals).text
                    && *q as libc::c_int == (*ptr_to_globals).last_forward_char
                  {
                    (*ptr_to_globals).dot = q
                  }
                  (*ptr_to_globals).cmdcnt -= 1;
                  if !((*ptr_to_globals).cmdcnt > 0) {
                    break;
                  }
                }
                current_block = 15129665204879337069;
              }
            }
            9018432604062702004 => {
              q = (*ptr_to_globals).dot;
              while q < (*ptr_to_globals).end && *q as libc::c_int != '\n' as i32 {
                if !strchr(
                  b"()[]{}\x00" as *const u8 as *const libc::c_char,
                  *q as libc::c_int,
                )
                .is_null()
                {
                  p = find_pair(q, *q);
                  if p.is_null() {
                    indicate_error();
                  } else {
                    (*ptr_to_globals).dot = p
                  }
                  break;
                } else {
                  q = q.offset(1)
                }
              }
              if *q as libc::c_int == '\n' as i32 {
                indicate_error();
              }
              current_block = 15129665204879337069;
            }
            10247103787464459848 => {
              p = (*ptr_to_globals).reg[(*ptr_to_globals).YDreg as usize];
              if p.is_null() {
                status_line_bold(
                  b"Nothing in register %c\x00" as *const u8 as *const libc::c_char,
                  what_reg() as libc::c_int,
                );
              } else {
                if !strchr(p, '\n' as i32).is_null() {
                  if c == 'P' as i32 {
                    dot_begin();
                  }
                  if c == 'p' as i32 {
                    if end_line((*ptr_to_globals).dot) == (*ptr_to_globals).end.offset(-1) {
                      (*ptr_to_globals).dot = (*ptr_to_globals).end
                    } else {
                      dot_next();
                    }
                  }
                } else if c == 'p' as i32 {
                  dot_right();
                }
                string_insert((*ptr_to_globals).dot, p, 1i32);
                end_cmd_q();
              }
              current_block = 15129665204879337069;
            }
            15260732871948875843 => {
              c1 = (get_one_char() | 0x20i32) - 'a' as i32;
              if c1 as libc::c_uint <= 25i32 as libc::c_uint {
                (*ptr_to_globals).mark[c1 as usize] = (*ptr_to_globals).dot
              } else {
                indicate_error();
              }
              current_block = 15129665204879337069;
            }
            12738322036487086035 => {
              c1 = get_one_char() | 0x20i32;
              if (c1 - 'a' as i32) as libc::c_uint <= 25i32 as libc::c_uint {
                c1 = c1 - 'a' as i32;
                q = (*ptr_to_globals).mark[c1 as usize];
                if (*ptr_to_globals).text <= q && q < (*ptr_to_globals).end {
                  (*ptr_to_globals).dot = q;
                  dot_begin();
                  dot_skip_over_ws();
                }
              } else if c1 == '\'' as i32 {
                (*ptr_to_globals).dot = swap_context((*ptr_to_globals).dot);
                dot_begin();
                dot_skip_over_ws();
              } else {
                indicate_error();
              }
              current_block = 15129665204879337069;
            }
            13255096073384561358 => {
              c1 = (get_one_char() | 0x20i32) - 'a' as i32;
              if c1 as libc::c_uint <= 25i32 as libc::c_uint {
                (*ptr_to_globals).YDreg = c1 as smalluint
              } else {
                indicate_error();
              }
              current_block = 15129665204879337069;
            }
            10258711639984089377 => {
              if (*ptr_to_globals).cmd_mode as libc::c_int == 0 {
                indicate_error();
              }
              (*ptr_to_globals).cmd_mode = 0 as smallint;
              undo_queue_commit();
              end_cmd_q();
              (*ptr_to_globals).last_status_cksum = 0;
              current_block = 15129665204879337069;
            }
            11439127087547047736 => {
              buf[0] = c as libc::c_char;
              buf[1] = '\u{0}' as i32 as libc::c_char;
              not_implemented(buf.as_mut_ptr());
              end_cmd_q();
              current_block = 17440971994642376514;
            }
            7961798899781870241 => {
              dot_scroll(
                (*ptr_to_globals).rows.wrapping_sub(2i32 as libc::c_uint) as libc::c_int,
                -1i32,
              );
              current_block = 15129665204879337069;
            }
            9426343755402444879 => {
              dot_scroll(
                (*ptr_to_globals)
                  .rows
                  .wrapping_sub(2i32 as libc::c_uint)
                  .wrapping_div(2i32 as libc::c_uint) as libc::c_int,
                1i32,
              );
              current_block = 15129665204879337069;
            }
            13352459794680105913 => {
              dot_scroll(1i32, 1i32);
              current_block = 15129665204879337069;
            }
            14142272253464333006 => {
              dot_scroll(
                (*ptr_to_globals).rows.wrapping_sub(2i32 as libc::c_uint) as libc::c_int,
                1i32,
              );
              current_block = 15129665204879337069;
            }
            10758177197742640066 => {
              (*ptr_to_globals).last_status_cksum = 0;
              current_block = 15129665204879337069;
            }
            6152256259730122749 => {
              current_block = 7534742345255184552;
            }
            12883932598258173301 => {
              current_block = 8800996768013373992;
            }
            11242998110520238401 => {
              redraw(1i32);
              current_block = 15129665204879337069;
            }
            13619733043935729992 => {
              loop {
                dot_next();
                dot_skip_over_ws();
                (*ptr_to_globals).cmdcnt -= 1;
                if !((*ptr_to_globals).cmdcnt > 0) {
                  break;
                }
              }
              current_block = 15129665204879337069;
            }
            9339065157412720613 => {
              dot_scroll(
                (*ptr_to_globals)
                  .rows
                  .wrapping_sub(2i32 as libc::c_uint)
                  .wrapping_div(2i32 as libc::c_uint) as libc::c_int,
                -1i32,
              );
              current_block = 15129665204879337069;
            }
            11447082683497798022 => {
              dot_scroll(1i32, -1i32);
              current_block = 15129665204879337069;
            }
            5182000506326660482 => {
              current_block = 13993698454868426881;
            }
            1105010766850597332 => {
              if !(*ptr_to_globals).reg[27].is_null() {
                p = begin_line((*ptr_to_globals).dot);
                q = end_line((*ptr_to_globals).dot);
                p = text_hole_delete(p, q, 1i32);
                p = p.offset(string_insert(p, (*ptr_to_globals).reg[27], 2i32) as isize);
                (*ptr_to_globals).dot = p;
                dot_skip_over_ws();
              }
              current_block = 15129665204879337069;
            }
            8616046655533110204 => {
              undo_pop();
              current_block = 15129665204879337069;
            }
            5127767458142431603 => {
              loop {
                (*ptr_to_globals).dot = end_line((*ptr_to_globals).dot);
                (*ptr_to_globals).cmdcnt -= 1;
                if (*ptr_to_globals).cmdcnt <= 0 {
                  break;
                }
                dot_next();
              }
              current_block = 15129665204879337069;
            }
            222014967776118151 => {
              (*ptr_to_globals).last_forward_char = get_one_char();
              current_block = 7856905509180742666;
            }
            11209792479411604110 => {
              loop {
                dot_prev();
                dot_skip_over_ws();
                (*ptr_to_globals).cmdcnt -= 1;
                if !((*ptr_to_globals).cmdcnt > 0) {
                  break;
                }
              }
              current_block = 15129665204879337069;
            }
            3364823792826654116 => {
              if (*ptr_to_globals).lmc_len != 0 {
                (*ptr_to_globals).ioq_start = crate::libbb::xfuncs_printf::xstrndup(
                  (*ptr_to_globals).last_modifying_cmd.as_mut_ptr(),
                  (*ptr_to_globals).lmc_len,
                );
                (*ptr_to_globals).ioq = (*ptr_to_globals).ioq_start
              }
              current_block = 15129665204879337069;
            }
            18096603330221575131 => {
              current_block = 17498168302144015873;
            }
            16891123271837848903 => {
              dot_end();
              current_block = 1752638907092016026;
            }
            8517235759107662071 => {
              current_block = 5847749760081351726;
            }
            12525254419223051704 => {
              if (*ptr_to_globals).dot < (*ptr_to_globals).end.offset(-1) {
                (*ptr_to_globals).dot = yank_delete(
                  (*ptr_to_globals).dot,
                  (*ptr_to_globals).dot,
                  1i32,
                  YANKDEL as libc::c_int,
                  1i32,
                )
              }
              current_block = 15129665204879337069;
            }
            15232911949322867522 => {
              current_block = 17251831742223396249;
            }
            10863374208794025069 => {
              current_block = 1895262434596074581;
            }
            451126677064669119 => {
              loop {
                dot_prev();
                (*ptr_to_globals).dot = move_to_col(
                  (*ptr_to_globals).dot,
                  (*ptr_to_globals).ccol + (*ptr_to_globals).offset,
                );
                (*ptr_to_globals).cmdcnt -= 1;
                if !((*ptr_to_globals).cmdcnt > 0) {
                  break;
                }
              }
              current_block = 15129665204879337069;
            }
            4611735929166613116 => {
              loop {
                if bb_ascii_isalnum(*(*ptr_to_globals).dot as libc::c_uchar) != 0
                  || *(*ptr_to_globals).dot as libc::c_int == '_' as i32
                {
                  (*ptr_to_globals).dot = skip_thing(
                    (*ptr_to_globals).dot,
                    1i32,
                    FORWARD as libc::c_int,
                    S_END_ALNUM as libc::c_int,
                  )
                } else if *strchrnul(
                  b"!\"#$%&\'()*+,-./:;<=>?@[\\]^_`{|}~\x00" as *const u8 as *const libc::c_char,
                  *(*ptr_to_globals).dot as libc::c_int,
                )
                .offset(0)
                  != 0
                {
                  (*ptr_to_globals).dot = skip_thing(
                    (*ptr_to_globals).dot,
                    1i32,
                    FORWARD as libc::c_int,
                    S_END_PUNCT as libc::c_int,
                  )
                }
                if (*ptr_to_globals).dot < (*ptr_to_globals).end.offset(-1) {
                  (*ptr_to_globals).dot = (*ptr_to_globals).dot.offset(1)
                }
                if ({
                  let mut bb__isspace: libc::c_uchar =
                    (*(*ptr_to_globals).dot as libc::c_int - 9i32) as libc::c_uchar;
                  (bb__isspace as libc::c_int == ' ' as i32 - 9i32
                    || bb__isspace as libc::c_int <= 13i32 - 9i32) as libc::c_int
                }) != 0
                {
                  (*ptr_to_globals).dot = skip_thing(
                    (*ptr_to_globals).dot,
                    2i32,
                    FORWARD as libc::c_int,
                    S_OVER_WS as libc::c_int,
                  )
                }
                (*ptr_to_globals).cmdcnt -= 1;
                if !((*ptr_to_globals).cmdcnt > 0) {
                  break;
                }
              }
              current_block = 15129665204879337069;
            }
            4386451087681909888 => {
              (*ptr_to_globals).dot =
                move_to_col((*ptr_to_globals).dot, (*ptr_to_globals).cmdcnt - 1i32);
              current_block = 15129665204879337069;
            }
            1296397779060594135 => {
              dot_begin();
              current_block = 15129665204879337069;
            }
            _ => {}
          }
          match current_block {
            15129665204879337069 => {}
            8629930936610358348 => {}
            _ => {
              match current_block {
                17251831742223396249 => {
                  dir = 0;
                  if c == 'X' as i32 {
                    dir = -1i32
                  }
                  loop {
                    if *(*ptr_to_globals).dot.offset(dir as isize) as libc::c_int != '\n' as i32 {
                      if c == 'X' as i32 {
                        (*ptr_to_globals).dot = (*ptr_to_globals).dot.offset(-1)
                      }
                      (*ptr_to_globals).dot = yank_delete(
                        (*ptr_to_globals).dot,
                        (*ptr_to_globals).dot,
                        0,
                        YANKDEL as libc::c_int,
                        1i32,
                      )
                    }
                    (*ptr_to_globals).cmdcnt -= 1;
                    if !((*ptr_to_globals).cmdcnt > 0) {
                      break;
                    }
                  }
                  end_cmd_q();
                  if c == 's' as i32 {
                    current_block = 8629930936610358348;
                  } else {
                    current_block = 15129665204879337069;
                  }
                }
                2087484904894455135 => {
                  dot_end();
                  (*ptr_to_globals).dot =
                    char_insert((*ptr_to_globals).dot, '\n' as i32 as libc::c_char, 1i32);
                  current_block = 8629930936610358348;
                }
                11945623545738147997 => {
                  (*ptr_to_globals).dot = (*ptr_to_globals).end.offset(-1);
                  if (*ptr_to_globals).cmdcnt > 0 {
                    (*ptr_to_globals).dot = find_line((*ptr_to_globals).cmdcnt)
                  }
                  dot_skip_over_ws();
                  current_block = 15129665204879337069;
                }
                5847749760081351726 => {
                  dir = FORWARD as libc::c_int;
                  if c == 'B' as i32 {
                    dir = BACK as libc::c_int
                  }
                  loop {
                    if c == 'W' as i32
                      || ({
                        let mut bb__isspace: libc::c_uchar =
                          (*(*ptr_to_globals).dot.offset(dir as isize) as libc::c_int - 9i32)
                            as libc::c_uchar;
                        (bb__isspace as libc::c_int == ' ' as i32 - 9i32
                          || bb__isspace as libc::c_int <= 13i32 - 9i32)
                          as libc::c_int
                      }) != 0
                    {
                      (*ptr_to_globals).dot =
                        skip_thing((*ptr_to_globals).dot, 1i32, dir, S_TO_WS as libc::c_int);
                      (*ptr_to_globals).dot =
                        skip_thing((*ptr_to_globals).dot, 2i32, dir, S_OVER_WS as libc::c_int)
                    }
                    if c != 'W' as i32 {
                      (*ptr_to_globals).dot =
                        skip_thing((*ptr_to_globals).dot, 1i32, dir, S_BEFORE_WS as libc::c_int)
                    }
                    (*ptr_to_globals).cmdcnt -= 1;
                    if !((*ptr_to_globals).cmdcnt > 0) {
                      break;
                    }
                  }
                  current_block = 15129665204879337069;
                }
                17440971994642376514 => {
                  current_block = 15129665204879337069;
                }
                7534742345255184552 => {
                  current_block = 17247297260531395789;
                }
                8800996768013373992 => {
                  loop {
                    dot_next();
                    (*ptr_to_globals).dot = move_to_col(
                      (*ptr_to_globals).dot,
                      (*ptr_to_globals).ccol + (*ptr_to_globals).offset,
                    );
                    (*ptr_to_globals).cmdcnt -= 1;
                    if !((*ptr_to_globals).cmdcnt > 0) {
                      break;
                    }
                  }
                  current_block = 15129665204879337069;
                }
                13993698454868426881 => {
                  loop {
                    dot_right();
                    (*ptr_to_globals).cmdcnt -= 1;
                    if !((*ptr_to_globals).cmdcnt > 0) {
                      break;
                    }
                  }
                  current_block = 15129665204879337069;
                }
                7856905509180742666 => {
                  while !((*ptr_to_globals).last_forward_char == 0) {
                    q = (*ptr_to_globals).dot.offset(1);
                    while q < (*ptr_to_globals).end.offset(-1)
                      && *q as libc::c_int != '\n' as i32
                      && *q as libc::c_int != (*ptr_to_globals).last_forward_char
                    {
                      q = q.offset(1)
                    }
                    if *q as libc::c_int == (*ptr_to_globals).last_forward_char {
                      (*ptr_to_globals).dot = q
                    }
                    (*ptr_to_globals).cmdcnt -= 1;
                    if !((*ptr_to_globals).cmdcnt > 0) {
                      break;
                    }
                  }
                  current_block = 15129665204879337069;
                }
                17498168302144015873 => {
                  current_block = 8681395796513813967;
                }
                1752638907092016026 => {
                  if *(*ptr_to_globals).dot as libc::c_int != '\n' as i32 {
                    (*ptr_to_globals).dot = (*ptr_to_globals).dot.offset(1)
                  }
                  current_block = 8629930936610358348;
                }
                3268579060917229304 => {
                  current_block = 8629930936610358348;
                }
                1895262434596074581 => {
                  current_block = 8908416993177701018;
                }
                _ => {}
              }
              match current_block {
                8629930936610358348 => {}
                15129665204879337069 => {}
                _ => {
                  match current_block {
                    17247297260531395789 => {
                      loop {
                        dot_left();
                        (*ptr_to_globals).cmdcnt -= 1;
                        if !((*ptr_to_globals).cmdcnt > 0) {
                          break;
                        }
                      }
                      current_block = 15129665204879337069;
                    }
                    8681395796513813967 => {
                      current_block = 5591548203144509315;
                    }
                    8908416993177701018 => {
                      current_block = 16124761010012532485;
                    }
                    _ => {}
                  }
                  match current_block {
                    15129665204879337069 => {}
                    _ => {
                      match current_block {
                        16124761010012532485 => {
                          let mut yf: libc::c_int = 0;
                          let mut ml: libc::c_int = 0;
                          let mut whole: libc::c_int = 0;
                          yf = YANKDEL as libc::c_int;
                          if c == 'y' as i32 || c == 'Y' as i32 {
                            yf = YANKONLY as libc::c_int
                          }
                          c1 = 'y' as i32;
                          if c != 'Y' as i32 {
                            c1 = get_one_char()
                          }
                          ml = find_range(&mut p, &mut q, c1 as libc::c_char);
                          place_cursor(0i32, 0);
                          if c1 == 27i32 {
                            c1 = 27i32;
                            c = c1
                          } else if !strchr(b"wW\x00" as *const u8 as *const libc::c_char, c1)
                            .is_null()
                          {
                            ml = 0;
                            if c == 'c' as i32 {
                              while ({
                                let mut bb__isspace: libc::c_uchar =
                                  (*q as libc::c_int - 9i32) as libc::c_uchar;
                                (bb__isspace as libc::c_int == ' ' as i32 - 9i32
                                  || bb__isspace as libc::c_int <= 13i32 - 9i32)
                                  as libc::c_int
                              }) != 0
                                && q > p
                              {
                                q = q.offset(-1)
                              }
                            }
                            (*ptr_to_globals).dot = yank_delete(p, q, ml, yf, 1i32)
                          } else if !strchr(
                            b"^0bBeEft%$ lh\x08\x7f\x00" as *const u8 as *const libc::c_char,
                            c1,
                          )
                          .is_null()
                          {
                            (*ptr_to_globals).dot = yank_delete(p, q, ml, yf, 1i32)
                          } else if !strchr(
                            b"cdykjGHL+-{}\r\n\x00" as *const u8 as *const libc::c_char,
                            c1,
                          )
                          .is_null()
                          {
                            (*ptr_to_globals).dot = yank_delete(p, q, ml, yf, 1i32);
                            whole = 1i32
                          } else {
                            c1 = 27i32;
                            c = c1;
                            ml = 0;
                            indicate_error();
                          }
                          if ml != 0 && whole != 0 {
                            if c == 'c' as i32 {
                              (*ptr_to_globals).dot = char_insert(
                                (*ptr_to_globals).dot,
                                '\n' as i32 as libc::c_char,
                                2i32,
                              );
                              if whole != 0
                                && (*ptr_to_globals).dot != (*ptr_to_globals).end.offset(-1)
                              {
                                dot_prev();
                              }
                            } else if c == 'd' as i32 {
                              dot_begin();
                              dot_skip_over_ws();
                            }
                          }
                          if c1 != 27i32 {
                            if c == 'c' as i32 {
                              strcpy(
                                buf.as_mut_ptr(),
                                b"Change\x00" as *const u8 as *const libc::c_char,
                              );
                              current_block = 8629930936610358348;
                            } else {
                              if c == 'd' as i32 {
                                strcpy(
                                  buf.as_mut_ptr(),
                                  b"Delete\x00" as *const u8 as *const libc::c_char,
                                );
                              }
                              if c == 'y' as i32 || c == 'Y' as i32 {
                                strcpy(
                                  buf.as_mut_ptr(),
                                  b"Yank\x00" as *const u8 as *const libc::c_char,
                                );
                              }
                              p = (*ptr_to_globals).reg[(*ptr_to_globals).YDreg as usize];
                              q = p.offset(strlen(p) as isize);
                              cnt = 0;
                              while p <= q {
                                if *p as libc::c_int == '\n' as i32 {
                                  cnt += 1
                                }
                                p = p.offset(1)
                              }
                              status_line(
                                b"%s %u lines (%u chars) using [%c]\x00" as *const u8
                                  as *const libc::c_char,
                                buf.as_mut_ptr(),
                                cnt,
                                strlen((*ptr_to_globals).reg[(*ptr_to_globals).YDreg as usize])
                                  as libc::c_uint,
                                what_reg() as libc::c_int,
                              );
                              end_cmd_q();
                              current_block = 15129665204879337069;
                            }
                          } else {
                            current_block = 15129665204879337069;
                          }
                        }
                        5591548203144509315 => {
                          current_block = 2636677179867529885;
                        }
                        _ => {}
                      }
                      match current_block {
                        15129665204879337069 => {}
                        8629930936610358348 => {}
                        _ => {
                          match current_block {
                            2636677179867529885 => {
                              current_block = 12309206730560524281;
                            }
                            _ => {}
                          }
                          match current_block {
                            12309206730560524281 => {
                              current_block = 3325768110057758661;
                            }
                            _ => {}
                          }
                          match current_block {
                            3325768110057758661 => {
                              current_block = 14815832896553429982;
                            }
                            _ => {}
                          }
                          match current_block {
                            14815832896553429982 => {
                              current_block = 10731695520297161438;
                            }
                            _ => {}
                          }
                          match current_block {
                            10731695520297161438 => {
                              if c == '0' as i32 && (*ptr_to_globals).cmdcnt < 1i32 {
                                dot_begin();
                              } else {
                                (*ptr_to_globals).cmdcnt =
                                  (*ptr_to_globals).cmdcnt * 10i32 + (c - '0' as i32)
                              }
                              current_block = 15129665204879337069;
                            }
                            _ => {}
                          }
                          match current_block {
                            15129665204879337069 => {}
                            _ => {
                              loop {
                                match current_block {
                                  16813369756331276724 => {
                                    msg = std::ptr::null();
                                    current_block = 7392824444931029276;
                                  }
                                  7392824444931029276 => {
                                    dir = FORWARD as libc::c_int;
                                    p = (*ptr_to_globals).dot.offset(1);
                                    if *(*ptr_to_globals).last_search_pattern.offset(0)
                                      as libc::c_int
                                      == '?' as i32
                                    {
                                      dir = BACK as libc::c_int;
                                      p = (*ptr_to_globals).dot.offset(-1)
                                    }
                                    current_block = 4166979493554389389;
                                  }
                                  _ => {
                                    q = char_search(
                                      p,
                                      (*ptr_to_globals).last_search_pattern.offset(1),
                                      dir << 1i32 | FULL as libc::c_int,
                                    );
                                    if !q.is_null() {
                                      (*ptr_to_globals).dot = q;
                                      msg = std::ptr::null()
                                    } else {
                                      p = (*ptr_to_globals).text;
                                      if dir == BACK as libc::c_int {
                                        p = (*ptr_to_globals).end.offset(-1)
                                      }
                                      q = char_search(
                                        p,
                                        (*ptr_to_globals).last_search_pattern.offset(1),
                                        dir << 1i32 | FULL as libc::c_int,
                                      );
                                      if !q.is_null() {
                                        (*ptr_to_globals).dot = q;
                                        msg = b"search hit BOTTOM, continuing at TOP\x00"
                                          as *const u8
                                          as *const libc::c_char;
                                        if dir == BACK as libc::c_int {
                                          msg = b"search hit TOP, continuing at BOTTOM\x00"
                                            as *const u8
                                            as *const libc::c_char
                                        }
                                      } else {
                                        msg = b"Pattern not found\x00" as *const u8
                                          as *const libc::c_char
                                      }
                                    }
                                    if !msg.is_null() {
                                      status_line_bold(
                                        b"%s\x00" as *const u8 as *const libc::c_char,
                                        msg,
                                      );
                                    }
                                    (*ptr_to_globals).cmdcnt -= 1;
                                    if (*ptr_to_globals).cmdcnt > 0 {
                                      current_block = 16813369756331276724;
                                    } else {
                                      break;
                                    }
                                  }
                                }
                              }
                              current_block = 15129665204879337069;
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
        7 => {
          current_block = 10758177197742640066;
          match current_block {
            16992905640583886232 => {
              loop {
                if (*(*ptr_to_globals).dot as libc::c_int - 'a' as i32) as libc::c_uchar
                  as libc::c_int
                  <= 'z' as i32 - 'a' as i32
                {
                  undo_push(
                    (*ptr_to_globals).dot,
                    1i32 as libc::c_uint,
                    1i32 as libc::c_uchar,
                  );
                  *(*ptr_to_globals).dot =
                    bb_ascii_toupper(*(*ptr_to_globals).dot as libc::c_uchar) as libc::c_char;
                  undo_push(
                    (*ptr_to_globals).dot,
                    1i32 as libc::c_uint,
                    2i32 as libc::c_uchar,
                  );
                } else if (*(*ptr_to_globals).dot as libc::c_int - 'A' as i32) as libc::c_uchar
                  as libc::c_int
                  <= 'Z' as i32 - 'A' as i32
                {
                  undo_push(
                    (*ptr_to_globals).dot,
                    1i32 as libc::c_uint,
                    1i32 as libc::c_uchar,
                  );
                  *(*ptr_to_globals).dot =
                    bb_ascii_tolower(*(*ptr_to_globals).dot as libc::c_uchar) as libc::c_char;
                  undo_push(
                    (*ptr_to_globals).dot,
                    1i32 as libc::c_uint,
                    2i32 as libc::c_uchar,
                  );
                }
                dot_right();
                (*ptr_to_globals).cmdcnt -= 1;
                if !((*ptr_to_globals).cmdcnt > 0) {
                  break;
                }
              }
              end_cmd_q();
              current_block = 15129665204879337069;
            }
            8729655159604064397 => {
              c1 = get_one_char();
              cnt = 0;
              if c1 == '.' as i32 {
                cnt = (*ptr_to_globals)
                  .rows
                  .wrapping_sub(2i32 as libc::c_uint)
                  .wrapping_div(2i32 as libc::c_uint) as libc::c_int
              }
              if c1 == '-' as i32 {
                cnt = (*ptr_to_globals).rows.wrapping_sub(2i32 as libc::c_uint) as libc::c_int
              }
              (*ptr_to_globals).screenbegin = begin_line((*ptr_to_globals).dot);
              dot_scroll(cnt, -1i32);
              current_block = 15129665204879337069;
            }
            15899500648299942075 => {
              (*ptr_to_globals).last_forward_char = get_one_char();
              do_cmd(';' as i32);
              if *(*ptr_to_globals).dot as libc::c_int == (*ptr_to_globals).last_forward_char {
                dot_left();
              }
              (*ptr_to_globals).last_forward_char = 0;
              current_block = 15129665204879337069;
            }
            9051390181078481641 => {
              c1 = get_one_char();
              if *(*ptr_to_globals).dot as libc::c_int != '\n' as i32 {
                (*ptr_to_globals).dot =
                  text_hole_delete((*ptr_to_globals).dot, (*ptr_to_globals).dot, 1i32);
                (*ptr_to_globals).dot =
                  char_insert((*ptr_to_globals).dot, c1 as libc::c_char, 2i32);
                dot_left();
              }
              end_cmd_q();
              current_block = 15129665204879337069;
            }
            877115918601926659 => {
              dir = FORWARD as libc::c_int;
              if c == 'b' as i32 {
                dir = BACK as libc::c_int
              }
              while !((*ptr_to_globals).dot.offset(dir as isize) < (*ptr_to_globals).text
                || (*ptr_to_globals).dot.offset(dir as isize) > (*ptr_to_globals).end.offset(-1))
              {
                (*ptr_to_globals).dot = (*ptr_to_globals).dot.offset(dir as isize);
                if ({
                  let mut bb__isspace: libc::c_uchar =
                    (*(*ptr_to_globals).dot as libc::c_int - 9i32) as libc::c_uchar;
                  (bb__isspace as libc::c_int == ' ' as i32 - 9i32
                    || bb__isspace as libc::c_int <= 13i32 - 9i32) as libc::c_int
                }) != 0
                {
                  (*ptr_to_globals).dot = skip_thing(
                    (*ptr_to_globals).dot,
                    if c == 'e' as i32 { 2i32 } else { 1i32 },
                    dir,
                    S_OVER_WS as libc::c_int,
                  )
                }
                if bb_ascii_isalnum(*(*ptr_to_globals).dot as libc::c_uchar) != 0
                  || *(*ptr_to_globals).dot as libc::c_int == '_' as i32
                {
                  (*ptr_to_globals).dot =
                    skip_thing((*ptr_to_globals).dot, 1i32, dir, S_END_ALNUM as libc::c_int)
                } else if *strchrnul(
                  b"!\"#$%&\'()*+,-./:;<=>?@[\\]^_`{|}~\x00" as *const u8 as *const libc::c_char,
                  *(*ptr_to_globals).dot as libc::c_int,
                )
                .offset(0)
                  != 0
                {
                  (*ptr_to_globals).dot =
                    skip_thing((*ptr_to_globals).dot, 1i32, dir, S_END_PUNCT as libc::c_int)
                }
                (*ptr_to_globals).cmdcnt -= 1;
                if !((*ptr_to_globals).cmdcnt > 0) {
                  break;
                }
              }
              current_block = 15129665204879337069;
            }
            1085022737867179637 => {
              dot_begin();
              dot_skip_over_ws();
              current_block = 15129665204879337069;
            }
            3113147720494587438 => {
              c1 = get_one_char();
              if c1 != 'Z' as i32 {
                indicate_error();
              } else if (*ptr_to_globals).modified_count != 0 {
                if 1i32 != 0 && (*ptr_to_globals).readonly_mode as libc::c_int != 0 {
                  status_line_bold(
                    b"\'%s\' is read only\x00" as *const u8 as *const libc::c_char,
                    (*ptr_to_globals).current_filename,
                  );
                } else {
                  cnt = file_write(
                    (*ptr_to_globals).current_filename,
                    (*ptr_to_globals).text,
                    (*ptr_to_globals).end.offset(-1),
                  );
                  if cnt < 0 {
                    if cnt == -1i32 {
                      status_line_bold(b"Write error: %m\x00" as *const u8 as *const libc::c_char);
                    }
                  } else if cnt as libc::c_long
                    == (*ptr_to_globals)
                      .end
                      .offset(-1)
                      .wrapping_offset_from((*ptr_to_globals).text)
                      as libc::c_long
                      + 1
                  {
                    (*ptr_to_globals).editing = 0 as smallint
                  }
                }
              } else {
                (*ptr_to_globals).editing = 0 as smallint
              }
              current_block = 15129665204879337069;
            }
            12960118908218882441 => {
              p = begin_line((*ptr_to_globals).dot);
              if *p.offset(-1i32 as isize) as libc::c_int == '\n' as i32 {
                dot_prev();
                current_block = 2087484904894455135;
              } else {
                dot_begin();
                (*ptr_to_globals).dot =
                  char_insert((*ptr_to_globals).dot, '\n' as i32 as libc::c_char, 1i32);
                dot_prev();
                current_block = 8629930936610358348;
              }
            }
            8720450212473544924 => {
              (*ptr_to_globals).dot = (*ptr_to_globals).screenbegin;
              cnt = 0;
              while (cnt as libc::c_uint)
                < (*ptr_to_globals)
                  .rows
                  .wrapping_sub(1i32 as libc::c_uint)
                  .wrapping_div(2i32 as libc::c_uint)
              {
                (*ptr_to_globals).dot = next_line((*ptr_to_globals).dot);
                cnt += 1
              }
              current_block = 15129665204879337069;
            }
            13015277209715431090 => {
              (*ptr_to_globals).dot = end_screen();
              if (*ptr_to_globals).cmdcnt as libc::c_uint
                > (*ptr_to_globals).rows.wrapping_sub(1i32 as libc::c_uint)
              {
                (*ptr_to_globals).cmdcnt =
                  (*ptr_to_globals).rows.wrapping_sub(1i32 as libc::c_uint) as libc::c_int
              }
              (*ptr_to_globals).cmdcnt -= 1;
              if (*ptr_to_globals).cmdcnt > 0 {
                do_cmd('-' as i32);
              }
              dot_begin();
              dot_skip_over_ws();
              current_block = 15129665204879337069;
            }
            9800435767766781385 => {
              loop {
                dot_end();
                if (*ptr_to_globals).dot < (*ptr_to_globals).end.offset(-1) {
                  undo_push(
                    (*ptr_to_globals).dot,
                    1i32 as libc::c_uint,
                    1i32 as libc::c_uchar,
                  );
                  let fresh15 = (*ptr_to_globals).dot;
                  (*ptr_to_globals).dot = (*ptr_to_globals).dot.offset(1);
                  *fresh15 = ' ' as i32 as libc::c_char;
                  undo_push(
                    (*ptr_to_globals).dot.offset(-1),
                    1i32 as libc::c_uint,
                    2i32 as libc::c_uchar,
                  );
                  while ({
                    let mut bb__isblank: libc::c_uchar = *(*ptr_to_globals).dot as libc::c_uchar;
                    (bb__isblank as libc::c_int == ' ' as i32
                      || bb__isblank as libc::c_int == '\t' as i32)
                      as libc::c_int
                  }) != 0
                  {
                    text_hole_delete((*ptr_to_globals).dot, (*ptr_to_globals).dot, 2i32);
                  }
                }
                (*ptr_to_globals).cmdcnt -= 1;
                if !((*ptr_to_globals).cmdcnt > 0) {
                  break;
                }
              }
              end_cmd_q();
              current_block = 15129665204879337069;
            }
            3432363526595694666 => {
              dot_begin();
              dot_skip_over_ws();
              current_block = 3268579060917229304;
            }
            3494829253343353619 => {
              (*ptr_to_globals).dot = (*ptr_to_globals).screenbegin;
              if (*ptr_to_globals).cmdcnt as libc::c_uint
                > (*ptr_to_globals).rows.wrapping_sub(1i32 as libc::c_uint)
              {
                (*ptr_to_globals).cmdcnt =
                  (*ptr_to_globals).rows.wrapping_sub(1i32 as libc::c_uint) as libc::c_int
              }
              (*ptr_to_globals).cmdcnt -= 1;
              if (*ptr_to_globals).cmdcnt > 0 {
                do_cmd('+' as i32);
              }
              dot_skip_over_ws();
              current_block = 15129665204879337069;
            }
            17973101765331640574 => {
              c1 = get_one_char();
              if c1 != 'g' as i32 {
                buf[0] = 'g' as i32 as libc::c_char;
                buf[1] = if c1 >= 0 { c1 } else { '*' as i32 } as libc::c_char;
                buf[2] = '\u{0}' as i32 as libc::c_char;
                not_implemented(buf.as_mut_ptr());
                current_block = 15129665204879337069;
              } else {
                if (*ptr_to_globals).cmdcnt == 0 {
                  (*ptr_to_globals).cmdcnt = 1i32
                }
                current_block = 11945623545738147997;
              }
            }
            16546625800574160972 => {
              save_dot = (*ptr_to_globals).dot;
              (*ptr_to_globals).dot = dollar_line((*ptr_to_globals).dot);
              (*ptr_to_globals).dot = yank_delete(
                save_dot,
                (*ptr_to_globals).dot,
                0,
                YANKDEL as libc::c_int,
                1i32,
              );
              if c == 'C' as i32 {
                current_block = 8629930936610358348;
              } else {
                if c == 'D' as i32 {
                  end_cmd_q();
                }
                current_block = 15129665204879337069;
              }
            }
            11937696639986586685 => {
              cnt = count_lines((*ptr_to_globals).text, (*ptr_to_globals).dot);
              c1 = get_one_char();
              find_range(&mut p, &mut q, c1 as libc::c_char);
              yank_delete(p, q, 1i32, YANKONLY as libc::c_int, 0);
              p = begin_line(p);
              q = end_line(q);
              i = count_lines(p, q);
              while i > 0 {
                if c == '<' as i32 {
                  if *p as libc::c_int == '\t' as i32 {
                    text_hole_delete(p, p, 0);
                  } else if *p as libc::c_int == ' ' as i32 {
                    j = 0;
                    while *p as libc::c_int == ' ' as i32 && j < (*ptr_to_globals).tabstop {
                      text_hole_delete(p, p, 0);
                      j += 1
                    }
                  }
                } else if c == '>' as i32 {
                  char_insert(p, '\t' as i32 as libc::c_char, 1i32);
                }
                i -= 1;
                p = next_line(p)
              }
              (*ptr_to_globals).dot = find_line(cnt);
              dot_skip_over_ws();
              end_cmd_q();
              current_block = 15129665204879337069;
            }
            17725350714912028156 => {
              p = get_input_line(b":\x00" as *const u8 as *const libc::c_char);
              colon(p);
              current_block = 15129665204879337069;
            }
            14526470074083880812 => {
              q = char_search(
                (*ptr_to_globals).dot,
                b"\n\n\x00" as *const u8 as *const libc::c_char,
                (FORWARD as libc::c_int) << 1i32 | FULL as libc::c_int,
              );
              if !q.is_null() {
                (*ptr_to_globals).dot = next_line(q)
              }
              current_block = 15129665204879337069;
            }
            8893187391306414141 => {
              q = char_search(
                (*ptr_to_globals).dot,
                b"\n\n\x00" as *const u8 as *const libc::c_char,
                ((BACK as libc::c_int as libc::c_uint) << 1i32
                  | FULL as libc::c_int as libc::c_uint) as libc::c_int,
              );
              if !q.is_null() {
                (*ptr_to_globals).dot = next_line(q)
              }
              current_block = 15129665204879337069;
            }
            7021673758293221412 => {
              dir = BACK as libc::c_int;
              p = (*ptr_to_globals).dot.offset(-1);
              if *(*ptr_to_globals).last_search_pattern.offset(0) as libc::c_int == '?' as i32 {
                dir = FORWARD as libc::c_int;
                p = (*ptr_to_globals).dot.offset(1)
              }
              current_block = 4166979493554389389;
            }
            18374191879090272823 => {
              buf[0] = c as libc::c_char;
              buf[1] = '\u{0}' as i32 as libc::c_char;
              q = get_input_line(buf.as_mut_ptr());
              if *q.offset(0) as libc::c_int != 0 && *q.offset(1) == 0 {
                if *(*ptr_to_globals).last_search_pattern.offset(0) != 0 {
                  *(*ptr_to_globals).last_search_pattern.offset(0) = c as libc::c_char
                }
                current_block = 7392824444931029276;
              } else if *q.offset(0) != 0 {
                free((*ptr_to_globals).last_search_pattern as *mut libc::c_void);
                (*ptr_to_globals).last_search_pattern = crate::libbb::xfuncs_printf::xstrdup(q);
                current_block = 7392824444931029276;
              } else {
                current_block = 15129665204879337069;
              }
            }
            16407828456666301883 => {
              if (*ptr_to_globals).last_forward_char == 0 {
                current_block = 15129665204879337069;
              } else {
                loop {
                  q = (*ptr_to_globals).dot.offset(-1);
                  while q >= (*ptr_to_globals).text
                    && *q as libc::c_int != '\n' as i32
                    && *q as libc::c_int != (*ptr_to_globals).last_forward_char
                  {
                    q = q.offset(-1)
                  }
                  if q >= (*ptr_to_globals).text
                    && *q as libc::c_int == (*ptr_to_globals).last_forward_char
                  {
                    (*ptr_to_globals).dot = q
                  }
                  (*ptr_to_globals).cmdcnt -= 1;
                  if !((*ptr_to_globals).cmdcnt > 0) {
                    break;
                  }
                }
                current_block = 15129665204879337069;
              }
            }
            9018432604062702004 => {
              q = (*ptr_to_globals).dot;
              while q < (*ptr_to_globals).end && *q as libc::c_int != '\n' as i32 {
                if !strchr(
                  b"()[]{}\x00" as *const u8 as *const libc::c_char,
                  *q as libc::c_int,
                )
                .is_null()
                {
                  p = find_pair(q, *q);
                  if p.is_null() {
                    indicate_error();
                  } else {
                    (*ptr_to_globals).dot = p
                  }
                  break;
                } else {
                  q = q.offset(1)
                }
              }
              if *q as libc::c_int == '\n' as i32 {
                indicate_error();
              }
              current_block = 15129665204879337069;
            }
            10247103787464459848 => {
              p = (*ptr_to_globals).reg[(*ptr_to_globals).YDreg as usize];
              if p.is_null() {
                status_line_bold(
                  b"Nothing in register %c\x00" as *const u8 as *const libc::c_char,
                  what_reg() as libc::c_int,
                );
              } else {
                if !strchr(p, '\n' as i32).is_null() {
                  if c == 'P' as i32 {
                    dot_begin();
                  }
                  if c == 'p' as i32 {
                    if end_line((*ptr_to_globals).dot) == (*ptr_to_globals).end.offset(-1) {
                      (*ptr_to_globals).dot = (*ptr_to_globals).end
                    } else {
                      dot_next();
                    }
                  }
                } else if c == 'p' as i32 {
                  dot_right();
                }
                string_insert((*ptr_to_globals).dot, p, 1i32);
                end_cmd_q();
              }
              current_block = 15129665204879337069;
            }
            15260732871948875843 => {
              c1 = (get_one_char() | 0x20i32) - 'a' as i32;
              if c1 as libc::c_uint <= 25i32 as libc::c_uint {
                (*ptr_to_globals).mark[c1 as usize] = (*ptr_to_globals).dot
              } else {
                indicate_error();
              }
              current_block = 15129665204879337069;
            }
            12738322036487086035 => {
              c1 = get_one_char() | 0x20i32;
              if (c1 - 'a' as i32) as libc::c_uint <= 25i32 as libc::c_uint {
                c1 = c1 - 'a' as i32;
                q = (*ptr_to_globals).mark[c1 as usize];
                if (*ptr_to_globals).text <= q && q < (*ptr_to_globals).end {
                  (*ptr_to_globals).dot = q;
                  dot_begin();
                  dot_skip_over_ws();
                }
              } else if c1 == '\'' as i32 {
                (*ptr_to_globals).dot = swap_context((*ptr_to_globals).dot);
                dot_begin();
                dot_skip_over_ws();
              } else {
                indicate_error();
              }
              current_block = 15129665204879337069;
            }
            13255096073384561358 => {
              c1 = (get_one_char() | 0x20i32) - 'a' as i32;
              if c1 as libc::c_uint <= 25i32 as libc::c_uint {
                (*ptr_to_globals).YDreg = c1 as smalluint
              } else {
                indicate_error();
              }
              current_block = 15129665204879337069;
            }
            10258711639984089377 => {
              if (*ptr_to_globals).cmd_mode as libc::c_int == 0 {
                indicate_error();
              }
              (*ptr_to_globals).cmd_mode = 0 as smallint;
              undo_queue_commit();
              end_cmd_q();
              (*ptr_to_globals).last_status_cksum = 0;
              current_block = 15129665204879337069;
            }
            11439127087547047736 => {
              buf[0] = c as libc::c_char;
              buf[1] = '\u{0}' as i32 as libc::c_char;
              not_implemented(buf.as_mut_ptr());
              end_cmd_q();
              current_block = 17440971994642376514;
            }
            7961798899781870241 => {
              dot_scroll(
                (*ptr_to_globals).rows.wrapping_sub(2i32 as libc::c_uint) as libc::c_int,
                -1i32,
              );
              current_block = 15129665204879337069;
            }
            9426343755402444879 => {
              dot_scroll(
                (*ptr_to_globals)
                  .rows
                  .wrapping_sub(2i32 as libc::c_uint)
                  .wrapping_div(2i32 as libc::c_uint) as libc::c_int,
                1i32,
              );
              current_block = 15129665204879337069;
            }
            13352459794680105913 => {
              dot_scroll(1i32, 1i32);
              current_block = 15129665204879337069;
            }
            14142272253464333006 => {
              dot_scroll(
                (*ptr_to_globals).rows.wrapping_sub(2i32 as libc::c_uint) as libc::c_int,
                1i32,
              );
              current_block = 15129665204879337069;
            }
            10758177197742640066 => {
              (*ptr_to_globals).last_status_cksum = 0;
              current_block = 15129665204879337069;
            }
            6152256259730122749 => {
              current_block = 7534742345255184552;
            }
            12883932598258173301 => {
              current_block = 8800996768013373992;
            }
            11242998110520238401 => {
              redraw(1i32);
              current_block = 15129665204879337069;
            }
            13619733043935729992 => {
              loop {
                dot_next();
                dot_skip_over_ws();
                (*ptr_to_globals).cmdcnt -= 1;
                if !((*ptr_to_globals).cmdcnt > 0) {
                  break;
                }
              }
              current_block = 15129665204879337069;
            }
            9339065157412720613 => {
              dot_scroll(
                (*ptr_to_globals)
                  .rows
                  .wrapping_sub(2i32 as libc::c_uint)
                  .wrapping_div(2i32 as libc::c_uint) as libc::c_int,
                -1i32,
              );
              current_block = 15129665204879337069;
            }
            11447082683497798022 => {
              dot_scroll(1i32, -1i32);
              current_block = 15129665204879337069;
            }
            5182000506326660482 => {
              current_block = 13993698454868426881;
            }
            1105010766850597332 => {
              if !(*ptr_to_globals).reg[27].is_null() {
                p = begin_line((*ptr_to_globals).dot);
                q = end_line((*ptr_to_globals).dot);
                p = text_hole_delete(p, q, 1i32);
                p = p.offset(string_insert(p, (*ptr_to_globals).reg[27], 2i32) as isize);
                (*ptr_to_globals).dot = p;
                dot_skip_over_ws();
              }
              current_block = 15129665204879337069;
            }
            8616046655533110204 => {
              undo_pop();
              current_block = 15129665204879337069;
            }
            5127767458142431603 => {
              loop {
                (*ptr_to_globals).dot = end_line((*ptr_to_globals).dot);
                (*ptr_to_globals).cmdcnt -= 1;
                if (*ptr_to_globals).cmdcnt <= 0 {
                  break;
                }
                dot_next();
              }
              current_block = 15129665204879337069;
            }
            222014967776118151 => {
              (*ptr_to_globals).last_forward_char = get_one_char();
              current_block = 7856905509180742666;
            }
            11209792479411604110 => {
              loop {
                dot_prev();
                dot_skip_over_ws();
                (*ptr_to_globals).cmdcnt -= 1;
                if !((*ptr_to_globals).cmdcnt > 0) {
                  break;
                }
              }
              current_block = 15129665204879337069;
            }
            3364823792826654116 => {
              if (*ptr_to_globals).lmc_len != 0 {
                (*ptr_to_globals).ioq_start = crate::libbb::xfuncs_printf::xstrndup(
                  (*ptr_to_globals).last_modifying_cmd.as_mut_ptr(),
                  (*ptr_to_globals).lmc_len,
                );
                (*ptr_to_globals).ioq = (*ptr_to_globals).ioq_start
              }
              current_block = 15129665204879337069;
            }
            18096603330221575131 => {
              current_block = 17498168302144015873;
            }
            16891123271837848903 => {
              dot_end();
              current_block = 1752638907092016026;
            }
            8517235759107662071 => {
              current_block = 5847749760081351726;
            }
            12525254419223051704 => {
              if (*ptr_to_globals).dot < (*ptr_to_globals).end.offset(-1) {
                (*ptr_to_globals).dot = yank_delete(
                  (*ptr_to_globals).dot,
                  (*ptr_to_globals).dot,
                  1i32,
                  YANKDEL as libc::c_int,
                  1i32,
                )
              }
              current_block = 15129665204879337069;
            }
            15232911949322867522 => {
              current_block = 17251831742223396249;
            }
            10863374208794025069 => {
              current_block = 1895262434596074581;
            }
            451126677064669119 => {
              loop {
                dot_prev();
                (*ptr_to_globals).dot = move_to_col(
                  (*ptr_to_globals).dot,
                  (*ptr_to_globals).ccol + (*ptr_to_globals).offset,
                );
                (*ptr_to_globals).cmdcnt -= 1;
                if !((*ptr_to_globals).cmdcnt > 0) {
                  break;
                }
              }
              current_block = 15129665204879337069;
            }
            4611735929166613116 => {
              loop {
                if bb_ascii_isalnum(*(*ptr_to_globals).dot as libc::c_uchar) != 0
                  || *(*ptr_to_globals).dot as libc::c_int == '_' as i32
                {
                  (*ptr_to_globals).dot = skip_thing(
                    (*ptr_to_globals).dot,
                    1i32,
                    FORWARD as libc::c_int,
                    S_END_ALNUM as libc::c_int,
                  )
                } else if *strchrnul(
                  b"!\"#$%&\'()*+,-./:;<=>?@[\\]^_`{|}~\x00" as *const u8 as *const libc::c_char,
                  *(*ptr_to_globals).dot as libc::c_int,
                )
                .offset(0)
                  != 0
                {
                  (*ptr_to_globals).dot = skip_thing(
                    (*ptr_to_globals).dot,
                    1i32,
                    FORWARD as libc::c_int,
                    S_END_PUNCT as libc::c_int,
                  )
                }
                if (*ptr_to_globals).dot < (*ptr_to_globals).end.offset(-1) {
                  (*ptr_to_globals).dot = (*ptr_to_globals).dot.offset(1)
                }
                if ({
                  let mut bb__isspace: libc::c_uchar =
                    (*(*ptr_to_globals).dot as libc::c_int - 9i32) as libc::c_uchar;
                  (bb__isspace as libc::c_int == ' ' as i32 - 9i32
                    || bb__isspace as libc::c_int <= 13i32 - 9i32) as libc::c_int
                }) != 0
                {
                  (*ptr_to_globals).dot = skip_thing(
                    (*ptr_to_globals).dot,
                    2i32,
                    FORWARD as libc::c_int,
                    S_OVER_WS as libc::c_int,
                  )
                }
                (*ptr_to_globals).cmdcnt -= 1;
                if !((*ptr_to_globals).cmdcnt > 0) {
                  break;
                }
              }
              current_block = 15129665204879337069;
            }
            4386451087681909888 => {
              (*ptr_to_globals).dot =
                move_to_col((*ptr_to_globals).dot, (*ptr_to_globals).cmdcnt - 1i32);
              current_block = 15129665204879337069;
            }
            1296397779060594135 => {
              dot_begin();
              current_block = 15129665204879337069;
            }
            _ => {}
          }
          match current_block {
            15129665204879337069 => {}
            8629930936610358348 => {}
            _ => {
              match current_block {
                17251831742223396249 => {
                  dir = 0;
                  if c == 'X' as i32 {
                    dir = -1i32
                  }
                  loop {
                    if *(*ptr_to_globals).dot.offset(dir as isize) as libc::c_int != '\n' as i32 {
                      if c == 'X' as i32 {
                        (*ptr_to_globals).dot = (*ptr_to_globals).dot.offset(-1)
                      }
                      (*ptr_to_globals).dot = yank_delete(
                        (*ptr_to_globals).dot,
                        (*ptr_to_globals).dot,
                        0,
                        YANKDEL as libc::c_int,
                        1i32,
                      )
                    }
                    (*ptr_to_globals).cmdcnt -= 1;
                    if !((*ptr_to_globals).cmdcnt > 0) {
                      break;
                    }
                  }
                  end_cmd_q();
                  if c == 's' as i32 {
                    current_block = 8629930936610358348;
                  } else {
                    current_block = 15129665204879337069;
                  }
                }
                2087484904894455135 => {
                  dot_end();
                  (*ptr_to_globals).dot =
                    char_insert((*ptr_to_globals).dot, '\n' as i32 as libc::c_char, 1i32);
                  current_block = 8629930936610358348;
                }
                11945623545738147997 => {
                  (*ptr_to_globals).dot = (*ptr_to_globals).end.offset(-1);
                  if (*ptr_to_globals).cmdcnt > 0 {
                    (*ptr_to_globals).dot = find_line((*ptr_to_globals).cmdcnt)
                  }
                  dot_skip_over_ws();
                  current_block = 15129665204879337069;
                }
                5847749760081351726 => {
                  dir = FORWARD as libc::c_int;
                  if c == 'B' as i32 {
                    dir = BACK as libc::c_int
                  }
                  loop {
                    if c == 'W' as i32
                      || ({
                        let mut bb__isspace: libc::c_uchar =
                          (*(*ptr_to_globals).dot.offset(dir as isize) as libc::c_int - 9i32)
                            as libc::c_uchar;
                        (bb__isspace as libc::c_int == ' ' as i32 - 9i32
                          || bb__isspace as libc::c_int <= 13i32 - 9i32)
                          as libc::c_int
                      }) != 0
                    {
                      (*ptr_to_globals).dot =
                        skip_thing((*ptr_to_globals).dot, 1i32, dir, S_TO_WS as libc::c_int);
                      (*ptr_to_globals).dot =
                        skip_thing((*ptr_to_globals).dot, 2i32, dir, S_OVER_WS as libc::c_int)
                    }
                    if c != 'W' as i32 {
                      (*ptr_to_globals).dot =
                        skip_thing((*ptr_to_globals).dot, 1i32, dir, S_BEFORE_WS as libc::c_int)
                    }
                    (*ptr_to_globals).cmdcnt -= 1;
                    if !((*ptr_to_globals).cmdcnt > 0) {
                      break;
                    }
                  }
                  current_block = 15129665204879337069;
                }
                17440971994642376514 => {
                  current_block = 15129665204879337069;
                }
                7534742345255184552 => {
                  current_block = 17247297260531395789;
                }
                8800996768013373992 => {
                  loop {
                    dot_next();
                    (*ptr_to_globals).dot = move_to_col(
                      (*ptr_to_globals).dot,
                      (*ptr_to_globals).ccol + (*ptr_to_globals).offset,
                    );
                    (*ptr_to_globals).cmdcnt -= 1;
                    if !((*ptr_to_globals).cmdcnt > 0) {
                      break;
                    }
                  }
                  current_block = 15129665204879337069;
                }
                13993698454868426881 => {
                  loop {
                    dot_right();
                    (*ptr_to_globals).cmdcnt -= 1;
                    if !((*ptr_to_globals).cmdcnt > 0) {
                      break;
                    }
                  }
                  current_block = 15129665204879337069;
                }
                7856905509180742666 => {
                  while !((*ptr_to_globals).last_forward_char == 0) {
                    q = (*ptr_to_globals).dot.offset(1);
                    while q < (*ptr_to_globals).end.offset(-1)
                      && *q as libc::c_int != '\n' as i32
                      && *q as libc::c_int != (*ptr_to_globals).last_forward_char
                    {
                      q = q.offset(1)
                    }
                    if *q as libc::c_int == (*ptr_to_globals).last_forward_char {
                      (*ptr_to_globals).dot = q
                    }
                    (*ptr_to_globals).cmdcnt -= 1;
                    if !((*ptr_to_globals).cmdcnt > 0) {
                      break;
                    }
                  }
                  current_block = 15129665204879337069;
                }
                17498168302144015873 => {
                  current_block = 8681395796513813967;
                }
                1752638907092016026 => {
                  if *(*ptr_to_globals).dot as libc::c_int != '\n' as i32 {
                    (*ptr_to_globals).dot = (*ptr_to_globals).dot.offset(1)
                  }
                  current_block = 8629930936610358348;
                }
                3268579060917229304 => {
                  current_block = 8629930936610358348;
                }
                1895262434596074581 => {
                  current_block = 8908416993177701018;
                }
                _ => {}
              }
              match current_block {
                8629930936610358348 => {}
                15129665204879337069 => {}
                _ => {
                  match current_block {
                    17247297260531395789 => {
                      loop {
                        dot_left();
                        (*ptr_to_globals).cmdcnt -= 1;
                        if !((*ptr_to_globals).cmdcnt > 0) {
                          break;
                        }
                      }
                      current_block = 15129665204879337069;
                    }
                    8681395796513813967 => {
                      current_block = 5591548203144509315;
                    }
                    8908416993177701018 => {
                      current_block = 16124761010012532485;
                    }
                    _ => {}
                  }
                  match current_block {
                    15129665204879337069 => {}
                    _ => {
                      match current_block {
                        16124761010012532485 => {
                          let mut yf: libc::c_int = 0;
                          let mut ml: libc::c_int = 0;
                          let mut whole: libc::c_int = 0;
                          yf = YANKDEL as libc::c_int;
                          if c == 'y' as i32 || c == 'Y' as i32 {
                            yf = YANKONLY as libc::c_int
                          }
                          c1 = 'y' as i32;
                          if c != 'Y' as i32 {
                            c1 = get_one_char()
                          }
                          ml = find_range(&mut p, &mut q, c1 as libc::c_char);
                          place_cursor(0i32, 0);
                          if c1 == 27i32 {
                            c1 = 27i32;
                            c = c1
                          } else if !strchr(b"wW\x00" as *const u8 as *const libc::c_char, c1)
                            .is_null()
                          {
                            ml = 0;
                            if c == 'c' as i32 {
                              while ({
                                let mut bb__isspace: libc::c_uchar =
                                  (*q as libc::c_int - 9i32) as libc::c_uchar;
                                (bb__isspace as libc::c_int == ' ' as i32 - 9i32
                                  || bb__isspace as libc::c_int <= 13i32 - 9i32)
                                  as libc::c_int
                              }) != 0
                                && q > p
                              {
                                q = q.offset(-1)
                              }
                            }
                            (*ptr_to_globals).dot = yank_delete(p, q, ml, yf, 1i32)
                          } else if !strchr(
                            b"^0bBeEft%$ lh\x08\x7f\x00" as *const u8 as *const libc::c_char,
                            c1,
                          )
                          .is_null()
                          {
                            (*ptr_to_globals).dot = yank_delete(p, q, ml, yf, 1i32)
                          } else if !strchr(
                            b"cdykjGHL+-{}\r\n\x00" as *const u8 as *const libc::c_char,
                            c1,
                          )
                          .is_null()
                          {
                            (*ptr_to_globals).dot = yank_delete(p, q, ml, yf, 1i32);
                            whole = 1i32
                          } else {
                            c1 = 27i32;
                            c = c1;
                            ml = 0;
                            indicate_error();
                          }
                          if ml != 0 && whole != 0 {
                            if c == 'c' as i32 {
                              (*ptr_to_globals).dot = char_insert(
                                (*ptr_to_globals).dot,
                                '\n' as i32 as libc::c_char,
                                2i32,
                              );
                              if whole != 0
                                && (*ptr_to_globals).dot != (*ptr_to_globals).end.offset(-1)
                              {
                                dot_prev();
                              }
                            } else if c == 'd' as i32 {
                              dot_begin();
                              dot_skip_over_ws();
                            }
                          }
                          if c1 != 27i32 {
                            if c == 'c' as i32 {
                              strcpy(
                                buf.as_mut_ptr(),
                                b"Change\x00" as *const u8 as *const libc::c_char,
                              );
                              current_block = 8629930936610358348;
                            } else {
                              if c == 'd' as i32 {
                                strcpy(
                                  buf.as_mut_ptr(),
                                  b"Delete\x00" as *const u8 as *const libc::c_char,
                                );
                              }
                              if c == 'y' as i32 || c == 'Y' as i32 {
                                strcpy(
                                  buf.as_mut_ptr(),
                                  b"Yank\x00" as *const u8 as *const libc::c_char,
                                );
                              }
                              p = (*ptr_to_globals).reg[(*ptr_to_globals).YDreg as usize];
                              q = p.offset(strlen(p) as isize);
                              cnt = 0;
                              while p <= q {
                                if *p as libc::c_int == '\n' as i32 {
                                  cnt += 1
                                }
                                p = p.offset(1)
                              }
                              status_line(
                                b"%s %u lines (%u chars) using [%c]\x00" as *const u8
                                  as *const libc::c_char,
                                buf.as_mut_ptr(),
                                cnt,
                                strlen((*ptr_to_globals).reg[(*ptr_to_globals).YDreg as usize])
                                  as libc::c_uint,
                                what_reg() as libc::c_int,
                              );
                              end_cmd_q();
                              current_block = 15129665204879337069;
                            }
                          } else {
                            current_block = 15129665204879337069;
                          }
                        }
                        5591548203144509315 => {
                          current_block = 2636677179867529885;
                        }
                        _ => {}
                      }
                      match current_block {
                        15129665204879337069 => {}
                        8629930936610358348 => {}
                        _ => {
                          match current_block {
                            2636677179867529885 => {
                              current_block = 12309206730560524281;
                            }
                            _ => {}
                          }
                          match current_block {
                            12309206730560524281 => {
                              current_block = 3325768110057758661;
                            }
                            _ => {}
                          }
                          match current_block {
                            3325768110057758661 => {
                              current_block = 14815832896553429982;
                            }
                            _ => {}
                          }
                          match current_block {
                            14815832896553429982 => {
                              current_block = 10731695520297161438;
                            }
                            _ => {}
                          }
                          match current_block {
                            10731695520297161438 => {
                              if c == '0' as i32 && (*ptr_to_globals).cmdcnt < 1i32 {
                                dot_begin();
                              } else {
                                (*ptr_to_globals).cmdcnt =
                                  (*ptr_to_globals).cmdcnt * 10i32 + (c - '0' as i32)
                              }
                              current_block = 15129665204879337069;
                            }
                            _ => {}
                          }
                          match current_block {
                            15129665204879337069 => {}
                            _ => {
                              loop {
                                match current_block {
                                  16813369756331276724 => {
                                    msg = std::ptr::null();
                                    current_block = 7392824444931029276;
                                  }
                                  7392824444931029276 => {
                                    dir = FORWARD as libc::c_int;
                                    p = (*ptr_to_globals).dot.offset(1);
                                    if *(*ptr_to_globals).last_search_pattern.offset(0)
                                      as libc::c_int
                                      == '?' as i32
                                    {
                                      dir = BACK as libc::c_int;
                                      p = (*ptr_to_globals).dot.offset(-1)
                                    }
                                    current_block = 4166979493554389389;
                                  }
                                  _ => {
                                    q = char_search(
                                      p,
                                      (*ptr_to_globals).last_search_pattern.offset(1),
                                      dir << 1i32 | FULL as libc::c_int,
                                    );
                                    if !q.is_null() {
                                      (*ptr_to_globals).dot = q;
                                      msg = std::ptr::null()
                                    } else {
                                      p = (*ptr_to_globals).text;
                                      if dir == BACK as libc::c_int {
                                        p = (*ptr_to_globals).end.offset(-1)
                                      }
                                      q = char_search(
                                        p,
                                        (*ptr_to_globals).last_search_pattern.offset(1),
                                        dir << 1i32 | FULL as libc::c_int,
                                      );
                                      if !q.is_null() {
                                        (*ptr_to_globals).dot = q;
                                        msg = b"search hit BOTTOM, continuing at TOP\x00"
                                          as *const u8
                                          as *const libc::c_char;
                                        if dir == BACK as libc::c_int {
                                          msg = b"search hit TOP, continuing at BOTTOM\x00"
                                            as *const u8
                                            as *const libc::c_char
                                        }
                                      } else {
                                        msg = b"Pattern not found\x00" as *const u8
                                          as *const libc::c_char
                                      }
                                    }
                                    if !msg.is_null() {
                                      status_line_bold(
                                        b"%s\x00" as *const u8 as *const libc::c_char,
                                        msg,
                                      );
                                    }
                                    (*ptr_to_globals).cmdcnt -= 1;
                                    if (*ptr_to_globals).cmdcnt > 0 {
                                      current_block = 16813369756331276724;
                                    } else {
                                      break;
                                    }
                                  }
                                }
                              }
                              current_block = 15129665204879337069;
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
        104 => {
          current_block = 6152256259730122749;
          match current_block {
            16992905640583886232 => {
              loop {
                if (*(*ptr_to_globals).dot as libc::c_int - 'a' as i32) as libc::c_uchar
                  as libc::c_int
                  <= 'z' as i32 - 'a' as i32
                {
                  undo_push(
                    (*ptr_to_globals).dot,
                    1i32 as libc::c_uint,
                    1i32 as libc::c_uchar,
                  );
                  *(*ptr_to_globals).dot =
                    bb_ascii_toupper(*(*ptr_to_globals).dot as libc::c_uchar) as libc::c_char;
                  undo_push(
                    (*ptr_to_globals).dot,
                    1i32 as libc::c_uint,
                    2i32 as libc::c_uchar,
                  );
                } else if (*(*ptr_to_globals).dot as libc::c_int - 'A' as i32) as libc::c_uchar
                  as libc::c_int
                  <= 'Z' as i32 - 'A' as i32
                {
                  undo_push(
                    (*ptr_to_globals).dot,
                    1i32 as libc::c_uint,
                    1i32 as libc::c_uchar,
                  );
                  *(*ptr_to_globals).dot =
                    bb_ascii_tolower(*(*ptr_to_globals).dot as libc::c_uchar) as libc::c_char;
                  undo_push(
                    (*ptr_to_globals).dot,
                    1i32 as libc::c_uint,
                    2i32 as libc::c_uchar,
                  );
                }
                dot_right();
                (*ptr_to_globals).cmdcnt -= 1;
                if !((*ptr_to_globals).cmdcnt > 0) {
                  break;
                }
              }
              end_cmd_q();
              current_block = 15129665204879337069;
            }
            8729655159604064397 => {
              c1 = get_one_char();
              cnt = 0;
              if c1 == '.' as i32 {
                cnt = (*ptr_to_globals)
                  .rows
                  .wrapping_sub(2i32 as libc::c_uint)
                  .wrapping_div(2i32 as libc::c_uint) as libc::c_int
              }
              if c1 == '-' as i32 {
                cnt = (*ptr_to_globals).rows.wrapping_sub(2i32 as libc::c_uint) as libc::c_int
              }
              (*ptr_to_globals).screenbegin = begin_line((*ptr_to_globals).dot);
              dot_scroll(cnt, -1i32);
              current_block = 15129665204879337069;
            }
            15899500648299942075 => {
              (*ptr_to_globals).last_forward_char = get_one_char();
              do_cmd(';' as i32);
              if *(*ptr_to_globals).dot as libc::c_int == (*ptr_to_globals).last_forward_char {
                dot_left();
              }
              (*ptr_to_globals).last_forward_char = 0;
              current_block = 15129665204879337069;
            }
            9051390181078481641 => {
              c1 = get_one_char();
              if *(*ptr_to_globals).dot as libc::c_int != '\n' as i32 {
                (*ptr_to_globals).dot =
                  text_hole_delete((*ptr_to_globals).dot, (*ptr_to_globals).dot, 1i32);
                (*ptr_to_globals).dot =
                  char_insert((*ptr_to_globals).dot, c1 as libc::c_char, 2i32);
                dot_left();
              }
              end_cmd_q();
              current_block = 15129665204879337069;
            }
            877115918601926659 => {
              dir = FORWARD as libc::c_int;
              if c == 'b' as i32 {
                dir = BACK as libc::c_int
              }
              while !((*ptr_to_globals).dot.offset(dir as isize) < (*ptr_to_globals).text
                || (*ptr_to_globals).dot.offset(dir as isize) > (*ptr_to_globals).end.offset(-1))
              {
                (*ptr_to_globals).dot = (*ptr_to_globals).dot.offset(dir as isize);
                if ({
                  let mut bb__isspace: libc::c_uchar =
                    (*(*ptr_to_globals).dot as libc::c_int - 9i32) as libc::c_uchar;
                  (bb__isspace as libc::c_int == ' ' as i32 - 9i32
                    || bb__isspace as libc::c_int <= 13i32 - 9i32) as libc::c_int
                }) != 0
                {
                  (*ptr_to_globals).dot = skip_thing(
                    (*ptr_to_globals).dot,
                    if c == 'e' as i32 { 2i32 } else { 1i32 },
                    dir,
                    S_OVER_WS as libc::c_int,
                  )
                }
                if bb_ascii_isalnum(*(*ptr_to_globals).dot as libc::c_uchar) != 0
                  || *(*ptr_to_globals).dot as libc::c_int == '_' as i32
                {
                  (*ptr_to_globals).dot =
                    skip_thing((*ptr_to_globals).dot, 1i32, dir, S_END_ALNUM as libc::c_int)
                } else if *strchrnul(
                  b"!\"#$%&\'()*+,-./:;<=>?@[\\]^_`{|}~\x00" as *const u8 as *const libc::c_char,
                  *(*ptr_to_globals).dot as libc::c_int,
                )
                .offset(0)
                  != 0
                {
                  (*ptr_to_globals).dot =
                    skip_thing((*ptr_to_globals).dot, 1i32, dir, S_END_PUNCT as libc::c_int)
                }
                (*ptr_to_globals).cmdcnt -= 1;
                if !((*ptr_to_globals).cmdcnt > 0) {
                  break;
                }
              }
              current_block = 15129665204879337069;
            }
            1085022737867179637 => {
              dot_begin();
              dot_skip_over_ws();
              current_block = 15129665204879337069;
            }
            3113147720494587438 => {
              c1 = get_one_char();
              if c1 != 'Z' as i32 {
                indicate_error();
              } else if (*ptr_to_globals).modified_count != 0 {
                if 1i32 != 0 && (*ptr_to_globals).readonly_mode as libc::c_int != 0 {
                  status_line_bold(
                    b"\'%s\' is read only\x00" as *const u8 as *const libc::c_char,
                    (*ptr_to_globals).current_filename,
                  );
                } else {
                  cnt = file_write(
                    (*ptr_to_globals).current_filename,
                    (*ptr_to_globals).text,
                    (*ptr_to_globals).end.offset(-1),
                  );
                  if cnt < 0 {
                    if cnt == -1i32 {
                      status_line_bold(b"Write error: %m\x00" as *const u8 as *const libc::c_char);
                    }
                  } else if cnt as libc::c_long
                    == (*ptr_to_globals)
                      .end
                      .offset(-1)
                      .wrapping_offset_from((*ptr_to_globals).text)
                      as libc::c_long
                      + 1
                  {
                    (*ptr_to_globals).editing = 0 as smallint
                  }
                }
              } else {
                (*ptr_to_globals).editing = 0 as smallint
              }
              current_block = 15129665204879337069;
            }
            12960118908218882441 => {
              p = begin_line((*ptr_to_globals).dot);
              if *p.offset(-1i32 as isize) as libc::c_int == '\n' as i32 {
                dot_prev();
                current_block = 2087484904894455135;
              } else {
                dot_begin();
                (*ptr_to_globals).dot =
                  char_insert((*ptr_to_globals).dot, '\n' as i32 as libc::c_char, 1i32);
                dot_prev();
                current_block = 8629930936610358348;
              }
            }
            8720450212473544924 => {
              (*ptr_to_globals).dot = (*ptr_to_globals).screenbegin;
              cnt = 0;
              while (cnt as libc::c_uint)
                < (*ptr_to_globals)
                  .rows
                  .wrapping_sub(1i32 as libc::c_uint)
                  .wrapping_div(2i32 as libc::c_uint)
              {
                (*ptr_to_globals).dot = next_line((*ptr_to_globals).dot);
                cnt += 1
              }
              current_block = 15129665204879337069;
            }
            13015277209715431090 => {
              (*ptr_to_globals).dot = end_screen();
              if (*ptr_to_globals).cmdcnt as libc::c_uint
                > (*ptr_to_globals).rows.wrapping_sub(1i32 as libc::c_uint)
              {
                (*ptr_to_globals).cmdcnt =
                  (*ptr_to_globals).rows.wrapping_sub(1i32 as libc::c_uint) as libc::c_int
              }
              (*ptr_to_globals).cmdcnt -= 1;
              if (*ptr_to_globals).cmdcnt > 0 {
                do_cmd('-' as i32);
              }
              dot_begin();
              dot_skip_over_ws();
              current_block = 15129665204879337069;
            }
            9800435767766781385 => {
              loop {
                dot_end();
                if (*ptr_to_globals).dot < (*ptr_to_globals).end.offset(-1) {
                  undo_push(
                    (*ptr_to_globals).dot,
                    1i32 as libc::c_uint,
                    1i32 as libc::c_uchar,
                  );
                  let fresh15 = (*ptr_to_globals).dot;
                  (*ptr_to_globals).dot = (*ptr_to_globals).dot.offset(1);
                  *fresh15 = ' ' as i32 as libc::c_char;
                  undo_push(
                    (*ptr_to_globals).dot.offset(-1),
                    1i32 as libc::c_uint,
                    2i32 as libc::c_uchar,
                  );
                  while ({
                    let mut bb__isblank: libc::c_uchar = *(*ptr_to_globals).dot as libc::c_uchar;
                    (bb__isblank as libc::c_int == ' ' as i32
                      || bb__isblank as libc::c_int == '\t' as i32)
                      as libc::c_int
                  }) != 0
                  {
                    text_hole_delete((*ptr_to_globals).dot, (*ptr_to_globals).dot, 2i32);
                  }
                }
                (*ptr_to_globals).cmdcnt -= 1;
                if !((*ptr_to_globals).cmdcnt > 0) {
                  break;
                }
              }
              end_cmd_q();
              current_block = 15129665204879337069;
            }
            3432363526595694666 => {
              dot_begin();
              dot_skip_over_ws();
              current_block = 3268579060917229304;
            }
            3494829253343353619 => {
              (*ptr_to_globals).dot = (*ptr_to_globals).screenbegin;
              if (*ptr_to_globals).cmdcnt as libc::c_uint
                > (*ptr_to_globals).rows.wrapping_sub(1i32 as libc::c_uint)
              {
                (*ptr_to_globals).cmdcnt =
                  (*ptr_to_globals).rows.wrapping_sub(1i32 as libc::c_uint) as libc::c_int
              }
              (*ptr_to_globals).cmdcnt -= 1;
              if (*ptr_to_globals).cmdcnt > 0 {
                do_cmd('+' as i32);
              }
              dot_skip_over_ws();
              current_block = 15129665204879337069;
            }
            17973101765331640574 => {
              c1 = get_one_char();
              if c1 != 'g' as i32 {
                buf[0] = 'g' as i32 as libc::c_char;
                buf[1] = if c1 >= 0 { c1 } else { '*' as i32 } as libc::c_char;
                buf[2] = '\u{0}' as i32 as libc::c_char;
                not_implemented(buf.as_mut_ptr());
                current_block = 15129665204879337069;
              } else {
                if (*ptr_to_globals).cmdcnt == 0 {
                  (*ptr_to_globals).cmdcnt = 1i32
                }
                current_block = 11945623545738147997;
              }
            }
            16546625800574160972 => {
              save_dot = (*ptr_to_globals).dot;
              (*ptr_to_globals).dot = dollar_line((*ptr_to_globals).dot);
              (*ptr_to_globals).dot = yank_delete(
                save_dot,
                (*ptr_to_globals).dot,
                0,
                YANKDEL as libc::c_int,
                1i32,
              );
              if c == 'C' as i32 {
                current_block = 8629930936610358348;
              } else {
                if c == 'D' as i32 {
                  end_cmd_q();
                }
                current_block = 15129665204879337069;
              }
            }
            11937696639986586685 => {
              cnt = count_lines((*ptr_to_globals).text, (*ptr_to_globals).dot);
              c1 = get_one_char();
              find_range(&mut p, &mut q, c1 as libc::c_char);
              yank_delete(p, q, 1i32, YANKONLY as libc::c_int, 0);
              p = begin_line(p);
              q = end_line(q);
              i = count_lines(p, q);
              while i > 0 {
                if c == '<' as i32 {
                  if *p as libc::c_int == '\t' as i32 {
                    text_hole_delete(p, p, 0);
                  } else if *p as libc::c_int == ' ' as i32 {
                    j = 0;
                    while *p as libc::c_int == ' ' as i32 && j < (*ptr_to_globals).tabstop {
                      text_hole_delete(p, p, 0);
                      j += 1
                    }
                  }
                } else if c == '>' as i32 {
                  char_insert(p, '\t' as i32 as libc::c_char, 1i32);
                }
                i -= 1;
                p = next_line(p)
              }
              (*ptr_to_globals).dot = find_line(cnt);
              dot_skip_over_ws();
              end_cmd_q();
              current_block = 15129665204879337069;
            }
            17725350714912028156 => {
              p = get_input_line(b":\x00" as *const u8 as *const libc::c_char);
              colon(p);
              current_block = 15129665204879337069;
            }
            14526470074083880812 => {
              q = char_search(
                (*ptr_to_globals).dot,
                b"\n\n\x00" as *const u8 as *const libc::c_char,
                (FORWARD as libc::c_int) << 1i32 | FULL as libc::c_int,
              );
              if !q.is_null() {
                (*ptr_to_globals).dot = next_line(q)
              }
              current_block = 15129665204879337069;
            }
            8893187391306414141 => {
              q = char_search(
                (*ptr_to_globals).dot,
                b"\n\n\x00" as *const u8 as *const libc::c_char,
                ((BACK as libc::c_int as libc::c_uint) << 1i32
                  | FULL as libc::c_int as libc::c_uint) as libc::c_int,
              );
              if !q.is_null() {
                (*ptr_to_globals).dot = next_line(q)
              }
              current_block = 15129665204879337069;
            }
            7021673758293221412 => {
              dir = BACK as libc::c_int;
              p = (*ptr_to_globals).dot.offset(-1);
              if *(*ptr_to_globals).last_search_pattern.offset(0) as libc::c_int == '?' as i32 {
                dir = FORWARD as libc::c_int;
                p = (*ptr_to_globals).dot.offset(1)
              }
              current_block = 4166979493554389389;
            }
            18374191879090272823 => {
              buf[0] = c as libc::c_char;
              buf[1] = '\u{0}' as i32 as libc::c_char;
              q = get_input_line(buf.as_mut_ptr());
              if *q.offset(0) as libc::c_int != 0 && *q.offset(1) == 0 {
                if *(*ptr_to_globals).last_search_pattern.offset(0) != 0 {
                  *(*ptr_to_globals).last_search_pattern.offset(0) = c as libc::c_char
                }
                current_block = 7392824444931029276;
              } else if *q.offset(0) != 0 {
                free((*ptr_to_globals).last_search_pattern as *mut libc::c_void);
                (*ptr_to_globals).last_search_pattern = crate::libbb::xfuncs_printf::xstrdup(q);
                current_block = 7392824444931029276;
              } else {
                current_block = 15129665204879337069;
              }
            }
            16407828456666301883 => {
              if (*ptr_to_globals).last_forward_char == 0 {
                current_block = 15129665204879337069;
              } else {
                loop {
                  q = (*ptr_to_globals).dot.offset(-1);
                  while q >= (*ptr_to_globals).text
                    && *q as libc::c_int != '\n' as i32
                    && *q as libc::c_int != (*ptr_to_globals).last_forward_char
                  {
                    q = q.offset(-1)
                  }
                  if q >= (*ptr_to_globals).text
                    && *q as libc::c_int == (*ptr_to_globals).last_forward_char
                  {
                    (*ptr_to_globals).dot = q
                  }
                  (*ptr_to_globals).cmdcnt -= 1;
                  if !((*ptr_to_globals).cmdcnt > 0) {
                    break;
                  }
                }
                current_block = 15129665204879337069;
              }
            }
            9018432604062702004 => {
              q = (*ptr_to_globals).dot;
              while q < (*ptr_to_globals).end && *q as libc::c_int != '\n' as i32 {
                if !strchr(
                  b"()[]{}\x00" as *const u8 as *const libc::c_char,
                  *q as libc::c_int,
                )
                .is_null()
                {
                  p = find_pair(q, *q);
                  if p.is_null() {
                    indicate_error();
                  } else {
                    (*ptr_to_globals).dot = p
                  }
                  break;
                } else {
                  q = q.offset(1)
                }
              }
              if *q as libc::c_int == '\n' as i32 {
                indicate_error();
              }
              current_block = 15129665204879337069;
            }
            10247103787464459848 => {
              p = (*ptr_to_globals).reg[(*ptr_to_globals).YDreg as usize];
              if p.is_null() {
                status_line_bold(
                  b"Nothing in register %c\x00" as *const u8 as *const libc::c_char,
                  what_reg() as libc::c_int,
                );
              } else {
                if !strchr(p, '\n' as i32).is_null() {
                  if c == 'P' as i32 {
                    dot_begin();
                  }
                  if c == 'p' as i32 {
                    if end_line((*ptr_to_globals).dot) == (*ptr_to_globals).end.offset(-1) {
                      (*ptr_to_globals).dot = (*ptr_to_globals).end
                    } else {
                      dot_next();
                    }
                  }
                } else if c == 'p' as i32 {
                  dot_right();
                }
                string_insert((*ptr_to_globals).dot, p, 1i32);
                end_cmd_q();
              }
              current_block = 15129665204879337069;
            }
            15260732871948875843 => {
              c1 = (get_one_char() | 0x20i32) - 'a' as i32;
              if c1 as libc::c_uint <= 25i32 as libc::c_uint {
                (*ptr_to_globals).mark[c1 as usize] = (*ptr_to_globals).dot
              } else {
                indicate_error();
              }
              current_block = 15129665204879337069;
            }
            12738322036487086035 => {
              c1 = get_one_char() | 0x20i32;
              if (c1 - 'a' as i32) as libc::c_uint <= 25i32 as libc::c_uint {
                c1 = c1 - 'a' as i32;
                q = (*ptr_to_globals).mark[c1 as usize];
                if (*ptr_to_globals).text <= q && q < (*ptr_to_globals).end {
                  (*ptr_to_globals).dot = q;
                  dot_begin();
                  dot_skip_over_ws();
                }
              } else if c1 == '\'' as i32 {
                (*ptr_to_globals).dot = swap_context((*ptr_to_globals).dot);
                dot_begin();
                dot_skip_over_ws();
              } else {
                indicate_error();
              }
              current_block = 15129665204879337069;
            }
            13255096073384561358 => {
              c1 = (get_one_char() | 0x20i32) - 'a' as i32;
              if c1 as libc::c_uint <= 25i32 as libc::c_uint {
                (*ptr_to_globals).YDreg = c1 as smalluint
              } else {
                indicate_error();
              }
              current_block = 15129665204879337069;
            }
            10258711639984089377 => {
              if (*ptr_to_globals).cmd_mode as libc::c_int == 0 {
                indicate_error();
              }
              (*ptr_to_globals).cmd_mode = 0 as smallint;
              undo_queue_commit();
              end_cmd_q();
              (*ptr_to_globals).last_status_cksum = 0;
              current_block = 15129665204879337069;
            }
            11439127087547047736 => {
              buf[0] = c as libc::c_char;
              buf[1] = '\u{0}' as i32 as libc::c_char;
              not_implemented(buf.as_mut_ptr());
              end_cmd_q();
              current_block = 17440971994642376514;
            }
            7961798899781870241 => {
              dot_scroll(
                (*ptr_to_globals).rows.wrapping_sub(2i32 as libc::c_uint) as libc::c_int,
                -1i32,
              );
              current_block = 15129665204879337069;
            }
            9426343755402444879 => {
              dot_scroll(
                (*ptr_to_globals)
                  .rows
                  .wrapping_sub(2i32 as libc::c_uint)
                  .wrapping_div(2i32 as libc::c_uint) as libc::c_int,
                1i32,
              );
              current_block = 15129665204879337069;
            }
            13352459794680105913 => {
              dot_scroll(1i32, 1i32);
              current_block = 15129665204879337069;
            }
            14142272253464333006 => {
              dot_scroll(
                (*ptr_to_globals).rows.wrapping_sub(2i32 as libc::c_uint) as libc::c_int,
                1i32,
              );
              current_block = 15129665204879337069;
            }
            10758177197742640066 => {
              (*ptr_to_globals).last_status_cksum = 0;
              current_block = 15129665204879337069;
            }
            6152256259730122749 => {
              current_block = 7534742345255184552;
            }
            12883932598258173301 => {
              current_block = 8800996768013373992;
            }
            11242998110520238401 => {
              redraw(1i32);
              current_block = 15129665204879337069;
            }
            13619733043935729992 => {
              loop {
                dot_next();
                dot_skip_over_ws();
                (*ptr_to_globals).cmdcnt -= 1;
                if !((*ptr_to_globals).cmdcnt > 0) {
                  break;
                }
              }
              current_block = 15129665204879337069;
            }
            9339065157412720613 => {
              dot_scroll(
                (*ptr_to_globals)
                  .rows
                  .wrapping_sub(2i32 as libc::c_uint)
                  .wrapping_div(2i32 as libc::c_uint) as libc::c_int,
                -1i32,
              );
              current_block = 15129665204879337069;
            }
            11447082683497798022 => {
              dot_scroll(1i32, -1i32);
              current_block = 15129665204879337069;
            }
            5182000506326660482 => {
              current_block = 13993698454868426881;
            }
            1105010766850597332 => {
              if !(*ptr_to_globals).reg[27].is_null() {
                p = begin_line((*ptr_to_globals).dot);
                q = end_line((*ptr_to_globals).dot);
                p = text_hole_delete(p, q, 1i32);
                p = p.offset(string_insert(p, (*ptr_to_globals).reg[27], 2i32) as isize);
                (*ptr_to_globals).dot = p;
                dot_skip_over_ws();
              }
              current_block = 15129665204879337069;
            }
            8616046655533110204 => {
              undo_pop();
              current_block = 15129665204879337069;
            }
            5127767458142431603 => {
              loop {
                (*ptr_to_globals).dot = end_line((*ptr_to_globals).dot);
                (*ptr_to_globals).cmdcnt -= 1;
                if (*ptr_to_globals).cmdcnt <= 0 {
                  break;
                }
                dot_next();
              }
              current_block = 15129665204879337069;
            }
            222014967776118151 => {
              (*ptr_to_globals).last_forward_char = get_one_char();
              current_block = 7856905509180742666;
            }
            11209792479411604110 => {
              loop {
                dot_prev();
                dot_skip_over_ws();
                (*ptr_to_globals).cmdcnt -= 1;
                if !((*ptr_to_globals).cmdcnt > 0) {
                  break;
                }
              }
              current_block = 15129665204879337069;
            }
            3364823792826654116 => {
              if (*ptr_to_globals).lmc_len != 0 {
                (*ptr_to_globals).ioq_start = crate::libbb::xfuncs_printf::xstrndup(
                  (*ptr_to_globals).last_modifying_cmd.as_mut_ptr(),
                  (*ptr_to_globals).lmc_len,
                );
                (*ptr_to_globals).ioq = (*ptr_to_globals).ioq_start
              }
              current_block = 15129665204879337069;
            }
            18096603330221575131 => {
              current_block = 17498168302144015873;
            }
            16891123271837848903 => {
              dot_end();
              current_block = 1752638907092016026;
            }
            8517235759107662071 => {
              current_block = 5847749760081351726;
            }
            12525254419223051704 => {
              if (*ptr_to_globals).dot < (*ptr_to_globals).end.offset(-1) {
                (*ptr_to_globals).dot = yank_delete(
                  (*ptr_to_globals).dot,
                  (*ptr_to_globals).dot,
                  1i32,
                  YANKDEL as libc::c_int,
                  1i32,
                )
              }
              current_block = 15129665204879337069;
            }
            15232911949322867522 => {
              current_block = 17251831742223396249;
            }
            10863374208794025069 => {
              current_block = 1895262434596074581;
            }
            451126677064669119 => {
              loop {
                dot_prev();
                (*ptr_to_globals).dot = move_to_col(
                  (*ptr_to_globals).dot,
                  (*ptr_to_globals).ccol + (*ptr_to_globals).offset,
                );
                (*ptr_to_globals).cmdcnt -= 1;
                if !((*ptr_to_globals).cmdcnt > 0) {
                  break;
                }
              }
              current_block = 15129665204879337069;
            }
            4611735929166613116 => {
              loop {
                if bb_ascii_isalnum(*(*ptr_to_globals).dot as libc::c_uchar) != 0
                  || *(*ptr_to_globals).dot as libc::c_int == '_' as i32
                {
                  (*ptr_to_globals).dot = skip_thing(
                    (*ptr_to_globals).dot,
                    1i32,
                    FORWARD as libc::c_int,
                    S_END_ALNUM as libc::c_int,
                  )
                } else if *strchrnul(
                  b"!\"#$%&\'()*+,-./:;<=>?@[\\]^_`{|}~\x00" as *const u8 as *const libc::c_char,
                  *(*ptr_to_globals).dot as libc::c_int,
                )
                .offset(0)
                  != 0
                {
                  (*ptr_to_globals).dot = skip_thing(
                    (*ptr_to_globals).dot,
                    1i32,
                    FORWARD as libc::c_int,
                    S_END_PUNCT as libc::c_int,
                  )
                }
                if (*ptr_to_globals).dot < (*ptr_to_globals).end.offset(-1) {
                  (*ptr_to_globals).dot = (*ptr_to_globals).dot.offset(1)
                }
                if ({
                  let mut bb__isspace: libc::c_uchar =
                    (*(*ptr_to_globals).dot as libc::c_int - 9i32) as libc::c_uchar;
                  (bb__isspace as libc::c_int == ' ' as i32 - 9i32
                    || bb__isspace as libc::c_int <= 13i32 - 9i32) as libc::c_int
                }) != 0
                {
                  (*ptr_to_globals).dot = skip_thing(
                    (*ptr_to_globals).dot,
                    2i32,
                    FORWARD as libc::c_int,
                    S_OVER_WS as libc::c_int,
                  )
                }
                (*ptr_to_globals).cmdcnt -= 1;
                if !((*ptr_to_globals).cmdcnt > 0) {
                  break;
                }
              }
              current_block = 15129665204879337069;
            }
            4386451087681909888 => {
              (*ptr_to_globals).dot =
                move_to_col((*ptr_to_globals).dot, (*ptr_to_globals).cmdcnt - 1i32);
              current_block = 15129665204879337069;
            }
            1296397779060594135 => {
              dot_begin();
              current_block = 15129665204879337069;
            }
            _ => {}
          }
          match current_block {
            15129665204879337069 => {}
            8629930936610358348 => {}
            _ => {
              match current_block {
                17251831742223396249 => {
                  dir = 0;
                  if c == 'X' as i32 {
                    dir = -1i32
                  }
                  loop {
                    if *(*ptr_to_globals).dot.offset(dir as isize) as libc::c_int != '\n' as i32 {
                      if c == 'X' as i32 {
                        (*ptr_to_globals).dot = (*ptr_to_globals).dot.offset(-1)
                      }
                      (*ptr_to_globals).dot = yank_delete(
                        (*ptr_to_globals).dot,
                        (*ptr_to_globals).dot,
                        0,
                        YANKDEL as libc::c_int,
                        1i32,
                      )
                    }
                    (*ptr_to_globals).cmdcnt -= 1;
                    if !((*ptr_to_globals).cmdcnt > 0) {
                      break;
                    }
                  }
                  end_cmd_q();
                  if c == 's' as i32 {
                    current_block = 8629930936610358348;
                  } else {
                    current_block = 15129665204879337069;
                  }
                }
                2087484904894455135 => {
                  dot_end();
                  (*ptr_to_globals).dot =
                    char_insert((*ptr_to_globals).dot, '\n' as i32 as libc::c_char, 1i32);
                  current_block = 8629930936610358348;
                }
                11945623545738147997 => {
                  (*ptr_to_globals).dot = (*ptr_to_globals).end.offset(-1);
                  if (*ptr_to_globals).cmdcnt > 0 {
                    (*ptr_to_globals).dot = find_line((*ptr_to_globals).cmdcnt)
                  }
                  dot_skip_over_ws();
                  current_block = 15129665204879337069;
                }
                5847749760081351726 => {
                  dir = FORWARD as libc::c_int;
                  if c == 'B' as i32 {
                    dir = BACK as libc::c_int
                  }
                  loop {
                    if c == 'W' as i32
                      || ({
                        let mut bb__isspace: libc::c_uchar =
                          (*(*ptr_to_globals).dot.offset(dir as isize) as libc::c_int - 9i32)
                            as libc::c_uchar;
                        (bb__isspace as libc::c_int == ' ' as i32 - 9i32
                          || bb__isspace as libc::c_int <= 13i32 - 9i32)
                          as libc::c_int
                      }) != 0
                    {
                      (*ptr_to_globals).dot =
                        skip_thing((*ptr_to_globals).dot, 1i32, dir, S_TO_WS as libc::c_int);
                      (*ptr_to_globals).dot =
                        skip_thing((*ptr_to_globals).dot, 2i32, dir, S_OVER_WS as libc::c_int)
                    }
                    if c != 'W' as i32 {
                      (*ptr_to_globals).dot =
                        skip_thing((*ptr_to_globals).dot, 1i32, dir, S_BEFORE_WS as libc::c_int)
                    }
                    (*ptr_to_globals).cmdcnt -= 1;
                    if !((*ptr_to_globals).cmdcnt > 0) {
                      break;
                    }
                  }
                  current_block = 15129665204879337069;
                }
                17440971994642376514 => {
                  current_block = 15129665204879337069;
                }
                7534742345255184552 => {
                  current_block = 17247297260531395789;
                }
                8800996768013373992 => {
                  loop {
                    dot_next();
                    (*ptr_to_globals).dot = move_to_col(
                      (*ptr_to_globals).dot,
                      (*ptr_to_globals).ccol + (*ptr_to_globals).offset,
                    );
                    (*ptr_to_globals).cmdcnt -= 1;
                    if !((*ptr_to_globals).cmdcnt > 0) {
                      break;
                    }
                  }
                  current_block = 15129665204879337069;
                }
                13993698454868426881 => {
                  loop {
                    dot_right();
                    (*ptr_to_globals).cmdcnt -= 1;
                    if !((*ptr_to_globals).cmdcnt > 0) {
                      break;
                    }
                  }
                  current_block = 15129665204879337069;
                }
                7856905509180742666 => {
                  while !((*ptr_to_globals).last_forward_char == 0) {
                    q = (*ptr_to_globals).dot.offset(1);
                    while q < (*ptr_to_globals).end.offset(-1)
                      && *q as libc::c_int != '\n' as i32
                      && *q as libc::c_int != (*ptr_to_globals).last_forward_char
                    {
                      q = q.offset(1)
                    }
                    if *q as libc::c_int == (*ptr_to_globals).last_forward_char {
                      (*ptr_to_globals).dot = q
                    }
                    (*ptr_to_globals).cmdcnt -= 1;
                    if !((*ptr_to_globals).cmdcnt > 0) {
                      break;
                    }
                  }
                  current_block = 15129665204879337069;
                }
                17498168302144015873 => {
                  current_block = 8681395796513813967;
                }
                1752638907092016026 => {
                  if *(*ptr_to_globals).dot as libc::c_int != '\n' as i32 {
                    (*ptr_to_globals).dot = (*ptr_to_globals).dot.offset(1)
                  }
                  current_block = 8629930936610358348;
                }
                3268579060917229304 => {
                  current_block = 8629930936610358348;
                }
                1895262434596074581 => {
                  current_block = 8908416993177701018;
                }
                _ => {}
              }
              match current_block {
                8629930936610358348 => {}
                15129665204879337069 => {}
                _ => {
                  match current_block {
                    17247297260531395789 => {
                      loop {
                        dot_left();
                        (*ptr_to_globals).cmdcnt -= 1;
                        if !((*ptr_to_globals).cmdcnt > 0) {
                          break;
                        }
                      }
                      current_block = 15129665204879337069;
                    }
                    8681395796513813967 => {
                      current_block = 5591548203144509315;
                    }
                    8908416993177701018 => {
                      current_block = 16124761010012532485;
                    }
                    _ => {}
                  }
                  match current_block {
                    15129665204879337069 => {}
                    _ => {
                      match current_block {
                        16124761010012532485 => {
                          let mut yf: libc::c_int = 0;
                          let mut ml: libc::c_int = 0;
                          let mut whole: libc::c_int = 0;
                          yf = YANKDEL as libc::c_int;
                          if c == 'y' as i32 || c == 'Y' as i32 {
                            yf = YANKONLY as libc::c_int
                          }
                          c1 = 'y' as i32;
                          if c != 'Y' as i32 {
                            c1 = get_one_char()
                          }
                          ml = find_range(&mut p, &mut q, c1 as libc::c_char);
                          place_cursor(0i32, 0);
                          if c1 == 27i32 {
                            c1 = 27i32;
                            c = c1
                          } else if !strchr(b"wW\x00" as *const u8 as *const libc::c_char, c1)
                            .is_null()
                          {
                            ml = 0;
                            if c == 'c' as i32 {
                              while ({
                                let mut bb__isspace: libc::c_uchar =
                                  (*q as libc::c_int - 9i32) as libc::c_uchar;
                                (bb__isspace as libc::c_int == ' ' as i32 - 9i32
                                  || bb__isspace as libc::c_int <= 13i32 - 9i32)
                                  as libc::c_int
                              }) != 0
                                && q > p
                              {
                                q = q.offset(-1)
                              }
                            }
                            (*ptr_to_globals).dot = yank_delete(p, q, ml, yf, 1i32)
                          } else if !strchr(
                            b"^0bBeEft%$ lh\x08\x7f\x00" as *const u8 as *const libc::c_char,
                            c1,
                          )
                          .is_null()
                          {
                            (*ptr_to_globals).dot = yank_delete(p, q, ml, yf, 1i32)
                          } else if !strchr(
                            b"cdykjGHL+-{}\r\n\x00" as *const u8 as *const libc::c_char,
                            c1,
                          )
                          .is_null()
                          {
                            (*ptr_to_globals).dot = yank_delete(p, q, ml, yf, 1i32);
                            whole = 1i32
                          } else {
                            c1 = 27i32;
                            c = c1;
                            ml = 0;
                            indicate_error();
                          }
                          if ml != 0 && whole != 0 {
                            if c == 'c' as i32 {
                              (*ptr_to_globals).dot = char_insert(
                                (*ptr_to_globals).dot,
                                '\n' as i32 as libc::c_char,
                                2i32,
                              );
                              if whole != 0
                                && (*ptr_to_globals).dot != (*ptr_to_globals).end.offset(-1)
                              {
                                dot_prev();
                              }
                            } else if c == 'd' as i32 {
                              dot_begin();
                              dot_skip_over_ws();
                            }
                          }
                          if c1 != 27i32 {
                            if c == 'c' as i32 {
                              strcpy(
                                buf.as_mut_ptr(),
                                b"Change\x00" as *const u8 as *const libc::c_char,
                              );
                              current_block = 8629930936610358348;
                            } else {
                              if c == 'd' as i32 {
                                strcpy(
                                  buf.as_mut_ptr(),
                                  b"Delete\x00" as *const u8 as *const libc::c_char,
                                );
                              }
                              if c == 'y' as i32 || c == 'Y' as i32 {
                                strcpy(
                                  buf.as_mut_ptr(),
                                  b"Yank\x00" as *const u8 as *const libc::c_char,
                                );
                              }
                              p = (*ptr_to_globals).reg[(*ptr_to_globals).YDreg as usize];
                              q = p.offset(strlen(p) as isize);
                              cnt = 0;
                              while p <= q {
                                if *p as libc::c_int == '\n' as i32 {
                                  cnt += 1
                                }
                                p = p.offset(1)
                              }
                              status_line(
                                b"%s %u lines (%u chars) using [%c]\x00" as *const u8
                                  as *const libc::c_char,
                                buf.as_mut_ptr(),
                                cnt,
                                strlen((*ptr_to_globals).reg[(*ptr_to_globals).YDreg as usize])
                                  as libc::c_uint,
                                what_reg() as libc::c_int,
                              );
                              end_cmd_q();
                              current_block = 15129665204879337069;
                            }
                          } else {
                            current_block = 15129665204879337069;
                          }
                        }
                        5591548203144509315 => {
                          current_block = 2636677179867529885;
                        }
                        _ => {}
                      }
                      match current_block {
                        15129665204879337069 => {}
                        8629930936610358348 => {}
                        _ => {
                          match current_block {
                            2636677179867529885 => {
                              current_block = 12309206730560524281;
                            }
                            _ => {}
                          }
                          match current_block {
                            12309206730560524281 => {
                              current_block = 3325768110057758661;
                            }
                            _ => {}
                          }
                          match current_block {
                            3325768110057758661 => {
                              current_block = 14815832896553429982;
                            }
                            _ => {}
                          }
                          match current_block {
                            14815832896553429982 => {
                              current_block = 10731695520297161438;
                            }
                            _ => {}
                          }
                          match current_block {
                            10731695520297161438 => {
                              if c == '0' as i32 && (*ptr_to_globals).cmdcnt < 1i32 {
                                dot_begin();
                              } else {
                                (*ptr_to_globals).cmdcnt =
                                  (*ptr_to_globals).cmdcnt * 10i32 + (c - '0' as i32)
                              }
                              current_block = 15129665204879337069;
                            }
                            _ => {}
                          }
                          match current_block {
                            15129665204879337069 => {}
                            _ => {
                              loop {
                                match current_block {
                                  16813369756331276724 => {
                                    msg = std::ptr::null();
                                    current_block = 7392824444931029276;
                                  }
                                  7392824444931029276 => {
                                    dir = FORWARD as libc::c_int;
                                    p = (*ptr_to_globals).dot.offset(1);
                                    if *(*ptr_to_globals).last_search_pattern.offset(0)
                                      as libc::c_int
                                      == '?' as i32
                                    {
                                      dir = BACK as libc::c_int;
                                      p = (*ptr_to_globals).dot.offset(-1)
                                    }
                                    current_block = 4166979493554389389;
                                  }
                                  _ => {
                                    q = char_search(
                                      p,
                                      (*ptr_to_globals).last_search_pattern.offset(1),
                                      dir << 1i32 | FULL as libc::c_int,
                                    );
                                    if !q.is_null() {
                                      (*ptr_to_globals).dot = q;
                                      msg = std::ptr::null()
                                    } else {
                                      p = (*ptr_to_globals).text;
                                      if dir == BACK as libc::c_int {
                                        p = (*ptr_to_globals).end.offset(-1)
                                      }
                                      q = char_search(
                                        p,
                                        (*ptr_to_globals).last_search_pattern.offset(1),
                                        dir << 1i32 | FULL as libc::c_int,
                                      );
                                      if !q.is_null() {
                                        (*ptr_to_globals).dot = q;
                                        msg = b"search hit BOTTOM, continuing at TOP\x00"
                                          as *const u8
                                          as *const libc::c_char;
                                        if dir == BACK as libc::c_int {
                                          msg = b"search hit TOP, continuing at BOTTOM\x00"
                                            as *const u8
                                            as *const libc::c_char
                                        }
                                      } else {
                                        msg = b"Pattern not found\x00" as *const u8
                                          as *const libc::c_char
                                      }
                                    }
                                    if !msg.is_null() {
                                      status_line_bold(
                                        b"%s\x00" as *const u8 as *const libc::c_char,
                                        msg,
                                      );
                                    }
                                    (*ptr_to_globals).cmdcnt -= 1;
                                    if (*ptr_to_globals).cmdcnt > 0 {
                                      current_block = 16813369756331276724;
                                    } else {
                                      break;
                                    }
                                  }
                                }
                              }
                              current_block = 15129665204879337069;
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
        -5 => {
          current_block = 7534742345255184552;
          match current_block {
            16992905640583886232 => {
              loop {
                if (*(*ptr_to_globals).dot as libc::c_int - 'a' as i32) as libc::c_uchar
                  as libc::c_int
                  <= 'z' as i32 - 'a' as i32
                {
                  undo_push(
                    (*ptr_to_globals).dot,
                    1i32 as libc::c_uint,
                    1i32 as libc::c_uchar,
                  );
                  *(*ptr_to_globals).dot =
                    bb_ascii_toupper(*(*ptr_to_globals).dot as libc::c_uchar) as libc::c_char;
                  undo_push(
                    (*ptr_to_globals).dot,
                    1i32 as libc::c_uint,
                    2i32 as libc::c_uchar,
                  );
                } else if (*(*ptr_to_globals).dot as libc::c_int - 'A' as i32) as libc::c_uchar
                  as libc::c_int
                  <= 'Z' as i32 - 'A' as i32
                {
                  undo_push(
                    (*ptr_to_globals).dot,
                    1i32 as libc::c_uint,
                    1i32 as libc::c_uchar,
                  );
                  *(*ptr_to_globals).dot =
                    bb_ascii_tolower(*(*ptr_to_globals).dot as libc::c_uchar) as libc::c_char;
                  undo_push(
                    (*ptr_to_globals).dot,
                    1i32 as libc::c_uint,
                    2i32 as libc::c_uchar,
                  );
                }
                dot_right();
                (*ptr_to_globals).cmdcnt -= 1;
                if !((*ptr_to_globals).cmdcnt > 0) {
                  break;
                }
              }
              end_cmd_q();
              current_block = 15129665204879337069;
            }
            8729655159604064397 => {
              c1 = get_one_char();
              cnt = 0;
              if c1 == '.' as i32 {
                cnt = (*ptr_to_globals)
                  .rows
                  .wrapping_sub(2i32 as libc::c_uint)
                  .wrapping_div(2i32 as libc::c_uint) as libc::c_int
              }
              if c1 == '-' as i32 {
                cnt = (*ptr_to_globals).rows.wrapping_sub(2i32 as libc::c_uint) as libc::c_int
              }
              (*ptr_to_globals).screenbegin = begin_line((*ptr_to_globals).dot);
              dot_scroll(cnt, -1i32);
              current_block = 15129665204879337069;
            }
            15899500648299942075 => {
              (*ptr_to_globals).last_forward_char = get_one_char();
              do_cmd(';' as i32);
              if *(*ptr_to_globals).dot as libc::c_int == (*ptr_to_globals).last_forward_char {
                dot_left();
              }
              (*ptr_to_globals).last_forward_char = 0;
              current_block = 15129665204879337069;
            }
            9051390181078481641 => {
              c1 = get_one_char();
              if *(*ptr_to_globals).dot as libc::c_int != '\n' as i32 {
                (*ptr_to_globals).dot =
                  text_hole_delete((*ptr_to_globals).dot, (*ptr_to_globals).dot, 1i32);
                (*ptr_to_globals).dot =
                  char_insert((*ptr_to_globals).dot, c1 as libc::c_char, 2i32);
                dot_left();
              }
              end_cmd_q();
              current_block = 15129665204879337069;
            }
            877115918601926659 => {
              dir = FORWARD as libc::c_int;
              if c == 'b' as i32 {
                dir = BACK as libc::c_int
              }
              while !((*ptr_to_globals).dot.offset(dir as isize) < (*ptr_to_globals).text
                || (*ptr_to_globals).dot.offset(dir as isize) > (*ptr_to_globals).end.offset(-1))
              {
                (*ptr_to_globals).dot = (*ptr_to_globals).dot.offset(dir as isize);
                if ({
                  let mut bb__isspace: libc::c_uchar =
                    (*(*ptr_to_globals).dot as libc::c_int - 9i32) as libc::c_uchar;
                  (bb__isspace as libc::c_int == ' ' as i32 - 9i32
                    || bb__isspace as libc::c_int <= 13i32 - 9i32) as libc::c_int
                }) != 0
                {
                  (*ptr_to_globals).dot = skip_thing(
                    (*ptr_to_globals).dot,
                    if c == 'e' as i32 { 2i32 } else { 1i32 },
                    dir,
                    S_OVER_WS as libc::c_int,
                  )
                }
                if bb_ascii_isalnum(*(*ptr_to_globals).dot as libc::c_uchar) != 0
                  || *(*ptr_to_globals).dot as libc::c_int == '_' as i32
                {
                  (*ptr_to_globals).dot =
                    skip_thing((*ptr_to_globals).dot, 1i32, dir, S_END_ALNUM as libc::c_int)
                } else if *strchrnul(
                  b"!\"#$%&\'()*+,-./:;<=>?@[\\]^_`{|}~\x00" as *const u8 as *const libc::c_char,
                  *(*ptr_to_globals).dot as libc::c_int,
                )
                .offset(0)
                  != 0
                {
                  (*ptr_to_globals).dot =
                    skip_thing((*ptr_to_globals).dot, 1i32, dir, S_END_PUNCT as libc::c_int)
                }
                (*ptr_to_globals).cmdcnt -= 1;
                if !((*ptr_to_globals).cmdcnt > 0) {
                  break;
                }
              }
              current_block = 15129665204879337069;
            }
            1085022737867179637 => {
              dot_begin();
              dot_skip_over_ws();
              current_block = 15129665204879337069;
            }
            3113147720494587438 => {
              c1 = get_one_char();
              if c1 != 'Z' as i32 {
                indicate_error();
              } else if (*ptr_to_globals).modified_count != 0 {
                if 1i32 != 0 && (*ptr_to_globals).readonly_mode as libc::c_int != 0 {
                  status_line_bold(
                    b"\'%s\' is read only\x00" as *const u8 as *const libc::c_char,
                    (*ptr_to_globals).current_filename,
                  );
                } else {
                  cnt = file_write(
                    (*ptr_to_globals).current_filename,
                    (*ptr_to_globals).text,
                    (*ptr_to_globals).end.offset(-1),
                  );
                  if cnt < 0 {
                    if cnt == -1i32 {
                      status_line_bold(b"Write error: %m\x00" as *const u8 as *const libc::c_char);
                    }
                  } else if cnt as libc::c_long
                    == (*ptr_to_globals)
                      .end
                      .offset(-1)
                      .wrapping_offset_from((*ptr_to_globals).text)
                      as libc::c_long
                      + 1
                  {
                    (*ptr_to_globals).editing = 0 as smallint
                  }
                }
              } else {
                (*ptr_to_globals).editing = 0 as smallint
              }
              current_block = 15129665204879337069;
            }
            12960118908218882441 => {
              p = begin_line((*ptr_to_globals).dot);
              if *p.offset(-1i32 as isize) as libc::c_int == '\n' as i32 {
                dot_prev();
                current_block = 2087484904894455135;
              } else {
                dot_begin();
                (*ptr_to_globals).dot =
                  char_insert((*ptr_to_globals).dot, '\n' as i32 as libc::c_char, 1i32);
                dot_prev();
                current_block = 8629930936610358348;
              }
            }
            8720450212473544924 => {
              (*ptr_to_globals).dot = (*ptr_to_globals).screenbegin;
              cnt = 0;
              while (cnt as libc::c_uint)
                < (*ptr_to_globals)
                  .rows
                  .wrapping_sub(1i32 as libc::c_uint)
                  .wrapping_div(2i32 as libc::c_uint)
              {
                (*ptr_to_globals).dot = next_line((*ptr_to_globals).dot);
                cnt += 1
              }
              current_block = 15129665204879337069;
            }
            13015277209715431090 => {
              (*ptr_to_globals).dot = end_screen();
              if (*ptr_to_globals).cmdcnt as libc::c_uint
                > (*ptr_to_globals).rows.wrapping_sub(1i32 as libc::c_uint)
              {
                (*ptr_to_globals).cmdcnt =
                  (*ptr_to_globals).rows.wrapping_sub(1i32 as libc::c_uint) as libc::c_int
              }
              (*ptr_to_globals).cmdcnt -= 1;
              if (*ptr_to_globals).cmdcnt > 0 {
                do_cmd('-' as i32);
              }
              dot_begin();
              dot_skip_over_ws();
              current_block = 15129665204879337069;
            }
            9800435767766781385 => {
              loop {
                dot_end();
                if (*ptr_to_globals).dot < (*ptr_to_globals).end.offset(-1) {
                  undo_push(
                    (*ptr_to_globals).dot,
                    1i32 as libc::c_uint,
                    1i32 as libc::c_uchar,
                  );
                  let fresh15 = (*ptr_to_globals).dot;
                  (*ptr_to_globals).dot = (*ptr_to_globals).dot.offset(1);
                  *fresh15 = ' ' as i32 as libc::c_char;
                  undo_push(
                    (*ptr_to_globals).dot.offset(-1),
                    1i32 as libc::c_uint,
                    2i32 as libc::c_uchar,
                  );
                  while ({
                    let mut bb__isblank: libc::c_uchar = *(*ptr_to_globals).dot as libc::c_uchar;
                    (bb__isblank as libc::c_int == ' ' as i32
                      || bb__isblank as libc::c_int == '\t' as i32)
                      as libc::c_int
                  }) != 0
                  {
                    text_hole_delete((*ptr_to_globals).dot, (*ptr_to_globals).dot, 2i32);
                  }
                }
                (*ptr_to_globals).cmdcnt -= 1;
                if !((*ptr_to_globals).cmdcnt > 0) {
                  break;
                }
              }
              end_cmd_q();
              current_block = 15129665204879337069;
            }
            3432363526595694666 => {
              dot_begin();
              dot_skip_over_ws();
              current_block = 3268579060917229304;
            }
            3494829253343353619 => {
              (*ptr_to_globals).dot = (*ptr_to_globals).screenbegin;
              if (*ptr_to_globals).cmdcnt as libc::c_uint
                > (*ptr_to_globals).rows.wrapping_sub(1i32 as libc::c_uint)
              {
                (*ptr_to_globals).cmdcnt =
                  (*ptr_to_globals).rows.wrapping_sub(1i32 as libc::c_uint) as libc::c_int
              }
              (*ptr_to_globals).cmdcnt -= 1;
              if (*ptr_to_globals).cmdcnt > 0 {
                do_cmd('+' as i32);
              }
              dot_skip_over_ws();
              current_block = 15129665204879337069;
            }
            17973101765331640574 => {
              c1 = get_one_char();
              if c1 != 'g' as i32 {
                buf[0] = 'g' as i32 as libc::c_char;
                buf[1] = if c1 >= 0 { c1 } else { '*' as i32 } as libc::c_char;
                buf[2] = '\u{0}' as i32 as libc::c_char;
                not_implemented(buf.as_mut_ptr());
                current_block = 15129665204879337069;
              } else {
                if (*ptr_to_globals).cmdcnt == 0 {
                  (*ptr_to_globals).cmdcnt = 1i32
                }
                current_block = 11945623545738147997;
              }
            }
            16546625800574160972 => {
              save_dot = (*ptr_to_globals).dot;
              (*ptr_to_globals).dot = dollar_line((*ptr_to_globals).dot);
              (*ptr_to_globals).dot = yank_delete(
                save_dot,
                (*ptr_to_globals).dot,
                0,
                YANKDEL as libc::c_int,
                1i32,
              );
              if c == 'C' as i32 {
                current_block = 8629930936610358348;
              } else {
                if c == 'D' as i32 {
                  end_cmd_q();
                }
                current_block = 15129665204879337069;
              }
            }
            11937696639986586685 => {
              cnt = count_lines((*ptr_to_globals).text, (*ptr_to_globals).dot);
              c1 = get_one_char();
              find_range(&mut p, &mut q, c1 as libc::c_char);
              yank_delete(p, q, 1i32, YANKONLY as libc::c_int, 0);
              p = begin_line(p);
              q = end_line(q);
              i = count_lines(p, q);
              while i > 0 {
                if c == '<' as i32 {
                  if *p as libc::c_int == '\t' as i32 {
                    text_hole_delete(p, p, 0);
                  } else if *p as libc::c_int == ' ' as i32 {
                    j = 0;
                    while *p as libc::c_int == ' ' as i32 && j < (*ptr_to_globals).tabstop {
                      text_hole_delete(p, p, 0);
                      j += 1
                    }
                  }
                } else if c == '>' as i32 {
                  char_insert(p, '\t' as i32 as libc::c_char, 1i32);
                }
                i -= 1;
                p = next_line(p)
              }
              (*ptr_to_globals).dot = find_line(cnt);
              dot_skip_over_ws();
              end_cmd_q();
              current_block = 15129665204879337069;
            }
            17725350714912028156 => {
              p = get_input_line(b":\x00" as *const u8 as *const libc::c_char);
              colon(p);
              current_block = 15129665204879337069;
            }
            14526470074083880812 => {
              q = char_search(
                (*ptr_to_globals).dot,
                b"\n\n\x00" as *const u8 as *const libc::c_char,
                (FORWARD as libc::c_int) << 1i32 | FULL as libc::c_int,
              );
              if !q.is_null() {
                (*ptr_to_globals).dot = next_line(q)
              }
              current_block = 15129665204879337069;
            }
            8893187391306414141 => {
              q = char_search(
                (*ptr_to_globals).dot,
                b"\n\n\x00" as *const u8 as *const libc::c_char,
                ((BACK as libc::c_int as libc::c_uint) << 1i32
                  | FULL as libc::c_int as libc::c_uint) as libc::c_int,
              );
              if !q.is_null() {
                (*ptr_to_globals).dot = next_line(q)
              }
              current_block = 15129665204879337069;
            }
            7021673758293221412 => {
              dir = BACK as libc::c_int;
              p = (*ptr_to_globals).dot.offset(-1);
              if *(*ptr_to_globals).last_search_pattern.offset(0) as libc::c_int == '?' as i32 {
                dir = FORWARD as libc::c_int;
                p = (*ptr_to_globals).dot.offset(1)
              }
              current_block = 4166979493554389389;
            }
            18374191879090272823 => {
              buf[0] = c as libc::c_char;
              buf[1] = '\u{0}' as i32 as libc::c_char;
              q = get_input_line(buf.as_mut_ptr());
              if *q.offset(0) as libc::c_int != 0 && *q.offset(1) == 0 {
                if *(*ptr_to_globals).last_search_pattern.offset(0) != 0 {
                  *(*ptr_to_globals).last_search_pattern.offset(0) = c as libc::c_char
                }
                current_block = 7392824444931029276;
              } else if *q.offset(0) != 0 {
                free((*ptr_to_globals).last_search_pattern as *mut libc::c_void);
                (*ptr_to_globals).last_search_pattern = crate::libbb::xfuncs_printf::xstrdup(q);
                current_block = 7392824444931029276;
              } else {
                current_block = 15129665204879337069;
              }
            }
            16407828456666301883 => {
              if (*ptr_to_globals).last_forward_char == 0 {
                current_block = 15129665204879337069;
              } else {
                loop {
                  q = (*ptr_to_globals).dot.offset(-1);
                  while q >= (*ptr_to_globals).text
                    && *q as libc::c_int != '\n' as i32
                    && *q as libc::c_int != (*ptr_to_globals).last_forward_char
                  {
                    q = q.offset(-1)
                  }
                  if q >= (*ptr_to_globals).text
                    && *q as libc::c_int == (*ptr_to_globals).last_forward_char
                  {
                    (*ptr_to_globals).dot = q
                  }
                  (*ptr_to_globals).cmdcnt -= 1;
                  if !((*ptr_to_globals).cmdcnt > 0) {
                    break;
                  }
                }
                current_block = 15129665204879337069;
              }
            }
            9018432604062702004 => {
              q = (*ptr_to_globals).dot;
              while q < (*ptr_to_globals).end && *q as libc::c_int != '\n' as i32 {
                if !strchr(
                  b"()[]{}\x00" as *const u8 as *const libc::c_char,
                  *q as libc::c_int,
                )
                .is_null()
                {
                  p = find_pair(q, *q);
                  if p.is_null() {
                    indicate_error();
                  } else {
                    (*ptr_to_globals).dot = p
                  }
                  break;
                } else {
                  q = q.offset(1)
                }
              }
              if *q as libc::c_int == '\n' as i32 {
                indicate_error();
              }
              current_block = 15129665204879337069;
            }
            10247103787464459848 => {
              p = (*ptr_to_globals).reg[(*ptr_to_globals).YDreg as usize];
              if p.is_null() {
                status_line_bold(
                  b"Nothing in register %c\x00" as *const u8 as *const libc::c_char,
                  what_reg() as libc::c_int,
                );
              } else {
                if !strchr(p, '\n' as i32).is_null() {
                  if c == 'P' as i32 {
                    dot_begin();
                  }
                  if c == 'p' as i32 {
                    if end_line((*ptr_to_globals).dot) == (*ptr_to_globals).end.offset(-1) {
                      (*ptr_to_globals).dot = (*ptr_to_globals).end
                    } else {
                      dot_next();
                    }
                  }
                } else if c == 'p' as i32 {
                  dot_right();
                }
                string_insert((*ptr_to_globals).dot, p, 1i32);
                end_cmd_q();
              }
              current_block = 15129665204879337069;
            }
            15260732871948875843 => {
              c1 = (get_one_char() | 0x20i32) - 'a' as i32;
              if c1 as libc::c_uint <= 25i32 as libc::c_uint {
                (*ptr_to_globals).mark[c1 as usize] = (*ptr_to_globals).dot
              } else {
                indicate_error();
              }
              current_block = 15129665204879337069;
            }
            12738322036487086035 => {
              c1 = get_one_char() | 0x20i32;
              if (c1 - 'a' as i32) as libc::c_uint <= 25i32 as libc::c_uint {
                c1 = c1 - 'a' as i32;
                q = (*ptr_to_globals).mark[c1 as usize];
                if (*ptr_to_globals).text <= q && q < (*ptr_to_globals).end {
                  (*ptr_to_globals).dot = q;
                  dot_begin();
                  dot_skip_over_ws();
                }
              } else if c1 == '\'' as i32 {
                (*ptr_to_globals).dot = swap_context((*ptr_to_globals).dot);
                dot_begin();
                dot_skip_over_ws();
              } else {
                indicate_error();
              }
              current_block = 15129665204879337069;
            }
            13255096073384561358 => {
              c1 = (get_one_char() | 0x20i32) - 'a' as i32;
              if c1 as libc::c_uint <= 25i32 as libc::c_uint {
                (*ptr_to_globals).YDreg = c1 as smalluint
              } else {
                indicate_error();
              }
              current_block = 15129665204879337069;
            }
            10258711639984089377 => {
              if (*ptr_to_globals).cmd_mode as libc::c_int == 0 {
                indicate_error();
              }
              (*ptr_to_globals).cmd_mode = 0 as smallint;
              undo_queue_commit();
              end_cmd_q();
              (*ptr_to_globals).last_status_cksum = 0;
              current_block = 15129665204879337069;
            }
            11439127087547047736 => {
              buf[0] = c as libc::c_char;
              buf[1] = '\u{0}' as i32 as libc::c_char;
              not_implemented(buf.as_mut_ptr());
              end_cmd_q();
              current_block = 17440971994642376514;
            }
            7961798899781870241 => {
              dot_scroll(
                (*ptr_to_globals).rows.wrapping_sub(2i32 as libc::c_uint) as libc::c_int,
                -1i32,
              );
              current_block = 15129665204879337069;
            }
            9426343755402444879 => {
              dot_scroll(
                (*ptr_to_globals)
                  .rows
                  .wrapping_sub(2i32 as libc::c_uint)
                  .wrapping_div(2i32 as libc::c_uint) as libc::c_int,
                1i32,
              );
              current_block = 15129665204879337069;
            }
            13352459794680105913 => {
              dot_scroll(1i32, 1i32);
              current_block = 15129665204879337069;
            }
            14142272253464333006 => {
              dot_scroll(
                (*ptr_to_globals).rows.wrapping_sub(2i32 as libc::c_uint) as libc::c_int,
                1i32,
              );
              current_block = 15129665204879337069;
            }
            10758177197742640066 => {
              (*ptr_to_globals).last_status_cksum = 0;
              current_block = 15129665204879337069;
            }
            6152256259730122749 => {
              current_block = 7534742345255184552;
            }
            12883932598258173301 => {
              current_block = 8800996768013373992;
            }
            11242998110520238401 => {
              redraw(1i32);
              current_block = 15129665204879337069;
            }
            13619733043935729992 => {
              loop {
                dot_next();
                dot_skip_over_ws();
                (*ptr_to_globals).cmdcnt -= 1;
                if !((*ptr_to_globals).cmdcnt > 0) {
                  break;
                }
              }
              current_block = 15129665204879337069;
            }
            9339065157412720613 => {
              dot_scroll(
                (*ptr_to_globals)
                  .rows
                  .wrapping_sub(2i32 as libc::c_uint)
                  .wrapping_div(2i32 as libc::c_uint) as libc::c_int,
                -1i32,
              );
              current_block = 15129665204879337069;
            }
            11447082683497798022 => {
              dot_scroll(1i32, -1i32);
              current_block = 15129665204879337069;
            }
            5182000506326660482 => {
              current_block = 13993698454868426881;
            }
            1105010766850597332 => {
              if !(*ptr_to_globals).reg[27].is_null() {
                p = begin_line((*ptr_to_globals).dot);
                q = end_line((*ptr_to_globals).dot);
                p = text_hole_delete(p, q, 1i32);
                p = p.offset(string_insert(p, (*ptr_to_globals).reg[27], 2i32) as isize);
                (*ptr_to_globals).dot = p;
                dot_skip_over_ws();
              }
              current_block = 15129665204879337069;
            }
            8616046655533110204 => {
              undo_pop();
              current_block = 15129665204879337069;
            }
            5127767458142431603 => {
              loop {
                (*ptr_to_globals).dot = end_line((*ptr_to_globals).dot);
                (*ptr_to_globals).cmdcnt -= 1;
                if (*ptr_to_globals).cmdcnt <= 0 {
                  break;
                }
                dot_next();
              }
              current_block = 15129665204879337069;
            }
            222014967776118151 => {
              (*ptr_to_globals).last_forward_char = get_one_char();
              current_block = 7856905509180742666;
            }
            11209792479411604110 => {
              loop {
                dot_prev();
                dot_skip_over_ws();
                (*ptr_to_globals).cmdcnt -= 1;
                if !((*ptr_to_globals).cmdcnt > 0) {
                  break;
                }
              }
              current_block = 15129665204879337069;
            }
            3364823792826654116 => {
              if (*ptr_to_globals).lmc_len != 0 {
                (*ptr_to_globals).ioq_start = crate::libbb::xfuncs_printf::xstrndup(
                  (*ptr_to_globals).last_modifying_cmd.as_mut_ptr(),
                  (*ptr_to_globals).lmc_len,
                );
                (*ptr_to_globals).ioq = (*ptr_to_globals).ioq_start
              }
              current_block = 15129665204879337069;
            }
            18096603330221575131 => {
              current_block = 17498168302144015873;
            }
            16891123271837848903 => {
              dot_end();
              current_block = 1752638907092016026;
            }
            8517235759107662071 => {
              current_block = 5847749760081351726;
            }
            12525254419223051704 => {
              if (*ptr_to_globals).dot < (*ptr_to_globals).end.offset(-1) {
                (*ptr_to_globals).dot = yank_delete(
                  (*ptr_to_globals).dot,
                  (*ptr_to_globals).dot,
                  1i32,
                  YANKDEL as libc::c_int,
                  1i32,
                )
              }
              current_block = 15129665204879337069;
            }
            15232911949322867522 => {
              current_block = 17251831742223396249;
            }
            10863374208794025069 => {
              current_block = 1895262434596074581;
            }
            451126677064669119 => {
              loop {
                dot_prev();
                (*ptr_to_globals).dot = move_to_col(
                  (*ptr_to_globals).dot,
                  (*ptr_to_globals).ccol + (*ptr_to_globals).offset,
                );
                (*ptr_to_globals).cmdcnt -= 1;
                if !((*ptr_to_globals).cmdcnt > 0) {
                  break;
                }
              }
              current_block = 15129665204879337069;
            }
            4611735929166613116 => {
              loop {
                if bb_ascii_isalnum(*(*ptr_to_globals).dot as libc::c_uchar) != 0
                  || *(*ptr_to_globals).dot as libc::c_int == '_' as i32
                {
                  (*ptr_to_globals).dot = skip_thing(
                    (*ptr_to_globals).dot,
                    1i32,
                    FORWARD as libc::c_int,
                    S_END_ALNUM as libc::c_int,
                  )
                } else if *strchrnul(
                  b"!\"#$%&\'()*+,-./:;<=>?@[\\]^_`{|}~\x00" as *const u8 as *const libc::c_char,
                  *(*ptr_to_globals).dot as libc::c_int,
                )
                .offset(0)
                  != 0
                {
                  (*ptr_to_globals).dot = skip_thing(
                    (*ptr_to_globals).dot,
                    1i32,
                    FORWARD as libc::c_int,
                    S_END_PUNCT as libc::c_int,
                  )
                }
                if (*ptr_to_globals).dot < (*ptr_to_globals).end.offset(-1) {
                  (*ptr_to_globals).dot = (*ptr_to_globals).dot.offset(1)
                }
                if ({
                  let mut bb__isspace: libc::c_uchar =
                    (*(*ptr_to_globals).dot as libc::c_int - 9i32) as libc::c_uchar;
                  (bb__isspace as libc::c_int == ' ' as i32 - 9i32
                    || bb__isspace as libc::c_int <= 13i32 - 9i32) as libc::c_int
                }) != 0
                {
                  (*ptr_to_globals).dot = skip_thing(
                    (*ptr_to_globals).dot,
                    2i32,
                    FORWARD as libc::c_int,
                    S_OVER_WS as libc::c_int,
                  )
                }
                (*ptr_to_globals).cmdcnt -= 1;
                if !((*ptr_to_globals).cmdcnt > 0) {
                  break;
                }
              }
              current_block = 15129665204879337069;
            }
            4386451087681909888 => {
              (*ptr_to_globals).dot =
                move_to_col((*ptr_to_globals).dot, (*ptr_to_globals).cmdcnt - 1i32);
              current_block = 15129665204879337069;
            }
            1296397779060594135 => {
              dot_begin();
              current_block = 15129665204879337069;
            }
            _ => {}
          }
          match current_block {
            15129665204879337069 => {}
            8629930936610358348 => {}
            _ => {
              match current_block {
                17251831742223396249 => {
                  dir = 0;
                  if c == 'X' as i32 {
                    dir = -1i32
                  }
                  loop {
                    if *(*ptr_to_globals).dot.offset(dir as isize) as libc::c_int != '\n' as i32 {
                      if c == 'X' as i32 {
                        (*ptr_to_globals).dot = (*ptr_to_globals).dot.offset(-1)
                      }
                      (*ptr_to_globals).dot = yank_delete(
                        (*ptr_to_globals).dot,
                        (*ptr_to_globals).dot,
                        0,
                        YANKDEL as libc::c_int,
                        1i32,
                      )
                    }
                    (*ptr_to_globals).cmdcnt -= 1;
                    if !((*ptr_to_globals).cmdcnt > 0) {
                      break;
                    }
                  }
                  end_cmd_q();
                  if c == 's' as i32 {
                    current_block = 8629930936610358348;
                  } else {
                    current_block = 15129665204879337069;
                  }
                }
                2087484904894455135 => {
                  dot_end();
                  (*ptr_to_globals).dot =
                    char_insert((*ptr_to_globals).dot, '\n' as i32 as libc::c_char, 1i32);
                  current_block = 8629930936610358348;
                }
                11945623545738147997 => {
                  (*ptr_to_globals).dot = (*ptr_to_globals).end.offset(-1);
                  if (*ptr_to_globals).cmdcnt > 0 {
                    (*ptr_to_globals).dot = find_line((*ptr_to_globals).cmdcnt)
                  }
                  dot_skip_over_ws();
                  current_block = 15129665204879337069;
                }
                5847749760081351726 => {
                  dir = FORWARD as libc::c_int;
                  if c == 'B' as i32 {
                    dir = BACK as libc::c_int
                  }
                  loop {
                    if c == 'W' as i32
                      || ({
                        let mut bb__isspace: libc::c_uchar =
                          (*(*ptr_to_globals).dot.offset(dir as isize) as libc::c_int - 9i32)
                            as libc::c_uchar;
                        (bb__isspace as libc::c_int == ' ' as i32 - 9i32
                          || bb__isspace as libc::c_int <= 13i32 - 9i32)
                          as libc::c_int
                      }) != 0
                    {
                      (*ptr_to_globals).dot =
                        skip_thing((*ptr_to_globals).dot, 1i32, dir, S_TO_WS as libc::c_int);
                      (*ptr_to_globals).dot =
                        skip_thing((*ptr_to_globals).dot, 2i32, dir, S_OVER_WS as libc::c_int)
                    }
                    if c != 'W' as i32 {
                      (*ptr_to_globals).dot =
                        skip_thing((*ptr_to_globals).dot, 1i32, dir, S_BEFORE_WS as libc::c_int)
                    }
                    (*ptr_to_globals).cmdcnt -= 1;
                    if !((*ptr_to_globals).cmdcnt > 0) {
                      break;
                    }
                  }
                  current_block = 15129665204879337069;
                }
                17440971994642376514 => {
                  current_block = 15129665204879337069;
                }
                7534742345255184552 => {
                  current_block = 17247297260531395789;
                }
                8800996768013373992 => {
                  loop {
                    dot_next();
                    (*ptr_to_globals).dot = move_to_col(
                      (*ptr_to_globals).dot,
                      (*ptr_to_globals).ccol + (*ptr_to_globals).offset,
                    );
                    (*ptr_to_globals).cmdcnt -= 1;
                    if !((*ptr_to_globals).cmdcnt > 0) {
                      break;
                    }
                  }
                  current_block = 15129665204879337069;
                }
                13993698454868426881 => {
                  loop {
                    dot_right();
                    (*ptr_to_globals).cmdcnt -= 1;
                    if !((*ptr_to_globals).cmdcnt > 0) {
                      break;
                    }
                  }
                  current_block = 15129665204879337069;
                }
                7856905509180742666 => {
                  while !((*ptr_to_globals).last_forward_char == 0) {
                    q = (*ptr_to_globals).dot.offset(1);
                    while q < (*ptr_to_globals).end.offset(-1)
                      && *q as libc::c_int != '\n' as i32
                      && *q as libc::c_int != (*ptr_to_globals).last_forward_char
                    {
                      q = q.offset(1)
                    }
                    if *q as libc::c_int == (*ptr_to_globals).last_forward_char {
                      (*ptr_to_globals).dot = q
                    }
                    (*ptr_to_globals).cmdcnt -= 1;
                    if !((*ptr_to_globals).cmdcnt > 0) {
                      break;
                    }
                  }
                  current_block = 15129665204879337069;
                }
                17498168302144015873 => {
                  current_block = 8681395796513813967;
                }
                1752638907092016026 => {
                  if *(*ptr_to_globals).dot as libc::c_int != '\n' as i32 {
                    (*ptr_to_globals).dot = (*ptr_to_globals).dot.offset(1)
                  }
                  current_block = 8629930936610358348;
                }
                3268579060917229304 => {
                  current_block = 8629930936610358348;
                }
                1895262434596074581 => {
                  current_block = 8908416993177701018;
                }
                _ => {}
              }
              match current_block {
                8629930936610358348 => {}
                15129665204879337069 => {}
                _ => {
                  match current_block {
                    17247297260531395789 => {
                      loop {
                        dot_left();
                        (*ptr_to_globals).cmdcnt -= 1;
                        if !((*ptr_to_globals).cmdcnt > 0) {
                          break;
                        }
                      }
                      current_block = 15129665204879337069;
                    }
                    8681395796513813967 => {
                      current_block = 5591548203144509315;
                    }
                    8908416993177701018 => {
                      current_block = 16124761010012532485;
                    }
                    _ => {}
                  }
                  match current_block {
                    15129665204879337069 => {}
                    _ => {
                      match current_block {
                        16124761010012532485 => {
                          let mut yf: libc::c_int = 0;
                          let mut ml: libc::c_int = 0;
                          let mut whole: libc::c_int = 0;
                          yf = YANKDEL as libc::c_int;
                          if c == 'y' as i32 || c == 'Y' as i32 {
                            yf = YANKONLY as libc::c_int
                          }
                          c1 = 'y' as i32;
                          if c != 'Y' as i32 {
                            c1 = get_one_char()
                          }
                          ml = find_range(&mut p, &mut q, c1 as libc::c_char);
                          place_cursor(0i32, 0);
                          if c1 == 27i32 {
                            c1 = 27i32;
                            c = c1
                          } else if !strchr(b"wW\x00" as *const u8 as *const libc::c_char, c1)
                            .is_null()
                          {
                            ml = 0;
                            if c == 'c' as i32 {
                              while ({
                                let mut bb__isspace: libc::c_uchar =
                                  (*q as libc::c_int - 9i32) as libc::c_uchar;
                                (bb__isspace as libc::c_int == ' ' as i32 - 9i32
                                  || bb__isspace as libc::c_int <= 13i32 - 9i32)
                                  as libc::c_int
                              }) != 0
                                && q > p
                              {
                                q = q.offset(-1)
                              }
                            }
                            (*ptr_to_globals).dot = yank_delete(p, q, ml, yf, 1i32)
                          } else if !strchr(
                            b"^0bBeEft%$ lh\x08\x7f\x00" as *const u8 as *const libc::c_char,
                            c1,
                          )
                          .is_null()
                          {
                            (*ptr_to_globals).dot = yank_delete(p, q, ml, yf, 1i32)
                          } else if !strchr(
                            b"cdykjGHL+-{}\r\n\x00" as *const u8 as *const libc::c_char,
                            c1,
                          )
                          .is_null()
                          {
                            (*ptr_to_globals).dot = yank_delete(p, q, ml, yf, 1i32);
                            whole = 1i32
                          } else {
                            c1 = 27i32;
                            c = c1;
                            ml = 0;
                            indicate_error();
                          }
                          if ml != 0 && whole != 0 {
                            if c == 'c' as i32 {
                              (*ptr_to_globals).dot = char_insert(
                                (*ptr_to_globals).dot,
                                '\n' as i32 as libc::c_char,
                                2i32,
                              );
                              if whole != 0
                                && (*ptr_to_globals).dot != (*ptr_to_globals).end.offset(-1)
                              {
                                dot_prev();
                              }
                            } else if c == 'd' as i32 {
                              dot_begin();
                              dot_skip_over_ws();
                            }
                          }
                          if c1 != 27i32 {
                            if c == 'c' as i32 {
                              strcpy(
                                buf.as_mut_ptr(),
                                b"Change\x00" as *const u8 as *const libc::c_char,
                              );
                              current_block = 8629930936610358348;
                            } else {
                              if c == 'd' as i32 {
                                strcpy(
                                  buf.as_mut_ptr(),
                                  b"Delete\x00" as *const u8 as *const libc::c_char,
                                );
                              }
                              if c == 'y' as i32 || c == 'Y' as i32 {
                                strcpy(
                                  buf.as_mut_ptr(),
                                  b"Yank\x00" as *const u8 as *const libc::c_char,
                                );
                              }
                              p = (*ptr_to_globals).reg[(*ptr_to_globals).YDreg as usize];
                              q = p.offset(strlen(p) as isize);
                              cnt = 0;
                              while p <= q {
                                if *p as libc::c_int == '\n' as i32 {
                                  cnt += 1
                                }
                                p = p.offset(1)
                              }
                              status_line(
                                b"%s %u lines (%u chars) using [%c]\x00" as *const u8
                                  as *const libc::c_char,
                                buf.as_mut_ptr(),
                                cnt,
                                strlen((*ptr_to_globals).reg[(*ptr_to_globals).YDreg as usize])
                                  as libc::c_uint,
                                what_reg() as libc::c_int,
                              );
                              end_cmd_q();
                              current_block = 15129665204879337069;
                            }
                          } else {
                            current_block = 15129665204879337069;
                          }
                        }
                        5591548203144509315 => {
                          current_block = 2636677179867529885;
                        }
                        _ => {}
                      }
                      match current_block {
                        15129665204879337069 => {}
                        8629930936610358348 => {}
                        _ => {
                          match current_block {
                            2636677179867529885 => {
                              current_block = 12309206730560524281;
                            }
                            _ => {}
                          }
                          match current_block {
                            12309206730560524281 => {
                              current_block = 3325768110057758661;
                            }
                            _ => {}
                          }
                          match current_block {
                            3325768110057758661 => {
                              current_block = 14815832896553429982;
                            }
                            _ => {}
                          }
                          match current_block {
                            14815832896553429982 => {
                              current_block = 10731695520297161438;
                            }
                            _ => {}
                          }
                          match current_block {
                            10731695520297161438 => {
                              if c == '0' as i32 && (*ptr_to_globals).cmdcnt < 1i32 {
                                dot_begin();
                              } else {
                                (*ptr_to_globals).cmdcnt =
                                  (*ptr_to_globals).cmdcnt * 10i32 + (c - '0' as i32)
                              }
                              current_block = 15129665204879337069;
                            }
                            _ => {}
                          }
                          match current_block {
                            15129665204879337069 => {}
                            _ => {
                              loop {
                                match current_block {
                                  16813369756331276724 => {
                                    msg = std::ptr::null();
                                    current_block = 7392824444931029276;
                                  }
                                  7392824444931029276 => {
                                    dir = FORWARD as libc::c_int;
                                    p = (*ptr_to_globals).dot.offset(1);
                                    if *(*ptr_to_globals).last_search_pattern.offset(0)
                                      as libc::c_int
                                      == '?' as i32
                                    {
                                      dir = BACK as libc::c_int;
                                      p = (*ptr_to_globals).dot.offset(-1)
                                    }
                                    current_block = 4166979493554389389;
                                  }
                                  _ => {
                                    q = char_search(
                                      p,
                                      (*ptr_to_globals).last_search_pattern.offset(1),
                                      dir << 1i32 | FULL as libc::c_int,
                                    );
                                    if !q.is_null() {
                                      (*ptr_to_globals).dot = q;
                                      msg = std::ptr::null()
                                    } else {
                                      p = (*ptr_to_globals).text;
                                      if dir == BACK as libc::c_int {
                                        p = (*ptr_to_globals).end.offset(-1)
                                      }
                                      q = char_search(
                                        p,
                                        (*ptr_to_globals).last_search_pattern.offset(1),
                                        dir << 1i32 | FULL as libc::c_int,
                                      );
                                      if !q.is_null() {
                                        (*ptr_to_globals).dot = q;
                                        msg = b"search hit BOTTOM, continuing at TOP\x00"
                                          as *const u8
                                          as *const libc::c_char;
                                        if dir == BACK as libc::c_int {
                                          msg = b"search hit TOP, continuing at BOTTOM\x00"
                                            as *const u8
                                            as *const libc::c_char
                                        }
                                      } else {
                                        msg = b"Pattern not found\x00" as *const u8
                                          as *const libc::c_char
                                      }
                                    }
                                    if !msg.is_null() {
                                      status_line_bold(
                                        b"%s\x00" as *const u8 as *const libc::c_char,
                                        msg,
                                      );
                                    }
                                    (*ptr_to_globals).cmdcnt -= 1;
                                    if (*ptr_to_globals).cmdcnt > 0 {
                                      current_block = 16813369756331276724;
                                    } else {
                                      break;
                                    }
                                  }
                                }
                              }
                              current_block = 15129665204879337069;
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
        8 | 127 => {
          current_block = 17247297260531395789;
          match current_block {
            16992905640583886232 => {
              loop {
                if (*(*ptr_to_globals).dot as libc::c_int - 'a' as i32) as libc::c_uchar
                  as libc::c_int
                  <= 'z' as i32 - 'a' as i32
                {
                  undo_push(
                    (*ptr_to_globals).dot,
                    1i32 as libc::c_uint,
                    1i32 as libc::c_uchar,
                  );
                  *(*ptr_to_globals).dot =
                    bb_ascii_toupper(*(*ptr_to_globals).dot as libc::c_uchar) as libc::c_char;
                  undo_push(
                    (*ptr_to_globals).dot,
                    1i32 as libc::c_uint,
                    2i32 as libc::c_uchar,
                  );
                } else if (*(*ptr_to_globals).dot as libc::c_int - 'A' as i32) as libc::c_uchar
                  as libc::c_int
                  <= 'Z' as i32 - 'A' as i32
                {
                  undo_push(
                    (*ptr_to_globals).dot,
                    1i32 as libc::c_uint,
                    1i32 as libc::c_uchar,
                  );
                  *(*ptr_to_globals).dot =
                    bb_ascii_tolower(*(*ptr_to_globals).dot as libc::c_uchar) as libc::c_char;
                  undo_push(
                    (*ptr_to_globals).dot,
                    1i32 as libc::c_uint,
                    2i32 as libc::c_uchar,
                  );
                }
                dot_right();
                (*ptr_to_globals).cmdcnt -= 1;
                if !((*ptr_to_globals).cmdcnt > 0) {
                  break;
                }
              }
              end_cmd_q();
              current_block = 15129665204879337069;
            }
            8729655159604064397 => {
              c1 = get_one_char();
              cnt = 0;
              if c1 == '.' as i32 {
                cnt = (*ptr_to_globals)
                  .rows
                  .wrapping_sub(2i32 as libc::c_uint)
                  .wrapping_div(2i32 as libc::c_uint) as libc::c_int
              }
              if c1 == '-' as i32 {
                cnt = (*ptr_to_globals).rows.wrapping_sub(2i32 as libc::c_uint) as libc::c_int
              }
              (*ptr_to_globals).screenbegin = begin_line((*ptr_to_globals).dot);
              dot_scroll(cnt, -1i32);
              current_block = 15129665204879337069;
            }
            15899500648299942075 => {
              (*ptr_to_globals).last_forward_char = get_one_char();
              do_cmd(';' as i32);
              if *(*ptr_to_globals).dot as libc::c_int == (*ptr_to_globals).last_forward_char {
                dot_left();
              }
              (*ptr_to_globals).last_forward_char = 0;
              current_block = 15129665204879337069;
            }
            9051390181078481641 => {
              c1 = get_one_char();
              if *(*ptr_to_globals).dot as libc::c_int != '\n' as i32 {
                (*ptr_to_globals).dot =
                  text_hole_delete((*ptr_to_globals).dot, (*ptr_to_globals).dot, 1i32);
                (*ptr_to_globals).dot =
                  char_insert((*ptr_to_globals).dot, c1 as libc::c_char, 2i32);
                dot_left();
              }
              end_cmd_q();
              current_block = 15129665204879337069;
            }
            877115918601926659 => {
              dir = FORWARD as libc::c_int;
              if c == 'b' as i32 {
                dir = BACK as libc::c_int
              }
              while !((*ptr_to_globals).dot.offset(dir as isize) < (*ptr_to_globals).text
                || (*ptr_to_globals).dot.offset(dir as isize) > (*ptr_to_globals).end.offset(-1))
              {
                (*ptr_to_globals).dot = (*ptr_to_globals).dot.offset(dir as isize);
                if ({
                  let mut bb__isspace: libc::c_uchar =
                    (*(*ptr_to_globals).dot as libc::c_int - 9i32) as libc::c_uchar;
                  (bb__isspace as libc::c_int == ' ' as i32 - 9i32
                    || bb__isspace as libc::c_int <= 13i32 - 9i32) as libc::c_int
                }) != 0
                {
                  (*ptr_to_globals).dot = skip_thing(
                    (*ptr_to_globals).dot,
                    if c == 'e' as i32 { 2i32 } else { 1i32 },
                    dir,
                    S_OVER_WS as libc::c_int,
                  )
                }
                if bb_ascii_isalnum(*(*ptr_to_globals).dot as libc::c_uchar) != 0
                  || *(*ptr_to_globals).dot as libc::c_int == '_' as i32
                {
                  (*ptr_to_globals).dot =
                    skip_thing((*ptr_to_globals).dot, 1i32, dir, S_END_ALNUM as libc::c_int)
                } else if *strchrnul(
                  b"!\"#$%&\'()*+,-./:;<=>?@[\\]^_`{|}~\x00" as *const u8 as *const libc::c_char,
                  *(*ptr_to_globals).dot as libc::c_int,
                )
                .offset(0)
                  != 0
                {
                  (*ptr_to_globals).dot =
                    skip_thing((*ptr_to_globals).dot, 1i32, dir, S_END_PUNCT as libc::c_int)
                }
                (*ptr_to_globals).cmdcnt -= 1;
                if !((*ptr_to_globals).cmdcnt > 0) {
                  break;
                }
              }
              current_block = 15129665204879337069;
            }
            1085022737867179637 => {
              dot_begin();
              dot_skip_over_ws();
              current_block = 15129665204879337069;
            }
            3113147720494587438 => {
              c1 = get_one_char();
              if c1 != 'Z' as i32 {
                indicate_error();
              } else if (*ptr_to_globals).modified_count != 0 {
                if 1i32 != 0 && (*ptr_to_globals).readonly_mode as libc::c_int != 0 {
                  status_line_bold(
                    b"\'%s\' is read only\x00" as *const u8 as *const libc::c_char,
                    (*ptr_to_globals).current_filename,
                  );
                } else {
                  cnt = file_write(
                    (*ptr_to_globals).current_filename,
                    (*ptr_to_globals).text,
                    (*ptr_to_globals).end.offset(-1),
                  );
                  if cnt < 0 {
                    if cnt == -1i32 {
                      status_line_bold(b"Write error: %m\x00" as *const u8 as *const libc::c_char);
                    }
                  } else if cnt as libc::c_long
                    == (*ptr_to_globals)
                      .end
                      .offset(-1)
                      .wrapping_offset_from((*ptr_to_globals).text)
                      as libc::c_long
                      + 1
                  {
                    (*ptr_to_globals).editing = 0 as smallint
                  }
                }
              } else {
                (*ptr_to_globals).editing = 0 as smallint
              }
              current_block = 15129665204879337069;
            }
            12960118908218882441 => {
              p = begin_line((*ptr_to_globals).dot);
              if *p.offset(-1i32 as isize) as libc::c_int == '\n' as i32 {
                dot_prev();
                current_block = 2087484904894455135;
              } else {
                dot_begin();
                (*ptr_to_globals).dot =
                  char_insert((*ptr_to_globals).dot, '\n' as i32 as libc::c_char, 1i32);
                dot_prev();
                current_block = 8629930936610358348;
              }
            }
            8720450212473544924 => {
              (*ptr_to_globals).dot = (*ptr_to_globals).screenbegin;
              cnt = 0;
              while (cnt as libc::c_uint)
                < (*ptr_to_globals)
                  .rows
                  .wrapping_sub(1i32 as libc::c_uint)
                  .wrapping_div(2i32 as libc::c_uint)
              {
                (*ptr_to_globals).dot = next_line((*ptr_to_globals).dot);
                cnt += 1
              }
              current_block = 15129665204879337069;
            }
            13015277209715431090 => {
              (*ptr_to_globals).dot = end_screen();
              if (*ptr_to_globals).cmdcnt as libc::c_uint
                > (*ptr_to_globals).rows.wrapping_sub(1i32 as libc::c_uint)
              {
                (*ptr_to_globals).cmdcnt =
                  (*ptr_to_globals).rows.wrapping_sub(1i32 as libc::c_uint) as libc::c_int
              }
              (*ptr_to_globals).cmdcnt -= 1;
              if (*ptr_to_globals).cmdcnt > 0 {
                do_cmd('-' as i32);
              }
              dot_begin();
              dot_skip_over_ws();
              current_block = 15129665204879337069;
            }
            9800435767766781385 => {
              loop {
                dot_end();
                if (*ptr_to_globals).dot < (*ptr_to_globals).end.offset(-1) {
                  undo_push(
                    (*ptr_to_globals).dot,
                    1i32 as libc::c_uint,
                    1i32 as libc::c_uchar,
                  );
                  let fresh15 = (*ptr_to_globals).dot;
                  (*ptr_to_globals).dot = (*ptr_to_globals).dot.offset(1);
                  *fresh15 = ' ' as i32 as libc::c_char;
                  undo_push(
                    (*ptr_to_globals).dot.offset(-1),
                    1i32 as libc::c_uint,
                    2i32 as libc::c_uchar,
                  );
                  while ({
                    let mut bb__isblank: libc::c_uchar = *(*ptr_to_globals).dot as libc::c_uchar;
                    (bb__isblank as libc::c_int == ' ' as i32
                      || bb__isblank as libc::c_int == '\t' as i32)
                      as libc::c_int
                  }) != 0
                  {
                    text_hole_delete((*ptr_to_globals).dot, (*ptr_to_globals).dot, 2i32);
                  }
                }
                (*ptr_to_globals).cmdcnt -= 1;
                if !((*ptr_to_globals).cmdcnt > 0) {
                  break;
                }
              }
              end_cmd_q();
              current_block = 15129665204879337069;
            }
            3432363526595694666 => {
              dot_begin();
              dot_skip_over_ws();
              current_block = 3268579060917229304;
            }
            3494829253343353619 => {
              (*ptr_to_globals).dot = (*ptr_to_globals).screenbegin;
              if (*ptr_to_globals).cmdcnt as libc::c_uint
                > (*ptr_to_globals).rows.wrapping_sub(1i32 as libc::c_uint)
              {
                (*ptr_to_globals).cmdcnt =
                  (*ptr_to_globals).rows.wrapping_sub(1i32 as libc::c_uint) as libc::c_int
              }
              (*ptr_to_globals).cmdcnt -= 1;
              if (*ptr_to_globals).cmdcnt > 0 {
                do_cmd('+' as i32);
              }
              dot_skip_over_ws();
              current_block = 15129665204879337069;
            }
            17973101765331640574 => {
              c1 = get_one_char();
              if c1 != 'g' as i32 {
                buf[0] = 'g' as i32 as libc::c_char;
                buf[1] = if c1 >= 0 { c1 } else { '*' as i32 } as libc::c_char;
                buf[2] = '\u{0}' as i32 as libc::c_char;
                not_implemented(buf.as_mut_ptr());
                current_block = 15129665204879337069;
              } else {
                if (*ptr_to_globals).cmdcnt == 0 {
                  (*ptr_to_globals).cmdcnt = 1i32
                }
                current_block = 11945623545738147997;
              }
            }
            16546625800574160972 => {
              save_dot = (*ptr_to_globals).dot;
              (*ptr_to_globals).dot = dollar_line((*ptr_to_globals).dot);
              (*ptr_to_globals).dot = yank_delete(
                save_dot,
                (*ptr_to_globals).dot,
                0,
                YANKDEL as libc::c_int,
                1i32,
              );
              if c == 'C' as i32 {
                current_block = 8629930936610358348;
              } else {
                if c == 'D' as i32 {
                  end_cmd_q();
                }
                current_block = 15129665204879337069;
              }
            }
            11937696639986586685 => {
              cnt = count_lines((*ptr_to_globals).text, (*ptr_to_globals).dot);
              c1 = get_one_char();
              find_range(&mut p, &mut q, c1 as libc::c_char);
              yank_delete(p, q, 1i32, YANKONLY as libc::c_int, 0);
              p = begin_line(p);
              q = end_line(q);
              i = count_lines(p, q);
              while i > 0 {
                if c == '<' as i32 {
                  if *p as libc::c_int == '\t' as i32 {
                    text_hole_delete(p, p, 0);
                  } else if *p as libc::c_int == ' ' as i32 {
                    j = 0;
                    while *p as libc::c_int == ' ' as i32 && j < (*ptr_to_globals).tabstop {
                      text_hole_delete(p, p, 0);
                      j += 1
                    }
                  }
                } else if c == '>' as i32 {
                  char_insert(p, '\t' as i32 as libc::c_char, 1i32);
                }
                i -= 1;
                p = next_line(p)
              }
              (*ptr_to_globals).dot = find_line(cnt);
              dot_skip_over_ws();
              end_cmd_q();
              current_block = 15129665204879337069;
            }
            17725350714912028156 => {
              p = get_input_line(b":\x00" as *const u8 as *const libc::c_char);
              colon(p);
              current_block = 15129665204879337069;
            }
            14526470074083880812 => {
              q = char_search(
                (*ptr_to_globals).dot,
                b"\n\n\x00" as *const u8 as *const libc::c_char,
                (FORWARD as libc::c_int) << 1i32 | FULL as libc::c_int,
              );
              if !q.is_null() {
                (*ptr_to_globals).dot = next_line(q)
              }
              current_block = 15129665204879337069;
            }
            8893187391306414141 => {
              q = char_search(
                (*ptr_to_globals).dot,
                b"\n\n\x00" as *const u8 as *const libc::c_char,
                ((BACK as libc::c_int as libc::c_uint) << 1i32
                  | FULL as libc::c_int as libc::c_uint) as libc::c_int,
              );
              if !q.is_null() {
                (*ptr_to_globals).dot = next_line(q)
              }
              current_block = 15129665204879337069;
            }
            7021673758293221412 => {
              dir = BACK as libc::c_int;
              p = (*ptr_to_globals).dot.offset(-1);
              if *(*ptr_to_globals).last_search_pattern.offset(0) as libc::c_int == '?' as i32 {
                dir = FORWARD as libc::c_int;
                p = (*ptr_to_globals).dot.offset(1)
              }
              current_block = 4166979493554389389;
            }
            18374191879090272823 => {
              buf[0] = c as libc::c_char;
              buf[1] = '\u{0}' as i32 as libc::c_char;
              q = get_input_line(buf.as_mut_ptr());
              if *q.offset(0) as libc::c_int != 0 && *q.offset(1) == 0 {
                if *(*ptr_to_globals).last_search_pattern.offset(0) != 0 {
                  *(*ptr_to_globals).last_search_pattern.offset(0) = c as libc::c_char
                }
                current_block = 7392824444931029276;
              } else if *q.offset(0) != 0 {
                free((*ptr_to_globals).last_search_pattern as *mut libc::c_void);
                (*ptr_to_globals).last_search_pattern = crate::libbb::xfuncs_printf::xstrdup(q);
                current_block = 7392824444931029276;
              } else {
                current_block = 15129665204879337069;
              }
            }
            16407828456666301883 => {
              if (*ptr_to_globals).last_forward_char == 0 {
                current_block = 15129665204879337069;
              } else {
                loop {
                  q = (*ptr_to_globals).dot.offset(-1);
                  while q >= (*ptr_to_globals).text
                    && *q as libc::c_int != '\n' as i32
                    && *q as libc::c_int != (*ptr_to_globals).last_forward_char
                  {
                    q = q.offset(-1)
                  }
                  if q >= (*ptr_to_globals).text
                    && *q as libc::c_int == (*ptr_to_globals).last_forward_char
                  {
                    (*ptr_to_globals).dot = q
                  }
                  (*ptr_to_globals).cmdcnt -= 1;
                  if !((*ptr_to_globals).cmdcnt > 0) {
                    break;
                  }
                }
                current_block = 15129665204879337069;
              }
            }
            9018432604062702004 => {
              q = (*ptr_to_globals).dot;
              while q < (*ptr_to_globals).end && *q as libc::c_int != '\n' as i32 {
                if !strchr(
                  b"()[]{}\x00" as *const u8 as *const libc::c_char,
                  *q as libc::c_int,
                )
                .is_null()
                {
                  p = find_pair(q, *q);
                  if p.is_null() {
                    indicate_error();
                  } else {
                    (*ptr_to_globals).dot = p
                  }
                  break;
                } else {
                  q = q.offset(1)
                }
              }
              if *q as libc::c_int == '\n' as i32 {
                indicate_error();
              }
              current_block = 15129665204879337069;
            }
            10247103787464459848 => {
              p = (*ptr_to_globals).reg[(*ptr_to_globals).YDreg as usize];
              if p.is_null() {
                status_line_bold(
                  b"Nothing in register %c\x00" as *const u8 as *const libc::c_char,
                  what_reg() as libc::c_int,
                );
              } else {
                if !strchr(p, '\n' as i32).is_null() {
                  if c == 'P' as i32 {
                    dot_begin();
                  }
                  if c == 'p' as i32 {
                    if end_line((*ptr_to_globals).dot) == (*ptr_to_globals).end.offset(-1) {
                      (*ptr_to_globals).dot = (*ptr_to_globals).end
                    } else {
                      dot_next();
                    }
                  }
                } else if c == 'p' as i32 {
                  dot_right();
                }
                string_insert((*ptr_to_globals).dot, p, 1i32);
                end_cmd_q();
              }
              current_block = 15129665204879337069;
            }
            15260732871948875843 => {
              c1 = (get_one_char() | 0x20i32) - 'a' as i32;
              if c1 as libc::c_uint <= 25i32 as libc::c_uint {
                (*ptr_to_globals).mark[c1 as usize] = (*ptr_to_globals).dot
              } else {
                indicate_error();
              }
              current_block = 15129665204879337069;
            }
            12738322036487086035 => {
              c1 = get_one_char() | 0x20i32;
              if (c1 - 'a' as i32) as libc::c_uint <= 25i32 as libc::c_uint {
                c1 = c1 - 'a' as i32;
                q = (*ptr_to_globals).mark[c1 as usize];
                if (*ptr_to_globals).text <= q && q < (*ptr_to_globals).end {
                  (*ptr_to_globals).dot = q;
                  dot_begin();
                  dot_skip_over_ws();
                }
              } else if c1 == '\'' as i32 {
                (*ptr_to_globals).dot = swap_context((*ptr_to_globals).dot);
                dot_begin();
                dot_skip_over_ws();
              } else {
                indicate_error();
              }
              current_block = 15129665204879337069;
            }
            13255096073384561358 => {
              c1 = (get_one_char() | 0x20i32) - 'a' as i32;
              if c1 as libc::c_uint <= 25i32 as libc::c_uint {
                (*ptr_to_globals).YDreg = c1 as smalluint
              } else {
                indicate_error();
              }
              current_block = 15129665204879337069;
            }
            10258711639984089377 => {
              if (*ptr_to_globals).cmd_mode as libc::c_int == 0 {
                indicate_error();
              }
              (*ptr_to_globals).cmd_mode = 0 as smallint;
              undo_queue_commit();
              end_cmd_q();
              (*ptr_to_globals).last_status_cksum = 0;
              current_block = 15129665204879337069;
            }
            11439127087547047736 => {
              buf[0] = c as libc::c_char;
              buf[1] = '\u{0}' as i32 as libc::c_char;
              not_implemented(buf.as_mut_ptr());
              end_cmd_q();
              current_block = 17440971994642376514;
            }
            7961798899781870241 => {
              dot_scroll(
                (*ptr_to_globals).rows.wrapping_sub(2i32 as libc::c_uint) as libc::c_int,
                -1i32,
              );
              current_block = 15129665204879337069;
            }
            9426343755402444879 => {
              dot_scroll(
                (*ptr_to_globals)
                  .rows
                  .wrapping_sub(2i32 as libc::c_uint)
                  .wrapping_div(2i32 as libc::c_uint) as libc::c_int,
                1i32,
              );
              current_block = 15129665204879337069;
            }
            13352459794680105913 => {
              dot_scroll(1i32, 1i32);
              current_block = 15129665204879337069;
            }
            14142272253464333006 => {
              dot_scroll(
                (*ptr_to_globals).rows.wrapping_sub(2i32 as libc::c_uint) as libc::c_int,
                1i32,
              );
              current_block = 15129665204879337069;
            }
            10758177197742640066 => {
              (*ptr_to_globals).last_status_cksum = 0;
              current_block = 15129665204879337069;
            }
            6152256259730122749 => {
              current_block = 7534742345255184552;
            }
            12883932598258173301 => {
              current_block = 8800996768013373992;
            }
            11242998110520238401 => {
              redraw(1i32);
              current_block = 15129665204879337069;
            }
            13619733043935729992 => {
              loop {
                dot_next();
                dot_skip_over_ws();
                (*ptr_to_globals).cmdcnt -= 1;
                if !((*ptr_to_globals).cmdcnt > 0) {
                  break;
                }
              }
              current_block = 15129665204879337069;
            }
            9339065157412720613 => {
              dot_scroll(
                (*ptr_to_globals)
                  .rows
                  .wrapping_sub(2i32 as libc::c_uint)
                  .wrapping_div(2i32 as libc::c_uint) as libc::c_int,
                -1i32,
              );
              current_block = 15129665204879337069;
            }
            11447082683497798022 => {
              dot_scroll(1i32, -1i32);
              current_block = 15129665204879337069;
            }
            5182000506326660482 => {
              current_block = 13993698454868426881;
            }
            1105010766850597332 => {
              if !(*ptr_to_globals).reg[27].is_null() {
                p = begin_line((*ptr_to_globals).dot);
                q = end_line((*ptr_to_globals).dot);
                p = text_hole_delete(p, q, 1i32);
                p = p.offset(string_insert(p, (*ptr_to_globals).reg[27], 2i32) as isize);
                (*ptr_to_globals).dot = p;
                dot_skip_over_ws();
              }
              current_block = 15129665204879337069;
            }
            8616046655533110204 => {
              undo_pop();
              current_block = 15129665204879337069;
            }
            5127767458142431603 => {
              loop {
                (*ptr_to_globals).dot = end_line((*ptr_to_globals).dot);
                (*ptr_to_globals).cmdcnt -= 1;
                if (*ptr_to_globals).cmdcnt <= 0 {
                  break;
                }
                dot_next();
              }
              current_block = 15129665204879337069;
            }
            222014967776118151 => {
              (*ptr_to_globals).last_forward_char = get_one_char();
              current_block = 7856905509180742666;
            }
            11209792479411604110 => {
              loop {
                dot_prev();
                dot_skip_over_ws();
                (*ptr_to_globals).cmdcnt -= 1;
                if !((*ptr_to_globals).cmdcnt > 0) {
                  break;
                }
              }
              current_block = 15129665204879337069;
            }
            3364823792826654116 => {
              if (*ptr_to_globals).lmc_len != 0 {
                (*ptr_to_globals).ioq_start = crate::libbb::xfuncs_printf::xstrndup(
                  (*ptr_to_globals).last_modifying_cmd.as_mut_ptr(),
                  (*ptr_to_globals).lmc_len,
                );
                (*ptr_to_globals).ioq = (*ptr_to_globals).ioq_start
              }
              current_block = 15129665204879337069;
            }
            18096603330221575131 => {
              current_block = 17498168302144015873;
            }
            16891123271837848903 => {
              dot_end();
              current_block = 1752638907092016026;
            }
            8517235759107662071 => {
              current_block = 5847749760081351726;
            }
            12525254419223051704 => {
              if (*ptr_to_globals).dot < (*ptr_to_globals).end.offset(-1) {
                (*ptr_to_globals).dot = yank_delete(
                  (*ptr_to_globals).dot,
                  (*ptr_to_globals).dot,
                  1i32,
                  YANKDEL as libc::c_int,
                  1i32,
                )
              }
              current_block = 15129665204879337069;
            }
            15232911949322867522 => {
              current_block = 17251831742223396249;
            }
            10863374208794025069 => {
              current_block = 1895262434596074581;
            }
            451126677064669119 => {
              loop {
                dot_prev();
                (*ptr_to_globals).dot = move_to_col(
                  (*ptr_to_globals).dot,
                  (*ptr_to_globals).ccol + (*ptr_to_globals).offset,
                );
                (*ptr_to_globals).cmdcnt -= 1;
                if !((*ptr_to_globals).cmdcnt > 0) {
                  break;
                }
              }
              current_block = 15129665204879337069;
            }
            4611735929166613116 => {
              loop {
                if bb_ascii_isalnum(*(*ptr_to_globals).dot as libc::c_uchar) != 0
                  || *(*ptr_to_globals).dot as libc::c_int == '_' as i32
                {
                  (*ptr_to_globals).dot = skip_thing(
                    (*ptr_to_globals).dot,
                    1i32,
                    FORWARD as libc::c_int,
                    S_END_ALNUM as libc::c_int,
                  )
                } else if *strchrnul(
                  b"!\"#$%&\'()*+,-./:;<=>?@[\\]^_`{|}~\x00" as *const u8 as *const libc::c_char,
                  *(*ptr_to_globals).dot as libc::c_int,
                )
                .offset(0)
                  != 0
                {
                  (*ptr_to_globals).dot = skip_thing(
                    (*ptr_to_globals).dot,
                    1i32,
                    FORWARD as libc::c_int,
                    S_END_PUNCT as libc::c_int,
                  )
                }
                if (*ptr_to_globals).dot < (*ptr_to_globals).end.offset(-1) {
                  (*ptr_to_globals).dot = (*ptr_to_globals).dot.offset(1)
                }
                if ({
                  let mut bb__isspace: libc::c_uchar =
                    (*(*ptr_to_globals).dot as libc::c_int - 9i32) as libc::c_uchar;
                  (bb__isspace as libc::c_int == ' ' as i32 - 9i32
                    || bb__isspace as libc::c_int <= 13i32 - 9i32) as libc::c_int
                }) != 0
                {
                  (*ptr_to_globals).dot = skip_thing(
                    (*ptr_to_globals).dot,
                    2i32,
                    FORWARD as libc::c_int,
                    S_OVER_WS as libc::c_int,
                  )
                }
                (*ptr_to_globals).cmdcnt -= 1;
                if !((*ptr_to_globals).cmdcnt > 0) {
                  break;
                }
              }
              current_block = 15129665204879337069;
            }
            4386451087681909888 => {
              (*ptr_to_globals).dot =
                move_to_col((*ptr_to_globals).dot, (*ptr_to_globals).cmdcnt - 1i32);
              current_block = 15129665204879337069;
            }
            1296397779060594135 => {
              dot_begin();
              current_block = 15129665204879337069;
            }
            _ => {}
          }
          match current_block {
            15129665204879337069 => {}
            8629930936610358348 => {}
            _ => {
              match current_block {
                17251831742223396249 => {
                  dir = 0;
                  if c == 'X' as i32 {
                    dir = -1i32
                  }
                  loop {
                    if *(*ptr_to_globals).dot.offset(dir as isize) as libc::c_int != '\n' as i32 {
                      if c == 'X' as i32 {
                        (*ptr_to_globals).dot = (*ptr_to_globals).dot.offset(-1)
                      }
                      (*ptr_to_globals).dot = yank_delete(
                        (*ptr_to_globals).dot,
                        (*ptr_to_globals).dot,
                        0,
                        YANKDEL as libc::c_int,
                        1i32,
                      )
                    }
                    (*ptr_to_globals).cmdcnt -= 1;
                    if !((*ptr_to_globals).cmdcnt > 0) {
                      break;
                    }
                  }
                  end_cmd_q();
                  if c == 's' as i32 {
                    current_block = 8629930936610358348;
                  } else {
                    current_block = 15129665204879337069;
                  }
                }
                2087484904894455135 => {
                  dot_end();
                  (*ptr_to_globals).dot =
                    char_insert((*ptr_to_globals).dot, '\n' as i32 as libc::c_char, 1i32);
                  current_block = 8629930936610358348;
                }
                11945623545738147997 => {
                  (*ptr_to_globals).dot = (*ptr_to_globals).end.offset(-1);
                  if (*ptr_to_globals).cmdcnt > 0 {
                    (*ptr_to_globals).dot = find_line((*ptr_to_globals).cmdcnt)
                  }
                  dot_skip_over_ws();
                  current_block = 15129665204879337069;
                }
                5847749760081351726 => {
                  dir = FORWARD as libc::c_int;
                  if c == 'B' as i32 {
                    dir = BACK as libc::c_int
                  }
                  loop {
                    if c == 'W' as i32
                      || ({
                        let mut bb__isspace: libc::c_uchar =
                          (*(*ptr_to_globals).dot.offset(dir as isize) as libc::c_int - 9i32)
                            as libc::c_uchar;
                        (bb__isspace as libc::c_int == ' ' as i32 - 9i32
                          || bb__isspace as libc::c_int <= 13i32 - 9i32)
                          as libc::c_int
                      }) != 0
                    {
                      (*ptr_to_globals).dot =
                        skip_thing((*ptr_to_globals).dot, 1i32, dir, S_TO_WS as libc::c_int);
                      (*ptr_to_globals).dot =
                        skip_thing((*ptr_to_globals).dot, 2i32, dir, S_OVER_WS as libc::c_int)
                    }
                    if c != 'W' as i32 {
                      (*ptr_to_globals).dot =
                        skip_thing((*ptr_to_globals).dot, 1i32, dir, S_BEFORE_WS as libc::c_int)
                    }
                    (*ptr_to_globals).cmdcnt -= 1;
                    if !((*ptr_to_globals).cmdcnt > 0) {
                      break;
                    }
                  }
                  current_block = 15129665204879337069;
                }
                17440971994642376514 => {
                  current_block = 15129665204879337069;
                }
                7534742345255184552 => {
                  current_block = 17247297260531395789;
                }
                8800996768013373992 => {
                  loop {
                    dot_next();
                    (*ptr_to_globals).dot = move_to_col(
                      (*ptr_to_globals).dot,
                      (*ptr_to_globals).ccol + (*ptr_to_globals).offset,
                    );
                    (*ptr_to_globals).cmdcnt -= 1;
                    if !((*ptr_to_globals).cmdcnt > 0) {
                      break;
                    }
                  }
                  current_block = 15129665204879337069;
                }
                13993698454868426881 => {
                  loop {
                    dot_right();
                    (*ptr_to_globals).cmdcnt -= 1;
                    if !((*ptr_to_globals).cmdcnt > 0) {
                      break;
                    }
                  }
                  current_block = 15129665204879337069;
                }
                7856905509180742666 => {
                  while !((*ptr_to_globals).last_forward_char == 0) {
                    q = (*ptr_to_globals).dot.offset(1);
                    while q < (*ptr_to_globals).end.offset(-1)
                      && *q as libc::c_int != '\n' as i32
                      && *q as libc::c_int != (*ptr_to_globals).last_forward_char
                    {
                      q = q.offset(1)
                    }
                    if *q as libc::c_int == (*ptr_to_globals).last_forward_char {
                      (*ptr_to_globals).dot = q
                    }
                    (*ptr_to_globals).cmdcnt -= 1;
                    if !((*ptr_to_globals).cmdcnt > 0) {
                      break;
                    }
                  }
                  current_block = 15129665204879337069;
                }
                17498168302144015873 => {
                  current_block = 8681395796513813967;
                }
                1752638907092016026 => {
                  if *(*ptr_to_globals).dot as libc::c_int != '\n' as i32 {
                    (*ptr_to_globals).dot = (*ptr_to_globals).dot.offset(1)
                  }
                  current_block = 8629930936610358348;
                }
                3268579060917229304 => {
                  current_block = 8629930936610358348;
                }
                1895262434596074581 => {
                  current_block = 8908416993177701018;
                }
                _ => {}
              }
              match current_block {
                8629930936610358348 => {}
                15129665204879337069 => {}
                _ => {
                  match current_block {
                    17247297260531395789 => {
                      loop {
                        dot_left();
                        (*ptr_to_globals).cmdcnt -= 1;
                        if !((*ptr_to_globals).cmdcnt > 0) {
                          break;
                        }
                      }
                      current_block = 15129665204879337069;
                    }
                    8681395796513813967 => {
                      current_block = 5591548203144509315;
                    }
                    8908416993177701018 => {
                      current_block = 16124761010012532485;
                    }
                    _ => {}
                  }
                  match current_block {
                    15129665204879337069 => {}
                    _ => {
                      match current_block {
                        16124761010012532485 => {
                          let mut yf: libc::c_int = 0;
                          let mut ml: libc::c_int = 0;
                          let mut whole: libc::c_int = 0;
                          yf = YANKDEL as libc::c_int;
                          if c == 'y' as i32 || c == 'Y' as i32 {
                            yf = YANKONLY as libc::c_int
                          }
                          c1 = 'y' as i32;
                          if c != 'Y' as i32 {
                            c1 = get_one_char()
                          }
                          ml = find_range(&mut p, &mut q, c1 as libc::c_char);
                          place_cursor(0i32, 0);
                          if c1 == 27i32 {
                            c1 = 27i32;
                            c = c1
                          } else if !strchr(b"wW\x00" as *const u8 as *const libc::c_char, c1)
                            .is_null()
                          {
                            ml = 0;
                            if c == 'c' as i32 {
                              while ({
                                let mut bb__isspace: libc::c_uchar =
                                  (*q as libc::c_int - 9i32) as libc::c_uchar;
                                (bb__isspace as libc::c_int == ' ' as i32 - 9i32
                                  || bb__isspace as libc::c_int <= 13i32 - 9i32)
                                  as libc::c_int
                              }) != 0
                                && q > p
                              {
                                q = q.offset(-1)
                              }
                            }
                            (*ptr_to_globals).dot = yank_delete(p, q, ml, yf, 1i32)
                          } else if !strchr(
                            b"^0bBeEft%$ lh\x08\x7f\x00" as *const u8 as *const libc::c_char,
                            c1,
                          )
                          .is_null()
                          {
                            (*ptr_to_globals).dot = yank_delete(p, q, ml, yf, 1i32)
                          } else if !strchr(
                            b"cdykjGHL+-{}\r\n\x00" as *const u8 as *const libc::c_char,
                            c1,
                          )
                          .is_null()
                          {
                            (*ptr_to_globals).dot = yank_delete(p, q, ml, yf, 1i32);
                            whole = 1i32
                          } else {
                            c1 = 27i32;
                            c = c1;
                            ml = 0;
                            indicate_error();
                          }
                          if ml != 0 && whole != 0 {
                            if c == 'c' as i32 {
                              (*ptr_to_globals).dot = char_insert(
                                (*ptr_to_globals).dot,
                                '\n' as i32 as libc::c_char,
                                2i32,
                              );
                              if whole != 0
                                && (*ptr_to_globals).dot != (*ptr_to_globals).end.offset(-1)
                              {
                                dot_prev();
                              }
                            } else if c == 'd' as i32 {
                              dot_begin();
                              dot_skip_over_ws();
                            }
                          }
                          if c1 != 27i32 {
                            if c == 'c' as i32 {
                              strcpy(
                                buf.as_mut_ptr(),
                                b"Change\x00" as *const u8 as *const libc::c_char,
                              );
                              current_block = 8629930936610358348;
                            } else {
                              if c == 'd' as i32 {
                                strcpy(
                                  buf.as_mut_ptr(),
                                  b"Delete\x00" as *const u8 as *const libc::c_char,
                                );
                              }
                              if c == 'y' as i32 || c == 'Y' as i32 {
                                strcpy(
                                  buf.as_mut_ptr(),
                                  b"Yank\x00" as *const u8 as *const libc::c_char,
                                );
                              }
                              p = (*ptr_to_globals).reg[(*ptr_to_globals).YDreg as usize];
                              q = p.offset(strlen(p) as isize);
                              cnt = 0;
                              while p <= q {
                                if *p as libc::c_int == '\n' as i32 {
                                  cnt += 1
                                }
                                p = p.offset(1)
                              }
                              status_line(
                                b"%s %u lines (%u chars) using [%c]\x00" as *const u8
                                  as *const libc::c_char,
                                buf.as_mut_ptr(),
                                cnt,
                                strlen((*ptr_to_globals).reg[(*ptr_to_globals).YDreg as usize])
                                  as libc::c_uint,
                                what_reg() as libc::c_int,
                              );
                              end_cmd_q();
                              current_block = 15129665204879337069;
                            }
                          } else {
                            current_block = 15129665204879337069;
                          }
                        }
                        5591548203144509315 => {
                          current_block = 2636677179867529885;
                        }
                        _ => {}
                      }
                      match current_block {
                        15129665204879337069 => {}
                        8629930936610358348 => {}
                        _ => {
                          match current_block {
                            2636677179867529885 => {
                              current_block = 12309206730560524281;
                            }
                            _ => {}
                          }
                          match current_block {
                            12309206730560524281 => {
                              current_block = 3325768110057758661;
                            }
                            _ => {}
                          }
                          match current_block {
                            3325768110057758661 => {
                              current_block = 14815832896553429982;
                            }
                            _ => {}
                          }
                          match current_block {
                            14815832896553429982 => {
                              current_block = 10731695520297161438;
                            }
                            _ => {}
                          }
                          match current_block {
                            10731695520297161438 => {
                              if c == '0' as i32 && (*ptr_to_globals).cmdcnt < 1i32 {
                                dot_begin();
                              } else {
                                (*ptr_to_globals).cmdcnt =
                                  (*ptr_to_globals).cmdcnt * 10i32 + (c - '0' as i32)
                              }
                              current_block = 15129665204879337069;
                            }
                            _ => {}
                          }
                          match current_block {
                            15129665204879337069 => {}
                            _ => {
                              loop {
                                match current_block {
                                  16813369756331276724 => {
                                    msg = std::ptr::null();
                                    current_block = 7392824444931029276;
                                  }
                                  7392824444931029276 => {
                                    dir = FORWARD as libc::c_int;
                                    p = (*ptr_to_globals).dot.offset(1);
                                    if *(*ptr_to_globals).last_search_pattern.offset(0)
                                      as libc::c_int
                                      == '?' as i32
                                    {
                                      dir = BACK as libc::c_int;
                                      p = (*ptr_to_globals).dot.offset(-1)
                                    }
                                    current_block = 4166979493554389389;
                                  }
                                  _ => {
                                    q = char_search(
                                      p,
                                      (*ptr_to_globals).last_search_pattern.offset(1),
                                      dir << 1i32 | FULL as libc::c_int,
                                    );
                                    if !q.is_null() {
                                      (*ptr_to_globals).dot = q;
                                      msg = std::ptr::null()
                                    } else {
                                      p = (*ptr_to_globals).text;
                                      if dir == BACK as libc::c_int {
                                        p = (*ptr_to_globals).end.offset(-1)
                                      }
                                      q = char_search(
                                        p,
                                        (*ptr_to_globals).last_search_pattern.offset(1),
                                        dir << 1i32 | FULL as libc::c_int,
                                      );
                                      if !q.is_null() {
                                        (*ptr_to_globals).dot = q;
                                        msg = b"search hit BOTTOM, continuing at TOP\x00"
                                          as *const u8
                                          as *const libc::c_char;
                                        if dir == BACK as libc::c_int {
                                          msg = b"search hit TOP, continuing at BOTTOM\x00"
                                            as *const u8
                                            as *const libc::c_char
                                        }
                                      } else {
                                        msg = b"Pattern not found\x00" as *const u8
                                          as *const libc::c_char
                                      }
                                    }
                                    if !msg.is_null() {
                                      status_line_bold(
                                        b"%s\x00" as *const u8 as *const libc::c_char,
                                        msg,
                                      );
                                    }
                                    (*ptr_to_globals).cmdcnt -= 1;
                                    if (*ptr_to_globals).cmdcnt > 0 {
                                      current_block = 16813369756331276724;
                                    } else {
                                      break;
                                    }
                                  }
                                }
                              }
                              current_block = 15129665204879337069;
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
        10 => {
          current_block = 12883932598258173301;
          match current_block {
            16992905640583886232 => {
              loop {
                if (*(*ptr_to_globals).dot as libc::c_int - 'a' as i32) as libc::c_uchar
                  as libc::c_int
                  <= 'z' as i32 - 'a' as i32
                {
                  undo_push(
                    (*ptr_to_globals).dot,
                    1i32 as libc::c_uint,
                    1i32 as libc::c_uchar,
                  );
                  *(*ptr_to_globals).dot =
                    bb_ascii_toupper(*(*ptr_to_globals).dot as libc::c_uchar) as libc::c_char;
                  undo_push(
                    (*ptr_to_globals).dot,
                    1i32 as libc::c_uint,
                    2i32 as libc::c_uchar,
                  );
                } else if (*(*ptr_to_globals).dot as libc::c_int - 'A' as i32) as libc::c_uchar
                  as libc::c_int
                  <= 'Z' as i32 - 'A' as i32
                {
                  undo_push(
                    (*ptr_to_globals).dot,
                    1i32 as libc::c_uint,
                    1i32 as libc::c_uchar,
                  );
                  *(*ptr_to_globals).dot =
                    bb_ascii_tolower(*(*ptr_to_globals).dot as libc::c_uchar) as libc::c_char;
                  undo_push(
                    (*ptr_to_globals).dot,
                    1i32 as libc::c_uint,
                    2i32 as libc::c_uchar,
                  );
                }
                dot_right();
                (*ptr_to_globals).cmdcnt -= 1;
                if !((*ptr_to_globals).cmdcnt > 0) {
                  break;
                }
              }
              end_cmd_q();
              current_block = 15129665204879337069;
            }
            8729655159604064397 => {
              c1 = get_one_char();
              cnt = 0;
              if c1 == '.' as i32 {
                cnt = (*ptr_to_globals)
                  .rows
                  .wrapping_sub(2i32 as libc::c_uint)
                  .wrapping_div(2i32 as libc::c_uint) as libc::c_int
              }
              if c1 == '-' as i32 {
                cnt = (*ptr_to_globals).rows.wrapping_sub(2i32 as libc::c_uint) as libc::c_int
              }
              (*ptr_to_globals).screenbegin = begin_line((*ptr_to_globals).dot);
              dot_scroll(cnt, -1i32);
              current_block = 15129665204879337069;
            }
            15899500648299942075 => {
              (*ptr_to_globals).last_forward_char = get_one_char();
              do_cmd(';' as i32);
              if *(*ptr_to_globals).dot as libc::c_int == (*ptr_to_globals).last_forward_char {
                dot_left();
              }
              (*ptr_to_globals).last_forward_char = 0;
              current_block = 15129665204879337069;
            }
            9051390181078481641 => {
              c1 = get_one_char();
              if *(*ptr_to_globals).dot as libc::c_int != '\n' as i32 {
                (*ptr_to_globals).dot =
                  text_hole_delete((*ptr_to_globals).dot, (*ptr_to_globals).dot, 1i32);
                (*ptr_to_globals).dot =
                  char_insert((*ptr_to_globals).dot, c1 as libc::c_char, 2i32);
                dot_left();
              }
              end_cmd_q();
              current_block = 15129665204879337069;
            }
            877115918601926659 => {
              dir = FORWARD as libc::c_int;
              if c == 'b' as i32 {
                dir = BACK as libc::c_int
              }
              while !((*ptr_to_globals).dot.offset(dir as isize) < (*ptr_to_globals).text
                || (*ptr_to_globals).dot.offset(dir as isize) > (*ptr_to_globals).end.offset(-1))
              {
                (*ptr_to_globals).dot = (*ptr_to_globals).dot.offset(dir as isize);
                if ({
                  let mut bb__isspace: libc::c_uchar =
                    (*(*ptr_to_globals).dot as libc::c_int - 9i32) as libc::c_uchar;
                  (bb__isspace as libc::c_int == ' ' as i32 - 9i32
                    || bb__isspace as libc::c_int <= 13i32 - 9i32) as libc::c_int
                }) != 0
                {
                  (*ptr_to_globals).dot = skip_thing(
                    (*ptr_to_globals).dot,
                    if c == 'e' as i32 { 2i32 } else { 1i32 },
                    dir,
                    S_OVER_WS as libc::c_int,
                  )
                }
                if bb_ascii_isalnum(*(*ptr_to_globals).dot as libc::c_uchar) != 0
                  || *(*ptr_to_globals).dot as libc::c_int == '_' as i32
                {
                  (*ptr_to_globals).dot =
                    skip_thing((*ptr_to_globals).dot, 1i32, dir, S_END_ALNUM as libc::c_int)
                } else if *strchrnul(
                  b"!\"#$%&\'()*+,-./:;<=>?@[\\]^_`{|}~\x00" as *const u8 as *const libc::c_char,
                  *(*ptr_to_globals).dot as libc::c_int,
                )
                .offset(0)
                  != 0
                {
                  (*ptr_to_globals).dot =
                    skip_thing((*ptr_to_globals).dot, 1i32, dir, S_END_PUNCT as libc::c_int)
                }
                (*ptr_to_globals).cmdcnt -= 1;
                if !((*ptr_to_globals).cmdcnt > 0) {
                  break;
                }
              }
              current_block = 15129665204879337069;
            }
            1085022737867179637 => {
              dot_begin();
              dot_skip_over_ws();
              current_block = 15129665204879337069;
            }
            3113147720494587438 => {
              c1 = get_one_char();
              if c1 != 'Z' as i32 {
                indicate_error();
              } else if (*ptr_to_globals).modified_count != 0 {
                if 1i32 != 0 && (*ptr_to_globals).readonly_mode as libc::c_int != 0 {
                  status_line_bold(
                    b"\'%s\' is read only\x00" as *const u8 as *const libc::c_char,
                    (*ptr_to_globals).current_filename,
                  );
                } else {
                  cnt = file_write(
                    (*ptr_to_globals).current_filename,
                    (*ptr_to_globals).text,
                    (*ptr_to_globals).end.offset(-1),
                  );
                  if cnt < 0 {
                    if cnt == -1i32 {
                      status_line_bold(b"Write error: %m\x00" as *const u8 as *const libc::c_char);
                    }
                  } else if cnt as libc::c_long
                    == (*ptr_to_globals)
                      .end
                      .offset(-1)
                      .wrapping_offset_from((*ptr_to_globals).text)
                      as libc::c_long
                      + 1
                  {
                    (*ptr_to_globals).editing = 0 as smallint
                  }
                }
              } else {
                (*ptr_to_globals).editing = 0 as smallint
              }
              current_block = 15129665204879337069;
            }
            12960118908218882441 => {
              p = begin_line((*ptr_to_globals).dot);
              if *p.offset(-1i32 as isize) as libc::c_int == '\n' as i32 {
                dot_prev();
                current_block = 2087484904894455135;
              } else {
                dot_begin();
                (*ptr_to_globals).dot =
                  char_insert((*ptr_to_globals).dot, '\n' as i32 as libc::c_char, 1i32);
                dot_prev();
                current_block = 8629930936610358348;
              }
            }
            8720450212473544924 => {
              (*ptr_to_globals).dot = (*ptr_to_globals).screenbegin;
              cnt = 0;
              while (cnt as libc::c_uint)
                < (*ptr_to_globals)
                  .rows
                  .wrapping_sub(1i32 as libc::c_uint)
                  .wrapping_div(2i32 as libc::c_uint)
              {
                (*ptr_to_globals).dot = next_line((*ptr_to_globals).dot);
                cnt += 1
              }
              current_block = 15129665204879337069;
            }
            13015277209715431090 => {
              (*ptr_to_globals).dot = end_screen();
              if (*ptr_to_globals).cmdcnt as libc::c_uint
                > (*ptr_to_globals).rows.wrapping_sub(1i32 as libc::c_uint)
              {
                (*ptr_to_globals).cmdcnt =
                  (*ptr_to_globals).rows.wrapping_sub(1i32 as libc::c_uint) as libc::c_int
              }
              (*ptr_to_globals).cmdcnt -= 1;
              if (*ptr_to_globals).cmdcnt > 0 {
                do_cmd('-' as i32);
              }
              dot_begin();
              dot_skip_over_ws();
              current_block = 15129665204879337069;
            }
            9800435767766781385 => {
              loop {
                dot_end();
                if (*ptr_to_globals).dot < (*ptr_to_globals).end.offset(-1) {
                  undo_push(
                    (*ptr_to_globals).dot,
                    1i32 as libc::c_uint,
                    1i32 as libc::c_uchar,
                  );
                  let fresh15 = (*ptr_to_globals).dot;
                  (*ptr_to_globals).dot = (*ptr_to_globals).dot.offset(1);
                  *fresh15 = ' ' as i32 as libc::c_char;
                  undo_push(
                    (*ptr_to_globals).dot.offset(-1),
                    1i32 as libc::c_uint,
                    2i32 as libc::c_uchar,
                  );
                  while ({
                    let mut bb__isblank: libc::c_uchar = *(*ptr_to_globals).dot as libc::c_uchar;
                    (bb__isblank as libc::c_int == ' ' as i32
                      || bb__isblank as libc::c_int == '\t' as i32)
                      as libc::c_int
                  }) != 0
                  {
                    text_hole_delete((*ptr_to_globals).dot, (*ptr_to_globals).dot, 2i32);
                  }
                }
                (*ptr_to_globals).cmdcnt -= 1;
                if !((*ptr_to_globals).cmdcnt > 0) {
                  break;
                }
              }
              end_cmd_q();
              current_block = 15129665204879337069;
            }
            3432363526595694666 => {
              dot_begin();
              dot_skip_over_ws();
              current_block = 3268579060917229304;
            }
            3494829253343353619 => {
              (*ptr_to_globals).dot = (*ptr_to_globals).screenbegin;
              if (*ptr_to_globals).cmdcnt as libc::c_uint
                > (*ptr_to_globals).rows.wrapping_sub(1i32 as libc::c_uint)
              {
                (*ptr_to_globals).cmdcnt =
                  (*ptr_to_globals).rows.wrapping_sub(1i32 as libc::c_uint) as libc::c_int
              }
              (*ptr_to_globals).cmdcnt -= 1;
              if (*ptr_to_globals).cmdcnt > 0 {
                do_cmd('+' as i32);
              }
              dot_skip_over_ws();
              current_block = 15129665204879337069;
            }
            17973101765331640574 => {
              c1 = get_one_char();
              if c1 != 'g' as i32 {
                buf[0] = 'g' as i32 as libc::c_char;
                buf[1] = if c1 >= 0 { c1 } else { '*' as i32 } as libc::c_char;
                buf[2] = '\u{0}' as i32 as libc::c_char;
                not_implemented(buf.as_mut_ptr());
                current_block = 15129665204879337069;
              } else {
                if (*ptr_to_globals).cmdcnt == 0 {
                  (*ptr_to_globals).cmdcnt = 1i32
                }
                current_block = 11945623545738147997;
              }
            }
            16546625800574160972 => {
              save_dot = (*ptr_to_globals).dot;
              (*ptr_to_globals).dot = dollar_line((*ptr_to_globals).dot);
              (*ptr_to_globals).dot = yank_delete(
                save_dot,
                (*ptr_to_globals).dot,
                0,
                YANKDEL as libc::c_int,
                1i32,
              );
              if c == 'C' as i32 {
                current_block = 8629930936610358348;
              } else {
                if c == 'D' as i32 {
                  end_cmd_q();
                }
                current_block = 15129665204879337069;
              }
            }
            11937696639986586685 => {
              cnt = count_lines((*ptr_to_globals).text, (*ptr_to_globals).dot);
              c1 = get_one_char();
              find_range(&mut p, &mut q, c1 as libc::c_char);
              yank_delete(p, q, 1i32, YANKONLY as libc::c_int, 0);
              p = begin_line(p);
              q = end_line(q);
              i = count_lines(p, q);
              while i > 0 {
                if c == '<' as i32 {
                  if *p as libc::c_int == '\t' as i32 {
                    text_hole_delete(p, p, 0);
                  } else if *p as libc::c_int == ' ' as i32 {
                    j = 0;
                    while *p as libc::c_int == ' ' as i32 && j < (*ptr_to_globals).tabstop {
                      text_hole_delete(p, p, 0);
                      j += 1
                    }
                  }
                } else if c == '>' as i32 {
                  char_insert(p, '\t' as i32 as libc::c_char, 1i32);
                }
                i -= 1;
                p = next_line(p)
              }
              (*ptr_to_globals).dot = find_line(cnt);
              dot_skip_over_ws();
              end_cmd_q();
              current_block = 15129665204879337069;
            }
            17725350714912028156 => {
              p = get_input_line(b":\x00" as *const u8 as *const libc::c_char);
              colon(p);
              current_block = 15129665204879337069;
            }
            14526470074083880812 => {
              q = char_search(
                (*ptr_to_globals).dot,
                b"\n\n\x00" as *const u8 as *const libc::c_char,
                (FORWARD as libc::c_int) << 1i32 | FULL as libc::c_int,
              );
              if !q.is_null() {
                (*ptr_to_globals).dot = next_line(q)
              }
              current_block = 15129665204879337069;
            }
            8893187391306414141 => {
              q = char_search(
                (*ptr_to_globals).dot,
                b"\n\n\x00" as *const u8 as *const libc::c_char,
                ((BACK as libc::c_int as libc::c_uint) << 1i32
                  | FULL as libc::c_int as libc::c_uint) as libc::c_int,
              );
              if !q.is_null() {
                (*ptr_to_globals).dot = next_line(q)
              }
              current_block = 15129665204879337069;
            }
            7021673758293221412 => {
              dir = BACK as libc::c_int;
              p = (*ptr_to_globals).dot.offset(-1);
              if *(*ptr_to_globals).last_search_pattern.offset(0) as libc::c_int == '?' as i32 {
                dir = FORWARD as libc::c_int;
                p = (*ptr_to_globals).dot.offset(1)
              }
              current_block = 4166979493554389389;
            }
            18374191879090272823 => {
              buf[0] = c as libc::c_char;
              buf[1] = '\u{0}' as i32 as libc::c_char;
              q = get_input_line(buf.as_mut_ptr());
              if *q.offset(0) as libc::c_int != 0 && *q.offset(1) == 0 {
                if *(*ptr_to_globals).last_search_pattern.offset(0) != 0 {
                  *(*ptr_to_globals).last_search_pattern.offset(0) = c as libc::c_char
                }
                current_block = 7392824444931029276;
              } else if *q.offset(0) != 0 {
                free((*ptr_to_globals).last_search_pattern as *mut libc::c_void);
                (*ptr_to_globals).last_search_pattern = crate::libbb::xfuncs_printf::xstrdup(q);
                current_block = 7392824444931029276;
              } else {
                current_block = 15129665204879337069;
              }
            }
            16407828456666301883 => {
              if (*ptr_to_globals).last_forward_char == 0 {
                current_block = 15129665204879337069;
              } else {
                loop {
                  q = (*ptr_to_globals).dot.offset(-1);
                  while q >= (*ptr_to_globals).text
                    && *q as libc::c_int != '\n' as i32
                    && *q as libc::c_int != (*ptr_to_globals).last_forward_char
                  {
                    q = q.offset(-1)
                  }
                  if q >= (*ptr_to_globals).text
                    && *q as libc::c_int == (*ptr_to_globals).last_forward_char
                  {
                    (*ptr_to_globals).dot = q
                  }
                  (*ptr_to_globals).cmdcnt -= 1;
                  if !((*ptr_to_globals).cmdcnt > 0) {
                    break;
                  }
                }
                current_block = 15129665204879337069;
              }
            }
            9018432604062702004 => {
              q = (*ptr_to_globals).dot;
              while q < (*ptr_to_globals).end && *q as libc::c_int != '\n' as i32 {
                if !strchr(
                  b"()[]{}\x00" as *const u8 as *const libc::c_char,
                  *q as libc::c_int,
                )
                .is_null()
                {
                  p = find_pair(q, *q);
                  if p.is_null() {
                    indicate_error();
                  } else {
                    (*ptr_to_globals).dot = p
                  }
                  break;
                } else {
                  q = q.offset(1)
                }
              }
              if *q as libc::c_int == '\n' as i32 {
                indicate_error();
              }
              current_block = 15129665204879337069;
            }
            10247103787464459848 => {
              p = (*ptr_to_globals).reg[(*ptr_to_globals).YDreg as usize];
              if p.is_null() {
                status_line_bold(
                  b"Nothing in register %c\x00" as *const u8 as *const libc::c_char,
                  what_reg() as libc::c_int,
                );
              } else {
                if !strchr(p, '\n' as i32).is_null() {
                  if c == 'P' as i32 {
                    dot_begin();
                  }
                  if c == 'p' as i32 {
                    if end_line((*ptr_to_globals).dot) == (*ptr_to_globals).end.offset(-1) {
                      (*ptr_to_globals).dot = (*ptr_to_globals).end
                    } else {
                      dot_next();
                    }
                  }
                } else if c == 'p' as i32 {
                  dot_right();
                }
                string_insert((*ptr_to_globals).dot, p, 1i32);
                end_cmd_q();
              }
              current_block = 15129665204879337069;
            }
            15260732871948875843 => {
              c1 = (get_one_char() | 0x20i32) - 'a' as i32;
              if c1 as libc::c_uint <= 25i32 as libc::c_uint {
                (*ptr_to_globals).mark[c1 as usize] = (*ptr_to_globals).dot
              } else {
                indicate_error();
              }
              current_block = 15129665204879337069;
            }
            12738322036487086035 => {
              c1 = get_one_char() | 0x20i32;
              if (c1 - 'a' as i32) as libc::c_uint <= 25i32 as libc::c_uint {
                c1 = c1 - 'a' as i32;
                q = (*ptr_to_globals).mark[c1 as usize];
                if (*ptr_to_globals).text <= q && q < (*ptr_to_globals).end {
                  (*ptr_to_globals).dot = q;
                  dot_begin();
                  dot_skip_over_ws();
                }
              } else if c1 == '\'' as i32 {
                (*ptr_to_globals).dot = swap_context((*ptr_to_globals).dot);
                dot_begin();
                dot_skip_over_ws();
              } else {
                indicate_error();
              }
              current_block = 15129665204879337069;
            }
            13255096073384561358 => {
              c1 = (get_one_char() | 0x20i32) - 'a' as i32;
              if c1 as libc::c_uint <= 25i32 as libc::c_uint {
                (*ptr_to_globals).YDreg = c1 as smalluint
              } else {
                indicate_error();
              }
              current_block = 15129665204879337069;
            }
            10258711639984089377 => {
              if (*ptr_to_globals).cmd_mode as libc::c_int == 0 {
                indicate_error();
              }
              (*ptr_to_globals).cmd_mode = 0 as smallint;
              undo_queue_commit();
              end_cmd_q();
              (*ptr_to_globals).last_status_cksum = 0;
              current_block = 15129665204879337069;
            }
            11439127087547047736 => {
              buf[0] = c as libc::c_char;
              buf[1] = '\u{0}' as i32 as libc::c_char;
              not_implemented(buf.as_mut_ptr());
              end_cmd_q();
              current_block = 17440971994642376514;
            }
            7961798899781870241 => {
              dot_scroll(
                (*ptr_to_globals).rows.wrapping_sub(2i32 as libc::c_uint) as libc::c_int,
                -1i32,
              );
              current_block = 15129665204879337069;
            }
            9426343755402444879 => {
              dot_scroll(
                (*ptr_to_globals)
                  .rows
                  .wrapping_sub(2i32 as libc::c_uint)
                  .wrapping_div(2i32 as libc::c_uint) as libc::c_int,
                1i32,
              );
              current_block = 15129665204879337069;
            }
            13352459794680105913 => {
              dot_scroll(1i32, 1i32);
              current_block = 15129665204879337069;
            }
            14142272253464333006 => {
              dot_scroll(
                (*ptr_to_globals).rows.wrapping_sub(2i32 as libc::c_uint) as libc::c_int,
                1i32,
              );
              current_block = 15129665204879337069;
            }
            10758177197742640066 => {
              (*ptr_to_globals).last_status_cksum = 0;
              current_block = 15129665204879337069;
            }
            6152256259730122749 => {
              current_block = 7534742345255184552;
            }
            12883932598258173301 => {
              current_block = 8800996768013373992;
            }
            11242998110520238401 => {
              redraw(1i32);
              current_block = 15129665204879337069;
            }
            13619733043935729992 => {
              loop {
                dot_next();
                dot_skip_over_ws();
                (*ptr_to_globals).cmdcnt -= 1;
                if !((*ptr_to_globals).cmdcnt > 0) {
                  break;
                }
              }
              current_block = 15129665204879337069;
            }
            9339065157412720613 => {
              dot_scroll(
                (*ptr_to_globals)
                  .rows
                  .wrapping_sub(2i32 as libc::c_uint)
                  .wrapping_div(2i32 as libc::c_uint) as libc::c_int,
                -1i32,
              );
              current_block = 15129665204879337069;
            }
            11447082683497798022 => {
              dot_scroll(1i32, -1i32);
              current_block = 15129665204879337069;
            }
            5182000506326660482 => {
              current_block = 13993698454868426881;
            }
            1105010766850597332 => {
              if !(*ptr_to_globals).reg[27].is_null() {
                p = begin_line((*ptr_to_globals).dot);
                q = end_line((*ptr_to_globals).dot);
                p = text_hole_delete(p, q, 1i32);
                p = p.offset(string_insert(p, (*ptr_to_globals).reg[27], 2i32) as isize);
                (*ptr_to_globals).dot = p;
                dot_skip_over_ws();
              }
              current_block = 15129665204879337069;
            }
            8616046655533110204 => {
              undo_pop();
              current_block = 15129665204879337069;
            }
            5127767458142431603 => {
              loop {
                (*ptr_to_globals).dot = end_line((*ptr_to_globals).dot);
                (*ptr_to_globals).cmdcnt -= 1;
                if (*ptr_to_globals).cmdcnt <= 0 {
                  break;
                }
                dot_next();
              }
              current_block = 15129665204879337069;
            }
            222014967776118151 => {
              (*ptr_to_globals).last_forward_char = get_one_char();
              current_block = 7856905509180742666;
            }
            11209792479411604110 => {
              loop {
                dot_prev();
                dot_skip_over_ws();
                (*ptr_to_globals).cmdcnt -= 1;
                if !((*ptr_to_globals).cmdcnt > 0) {
                  break;
                }
              }
              current_block = 15129665204879337069;
            }
            3364823792826654116 => {
              if (*ptr_to_globals).lmc_len != 0 {
                (*ptr_to_globals).ioq_start = crate::libbb::xfuncs_printf::xstrndup(
                  (*ptr_to_globals).last_modifying_cmd.as_mut_ptr(),
                  (*ptr_to_globals).lmc_len,
                );
                (*ptr_to_globals).ioq = (*ptr_to_globals).ioq_start
              }
              current_block = 15129665204879337069;
            }
            18096603330221575131 => {
              current_block = 17498168302144015873;
            }
            16891123271837848903 => {
              dot_end();
              current_block = 1752638907092016026;
            }
            8517235759107662071 => {
              current_block = 5847749760081351726;
            }
            12525254419223051704 => {
              if (*ptr_to_globals).dot < (*ptr_to_globals).end.offset(-1) {
                (*ptr_to_globals).dot = yank_delete(
                  (*ptr_to_globals).dot,
                  (*ptr_to_globals).dot,
                  1i32,
                  YANKDEL as libc::c_int,
                  1i32,
                )
              }
              current_block = 15129665204879337069;
            }
            15232911949322867522 => {
              current_block = 17251831742223396249;
            }
            10863374208794025069 => {
              current_block = 1895262434596074581;
            }
            451126677064669119 => {
              loop {
                dot_prev();
                (*ptr_to_globals).dot = move_to_col(
                  (*ptr_to_globals).dot,
                  (*ptr_to_globals).ccol + (*ptr_to_globals).offset,
                );
                (*ptr_to_globals).cmdcnt -= 1;
                if !((*ptr_to_globals).cmdcnt > 0) {
                  break;
                }
              }
              current_block = 15129665204879337069;
            }
            4611735929166613116 => {
              loop {
                if bb_ascii_isalnum(*(*ptr_to_globals).dot as libc::c_uchar) != 0
                  || *(*ptr_to_globals).dot as libc::c_int == '_' as i32
                {
                  (*ptr_to_globals).dot = skip_thing(
                    (*ptr_to_globals).dot,
                    1i32,
                    FORWARD as libc::c_int,
                    S_END_ALNUM as libc::c_int,
                  )
                } else if *strchrnul(
                  b"!\"#$%&\'()*+,-./:;<=>?@[\\]^_`{|}~\x00" as *const u8 as *const libc::c_char,
                  *(*ptr_to_globals).dot as libc::c_int,
                )
                .offset(0)
                  != 0
                {
                  (*ptr_to_globals).dot = skip_thing(
                    (*ptr_to_globals).dot,
                    1i32,
                    FORWARD as libc::c_int,
                    S_END_PUNCT as libc::c_int,
                  )
                }
                if (*ptr_to_globals).dot < (*ptr_to_globals).end.offset(-1) {
                  (*ptr_to_globals).dot = (*ptr_to_globals).dot.offset(1)
                }
                if ({
                  let mut bb__isspace: libc::c_uchar =
                    (*(*ptr_to_globals).dot as libc::c_int - 9i32) as libc::c_uchar;
                  (bb__isspace as libc::c_int == ' ' as i32 - 9i32
                    || bb__isspace as libc::c_int <= 13i32 - 9i32) as libc::c_int
                }) != 0
                {
                  (*ptr_to_globals).dot = skip_thing(
                    (*ptr_to_globals).dot,
                    2i32,
                    FORWARD as libc::c_int,
                    S_OVER_WS as libc::c_int,
                  )
                }
                (*ptr_to_globals).cmdcnt -= 1;
                if !((*ptr_to_globals).cmdcnt > 0) {
                  break;
                }
              }
              current_block = 15129665204879337069;
            }
            4386451087681909888 => {
              (*ptr_to_globals).dot =
                move_to_col((*ptr_to_globals).dot, (*ptr_to_globals).cmdcnt - 1i32);
              current_block = 15129665204879337069;
            }
            1296397779060594135 => {
              dot_begin();
              current_block = 15129665204879337069;
            }
            _ => {}
          }
          match current_block {
            15129665204879337069 => {}
            8629930936610358348 => {}
            _ => {
              match current_block {
                17251831742223396249 => {
                  dir = 0;
                  if c == 'X' as i32 {
                    dir = -1i32
                  }
                  loop {
                    if *(*ptr_to_globals).dot.offset(dir as isize) as libc::c_int != '\n' as i32 {
                      if c == 'X' as i32 {
                        (*ptr_to_globals).dot = (*ptr_to_globals).dot.offset(-1)
                      }
                      (*ptr_to_globals).dot = yank_delete(
                        (*ptr_to_globals).dot,
                        (*ptr_to_globals).dot,
                        0,
                        YANKDEL as libc::c_int,
                        1i32,
                      )
                    }
                    (*ptr_to_globals).cmdcnt -= 1;
                    if !((*ptr_to_globals).cmdcnt > 0) {
                      break;
                    }
                  }
                  end_cmd_q();
                  if c == 's' as i32 {
                    current_block = 8629930936610358348;
                  } else {
                    current_block = 15129665204879337069;
                  }
                }
                2087484904894455135 => {
                  dot_end();
                  (*ptr_to_globals).dot =
                    char_insert((*ptr_to_globals).dot, '\n' as i32 as libc::c_char, 1i32);
                  current_block = 8629930936610358348;
                }
                11945623545738147997 => {
                  (*ptr_to_globals).dot = (*ptr_to_globals).end.offset(-1);
                  if (*ptr_to_globals).cmdcnt > 0 {
                    (*ptr_to_globals).dot = find_line((*ptr_to_globals).cmdcnt)
                  }
                  dot_skip_over_ws();
                  current_block = 15129665204879337069;
                }
                5847749760081351726 => {
                  dir = FORWARD as libc::c_int;
                  if c == 'B' as i32 {
                    dir = BACK as libc::c_int
                  }
                  loop {
                    if c == 'W' as i32
                      || ({
                        let mut bb__isspace: libc::c_uchar =
                          (*(*ptr_to_globals).dot.offset(dir as isize) as libc::c_int - 9i32)
                            as libc::c_uchar;
                        (bb__isspace as libc::c_int == ' ' as i32 - 9i32
                          || bb__isspace as libc::c_int <= 13i32 - 9i32)
                          as libc::c_int
                      }) != 0
                    {
                      (*ptr_to_globals).dot =
                        skip_thing((*ptr_to_globals).dot, 1i32, dir, S_TO_WS as libc::c_int);
                      (*ptr_to_globals).dot =
                        skip_thing((*ptr_to_globals).dot, 2i32, dir, S_OVER_WS as libc::c_int)
                    }
                    if c != 'W' as i32 {
                      (*ptr_to_globals).dot =
                        skip_thing((*ptr_to_globals).dot, 1i32, dir, S_BEFORE_WS as libc::c_int)
                    }
                    (*ptr_to_globals).cmdcnt -= 1;
                    if !((*ptr_to_globals).cmdcnt > 0) {
                      break;
                    }
                  }
                  current_block = 15129665204879337069;
                }
                17440971994642376514 => {
                  current_block = 15129665204879337069;
                }
                7534742345255184552 => {
                  current_block = 17247297260531395789;
                }
                8800996768013373992 => {
                  loop {
                    dot_next();
                    (*ptr_to_globals).dot = move_to_col(
                      (*ptr_to_globals).dot,
                      (*ptr_to_globals).ccol + (*ptr_to_globals).offset,
                    );
                    (*ptr_to_globals).cmdcnt -= 1;
                    if !((*ptr_to_globals).cmdcnt > 0) {
                      break;
                    }
                  }
                  current_block = 15129665204879337069;
                }
                13993698454868426881 => {
                  loop {
                    dot_right();
                    (*ptr_to_globals).cmdcnt -= 1;
                    if !((*ptr_to_globals).cmdcnt > 0) {
                      break;
                    }
                  }
                  current_block = 15129665204879337069;
                }
                7856905509180742666 => {
                  while !((*ptr_to_globals).last_forward_char == 0) {
                    q = (*ptr_to_globals).dot.offset(1);
                    while q < (*ptr_to_globals).end.offset(-1)
                      && *q as libc::c_int != '\n' as i32
                      && *q as libc::c_int != (*ptr_to_globals).last_forward_char
                    {
                      q = q.offset(1)
                    }
                    if *q as libc::c_int == (*ptr_to_globals).last_forward_char {
                      (*ptr_to_globals).dot = q
                    }
                    (*ptr_to_globals).cmdcnt -= 1;
                    if !((*ptr_to_globals).cmdcnt > 0) {
                      break;
                    }
                  }
                  current_block = 15129665204879337069;
                }
                17498168302144015873 => {
                  current_block = 8681395796513813967;
                }
                1752638907092016026 => {
                  if *(*ptr_to_globals).dot as libc::c_int != '\n' as i32 {
                    (*ptr_to_globals).dot = (*ptr_to_globals).dot.offset(1)
                  }
                  current_block = 8629930936610358348;
                }
                3268579060917229304 => {
                  current_block = 8629930936610358348;
                }
                1895262434596074581 => {
                  current_block = 8908416993177701018;
                }
                _ => {}
              }
              match current_block {
                8629930936610358348 => {}
                15129665204879337069 => {}
                _ => {
                  match current_block {
                    17247297260531395789 => {
                      loop {
                        dot_left();
                        (*ptr_to_globals).cmdcnt -= 1;
                        if !((*ptr_to_globals).cmdcnt > 0) {
                          break;
                        }
                      }
                      current_block = 15129665204879337069;
                    }
                    8681395796513813967 => {
                      current_block = 5591548203144509315;
                    }
                    8908416993177701018 => {
                      current_block = 16124761010012532485;
                    }
                    _ => {}
                  }
                  match current_block {
                    15129665204879337069 => {}
                    _ => {
                      match current_block {
                        16124761010012532485 => {
                          let mut yf: libc::c_int = 0;
                          let mut ml: libc::c_int = 0;
                          let mut whole: libc::c_int = 0;
                          yf = YANKDEL as libc::c_int;
                          if c == 'y' as i32 || c == 'Y' as i32 {
                            yf = YANKONLY as libc::c_int
                          }
                          c1 = 'y' as i32;
                          if c != 'Y' as i32 {
                            c1 = get_one_char()
                          }
                          ml = find_range(&mut p, &mut q, c1 as libc::c_char);
                          place_cursor(0i32, 0);
                          if c1 == 27i32 {
                            c1 = 27i32;
                            c = c1
                          } else if !strchr(b"wW\x00" as *const u8 as *const libc::c_char, c1)
                            .is_null()
                          {
                            ml = 0;
                            if c == 'c' as i32 {
                              while ({
                                let mut bb__isspace: libc::c_uchar =
                                  (*q as libc::c_int - 9i32) as libc::c_uchar;
                                (bb__isspace as libc::c_int == ' ' as i32 - 9i32
                                  || bb__isspace as libc::c_int <= 13i32 - 9i32)
                                  as libc::c_int
                              }) != 0
                                && q > p
                              {
                                q = q.offset(-1)
                              }
                            }
                            (*ptr_to_globals).dot = yank_delete(p, q, ml, yf, 1i32)
                          } else if !strchr(
                            b"^0bBeEft%$ lh\x08\x7f\x00" as *const u8 as *const libc::c_char,
                            c1,
                          )
                          .is_null()
                          {
                            (*ptr_to_globals).dot = yank_delete(p, q, ml, yf, 1i32)
                          } else if !strchr(
                            b"cdykjGHL+-{}\r\n\x00" as *const u8 as *const libc::c_char,
                            c1,
                          )
                          .is_null()
                          {
                            (*ptr_to_globals).dot = yank_delete(p, q, ml, yf, 1i32);
                            whole = 1i32
                          } else {
                            c1 = 27i32;
                            c = c1;
                            ml = 0;
                            indicate_error();
                          }
                          if ml != 0 && whole != 0 {
                            if c == 'c' as i32 {
                              (*ptr_to_globals).dot = char_insert(
                                (*ptr_to_globals).dot,
                                '\n' as i32 as libc::c_char,
                                2i32,
                              );
                              if whole != 0
                                && (*ptr_to_globals).dot != (*ptr_to_globals).end.offset(-1)
                              {
                                dot_prev();
                              }
                            } else if c == 'd' as i32 {
                              dot_begin();
                              dot_skip_over_ws();
                            }
                          }
                          if c1 != 27i32 {
                            if c == 'c' as i32 {
                              strcpy(
                                buf.as_mut_ptr(),
                                b"Change\x00" as *const u8 as *const libc::c_char,
                              );
                              current_block = 8629930936610358348;
                            } else {
                              if c == 'd' as i32 {
                                strcpy(
                                  buf.as_mut_ptr(),
                                  b"Delete\x00" as *const u8 as *const libc::c_char,
                                );
                              }
                              if c == 'y' as i32 || c == 'Y' as i32 {
                                strcpy(
                                  buf.as_mut_ptr(),
                                  b"Yank\x00" as *const u8 as *const libc::c_char,
                                );
                              }
                              p = (*ptr_to_globals).reg[(*ptr_to_globals).YDreg as usize];
                              q = p.offset(strlen(p) as isize);
                              cnt = 0;
                              while p <= q {
                                if *p as libc::c_int == '\n' as i32 {
                                  cnt += 1
                                }
                                p = p.offset(1)
                              }
                              status_line(
                                b"%s %u lines (%u chars) using [%c]\x00" as *const u8
                                  as *const libc::c_char,
                                buf.as_mut_ptr(),
                                cnt,
                                strlen((*ptr_to_globals).reg[(*ptr_to_globals).YDreg as usize])
                                  as libc::c_uint,
                                what_reg() as libc::c_int,
                              );
                              end_cmd_q();
                              current_block = 15129665204879337069;
                            }
                          } else {
                            current_block = 15129665204879337069;
                          }
                        }
                        5591548203144509315 => {
                          current_block = 2636677179867529885;
                        }
                        _ => {}
                      }
                      match current_block {
                        15129665204879337069 => {}
                        8629930936610358348 => {}
                        _ => {
                          match current_block {
                            2636677179867529885 => {
                              current_block = 12309206730560524281;
                            }
                            _ => {}
                          }
                          match current_block {
                            12309206730560524281 => {
                              current_block = 3325768110057758661;
                            }
                            _ => {}
                          }
                          match current_block {
                            3325768110057758661 => {
                              current_block = 14815832896553429982;
                            }
                            _ => {}
                          }
                          match current_block {
                            14815832896553429982 => {
                              current_block = 10731695520297161438;
                            }
                            _ => {}
                          }
                          match current_block {
                            10731695520297161438 => {
                              if c == '0' as i32 && (*ptr_to_globals).cmdcnt < 1i32 {
                                dot_begin();
                              } else {
                                (*ptr_to_globals).cmdcnt =
                                  (*ptr_to_globals).cmdcnt * 10i32 + (c - '0' as i32)
                              }
                              current_block = 15129665204879337069;
                            }
                            _ => {}
                          }
                          match current_block {
                            15129665204879337069 => {}
                            _ => {
                              loop {
                                match current_block {
                                  16813369756331276724 => {
                                    msg = std::ptr::null();
                                    current_block = 7392824444931029276;
                                  }
                                  7392824444931029276 => {
                                    dir = FORWARD as libc::c_int;
                                    p = (*ptr_to_globals).dot.offset(1);
                                    if *(*ptr_to_globals).last_search_pattern.offset(0)
                                      as libc::c_int
                                      == '?' as i32
                                    {
                                      dir = BACK as libc::c_int;
                                      p = (*ptr_to_globals).dot.offset(-1)
                                    }
                                    current_block = 4166979493554389389;
                                  }
                                  _ => {
                                    q = char_search(
                                      p,
                                      (*ptr_to_globals).last_search_pattern.offset(1),
                                      dir << 1i32 | FULL as libc::c_int,
                                    );
                                    if !q.is_null() {
                                      (*ptr_to_globals).dot = q;
                                      msg = std::ptr::null()
                                    } else {
                                      p = (*ptr_to_globals).text;
                                      if dir == BACK as libc::c_int {
                                        p = (*ptr_to_globals).end.offset(-1)
                                      }
                                      q = char_search(
                                        p,
                                        (*ptr_to_globals).last_search_pattern.offset(1),
                                        dir << 1i32 | FULL as libc::c_int,
                                      );
                                      if !q.is_null() {
                                        (*ptr_to_globals).dot = q;
                                        msg = b"search hit BOTTOM, continuing at TOP\x00"
                                          as *const u8
                                          as *const libc::c_char;
                                        if dir == BACK as libc::c_int {
                                          msg = b"search hit TOP, continuing at BOTTOM\x00"
                                            as *const u8
                                            as *const libc::c_char
                                        }
                                      } else {
                                        msg = b"Pattern not found\x00" as *const u8
                                          as *const libc::c_char
                                      }
                                    }
                                    if !msg.is_null() {
                                      status_line_bold(
                                        b"%s\x00" as *const u8 as *const libc::c_char,
                                        msg,
                                      );
                                    }
                                    (*ptr_to_globals).cmdcnt -= 1;
                                    if (*ptr_to_globals).cmdcnt > 0 {
                                      current_block = 16813369756331276724;
                                    } else {
                                      break;
                                    }
                                  }
                                }
                              }
                              current_block = 15129665204879337069;
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
        106 | -3 => {
          current_block = 8800996768013373992;
          match current_block {
            16992905640583886232 => {
              loop {
                if (*(*ptr_to_globals).dot as libc::c_int - 'a' as i32) as libc::c_uchar
                  as libc::c_int
                  <= 'z' as i32 - 'a' as i32
                {
                  undo_push(
                    (*ptr_to_globals).dot,
                    1i32 as libc::c_uint,
                    1i32 as libc::c_uchar,
                  );
                  *(*ptr_to_globals).dot =
                    bb_ascii_toupper(*(*ptr_to_globals).dot as libc::c_uchar) as libc::c_char;
                  undo_push(
                    (*ptr_to_globals).dot,
                    1i32 as libc::c_uint,
                    2i32 as libc::c_uchar,
                  );
                } else if (*(*ptr_to_globals).dot as libc::c_int - 'A' as i32) as libc::c_uchar
                  as libc::c_int
                  <= 'Z' as i32 - 'A' as i32
                {
                  undo_push(
                    (*ptr_to_globals).dot,
                    1i32 as libc::c_uint,
                    1i32 as libc::c_uchar,
                  );
                  *(*ptr_to_globals).dot =
                    bb_ascii_tolower(*(*ptr_to_globals).dot as libc::c_uchar) as libc::c_char;
                  undo_push(
                    (*ptr_to_globals).dot,
                    1i32 as libc::c_uint,
                    2i32 as libc::c_uchar,
                  );
                }
                dot_right();
                (*ptr_to_globals).cmdcnt -= 1;
                if !((*ptr_to_globals).cmdcnt > 0) {
                  break;
                }
              }
              end_cmd_q();
              current_block = 15129665204879337069;
            }
            8729655159604064397 => {
              c1 = get_one_char();
              cnt = 0;
              if c1 == '.' as i32 {
                cnt = (*ptr_to_globals)
                  .rows
                  .wrapping_sub(2i32 as libc::c_uint)
                  .wrapping_div(2i32 as libc::c_uint) as libc::c_int
              }
              if c1 == '-' as i32 {
                cnt = (*ptr_to_globals).rows.wrapping_sub(2i32 as libc::c_uint) as libc::c_int
              }
              (*ptr_to_globals).screenbegin = begin_line((*ptr_to_globals).dot);
              dot_scroll(cnt, -1i32);
              current_block = 15129665204879337069;
            }
            15899500648299942075 => {
              (*ptr_to_globals).last_forward_char = get_one_char();
              do_cmd(';' as i32);
              if *(*ptr_to_globals).dot as libc::c_int == (*ptr_to_globals).last_forward_char {
                dot_left();
              }
              (*ptr_to_globals).last_forward_char = 0;
              current_block = 15129665204879337069;
            }
            9051390181078481641 => {
              c1 = get_one_char();
              if *(*ptr_to_globals).dot as libc::c_int != '\n' as i32 {
                (*ptr_to_globals).dot =
                  text_hole_delete((*ptr_to_globals).dot, (*ptr_to_globals).dot, 1i32);
                (*ptr_to_globals).dot =
                  char_insert((*ptr_to_globals).dot, c1 as libc::c_char, 2i32);
                dot_left();
              }
              end_cmd_q();
              current_block = 15129665204879337069;
            }
            877115918601926659 => {
              dir = FORWARD as libc::c_int;
              if c == 'b' as i32 {
                dir = BACK as libc::c_int
              }
              while !((*ptr_to_globals).dot.offset(dir as isize) < (*ptr_to_globals).text
                || (*ptr_to_globals).dot.offset(dir as isize) > (*ptr_to_globals).end.offset(-1))
              {
                (*ptr_to_globals).dot = (*ptr_to_globals).dot.offset(dir as isize);
                if ({
                  let mut bb__isspace: libc::c_uchar =
                    (*(*ptr_to_globals).dot as libc::c_int - 9i32) as libc::c_uchar;
                  (bb__isspace as libc::c_int == ' ' as i32 - 9i32
                    || bb__isspace as libc::c_int <= 13i32 - 9i32) as libc::c_int
                }) != 0
                {
                  (*ptr_to_globals).dot = skip_thing(
                    (*ptr_to_globals).dot,
                    if c == 'e' as i32 { 2i32 } else { 1i32 },
                    dir,
                    S_OVER_WS as libc::c_int,
                  )
                }
                if bb_ascii_isalnum(*(*ptr_to_globals).dot as libc::c_uchar) != 0
                  || *(*ptr_to_globals).dot as libc::c_int == '_' as i32
                {
                  (*ptr_to_globals).dot =
                    skip_thing((*ptr_to_globals).dot, 1i32, dir, S_END_ALNUM as libc::c_int)
                } else if *strchrnul(
                  b"!\"#$%&\'()*+,-./:;<=>?@[\\]^_`{|}~\x00" as *const u8 as *const libc::c_char,
                  *(*ptr_to_globals).dot as libc::c_int,
                )
                .offset(0)
                  != 0
                {
                  (*ptr_to_globals).dot =
                    skip_thing((*ptr_to_globals).dot, 1i32, dir, S_END_PUNCT as libc::c_int)
                }
                (*ptr_to_globals).cmdcnt -= 1;
                if !((*ptr_to_globals).cmdcnt > 0) {
                  break;
                }
              }
              current_block = 15129665204879337069;
            }
            1085022737867179637 => {
              dot_begin();
              dot_skip_over_ws();
              current_block = 15129665204879337069;
            }
            3113147720494587438 => {
              c1 = get_one_char();
              if c1 != 'Z' as i32 {
                indicate_error();
              } else if (*ptr_to_globals).modified_count != 0 {
                if 1i32 != 0 && (*ptr_to_globals).readonly_mode as libc::c_int != 0 {
                  status_line_bold(
                    b"\'%s\' is read only\x00" as *const u8 as *const libc::c_char,
                    (*ptr_to_globals).current_filename,
                  );
                } else {
                  cnt = file_write(
                    (*ptr_to_globals).current_filename,
                    (*ptr_to_globals).text,
                    (*ptr_to_globals).end.offset(-1),
                  );
                  if cnt < 0 {
                    if cnt == -1i32 {
                      status_line_bold(b"Write error: %m\x00" as *const u8 as *const libc::c_char);
                    }
                  } else if cnt as libc::c_long
                    == (*ptr_to_globals)
                      .end
                      .offset(-1)
                      .wrapping_offset_from((*ptr_to_globals).text)
                      as libc::c_long
                      + 1
                  {
                    (*ptr_to_globals).editing = 0 as smallint
                  }
                }
              } else {
                (*ptr_to_globals).editing = 0 as smallint
              }
              current_block = 15129665204879337069;
            }
            12960118908218882441 => {
              p = begin_line((*ptr_to_globals).dot);
              if *p.offset(-1i32 as isize) as libc::c_int == '\n' as i32 {
                dot_prev();
                current_block = 2087484904894455135;
              } else {
                dot_begin();
                (*ptr_to_globals).dot =
                  char_insert((*ptr_to_globals).dot, '\n' as i32 as libc::c_char, 1i32);
                dot_prev();
                current_block = 8629930936610358348;
              }
            }
            8720450212473544924 => {
              (*ptr_to_globals).dot = (*ptr_to_globals).screenbegin;
              cnt = 0;
              while (cnt as libc::c_uint)
                < (*ptr_to_globals)
                  .rows
                  .wrapping_sub(1i32 as libc::c_uint)
                  .wrapping_div(2i32 as libc::c_uint)
              {
                (*ptr_to_globals).dot = next_line((*ptr_to_globals).dot);
                cnt += 1
              }
              current_block = 15129665204879337069;
            }
            13015277209715431090 => {
              (*ptr_to_globals).dot = end_screen();
              if (*ptr_to_globals).cmdcnt as libc::c_uint
                > (*ptr_to_globals).rows.wrapping_sub(1i32 as libc::c_uint)
              {
                (*ptr_to_globals).cmdcnt =
                  (*ptr_to_globals).rows.wrapping_sub(1i32 as libc::c_uint) as libc::c_int
              }
              (*ptr_to_globals).cmdcnt -= 1;
              if (*ptr_to_globals).cmdcnt > 0 {
                do_cmd('-' as i32);
              }
              dot_begin();
              dot_skip_over_ws();
              current_block = 15129665204879337069;
            }
            9800435767766781385 => {
              loop {
                dot_end();
                if (*ptr_to_globals).dot < (*ptr_to_globals).end.offset(-1) {
                  undo_push(
                    (*ptr_to_globals).dot,
                    1i32 as libc::c_uint,
                    1i32 as libc::c_uchar,
                  );
                  let fresh15 = (*ptr_to_globals).dot;
                  (*ptr_to_globals).dot = (*ptr_to_globals).dot.offset(1);
                  *fresh15 = ' ' as i32 as libc::c_char;
                  undo_push(
                    (*ptr_to_globals).dot.offset(-1),
                    1i32 as libc::c_uint,
                    2i32 as libc::c_uchar,
                  );
                  while ({
                    let mut bb__isblank: libc::c_uchar = *(*ptr_to_globals).dot as libc::c_uchar;
                    (bb__isblank as libc::c_int == ' ' as i32
                      || bb__isblank as libc::c_int == '\t' as i32)
                      as libc::c_int
                  }) != 0
                  {
                    text_hole_delete((*ptr_to_globals).dot, (*ptr_to_globals).dot, 2i32);
                  }
                }
                (*ptr_to_globals).cmdcnt -= 1;
                if !((*ptr_to_globals).cmdcnt > 0) {
                  break;
                }
              }
              end_cmd_q();
              current_block = 15129665204879337069;
            }
            3432363526595694666 => {
              dot_begin();
              dot_skip_over_ws();
              current_block = 3268579060917229304;
            }
            3494829253343353619 => {
              (*ptr_to_globals).dot = (*ptr_to_globals).screenbegin;
              if (*ptr_to_globals).cmdcnt as libc::c_uint
                > (*ptr_to_globals).rows.wrapping_sub(1i32 as libc::c_uint)
              {
                (*ptr_to_globals).cmdcnt =
                  (*ptr_to_globals).rows.wrapping_sub(1i32 as libc::c_uint) as libc::c_int
              }
              (*ptr_to_globals).cmdcnt -= 1;
              if (*ptr_to_globals).cmdcnt > 0 {
                do_cmd('+' as i32);
              }
              dot_skip_over_ws();
              current_block = 15129665204879337069;
            }
            17973101765331640574 => {
              c1 = get_one_char();
              if c1 != 'g' as i32 {
                buf[0] = 'g' as i32 as libc::c_char;
                buf[1] = if c1 >= 0 { c1 } else { '*' as i32 } as libc::c_char;
                buf[2] = '\u{0}' as i32 as libc::c_char;
                not_implemented(buf.as_mut_ptr());
                current_block = 15129665204879337069;
              } else {
                if (*ptr_to_globals).cmdcnt == 0 {
                  (*ptr_to_globals).cmdcnt = 1i32
                }
                current_block = 11945623545738147997;
              }
            }
            16546625800574160972 => {
              save_dot = (*ptr_to_globals).dot;
              (*ptr_to_globals).dot = dollar_line((*ptr_to_globals).dot);
              (*ptr_to_globals).dot = yank_delete(
                save_dot,
                (*ptr_to_globals).dot,
                0,
                YANKDEL as libc::c_int,
                1i32,
              );
              if c == 'C' as i32 {
                current_block = 8629930936610358348;
              } else {
                if c == 'D' as i32 {
                  end_cmd_q();
                }
                current_block = 15129665204879337069;
              }
            }
            11937696639986586685 => {
              cnt = count_lines((*ptr_to_globals).text, (*ptr_to_globals).dot);
              c1 = get_one_char();
              find_range(&mut p, &mut q, c1 as libc::c_char);
              yank_delete(p, q, 1i32, YANKONLY as libc::c_int, 0);
              p = begin_line(p);
              q = end_line(q);
              i = count_lines(p, q);
              while i > 0 {
                if c == '<' as i32 {
                  if *p as libc::c_int == '\t' as i32 {
                    text_hole_delete(p, p, 0);
                  } else if *p as libc::c_int == ' ' as i32 {
                    j = 0;
                    while *p as libc::c_int == ' ' as i32 && j < (*ptr_to_globals).tabstop {
                      text_hole_delete(p, p, 0);
                      j += 1
                    }
                  }
                } else if c == '>' as i32 {
                  char_insert(p, '\t' as i32 as libc::c_char, 1i32);
                }
                i -= 1;
                p = next_line(p)
              }
              (*ptr_to_globals).dot = find_line(cnt);
              dot_skip_over_ws();
              end_cmd_q();
              current_block = 15129665204879337069;
            }
            17725350714912028156 => {
              p = get_input_line(b":\x00" as *const u8 as *const libc::c_char);
              colon(p);
              current_block = 15129665204879337069;
            }
            14526470074083880812 => {
              q = char_search(
                (*ptr_to_globals).dot,
                b"\n\n\x00" as *const u8 as *const libc::c_char,
                (FORWARD as libc::c_int) << 1i32 | FULL as libc::c_int,
              );
              if !q.is_null() {
                (*ptr_to_globals).dot = next_line(q)
              }
              current_block = 15129665204879337069;
            }
            8893187391306414141 => {
              q = char_search(
                (*ptr_to_globals).dot,
                b"\n\n\x00" as *const u8 as *const libc::c_char,
                ((BACK as libc::c_int as libc::c_uint) << 1i32
                  | FULL as libc::c_int as libc::c_uint) as libc::c_int,
              );
              if !q.is_null() {
                (*ptr_to_globals).dot = next_line(q)
              }
              current_block = 15129665204879337069;
            }
            7021673758293221412 => {
              dir = BACK as libc::c_int;
              p = (*ptr_to_globals).dot.offset(-1);
              if *(*ptr_to_globals).last_search_pattern.offset(0) as libc::c_int == '?' as i32 {
                dir = FORWARD as libc::c_int;
                p = (*ptr_to_globals).dot.offset(1)
              }
              current_block = 4166979493554389389;
            }
            18374191879090272823 => {
              buf[0] = c as libc::c_char;
              buf[1] = '\u{0}' as i32 as libc::c_char;
              q = get_input_line(buf.as_mut_ptr());
              if *q.offset(0) as libc::c_int != 0 && *q.offset(1) == 0 {
                if *(*ptr_to_globals).last_search_pattern.offset(0) != 0 {
                  *(*ptr_to_globals).last_search_pattern.offset(0) = c as libc::c_char
                }
                current_block = 7392824444931029276;
              } else if *q.offset(0) != 0 {
                free((*ptr_to_globals).last_search_pattern as *mut libc::c_void);
                (*ptr_to_globals).last_search_pattern = crate::libbb::xfuncs_printf::xstrdup(q);
                current_block = 7392824444931029276;
              } else {
                current_block = 15129665204879337069;
              }
            }
            16407828456666301883 => {
              if (*ptr_to_globals).last_forward_char == 0 {
                current_block = 15129665204879337069;
              } else {
                loop {
                  q = (*ptr_to_globals).dot.offset(-1);
                  while q >= (*ptr_to_globals).text
                    && *q as libc::c_int != '\n' as i32
                    && *q as libc::c_int != (*ptr_to_globals).last_forward_char
                  {
                    q = q.offset(-1)
                  }
                  if q >= (*ptr_to_globals).text
                    && *q as libc::c_int == (*ptr_to_globals).last_forward_char
                  {
                    (*ptr_to_globals).dot = q
                  }
                  (*ptr_to_globals).cmdcnt -= 1;
                  if !((*ptr_to_globals).cmdcnt > 0) {
                    break;
                  }
                }
                current_block = 15129665204879337069;
              }
            }
            9018432604062702004 => {
              q = (*ptr_to_globals).dot;
              while q < (*ptr_to_globals).end && *q as libc::c_int != '\n' as i32 {
                if !strchr(
                  b"()[]{}\x00" as *const u8 as *const libc::c_char,
                  *q as libc::c_int,
                )
                .is_null()
                {
                  p = find_pair(q, *q);
                  if p.is_null() {
                    indicate_error();
                  } else {
                    (*ptr_to_globals).dot = p
                  }
                  break;
                } else {
                  q = q.offset(1)
                }
              }
              if *q as libc::c_int == '\n' as i32 {
                indicate_error();
              }
              current_block = 15129665204879337069;
            }
            10247103787464459848 => {
              p = (*ptr_to_globals).reg[(*ptr_to_globals).YDreg as usize];
              if p.is_null() {
                status_line_bold(
                  b"Nothing in register %c\x00" as *const u8 as *const libc::c_char,
                  what_reg() as libc::c_int,
                );
              } else {
                if !strchr(p, '\n' as i32).is_null() {
                  if c == 'P' as i32 {
                    dot_begin();
                  }
                  if c == 'p' as i32 {
                    if end_line((*ptr_to_globals).dot) == (*ptr_to_globals).end.offset(-1) {
                      (*ptr_to_globals).dot = (*ptr_to_globals).end
                    } else {
                      dot_next();
                    }
                  }
                } else if c == 'p' as i32 {
                  dot_right();
                }
                string_insert((*ptr_to_globals).dot, p, 1i32);
                end_cmd_q();
              }
              current_block = 15129665204879337069;
            }
            15260732871948875843 => {
              c1 = (get_one_char() | 0x20i32) - 'a' as i32;
              if c1 as libc::c_uint <= 25i32 as libc::c_uint {
                (*ptr_to_globals).mark[c1 as usize] = (*ptr_to_globals).dot
              } else {
                indicate_error();
              }
              current_block = 15129665204879337069;
            }
            12738322036487086035 => {
              c1 = get_one_char() | 0x20i32;
              if (c1 - 'a' as i32) as libc::c_uint <= 25i32 as libc::c_uint {
                c1 = c1 - 'a' as i32;
                q = (*ptr_to_globals).mark[c1 as usize];
                if (*ptr_to_globals).text <= q && q < (*ptr_to_globals).end {
                  (*ptr_to_globals).dot = q;
                  dot_begin();
                  dot_skip_over_ws();
                }
              } else if c1 == '\'' as i32 {
                (*ptr_to_globals).dot = swap_context((*ptr_to_globals).dot);
                dot_begin();
                dot_skip_over_ws();
              } else {
                indicate_error();
              }
              current_block = 15129665204879337069;
            }
            13255096073384561358 => {
              c1 = (get_one_char() | 0x20i32) - 'a' as i32;
              if c1 as libc::c_uint <= 25i32 as libc::c_uint {
                (*ptr_to_globals).YDreg = c1 as smalluint
              } else {
                indicate_error();
              }
              current_block = 15129665204879337069;
            }
            10258711639984089377 => {
              if (*ptr_to_globals).cmd_mode as libc::c_int == 0 {
                indicate_error();
              }
              (*ptr_to_globals).cmd_mode = 0 as smallint;
              undo_queue_commit();
              end_cmd_q();
              (*ptr_to_globals).last_status_cksum = 0;
              current_block = 15129665204879337069;
            }
            11439127087547047736 => {
              buf[0] = c as libc::c_char;
              buf[1] = '\u{0}' as i32 as libc::c_char;
              not_implemented(buf.as_mut_ptr());
              end_cmd_q();
              current_block = 17440971994642376514;
            }
            7961798899781870241 => {
              dot_scroll(
                (*ptr_to_globals).rows.wrapping_sub(2i32 as libc::c_uint) as libc::c_int,
                -1i32,
              );
              current_block = 15129665204879337069;
            }
            9426343755402444879 => {
              dot_scroll(
                (*ptr_to_globals)
                  .rows
                  .wrapping_sub(2i32 as libc::c_uint)
                  .wrapping_div(2i32 as libc::c_uint) as libc::c_int,
                1i32,
              );
              current_block = 15129665204879337069;
            }
            13352459794680105913 => {
              dot_scroll(1i32, 1i32);
              current_block = 15129665204879337069;
            }
            14142272253464333006 => {
              dot_scroll(
                (*ptr_to_globals).rows.wrapping_sub(2i32 as libc::c_uint) as libc::c_int,
                1i32,
              );
              current_block = 15129665204879337069;
            }
            10758177197742640066 => {
              (*ptr_to_globals).last_status_cksum = 0;
              current_block = 15129665204879337069;
            }
            6152256259730122749 => {
              current_block = 7534742345255184552;
            }
            12883932598258173301 => {
              current_block = 8800996768013373992;
            }
            11242998110520238401 => {
              redraw(1i32);
              current_block = 15129665204879337069;
            }
            13619733043935729992 => {
              loop {
                dot_next();
                dot_skip_over_ws();
                (*ptr_to_globals).cmdcnt -= 1;
                if !((*ptr_to_globals).cmdcnt > 0) {
                  break;
                }
              }
              current_block = 15129665204879337069;
            }
            9339065157412720613 => {
              dot_scroll(
                (*ptr_to_globals)
                  .rows
                  .wrapping_sub(2i32 as libc::c_uint)
                  .wrapping_div(2i32 as libc::c_uint) as libc::c_int,
                -1i32,
              );
              current_block = 15129665204879337069;
            }
            11447082683497798022 => {
              dot_scroll(1i32, -1i32);
              current_block = 15129665204879337069;
            }
            5182000506326660482 => {
              current_block = 13993698454868426881;
            }
            1105010766850597332 => {
              if !(*ptr_to_globals).reg[27].is_null() {
                p = begin_line((*ptr_to_globals).dot);
                q = end_line((*ptr_to_globals).dot);
                p = text_hole_delete(p, q, 1i32);
                p = p.offset(string_insert(p, (*ptr_to_globals).reg[27], 2i32) as isize);
                (*ptr_to_globals).dot = p;
                dot_skip_over_ws();
              }
              current_block = 15129665204879337069;
            }
            8616046655533110204 => {
              undo_pop();
              current_block = 15129665204879337069;
            }
            5127767458142431603 => {
              loop {
                (*ptr_to_globals).dot = end_line((*ptr_to_globals).dot);
                (*ptr_to_globals).cmdcnt -= 1;
                if (*ptr_to_globals).cmdcnt <= 0 {
                  break;
                }
                dot_next();
              }
              current_block = 15129665204879337069;
            }
            222014967776118151 => {
              (*ptr_to_globals).last_forward_char = get_one_char();
              current_block = 7856905509180742666;
            }
            11209792479411604110 => {
              loop {
                dot_prev();
                dot_skip_over_ws();
                (*ptr_to_globals).cmdcnt -= 1;
                if !((*ptr_to_globals).cmdcnt > 0) {
                  break;
                }
              }
              current_block = 15129665204879337069;
            }
            3364823792826654116 => {
              if (*ptr_to_globals).lmc_len != 0 {
                (*ptr_to_globals).ioq_start = crate::libbb::xfuncs_printf::xstrndup(
                  (*ptr_to_globals).last_modifying_cmd.as_mut_ptr(),
                  (*ptr_to_globals).lmc_len,
                );
                (*ptr_to_globals).ioq = (*ptr_to_globals).ioq_start
              }
              current_block = 15129665204879337069;
            }
            18096603330221575131 => {
              current_block = 17498168302144015873;
            }
            16891123271837848903 => {
              dot_end();
              current_block = 1752638907092016026;
            }
            8517235759107662071 => {
              current_block = 5847749760081351726;
            }
            12525254419223051704 => {
              if (*ptr_to_globals).dot < (*ptr_to_globals).end.offset(-1) {
                (*ptr_to_globals).dot = yank_delete(
                  (*ptr_to_globals).dot,
                  (*ptr_to_globals).dot,
                  1i32,
                  YANKDEL as libc::c_int,
                  1i32,
                )
              }
              current_block = 15129665204879337069;
            }
            15232911949322867522 => {
              current_block = 17251831742223396249;
            }
            10863374208794025069 => {
              current_block = 1895262434596074581;
            }
            451126677064669119 => {
              loop {
                dot_prev();
                (*ptr_to_globals).dot = move_to_col(
                  (*ptr_to_globals).dot,
                  (*ptr_to_globals).ccol + (*ptr_to_globals).offset,
                );
                (*ptr_to_globals).cmdcnt -= 1;
                if !((*ptr_to_globals).cmdcnt > 0) {
                  break;
                }
              }
              current_block = 15129665204879337069;
            }
            4611735929166613116 => {
              loop {
                if bb_ascii_isalnum(*(*ptr_to_globals).dot as libc::c_uchar) != 0
                  || *(*ptr_to_globals).dot as libc::c_int == '_' as i32
                {
                  (*ptr_to_globals).dot = skip_thing(
                    (*ptr_to_globals).dot,
                    1i32,
                    FORWARD as libc::c_int,
                    S_END_ALNUM as libc::c_int,
                  )
                } else if *strchrnul(
                  b"!\"#$%&\'()*+,-./:;<=>?@[\\]^_`{|}~\x00" as *const u8 as *const libc::c_char,
                  *(*ptr_to_globals).dot as libc::c_int,
                )
                .offset(0)
                  != 0
                {
                  (*ptr_to_globals).dot = skip_thing(
                    (*ptr_to_globals).dot,
                    1i32,
                    FORWARD as libc::c_int,
                    S_END_PUNCT as libc::c_int,
                  )
                }
                if (*ptr_to_globals).dot < (*ptr_to_globals).end.offset(-1) {
                  (*ptr_to_globals).dot = (*ptr_to_globals).dot.offset(1)
                }
                if ({
                  let mut bb__isspace: libc::c_uchar =
                    (*(*ptr_to_globals).dot as libc::c_int - 9i32) as libc::c_uchar;
                  (bb__isspace as libc::c_int == ' ' as i32 - 9i32
                    || bb__isspace as libc::c_int <= 13i32 - 9i32) as libc::c_int
                }) != 0
                {
                  (*ptr_to_globals).dot = skip_thing(
                    (*ptr_to_globals).dot,
                    2i32,
                    FORWARD as libc::c_int,
                    S_OVER_WS as libc::c_int,
                  )
                }
                (*ptr_to_globals).cmdcnt -= 1;
                if !((*ptr_to_globals).cmdcnt > 0) {
                  break;
                }
              }
              current_block = 15129665204879337069;
            }
            4386451087681909888 => {
              (*ptr_to_globals).dot =
                move_to_col((*ptr_to_globals).dot, (*ptr_to_globals).cmdcnt - 1i32);
              current_block = 15129665204879337069;
            }
            1296397779060594135 => {
              dot_begin();
              current_block = 15129665204879337069;
            }
            _ => {}
          }
          match current_block {
            15129665204879337069 => {}
            8629930936610358348 => {}
            _ => {
              match current_block {
                17251831742223396249 => {
                  dir = 0;
                  if c == 'X' as i32 {
                    dir = -1i32
                  }
                  loop {
                    if *(*ptr_to_globals).dot.offset(dir as isize) as libc::c_int != '\n' as i32 {
                      if c == 'X' as i32 {
                        (*ptr_to_globals).dot = (*ptr_to_globals).dot.offset(-1)
                      }
                      (*ptr_to_globals).dot = yank_delete(
                        (*ptr_to_globals).dot,
                        (*ptr_to_globals).dot,
                        0,
                        YANKDEL as libc::c_int,
                        1i32,
                      )
                    }
                    (*ptr_to_globals).cmdcnt -= 1;
                    if !((*ptr_to_globals).cmdcnt > 0) {
                      break;
                    }
                  }
                  end_cmd_q();
                  if c == 's' as i32 {
                    current_block = 8629930936610358348;
                  } else {
                    current_block = 15129665204879337069;
                  }
                }
                2087484904894455135 => {
                  dot_end();
                  (*ptr_to_globals).dot =
                    char_insert((*ptr_to_globals).dot, '\n' as i32 as libc::c_char, 1i32);
                  current_block = 8629930936610358348;
                }
                11945623545738147997 => {
                  (*ptr_to_globals).dot = (*ptr_to_globals).end.offset(-1);
                  if (*ptr_to_globals).cmdcnt > 0 {
                    (*ptr_to_globals).dot = find_line((*ptr_to_globals).cmdcnt)
                  }
                  dot_skip_over_ws();
                  current_block = 15129665204879337069;
                }
                5847749760081351726 => {
                  dir = FORWARD as libc::c_int;
                  if c == 'B' as i32 {
                    dir = BACK as libc::c_int
                  }
                  loop {
                    if c == 'W' as i32
                      || ({
                        let mut bb__isspace: libc::c_uchar =
                          (*(*ptr_to_globals).dot.offset(dir as isize) as libc::c_int - 9i32)
                            as libc::c_uchar;
                        (bb__isspace as libc::c_int == ' ' as i32 - 9i32
                          || bb__isspace as libc::c_int <= 13i32 - 9i32)
                          as libc::c_int
                      }) != 0
                    {
                      (*ptr_to_globals).dot =
                        skip_thing((*ptr_to_globals).dot, 1i32, dir, S_TO_WS as libc::c_int);
                      (*ptr_to_globals).dot =
                        skip_thing((*ptr_to_globals).dot, 2i32, dir, S_OVER_WS as libc::c_int)
                    }
                    if c != 'W' as i32 {
                      (*ptr_to_globals).dot =
                        skip_thing((*ptr_to_globals).dot, 1i32, dir, S_BEFORE_WS as libc::c_int)
                    }
                    (*ptr_to_globals).cmdcnt -= 1;
                    if !((*ptr_to_globals).cmdcnt > 0) {
                      break;
                    }
                  }
                  current_block = 15129665204879337069;
                }
                17440971994642376514 => {
                  current_block = 15129665204879337069;
                }
                7534742345255184552 => {
                  current_block = 17247297260531395789;
                }
                8800996768013373992 => {
                  loop {
                    dot_next();
                    (*ptr_to_globals).dot = move_to_col(
                      (*ptr_to_globals).dot,
                      (*ptr_to_globals).ccol + (*ptr_to_globals).offset,
                    );
                    (*ptr_to_globals).cmdcnt -= 1;
                    if !((*ptr_to_globals).cmdcnt > 0) {
                      break;
                    }
                  }
                  current_block = 15129665204879337069;
                }
                13993698454868426881 => {
                  loop {
                    dot_right();
                    (*ptr_to_globals).cmdcnt -= 1;
                    if !((*ptr_to_globals).cmdcnt > 0) {
                      break;
                    }
                  }
                  current_block = 15129665204879337069;
                }
                7856905509180742666 => {
                  while !((*ptr_to_globals).last_forward_char == 0) {
                    q = (*ptr_to_globals).dot.offset(1);
                    while q < (*ptr_to_globals).end.offset(-1)
                      && *q as libc::c_int != '\n' as i32
                      && *q as libc::c_int != (*ptr_to_globals).last_forward_char
                    {
                      q = q.offset(1)
                    }
                    if *q as libc::c_int == (*ptr_to_globals).last_forward_char {
                      (*ptr_to_globals).dot = q
                    }
                    (*ptr_to_globals).cmdcnt -= 1;
                    if !((*ptr_to_globals).cmdcnt > 0) {
                      break;
                    }
                  }
                  current_block = 15129665204879337069;
                }
                17498168302144015873 => {
                  current_block = 8681395796513813967;
                }
                1752638907092016026 => {
                  if *(*ptr_to_globals).dot as libc::c_int != '\n' as i32 {
                    (*ptr_to_globals).dot = (*ptr_to_globals).dot.offset(1)
                  }
                  current_block = 8629930936610358348;
                }
                3268579060917229304 => {
                  current_block = 8629930936610358348;
                }
                1895262434596074581 => {
                  current_block = 8908416993177701018;
                }
                _ => {}
              }
              match current_block {
                8629930936610358348 => {}
                15129665204879337069 => {}
                _ => {
                  match current_block {
                    17247297260531395789 => {
                      loop {
                        dot_left();
                        (*ptr_to_globals).cmdcnt -= 1;
                        if !((*ptr_to_globals).cmdcnt > 0) {
                          break;
                        }
                      }
                      current_block = 15129665204879337069;
                    }
                    8681395796513813967 => {
                      current_block = 5591548203144509315;
                    }
                    8908416993177701018 => {
                      current_block = 16124761010012532485;
                    }
                    _ => {}
                  }
                  match current_block {
                    15129665204879337069 => {}
                    _ => {
                      match current_block {
                        16124761010012532485 => {
                          let mut yf: libc::c_int = 0;
                          let mut ml: libc::c_int = 0;
                          let mut whole: libc::c_int = 0;
                          yf = YANKDEL as libc::c_int;
                          if c == 'y' as i32 || c == 'Y' as i32 {
                            yf = YANKONLY as libc::c_int
                          }
                          c1 = 'y' as i32;
                          if c != 'Y' as i32 {
                            c1 = get_one_char()
                          }
                          ml = find_range(&mut p, &mut q, c1 as libc::c_char);
                          place_cursor(0i32, 0);
                          if c1 == 27i32 {
                            c1 = 27i32;
                            c = c1
                          } else if !strchr(b"wW\x00" as *const u8 as *const libc::c_char, c1)
                            .is_null()
                          {
                            ml = 0;
                            if c == 'c' as i32 {
                              while ({
                                let mut bb__isspace: libc::c_uchar =
                                  (*q as libc::c_int - 9i32) as libc::c_uchar;
                                (bb__isspace as libc::c_int == ' ' as i32 - 9i32
                                  || bb__isspace as libc::c_int <= 13i32 - 9i32)
                                  as libc::c_int
                              }) != 0
                                && q > p
                              {
                                q = q.offset(-1)
                              }
                            }
                            (*ptr_to_globals).dot = yank_delete(p, q, ml, yf, 1i32)
                          } else if !strchr(
                            b"^0bBeEft%$ lh\x08\x7f\x00" as *const u8 as *const libc::c_char,
                            c1,
                          )
                          .is_null()
                          {
                            (*ptr_to_globals).dot = yank_delete(p, q, ml, yf, 1i32)
                          } else if !strchr(
                            b"cdykjGHL+-{}\r\n\x00" as *const u8 as *const libc::c_char,
                            c1,
                          )
                          .is_null()
                          {
                            (*ptr_to_globals).dot = yank_delete(p, q, ml, yf, 1i32);
                            whole = 1i32
                          } else {
                            c1 = 27i32;
                            c = c1;
                            ml = 0;
                            indicate_error();
                          }
                          if ml != 0 && whole != 0 {
                            if c == 'c' as i32 {
                              (*ptr_to_globals).dot = char_insert(
                                (*ptr_to_globals).dot,
                                '\n' as i32 as libc::c_char,
                                2i32,
                              );
                              if whole != 0
                                && (*ptr_to_globals).dot != (*ptr_to_globals).end.offset(-1)
                              {
                                dot_prev();
                              }
                            } else if c == 'd' as i32 {
                              dot_begin();
                              dot_skip_over_ws();
                            }
                          }
                          if c1 != 27i32 {
                            if c == 'c' as i32 {
                              strcpy(
                                buf.as_mut_ptr(),
                                b"Change\x00" as *const u8 as *const libc::c_char,
                              );
                              current_block = 8629930936610358348;
                            } else {
                              if c == 'd' as i32 {
                                strcpy(
                                  buf.as_mut_ptr(),
                                  b"Delete\x00" as *const u8 as *const libc::c_char,
                                );
                              }
                              if c == 'y' as i32 || c == 'Y' as i32 {
                                strcpy(
                                  buf.as_mut_ptr(),
                                  b"Yank\x00" as *const u8 as *const libc::c_char,
                                );
                              }
                              p = (*ptr_to_globals).reg[(*ptr_to_globals).YDreg as usize];
                              q = p.offset(strlen(p) as isize);
                              cnt = 0;
                              while p <= q {
                                if *p as libc::c_int == '\n' as i32 {
                                  cnt += 1
                                }
                                p = p.offset(1)
                              }
                              status_line(
                                b"%s %u lines (%u chars) using [%c]\x00" as *const u8
                                  as *const libc::c_char,
                                buf.as_mut_ptr(),
                                cnt,
                                strlen((*ptr_to_globals).reg[(*ptr_to_globals).YDreg as usize])
                                  as libc::c_uint,
                                what_reg() as libc::c_int,
                              );
                              end_cmd_q();
                              current_block = 15129665204879337069;
                            }
                          } else {
                            current_block = 15129665204879337069;
                          }
                        }
                        5591548203144509315 => {
                          current_block = 2636677179867529885;
                        }
                        _ => {}
                      }
                      match current_block {
                        15129665204879337069 => {}
                        8629930936610358348 => {}
                        _ => {
                          match current_block {
                            2636677179867529885 => {
                              current_block = 12309206730560524281;
                            }
                            _ => {}
                          }
                          match current_block {
                            12309206730560524281 => {
                              current_block = 3325768110057758661;
                            }
                            _ => {}
                          }
                          match current_block {
                            3325768110057758661 => {
                              current_block = 14815832896553429982;
                            }
                            _ => {}
                          }
                          match current_block {
                            14815832896553429982 => {
                              current_block = 10731695520297161438;
                            }
                            _ => {}
                          }
                          match current_block {
                            10731695520297161438 => {
                              if c == '0' as i32 && (*ptr_to_globals).cmdcnt < 1i32 {
                                dot_begin();
                              } else {
                                (*ptr_to_globals).cmdcnt =
                                  (*ptr_to_globals).cmdcnt * 10i32 + (c - '0' as i32)
                              }
                              current_block = 15129665204879337069;
                            }
                            _ => {}
                          }
                          match current_block {
                            15129665204879337069 => {}
                            _ => {
                              loop {
                                match current_block {
                                  16813369756331276724 => {
                                    msg = std::ptr::null();
                                    current_block = 7392824444931029276;
                                  }
                                  7392824444931029276 => {
                                    dir = FORWARD as libc::c_int;
                                    p = (*ptr_to_globals).dot.offset(1);
                                    if *(*ptr_to_globals).last_search_pattern.offset(0)
                                      as libc::c_int
                                      == '?' as i32
                                    {
                                      dir = BACK as libc::c_int;
                                      p = (*ptr_to_globals).dot.offset(-1)
                                    }
                                    current_block = 4166979493554389389;
                                  }
                                  _ => {
                                    q = char_search(
                                      p,
                                      (*ptr_to_globals).last_search_pattern.offset(1),
                                      dir << 1i32 | FULL as libc::c_int,
                                    );
                                    if !q.is_null() {
                                      (*ptr_to_globals).dot = q;
                                      msg = std::ptr::null()
                                    } else {
                                      p = (*ptr_to_globals).text;
                                      if dir == BACK as libc::c_int {
                                        p = (*ptr_to_globals).end.offset(-1)
                                      }
                                      q = char_search(
                                        p,
                                        (*ptr_to_globals).last_search_pattern.offset(1),
                                        dir << 1i32 | FULL as libc::c_int,
                                      );
                                      if !q.is_null() {
                                        (*ptr_to_globals).dot = q;
                                        msg = b"search hit BOTTOM, continuing at TOP\x00"
                                          as *const u8
                                          as *const libc::c_char;
                                        if dir == BACK as libc::c_int {
                                          msg = b"search hit TOP, continuing at BOTTOM\x00"
                                            as *const u8
                                            as *const libc::c_char
                                        }
                                      } else {
                                        msg = b"Pattern not found\x00" as *const u8
                                          as *const libc::c_char
                                      }
                                    }
                                    if !msg.is_null() {
                                      status_line_bold(
                                        b"%s\x00" as *const u8 as *const libc::c_char,
                                        msg,
                                      );
                                    }
                                    (*ptr_to_globals).cmdcnt -= 1;
                                    if (*ptr_to_globals).cmdcnt > 0 {
                                      current_block = 16813369756331276724;
                                    } else {
                                      break;
                                    }
                                  }
                                }
                              }
                              current_block = 15129665204879337069;
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
        12 | 18 => {
          current_block = 11242998110520238401;
          match current_block {
            16992905640583886232 => {
              loop {
                if (*(*ptr_to_globals).dot as libc::c_int - 'a' as i32) as libc::c_uchar
                  as libc::c_int
                  <= 'z' as i32 - 'a' as i32
                {
                  undo_push(
                    (*ptr_to_globals).dot,
                    1i32 as libc::c_uint,
                    1i32 as libc::c_uchar,
                  );
                  *(*ptr_to_globals).dot =
                    bb_ascii_toupper(*(*ptr_to_globals).dot as libc::c_uchar) as libc::c_char;
                  undo_push(
                    (*ptr_to_globals).dot,
                    1i32 as libc::c_uint,
                    2i32 as libc::c_uchar,
                  );
                } else if (*(*ptr_to_globals).dot as libc::c_int - 'A' as i32) as libc::c_uchar
                  as libc::c_int
                  <= 'Z' as i32 - 'A' as i32
                {
                  undo_push(
                    (*ptr_to_globals).dot,
                    1i32 as libc::c_uint,
                    1i32 as libc::c_uchar,
                  );
                  *(*ptr_to_globals).dot =
                    bb_ascii_tolower(*(*ptr_to_globals).dot as libc::c_uchar) as libc::c_char;
                  undo_push(
                    (*ptr_to_globals).dot,
                    1i32 as libc::c_uint,
                    2i32 as libc::c_uchar,
                  );
                }
                dot_right();
                (*ptr_to_globals).cmdcnt -= 1;
                if !((*ptr_to_globals).cmdcnt > 0) {
                  break;
                }
              }
              end_cmd_q();
              current_block = 15129665204879337069;
            }
            8729655159604064397 => {
              c1 = get_one_char();
              cnt = 0;
              if c1 == '.' as i32 {
                cnt = (*ptr_to_globals)
                  .rows
                  .wrapping_sub(2i32 as libc::c_uint)
                  .wrapping_div(2i32 as libc::c_uint) as libc::c_int
              }
              if c1 == '-' as i32 {
                cnt = (*ptr_to_globals).rows.wrapping_sub(2i32 as libc::c_uint) as libc::c_int
              }
              (*ptr_to_globals).screenbegin = begin_line((*ptr_to_globals).dot);
              dot_scroll(cnt, -1i32);
              current_block = 15129665204879337069;
            }
            15899500648299942075 => {
              (*ptr_to_globals).last_forward_char = get_one_char();
              do_cmd(';' as i32);
              if *(*ptr_to_globals).dot as libc::c_int == (*ptr_to_globals).last_forward_char {
                dot_left();
              }
              (*ptr_to_globals).last_forward_char = 0;
              current_block = 15129665204879337069;
            }
            9051390181078481641 => {
              c1 = get_one_char();
              if *(*ptr_to_globals).dot as libc::c_int != '\n' as i32 {
                (*ptr_to_globals).dot =
                  text_hole_delete((*ptr_to_globals).dot, (*ptr_to_globals).dot, 1i32);
                (*ptr_to_globals).dot =
                  char_insert((*ptr_to_globals).dot, c1 as libc::c_char, 2i32);
                dot_left();
              }
              end_cmd_q();
              current_block = 15129665204879337069;
            }
            877115918601926659 => {
              dir = FORWARD as libc::c_int;
              if c == 'b' as i32 {
                dir = BACK as libc::c_int
              }
              while !((*ptr_to_globals).dot.offset(dir as isize) < (*ptr_to_globals).text
                || (*ptr_to_globals).dot.offset(dir as isize) > (*ptr_to_globals).end.offset(-1))
              {
                (*ptr_to_globals).dot = (*ptr_to_globals).dot.offset(dir as isize);
                if ({
                  let mut bb__isspace: libc::c_uchar =
                    (*(*ptr_to_globals).dot as libc::c_int - 9i32) as libc::c_uchar;
                  (bb__isspace as libc::c_int == ' ' as i32 - 9i32
                    || bb__isspace as libc::c_int <= 13i32 - 9i32) as libc::c_int
                }) != 0
                {
                  (*ptr_to_globals).dot = skip_thing(
                    (*ptr_to_globals).dot,
                    if c == 'e' as i32 { 2i32 } else { 1i32 },
                    dir,
                    S_OVER_WS as libc::c_int,
                  )
                }
                if bb_ascii_isalnum(*(*ptr_to_globals).dot as libc::c_uchar) != 0
                  || *(*ptr_to_globals).dot as libc::c_int == '_' as i32
                {
                  (*ptr_to_globals).dot =
                    skip_thing((*ptr_to_globals).dot, 1i32, dir, S_END_ALNUM as libc::c_int)
                } else if *strchrnul(
                  b"!\"#$%&\'()*+,-./:;<=>?@[\\]^_`{|}~\x00" as *const u8 as *const libc::c_char,
                  *(*ptr_to_globals).dot as libc::c_int,
                )
                .offset(0)
                  != 0
                {
                  (*ptr_to_globals).dot =
                    skip_thing((*ptr_to_globals).dot, 1i32, dir, S_END_PUNCT as libc::c_int)
                }
                (*ptr_to_globals).cmdcnt -= 1;
                if !((*ptr_to_globals).cmdcnt > 0) {
                  break;
                }
              }
              current_block = 15129665204879337069;
            }
            1085022737867179637 => {
              dot_begin();
              dot_skip_over_ws();
              current_block = 15129665204879337069;
            }
            3113147720494587438 => {
              c1 = get_one_char();
              if c1 != 'Z' as i32 {
                indicate_error();
              } else if (*ptr_to_globals).modified_count != 0 {
                if 1i32 != 0 && (*ptr_to_globals).readonly_mode as libc::c_int != 0 {
                  status_line_bold(
                    b"\'%s\' is read only\x00" as *const u8 as *const libc::c_char,
                    (*ptr_to_globals).current_filename,
                  );
                } else {
                  cnt = file_write(
                    (*ptr_to_globals).current_filename,
                    (*ptr_to_globals).text,
                    (*ptr_to_globals).end.offset(-1),
                  );
                  if cnt < 0 {
                    if cnt == -1i32 {
                      status_line_bold(b"Write error: %m\x00" as *const u8 as *const libc::c_char);
                    }
                  } else if cnt as libc::c_long
                    == (*ptr_to_globals)
                      .end
                      .offset(-1)
                      .wrapping_offset_from((*ptr_to_globals).text)
                      as libc::c_long
                      + 1
                  {
                    (*ptr_to_globals).editing = 0 as smallint
                  }
                }
              } else {
                (*ptr_to_globals).editing = 0 as smallint
              }
              current_block = 15129665204879337069;
            }
            12960118908218882441 => {
              p = begin_line((*ptr_to_globals).dot);
              if *p.offset(-1i32 as isize) as libc::c_int == '\n' as i32 {
                dot_prev();
                current_block = 2087484904894455135;
              } else {
                dot_begin();
                (*ptr_to_globals).dot =
                  char_insert((*ptr_to_globals).dot, '\n' as i32 as libc::c_char, 1i32);
                dot_prev();
                current_block = 8629930936610358348;
              }
            }
            8720450212473544924 => {
              (*ptr_to_globals).dot = (*ptr_to_globals).screenbegin;
              cnt = 0;
              while (cnt as libc::c_uint)
                < (*ptr_to_globals)
                  .rows
                  .wrapping_sub(1i32 as libc::c_uint)
                  .wrapping_div(2i32 as libc::c_uint)
              {
                (*ptr_to_globals).dot = next_line((*ptr_to_globals).dot);
                cnt += 1
              }
              current_block = 15129665204879337069;
            }
            13015277209715431090 => {
              (*ptr_to_globals).dot = end_screen();
              if (*ptr_to_globals).cmdcnt as libc::c_uint
                > (*ptr_to_globals).rows.wrapping_sub(1i32 as libc::c_uint)
              {
                (*ptr_to_globals).cmdcnt =
                  (*ptr_to_globals).rows.wrapping_sub(1i32 as libc::c_uint) as libc::c_int
              }
              (*ptr_to_globals).cmdcnt -= 1;
              if (*ptr_to_globals).cmdcnt > 0 {
                do_cmd('-' as i32);
              }
              dot_begin();
              dot_skip_over_ws();
              current_block = 15129665204879337069;
            }
            9800435767766781385 => {
              loop {
                dot_end();
                if (*ptr_to_globals).dot < (*ptr_to_globals).end.offset(-1) {
                  undo_push(
                    (*ptr_to_globals).dot,
                    1i32 as libc::c_uint,
                    1i32 as libc::c_uchar,
                  );
                  let fresh15 = (*ptr_to_globals).dot;
                  (*ptr_to_globals).dot = (*ptr_to_globals).dot.offset(1);
                  *fresh15 = ' ' as i32 as libc::c_char;
                  undo_push(
                    (*ptr_to_globals).dot.offset(-1),
                    1i32 as libc::c_uint,
                    2i32 as libc::c_uchar,
                  );
                  while ({
                    let mut bb__isblank: libc::c_uchar = *(*ptr_to_globals).dot as libc::c_uchar;
                    (bb__isblank as libc::c_int == ' ' as i32
                      || bb__isblank as libc::c_int == '\t' as i32)
                      as libc::c_int
                  }) != 0
                  {
                    text_hole_delete((*ptr_to_globals).dot, (*ptr_to_globals).dot, 2i32);
                  }
                }
                (*ptr_to_globals).cmdcnt -= 1;
                if !((*ptr_to_globals).cmdcnt > 0) {
                  break;
                }
              }
              end_cmd_q();
              current_block = 15129665204879337069;
            }
            3432363526595694666 => {
              dot_begin();
              dot_skip_over_ws();
              current_block = 3268579060917229304;
            }
            3494829253343353619 => {
              (*ptr_to_globals).dot = (*ptr_to_globals).screenbegin;
              if (*ptr_to_globals).cmdcnt as libc::c_uint
                > (*ptr_to_globals).rows.wrapping_sub(1i32 as libc::c_uint)
              {
                (*ptr_to_globals).cmdcnt =
                  (*ptr_to_globals).rows.wrapping_sub(1i32 as libc::c_uint) as libc::c_int
              }
              (*ptr_to_globals).cmdcnt -= 1;
              if (*ptr_to_globals).cmdcnt > 0 {
                do_cmd('+' as i32);
              }
              dot_skip_over_ws();
              current_block = 15129665204879337069;
            }
            17973101765331640574 => {
              c1 = get_one_char();
              if c1 != 'g' as i32 {
                buf[0] = 'g' as i32 as libc::c_char;
                buf[1] = if c1 >= 0 { c1 } else { '*' as i32 } as libc::c_char;
                buf[2] = '\u{0}' as i32 as libc::c_char;
                not_implemented(buf.as_mut_ptr());
                current_block = 15129665204879337069;
              } else {
                if (*ptr_to_globals).cmdcnt == 0 {
                  (*ptr_to_globals).cmdcnt = 1i32
                }
                current_block = 11945623545738147997;
              }
            }
            16546625800574160972 => {
              save_dot = (*ptr_to_globals).dot;
              (*ptr_to_globals).dot = dollar_line((*ptr_to_globals).dot);
              (*ptr_to_globals).dot = yank_delete(
                save_dot,
                (*ptr_to_globals).dot,
                0,
                YANKDEL as libc::c_int,
                1i32,
              );
              if c == 'C' as i32 {
                current_block = 8629930936610358348;
              } else {
                if c == 'D' as i32 {
                  end_cmd_q();
                }
                current_block = 15129665204879337069;
              }
            }
            11937696639986586685 => {
              cnt = count_lines((*ptr_to_globals).text, (*ptr_to_globals).dot);
              c1 = get_one_char();
              find_range(&mut p, &mut q, c1 as libc::c_char);
              yank_delete(p, q, 1i32, YANKONLY as libc::c_int, 0);
              p = begin_line(p);
              q = end_line(q);
              i = count_lines(p, q);
              while i > 0 {
                if c == '<' as i32 {
                  if *p as libc::c_int == '\t' as i32 {
                    text_hole_delete(p, p, 0);
                  } else if *p as libc::c_int == ' ' as i32 {
                    j = 0;
                    while *p as libc::c_int == ' ' as i32 && j < (*ptr_to_globals).tabstop {
                      text_hole_delete(p, p, 0);
                      j += 1
                    }
                  }
                } else if c == '>' as i32 {
                  char_insert(p, '\t' as i32 as libc::c_char, 1i32);
                }
                i -= 1;
                p = next_line(p)
              }
              (*ptr_to_globals).dot = find_line(cnt);
              dot_skip_over_ws();
              end_cmd_q();
              current_block = 15129665204879337069;
            }
            17725350714912028156 => {
              p = get_input_line(b":\x00" as *const u8 as *const libc::c_char);
              colon(p);
              current_block = 15129665204879337069;
            }
            14526470074083880812 => {
              q = char_search(
                (*ptr_to_globals).dot,
                b"\n\n\x00" as *const u8 as *const libc::c_char,
                (FORWARD as libc::c_int) << 1i32 | FULL as libc::c_int,
              );
              if !q.is_null() {
                (*ptr_to_globals).dot = next_line(q)
              }
              current_block = 15129665204879337069;
            }
            8893187391306414141 => {
              q = char_search(
                (*ptr_to_globals).dot,
                b"\n\n\x00" as *const u8 as *const libc::c_char,
                ((BACK as libc::c_int as libc::c_uint) << 1i32
                  | FULL as libc::c_int as libc::c_uint) as libc::c_int,
              );
              if !q.is_null() {
                (*ptr_to_globals).dot = next_line(q)
              }
              current_block = 15129665204879337069;
            }
            7021673758293221412 => {
              dir = BACK as libc::c_int;
              p = (*ptr_to_globals).dot.offset(-1);
              if *(*ptr_to_globals).last_search_pattern.offset(0) as libc::c_int == '?' as i32 {
                dir = FORWARD as libc::c_int;
                p = (*ptr_to_globals).dot.offset(1)
              }
              current_block = 4166979493554389389;
            }
            18374191879090272823 => {
              buf[0] = c as libc::c_char;
              buf[1] = '\u{0}' as i32 as libc::c_char;
              q = get_input_line(buf.as_mut_ptr());
              if *q.offset(0) as libc::c_int != 0 && *q.offset(1) == 0 {
                if *(*ptr_to_globals).last_search_pattern.offset(0) != 0 {
                  *(*ptr_to_globals).last_search_pattern.offset(0) = c as libc::c_char
                }
                current_block = 7392824444931029276;
              } else if *q.offset(0) != 0 {
                free((*ptr_to_globals).last_search_pattern as *mut libc::c_void);
                (*ptr_to_globals).last_search_pattern = crate::libbb::xfuncs_printf::xstrdup(q);
                current_block = 7392824444931029276;
              } else {
                current_block = 15129665204879337069;
              }
            }
            16407828456666301883 => {
              if (*ptr_to_globals).last_forward_char == 0 {
                current_block = 15129665204879337069;
              } else {
                loop {
                  q = (*ptr_to_globals).dot.offset(-1);
                  while q >= (*ptr_to_globals).text
                    && *q as libc::c_int != '\n' as i32
                    && *q as libc::c_int != (*ptr_to_globals).last_forward_char
                  {
                    q = q.offset(-1)
                  }
                  if q >= (*ptr_to_globals).text
                    && *q as libc::c_int == (*ptr_to_globals).last_forward_char
                  {
                    (*ptr_to_globals).dot = q
                  }
                  (*ptr_to_globals).cmdcnt -= 1;
                  if !((*ptr_to_globals).cmdcnt > 0) {
                    break;
                  }
                }
                current_block = 15129665204879337069;
              }
            }
            9018432604062702004 => {
              q = (*ptr_to_globals).dot;
              while q < (*ptr_to_globals).end && *q as libc::c_int != '\n' as i32 {
                if !strchr(
                  b"()[]{}\x00" as *const u8 as *const libc::c_char,
                  *q as libc::c_int,
                )
                .is_null()
                {
                  p = find_pair(q, *q);
                  if p.is_null() {
                    indicate_error();
                  } else {
                    (*ptr_to_globals).dot = p
                  }
                  break;
                } else {
                  q = q.offset(1)
                }
              }
              if *q as libc::c_int == '\n' as i32 {
                indicate_error();
              }
              current_block = 15129665204879337069;
            }
            10247103787464459848 => {
              p = (*ptr_to_globals).reg[(*ptr_to_globals).YDreg as usize];
              if p.is_null() {
                status_line_bold(
                  b"Nothing in register %c\x00" as *const u8 as *const libc::c_char,
                  what_reg() as libc::c_int,
                );
              } else {
                if !strchr(p, '\n' as i32).is_null() {
                  if c == 'P' as i32 {
                    dot_begin();
                  }
                  if c == 'p' as i32 {
                    if end_line((*ptr_to_globals).dot) == (*ptr_to_globals).end.offset(-1) {
                      (*ptr_to_globals).dot = (*ptr_to_globals).end
                    } else {
                      dot_next();
                    }
                  }
                } else if c == 'p' as i32 {
                  dot_right();
                }
                string_insert((*ptr_to_globals).dot, p, 1i32);
                end_cmd_q();
              }
              current_block = 15129665204879337069;
            }
            15260732871948875843 => {
              c1 = (get_one_char() | 0x20i32) - 'a' as i32;
              if c1 as libc::c_uint <= 25i32 as libc::c_uint {
                (*ptr_to_globals).mark[c1 as usize] = (*ptr_to_globals).dot
              } else {
                indicate_error();
              }
              current_block = 15129665204879337069;
            }
            12738322036487086035 => {
              c1 = get_one_char() | 0x20i32;
              if (c1 - 'a' as i32) as libc::c_uint <= 25i32 as libc::c_uint {
                c1 = c1 - 'a' as i32;
                q = (*ptr_to_globals).mark[c1 as usize];
                if (*ptr_to_globals).text <= q && q < (*ptr_to_globals).end {
                  (*ptr_to_globals).dot = q;
                  dot_begin();
                  dot_skip_over_ws();
                }
              } else if c1 == '\'' as i32 {
                (*ptr_to_globals).dot = swap_context((*ptr_to_globals).dot);
                dot_begin();
                dot_skip_over_ws();
              } else {
                indicate_error();
              }
              current_block = 15129665204879337069;
            }
            13255096073384561358 => {
              c1 = (get_one_char() | 0x20i32) - 'a' as i32;
              if c1 as libc::c_uint <= 25i32 as libc::c_uint {
                (*ptr_to_globals).YDreg = c1 as smalluint
              } else {
                indicate_error();
              }
              current_block = 15129665204879337069;
            }
            10258711639984089377 => {
              if (*ptr_to_globals).cmd_mode as libc::c_int == 0 {
                indicate_error();
              }
              (*ptr_to_globals).cmd_mode = 0 as smallint;
              undo_queue_commit();
              end_cmd_q();
              (*ptr_to_globals).last_status_cksum = 0;
              current_block = 15129665204879337069;
            }
            11439127087547047736 => {
              buf[0] = c as libc::c_char;
              buf[1] = '\u{0}' as i32 as libc::c_char;
              not_implemented(buf.as_mut_ptr());
              end_cmd_q();
              current_block = 17440971994642376514;
            }
            7961798899781870241 => {
              dot_scroll(
                (*ptr_to_globals).rows.wrapping_sub(2i32 as libc::c_uint) as libc::c_int,
                -1i32,
              );
              current_block = 15129665204879337069;
            }
            9426343755402444879 => {
              dot_scroll(
                (*ptr_to_globals)
                  .rows
                  .wrapping_sub(2i32 as libc::c_uint)
                  .wrapping_div(2i32 as libc::c_uint) as libc::c_int,
                1i32,
              );
              current_block = 15129665204879337069;
            }
            13352459794680105913 => {
              dot_scroll(1i32, 1i32);
              current_block = 15129665204879337069;
            }
            14142272253464333006 => {
              dot_scroll(
                (*ptr_to_globals).rows.wrapping_sub(2i32 as libc::c_uint) as libc::c_int,
                1i32,
              );
              current_block = 15129665204879337069;
            }
            10758177197742640066 => {
              (*ptr_to_globals).last_status_cksum = 0;
              current_block = 15129665204879337069;
            }
            6152256259730122749 => {
              current_block = 7534742345255184552;
            }
            12883932598258173301 => {
              current_block = 8800996768013373992;
            }
            11242998110520238401 => {
              redraw(1i32);
              current_block = 15129665204879337069;
            }
            13619733043935729992 => {
              loop {
                dot_next();
                dot_skip_over_ws();
                (*ptr_to_globals).cmdcnt -= 1;
                if !((*ptr_to_globals).cmdcnt > 0) {
                  break;
                }
              }
              current_block = 15129665204879337069;
            }
            9339065157412720613 => {
              dot_scroll(
                (*ptr_to_globals)
                  .rows
                  .wrapping_sub(2i32 as libc::c_uint)
                  .wrapping_div(2i32 as libc::c_uint) as libc::c_int,
                -1i32,
              );
              current_block = 15129665204879337069;
            }
            11447082683497798022 => {
              dot_scroll(1i32, -1i32);
              current_block = 15129665204879337069;
            }
            5182000506326660482 => {
              current_block = 13993698454868426881;
            }
            1105010766850597332 => {
              if !(*ptr_to_globals).reg[27].is_null() {
                p = begin_line((*ptr_to_globals).dot);
                q = end_line((*ptr_to_globals).dot);
                p = text_hole_delete(p, q, 1i32);
                p = p.offset(string_insert(p, (*ptr_to_globals).reg[27], 2i32) as isize);
                (*ptr_to_globals).dot = p;
                dot_skip_over_ws();
              }
              current_block = 15129665204879337069;
            }
            8616046655533110204 => {
              undo_pop();
              current_block = 15129665204879337069;
            }
            5127767458142431603 => {
              loop {
                (*ptr_to_globals).dot = end_line((*ptr_to_globals).dot);
                (*ptr_to_globals).cmdcnt -= 1;
                if (*ptr_to_globals).cmdcnt <= 0 {
                  break;
                }
                dot_next();
              }
              current_block = 15129665204879337069;
            }
            222014967776118151 => {
              (*ptr_to_globals).last_forward_char = get_one_char();
              current_block = 7856905509180742666;
            }
            11209792479411604110 => {
              loop {
                dot_prev();
                dot_skip_over_ws();
                (*ptr_to_globals).cmdcnt -= 1;
                if !((*ptr_to_globals).cmdcnt > 0) {
                  break;
                }
              }
              current_block = 15129665204879337069;
            }
            3364823792826654116 => {
              if (*ptr_to_globals).lmc_len != 0 {
                (*ptr_to_globals).ioq_start = crate::libbb::xfuncs_printf::xstrndup(
                  (*ptr_to_globals).last_modifying_cmd.as_mut_ptr(),
                  (*ptr_to_globals).lmc_len,
                );
                (*ptr_to_globals).ioq = (*ptr_to_globals).ioq_start
              }
              current_block = 15129665204879337069;
            }
            18096603330221575131 => {
              current_block = 17498168302144015873;
            }
            16891123271837848903 => {
              dot_end();
              current_block = 1752638907092016026;
            }
            8517235759107662071 => {
              current_block = 5847749760081351726;
            }
            12525254419223051704 => {
              if (*ptr_to_globals).dot < (*ptr_to_globals).end.offset(-1) {
                (*ptr_to_globals).dot = yank_delete(
                  (*ptr_to_globals).dot,
                  (*ptr_to_globals).dot,
                  1i32,
                  YANKDEL as libc::c_int,
                  1i32,
                )
              }
              current_block = 15129665204879337069;
            }
            15232911949322867522 => {
              current_block = 17251831742223396249;
            }
            10863374208794025069 => {
              current_block = 1895262434596074581;
            }
            451126677064669119 => {
              loop {
                dot_prev();
                (*ptr_to_globals).dot = move_to_col(
                  (*ptr_to_globals).dot,
                  (*ptr_to_globals).ccol + (*ptr_to_globals).offset,
                );
                (*ptr_to_globals).cmdcnt -= 1;
                if !((*ptr_to_globals).cmdcnt > 0) {
                  break;
                }
              }
              current_block = 15129665204879337069;
            }
            4611735929166613116 => {
              loop {
                if bb_ascii_isalnum(*(*ptr_to_globals).dot as libc::c_uchar) != 0
                  || *(*ptr_to_globals).dot as libc::c_int == '_' as i32
                {
                  (*ptr_to_globals).dot = skip_thing(
                    (*ptr_to_globals).dot,
                    1i32,
                    FORWARD as libc::c_int,
                    S_END_ALNUM as libc::c_int,
                  )
                } else if *strchrnul(
                  b"!\"#$%&\'()*+,-./:;<=>?@[\\]^_`{|}~\x00" as *const u8 as *const libc::c_char,
                  *(*ptr_to_globals).dot as libc::c_int,
                )
                .offset(0)
                  != 0
                {
                  (*ptr_to_globals).dot = skip_thing(
                    (*ptr_to_globals).dot,
                    1i32,
                    FORWARD as libc::c_int,
                    S_END_PUNCT as libc::c_int,
                  )
                }
                if (*ptr_to_globals).dot < (*ptr_to_globals).end.offset(-1) {
                  (*ptr_to_globals).dot = (*ptr_to_globals).dot.offset(1)
                }
                if ({
                  let mut bb__isspace: libc::c_uchar =
                    (*(*ptr_to_globals).dot as libc::c_int - 9i32) as libc::c_uchar;
                  (bb__isspace as libc::c_int == ' ' as i32 - 9i32
                    || bb__isspace as libc::c_int <= 13i32 - 9i32) as libc::c_int
                }) != 0
                {
                  (*ptr_to_globals).dot = skip_thing(
                    (*ptr_to_globals).dot,
                    2i32,
                    FORWARD as libc::c_int,
                    S_OVER_WS as libc::c_int,
                  )
                }
                (*ptr_to_globals).cmdcnt -= 1;
                if !((*ptr_to_globals).cmdcnt > 0) {
                  break;
                }
              }
              current_block = 15129665204879337069;
            }
            4386451087681909888 => {
              (*ptr_to_globals).dot =
                move_to_col((*ptr_to_globals).dot, (*ptr_to_globals).cmdcnt - 1i32);
              current_block = 15129665204879337069;
            }
            1296397779060594135 => {
              dot_begin();
              current_block = 15129665204879337069;
            }
            _ => {}
          }
          match current_block {
            15129665204879337069 => {}
            8629930936610358348 => {}
            _ => {
              match current_block {
                17251831742223396249 => {
                  dir = 0;
                  if c == 'X' as i32 {
                    dir = -1i32
                  }
                  loop {
                    if *(*ptr_to_globals).dot.offset(dir as isize) as libc::c_int != '\n' as i32 {
                      if c == 'X' as i32 {
                        (*ptr_to_globals).dot = (*ptr_to_globals).dot.offset(-1)
                      }
                      (*ptr_to_globals).dot = yank_delete(
                        (*ptr_to_globals).dot,
                        (*ptr_to_globals).dot,
                        0,
                        YANKDEL as libc::c_int,
                        1i32,
                      )
                    }
                    (*ptr_to_globals).cmdcnt -= 1;
                    if !((*ptr_to_globals).cmdcnt > 0) {
                      break;
                    }
                  }
                  end_cmd_q();
                  if c == 's' as i32 {
                    current_block = 8629930936610358348;
                  } else {
                    current_block = 15129665204879337069;
                  }
                }
                2087484904894455135 => {
                  dot_end();
                  (*ptr_to_globals).dot =
                    char_insert((*ptr_to_globals).dot, '\n' as i32 as libc::c_char, 1i32);
                  current_block = 8629930936610358348;
                }
                11945623545738147997 => {
                  (*ptr_to_globals).dot = (*ptr_to_globals).end.offset(-1);
                  if (*ptr_to_globals).cmdcnt > 0 {
                    (*ptr_to_globals).dot = find_line((*ptr_to_globals).cmdcnt)
                  }
                  dot_skip_over_ws();
                  current_block = 15129665204879337069;
                }
                5847749760081351726 => {
                  dir = FORWARD as libc::c_int;
                  if c == 'B' as i32 {
                    dir = BACK as libc::c_int
                  }
                  loop {
                    if c == 'W' as i32
                      || ({
                        let mut bb__isspace: libc::c_uchar =
                          (*(*ptr_to_globals).dot.offset(dir as isize) as libc::c_int - 9i32)
                            as libc::c_uchar;
                        (bb__isspace as libc::c_int == ' ' as i32 - 9i32
                          || bb__isspace as libc::c_int <= 13i32 - 9i32)
                          as libc::c_int
                      }) != 0
                    {
                      (*ptr_to_globals).dot =
                        skip_thing((*ptr_to_globals).dot, 1i32, dir, S_TO_WS as libc::c_int);
                      (*ptr_to_globals).dot =
                        skip_thing((*ptr_to_globals).dot, 2i32, dir, S_OVER_WS as libc::c_int)
                    }
                    if c != 'W' as i32 {
                      (*ptr_to_globals).dot =
                        skip_thing((*ptr_to_globals).dot, 1i32, dir, S_BEFORE_WS as libc::c_int)
                    }
                    (*ptr_to_globals).cmdcnt -= 1;
                    if !((*ptr_to_globals).cmdcnt > 0) {
                      break;
                    }
                  }
                  current_block = 15129665204879337069;
                }
                17440971994642376514 => {
                  current_block = 15129665204879337069;
                }
                7534742345255184552 => {
                  current_block = 17247297260531395789;
                }
                8800996768013373992 => {
                  loop {
                    dot_next();
                    (*ptr_to_globals).dot = move_to_col(
                      (*ptr_to_globals).dot,
                      (*ptr_to_globals).ccol + (*ptr_to_globals).offset,
                    );
                    (*ptr_to_globals).cmdcnt -= 1;
                    if !((*ptr_to_globals).cmdcnt > 0) {
                      break;
                    }
                  }
                  current_block = 15129665204879337069;
                }
                13993698454868426881 => {
                  loop {
                    dot_right();
                    (*ptr_to_globals).cmdcnt -= 1;
                    if !((*ptr_to_globals).cmdcnt > 0) {
                      break;
                    }
                  }
                  current_block = 15129665204879337069;
                }
                7856905509180742666 => {
                  while !((*ptr_to_globals).last_forward_char == 0) {
                    q = (*ptr_to_globals).dot.offset(1);
                    while q < (*ptr_to_globals).end.offset(-1)
                      && *q as libc::c_int != '\n' as i32
                      && *q as libc::c_int != (*ptr_to_globals).last_forward_char
                    {
                      q = q.offset(1)
                    }
                    if *q as libc::c_int == (*ptr_to_globals).last_forward_char {
                      (*ptr_to_globals).dot = q
                    }
                    (*ptr_to_globals).cmdcnt -= 1;
                    if !((*ptr_to_globals).cmdcnt > 0) {
                      break;
                    }
                  }
                  current_block = 15129665204879337069;
                }
                17498168302144015873 => {
                  current_block = 8681395796513813967;
                }
                1752638907092016026 => {
                  if *(*ptr_to_globals).dot as libc::c_int != '\n' as i32 {
                    (*ptr_to_globals).dot = (*ptr_to_globals).dot.offset(1)
                  }
                  current_block = 8629930936610358348;
                }
                3268579060917229304 => {
                  current_block = 8629930936610358348;
                }
                1895262434596074581 => {
                  current_block = 8908416993177701018;
                }
                _ => {}
              }
              match current_block {
                8629930936610358348 => {}
                15129665204879337069 => {}
                _ => {
                  match current_block {
                    17247297260531395789 => {
                      loop {
                        dot_left();
                        (*ptr_to_globals).cmdcnt -= 1;
                        if !((*ptr_to_globals).cmdcnt > 0) {
                          break;
                        }
                      }
                      current_block = 15129665204879337069;
                    }
                    8681395796513813967 => {
                      current_block = 5591548203144509315;
                    }
                    8908416993177701018 => {
                      current_block = 16124761010012532485;
                    }
                    _ => {}
                  }
                  match current_block {
                    15129665204879337069 => {}
                    _ => {
                      match current_block {
                        16124761010012532485 => {
                          let mut yf: libc::c_int = 0;
                          let mut ml: libc::c_int = 0;
                          let mut whole: libc::c_int = 0;
                          yf = YANKDEL as libc::c_int;
                          if c == 'y' as i32 || c == 'Y' as i32 {
                            yf = YANKONLY as libc::c_int
                          }
                          c1 = 'y' as i32;
                          if c != 'Y' as i32 {
                            c1 = get_one_char()
                          }
                          ml = find_range(&mut p, &mut q, c1 as libc::c_char);
                          place_cursor(0i32, 0);
                          if c1 == 27i32 {
                            c1 = 27i32;
                            c = c1
                          } else if !strchr(b"wW\x00" as *const u8 as *const libc::c_char, c1)
                            .is_null()
                          {
                            ml = 0;
                            if c == 'c' as i32 {
                              while ({
                                let mut bb__isspace: libc::c_uchar =
                                  (*q as libc::c_int - 9i32) as libc::c_uchar;
                                (bb__isspace as libc::c_int == ' ' as i32 - 9i32
                                  || bb__isspace as libc::c_int <= 13i32 - 9i32)
                                  as libc::c_int
                              }) != 0
                                && q > p
                              {
                                q = q.offset(-1)
                              }
                            }
                            (*ptr_to_globals).dot = yank_delete(p, q, ml, yf, 1i32)
                          } else if !strchr(
                            b"^0bBeEft%$ lh\x08\x7f\x00" as *const u8 as *const libc::c_char,
                            c1,
                          )
                          .is_null()
                          {
                            (*ptr_to_globals).dot = yank_delete(p, q, ml, yf, 1i32)
                          } else if !strchr(
                            b"cdykjGHL+-{}\r\n\x00" as *const u8 as *const libc::c_char,
                            c1,
                          )
                          .is_null()
                          {
                            (*ptr_to_globals).dot = yank_delete(p, q, ml, yf, 1i32);
                            whole = 1i32
                          } else {
                            c1 = 27i32;
                            c = c1;
                            ml = 0;
                            indicate_error();
                          }
                          if ml != 0 && whole != 0 {
                            if c == 'c' as i32 {
                              (*ptr_to_globals).dot = char_insert(
                                (*ptr_to_globals).dot,
                                '\n' as i32 as libc::c_char,
                                2i32,
                              );
                              if whole != 0
                                && (*ptr_to_globals).dot != (*ptr_to_globals).end.offset(-1)
                              {
                                dot_prev();
                              }
                            } else if c == 'd' as i32 {
                              dot_begin();
                              dot_skip_over_ws();
                            }
                          }
                          if c1 != 27i32 {
                            if c == 'c' as i32 {
                              strcpy(
                                buf.as_mut_ptr(),
                                b"Change\x00" as *const u8 as *const libc::c_char,
                              );
                              current_block = 8629930936610358348;
                            } else {
                              if c == 'd' as i32 {
                                strcpy(
                                  buf.as_mut_ptr(),
                                  b"Delete\x00" as *const u8 as *const libc::c_char,
                                );
                              }
                              if c == 'y' as i32 || c == 'Y' as i32 {
                                strcpy(
                                  buf.as_mut_ptr(),
                                  b"Yank\x00" as *const u8 as *const libc::c_char,
                                );
                              }
                              p = (*ptr_to_globals).reg[(*ptr_to_globals).YDreg as usize];
                              q = p.offset(strlen(p) as isize);
                              cnt = 0;
                              while p <= q {
                                if *p as libc::c_int == '\n' as i32 {
                                  cnt += 1
                                }
                                p = p.offset(1)
                              }
                              status_line(
                                b"%s %u lines (%u chars) using [%c]\x00" as *const u8
                                  as *const libc::c_char,
                                buf.as_mut_ptr(),
                                cnt,
                                strlen((*ptr_to_globals).reg[(*ptr_to_globals).YDreg as usize])
                                  as libc::c_uint,
                                what_reg() as libc::c_int,
                              );
                              end_cmd_q();
                              current_block = 15129665204879337069;
                            }
                          } else {
                            current_block = 15129665204879337069;
                          }
                        }
                        5591548203144509315 => {
                          current_block = 2636677179867529885;
                        }
                        _ => {}
                      }
                      match current_block {
                        15129665204879337069 => {}
                        8629930936610358348 => {}
                        _ => {
                          match current_block {
                            2636677179867529885 => {
                              current_block = 12309206730560524281;
                            }
                            _ => {}
                          }
                          match current_block {
                            12309206730560524281 => {
                              current_block = 3325768110057758661;
                            }
                            _ => {}
                          }
                          match current_block {
                            3325768110057758661 => {
                              current_block = 14815832896553429982;
                            }
                            _ => {}
                          }
                          match current_block {
                            14815832896553429982 => {
                              current_block = 10731695520297161438;
                            }
                            _ => {}
                          }
                          match current_block {
                            10731695520297161438 => {
                              if c == '0' as i32 && (*ptr_to_globals).cmdcnt < 1i32 {
                                dot_begin();
                              } else {
                                (*ptr_to_globals).cmdcnt =
                                  (*ptr_to_globals).cmdcnt * 10i32 + (c - '0' as i32)
                              }
                              current_block = 15129665204879337069;
                            }
                            _ => {}
                          }
                          match current_block {
                            15129665204879337069 => {}
                            _ => {
                              loop {
                                match current_block {
                                  16813369756331276724 => {
                                    msg = std::ptr::null();
                                    current_block = 7392824444931029276;
                                  }
                                  7392824444931029276 => {
                                    dir = FORWARD as libc::c_int;
                                    p = (*ptr_to_globals).dot.offset(1);
                                    if *(*ptr_to_globals).last_search_pattern.offset(0)
                                      as libc::c_int
                                      == '?' as i32
                                    {
                                      dir = BACK as libc::c_int;
                                      p = (*ptr_to_globals).dot.offset(-1)
                                    }
                                    current_block = 4166979493554389389;
                                  }
                                  _ => {
                                    q = char_search(
                                      p,
                                      (*ptr_to_globals).last_search_pattern.offset(1),
                                      dir << 1i32 | FULL as libc::c_int,
                                    );
                                    if !q.is_null() {
                                      (*ptr_to_globals).dot = q;
                                      msg = std::ptr::null()
                                    } else {
                                      p = (*ptr_to_globals).text;
                                      if dir == BACK as libc::c_int {
                                        p = (*ptr_to_globals).end.offset(-1)
                                      }
                                      q = char_search(
                                        p,
                                        (*ptr_to_globals).last_search_pattern.offset(1),
                                        dir << 1i32 | FULL as libc::c_int,
                                      );
                                      if !q.is_null() {
                                        (*ptr_to_globals).dot = q;
                                        msg = b"search hit BOTTOM, continuing at TOP\x00"
                                          as *const u8
                                          as *const libc::c_char;
                                        if dir == BACK as libc::c_int {
                                          msg = b"search hit TOP, continuing at BOTTOM\x00"
                                            as *const u8
                                            as *const libc::c_char
                                        }
                                      } else {
                                        msg = b"Pattern not found\x00" as *const u8
                                          as *const libc::c_char
                                      }
                                    }
                                    if !msg.is_null() {
                                      status_line_bold(
                                        b"%s\x00" as *const u8 as *const libc::c_char,
                                        msg,
                                      );
                                    }
                                    (*ptr_to_globals).cmdcnt -= 1;
                                    if (*ptr_to_globals).cmdcnt > 0 {
                                      current_block = 16813369756331276724;
                                    } else {
                                      break;
                                    }
                                  }
                                }
                              }
                              current_block = 15129665204879337069;
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
        13 | 43 => {
          current_block = 13619733043935729992;
          match current_block {
            16992905640583886232 => {
              loop {
                if (*(*ptr_to_globals).dot as libc::c_int - 'a' as i32) as libc::c_uchar
                  as libc::c_int
                  <= 'z' as i32 - 'a' as i32
                {
                  undo_push(
                    (*ptr_to_globals).dot,
                    1i32 as libc::c_uint,
                    1i32 as libc::c_uchar,
                  );
                  *(*ptr_to_globals).dot =
                    bb_ascii_toupper(*(*ptr_to_globals).dot as libc::c_uchar) as libc::c_char;
                  undo_push(
                    (*ptr_to_globals).dot,
                    1i32 as libc::c_uint,
                    2i32 as libc::c_uchar,
                  );
                } else if (*(*ptr_to_globals).dot as libc::c_int - 'A' as i32) as libc::c_uchar
                  as libc::c_int
                  <= 'Z' as i32 - 'A' as i32
                {
                  undo_push(
                    (*ptr_to_globals).dot,
                    1i32 as libc::c_uint,
                    1i32 as libc::c_uchar,
                  );
                  *(*ptr_to_globals).dot =
                    bb_ascii_tolower(*(*ptr_to_globals).dot as libc::c_uchar) as libc::c_char;
                  undo_push(
                    (*ptr_to_globals).dot,
                    1i32 as libc::c_uint,
                    2i32 as libc::c_uchar,
                  );
                }
                dot_right();
                (*ptr_to_globals).cmdcnt -= 1;
                if !((*ptr_to_globals).cmdcnt > 0) {
                  break;
                }
              }
              end_cmd_q();
              current_block = 15129665204879337069;
            }
            8729655159604064397 => {
              c1 = get_one_char();
              cnt = 0;
              if c1 == '.' as i32 {
                cnt = (*ptr_to_globals)
                  .rows
                  .wrapping_sub(2i32 as libc::c_uint)
                  .wrapping_div(2i32 as libc::c_uint) as libc::c_int
              }
              if c1 == '-' as i32 {
                cnt = (*ptr_to_globals).rows.wrapping_sub(2i32 as libc::c_uint) as libc::c_int
              }
              (*ptr_to_globals).screenbegin = begin_line((*ptr_to_globals).dot);
              dot_scroll(cnt, -1i32);
              current_block = 15129665204879337069;
            }
            15899500648299942075 => {
              (*ptr_to_globals).last_forward_char = get_one_char();
              do_cmd(';' as i32);
              if *(*ptr_to_globals).dot as libc::c_int == (*ptr_to_globals).last_forward_char {
                dot_left();
              }
              (*ptr_to_globals).last_forward_char = 0;
              current_block = 15129665204879337069;
            }
            9051390181078481641 => {
              c1 = get_one_char();
              if *(*ptr_to_globals).dot as libc::c_int != '\n' as i32 {
                (*ptr_to_globals).dot =
                  text_hole_delete((*ptr_to_globals).dot, (*ptr_to_globals).dot, 1i32);
                (*ptr_to_globals).dot =
                  char_insert((*ptr_to_globals).dot, c1 as libc::c_char, 2i32);
                dot_left();
              }
              end_cmd_q();
              current_block = 15129665204879337069;
            }
            877115918601926659 => {
              dir = FORWARD as libc::c_int;
              if c == 'b' as i32 {
                dir = BACK as libc::c_int
              }
              while !((*ptr_to_globals).dot.offset(dir as isize) < (*ptr_to_globals).text
                || (*ptr_to_globals).dot.offset(dir as isize) > (*ptr_to_globals).end.offset(-1))
              {
                (*ptr_to_globals).dot = (*ptr_to_globals).dot.offset(dir as isize);
                if ({
                  let mut bb__isspace: libc::c_uchar =
                    (*(*ptr_to_globals).dot as libc::c_int - 9i32) as libc::c_uchar;
                  (bb__isspace as libc::c_int == ' ' as i32 - 9i32
                    || bb__isspace as libc::c_int <= 13i32 - 9i32) as libc::c_int
                }) != 0
                {
                  (*ptr_to_globals).dot = skip_thing(
                    (*ptr_to_globals).dot,
                    if c == 'e' as i32 { 2i32 } else { 1i32 },
                    dir,
                    S_OVER_WS as libc::c_int,
                  )
                }
                if bb_ascii_isalnum(*(*ptr_to_globals).dot as libc::c_uchar) != 0
                  || *(*ptr_to_globals).dot as libc::c_int == '_' as i32
                {
                  (*ptr_to_globals).dot =
                    skip_thing((*ptr_to_globals).dot, 1i32, dir, S_END_ALNUM as libc::c_int)
                } else if *strchrnul(
                  b"!\"#$%&\'()*+,-./:;<=>?@[\\]^_`{|}~\x00" as *const u8 as *const libc::c_char,
                  *(*ptr_to_globals).dot as libc::c_int,
                )
                .offset(0)
                  != 0
                {
                  (*ptr_to_globals).dot =
                    skip_thing((*ptr_to_globals).dot, 1i32, dir, S_END_PUNCT as libc::c_int)
                }
                (*ptr_to_globals).cmdcnt -= 1;
                if !((*ptr_to_globals).cmdcnt > 0) {
                  break;
                }
              }
              current_block = 15129665204879337069;
            }
            1085022737867179637 => {
              dot_begin();
              dot_skip_over_ws();
              current_block = 15129665204879337069;
            }
            3113147720494587438 => {
              c1 = get_one_char();
              if c1 != 'Z' as i32 {
                indicate_error();
              } else if (*ptr_to_globals).modified_count != 0 {
                if 1i32 != 0 && (*ptr_to_globals).readonly_mode as libc::c_int != 0 {
                  status_line_bold(
                    b"\'%s\' is read only\x00" as *const u8 as *const libc::c_char,
                    (*ptr_to_globals).current_filename,
                  );
                } else {
                  cnt = file_write(
                    (*ptr_to_globals).current_filename,
                    (*ptr_to_globals).text,
                    (*ptr_to_globals).end.offset(-1),
                  );
                  if cnt < 0 {
                    if cnt == -1i32 {
                      status_line_bold(b"Write error: %m\x00" as *const u8 as *const libc::c_char);
                    }
                  } else if cnt as libc::c_long
                    == (*ptr_to_globals)
                      .end
                      .offset(-1)
                      .wrapping_offset_from((*ptr_to_globals).text)
                      as libc::c_long
                      + 1
                  {
                    (*ptr_to_globals).editing = 0 as smallint
                  }
                }
              } else {
                (*ptr_to_globals).editing = 0 as smallint
              }
              current_block = 15129665204879337069;
            }
            12960118908218882441 => {
              p = begin_line((*ptr_to_globals).dot);
              if *p.offset(-1i32 as isize) as libc::c_int == '\n' as i32 {
                dot_prev();
                current_block = 2087484904894455135;
              } else {
                dot_begin();
                (*ptr_to_globals).dot =
                  char_insert((*ptr_to_globals).dot, '\n' as i32 as libc::c_char, 1i32);
                dot_prev();
                current_block = 8629930936610358348;
              }
            }
            8720450212473544924 => {
              (*ptr_to_globals).dot = (*ptr_to_globals).screenbegin;
              cnt = 0;
              while (cnt as libc::c_uint)
                < (*ptr_to_globals)
                  .rows
                  .wrapping_sub(1i32 as libc::c_uint)
                  .wrapping_div(2i32 as libc::c_uint)
              {
                (*ptr_to_globals).dot = next_line((*ptr_to_globals).dot);
                cnt += 1
              }
              current_block = 15129665204879337069;
            }
            13015277209715431090 => {
              (*ptr_to_globals).dot = end_screen();
              if (*ptr_to_globals).cmdcnt as libc::c_uint
                > (*ptr_to_globals).rows.wrapping_sub(1i32 as libc::c_uint)
              {
                (*ptr_to_globals).cmdcnt =
                  (*ptr_to_globals).rows.wrapping_sub(1i32 as libc::c_uint) as libc::c_int
              }
              (*ptr_to_globals).cmdcnt -= 1;
              if (*ptr_to_globals).cmdcnt > 0 {
                do_cmd('-' as i32);
              }
              dot_begin();
              dot_skip_over_ws();
              current_block = 15129665204879337069;
            }
            9800435767766781385 => {
              loop {
                dot_end();
                if (*ptr_to_globals).dot < (*ptr_to_globals).end.offset(-1) {
                  undo_push(
                    (*ptr_to_globals).dot,
                    1i32 as libc::c_uint,
                    1i32 as libc::c_uchar,
                  );
                  let fresh15 = (*ptr_to_globals).dot;
                  (*ptr_to_globals).dot = (*ptr_to_globals).dot.offset(1);
                  *fresh15 = ' ' as i32 as libc::c_char;
                  undo_push(
                    (*ptr_to_globals).dot.offset(-1),
                    1i32 as libc::c_uint,
                    2i32 as libc::c_uchar,
                  );
                  while ({
                    let mut bb__isblank: libc::c_uchar = *(*ptr_to_globals).dot as libc::c_uchar;
                    (bb__isblank as libc::c_int == ' ' as i32
                      || bb__isblank as libc::c_int == '\t' as i32)
                      as libc::c_int
                  }) != 0
                  {
                    text_hole_delete((*ptr_to_globals).dot, (*ptr_to_globals).dot, 2i32);
                  }
                }
                (*ptr_to_globals).cmdcnt -= 1;
                if !((*ptr_to_globals).cmdcnt > 0) {
                  break;
                }
              }
              end_cmd_q();
              current_block = 15129665204879337069;
            }
            3432363526595694666 => {
              dot_begin();
              dot_skip_over_ws();
              current_block = 3268579060917229304;
            }
            3494829253343353619 => {
              (*ptr_to_globals).dot = (*ptr_to_globals).screenbegin;
              if (*ptr_to_globals).cmdcnt as libc::c_uint
                > (*ptr_to_globals).rows.wrapping_sub(1i32 as libc::c_uint)
              {
                (*ptr_to_globals).cmdcnt =
                  (*ptr_to_globals).rows.wrapping_sub(1i32 as libc::c_uint) as libc::c_int
              }
              (*ptr_to_globals).cmdcnt -= 1;
              if (*ptr_to_globals).cmdcnt > 0 {
                do_cmd('+' as i32);
              }
              dot_skip_over_ws();
              current_block = 15129665204879337069;
            }
            17973101765331640574 => {
              c1 = get_one_char();
              if c1 != 'g' as i32 {
                buf[0] = 'g' as i32 as libc::c_char;
                buf[1] = if c1 >= 0 { c1 } else { '*' as i32 } as libc::c_char;
                buf[2] = '\u{0}' as i32 as libc::c_char;
                not_implemented(buf.as_mut_ptr());
                current_block = 15129665204879337069;
              } else {
                if (*ptr_to_globals).cmdcnt == 0 {
                  (*ptr_to_globals).cmdcnt = 1i32
                }
                current_block = 11945623545738147997;
              }
            }
            16546625800574160972 => {
              save_dot = (*ptr_to_globals).dot;
              (*ptr_to_globals).dot = dollar_line((*ptr_to_globals).dot);
              (*ptr_to_globals).dot = yank_delete(
                save_dot,
                (*ptr_to_globals).dot,
                0,
                YANKDEL as libc::c_int,
                1i32,
              );
              if c == 'C' as i32 {
                current_block = 8629930936610358348;
              } else {
                if c == 'D' as i32 {
                  end_cmd_q();
                }
                current_block = 15129665204879337069;
              }
            }
            11937696639986586685 => {
              cnt = count_lines((*ptr_to_globals).text, (*ptr_to_globals).dot);
              c1 = get_one_char();
              find_range(&mut p, &mut q, c1 as libc::c_char);
              yank_delete(p, q, 1i32, YANKONLY as libc::c_int, 0);
              p = begin_line(p);
              q = end_line(q);
              i = count_lines(p, q);
              while i > 0 {
                if c == '<' as i32 {
                  if *p as libc::c_int == '\t' as i32 {
                    text_hole_delete(p, p, 0);
                  } else if *p as libc::c_int == ' ' as i32 {
                    j = 0;
                    while *p as libc::c_int == ' ' as i32 && j < (*ptr_to_globals).tabstop {
                      text_hole_delete(p, p, 0);
                      j += 1
                    }
                  }
                } else if c == '>' as i32 {
                  char_insert(p, '\t' as i32 as libc::c_char, 1i32);
                }
                i -= 1;
                p = next_line(p)
              }
              (*ptr_to_globals).dot = find_line(cnt);
              dot_skip_over_ws();
              end_cmd_q();
              current_block = 15129665204879337069;
            }
            17725350714912028156 => {
              p = get_input_line(b":\x00" as *const u8 as *const libc::c_char);
              colon(p);
              current_block = 15129665204879337069;
            }
            14526470074083880812 => {
              q = char_search(
                (*ptr_to_globals).dot,
                b"\n\n\x00" as *const u8 as *const libc::c_char,
                (FORWARD as libc::c_int) << 1i32 | FULL as libc::c_int,
              );
              if !q.is_null() {
                (*ptr_to_globals).dot = next_line(q)
              }
              current_block = 15129665204879337069;
            }
            8893187391306414141 => {
              q = char_search(
                (*ptr_to_globals).dot,
                b"\n\n\x00" as *const u8 as *const libc::c_char,
                ((BACK as libc::c_int as libc::c_uint) << 1i32
                  | FULL as libc::c_int as libc::c_uint) as libc::c_int,
              );
              if !q.is_null() {
                (*ptr_to_globals).dot = next_line(q)
              }
              current_block = 15129665204879337069;
            }
            7021673758293221412 => {
              dir = BACK as libc::c_int;
              p = (*ptr_to_globals).dot.offset(-1);
              if *(*ptr_to_globals).last_search_pattern.offset(0) as libc::c_int == '?' as i32 {
                dir = FORWARD as libc::c_int;
                p = (*ptr_to_globals).dot.offset(1)
              }
              current_block = 4166979493554389389;
            }
            18374191879090272823 => {
              buf[0] = c as libc::c_char;
              buf[1] = '\u{0}' as i32 as libc::c_char;
              q = get_input_line(buf.as_mut_ptr());
              if *q.offset(0) as libc::c_int != 0 && *q.offset(1) == 0 {
                if *(*ptr_to_globals).last_search_pattern.offset(0) != 0 {
                  *(*ptr_to_globals).last_search_pattern.offset(0) = c as libc::c_char
                }
                current_block = 7392824444931029276;
              } else if *q.offset(0) != 0 {
                free((*ptr_to_globals).last_search_pattern as *mut libc::c_void);
                (*ptr_to_globals).last_search_pattern = crate::libbb::xfuncs_printf::xstrdup(q);
                current_block = 7392824444931029276;
              } else {
                current_block = 15129665204879337069;
              }
            }
            16407828456666301883 => {
              if (*ptr_to_globals).last_forward_char == 0 {
                current_block = 15129665204879337069;
              } else {
                loop {
                  q = (*ptr_to_globals).dot.offset(-1);
                  while q >= (*ptr_to_globals).text
                    && *q as libc::c_int != '\n' as i32
                    && *q as libc::c_int != (*ptr_to_globals).last_forward_char
                  {
                    q = q.offset(-1)
                  }
                  if q >= (*ptr_to_globals).text
                    && *q as libc::c_int == (*ptr_to_globals).last_forward_char
                  {
                    (*ptr_to_globals).dot = q
                  }
                  (*ptr_to_globals).cmdcnt -= 1;
                  if !((*ptr_to_globals).cmdcnt > 0) {
                    break;
                  }
                }
                current_block = 15129665204879337069;
              }
            }
            9018432604062702004 => {
              q = (*ptr_to_globals).dot;
              while q < (*ptr_to_globals).end && *q as libc::c_int != '\n' as i32 {
                if !strchr(
                  b"()[]{}\x00" as *const u8 as *const libc::c_char,
                  *q as libc::c_int,
                )
                .is_null()
                {
                  p = find_pair(q, *q);
                  if p.is_null() {
                    indicate_error();
                  } else {
                    (*ptr_to_globals).dot = p
                  }
                  break;
                } else {
                  q = q.offset(1)
                }
              }
              if *q as libc::c_int == '\n' as i32 {
                indicate_error();
              }
              current_block = 15129665204879337069;
            }
            10247103787464459848 => {
              p = (*ptr_to_globals).reg[(*ptr_to_globals).YDreg as usize];
              if p.is_null() {
                status_line_bold(
                  b"Nothing in register %c\x00" as *const u8 as *const libc::c_char,
                  what_reg() as libc::c_int,
                );
              } else {
                if !strchr(p, '\n' as i32).is_null() {
                  if c == 'P' as i32 {
                    dot_begin();
                  }
                  if c == 'p' as i32 {
                    if end_line((*ptr_to_globals).dot) == (*ptr_to_globals).end.offset(-1) {
                      (*ptr_to_globals).dot = (*ptr_to_globals).end
                    } else {
                      dot_next();
                    }
                  }
                } else if c == 'p' as i32 {
                  dot_right();
                }
                string_insert((*ptr_to_globals).dot, p, 1i32);
                end_cmd_q();
              }
              current_block = 15129665204879337069;
            }
            15260732871948875843 => {
              c1 = (get_one_char() | 0x20i32) - 'a' as i32;
              if c1 as libc::c_uint <= 25i32 as libc::c_uint {
                (*ptr_to_globals).mark[c1 as usize] = (*ptr_to_globals).dot
              } else {
                indicate_error();
              }
              current_block = 15129665204879337069;
            }
            12738322036487086035 => {
              c1 = get_one_char() | 0x20i32;
              if (c1 - 'a' as i32) as libc::c_uint <= 25i32 as libc::c_uint {
                c1 = c1 - 'a' as i32;
                q = (*ptr_to_globals).mark[c1 as usize];
                if (*ptr_to_globals).text <= q && q < (*ptr_to_globals).end {
                  (*ptr_to_globals).dot = q;
                  dot_begin();
                  dot_skip_over_ws();
                }
              } else if c1 == '\'' as i32 {
                (*ptr_to_globals).dot = swap_context((*ptr_to_globals).dot);
                dot_begin();
                dot_skip_over_ws();
              } else {
                indicate_error();
              }
              current_block = 15129665204879337069;
            }
            13255096073384561358 => {
              c1 = (get_one_char() | 0x20i32) - 'a' as i32;
              if c1 as libc::c_uint <= 25i32 as libc::c_uint {
                (*ptr_to_globals).YDreg = c1 as smalluint
              } else {
                indicate_error();
              }
              current_block = 15129665204879337069;
            }
            10258711639984089377 => {
              if (*ptr_to_globals).cmd_mode as libc::c_int == 0 {
                indicate_error();
              }
              (*ptr_to_globals).cmd_mode = 0 as smallint;
              undo_queue_commit();
              end_cmd_q();
              (*ptr_to_globals).last_status_cksum = 0;
              current_block = 15129665204879337069;
            }
            11439127087547047736 => {
              buf[0] = c as libc::c_char;
              buf[1] = '\u{0}' as i32 as libc::c_char;
              not_implemented(buf.as_mut_ptr());
              end_cmd_q();
              current_block = 17440971994642376514;
            }
            7961798899781870241 => {
              dot_scroll(
                (*ptr_to_globals).rows.wrapping_sub(2i32 as libc::c_uint) as libc::c_int,
                -1i32,
              );
              current_block = 15129665204879337069;
            }
            9426343755402444879 => {
              dot_scroll(
                (*ptr_to_globals)
                  .rows
                  .wrapping_sub(2i32 as libc::c_uint)
                  .wrapping_div(2i32 as libc::c_uint) as libc::c_int,
                1i32,
              );
              current_block = 15129665204879337069;
            }
            13352459794680105913 => {
              dot_scroll(1i32, 1i32);
              current_block = 15129665204879337069;
            }
            14142272253464333006 => {
              dot_scroll(
                (*ptr_to_globals).rows.wrapping_sub(2i32 as libc::c_uint) as libc::c_int,
                1i32,
              );
              current_block = 15129665204879337069;
            }
            10758177197742640066 => {
              (*ptr_to_globals).last_status_cksum = 0;
              current_block = 15129665204879337069;
            }
            6152256259730122749 => {
              current_block = 7534742345255184552;
            }
            12883932598258173301 => {
              current_block = 8800996768013373992;
            }
            11242998110520238401 => {
              redraw(1i32);
              current_block = 15129665204879337069;
            }
            13619733043935729992 => {
              loop {
                dot_next();
                dot_skip_over_ws();
                (*ptr_to_globals).cmdcnt -= 1;
                if !((*ptr_to_globals).cmdcnt > 0) {
                  break;
                }
              }
              current_block = 15129665204879337069;
            }
            9339065157412720613 => {
              dot_scroll(
                (*ptr_to_globals)
                  .rows
                  .wrapping_sub(2i32 as libc::c_uint)
                  .wrapping_div(2i32 as libc::c_uint) as libc::c_int,
                -1i32,
              );
              current_block = 15129665204879337069;
            }
            11447082683497798022 => {
              dot_scroll(1i32, -1i32);
              current_block = 15129665204879337069;
            }
            5182000506326660482 => {
              current_block = 13993698454868426881;
            }
            1105010766850597332 => {
              if !(*ptr_to_globals).reg[27].is_null() {
                p = begin_line((*ptr_to_globals).dot);
                q = end_line((*ptr_to_globals).dot);
                p = text_hole_delete(p, q, 1i32);
                p = p.offset(string_insert(p, (*ptr_to_globals).reg[27], 2i32) as isize);
                (*ptr_to_globals).dot = p;
                dot_skip_over_ws();
              }
              current_block = 15129665204879337069;
            }
            8616046655533110204 => {
              undo_pop();
              current_block = 15129665204879337069;
            }
            5127767458142431603 => {
              loop {
                (*ptr_to_globals).dot = end_line((*ptr_to_globals).dot);
                (*ptr_to_globals).cmdcnt -= 1;
                if (*ptr_to_globals).cmdcnt <= 0 {
                  break;
                }
                dot_next();
              }
              current_block = 15129665204879337069;
            }
            222014967776118151 => {
              (*ptr_to_globals).last_forward_char = get_one_char();
              current_block = 7856905509180742666;
            }
            11209792479411604110 => {
              loop {
                dot_prev();
                dot_skip_over_ws();
                (*ptr_to_globals).cmdcnt -= 1;
                if !((*ptr_to_globals).cmdcnt > 0) {
                  break;
                }
              }
              current_block = 15129665204879337069;
            }
            3364823792826654116 => {
              if (*ptr_to_globals).lmc_len != 0 {
                (*ptr_to_globals).ioq_start = crate::libbb::xfuncs_printf::xstrndup(
                  (*ptr_to_globals).last_modifying_cmd.as_mut_ptr(),
                  (*ptr_to_globals).lmc_len,
                );
                (*ptr_to_globals).ioq = (*ptr_to_globals).ioq_start
              }
              current_block = 15129665204879337069;
            }
            18096603330221575131 => {
              current_block = 17498168302144015873;
            }
            16891123271837848903 => {
              dot_end();
              current_block = 1752638907092016026;
            }
            8517235759107662071 => {
              current_block = 5847749760081351726;
            }
            12525254419223051704 => {
              if (*ptr_to_globals).dot < (*ptr_to_globals).end.offset(-1) {
                (*ptr_to_globals).dot = yank_delete(
                  (*ptr_to_globals).dot,
                  (*ptr_to_globals).dot,
                  1i32,
                  YANKDEL as libc::c_int,
                  1i32,
                )
              }
              current_block = 15129665204879337069;
            }
            15232911949322867522 => {
              current_block = 17251831742223396249;
            }
            10863374208794025069 => {
              current_block = 1895262434596074581;
            }
            451126677064669119 => {
              loop {
                dot_prev();
                (*ptr_to_globals).dot = move_to_col(
                  (*ptr_to_globals).dot,
                  (*ptr_to_globals).ccol + (*ptr_to_globals).offset,
                );
                (*ptr_to_globals).cmdcnt -= 1;
                if !((*ptr_to_globals).cmdcnt > 0) {
                  break;
                }
              }
              current_block = 15129665204879337069;
            }
            4611735929166613116 => {
              loop {
                if bb_ascii_isalnum(*(*ptr_to_globals).dot as libc::c_uchar) != 0
                  || *(*ptr_to_globals).dot as libc::c_int == '_' as i32
                {
                  (*ptr_to_globals).dot = skip_thing(
                    (*ptr_to_globals).dot,
                    1i32,
                    FORWARD as libc::c_int,
                    S_END_ALNUM as libc::c_int,
                  )
                } else if *strchrnul(
                  b"!\"#$%&\'()*+,-./:;<=>?@[\\]^_`{|}~\x00" as *const u8 as *const libc::c_char,
                  *(*ptr_to_globals).dot as libc::c_int,
                )
                .offset(0)
                  != 0
                {
                  (*ptr_to_globals).dot = skip_thing(
                    (*ptr_to_globals).dot,
                    1i32,
                    FORWARD as libc::c_int,
                    S_END_PUNCT as libc::c_int,
                  )
                }
                if (*ptr_to_globals).dot < (*ptr_to_globals).end.offset(-1) {
                  (*ptr_to_globals).dot = (*ptr_to_globals).dot.offset(1)
                }
                if ({
                  let mut bb__isspace: libc::c_uchar =
                    (*(*ptr_to_globals).dot as libc::c_int - 9i32) as libc::c_uchar;
                  (bb__isspace as libc::c_int == ' ' as i32 - 9i32
                    || bb__isspace as libc::c_int <= 13i32 - 9i32) as libc::c_int
                }) != 0
                {
                  (*ptr_to_globals).dot = skip_thing(
                    (*ptr_to_globals).dot,
                    2i32,
                    FORWARD as libc::c_int,
                    S_OVER_WS as libc::c_int,
                  )
                }
                (*ptr_to_globals).cmdcnt -= 1;
                if !((*ptr_to_globals).cmdcnt > 0) {
                  break;
                }
              }
              current_block = 15129665204879337069;
            }
            4386451087681909888 => {
              (*ptr_to_globals).dot =
                move_to_col((*ptr_to_globals).dot, (*ptr_to_globals).cmdcnt - 1i32);
              current_block = 15129665204879337069;
            }
            1296397779060594135 => {
              dot_begin();
              current_block = 15129665204879337069;
            }
            _ => {}
          }
          match current_block {
            15129665204879337069 => {}
            8629930936610358348 => {}
            _ => {
              match current_block {
                17251831742223396249 => {
                  dir = 0;
                  if c == 'X' as i32 {
                    dir = -1i32
                  }
                  loop {
                    if *(*ptr_to_globals).dot.offset(dir as isize) as libc::c_int != '\n' as i32 {
                      if c == 'X' as i32 {
                        (*ptr_to_globals).dot = (*ptr_to_globals).dot.offset(-1)
                      }
                      (*ptr_to_globals).dot = yank_delete(
                        (*ptr_to_globals).dot,
                        (*ptr_to_globals).dot,
                        0,
                        YANKDEL as libc::c_int,
                        1i32,
                      )
                    }
                    (*ptr_to_globals).cmdcnt -= 1;
                    if !((*ptr_to_globals).cmdcnt > 0) {
                      break;
                    }
                  }
                  end_cmd_q();
                  if c == 's' as i32 {
                    current_block = 8629930936610358348;
                  } else {
                    current_block = 15129665204879337069;
                  }
                }
                2087484904894455135 => {
                  dot_end();
                  (*ptr_to_globals).dot =
                    char_insert((*ptr_to_globals).dot, '\n' as i32 as libc::c_char, 1i32);
                  current_block = 8629930936610358348;
                }
                11945623545738147997 => {
                  (*ptr_to_globals).dot = (*ptr_to_globals).end.offset(-1);
                  if (*ptr_to_globals).cmdcnt > 0 {
                    (*ptr_to_globals).dot = find_line((*ptr_to_globals).cmdcnt)
                  }
                  dot_skip_over_ws();
                  current_block = 15129665204879337069;
                }
                5847749760081351726 => {
                  dir = FORWARD as libc::c_int;
                  if c == 'B' as i32 {
                    dir = BACK as libc::c_int
                  }
                  loop {
                    if c == 'W' as i32
                      || ({
                        let mut bb__isspace: libc::c_uchar =
                          (*(*ptr_to_globals).dot.offset(dir as isize) as libc::c_int - 9i32)
                            as libc::c_uchar;
                        (bb__isspace as libc::c_int == ' ' as i32 - 9i32
                          || bb__isspace as libc::c_int <= 13i32 - 9i32)
                          as libc::c_int
                      }) != 0
                    {
                      (*ptr_to_globals).dot =
                        skip_thing((*ptr_to_globals).dot, 1i32, dir, S_TO_WS as libc::c_int);
                      (*ptr_to_globals).dot =
                        skip_thing((*ptr_to_globals).dot, 2i32, dir, S_OVER_WS as libc::c_int)
                    }
                    if c != 'W' as i32 {
                      (*ptr_to_globals).dot =
                        skip_thing((*ptr_to_globals).dot, 1i32, dir, S_BEFORE_WS as libc::c_int)
                    }
                    (*ptr_to_globals).cmdcnt -= 1;
                    if !((*ptr_to_globals).cmdcnt > 0) {
                      break;
                    }
                  }
                  current_block = 15129665204879337069;
                }
                17440971994642376514 => {
                  current_block = 15129665204879337069;
                }
                7534742345255184552 => {
                  current_block = 17247297260531395789;
                }
                8800996768013373992 => {
                  loop {
                    dot_next();
                    (*ptr_to_globals).dot = move_to_col(
                      (*ptr_to_globals).dot,
                      (*ptr_to_globals).ccol + (*ptr_to_globals).offset,
                    );
                    (*ptr_to_globals).cmdcnt -= 1;
                    if !((*ptr_to_globals).cmdcnt > 0) {
                      break;
                    }
                  }
                  current_block = 15129665204879337069;
                }
                13993698454868426881 => {
                  loop {
                    dot_right();
                    (*ptr_to_globals).cmdcnt -= 1;
                    if !((*ptr_to_globals).cmdcnt > 0) {
                      break;
                    }
                  }
                  current_block = 15129665204879337069;
                }
                7856905509180742666 => {
                  while !((*ptr_to_globals).last_forward_char == 0) {
                    q = (*ptr_to_globals).dot.offset(1);
                    while q < (*ptr_to_globals).end.offset(-1)
                      && *q as libc::c_int != '\n' as i32
                      && *q as libc::c_int != (*ptr_to_globals).last_forward_char
                    {
                      q = q.offset(1)
                    }
                    if *q as libc::c_int == (*ptr_to_globals).last_forward_char {
                      (*ptr_to_globals).dot = q
                    }
                    (*ptr_to_globals).cmdcnt -= 1;
                    if !((*ptr_to_globals).cmdcnt > 0) {
                      break;
                    }
                  }
                  current_block = 15129665204879337069;
                }
                17498168302144015873 => {
                  current_block = 8681395796513813967;
                }
                1752638907092016026 => {
                  if *(*ptr_to_globals).dot as libc::c_int != '\n' as i32 {
                    (*ptr_to_globals).dot = (*ptr_to_globals).dot.offset(1)
                  }
                  current_block = 8629930936610358348;
                }
                3268579060917229304 => {
                  current_block = 8629930936610358348;
                }
                1895262434596074581 => {
                  current_block = 8908416993177701018;
                }
                _ => {}
              }
              match current_block {
                8629930936610358348 => {}
                15129665204879337069 => {}
                _ => {
                  match current_block {
                    17247297260531395789 => {
                      loop {
                        dot_left();
                        (*ptr_to_globals).cmdcnt -= 1;
                        if !((*ptr_to_globals).cmdcnt > 0) {
                          break;
                        }
                      }
                      current_block = 15129665204879337069;
                    }
                    8681395796513813967 => {
                      current_block = 5591548203144509315;
                    }
                    8908416993177701018 => {
                      current_block = 16124761010012532485;
                    }
                    _ => {}
                  }
                  match current_block {
                    15129665204879337069 => {}
                    _ => {
                      match current_block {
                        16124761010012532485 => {
                          let mut yf: libc::c_int = 0;
                          let mut ml: libc::c_int = 0;
                          let mut whole: libc::c_int = 0;
                          yf = YANKDEL as libc::c_int;
                          if c == 'y' as i32 || c == 'Y' as i32 {
                            yf = YANKONLY as libc::c_int
                          }
                          c1 = 'y' as i32;
                          if c != 'Y' as i32 {
                            c1 = get_one_char()
                          }
                          ml = find_range(&mut p, &mut q, c1 as libc::c_char);
                          place_cursor(0i32, 0);
                          if c1 == 27i32 {
                            c1 = 27i32;
                            c = c1
                          } else if !strchr(b"wW\x00" as *const u8 as *const libc::c_char, c1)
                            .is_null()
                          {
                            ml = 0;
                            if c == 'c' as i32 {
                              while ({
                                let mut bb__isspace: libc::c_uchar =
                                  (*q as libc::c_int - 9i32) as libc::c_uchar;
                                (bb__isspace as libc::c_int == ' ' as i32 - 9i32
                                  || bb__isspace as libc::c_int <= 13i32 - 9i32)
                                  as libc::c_int
                              }) != 0
                                && q > p
                              {
                                q = q.offset(-1)
                              }
                            }
                            (*ptr_to_globals).dot = yank_delete(p, q, ml, yf, 1i32)
                          } else if !strchr(
                            b"^0bBeEft%$ lh\x08\x7f\x00" as *const u8 as *const libc::c_char,
                            c1,
                          )
                          .is_null()
                          {
                            (*ptr_to_globals).dot = yank_delete(p, q, ml, yf, 1i32)
                          } else if !strchr(
                            b"cdykjGHL+-{}\r\n\x00" as *const u8 as *const libc::c_char,
                            c1,
                          )
                          .is_null()
                          {
                            (*ptr_to_globals).dot = yank_delete(p, q, ml, yf, 1i32);
                            whole = 1i32
                          } else {
                            c1 = 27i32;
                            c = c1;
                            ml = 0;
                            indicate_error();
                          }
                          if ml != 0 && whole != 0 {
                            if c == 'c' as i32 {
                              (*ptr_to_globals).dot = char_insert(
                                (*ptr_to_globals).dot,
                                '\n' as i32 as libc::c_char,
                                2i32,
                              );
                              if whole != 0
                                && (*ptr_to_globals).dot != (*ptr_to_globals).end.offset(-1)
                              {
                                dot_prev();
                              }
                            } else if c == 'd' as i32 {
                              dot_begin();
                              dot_skip_over_ws();
                            }
                          }
                          if c1 != 27i32 {
                            if c == 'c' as i32 {
                              strcpy(
                                buf.as_mut_ptr(),
                                b"Change\x00" as *const u8 as *const libc::c_char,
                              );
                              current_block = 8629930936610358348;
                            } else {
                              if c == 'd' as i32 {
                                strcpy(
                                  buf.as_mut_ptr(),
                                  b"Delete\x00" as *const u8 as *const libc::c_char,
                                );
                              }
                              if c == 'y' as i32 || c == 'Y' as i32 {
                                strcpy(
                                  buf.as_mut_ptr(),
                                  b"Yank\x00" as *const u8 as *const libc::c_char,
                                );
                              }
                              p = (*ptr_to_globals).reg[(*ptr_to_globals).YDreg as usize];
                              q = p.offset(strlen(p) as isize);
                              cnt = 0;
                              while p <= q {
                                if *p as libc::c_int == '\n' as i32 {
                                  cnt += 1
                                }
                                p = p.offset(1)
                              }
                              status_line(
                                b"%s %u lines (%u chars) using [%c]\x00" as *const u8
                                  as *const libc::c_char,
                                buf.as_mut_ptr(),
                                cnt,
                                strlen((*ptr_to_globals).reg[(*ptr_to_globals).YDreg as usize])
                                  as libc::c_uint,
                                what_reg() as libc::c_int,
                              );
                              end_cmd_q();
                              current_block = 15129665204879337069;
                            }
                          } else {
                            current_block = 15129665204879337069;
                          }
                        }
                        5591548203144509315 => {
                          current_block = 2636677179867529885;
                        }
                        _ => {}
                      }
                      match current_block {
                        15129665204879337069 => {}
                        8629930936610358348 => {}
                        _ => {
                          match current_block {
                            2636677179867529885 => {
                              current_block = 12309206730560524281;
                            }
                            _ => {}
                          }
                          match current_block {
                            12309206730560524281 => {
                              current_block = 3325768110057758661;
                            }
                            _ => {}
                          }
                          match current_block {
                            3325768110057758661 => {
                              current_block = 14815832896553429982;
                            }
                            _ => {}
                          }
                          match current_block {
                            14815832896553429982 => {
                              current_block = 10731695520297161438;
                            }
                            _ => {}
                          }
                          match current_block {
                            10731695520297161438 => {
                              if c == '0' as i32 && (*ptr_to_globals).cmdcnt < 1i32 {
                                dot_begin();
                              } else {
                                (*ptr_to_globals).cmdcnt =
                                  (*ptr_to_globals).cmdcnt * 10i32 + (c - '0' as i32)
                              }
                              current_block = 15129665204879337069;
                            }
                            _ => {}
                          }
                          match current_block {
                            15129665204879337069 => {}
                            _ => {
                              loop {
                                match current_block {
                                  16813369756331276724 => {
                                    msg = std::ptr::null();
                                    current_block = 7392824444931029276;
                                  }
                                  7392824444931029276 => {
                                    dir = FORWARD as libc::c_int;
                                    p = (*ptr_to_globals).dot.offset(1);
                                    if *(*ptr_to_globals).last_search_pattern.offset(0)
                                      as libc::c_int
                                      == '?' as i32
                                    {
                                      dir = BACK as libc::c_int;
                                      p = (*ptr_to_globals).dot.offset(-1)
                                    }
                                    current_block = 4166979493554389389;
                                  }
                                  _ => {
                                    q = char_search(
                                      p,
                                      (*ptr_to_globals).last_search_pattern.offset(1),
                                      dir << 1i32 | FULL as libc::c_int,
                                    );
                                    if !q.is_null() {
                                      (*ptr_to_globals).dot = q;
                                      msg = std::ptr::null()
                                    } else {
                                      p = (*ptr_to_globals).text;
                                      if dir == BACK as libc::c_int {
                                        p = (*ptr_to_globals).end.offset(-1)
                                      }
                                      q = char_search(
                                        p,
                                        (*ptr_to_globals).last_search_pattern.offset(1),
                                        dir << 1i32 | FULL as libc::c_int,
                                      );
                                      if !q.is_null() {
                                        (*ptr_to_globals).dot = q;
                                        msg = b"search hit BOTTOM, continuing at TOP\x00"
                                          as *const u8
                                          as *const libc::c_char;
                                        if dir == BACK as libc::c_int {
                                          msg = b"search hit TOP, continuing at BOTTOM\x00"
                                            as *const u8
                                            as *const libc::c_char
                                        }
                                      } else {
                                        msg = b"Pattern not found\x00" as *const u8
                                          as *const libc::c_char
                                      }
                                    }
                                    if !msg.is_null() {
                                      status_line_bold(
                                        b"%s\x00" as *const u8 as *const libc::c_char,
                                        msg,
                                      );
                                    }
                                    (*ptr_to_globals).cmdcnt -= 1;
                                    if (*ptr_to_globals).cmdcnt > 0 {
                                      current_block = 16813369756331276724;
                                    } else {
                                      break;
                                    }
                                  }
                                }
                              }
                              current_block = 15129665204879337069;
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
        21 => {
          current_block = 9339065157412720613;
          match current_block {
            16992905640583886232 => {
              loop {
                if (*(*ptr_to_globals).dot as libc::c_int - 'a' as i32) as libc::c_uchar
                  as libc::c_int
                  <= 'z' as i32 - 'a' as i32
                {
                  undo_push(
                    (*ptr_to_globals).dot,
                    1i32 as libc::c_uint,
                    1i32 as libc::c_uchar,
                  );
                  *(*ptr_to_globals).dot =
                    bb_ascii_toupper(*(*ptr_to_globals).dot as libc::c_uchar) as libc::c_char;
                  undo_push(
                    (*ptr_to_globals).dot,
                    1i32 as libc::c_uint,
                    2i32 as libc::c_uchar,
                  );
                } else if (*(*ptr_to_globals).dot as libc::c_int - 'A' as i32) as libc::c_uchar
                  as libc::c_int
                  <= 'Z' as i32 - 'A' as i32
                {
                  undo_push(
                    (*ptr_to_globals).dot,
                    1i32 as libc::c_uint,
                    1i32 as libc::c_uchar,
                  );
                  *(*ptr_to_globals).dot =
                    bb_ascii_tolower(*(*ptr_to_globals).dot as libc::c_uchar) as libc::c_char;
                  undo_push(
                    (*ptr_to_globals).dot,
                    1i32 as libc::c_uint,
                    2i32 as libc::c_uchar,
                  );
                }
                dot_right();
                (*ptr_to_globals).cmdcnt -= 1;
                if !((*ptr_to_globals).cmdcnt > 0) {
                  break;
                }
              }
              end_cmd_q();
              current_block = 15129665204879337069;
            }
            8729655159604064397 => {
              c1 = get_one_char();
              cnt = 0;
              if c1 == '.' as i32 {
                cnt = (*ptr_to_globals)
                  .rows
                  .wrapping_sub(2i32 as libc::c_uint)
                  .wrapping_div(2i32 as libc::c_uint) as libc::c_int
              }
              if c1 == '-' as i32 {
                cnt = (*ptr_to_globals).rows.wrapping_sub(2i32 as libc::c_uint) as libc::c_int
              }
              (*ptr_to_globals).screenbegin = begin_line((*ptr_to_globals).dot);
              dot_scroll(cnt, -1i32);
              current_block = 15129665204879337069;
            }
            15899500648299942075 => {
              (*ptr_to_globals).last_forward_char = get_one_char();
              do_cmd(';' as i32);
              if *(*ptr_to_globals).dot as libc::c_int == (*ptr_to_globals).last_forward_char {
                dot_left();
              }
              (*ptr_to_globals).last_forward_char = 0;
              current_block = 15129665204879337069;
            }
            9051390181078481641 => {
              c1 = get_one_char();
              if *(*ptr_to_globals).dot as libc::c_int != '\n' as i32 {
                (*ptr_to_globals).dot =
                  text_hole_delete((*ptr_to_globals).dot, (*ptr_to_globals).dot, 1i32);
                (*ptr_to_globals).dot =
                  char_insert((*ptr_to_globals).dot, c1 as libc::c_char, 2i32);
                dot_left();
              }
              end_cmd_q();
              current_block = 15129665204879337069;
            }
            877115918601926659 => {
              dir = FORWARD as libc::c_int;
              if c == 'b' as i32 {
                dir = BACK as libc::c_int
              }
              while !((*ptr_to_globals).dot.offset(dir as isize) < (*ptr_to_globals).text
                || (*ptr_to_globals).dot.offset(dir as isize) > (*ptr_to_globals).end.offset(-1))
              {
                (*ptr_to_globals).dot = (*ptr_to_globals).dot.offset(dir as isize);
                if ({
                  let mut bb__isspace: libc::c_uchar =
                    (*(*ptr_to_globals).dot as libc::c_int - 9i32) as libc::c_uchar;
                  (bb__isspace as libc::c_int == ' ' as i32 - 9i32
                    || bb__isspace as libc::c_int <= 13i32 - 9i32) as libc::c_int
                }) != 0
                {
                  (*ptr_to_globals).dot = skip_thing(
                    (*ptr_to_globals).dot,
                    if c == 'e' as i32 { 2i32 } else { 1i32 },
                    dir,
                    S_OVER_WS as libc::c_int,
                  )
                }
                if bb_ascii_isalnum(*(*ptr_to_globals).dot as libc::c_uchar) != 0
                  || *(*ptr_to_globals).dot as libc::c_int == '_' as i32
                {
                  (*ptr_to_globals).dot =
                    skip_thing((*ptr_to_globals).dot, 1i32, dir, S_END_ALNUM as libc::c_int)
                } else if *strchrnul(
                  b"!\"#$%&\'()*+,-./:;<=>?@[\\]^_`{|}~\x00" as *const u8 as *const libc::c_char,
                  *(*ptr_to_globals).dot as libc::c_int,
                )
                .offset(0)
                  != 0
                {
                  (*ptr_to_globals).dot =
                    skip_thing((*ptr_to_globals).dot, 1i32, dir, S_END_PUNCT as libc::c_int)
                }
                (*ptr_to_globals).cmdcnt -= 1;
                if !((*ptr_to_globals).cmdcnt > 0) {
                  break;
                }
              }
              current_block = 15129665204879337069;
            }
            1085022737867179637 => {
              dot_begin();
              dot_skip_over_ws();
              current_block = 15129665204879337069;
            }
            3113147720494587438 => {
              c1 = get_one_char();
              if c1 != 'Z' as i32 {
                indicate_error();
              } else if (*ptr_to_globals).modified_count != 0 {
                if 1i32 != 0 && (*ptr_to_globals).readonly_mode as libc::c_int != 0 {
                  status_line_bold(
                    b"\'%s\' is read only\x00" as *const u8 as *const libc::c_char,
                    (*ptr_to_globals).current_filename,
                  );
                } else {
                  cnt = file_write(
                    (*ptr_to_globals).current_filename,
                    (*ptr_to_globals).text,
                    (*ptr_to_globals).end.offset(-1),
                  );
                  if cnt < 0 {
                    if cnt == -1i32 {
                      status_line_bold(b"Write error: %m\x00" as *const u8 as *const libc::c_char);
                    }
                  } else if cnt as libc::c_long
                    == (*ptr_to_globals)
                      .end
                      .offset(-1)
                      .wrapping_offset_from((*ptr_to_globals).text)
                      as libc::c_long
                      + 1
                  {
                    (*ptr_to_globals).editing = 0 as smallint
                  }
                }
              } else {
                (*ptr_to_globals).editing = 0 as smallint
              }
              current_block = 15129665204879337069;
            }
            12960118908218882441 => {
              p = begin_line((*ptr_to_globals).dot);
              if *p.offset(-1i32 as isize) as libc::c_int == '\n' as i32 {
                dot_prev();
                current_block = 2087484904894455135;
              } else {
                dot_begin();
                (*ptr_to_globals).dot =
                  char_insert((*ptr_to_globals).dot, '\n' as i32 as libc::c_char, 1i32);
                dot_prev();
                current_block = 8629930936610358348;
              }
            }
            8720450212473544924 => {
              (*ptr_to_globals).dot = (*ptr_to_globals).screenbegin;
              cnt = 0;
              while (cnt as libc::c_uint)
                < (*ptr_to_globals)
                  .rows
                  .wrapping_sub(1i32 as libc::c_uint)
                  .wrapping_div(2i32 as libc::c_uint)
              {
                (*ptr_to_globals).dot = next_line((*ptr_to_globals).dot);
                cnt += 1
              }
              current_block = 15129665204879337069;
            }
            13015277209715431090 => {
              (*ptr_to_globals).dot = end_screen();
              if (*ptr_to_globals).cmdcnt as libc::c_uint
                > (*ptr_to_globals).rows.wrapping_sub(1i32 as libc::c_uint)
              {
                (*ptr_to_globals).cmdcnt =
                  (*ptr_to_globals).rows.wrapping_sub(1i32 as libc::c_uint) as libc::c_int
              }
              (*ptr_to_globals).cmdcnt -= 1;
              if (*ptr_to_globals).cmdcnt > 0 {
                do_cmd('-' as i32);
              }
              dot_begin();
              dot_skip_over_ws();
              current_block = 15129665204879337069;
            }
            9800435767766781385 => {
              loop {
                dot_end();
                if (*ptr_to_globals).dot < (*ptr_to_globals).end.offset(-1) {
                  undo_push(
                    (*ptr_to_globals).dot,
                    1i32 as libc::c_uint,
                    1i32 as libc::c_uchar,
                  );
                  let fresh15 = (*ptr_to_globals).dot;
                  (*ptr_to_globals).dot = (*ptr_to_globals).dot.offset(1);
                  *fresh15 = ' ' as i32 as libc::c_char;
                  undo_push(
                    (*ptr_to_globals).dot.offset(-1),
                    1i32 as libc::c_uint,
                    2i32 as libc::c_uchar,
                  );
                  while ({
                    let mut bb__isblank: libc::c_uchar = *(*ptr_to_globals).dot as libc::c_uchar;
                    (bb__isblank as libc::c_int == ' ' as i32
                      || bb__isblank as libc::c_int == '\t' as i32)
                      as libc::c_int
                  }) != 0
                  {
                    text_hole_delete((*ptr_to_globals).dot, (*ptr_to_globals).dot, 2i32);
                  }
                }
                (*ptr_to_globals).cmdcnt -= 1;
                if !((*ptr_to_globals).cmdcnt > 0) {
                  break;
                }
              }
              end_cmd_q();
              current_block = 15129665204879337069;
            }
            3432363526595694666 => {
              dot_begin();
              dot_skip_over_ws();
              current_block = 3268579060917229304;
            }
            3494829253343353619 => {
              (*ptr_to_globals).dot = (*ptr_to_globals).screenbegin;
              if (*ptr_to_globals).cmdcnt as libc::c_uint
                > (*ptr_to_globals).rows.wrapping_sub(1i32 as libc::c_uint)
              {
                (*ptr_to_globals).cmdcnt =
                  (*ptr_to_globals).rows.wrapping_sub(1i32 as libc::c_uint) as libc::c_int
              }
              (*ptr_to_globals).cmdcnt -= 1;
              if (*ptr_to_globals).cmdcnt > 0 {
                do_cmd('+' as i32);
              }
              dot_skip_over_ws();
              current_block = 15129665204879337069;
            }
            17973101765331640574 => {
              c1 = get_one_char();
              if c1 != 'g' as i32 {
                buf[0] = 'g' as i32 as libc::c_char;
                buf[1] = if c1 >= 0 { c1 } else { '*' as i32 } as libc::c_char;
                buf[2] = '\u{0}' as i32 as libc::c_char;
                not_implemented(buf.as_mut_ptr());
                current_block = 15129665204879337069;
              } else {
                if (*ptr_to_globals).cmdcnt == 0 {
                  (*ptr_to_globals).cmdcnt = 1i32
                }
                current_block = 11945623545738147997;
              }
            }
            16546625800574160972 => {
              save_dot = (*ptr_to_globals).dot;
              (*ptr_to_globals).dot = dollar_line((*ptr_to_globals).dot);
              (*ptr_to_globals).dot = yank_delete(
                save_dot,
                (*ptr_to_globals).dot,
                0,
                YANKDEL as libc::c_int,
                1i32,
              );
              if c == 'C' as i32 {
                current_block = 8629930936610358348;
              } else {
                if c == 'D' as i32 {
                  end_cmd_q();
                }
                current_block = 15129665204879337069;
              }
            }
            11937696639986586685 => {
              cnt = count_lines((*ptr_to_globals).text, (*ptr_to_globals).dot);
              c1 = get_one_char();
              find_range(&mut p, &mut q, c1 as libc::c_char);
              yank_delete(p, q, 1i32, YANKONLY as libc::c_int, 0);
              p = begin_line(p);
              q = end_line(q);
              i = count_lines(p, q);
              while i > 0 {
                if c == '<' as i32 {
                  if *p as libc::c_int == '\t' as i32 {
                    text_hole_delete(p, p, 0);
                  } else if *p as libc::c_int == ' ' as i32 {
                    j = 0;
                    while *p as libc::c_int == ' ' as i32 && j < (*ptr_to_globals).tabstop {
                      text_hole_delete(p, p, 0);
                      j += 1
                    }
                  }
                } else if c == '>' as i32 {
                  char_insert(p, '\t' as i32 as libc::c_char, 1i32);
                }
                i -= 1;
                p = next_line(p)
              }
              (*ptr_to_globals).dot = find_line(cnt);
              dot_skip_over_ws();
              end_cmd_q();
              current_block = 15129665204879337069;
            }
            17725350714912028156 => {
              p = get_input_line(b":\x00" as *const u8 as *const libc::c_char);
              colon(p);
              current_block = 15129665204879337069;
            }
            14526470074083880812 => {
              q = char_search(
                (*ptr_to_globals).dot,
                b"\n\n\x00" as *const u8 as *const libc::c_char,
                (FORWARD as libc::c_int) << 1i32 | FULL as libc::c_int,
              );
              if !q.is_null() {
                (*ptr_to_globals).dot = next_line(q)
              }
              current_block = 15129665204879337069;
            }
            8893187391306414141 => {
              q = char_search(
                (*ptr_to_globals).dot,
                b"\n\n\x00" as *const u8 as *const libc::c_char,
                ((BACK as libc::c_int as libc::c_uint) << 1i32
                  | FULL as libc::c_int as libc::c_uint) as libc::c_int,
              );
              if !q.is_null() {
                (*ptr_to_globals).dot = next_line(q)
              }
              current_block = 15129665204879337069;
            }
            7021673758293221412 => {
              dir = BACK as libc::c_int;
              p = (*ptr_to_globals).dot.offset(-1);
              if *(*ptr_to_globals).last_search_pattern.offset(0) as libc::c_int == '?' as i32 {
                dir = FORWARD as libc::c_int;
                p = (*ptr_to_globals).dot.offset(1)
              }
              current_block = 4166979493554389389;
            }
            18374191879090272823 => {
              buf[0] = c as libc::c_char;
              buf[1] = '\u{0}' as i32 as libc::c_char;
              q = get_input_line(buf.as_mut_ptr());
              if *q.offset(0) as libc::c_int != 0 && *q.offset(1) == 0 {
                if *(*ptr_to_globals).last_search_pattern.offset(0) != 0 {
                  *(*ptr_to_globals).last_search_pattern.offset(0) = c as libc::c_char
                }
                current_block = 7392824444931029276;
              } else if *q.offset(0) != 0 {
                free((*ptr_to_globals).last_search_pattern as *mut libc::c_void);
                (*ptr_to_globals).last_search_pattern = crate::libbb::xfuncs_printf::xstrdup(q);
                current_block = 7392824444931029276;
              } else {
                current_block = 15129665204879337069;
              }
            }
            16407828456666301883 => {
              if (*ptr_to_globals).last_forward_char == 0 {
                current_block = 15129665204879337069;
              } else {
                loop {
                  q = (*ptr_to_globals).dot.offset(-1);
                  while q >= (*ptr_to_globals).text
                    && *q as libc::c_int != '\n' as i32
                    && *q as libc::c_int != (*ptr_to_globals).last_forward_char
                  {
                    q = q.offset(-1)
                  }
                  if q >= (*ptr_to_globals).text
                    && *q as libc::c_int == (*ptr_to_globals).last_forward_char
                  {
                    (*ptr_to_globals).dot = q
                  }
                  (*ptr_to_globals).cmdcnt -= 1;
                  if !((*ptr_to_globals).cmdcnt > 0) {
                    break;
                  }
                }
                current_block = 15129665204879337069;
              }
            }
            9018432604062702004 => {
              q = (*ptr_to_globals).dot;
              while q < (*ptr_to_globals).end && *q as libc::c_int != '\n' as i32 {
                if !strchr(
                  b"()[]{}\x00" as *const u8 as *const libc::c_char,
                  *q as libc::c_int,
                )
                .is_null()
                {
                  p = find_pair(q, *q);
                  if p.is_null() {
                    indicate_error();
                  } else {
                    (*ptr_to_globals).dot = p
                  }
                  break;
                } else {
                  q = q.offset(1)
                }
              }
              if *q as libc::c_int == '\n' as i32 {
                indicate_error();
              }
              current_block = 15129665204879337069;
            }
            10247103787464459848 => {
              p = (*ptr_to_globals).reg[(*ptr_to_globals).YDreg as usize];
              if p.is_null() {
                status_line_bold(
                  b"Nothing in register %c\x00" as *const u8 as *const libc::c_char,
                  what_reg() as libc::c_int,
                );
              } else {
                if !strchr(p, '\n' as i32).is_null() {
                  if c == 'P' as i32 {
                    dot_begin();
                  }
                  if c == 'p' as i32 {
                    if end_line((*ptr_to_globals).dot) == (*ptr_to_globals).end.offset(-1) {
                      (*ptr_to_globals).dot = (*ptr_to_globals).end
                    } else {
                      dot_next();
                    }
                  }
                } else if c == 'p' as i32 {
                  dot_right();
                }
                string_insert((*ptr_to_globals).dot, p, 1i32);
                end_cmd_q();
              }
              current_block = 15129665204879337069;
            }
            15260732871948875843 => {
              c1 = (get_one_char() | 0x20i32) - 'a' as i32;
              if c1 as libc::c_uint <= 25i32 as libc::c_uint {
                (*ptr_to_globals).mark[c1 as usize] = (*ptr_to_globals).dot
              } else {
                indicate_error();
              }
              current_block = 15129665204879337069;
            }
            12738322036487086035 => {
              c1 = get_one_char() | 0x20i32;
              if (c1 - 'a' as i32) as libc::c_uint <= 25i32 as libc::c_uint {
                c1 = c1 - 'a' as i32;
                q = (*ptr_to_globals).mark[c1 as usize];
                if (*ptr_to_globals).text <= q && q < (*ptr_to_globals).end {
                  (*ptr_to_globals).dot = q;
                  dot_begin();
                  dot_skip_over_ws();
                }
              } else if c1 == '\'' as i32 {
                (*ptr_to_globals).dot = swap_context((*ptr_to_globals).dot);
                dot_begin();
                dot_skip_over_ws();
              } else {
                indicate_error();
              }
              current_block = 15129665204879337069;
            }
            13255096073384561358 => {
              c1 = (get_one_char() | 0x20i32) - 'a' as i32;
              if c1 as libc::c_uint <= 25i32 as libc::c_uint {
                (*ptr_to_globals).YDreg = c1 as smalluint
              } else {
                indicate_error();
              }
              current_block = 15129665204879337069;
            }
            10258711639984089377 => {
              if (*ptr_to_globals).cmd_mode as libc::c_int == 0 {
                indicate_error();
              }
              (*ptr_to_globals).cmd_mode = 0 as smallint;
              undo_queue_commit();
              end_cmd_q();
              (*ptr_to_globals).last_status_cksum = 0;
              current_block = 15129665204879337069;
            }
            11439127087547047736 => {
              buf[0] = c as libc::c_char;
              buf[1] = '\u{0}' as i32 as libc::c_char;
              not_implemented(buf.as_mut_ptr());
              end_cmd_q();
              current_block = 17440971994642376514;
            }
            7961798899781870241 => {
              dot_scroll(
                (*ptr_to_globals).rows.wrapping_sub(2i32 as libc::c_uint) as libc::c_int,
                -1i32,
              );
              current_block = 15129665204879337069;
            }
            9426343755402444879 => {
              dot_scroll(
                (*ptr_to_globals)
                  .rows
                  .wrapping_sub(2i32 as libc::c_uint)
                  .wrapping_div(2i32 as libc::c_uint) as libc::c_int,
                1i32,
              );
              current_block = 15129665204879337069;
            }
            13352459794680105913 => {
              dot_scroll(1i32, 1i32);
              current_block = 15129665204879337069;
            }
            14142272253464333006 => {
              dot_scroll(
                (*ptr_to_globals).rows.wrapping_sub(2i32 as libc::c_uint) as libc::c_int,
                1i32,
              );
              current_block = 15129665204879337069;
            }
            10758177197742640066 => {
              (*ptr_to_globals).last_status_cksum = 0;
              current_block = 15129665204879337069;
            }
            6152256259730122749 => {
              current_block = 7534742345255184552;
            }
            12883932598258173301 => {
              current_block = 8800996768013373992;
            }
            11242998110520238401 => {
              redraw(1i32);
              current_block = 15129665204879337069;
            }
            13619733043935729992 => {
              loop {
                dot_next();
                dot_skip_over_ws();
                (*ptr_to_globals).cmdcnt -= 1;
                if !((*ptr_to_globals).cmdcnt > 0) {
                  break;
                }
              }
              current_block = 15129665204879337069;
            }
            9339065157412720613 => {
              dot_scroll(
                (*ptr_to_globals)
                  .rows
                  .wrapping_sub(2i32 as libc::c_uint)
                  .wrapping_div(2i32 as libc::c_uint) as libc::c_int,
                -1i32,
              );
              current_block = 15129665204879337069;
            }
            11447082683497798022 => {
              dot_scroll(1i32, -1i32);
              current_block = 15129665204879337069;
            }
            5182000506326660482 => {
              current_block = 13993698454868426881;
            }
            1105010766850597332 => {
              if !(*ptr_to_globals).reg[27].is_null() {
                p = begin_line((*ptr_to_globals).dot);
                q = end_line((*ptr_to_globals).dot);
                p = text_hole_delete(p, q, 1i32);
                p = p.offset(string_insert(p, (*ptr_to_globals).reg[27], 2i32) as isize);
                (*ptr_to_globals).dot = p;
                dot_skip_over_ws();
              }
              current_block = 15129665204879337069;
            }
            8616046655533110204 => {
              undo_pop();
              current_block = 15129665204879337069;
            }
            5127767458142431603 => {
              loop {
                (*ptr_to_globals).dot = end_line((*ptr_to_globals).dot);
                (*ptr_to_globals).cmdcnt -= 1;
                if (*ptr_to_globals).cmdcnt <= 0 {
                  break;
                }
                dot_next();
              }
              current_block = 15129665204879337069;
            }
            222014967776118151 => {
              (*ptr_to_globals).last_forward_char = get_one_char();
              current_block = 7856905509180742666;
            }
            11209792479411604110 => {
              loop {
                dot_prev();
                dot_skip_over_ws();
                (*ptr_to_globals).cmdcnt -= 1;
                if !((*ptr_to_globals).cmdcnt > 0) {
                  break;
                }
              }
              current_block = 15129665204879337069;
            }
            3364823792826654116 => {
              if (*ptr_to_globals).lmc_len != 0 {
                (*ptr_to_globals).ioq_start = crate::libbb::xfuncs_printf::xstrndup(
                  (*ptr_to_globals).last_modifying_cmd.as_mut_ptr(),
                  (*ptr_to_globals).lmc_len,
                );
                (*ptr_to_globals).ioq = (*ptr_to_globals).ioq_start
              }
              current_block = 15129665204879337069;
            }
            18096603330221575131 => {
              current_block = 17498168302144015873;
            }
            16891123271837848903 => {
              dot_end();
              current_block = 1752638907092016026;
            }
            8517235759107662071 => {
              current_block = 5847749760081351726;
            }
            12525254419223051704 => {
              if (*ptr_to_globals).dot < (*ptr_to_globals).end.offset(-1) {
                (*ptr_to_globals).dot = yank_delete(
                  (*ptr_to_globals).dot,
                  (*ptr_to_globals).dot,
                  1i32,
                  YANKDEL as libc::c_int,
                  1i32,
                )
              }
              current_block = 15129665204879337069;
            }
            15232911949322867522 => {
              current_block = 17251831742223396249;
            }
            10863374208794025069 => {
              current_block = 1895262434596074581;
            }
            451126677064669119 => {
              loop {
                dot_prev();
                (*ptr_to_globals).dot = move_to_col(
                  (*ptr_to_globals).dot,
                  (*ptr_to_globals).ccol + (*ptr_to_globals).offset,
                );
                (*ptr_to_globals).cmdcnt -= 1;
                if !((*ptr_to_globals).cmdcnt > 0) {
                  break;
                }
              }
              current_block = 15129665204879337069;
            }
            4611735929166613116 => {
              loop {
                if bb_ascii_isalnum(*(*ptr_to_globals).dot as libc::c_uchar) != 0
                  || *(*ptr_to_globals).dot as libc::c_int == '_' as i32
                {
                  (*ptr_to_globals).dot = skip_thing(
                    (*ptr_to_globals).dot,
                    1i32,
                    FORWARD as libc::c_int,
                    S_END_ALNUM as libc::c_int,
                  )
                } else if *strchrnul(
                  b"!\"#$%&\'()*+,-./:;<=>?@[\\]^_`{|}~\x00" as *const u8 as *const libc::c_char,
                  *(*ptr_to_globals).dot as libc::c_int,
                )
                .offset(0)
                  != 0
                {
                  (*ptr_to_globals).dot = skip_thing(
                    (*ptr_to_globals).dot,
                    1i32,
                    FORWARD as libc::c_int,
                    S_END_PUNCT as libc::c_int,
                  )
                }
                if (*ptr_to_globals).dot < (*ptr_to_globals).end.offset(-1) {
                  (*ptr_to_globals).dot = (*ptr_to_globals).dot.offset(1)
                }
                if ({
                  let mut bb__isspace: libc::c_uchar =
                    (*(*ptr_to_globals).dot as libc::c_int - 9i32) as libc::c_uchar;
                  (bb__isspace as libc::c_int == ' ' as i32 - 9i32
                    || bb__isspace as libc::c_int <= 13i32 - 9i32) as libc::c_int
                }) != 0
                {
                  (*ptr_to_globals).dot = skip_thing(
                    (*ptr_to_globals).dot,
                    2i32,
                    FORWARD as libc::c_int,
                    S_OVER_WS as libc::c_int,
                  )
                }
                (*ptr_to_globals).cmdcnt -= 1;
                if !((*ptr_to_globals).cmdcnt > 0) {
                  break;
                }
              }
              current_block = 15129665204879337069;
            }
            4386451087681909888 => {
              (*ptr_to_globals).dot =
                move_to_col((*ptr_to_globals).dot, (*ptr_to_globals).cmdcnt - 1i32);
              current_block = 15129665204879337069;
            }
            1296397779060594135 => {
              dot_begin();
              current_block = 15129665204879337069;
            }
            _ => {}
          }
          match current_block {
            15129665204879337069 => {}
            8629930936610358348 => {}
            _ => {
              match current_block {
                17251831742223396249 => {
                  dir = 0;
                  if c == 'X' as i32 {
                    dir = -1i32
                  }
                  loop {
                    if *(*ptr_to_globals).dot.offset(dir as isize) as libc::c_int != '\n' as i32 {
                      if c == 'X' as i32 {
                        (*ptr_to_globals).dot = (*ptr_to_globals).dot.offset(-1)
                      }
                      (*ptr_to_globals).dot = yank_delete(
                        (*ptr_to_globals).dot,
                        (*ptr_to_globals).dot,
                        0,
                        YANKDEL as libc::c_int,
                        1i32,
                      )
                    }
                    (*ptr_to_globals).cmdcnt -= 1;
                    if !((*ptr_to_globals).cmdcnt > 0) {
                      break;
                    }
                  }
                  end_cmd_q();
                  if c == 's' as i32 {
                    current_block = 8629930936610358348;
                  } else {
                    current_block = 15129665204879337069;
                  }
                }
                2087484904894455135 => {
                  dot_end();
                  (*ptr_to_globals).dot =
                    char_insert((*ptr_to_globals).dot, '\n' as i32 as libc::c_char, 1i32);
                  current_block = 8629930936610358348;
                }
                11945623545738147997 => {
                  (*ptr_to_globals).dot = (*ptr_to_globals).end.offset(-1);
                  if (*ptr_to_globals).cmdcnt > 0 {
                    (*ptr_to_globals).dot = find_line((*ptr_to_globals).cmdcnt)
                  }
                  dot_skip_over_ws();
                  current_block = 15129665204879337069;
                }
                5847749760081351726 => {
                  dir = FORWARD as libc::c_int;
                  if c == 'B' as i32 {
                    dir = BACK as libc::c_int
                  }
                  loop {
                    if c == 'W' as i32
                      || ({
                        let mut bb__isspace: libc::c_uchar =
                          (*(*ptr_to_globals).dot.offset(dir as isize) as libc::c_int - 9i32)
                            as libc::c_uchar;
                        (bb__isspace as libc::c_int == ' ' as i32 - 9i32
                          || bb__isspace as libc::c_int <= 13i32 - 9i32)
                          as libc::c_int
                      }) != 0
                    {
                      (*ptr_to_globals).dot =
                        skip_thing((*ptr_to_globals).dot, 1i32, dir, S_TO_WS as libc::c_int);
                      (*ptr_to_globals).dot =
                        skip_thing((*ptr_to_globals).dot, 2i32, dir, S_OVER_WS as libc::c_int)
                    }
                    if c != 'W' as i32 {
                      (*ptr_to_globals).dot =
                        skip_thing((*ptr_to_globals).dot, 1i32, dir, S_BEFORE_WS as libc::c_int)
                    }
                    (*ptr_to_globals).cmdcnt -= 1;
                    if !((*ptr_to_globals).cmdcnt > 0) {
                      break;
                    }
                  }
                  current_block = 15129665204879337069;
                }
                17440971994642376514 => {
                  current_block = 15129665204879337069;
                }
                7534742345255184552 => {
                  current_block = 17247297260531395789;
                }
                8800996768013373992 => {
                  loop {
                    dot_next();
                    (*ptr_to_globals).dot = move_to_col(
                      (*ptr_to_globals).dot,
                      (*ptr_to_globals).ccol + (*ptr_to_globals).offset,
                    );
                    (*ptr_to_globals).cmdcnt -= 1;
                    if !((*ptr_to_globals).cmdcnt > 0) {
                      break;
                    }
                  }
                  current_block = 15129665204879337069;
                }
                13993698454868426881 => {
                  loop {
                    dot_right();
                    (*ptr_to_globals).cmdcnt -= 1;
                    if !((*ptr_to_globals).cmdcnt > 0) {
                      break;
                    }
                  }
                  current_block = 15129665204879337069;
                }
                7856905509180742666 => {
                  while !((*ptr_to_globals).last_forward_char == 0) {
                    q = (*ptr_to_globals).dot.offset(1);
                    while q < (*ptr_to_globals).end.offset(-1)
                      && *q as libc::c_int != '\n' as i32
                      && *q as libc::c_int != (*ptr_to_globals).last_forward_char
                    {
                      q = q.offset(1)
                    }
                    if *q as libc::c_int == (*ptr_to_globals).last_forward_char {
                      (*ptr_to_globals).dot = q
                    }
                    (*ptr_to_globals).cmdcnt -= 1;
                    if !((*ptr_to_globals).cmdcnt > 0) {
                      break;
                    }
                  }
                  current_block = 15129665204879337069;
                }
                17498168302144015873 => {
                  current_block = 8681395796513813967;
                }
                1752638907092016026 => {
                  if *(*ptr_to_globals).dot as libc::c_int != '\n' as i32 {
                    (*ptr_to_globals).dot = (*ptr_to_globals).dot.offset(1)
                  }
                  current_block = 8629930936610358348;
                }
                3268579060917229304 => {
                  current_block = 8629930936610358348;
                }
                1895262434596074581 => {
                  current_block = 8908416993177701018;
                }
                _ => {}
              }
              match current_block {
                8629930936610358348 => {}
                15129665204879337069 => {}
                _ => {
                  match current_block {
                    17247297260531395789 => {
                      loop {
                        dot_left();
                        (*ptr_to_globals).cmdcnt -= 1;
                        if !((*ptr_to_globals).cmdcnt > 0) {
                          break;
                        }
                      }
                      current_block = 15129665204879337069;
                    }
                    8681395796513813967 => {
                      current_block = 5591548203144509315;
                    }
                    8908416993177701018 => {
                      current_block = 16124761010012532485;
                    }
                    _ => {}
                  }
                  match current_block {
                    15129665204879337069 => {}
                    _ => {
                      match current_block {
                        16124761010012532485 => {
                          let mut yf: libc::c_int = 0;
                          let mut ml: libc::c_int = 0;
                          let mut whole: libc::c_int = 0;
                          yf = YANKDEL as libc::c_int;
                          if c == 'y' as i32 || c == 'Y' as i32 {
                            yf = YANKONLY as libc::c_int
                          }
                          c1 = 'y' as i32;
                          if c != 'Y' as i32 {
                            c1 = get_one_char()
                          }
                          ml = find_range(&mut p, &mut q, c1 as libc::c_char);
                          place_cursor(0i32, 0);
                          if c1 == 27i32 {
                            c1 = 27i32;
                            c = c1
                          } else if !strchr(b"wW\x00" as *const u8 as *const libc::c_char, c1)
                            .is_null()
                          {
                            ml = 0;
                            if c == 'c' as i32 {
                              while ({
                                let mut bb__isspace: libc::c_uchar =
                                  (*q as libc::c_int - 9i32) as libc::c_uchar;
                                (bb__isspace as libc::c_int == ' ' as i32 - 9i32
                                  || bb__isspace as libc::c_int <= 13i32 - 9i32)
                                  as libc::c_int
                              }) != 0
                                && q > p
                              {
                                q = q.offset(-1)
                              }
                            }
                            (*ptr_to_globals).dot = yank_delete(p, q, ml, yf, 1i32)
                          } else if !strchr(
                            b"^0bBeEft%$ lh\x08\x7f\x00" as *const u8 as *const libc::c_char,
                            c1,
                          )
                          .is_null()
                          {
                            (*ptr_to_globals).dot = yank_delete(p, q, ml, yf, 1i32)
                          } else if !strchr(
                            b"cdykjGHL+-{}\r\n\x00" as *const u8 as *const libc::c_char,
                            c1,
                          )
                          .is_null()
                          {
                            (*ptr_to_globals).dot = yank_delete(p, q, ml, yf, 1i32);
                            whole = 1i32
                          } else {
                            c1 = 27i32;
                            c = c1;
                            ml = 0;
                            indicate_error();
                          }
                          if ml != 0 && whole != 0 {
                            if c == 'c' as i32 {
                              (*ptr_to_globals).dot = char_insert(
                                (*ptr_to_globals).dot,
                                '\n' as i32 as libc::c_char,
                                2i32,
                              );
                              if whole != 0
                                && (*ptr_to_globals).dot != (*ptr_to_globals).end.offset(-1)
                              {
                                dot_prev();
                              }
                            } else if c == 'd' as i32 {
                              dot_begin();
                              dot_skip_over_ws();
                            }
                          }
                          if c1 != 27i32 {
                            if c == 'c' as i32 {
                              strcpy(
                                buf.as_mut_ptr(),
                                b"Change\x00" as *const u8 as *const libc::c_char,
                              );
                              current_block = 8629930936610358348;
                            } else {
                              if c == 'd' as i32 {
                                strcpy(
                                  buf.as_mut_ptr(),
                                  b"Delete\x00" as *const u8 as *const libc::c_char,
                                );
                              }
                              if c == 'y' as i32 || c == 'Y' as i32 {
                                strcpy(
                                  buf.as_mut_ptr(),
                                  b"Yank\x00" as *const u8 as *const libc::c_char,
                                );
                              }
                              p = (*ptr_to_globals).reg[(*ptr_to_globals).YDreg as usize];
                              q = p.offset(strlen(p) as isize);
                              cnt = 0;
                              while p <= q {
                                if *p as libc::c_int == '\n' as i32 {
                                  cnt += 1
                                }
                                p = p.offset(1)
                              }
                              status_line(
                                b"%s %u lines (%u chars) using [%c]\x00" as *const u8
                                  as *const libc::c_char,
                                buf.as_mut_ptr(),
                                cnt,
                                strlen((*ptr_to_globals).reg[(*ptr_to_globals).YDreg as usize])
                                  as libc::c_uint,
                                what_reg() as libc::c_int,
                              );
                              end_cmd_q();
                              current_block = 15129665204879337069;
                            }
                          } else {
                            current_block = 15129665204879337069;
                          }
                        }
                        5591548203144509315 => {
                          current_block = 2636677179867529885;
                        }
                        _ => {}
                      }
                      match current_block {
                        15129665204879337069 => {}
                        8629930936610358348 => {}
                        _ => {
                          match current_block {
                            2636677179867529885 => {
                              current_block = 12309206730560524281;
                            }
                            _ => {}
                          }
                          match current_block {
                            12309206730560524281 => {
                              current_block = 3325768110057758661;
                            }
                            _ => {}
                          }
                          match current_block {
                            3325768110057758661 => {
                              current_block = 14815832896553429982;
                            }
                            _ => {}
                          }
                          match current_block {
                            14815832896553429982 => {
                              current_block = 10731695520297161438;
                            }
                            _ => {}
                          }
                          match current_block {
                            10731695520297161438 => {
                              if c == '0' as i32 && (*ptr_to_globals).cmdcnt < 1i32 {
                                dot_begin();
                              } else {
                                (*ptr_to_globals).cmdcnt =
                                  (*ptr_to_globals).cmdcnt * 10i32 + (c - '0' as i32)
                              }
                              current_block = 15129665204879337069;
                            }
                            _ => {}
                          }
                          match current_block {
                            15129665204879337069 => {}
                            _ => {
                              loop {
                                match current_block {
                                  16813369756331276724 => {
                                    msg = std::ptr::null();
                                    current_block = 7392824444931029276;
                                  }
                                  7392824444931029276 => {
                                    dir = FORWARD as libc::c_int;
                                    p = (*ptr_to_globals).dot.offset(1);
                                    if *(*ptr_to_globals).last_search_pattern.offset(0)
                                      as libc::c_int
                                      == '?' as i32
                                    {
                                      dir = BACK as libc::c_int;
                                      p = (*ptr_to_globals).dot.offset(-1)
                                    }
                                    current_block = 4166979493554389389;
                                  }
                                  _ => {
                                    q = char_search(
                                      p,
                                      (*ptr_to_globals).last_search_pattern.offset(1),
                                      dir << 1i32 | FULL as libc::c_int,
                                    );
                                    if !q.is_null() {
                                      (*ptr_to_globals).dot = q;
                                      msg = std::ptr::null()
                                    } else {
                                      p = (*ptr_to_globals).text;
                                      if dir == BACK as libc::c_int {
                                        p = (*ptr_to_globals).end.offset(-1)
                                      }
                                      q = char_search(
                                        p,
                                        (*ptr_to_globals).last_search_pattern.offset(1),
                                        dir << 1i32 | FULL as libc::c_int,
                                      );
                                      if !q.is_null() {
                                        (*ptr_to_globals).dot = q;
                                        msg = b"search hit BOTTOM, continuing at TOP\x00"
                                          as *const u8
                                          as *const libc::c_char;
                                        if dir == BACK as libc::c_int {
                                          msg = b"search hit TOP, continuing at BOTTOM\x00"
                                            as *const u8
                                            as *const libc::c_char
                                        }
                                      } else {
                                        msg = b"Pattern not found\x00" as *const u8
                                          as *const libc::c_char
                                      }
                                    }
                                    if !msg.is_null() {
                                      status_line_bold(
                                        b"%s\x00" as *const u8 as *const libc::c_char,
                                        msg,
                                      );
                                    }
                                    (*ptr_to_globals).cmdcnt -= 1;
                                    if (*ptr_to_globals).cmdcnt > 0 {
                                      current_block = 16813369756331276724;
                                    } else {
                                      break;
                                    }
                                  }
                                }
                              }
                              current_block = 15129665204879337069;
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
        25 => {
          current_block = 11447082683497798022;
          match current_block {
            16992905640583886232 => {
              loop {
                if (*(*ptr_to_globals).dot as libc::c_int - 'a' as i32) as libc::c_uchar
                  as libc::c_int
                  <= 'z' as i32 - 'a' as i32
                {
                  undo_push(
                    (*ptr_to_globals).dot,
                    1i32 as libc::c_uint,
                    1i32 as libc::c_uchar,
                  );
                  *(*ptr_to_globals).dot =
                    bb_ascii_toupper(*(*ptr_to_globals).dot as libc::c_uchar) as libc::c_char;
                  undo_push(
                    (*ptr_to_globals).dot,
                    1i32 as libc::c_uint,
                    2i32 as libc::c_uchar,
                  );
                } else if (*(*ptr_to_globals).dot as libc::c_int - 'A' as i32) as libc::c_uchar
                  as libc::c_int
                  <= 'Z' as i32 - 'A' as i32
                {
                  undo_push(
                    (*ptr_to_globals).dot,
                    1i32 as libc::c_uint,
                    1i32 as libc::c_uchar,
                  );
                  *(*ptr_to_globals).dot =
                    bb_ascii_tolower(*(*ptr_to_globals).dot as libc::c_uchar) as libc::c_char;
                  undo_push(
                    (*ptr_to_globals).dot,
                    1i32 as libc::c_uint,
                    2i32 as libc::c_uchar,
                  );
                }
                dot_right();
                (*ptr_to_globals).cmdcnt -= 1;
                if !((*ptr_to_globals).cmdcnt > 0) {
                  break;
                }
              }
              end_cmd_q();
              current_block = 15129665204879337069;
            }
            8729655159604064397 => {
              c1 = get_one_char();
              cnt = 0;
              if c1 == '.' as i32 {
                cnt = (*ptr_to_globals)
                  .rows
                  .wrapping_sub(2i32 as libc::c_uint)
                  .wrapping_div(2i32 as libc::c_uint) as libc::c_int
              }
              if c1 == '-' as i32 {
                cnt = (*ptr_to_globals).rows.wrapping_sub(2i32 as libc::c_uint) as libc::c_int
              }
              (*ptr_to_globals).screenbegin = begin_line((*ptr_to_globals).dot);
              dot_scroll(cnt, -1i32);
              current_block = 15129665204879337069;
            }
            15899500648299942075 => {
              (*ptr_to_globals).last_forward_char = get_one_char();
              do_cmd(';' as i32);
              if *(*ptr_to_globals).dot as libc::c_int == (*ptr_to_globals).last_forward_char {
                dot_left();
              }
              (*ptr_to_globals).last_forward_char = 0;
              current_block = 15129665204879337069;
            }
            9051390181078481641 => {
              c1 = get_one_char();
              if *(*ptr_to_globals).dot as libc::c_int != '\n' as i32 {
                (*ptr_to_globals).dot =
                  text_hole_delete((*ptr_to_globals).dot, (*ptr_to_globals).dot, 1i32);
                (*ptr_to_globals).dot =
                  char_insert((*ptr_to_globals).dot, c1 as libc::c_char, 2i32);
                dot_left();
              }
              end_cmd_q();
              current_block = 15129665204879337069;
            }
            877115918601926659 => {
              dir = FORWARD as libc::c_int;
              if c == 'b' as i32 {
                dir = BACK as libc::c_int
              }
              while !((*ptr_to_globals).dot.offset(dir as isize) < (*ptr_to_globals).text
                || (*ptr_to_globals).dot.offset(dir as isize) > (*ptr_to_globals).end.offset(-1))
              {
                (*ptr_to_globals).dot = (*ptr_to_globals).dot.offset(dir as isize);
                if ({
                  let mut bb__isspace: libc::c_uchar =
                    (*(*ptr_to_globals).dot as libc::c_int - 9i32) as libc::c_uchar;
                  (bb__isspace as libc::c_int == ' ' as i32 - 9i32
                    || bb__isspace as libc::c_int <= 13i32 - 9i32) as libc::c_int
                }) != 0
                {
                  (*ptr_to_globals).dot = skip_thing(
                    (*ptr_to_globals).dot,
                    if c == 'e' as i32 { 2i32 } else { 1i32 },
                    dir,
                    S_OVER_WS as libc::c_int,
                  )
                }
                if bb_ascii_isalnum(*(*ptr_to_globals).dot as libc::c_uchar) != 0
                  || *(*ptr_to_globals).dot as libc::c_int == '_' as i32
                {
                  (*ptr_to_globals).dot =
                    skip_thing((*ptr_to_globals).dot, 1i32, dir, S_END_ALNUM as libc::c_int)
                } else if *strchrnul(
                  b"!\"#$%&\'()*+,-./:;<=>?@[\\]^_`{|}~\x00" as *const u8 as *const libc::c_char,
                  *(*ptr_to_globals).dot as libc::c_int,
                )
                .offset(0)
                  != 0
                {
                  (*ptr_to_globals).dot =
                    skip_thing((*ptr_to_globals).dot, 1i32, dir, S_END_PUNCT as libc::c_int)
                }
                (*ptr_to_globals).cmdcnt -= 1;
                if !((*ptr_to_globals).cmdcnt > 0) {
                  break;
                }
              }
              current_block = 15129665204879337069;
            }
            1085022737867179637 => {
              dot_begin();
              dot_skip_over_ws();
              current_block = 15129665204879337069;
            }
            3113147720494587438 => {
              c1 = get_one_char();
              if c1 != 'Z' as i32 {
                indicate_error();
              } else if (*ptr_to_globals).modified_count != 0 {
                if 1i32 != 0 && (*ptr_to_globals).readonly_mode as libc::c_int != 0 {
                  status_line_bold(
                    b"\'%s\' is read only\x00" as *const u8 as *const libc::c_char,
                    (*ptr_to_globals).current_filename,
                  );
                } else {
                  cnt = file_write(
                    (*ptr_to_globals).current_filename,
                    (*ptr_to_globals).text,
                    (*ptr_to_globals).end.offset(-1),
                  );
                  if cnt < 0 {
                    if cnt == -1i32 {
                      status_line_bold(b"Write error: %m\x00" as *const u8 as *const libc::c_char);
                    }
                  } else if cnt as libc::c_long
                    == (*ptr_to_globals)
                      .end
                      .offset(-1)
                      .wrapping_offset_from((*ptr_to_globals).text)
                      as libc::c_long
                      + 1
                  {
                    (*ptr_to_globals).editing = 0 as smallint
                  }
                }
              } else {
                (*ptr_to_globals).editing = 0 as smallint
              }
              current_block = 15129665204879337069;
            }
            12960118908218882441 => {
              p = begin_line((*ptr_to_globals).dot);
              if *p.offset(-1i32 as isize) as libc::c_int == '\n' as i32 {
                dot_prev();
                current_block = 2087484904894455135;
              } else {
                dot_begin();
                (*ptr_to_globals).dot =
                  char_insert((*ptr_to_globals).dot, '\n' as i32 as libc::c_char, 1i32);
                dot_prev();
                current_block = 8629930936610358348;
              }
            }
            8720450212473544924 => {
              (*ptr_to_globals).dot = (*ptr_to_globals).screenbegin;
              cnt = 0;
              while (cnt as libc::c_uint)
                < (*ptr_to_globals)
                  .rows
                  .wrapping_sub(1i32 as libc::c_uint)
                  .wrapping_div(2i32 as libc::c_uint)
              {
                (*ptr_to_globals).dot = next_line((*ptr_to_globals).dot);
                cnt += 1
              }
              current_block = 15129665204879337069;
            }
            13015277209715431090 => {
              (*ptr_to_globals).dot = end_screen();
              if (*ptr_to_globals).cmdcnt as libc::c_uint
                > (*ptr_to_globals).rows.wrapping_sub(1i32 as libc::c_uint)
              {
                (*ptr_to_globals).cmdcnt =
                  (*ptr_to_globals).rows.wrapping_sub(1i32 as libc::c_uint) as libc::c_int
              }
              (*ptr_to_globals).cmdcnt -= 1;
              if (*ptr_to_globals).cmdcnt > 0 {
                do_cmd('-' as i32);
              }
              dot_begin();
              dot_skip_over_ws();
              current_block = 15129665204879337069;
            }
            9800435767766781385 => {
              loop {
                dot_end();
                if (*ptr_to_globals).dot < (*ptr_to_globals).end.offset(-1) {
                  undo_push(
                    (*ptr_to_globals).dot,
                    1i32 as libc::c_uint,
                    1i32 as libc::c_uchar,
                  );
                  let fresh15 = (*ptr_to_globals).dot;
                  (*ptr_to_globals).dot = (*ptr_to_globals).dot.offset(1);
                  *fresh15 = ' ' as i32 as libc::c_char;
                  undo_push(
                    (*ptr_to_globals).dot.offset(-1),
                    1i32 as libc::c_uint,
                    2i32 as libc::c_uchar,
                  );
                  while ({
                    let mut bb__isblank: libc::c_uchar = *(*ptr_to_globals).dot as libc::c_uchar;
                    (bb__isblank as libc::c_int == ' ' as i32
                      || bb__isblank as libc::c_int == '\t' as i32)
                      as libc::c_int
                  }) != 0
                  {
                    text_hole_delete((*ptr_to_globals).dot, (*ptr_to_globals).dot, 2i32);
                  }
                }
                (*ptr_to_globals).cmdcnt -= 1;
                if !((*ptr_to_globals).cmdcnt > 0) {
                  break;
                }
              }
              end_cmd_q();
              current_block = 15129665204879337069;
            }
            3432363526595694666 => {
              dot_begin();
              dot_skip_over_ws();
              current_block = 3268579060917229304;
            }
            3494829253343353619 => {
              (*ptr_to_globals).dot = (*ptr_to_globals).screenbegin;
              if (*ptr_to_globals).cmdcnt as libc::c_uint
                > (*ptr_to_globals).rows.wrapping_sub(1i32 as libc::c_uint)
              {
                (*ptr_to_globals).cmdcnt =
                  (*ptr_to_globals).rows.wrapping_sub(1i32 as libc::c_uint) as libc::c_int
              }
              (*ptr_to_globals).cmdcnt -= 1;
              if (*ptr_to_globals).cmdcnt > 0 {
                do_cmd('+' as i32);
              }
              dot_skip_over_ws();
              current_block = 15129665204879337069;
            }
            17973101765331640574 => {
              c1 = get_one_char();
              if c1 != 'g' as i32 {
                buf[0] = 'g' as i32 as libc::c_char;
                buf[1] = if c1 >= 0 { c1 } else { '*' as i32 } as libc::c_char;
                buf[2] = '\u{0}' as i32 as libc::c_char;
                not_implemented(buf.as_mut_ptr());
                current_block = 15129665204879337069;
              } else {
                if (*ptr_to_globals).cmdcnt == 0 {
                  (*ptr_to_globals).cmdcnt = 1i32
                }
                current_block = 11945623545738147997;
              }
            }
            16546625800574160972 => {
              save_dot = (*ptr_to_globals).dot;
              (*ptr_to_globals).dot = dollar_line((*ptr_to_globals).dot);
              (*ptr_to_globals).dot = yank_delete(
                save_dot,
                (*ptr_to_globals).dot,
                0,
                YANKDEL as libc::c_int,
                1i32,
              );
              if c == 'C' as i32 {
                current_block = 8629930936610358348;
              } else {
                if c == 'D' as i32 {
                  end_cmd_q();
                }
                current_block = 15129665204879337069;
              }
            }
            11937696639986586685 => {
              cnt = count_lines((*ptr_to_globals).text, (*ptr_to_globals).dot);
              c1 = get_one_char();
              find_range(&mut p, &mut q, c1 as libc::c_char);
              yank_delete(p, q, 1i32, YANKONLY as libc::c_int, 0);
              p = begin_line(p);
              q = end_line(q);
              i = count_lines(p, q);
              while i > 0 {
                if c == '<' as i32 {
                  if *p as libc::c_int == '\t' as i32 {
                    text_hole_delete(p, p, 0);
                  } else if *p as libc::c_int == ' ' as i32 {
                    j = 0;
                    while *p as libc::c_int == ' ' as i32 && j < (*ptr_to_globals).tabstop {
                      text_hole_delete(p, p, 0);
                      j += 1
                    }
                  }
                } else if c == '>' as i32 {
                  char_insert(p, '\t' as i32 as libc::c_char, 1i32);
                }
                i -= 1;
                p = next_line(p)
              }
              (*ptr_to_globals).dot = find_line(cnt);
              dot_skip_over_ws();
              end_cmd_q();
              current_block = 15129665204879337069;
            }
            17725350714912028156 => {
              p = get_input_line(b":\x00" as *const u8 as *const libc::c_char);
              colon(p);
              current_block = 15129665204879337069;
            }
            14526470074083880812 => {
              q = char_search(
                (*ptr_to_globals).dot,
                b"\n\n\x00" as *const u8 as *const libc::c_char,
                (FORWARD as libc::c_int) << 1i32 | FULL as libc::c_int,
              );
              if !q.is_null() {
                (*ptr_to_globals).dot = next_line(q)
              }
              current_block = 15129665204879337069;
            }
            8893187391306414141 => {
              q = char_search(
                (*ptr_to_globals).dot,
                b"\n\n\x00" as *const u8 as *const libc::c_char,
                ((BACK as libc::c_int as libc::c_uint) << 1i32
                  | FULL as libc::c_int as libc::c_uint) as libc::c_int,
              );
              if !q.is_null() {
                (*ptr_to_globals).dot = next_line(q)
              }
              current_block = 15129665204879337069;
            }
            7021673758293221412 => {
              dir = BACK as libc::c_int;
              p = (*ptr_to_globals).dot.offset(-1);
              if *(*ptr_to_globals).last_search_pattern.offset(0) as libc::c_int == '?' as i32 {
                dir = FORWARD as libc::c_int;
                p = (*ptr_to_globals).dot.offset(1)
              }
              current_block = 4166979493554389389;
            }
            18374191879090272823 => {
              buf[0] = c as libc::c_char;
              buf[1] = '\u{0}' as i32 as libc::c_char;
              q = get_input_line(buf.as_mut_ptr());
              if *q.offset(0) as libc::c_int != 0 && *q.offset(1) == 0 {
                if *(*ptr_to_globals).last_search_pattern.offset(0) != 0 {
                  *(*ptr_to_globals).last_search_pattern.offset(0) = c as libc::c_char
                }
                current_block = 7392824444931029276;
              } else if *q.offset(0) != 0 {
                free((*ptr_to_globals).last_search_pattern as *mut libc::c_void);
                (*ptr_to_globals).last_search_pattern = crate::libbb::xfuncs_printf::xstrdup(q);
                current_block = 7392824444931029276;
              } else {
                current_block = 15129665204879337069;
              }
            }
            16407828456666301883 => {
              if (*ptr_to_globals).last_forward_char == 0 {
                current_block = 15129665204879337069;
              } else {
                loop {
                  q = (*ptr_to_globals).dot.offset(-1);
                  while q >= (*ptr_to_globals).text
                    && *q as libc::c_int != '\n' as i32
                    && *q as libc::c_int != (*ptr_to_globals).last_forward_char
                  {
                    q = q.offset(-1)
                  }
                  if q >= (*ptr_to_globals).text
                    && *q as libc::c_int == (*ptr_to_globals).last_forward_char
                  {
                    (*ptr_to_globals).dot = q
                  }
                  (*ptr_to_globals).cmdcnt -= 1;
                  if !((*ptr_to_globals).cmdcnt > 0) {
                    break;
                  }
                }
                current_block = 15129665204879337069;
              }
            }
            9018432604062702004 => {
              q = (*ptr_to_globals).dot;
              while q < (*ptr_to_globals).end && *q as libc::c_int != '\n' as i32 {
                if !strchr(
                  b"()[]{}\x00" as *const u8 as *const libc::c_char,
                  *q as libc::c_int,
                )
                .is_null()
                {
                  p = find_pair(q, *q);
                  if p.is_null() {
                    indicate_error();
                  } else {
                    (*ptr_to_globals).dot = p
                  }
                  break;
                } else {
                  q = q.offset(1)
                }
              }
              if *q as libc::c_int == '\n' as i32 {
                indicate_error();
              }
              current_block = 15129665204879337069;
            }
            10247103787464459848 => {
              p = (*ptr_to_globals).reg[(*ptr_to_globals).YDreg as usize];
              if p.is_null() {
                status_line_bold(
                  b"Nothing in register %c\x00" as *const u8 as *const libc::c_char,
                  what_reg() as libc::c_int,
                );
              } else {
                if !strchr(p, '\n' as i32).is_null() {
                  if c == 'P' as i32 {
                    dot_begin();
                  }
                  if c == 'p' as i32 {
                    if end_line((*ptr_to_globals).dot) == (*ptr_to_globals).end.offset(-1) {
                      (*ptr_to_globals).dot = (*ptr_to_globals).end
                    } else {
                      dot_next();
                    }
                  }
                } else if c == 'p' as i32 {
                  dot_right();
                }
                string_insert((*ptr_to_globals).dot, p, 1i32);
                end_cmd_q();
              }
              current_block = 15129665204879337069;
            }
            15260732871948875843 => {
              c1 = (get_one_char() | 0x20i32) - 'a' as i32;
              if c1 as libc::c_uint <= 25i32 as libc::c_uint {
                (*ptr_to_globals).mark[c1 as usize] = (*ptr_to_globals).dot
              } else {
                indicate_error();
              }
              current_block = 15129665204879337069;
            }
            12738322036487086035 => {
              c1 = get_one_char() | 0x20i32;
              if (c1 - 'a' as i32) as libc::c_uint <= 25i32 as libc::c_uint {
                c1 = c1 - 'a' as i32;
                q = (*ptr_to_globals).mark[c1 as usize];
                if (*ptr_to_globals).text <= q && q < (*ptr_to_globals).end {
                  (*ptr_to_globals).dot = q;
                  dot_begin();
                  dot_skip_over_ws();
                }
              } else if c1 == '\'' as i32 {
                (*ptr_to_globals).dot = swap_context((*ptr_to_globals).dot);
                dot_begin();
                dot_skip_over_ws();
              } else {
                indicate_error();
              }
              current_block = 15129665204879337069;
            }
            13255096073384561358 => {
              c1 = (get_one_char() | 0x20i32) - 'a' as i32;
              if c1 as libc::c_uint <= 25i32 as libc::c_uint {
                (*ptr_to_globals).YDreg = c1 as smalluint
              } else {
                indicate_error();
              }
              current_block = 15129665204879337069;
            }
            10258711639984089377 => {
              if (*ptr_to_globals).cmd_mode as libc::c_int == 0 {
                indicate_error();
              }
              (*ptr_to_globals).cmd_mode = 0 as smallint;
              undo_queue_commit();
              end_cmd_q();
              (*ptr_to_globals).last_status_cksum = 0;
              current_block = 15129665204879337069;
            }
            11439127087547047736 => {
              buf[0] = c as libc::c_char;
              buf[1] = '\u{0}' as i32 as libc::c_char;
              not_implemented(buf.as_mut_ptr());
              end_cmd_q();
              current_block = 17440971994642376514;
            }
            7961798899781870241 => {
              dot_scroll(
                (*ptr_to_globals).rows.wrapping_sub(2i32 as libc::c_uint) as libc::c_int,
                -1i32,
              );
              current_block = 15129665204879337069;
            }
            9426343755402444879 => {
              dot_scroll(
                (*ptr_to_globals)
                  .rows
                  .wrapping_sub(2i32 as libc::c_uint)
                  .wrapping_div(2i32 as libc::c_uint) as libc::c_int,
                1i32,
              );
              current_block = 15129665204879337069;
            }
            13352459794680105913 => {
              dot_scroll(1i32, 1i32);
              current_block = 15129665204879337069;
            }
            14142272253464333006 => {
              dot_scroll(
                (*ptr_to_globals).rows.wrapping_sub(2i32 as libc::c_uint) as libc::c_int,
                1i32,
              );
              current_block = 15129665204879337069;
            }
            10758177197742640066 => {
              (*ptr_to_globals).last_status_cksum = 0;
              current_block = 15129665204879337069;
            }
            6152256259730122749 => {
              current_block = 7534742345255184552;
            }
            12883932598258173301 => {
              current_block = 8800996768013373992;
            }
            11242998110520238401 => {
              redraw(1i32);
              current_block = 15129665204879337069;
            }
            13619733043935729992 => {
              loop {
                dot_next();
                dot_skip_over_ws();
                (*ptr_to_globals).cmdcnt -= 1;
                if !((*ptr_to_globals).cmdcnt > 0) {
                  break;
                }
              }
              current_block = 15129665204879337069;
            }
            9339065157412720613 => {
              dot_scroll(
                (*ptr_to_globals)
                  .rows
                  .wrapping_sub(2i32 as libc::c_uint)
                  .wrapping_div(2i32 as libc::c_uint) as libc::c_int,
                -1i32,
              );
              current_block = 15129665204879337069;
            }
            11447082683497798022 => {
              dot_scroll(1i32, -1i32);
              current_block = 15129665204879337069;
            }
            5182000506326660482 => {
              current_block = 13993698454868426881;
            }
            1105010766850597332 => {
              if !(*ptr_to_globals).reg[27].is_null() {
                p = begin_line((*ptr_to_globals).dot);
                q = end_line((*ptr_to_globals).dot);
                p = text_hole_delete(p, q, 1i32);
                p = p.offset(string_insert(p, (*ptr_to_globals).reg[27], 2i32) as isize);
                (*ptr_to_globals).dot = p;
                dot_skip_over_ws();
              }
              current_block = 15129665204879337069;
            }
            8616046655533110204 => {
              undo_pop();
              current_block = 15129665204879337069;
            }
            5127767458142431603 => {
              loop {
                (*ptr_to_globals).dot = end_line((*ptr_to_globals).dot);
                (*ptr_to_globals).cmdcnt -= 1;
                if (*ptr_to_globals).cmdcnt <= 0 {
                  break;
                }
                dot_next();
              }
              current_block = 15129665204879337069;
            }
            222014967776118151 => {
              (*ptr_to_globals).last_forward_char = get_one_char();
              current_block = 7856905509180742666;
            }
            11209792479411604110 => {
              loop {
                dot_prev();
                dot_skip_over_ws();
                (*ptr_to_globals).cmdcnt -= 1;
                if !((*ptr_to_globals).cmdcnt > 0) {
                  break;
                }
              }
              current_block = 15129665204879337069;
            }
            3364823792826654116 => {
              if (*ptr_to_globals).lmc_len != 0 {
                (*ptr_to_globals).ioq_start = crate::libbb::xfuncs_printf::xstrndup(
                  (*ptr_to_globals).last_modifying_cmd.as_mut_ptr(),
                  (*ptr_to_globals).lmc_len,
                );
                (*ptr_to_globals).ioq = (*ptr_to_globals).ioq_start
              }
              current_block = 15129665204879337069;
            }
            18096603330221575131 => {
              current_block = 17498168302144015873;
            }
            16891123271837848903 => {
              dot_end();
              current_block = 1752638907092016026;
            }
            8517235759107662071 => {
              current_block = 5847749760081351726;
            }
            12525254419223051704 => {
              if (*ptr_to_globals).dot < (*ptr_to_globals).end.offset(-1) {
                (*ptr_to_globals).dot = yank_delete(
                  (*ptr_to_globals).dot,
                  (*ptr_to_globals).dot,
                  1i32,
                  YANKDEL as libc::c_int,
                  1i32,
                )
              }
              current_block = 15129665204879337069;
            }
            15232911949322867522 => {
              current_block = 17251831742223396249;
            }
            10863374208794025069 => {
              current_block = 1895262434596074581;
            }
            451126677064669119 => {
              loop {
                dot_prev();
                (*ptr_to_globals).dot = move_to_col(
                  (*ptr_to_globals).dot,
                  (*ptr_to_globals).ccol + (*ptr_to_globals).offset,
                );
                (*ptr_to_globals).cmdcnt -= 1;
                if !((*ptr_to_globals).cmdcnt > 0) {
                  break;
                }
              }
              current_block = 15129665204879337069;
            }
            4611735929166613116 => {
              loop {
                if bb_ascii_isalnum(*(*ptr_to_globals).dot as libc::c_uchar) != 0
                  || *(*ptr_to_globals).dot as libc::c_int == '_' as i32
                {
                  (*ptr_to_globals).dot = skip_thing(
                    (*ptr_to_globals).dot,
                    1i32,
                    FORWARD as libc::c_int,
                    S_END_ALNUM as libc::c_int,
                  )
                } else if *strchrnul(
                  b"!\"#$%&\'()*+,-./:;<=>?@[\\]^_`{|}~\x00" as *const u8 as *const libc::c_char,
                  *(*ptr_to_globals).dot as libc::c_int,
                )
                .offset(0)
                  != 0
                {
                  (*ptr_to_globals).dot = skip_thing(
                    (*ptr_to_globals).dot,
                    1i32,
                    FORWARD as libc::c_int,
                    S_END_PUNCT as libc::c_int,
                  )
                }
                if (*ptr_to_globals).dot < (*ptr_to_globals).end.offset(-1) {
                  (*ptr_to_globals).dot = (*ptr_to_globals).dot.offset(1)
                }
                if ({
                  let mut bb__isspace: libc::c_uchar =
                    (*(*ptr_to_globals).dot as libc::c_int - 9i32) as libc::c_uchar;
                  (bb__isspace as libc::c_int == ' ' as i32 - 9i32
                    || bb__isspace as libc::c_int <= 13i32 - 9i32) as libc::c_int
                }) != 0
                {
                  (*ptr_to_globals).dot = skip_thing(
                    (*ptr_to_globals).dot,
                    2i32,
                    FORWARD as libc::c_int,
                    S_OVER_WS as libc::c_int,
                  )
                }
                (*ptr_to_globals).cmdcnt -= 1;
                if !((*ptr_to_globals).cmdcnt > 0) {
                  break;
                }
              }
              current_block = 15129665204879337069;
            }
            4386451087681909888 => {
              (*ptr_to_globals).dot =
                move_to_col((*ptr_to_globals).dot, (*ptr_to_globals).cmdcnt - 1i32);
              current_block = 15129665204879337069;
            }
            1296397779060594135 => {
              dot_begin();
              current_block = 15129665204879337069;
            }
            _ => {}
          }
          match current_block {
            15129665204879337069 => {}
            8629930936610358348 => {}
            _ => {
              match current_block {
                17251831742223396249 => {
                  dir = 0;
                  if c == 'X' as i32 {
                    dir = -1i32
                  }
                  loop {
                    if *(*ptr_to_globals).dot.offset(dir as isize) as libc::c_int != '\n' as i32 {
                      if c == 'X' as i32 {
                        (*ptr_to_globals).dot = (*ptr_to_globals).dot.offset(-1)
                      }
                      (*ptr_to_globals).dot = yank_delete(
                        (*ptr_to_globals).dot,
                        (*ptr_to_globals).dot,
                        0,
                        YANKDEL as libc::c_int,
                        1i32,
                      )
                    }
                    (*ptr_to_globals).cmdcnt -= 1;
                    if !((*ptr_to_globals).cmdcnt > 0) {
                      break;
                    }
                  }
                  end_cmd_q();
                  if c == 's' as i32 {
                    current_block = 8629930936610358348;
                  } else {
                    current_block = 15129665204879337069;
                  }
                }
                2087484904894455135 => {
                  dot_end();
                  (*ptr_to_globals).dot =
                    char_insert((*ptr_to_globals).dot, '\n' as i32 as libc::c_char, 1i32);
                  current_block = 8629930936610358348;
                }
                11945623545738147997 => {
                  (*ptr_to_globals).dot = (*ptr_to_globals).end.offset(-1);
                  if (*ptr_to_globals).cmdcnt > 0 {
                    (*ptr_to_globals).dot = find_line((*ptr_to_globals).cmdcnt)
                  }
                  dot_skip_over_ws();
                  current_block = 15129665204879337069;
                }
                5847749760081351726 => {
                  dir = FORWARD as libc::c_int;
                  if c == 'B' as i32 {
                    dir = BACK as libc::c_int
                  }
                  loop {
                    if c == 'W' as i32
                      || ({
                        let mut bb__isspace: libc::c_uchar =
                          (*(*ptr_to_globals).dot.offset(dir as isize) as libc::c_int - 9i32)
                            as libc::c_uchar;
                        (bb__isspace as libc::c_int == ' ' as i32 - 9i32
                          || bb__isspace as libc::c_int <= 13i32 - 9i32)
                          as libc::c_int
                      }) != 0
                    {
                      (*ptr_to_globals).dot =
                        skip_thing((*ptr_to_globals).dot, 1i32, dir, S_TO_WS as libc::c_int);
                      (*ptr_to_globals).dot =
                        skip_thing((*ptr_to_globals).dot, 2i32, dir, S_OVER_WS as libc::c_int)
                    }
                    if c != 'W' as i32 {
                      (*ptr_to_globals).dot =
                        skip_thing((*ptr_to_globals).dot, 1i32, dir, S_BEFORE_WS as libc::c_int)
                    }
                    (*ptr_to_globals).cmdcnt -= 1;
                    if !((*ptr_to_globals).cmdcnt > 0) {
                      break;
                    }
                  }
                  current_block = 15129665204879337069;
                }
                17440971994642376514 => {
                  current_block = 15129665204879337069;
                }
                7534742345255184552 => {
                  current_block = 17247297260531395789;
                }
                8800996768013373992 => {
                  loop {
                    dot_next();
                    (*ptr_to_globals).dot = move_to_col(
                      (*ptr_to_globals).dot,
                      (*ptr_to_globals).ccol + (*ptr_to_globals).offset,
                    );
                    (*ptr_to_globals).cmdcnt -= 1;
                    if !((*ptr_to_globals).cmdcnt > 0) {
                      break;
                    }
                  }
                  current_block = 15129665204879337069;
                }
                13993698454868426881 => {
                  loop {
                    dot_right();
                    (*ptr_to_globals).cmdcnt -= 1;
                    if !((*ptr_to_globals).cmdcnt > 0) {
                      break;
                    }
                  }
                  current_block = 15129665204879337069;
                }
                7856905509180742666 => {
                  while !((*ptr_to_globals).last_forward_char == 0) {
                    q = (*ptr_to_globals).dot.offset(1);
                    while q < (*ptr_to_globals).end.offset(-1)
                      && *q as libc::c_int != '\n' as i32
                      && *q as libc::c_int != (*ptr_to_globals).last_forward_char
                    {
                      q = q.offset(1)
                    }
                    if *q as libc::c_int == (*ptr_to_globals).last_forward_char {
                      (*ptr_to_globals).dot = q
                    }
                    (*ptr_to_globals).cmdcnt -= 1;
                    if !((*ptr_to_globals).cmdcnt > 0) {
                      break;
                    }
                  }
                  current_block = 15129665204879337069;
                }
                17498168302144015873 => {
                  current_block = 8681395796513813967;
                }
                1752638907092016026 => {
                  if *(*ptr_to_globals).dot as libc::c_int != '\n' as i32 {
                    (*ptr_to_globals).dot = (*ptr_to_globals).dot.offset(1)
                  }
                  current_block = 8629930936610358348;
                }
                3268579060917229304 => {
                  current_block = 8629930936610358348;
                }
                1895262434596074581 => {
                  current_block = 8908416993177701018;
                }
                _ => {}
              }
              match current_block {
                8629930936610358348 => {}
                15129665204879337069 => {}
                _ => {
                  match current_block {
                    17247297260531395789 => {
                      loop {
                        dot_left();
                        (*ptr_to_globals).cmdcnt -= 1;
                        if !((*ptr_to_globals).cmdcnt > 0) {
                          break;
                        }
                      }
                      current_block = 15129665204879337069;
                    }
                    8681395796513813967 => {
                      current_block = 5591548203144509315;
                    }
                    8908416993177701018 => {
                      current_block = 16124761010012532485;
                    }
                    _ => {}
                  }
                  match current_block {
                    15129665204879337069 => {}
                    _ => {
                      match current_block {
                        16124761010012532485 => {
                          let mut yf: libc::c_int = 0;
                          let mut ml: libc::c_int = 0;
                          let mut whole: libc::c_int = 0;
                          yf = YANKDEL as libc::c_int;
                          if c == 'y' as i32 || c == 'Y' as i32 {
                            yf = YANKONLY as libc::c_int
                          }
                          c1 = 'y' as i32;
                          if c != 'Y' as i32 {
                            c1 = get_one_char()
                          }
                          ml = find_range(&mut p, &mut q, c1 as libc::c_char);
                          place_cursor(0i32, 0);
                          if c1 == 27i32 {
                            c1 = 27i32;
                            c = c1
                          } else if !strchr(b"wW\x00" as *const u8 as *const libc::c_char, c1)
                            .is_null()
                          {
                            ml = 0;
                            if c == 'c' as i32 {
                              while ({
                                let mut bb__isspace: libc::c_uchar =
                                  (*q as libc::c_int - 9i32) as libc::c_uchar;
                                (bb__isspace as libc::c_int == ' ' as i32 - 9i32
                                  || bb__isspace as libc::c_int <= 13i32 - 9i32)
                                  as libc::c_int
                              }) != 0
                                && q > p
                              {
                                q = q.offset(-1)
                              }
                            }
                            (*ptr_to_globals).dot = yank_delete(p, q, ml, yf, 1i32)
                          } else if !strchr(
                            b"^0bBeEft%$ lh\x08\x7f\x00" as *const u8 as *const libc::c_char,
                            c1,
                          )
                          .is_null()
                          {
                            (*ptr_to_globals).dot = yank_delete(p, q, ml, yf, 1i32)
                          } else if !strchr(
                            b"cdykjGHL+-{}\r\n\x00" as *const u8 as *const libc::c_char,
                            c1,
                          )
                          .is_null()
                          {
                            (*ptr_to_globals).dot = yank_delete(p, q, ml, yf, 1i32);
                            whole = 1i32
                          } else {
                            c1 = 27i32;
                            c = c1;
                            ml = 0;
                            indicate_error();
                          }
                          if ml != 0 && whole != 0 {
                            if c == 'c' as i32 {
                              (*ptr_to_globals).dot = char_insert(
                                (*ptr_to_globals).dot,
                                '\n' as i32 as libc::c_char,
                                2i32,
                              );
                              if whole != 0
                                && (*ptr_to_globals).dot != (*ptr_to_globals).end.offset(-1)
                              {
                                dot_prev();
                              }
                            } else if c == 'd' as i32 {
                              dot_begin();
                              dot_skip_over_ws();
                            }
                          }
                          if c1 != 27i32 {
                            if c == 'c' as i32 {
                              strcpy(
                                buf.as_mut_ptr(),
                                b"Change\x00" as *const u8 as *const libc::c_char,
                              );
                              current_block = 8629930936610358348;
                            } else {
                              if c == 'd' as i32 {
                                strcpy(
                                  buf.as_mut_ptr(),
                                  b"Delete\x00" as *const u8 as *const libc::c_char,
                                );
                              }
                              if c == 'y' as i32 || c == 'Y' as i32 {
                                strcpy(
                                  buf.as_mut_ptr(),
                                  b"Yank\x00" as *const u8 as *const libc::c_char,
                                );
                              }
                              p = (*ptr_to_globals).reg[(*ptr_to_globals).YDreg as usize];
                              q = p.offset(strlen(p) as isize);
                              cnt = 0;
                              while p <= q {
                                if *p as libc::c_int == '\n' as i32 {
                                  cnt += 1
                                }
                                p = p.offset(1)
                              }
                              status_line(
                                b"%s %u lines (%u chars) using [%c]\x00" as *const u8
                                  as *const libc::c_char,
                                buf.as_mut_ptr(),
                                cnt,
                                strlen((*ptr_to_globals).reg[(*ptr_to_globals).YDreg as usize])
                                  as libc::c_uint,
                                what_reg() as libc::c_int,
                              );
                              end_cmd_q();
                              current_block = 15129665204879337069;
                            }
                          } else {
                            current_block = 15129665204879337069;
                          }
                        }
                        5591548203144509315 => {
                          current_block = 2636677179867529885;
                        }
                        _ => {}
                      }
                      match current_block {
                        15129665204879337069 => {}
                        8629930936610358348 => {}
                        _ => {
                          match current_block {
                            2636677179867529885 => {
                              current_block = 12309206730560524281;
                            }
                            _ => {}
                          }
                          match current_block {
                            12309206730560524281 => {
                              current_block = 3325768110057758661;
                            }
                            _ => {}
                          }
                          match current_block {
                            3325768110057758661 => {
                              current_block = 14815832896553429982;
                            }
                            _ => {}
                          }
                          match current_block {
                            14815832896553429982 => {
                              current_block = 10731695520297161438;
                            }
                            _ => {}
                          }
                          match current_block {
                            10731695520297161438 => {
                              if c == '0' as i32 && (*ptr_to_globals).cmdcnt < 1i32 {
                                dot_begin();
                              } else {
                                (*ptr_to_globals).cmdcnt =
                                  (*ptr_to_globals).cmdcnt * 10i32 + (c - '0' as i32)
                              }
                              current_block = 15129665204879337069;
                            }
                            _ => {}
                          }
                          match current_block {
                            15129665204879337069 => {}
                            _ => {
                              loop {
                                match current_block {
                                  16813369756331276724 => {
                                    msg = std::ptr::null();
                                    current_block = 7392824444931029276;
                                  }
                                  7392824444931029276 => {
                                    dir = FORWARD as libc::c_int;
                                    p = (*ptr_to_globals).dot.offset(1);
                                    if *(*ptr_to_globals).last_search_pattern.offset(0)
                                      as libc::c_int
                                      == '?' as i32
                                    {
                                      dir = BACK as libc::c_int;
                                      p = (*ptr_to_globals).dot.offset(-1)
                                    }
                                    current_block = 4166979493554389389;
                                  }
                                  _ => {
                                    q = char_search(
                                      p,
                                      (*ptr_to_globals).last_search_pattern.offset(1),
                                      dir << 1i32 | FULL as libc::c_int,
                                    );
                                    if !q.is_null() {
                                      (*ptr_to_globals).dot = q;
                                      msg = std::ptr::null()
                                    } else {
                                      p = (*ptr_to_globals).text;
                                      if dir == BACK as libc::c_int {
                                        p = (*ptr_to_globals).end.offset(-1)
                                      }
                                      q = char_search(
                                        p,
                                        (*ptr_to_globals).last_search_pattern.offset(1),
                                        dir << 1i32 | FULL as libc::c_int,
                                      );
                                      if !q.is_null() {
                                        (*ptr_to_globals).dot = q;
                                        msg = b"search hit BOTTOM, continuing at TOP\x00"
                                          as *const u8
                                          as *const libc::c_char;
                                        if dir == BACK as libc::c_int {
                                          msg = b"search hit TOP, continuing at BOTTOM\x00"
                                            as *const u8
                                            as *const libc::c_char
                                        }
                                      } else {
                                        msg = b"Pattern not found\x00" as *const u8
                                          as *const libc::c_char
                                      }
                                    }
                                    if !msg.is_null() {
                                      status_line_bold(
                                        b"%s\x00" as *const u8 as *const libc::c_char,
                                        msg,
                                      );
                                    }
                                    (*ptr_to_globals).cmdcnt -= 1;
                                    if (*ptr_to_globals).cmdcnt > 0 {
                                      current_block = 16813369756331276724;
                                    } else {
                                      break;
                                    }
                                  }
                                }
                              }
                              current_block = 15129665204879337069;
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
        27 => {
          current_block = 10258711639984089377;
          match current_block {
            16992905640583886232 => {
              loop {
                if (*(*ptr_to_globals).dot as libc::c_int - 'a' as i32) as libc::c_uchar
                  as libc::c_int
                  <= 'z' as i32 - 'a' as i32
                {
                  undo_push(
                    (*ptr_to_globals).dot,
                    1i32 as libc::c_uint,
                    1i32 as libc::c_uchar,
                  );
                  *(*ptr_to_globals).dot =
                    bb_ascii_toupper(*(*ptr_to_globals).dot as libc::c_uchar) as libc::c_char;
                  undo_push(
                    (*ptr_to_globals).dot,
                    1i32 as libc::c_uint,
                    2i32 as libc::c_uchar,
                  );
                } else if (*(*ptr_to_globals).dot as libc::c_int - 'A' as i32) as libc::c_uchar
                  as libc::c_int
                  <= 'Z' as i32 - 'A' as i32
                {
                  undo_push(
                    (*ptr_to_globals).dot,
                    1i32 as libc::c_uint,
                    1i32 as libc::c_uchar,
                  );
                  *(*ptr_to_globals).dot =
                    bb_ascii_tolower(*(*ptr_to_globals).dot as libc::c_uchar) as libc::c_char;
                  undo_push(
                    (*ptr_to_globals).dot,
                    1i32 as libc::c_uint,
                    2i32 as libc::c_uchar,
                  );
                }
                dot_right();
                (*ptr_to_globals).cmdcnt -= 1;
                if !((*ptr_to_globals).cmdcnt > 0) {
                  break;
                }
              }
              end_cmd_q();
              current_block = 15129665204879337069;
            }
            8729655159604064397 => {
              c1 = get_one_char();
              cnt = 0;
              if c1 == '.' as i32 {
                cnt = (*ptr_to_globals)
                  .rows
                  .wrapping_sub(2i32 as libc::c_uint)
                  .wrapping_div(2i32 as libc::c_uint) as libc::c_int
              }
              if c1 == '-' as i32 {
                cnt = (*ptr_to_globals).rows.wrapping_sub(2i32 as libc::c_uint) as libc::c_int
              }
              (*ptr_to_globals).screenbegin = begin_line((*ptr_to_globals).dot);
              dot_scroll(cnt, -1i32);
              current_block = 15129665204879337069;
            }
            15899500648299942075 => {
              (*ptr_to_globals).last_forward_char = get_one_char();
              do_cmd(';' as i32);
              if *(*ptr_to_globals).dot as libc::c_int == (*ptr_to_globals).last_forward_char {
                dot_left();
              }
              (*ptr_to_globals).last_forward_char = 0;
              current_block = 15129665204879337069;
            }
            9051390181078481641 => {
              c1 = get_one_char();
              if *(*ptr_to_globals).dot as libc::c_int != '\n' as i32 {
                (*ptr_to_globals).dot =
                  text_hole_delete((*ptr_to_globals).dot, (*ptr_to_globals).dot, 1i32);
                (*ptr_to_globals).dot =
                  char_insert((*ptr_to_globals).dot, c1 as libc::c_char, 2i32);
                dot_left();
              }
              end_cmd_q();
              current_block = 15129665204879337069;
            }
            877115918601926659 => {
              dir = FORWARD as libc::c_int;
              if c == 'b' as i32 {
                dir = BACK as libc::c_int
              }
              while !((*ptr_to_globals).dot.offset(dir as isize) < (*ptr_to_globals).text
                || (*ptr_to_globals).dot.offset(dir as isize) > (*ptr_to_globals).end.offset(-1))
              {
                (*ptr_to_globals).dot = (*ptr_to_globals).dot.offset(dir as isize);
                if ({
                  let mut bb__isspace: libc::c_uchar =
                    (*(*ptr_to_globals).dot as libc::c_int - 9i32) as libc::c_uchar;
                  (bb__isspace as libc::c_int == ' ' as i32 - 9i32
                    || bb__isspace as libc::c_int <= 13i32 - 9i32) as libc::c_int
                }) != 0
                {
                  (*ptr_to_globals).dot = skip_thing(
                    (*ptr_to_globals).dot,
                    if c == 'e' as i32 { 2i32 } else { 1i32 },
                    dir,
                    S_OVER_WS as libc::c_int,
                  )
                }
                if bb_ascii_isalnum(*(*ptr_to_globals).dot as libc::c_uchar) != 0
                  || *(*ptr_to_globals).dot as libc::c_int == '_' as i32
                {
                  (*ptr_to_globals).dot =
                    skip_thing((*ptr_to_globals).dot, 1i32, dir, S_END_ALNUM as libc::c_int)
                } else if *strchrnul(
                  b"!\"#$%&\'()*+,-./:;<=>?@[\\]^_`{|}~\x00" as *const u8 as *const libc::c_char,
                  *(*ptr_to_globals).dot as libc::c_int,
                )
                .offset(0)
                  != 0
                {
                  (*ptr_to_globals).dot =
                    skip_thing((*ptr_to_globals).dot, 1i32, dir, S_END_PUNCT as libc::c_int)
                }
                (*ptr_to_globals).cmdcnt -= 1;
                if !((*ptr_to_globals).cmdcnt > 0) {
                  break;
                }
              }
              current_block = 15129665204879337069;
            }
            1085022737867179637 => {
              dot_begin();
              dot_skip_over_ws();
              current_block = 15129665204879337069;
            }
            3113147720494587438 => {
              c1 = get_one_char();
              if c1 != 'Z' as i32 {
                indicate_error();
              } else if (*ptr_to_globals).modified_count != 0 {
                if 1i32 != 0 && (*ptr_to_globals).readonly_mode as libc::c_int != 0 {
                  status_line_bold(
                    b"\'%s\' is read only\x00" as *const u8 as *const libc::c_char,
                    (*ptr_to_globals).current_filename,
                  );
                } else {
                  cnt = file_write(
                    (*ptr_to_globals).current_filename,
                    (*ptr_to_globals).text,
                    (*ptr_to_globals).end.offset(-1),
                  );
                  if cnt < 0 {
                    if cnt == -1i32 {
                      status_line_bold(b"Write error: %m\x00" as *const u8 as *const libc::c_char);
                    }
                  } else if cnt as libc::c_long
                    == (*ptr_to_globals)
                      .end
                      .offset(-1)
                      .wrapping_offset_from((*ptr_to_globals).text)
                      as libc::c_long
                      + 1
                  {
                    (*ptr_to_globals).editing = 0 as smallint
                  }
                }
              } else {
                (*ptr_to_globals).editing = 0 as smallint
              }
              current_block = 15129665204879337069;
            }
            12960118908218882441 => {
              p = begin_line((*ptr_to_globals).dot);
              if *p.offset(-1i32 as isize) as libc::c_int == '\n' as i32 {
                dot_prev();
                current_block = 2087484904894455135;
              } else {
                dot_begin();
                (*ptr_to_globals).dot =
                  char_insert((*ptr_to_globals).dot, '\n' as i32 as libc::c_char, 1i32);
                dot_prev();
                current_block = 8629930936610358348;
              }
            }
            8720450212473544924 => {
              (*ptr_to_globals).dot = (*ptr_to_globals).screenbegin;
              cnt = 0;
              while (cnt as libc::c_uint)
                < (*ptr_to_globals)
                  .rows
                  .wrapping_sub(1i32 as libc::c_uint)
                  .wrapping_div(2i32 as libc::c_uint)
              {
                (*ptr_to_globals).dot = next_line((*ptr_to_globals).dot);
                cnt += 1
              }
              current_block = 15129665204879337069;
            }
            13015277209715431090 => {
              (*ptr_to_globals).dot = end_screen();
              if (*ptr_to_globals).cmdcnt as libc::c_uint
                > (*ptr_to_globals).rows.wrapping_sub(1i32 as libc::c_uint)
              {
                (*ptr_to_globals).cmdcnt =
                  (*ptr_to_globals).rows.wrapping_sub(1i32 as libc::c_uint) as libc::c_int
              }
              (*ptr_to_globals).cmdcnt -= 1;
              if (*ptr_to_globals).cmdcnt > 0 {
                do_cmd('-' as i32);
              }
              dot_begin();
              dot_skip_over_ws();
              current_block = 15129665204879337069;
            }
            9800435767766781385 => {
              loop {
                dot_end();
                if (*ptr_to_globals).dot < (*ptr_to_globals).end.offset(-1) {
                  undo_push(
                    (*ptr_to_globals).dot,
                    1i32 as libc::c_uint,
                    1i32 as libc::c_uchar,
                  );
                  let fresh15 = (*ptr_to_globals).dot;
                  (*ptr_to_globals).dot = (*ptr_to_globals).dot.offset(1);
                  *fresh15 = ' ' as i32 as libc::c_char;
                  undo_push(
                    (*ptr_to_globals).dot.offset(-1),
                    1i32 as libc::c_uint,
                    2i32 as libc::c_uchar,
                  );
                  while ({
                    let mut bb__isblank: libc::c_uchar = *(*ptr_to_globals).dot as libc::c_uchar;
                    (bb__isblank as libc::c_int == ' ' as i32
                      || bb__isblank as libc::c_int == '\t' as i32)
                      as libc::c_int
                  }) != 0
                  {
                    text_hole_delete((*ptr_to_globals).dot, (*ptr_to_globals).dot, 2i32);
                  }
                }
                (*ptr_to_globals).cmdcnt -= 1;
                if !((*ptr_to_globals).cmdcnt > 0) {
                  break;
                }
              }
              end_cmd_q();
              current_block = 15129665204879337069;
            }
            3432363526595694666 => {
              dot_begin();
              dot_skip_over_ws();
              current_block = 3268579060917229304;
            }
            3494829253343353619 => {
              (*ptr_to_globals).dot = (*ptr_to_globals).screenbegin;
              if (*ptr_to_globals).cmdcnt as libc::c_uint
                > (*ptr_to_globals).rows.wrapping_sub(1i32 as libc::c_uint)
              {
                (*ptr_to_globals).cmdcnt =
                  (*ptr_to_globals).rows.wrapping_sub(1i32 as libc::c_uint) as libc::c_int
              }
              (*ptr_to_globals).cmdcnt -= 1;
              if (*ptr_to_globals).cmdcnt > 0 {
                do_cmd('+' as i32);
              }
              dot_skip_over_ws();
              current_block = 15129665204879337069;
            }
            17973101765331640574 => {
              c1 = get_one_char();
              if c1 != 'g' as i32 {
                buf[0] = 'g' as i32 as libc::c_char;
                buf[1] = if c1 >= 0 { c1 } else { '*' as i32 } as libc::c_char;
                buf[2] = '\u{0}' as i32 as libc::c_char;
                not_implemented(buf.as_mut_ptr());
                current_block = 15129665204879337069;
              } else {
                if (*ptr_to_globals).cmdcnt == 0 {
                  (*ptr_to_globals).cmdcnt = 1i32
                }
                current_block = 11945623545738147997;
              }
            }
            16546625800574160972 => {
              save_dot = (*ptr_to_globals).dot;
              (*ptr_to_globals).dot = dollar_line((*ptr_to_globals).dot);
              (*ptr_to_globals).dot = yank_delete(
                save_dot,
                (*ptr_to_globals).dot,
                0,
                YANKDEL as libc::c_int,
                1i32,
              );
              if c == 'C' as i32 {
                current_block = 8629930936610358348;
              } else {
                if c == 'D' as i32 {
                  end_cmd_q();
                }
                current_block = 15129665204879337069;
              }
            }
            11937696639986586685 => {
              cnt = count_lines((*ptr_to_globals).text, (*ptr_to_globals).dot);
              c1 = get_one_char();
              find_range(&mut p, &mut q, c1 as libc::c_char);
              yank_delete(p, q, 1i32, YANKONLY as libc::c_int, 0);
              p = begin_line(p);
              q = end_line(q);
              i = count_lines(p, q);
              while i > 0 {
                if c == '<' as i32 {
                  if *p as libc::c_int == '\t' as i32 {
                    text_hole_delete(p, p, 0);
                  } else if *p as libc::c_int == ' ' as i32 {
                    j = 0;
                    while *p as libc::c_int == ' ' as i32 && j < (*ptr_to_globals).tabstop {
                      text_hole_delete(p, p, 0);
                      j += 1
                    }
                  }
                } else if c == '>' as i32 {
                  char_insert(p, '\t' as i32 as libc::c_char, 1i32);
                }
                i -= 1;
                p = next_line(p)
              }
              (*ptr_to_globals).dot = find_line(cnt);
              dot_skip_over_ws();
              end_cmd_q();
              current_block = 15129665204879337069;
            }
            17725350714912028156 => {
              p = get_input_line(b":\x00" as *const u8 as *const libc::c_char);
              colon(p);
              current_block = 15129665204879337069;
            }
            14526470074083880812 => {
              q = char_search(
                (*ptr_to_globals).dot,
                b"\n\n\x00" as *const u8 as *const libc::c_char,
                (FORWARD as libc::c_int) << 1i32 | FULL as libc::c_int,
              );
              if !q.is_null() {
                (*ptr_to_globals).dot = next_line(q)
              }
              current_block = 15129665204879337069;
            }
            8893187391306414141 => {
              q = char_search(
                (*ptr_to_globals).dot,
                b"\n\n\x00" as *const u8 as *const libc::c_char,
                ((BACK as libc::c_int as libc::c_uint) << 1i32
                  | FULL as libc::c_int as libc::c_uint) as libc::c_int,
              );
              if !q.is_null() {
                (*ptr_to_globals).dot = next_line(q)
              }
              current_block = 15129665204879337069;
            }
            7021673758293221412 => {
              dir = BACK as libc::c_int;
              p = (*ptr_to_globals).dot.offset(-1);
              if *(*ptr_to_globals).last_search_pattern.offset(0) as libc::c_int == '?' as i32 {
                dir = FORWARD as libc::c_int;
                p = (*ptr_to_globals).dot.offset(1)
              }
              current_block = 4166979493554389389;
            }
            18374191879090272823 => {
              buf[0] = c as libc::c_char;
              buf[1] = '\u{0}' as i32 as libc::c_char;
              q = get_input_line(buf.as_mut_ptr());
              if *q.offset(0) as libc::c_int != 0 && *q.offset(1) == 0 {
                if *(*ptr_to_globals).last_search_pattern.offset(0) != 0 {
                  *(*ptr_to_globals).last_search_pattern.offset(0) = c as libc::c_char
                }
                current_block = 7392824444931029276;
              } else if *q.offset(0) != 0 {
                free((*ptr_to_globals).last_search_pattern as *mut libc::c_void);
                (*ptr_to_globals).last_search_pattern = crate::libbb::xfuncs_printf::xstrdup(q);
                current_block = 7392824444931029276;
              } else {
                current_block = 15129665204879337069;
              }
            }
            16407828456666301883 => {
              if (*ptr_to_globals).last_forward_char == 0 {
                current_block = 15129665204879337069;
              } else {
                loop {
                  q = (*ptr_to_globals).dot.offset(-1);
                  while q >= (*ptr_to_globals).text
                    && *q as libc::c_int != '\n' as i32
                    && *q as libc::c_int != (*ptr_to_globals).last_forward_char
                  {
                    q = q.offset(-1)
                  }
                  if q >= (*ptr_to_globals).text
                    && *q as libc::c_int == (*ptr_to_globals).last_forward_char
                  {
                    (*ptr_to_globals).dot = q
                  }
                  (*ptr_to_globals).cmdcnt -= 1;
                  if !((*ptr_to_globals).cmdcnt > 0) {
                    break;
                  }
                }
                current_block = 15129665204879337069;
              }
            }
            9018432604062702004 => {
              q = (*ptr_to_globals).dot;
              while q < (*ptr_to_globals).end && *q as libc::c_int != '\n' as i32 {
                if !strchr(
                  b"()[]{}\x00" as *const u8 as *const libc::c_char,
                  *q as libc::c_int,
                )
                .is_null()
                {
                  p = find_pair(q, *q);
                  if p.is_null() {
                    indicate_error();
                  } else {
                    (*ptr_to_globals).dot = p
                  }
                  break;
                } else {
                  q = q.offset(1)
                }
              }
              if *q as libc::c_int == '\n' as i32 {
                indicate_error();
              }
              current_block = 15129665204879337069;
            }
            10247103787464459848 => {
              p = (*ptr_to_globals).reg[(*ptr_to_globals).YDreg as usize];
              if p.is_null() {
                status_line_bold(
                  b"Nothing in register %c\x00" as *const u8 as *const libc::c_char,
                  what_reg() as libc::c_int,
                );
              } else {
                if !strchr(p, '\n' as i32).is_null() {
                  if c == 'P' as i32 {
                    dot_begin();
                  }
                  if c == 'p' as i32 {
                    if end_line((*ptr_to_globals).dot) == (*ptr_to_globals).end.offset(-1) {
                      (*ptr_to_globals).dot = (*ptr_to_globals).end
                    } else {
                      dot_next();
                    }
                  }
                } else if c == 'p' as i32 {
                  dot_right();
                }
                string_insert((*ptr_to_globals).dot, p, 1i32);
                end_cmd_q();
              }
              current_block = 15129665204879337069;
            }
            15260732871948875843 => {
              c1 = (get_one_char() | 0x20i32) - 'a' as i32;
              if c1 as libc::c_uint <= 25i32 as libc::c_uint {
                (*ptr_to_globals).mark[c1 as usize] = (*ptr_to_globals).dot
              } else {
                indicate_error();
              }
              current_block = 15129665204879337069;
            }
            12738322036487086035 => {
              c1 = get_one_char() | 0x20i32;
              if (c1 - 'a' as i32) as libc::c_uint <= 25i32 as libc::c_uint {
                c1 = c1 - 'a' as i32;
                q = (*ptr_to_globals).mark[c1 as usize];
                if (*ptr_to_globals).text <= q && q < (*ptr_to_globals).end {
                  (*ptr_to_globals).dot = q;
                  dot_begin();
                  dot_skip_over_ws();
                }
              } else if c1 == '\'' as i32 {
                (*ptr_to_globals).dot = swap_context((*ptr_to_globals).dot);
                dot_begin();
                dot_skip_over_ws();
              } else {
                indicate_error();
              }
              current_block = 15129665204879337069;
            }
            13255096073384561358 => {
              c1 = (get_one_char() | 0x20i32) - 'a' as i32;
              if c1 as libc::c_uint <= 25i32 as libc::c_uint {
                (*ptr_to_globals).YDreg = c1 as smalluint
              } else {
                indicate_error();
              }
              current_block = 15129665204879337069;
            }
            10258711639984089377 => {
              if (*ptr_to_globals).cmd_mode as libc::c_int == 0 {
                indicate_error();
              }
              (*ptr_to_globals).cmd_mode = 0 as smallint;
              undo_queue_commit();
              end_cmd_q();
              (*ptr_to_globals).last_status_cksum = 0;
              current_block = 15129665204879337069;
            }
            11439127087547047736 => {
              buf[0] = c as libc::c_char;
              buf[1] = '\u{0}' as i32 as libc::c_char;
              not_implemented(buf.as_mut_ptr());
              end_cmd_q();
              current_block = 17440971994642376514;
            }
            7961798899781870241 => {
              dot_scroll(
                (*ptr_to_globals).rows.wrapping_sub(2i32 as libc::c_uint) as libc::c_int,
                -1i32,
              );
              current_block = 15129665204879337069;
            }
            9426343755402444879 => {
              dot_scroll(
                (*ptr_to_globals)
                  .rows
                  .wrapping_sub(2i32 as libc::c_uint)
                  .wrapping_div(2i32 as libc::c_uint) as libc::c_int,
                1i32,
              );
              current_block = 15129665204879337069;
            }
            13352459794680105913 => {
              dot_scroll(1i32, 1i32);
              current_block = 15129665204879337069;
            }
            14142272253464333006 => {
              dot_scroll(
                (*ptr_to_globals).rows.wrapping_sub(2i32 as libc::c_uint) as libc::c_int,
                1i32,
              );
              current_block = 15129665204879337069;
            }
            10758177197742640066 => {
              (*ptr_to_globals).last_status_cksum = 0;
              current_block = 15129665204879337069;
            }
            6152256259730122749 => {
              current_block = 7534742345255184552;
            }
            12883932598258173301 => {
              current_block = 8800996768013373992;
            }
            11242998110520238401 => {
              redraw(1i32);
              current_block = 15129665204879337069;
            }
            13619733043935729992 => {
              loop {
                dot_next();
                dot_skip_over_ws();
                (*ptr_to_globals).cmdcnt -= 1;
                if !((*ptr_to_globals).cmdcnt > 0) {
                  break;
                }
              }
              current_block = 15129665204879337069;
            }
            9339065157412720613 => {
              dot_scroll(
                (*ptr_to_globals)
                  .rows
                  .wrapping_sub(2i32 as libc::c_uint)
                  .wrapping_div(2i32 as libc::c_uint) as libc::c_int,
                -1i32,
              );
              current_block = 15129665204879337069;
            }
            11447082683497798022 => {
              dot_scroll(1i32, -1i32);
              current_block = 15129665204879337069;
            }
            5182000506326660482 => {
              current_block = 13993698454868426881;
            }
            1105010766850597332 => {
              if !(*ptr_to_globals).reg[27].is_null() {
                p = begin_line((*ptr_to_globals).dot);
                q = end_line((*ptr_to_globals).dot);
                p = text_hole_delete(p, q, 1i32);
                p = p.offset(string_insert(p, (*ptr_to_globals).reg[27], 2i32) as isize);
                (*ptr_to_globals).dot = p;
                dot_skip_over_ws();
              }
              current_block = 15129665204879337069;
            }
            8616046655533110204 => {
              undo_pop();
              current_block = 15129665204879337069;
            }
            5127767458142431603 => {
              loop {
                (*ptr_to_globals).dot = end_line((*ptr_to_globals).dot);
                (*ptr_to_globals).cmdcnt -= 1;
                if (*ptr_to_globals).cmdcnt <= 0 {
                  break;
                }
                dot_next();
              }
              current_block = 15129665204879337069;
            }
            222014967776118151 => {
              (*ptr_to_globals).last_forward_char = get_one_char();
              current_block = 7856905509180742666;
            }
            11209792479411604110 => {
              loop {
                dot_prev();
                dot_skip_over_ws();
                (*ptr_to_globals).cmdcnt -= 1;
                if !((*ptr_to_globals).cmdcnt > 0) {
                  break;
                }
              }
              current_block = 15129665204879337069;
            }
            3364823792826654116 => {
              if (*ptr_to_globals).lmc_len != 0 {
                (*ptr_to_globals).ioq_start = crate::libbb::xfuncs_printf::xstrndup(
                  (*ptr_to_globals).last_modifying_cmd.as_mut_ptr(),
                  (*ptr_to_globals).lmc_len,
                );
                (*ptr_to_globals).ioq = (*ptr_to_globals).ioq_start
              }
              current_block = 15129665204879337069;
            }
            18096603330221575131 => {
              current_block = 17498168302144015873;
            }
            16891123271837848903 => {
              dot_end();
              current_block = 1752638907092016026;
            }
            8517235759107662071 => {
              current_block = 5847749760081351726;
            }
            12525254419223051704 => {
              if (*ptr_to_globals).dot < (*ptr_to_globals).end.offset(-1) {
                (*ptr_to_globals).dot = yank_delete(
                  (*ptr_to_globals).dot,
                  (*ptr_to_globals).dot,
                  1i32,
                  YANKDEL as libc::c_int,
                  1i32,
                )
              }
              current_block = 15129665204879337069;
            }
            15232911949322867522 => {
              current_block = 17251831742223396249;
            }
            10863374208794025069 => {
              current_block = 1895262434596074581;
            }
            451126677064669119 => {
              loop {
                dot_prev();
                (*ptr_to_globals).dot = move_to_col(
                  (*ptr_to_globals).dot,
                  (*ptr_to_globals).ccol + (*ptr_to_globals).offset,
                );
                (*ptr_to_globals).cmdcnt -= 1;
                if !((*ptr_to_globals).cmdcnt > 0) {
                  break;
                }
              }
              current_block = 15129665204879337069;
            }
            4611735929166613116 => {
              loop {
                if bb_ascii_isalnum(*(*ptr_to_globals).dot as libc::c_uchar) != 0
                  || *(*ptr_to_globals).dot as libc::c_int == '_' as i32
                {
                  (*ptr_to_globals).dot = skip_thing(
                    (*ptr_to_globals).dot,
                    1i32,
                    FORWARD as libc::c_int,
                    S_END_ALNUM as libc::c_int,
                  )
                } else if *strchrnul(
                  b"!\"#$%&\'()*+,-./:;<=>?@[\\]^_`{|}~\x00" as *const u8 as *const libc::c_char,
                  *(*ptr_to_globals).dot as libc::c_int,
                )
                .offset(0)
                  != 0
                {
                  (*ptr_to_globals).dot = skip_thing(
                    (*ptr_to_globals).dot,
                    1i32,
                    FORWARD as libc::c_int,
                    S_END_PUNCT as libc::c_int,
                  )
                }
                if (*ptr_to_globals).dot < (*ptr_to_globals).end.offset(-1) {
                  (*ptr_to_globals).dot = (*ptr_to_globals).dot.offset(1)
                }
                if ({
                  let mut bb__isspace: libc::c_uchar =
                    (*(*ptr_to_globals).dot as libc::c_int - 9i32) as libc::c_uchar;
                  (bb__isspace as libc::c_int == ' ' as i32 - 9i32
                    || bb__isspace as libc::c_int <= 13i32 - 9i32) as libc::c_int
                }) != 0
                {
                  (*ptr_to_globals).dot = skip_thing(
                    (*ptr_to_globals).dot,
                    2i32,
                    FORWARD as libc::c_int,
                    S_OVER_WS as libc::c_int,
                  )
                }
                (*ptr_to_globals).cmdcnt -= 1;
                if !((*ptr_to_globals).cmdcnt > 0) {
                  break;
                }
              }
              current_block = 15129665204879337069;
            }
            4386451087681909888 => {
              (*ptr_to_globals).dot =
                move_to_col((*ptr_to_globals).dot, (*ptr_to_globals).cmdcnt - 1i32);
              current_block = 15129665204879337069;
            }
            1296397779060594135 => {
              dot_begin();
              current_block = 15129665204879337069;
            }
            _ => {}
          }
          match current_block {
            15129665204879337069 => {}
            8629930936610358348 => {}
            _ => {
              match current_block {
                17251831742223396249 => {
                  dir = 0;
                  if c == 'X' as i32 {
                    dir = -1i32
                  }
                  loop {
                    if *(*ptr_to_globals).dot.offset(dir as isize) as libc::c_int != '\n' as i32 {
                      if c == 'X' as i32 {
                        (*ptr_to_globals).dot = (*ptr_to_globals).dot.offset(-1)
                      }
                      (*ptr_to_globals).dot = yank_delete(
                        (*ptr_to_globals).dot,
                        (*ptr_to_globals).dot,
                        0,
                        YANKDEL as libc::c_int,
                        1i32,
                      )
                    }
                    (*ptr_to_globals).cmdcnt -= 1;
                    if !((*ptr_to_globals).cmdcnt > 0) {
                      break;
                    }
                  }
                  end_cmd_q();
                  if c == 's' as i32 {
                    current_block = 8629930936610358348;
                  } else {
                    current_block = 15129665204879337069;
                  }
                }
                2087484904894455135 => {
                  dot_end();
                  (*ptr_to_globals).dot =
                    char_insert((*ptr_to_globals).dot, '\n' as i32 as libc::c_char, 1i32);
                  current_block = 8629930936610358348;
                }
                11945623545738147997 => {
                  (*ptr_to_globals).dot = (*ptr_to_globals).end.offset(-1);
                  if (*ptr_to_globals).cmdcnt > 0 {
                    (*ptr_to_globals).dot = find_line((*ptr_to_globals).cmdcnt)
                  }
                  dot_skip_over_ws();
                  current_block = 15129665204879337069;
                }
                5847749760081351726 => {
                  dir = FORWARD as libc::c_int;
                  if c == 'B' as i32 {
                    dir = BACK as libc::c_int
                  }
                  loop {
                    if c == 'W' as i32
                      || ({
                        let mut bb__isspace: libc::c_uchar =
                          (*(*ptr_to_globals).dot.offset(dir as isize) as libc::c_int - 9i32)
                            as libc::c_uchar;
                        (bb__isspace as libc::c_int == ' ' as i32 - 9i32
                          || bb__isspace as libc::c_int <= 13i32 - 9i32)
                          as libc::c_int
                      }) != 0
                    {
                      (*ptr_to_globals).dot =
                        skip_thing((*ptr_to_globals).dot, 1i32, dir, S_TO_WS as libc::c_int);
                      (*ptr_to_globals).dot =
                        skip_thing((*ptr_to_globals).dot, 2i32, dir, S_OVER_WS as libc::c_int)
                    }
                    if c != 'W' as i32 {
                      (*ptr_to_globals).dot =
                        skip_thing((*ptr_to_globals).dot, 1i32, dir, S_BEFORE_WS as libc::c_int)
                    }
                    (*ptr_to_globals).cmdcnt -= 1;
                    if !((*ptr_to_globals).cmdcnt > 0) {
                      break;
                    }
                  }
                  current_block = 15129665204879337069;
                }
                17440971994642376514 => {
                  current_block = 15129665204879337069;
                }
                7534742345255184552 => {
                  current_block = 17247297260531395789;
                }
                8800996768013373992 => {
                  loop {
                    dot_next();
                    (*ptr_to_globals).dot = move_to_col(
                      (*ptr_to_globals).dot,
                      (*ptr_to_globals).ccol + (*ptr_to_globals).offset,
                    );
                    (*ptr_to_globals).cmdcnt -= 1;
                    if !((*ptr_to_globals).cmdcnt > 0) {
                      break;
                    }
                  }
                  current_block = 15129665204879337069;
                }
                13993698454868426881 => {
                  loop {
                    dot_right();
                    (*ptr_to_globals).cmdcnt -= 1;
                    if !((*ptr_to_globals).cmdcnt > 0) {
                      break;
                    }
                  }
                  current_block = 15129665204879337069;
                }
                7856905509180742666 => {
                  while !((*ptr_to_globals).last_forward_char == 0) {
                    q = (*ptr_to_globals).dot.offset(1);
                    while q < (*ptr_to_globals).end.offset(-1)
                      && *q as libc::c_int != '\n' as i32
                      && *q as libc::c_int != (*ptr_to_globals).last_forward_char
                    {
                      q = q.offset(1)
                    }
                    if *q as libc::c_int == (*ptr_to_globals).last_forward_char {
                      (*ptr_to_globals).dot = q
                    }
                    (*ptr_to_globals).cmdcnt -= 1;
                    if !((*ptr_to_globals).cmdcnt > 0) {
                      break;
                    }
                  }
                  current_block = 15129665204879337069;
                }
                17498168302144015873 => {
                  current_block = 8681395796513813967;
                }
                1752638907092016026 => {
                  if *(*ptr_to_globals).dot as libc::c_int != '\n' as i32 {
                    (*ptr_to_globals).dot = (*ptr_to_globals).dot.offset(1)
                  }
                  current_block = 8629930936610358348;
                }
                3268579060917229304 => {
                  current_block = 8629930936610358348;
                }
                1895262434596074581 => {
                  current_block = 8908416993177701018;
                }
                _ => {}
              }
              match current_block {
                8629930936610358348 => {}
                15129665204879337069 => {}
                _ => {
                  match current_block {
                    17247297260531395789 => {
                      loop {
                        dot_left();
                        (*ptr_to_globals).cmdcnt -= 1;
                        if !((*ptr_to_globals).cmdcnt > 0) {
                          break;
                        }
                      }
                      current_block = 15129665204879337069;
                    }
                    8681395796513813967 => {
                      current_block = 5591548203144509315;
                    }
                    8908416993177701018 => {
                      current_block = 16124761010012532485;
                    }
                    _ => {}
                  }
                  match current_block {
                    15129665204879337069 => {}
                    _ => {
                      match current_block {
                        16124761010012532485 => {
                          let mut yf: libc::c_int = 0;
                          let mut ml: libc::c_int = 0;
                          let mut whole: libc::c_int = 0;
                          yf = YANKDEL as libc::c_int;
                          if c == 'y' as i32 || c == 'Y' as i32 {
                            yf = YANKONLY as libc::c_int
                          }
                          c1 = 'y' as i32;
                          if c != 'Y' as i32 {
                            c1 = get_one_char()
                          }
                          ml = find_range(&mut p, &mut q, c1 as libc::c_char);
                          place_cursor(0i32, 0);
                          if c1 == 27i32 {
                            c1 = 27i32;
                            c = c1
                          } else if !strchr(b"wW\x00" as *const u8 as *const libc::c_char, c1)
                            .is_null()
                          {
                            ml = 0;
                            if c == 'c' as i32 {
                              while ({
                                let mut bb__isspace: libc::c_uchar =
                                  (*q as libc::c_int - 9i32) as libc::c_uchar;
                                (bb__isspace as libc::c_int == ' ' as i32 - 9i32
                                  || bb__isspace as libc::c_int <= 13i32 - 9i32)
                                  as libc::c_int
                              }) != 0
                                && q > p
                              {
                                q = q.offset(-1)
                              }
                            }
                            (*ptr_to_globals).dot = yank_delete(p, q, ml, yf, 1i32)
                          } else if !strchr(
                            b"^0bBeEft%$ lh\x08\x7f\x00" as *const u8 as *const libc::c_char,
                            c1,
                          )
                          .is_null()
                          {
                            (*ptr_to_globals).dot = yank_delete(p, q, ml, yf, 1i32)
                          } else if !strchr(
                            b"cdykjGHL+-{}\r\n\x00" as *const u8 as *const libc::c_char,
                            c1,
                          )
                          .is_null()
                          {
                            (*ptr_to_globals).dot = yank_delete(p, q, ml, yf, 1i32);
                            whole = 1i32
                          } else {
                            c1 = 27i32;
                            c = c1;
                            ml = 0;
                            indicate_error();
                          }
                          if ml != 0 && whole != 0 {
                            if c == 'c' as i32 {
                              (*ptr_to_globals).dot = char_insert(
                                (*ptr_to_globals).dot,
                                '\n' as i32 as libc::c_char,
                                2i32,
                              );
                              if whole != 0
                                && (*ptr_to_globals).dot != (*ptr_to_globals).end.offset(-1)
                              {
                                dot_prev();
                              }
                            } else if c == 'd' as i32 {
                              dot_begin();
                              dot_skip_over_ws();
                            }
                          }
                          if c1 != 27i32 {
                            if c == 'c' as i32 {
                              strcpy(
                                buf.as_mut_ptr(),
                                b"Change\x00" as *const u8 as *const libc::c_char,
                              );
                              current_block = 8629930936610358348;
                            } else {
                              if c == 'd' as i32 {
                                strcpy(
                                  buf.as_mut_ptr(),
                                  b"Delete\x00" as *const u8 as *const libc::c_char,
                                );
                              }
                              if c == 'y' as i32 || c == 'Y' as i32 {
                                strcpy(
                                  buf.as_mut_ptr(),
                                  b"Yank\x00" as *const u8 as *const libc::c_char,
                                );
                              }
                              p = (*ptr_to_globals).reg[(*ptr_to_globals).YDreg as usize];
                              q = p.offset(strlen(p) as isize);
                              cnt = 0;
                              while p <= q {
                                if *p as libc::c_int == '\n' as i32 {
                                  cnt += 1
                                }
                                p = p.offset(1)
                              }
                              status_line(
                                b"%s %u lines (%u chars) using [%c]\x00" as *const u8
                                  as *const libc::c_char,
                                buf.as_mut_ptr(),
                                cnt,
                                strlen((*ptr_to_globals).reg[(*ptr_to_globals).YDreg as usize])
                                  as libc::c_uint,
                                what_reg() as libc::c_int,
                              );
                              end_cmd_q();
                              current_block = 15129665204879337069;
                            }
                          } else {
                            current_block = 15129665204879337069;
                          }
                        }
                        5591548203144509315 => {
                          current_block = 2636677179867529885;
                        }
                        _ => {}
                      }
                      match current_block {
                        15129665204879337069 => {}
                        8629930936610358348 => {}
                        _ => {
                          match current_block {
                            2636677179867529885 => {
                              current_block = 12309206730560524281;
                            }
                            _ => {}
                          }
                          match current_block {
                            12309206730560524281 => {
                              current_block = 3325768110057758661;
                            }
                            _ => {}
                          }
                          match current_block {
                            3325768110057758661 => {
                              current_block = 14815832896553429982;
                            }
                            _ => {}
                          }
                          match current_block {
                            14815832896553429982 => {
                              current_block = 10731695520297161438;
                            }
                            _ => {}
                          }
                          match current_block {
                            10731695520297161438 => {
                              if c == '0' as i32 && (*ptr_to_globals).cmdcnt < 1i32 {
                                dot_begin();
                              } else {
                                (*ptr_to_globals).cmdcnt =
                                  (*ptr_to_globals).cmdcnt * 10i32 + (c - '0' as i32)
                              }
                              current_block = 15129665204879337069;
                            }
                            _ => {}
                          }
                          match current_block {
                            15129665204879337069 => {}
                            _ => {
                              loop {
                                match current_block {
                                  16813369756331276724 => {
                                    msg = std::ptr::null();
                                    current_block = 7392824444931029276;
                                  }
                                  7392824444931029276 => {
                                    dir = FORWARD as libc::c_int;
                                    p = (*ptr_to_globals).dot.offset(1);
                                    if *(*ptr_to_globals).last_search_pattern.offset(0)
                                      as libc::c_int
                                      == '?' as i32
                                    {
                                      dir = BACK as libc::c_int;
                                      p = (*ptr_to_globals).dot.offset(-1)
                                    }
                                    current_block = 4166979493554389389;
                                  }
                                  _ => {
                                    q = char_search(
                                      p,
                                      (*ptr_to_globals).last_search_pattern.offset(1),
                                      dir << 1i32 | FULL as libc::c_int,
                                    );
                                    if !q.is_null() {
                                      (*ptr_to_globals).dot = q;
                                      msg = std::ptr::null()
                                    } else {
                                      p = (*ptr_to_globals).text;
                                      if dir == BACK as libc::c_int {
                                        p = (*ptr_to_globals).end.offset(-1)
                                      }
                                      q = char_search(
                                        p,
                                        (*ptr_to_globals).last_search_pattern.offset(1),
                                        dir << 1i32 | FULL as libc::c_int,
                                      );
                                      if !q.is_null() {
                                        (*ptr_to_globals).dot = q;
                                        msg = b"search hit BOTTOM, continuing at TOP\x00"
                                          as *const u8
                                          as *const libc::c_char;
                                        if dir == BACK as libc::c_int {
                                          msg = b"search hit TOP, continuing at BOTTOM\x00"
                                            as *const u8
                                            as *const libc::c_char
                                        }
                                      } else {
                                        msg = b"Pattern not found\x00" as *const u8
                                          as *const libc::c_char
                                      }
                                    }
                                    if !msg.is_null() {
                                      status_line_bold(
                                        b"%s\x00" as *const u8 as *const libc::c_char,
                                        msg,
                                      );
                                    }
                                    (*ptr_to_globals).cmdcnt -= 1;
                                    if (*ptr_to_globals).cmdcnt > 0 {
                                      current_block = 16813369756331276724;
                                    } else {
                                      break;
                                    }
                                  }
                                }
                              }
                              current_block = 15129665204879337069;
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
        32 => {
          current_block = 5182000506326660482;
          match current_block {
            16992905640583886232 => {
              loop {
                if (*(*ptr_to_globals).dot as libc::c_int - 'a' as i32) as libc::c_uchar
                  as libc::c_int
                  <= 'z' as i32 - 'a' as i32
                {
                  undo_push(
                    (*ptr_to_globals).dot,
                    1i32 as libc::c_uint,
                    1i32 as libc::c_uchar,
                  );
                  *(*ptr_to_globals).dot =
                    bb_ascii_toupper(*(*ptr_to_globals).dot as libc::c_uchar) as libc::c_char;
                  undo_push(
                    (*ptr_to_globals).dot,
                    1i32 as libc::c_uint,
                    2i32 as libc::c_uchar,
                  );
                } else if (*(*ptr_to_globals).dot as libc::c_int - 'A' as i32) as libc::c_uchar
                  as libc::c_int
                  <= 'Z' as i32 - 'A' as i32
                {
                  undo_push(
                    (*ptr_to_globals).dot,
                    1i32 as libc::c_uint,
                    1i32 as libc::c_uchar,
                  );
                  *(*ptr_to_globals).dot =
                    bb_ascii_tolower(*(*ptr_to_globals).dot as libc::c_uchar) as libc::c_char;
                  undo_push(
                    (*ptr_to_globals).dot,
                    1i32 as libc::c_uint,
                    2i32 as libc::c_uchar,
                  );
                }
                dot_right();
                (*ptr_to_globals).cmdcnt -= 1;
                if !((*ptr_to_globals).cmdcnt > 0) {
                  break;
                }
              }
              end_cmd_q();
              current_block = 15129665204879337069;
            }
            8729655159604064397 => {
              c1 = get_one_char();
              cnt = 0;
              if c1 == '.' as i32 {
                cnt = (*ptr_to_globals)
                  .rows
                  .wrapping_sub(2i32 as libc::c_uint)
                  .wrapping_div(2i32 as libc::c_uint) as libc::c_int
              }
              if c1 == '-' as i32 {
                cnt = (*ptr_to_globals).rows.wrapping_sub(2i32 as libc::c_uint) as libc::c_int
              }
              (*ptr_to_globals).screenbegin = begin_line((*ptr_to_globals).dot);
              dot_scroll(cnt, -1i32);
              current_block = 15129665204879337069;
            }
            15899500648299942075 => {
              (*ptr_to_globals).last_forward_char = get_one_char();
              do_cmd(';' as i32);
              if *(*ptr_to_globals).dot as libc::c_int == (*ptr_to_globals).last_forward_char {
                dot_left();
              }
              (*ptr_to_globals).last_forward_char = 0;
              current_block = 15129665204879337069;
            }
            9051390181078481641 => {
              c1 = get_one_char();
              if *(*ptr_to_globals).dot as libc::c_int != '\n' as i32 {
                (*ptr_to_globals).dot =
                  text_hole_delete((*ptr_to_globals).dot, (*ptr_to_globals).dot, 1i32);
                (*ptr_to_globals).dot =
                  char_insert((*ptr_to_globals).dot, c1 as libc::c_char, 2i32);
                dot_left();
              }
              end_cmd_q();
              current_block = 15129665204879337069;
            }
            877115918601926659 => {
              dir = FORWARD as libc::c_int;
              if c == 'b' as i32 {
                dir = BACK as libc::c_int
              }
              while !((*ptr_to_globals).dot.offset(dir as isize) < (*ptr_to_globals).text
                || (*ptr_to_globals).dot.offset(dir as isize) > (*ptr_to_globals).end.offset(-1))
              {
                (*ptr_to_globals).dot = (*ptr_to_globals).dot.offset(dir as isize);
                if ({
                  let mut bb__isspace: libc::c_uchar =
                    (*(*ptr_to_globals).dot as libc::c_int - 9i32) as libc::c_uchar;
                  (bb__isspace as libc::c_int == ' ' as i32 - 9i32
                    || bb__isspace as libc::c_int <= 13i32 - 9i32) as libc::c_int
                }) != 0
                {
                  (*ptr_to_globals).dot = skip_thing(
                    (*ptr_to_globals).dot,
                    if c == 'e' as i32 { 2i32 } else { 1i32 },
                    dir,
                    S_OVER_WS as libc::c_int,
                  )
                }
                if bb_ascii_isalnum(*(*ptr_to_globals).dot as libc::c_uchar) != 0
                  || *(*ptr_to_globals).dot as libc::c_int == '_' as i32
                {
                  (*ptr_to_globals).dot =
                    skip_thing((*ptr_to_globals).dot, 1i32, dir, S_END_ALNUM as libc::c_int)
                } else if *strchrnul(
                  b"!\"#$%&\'()*+,-./:;<=>?@[\\]^_`{|}~\x00" as *const u8 as *const libc::c_char,
                  *(*ptr_to_globals).dot as libc::c_int,
                )
                .offset(0)
                  != 0
                {
                  (*ptr_to_globals).dot =
                    skip_thing((*ptr_to_globals).dot, 1i32, dir, S_END_PUNCT as libc::c_int)
                }
                (*ptr_to_globals).cmdcnt -= 1;
                if !((*ptr_to_globals).cmdcnt > 0) {
                  break;
                }
              }
              current_block = 15129665204879337069;
            }
            1085022737867179637 => {
              dot_begin();
              dot_skip_over_ws();
              current_block = 15129665204879337069;
            }
            3113147720494587438 => {
              c1 = get_one_char();
              if c1 != 'Z' as i32 {
                indicate_error();
              } else if (*ptr_to_globals).modified_count != 0 {
                if 1i32 != 0 && (*ptr_to_globals).readonly_mode as libc::c_int != 0 {
                  status_line_bold(
                    b"\'%s\' is read only\x00" as *const u8 as *const libc::c_char,
                    (*ptr_to_globals).current_filename,
                  );
                } else {
                  cnt = file_write(
                    (*ptr_to_globals).current_filename,
                    (*ptr_to_globals).text,
                    (*ptr_to_globals).end.offset(-1),
                  );
                  if cnt < 0 {
                    if cnt == -1i32 {
                      status_line_bold(b"Write error: %m\x00" as *const u8 as *const libc::c_char);
                    }
                  } else if cnt as libc::c_long
                    == (*ptr_to_globals)
                      .end
                      .offset(-1)
                      .wrapping_offset_from((*ptr_to_globals).text)
                      as libc::c_long
                      + 1
                  {
                    (*ptr_to_globals).editing = 0 as smallint
                  }
                }
              } else {
                (*ptr_to_globals).editing = 0 as smallint
              }
              current_block = 15129665204879337069;
            }
            12960118908218882441 => {
              p = begin_line((*ptr_to_globals).dot);
              if *p.offset(-1i32 as isize) as libc::c_int == '\n' as i32 {
                dot_prev();
                current_block = 2087484904894455135;
              } else {
                dot_begin();
                (*ptr_to_globals).dot =
                  char_insert((*ptr_to_globals).dot, '\n' as i32 as libc::c_char, 1i32);
                dot_prev();
                current_block = 8629930936610358348;
              }
            }
            8720450212473544924 => {
              (*ptr_to_globals).dot = (*ptr_to_globals).screenbegin;
              cnt = 0;
              while (cnt as libc::c_uint)
                < (*ptr_to_globals)
                  .rows
                  .wrapping_sub(1i32 as libc::c_uint)
                  .wrapping_div(2i32 as libc::c_uint)
              {
                (*ptr_to_globals).dot = next_line((*ptr_to_globals).dot);
                cnt += 1
              }
              current_block = 15129665204879337069;
            }
            13015277209715431090 => {
              (*ptr_to_globals).dot = end_screen();
              if (*ptr_to_globals).cmdcnt as libc::c_uint
                > (*ptr_to_globals).rows.wrapping_sub(1i32 as libc::c_uint)
              {
                (*ptr_to_globals).cmdcnt =
                  (*ptr_to_globals).rows.wrapping_sub(1i32 as libc::c_uint) as libc::c_int
              }
              (*ptr_to_globals).cmdcnt -= 1;
              if (*ptr_to_globals).cmdcnt > 0 {
                do_cmd('-' as i32);
              }
              dot_begin();
              dot_skip_over_ws();
              current_block = 15129665204879337069;
            }
            9800435767766781385 => {
              loop {
                dot_end();
                if (*ptr_to_globals).dot < (*ptr_to_globals).end.offset(-1) {
                  undo_push(
                    (*ptr_to_globals).dot,
                    1i32 as libc::c_uint,
                    1i32 as libc::c_uchar,
                  );
                  let fresh15 = (*ptr_to_globals).dot;
                  (*ptr_to_globals).dot = (*ptr_to_globals).dot.offset(1);
                  *fresh15 = ' ' as i32 as libc::c_char;
                  undo_push(
                    (*ptr_to_globals).dot.offset(-1),
                    1i32 as libc::c_uint,
                    2i32 as libc::c_uchar,
                  );
                  while ({
                    let mut bb__isblank: libc::c_uchar = *(*ptr_to_globals).dot as libc::c_uchar;
                    (bb__isblank as libc::c_int == ' ' as i32
                      || bb__isblank as libc::c_int == '\t' as i32)
                      as libc::c_int
                  }) != 0
                  {
                    text_hole_delete((*ptr_to_globals).dot, (*ptr_to_globals).dot, 2i32);
                  }
                }
                (*ptr_to_globals).cmdcnt -= 1;
                if !((*ptr_to_globals).cmdcnt > 0) {
                  break;
                }
              }
              end_cmd_q();
              current_block = 15129665204879337069;
            }
            3432363526595694666 => {
              dot_begin();
              dot_skip_over_ws();
              current_block = 3268579060917229304;
            }
            3494829253343353619 => {
              (*ptr_to_globals).dot = (*ptr_to_globals).screenbegin;
              if (*ptr_to_globals).cmdcnt as libc::c_uint
                > (*ptr_to_globals).rows.wrapping_sub(1i32 as libc::c_uint)
              {
                (*ptr_to_globals).cmdcnt =
                  (*ptr_to_globals).rows.wrapping_sub(1i32 as libc::c_uint) as libc::c_int
              }
              (*ptr_to_globals).cmdcnt -= 1;
              if (*ptr_to_globals).cmdcnt > 0 {
                do_cmd('+' as i32);
              }
              dot_skip_over_ws();
              current_block = 15129665204879337069;
            }
            17973101765331640574 => {
              c1 = get_one_char();
              if c1 != 'g' as i32 {
                buf[0] = 'g' as i32 as libc::c_char;
                buf[1] = if c1 >= 0 { c1 } else { '*' as i32 } as libc::c_char;
                buf[2] = '\u{0}' as i32 as libc::c_char;
                not_implemented(buf.as_mut_ptr());
                current_block = 15129665204879337069;
              } else {
                if (*ptr_to_globals).cmdcnt == 0 {
                  (*ptr_to_globals).cmdcnt = 1i32
                }
                current_block = 11945623545738147997;
              }
            }
            16546625800574160972 => {
              save_dot = (*ptr_to_globals).dot;
              (*ptr_to_globals).dot = dollar_line((*ptr_to_globals).dot);
              (*ptr_to_globals).dot = yank_delete(
                save_dot,
                (*ptr_to_globals).dot,
                0,
                YANKDEL as libc::c_int,
                1i32,
              );
              if c == 'C' as i32 {
                current_block = 8629930936610358348;
              } else {
                if c == 'D' as i32 {
                  end_cmd_q();
                }
                current_block = 15129665204879337069;
              }
            }
            11937696639986586685 => {
              cnt = count_lines((*ptr_to_globals).text, (*ptr_to_globals).dot);
              c1 = get_one_char();
              find_range(&mut p, &mut q, c1 as libc::c_char);
              yank_delete(p, q, 1i32, YANKONLY as libc::c_int, 0);
              p = begin_line(p);
              q = end_line(q);
              i = count_lines(p, q);
              while i > 0 {
                if c == '<' as i32 {
                  if *p as libc::c_int == '\t' as i32 {
                    text_hole_delete(p, p, 0);
                  } else if *p as libc::c_int == ' ' as i32 {
                    j = 0;
                    while *p as libc::c_int == ' ' as i32 && j < (*ptr_to_globals).tabstop {
                      text_hole_delete(p, p, 0);
                      j += 1
                    }
                  }
                } else if c == '>' as i32 {
                  char_insert(p, '\t' as i32 as libc::c_char, 1i32);
                }
                i -= 1;
                p = next_line(p)
              }
              (*ptr_to_globals).dot = find_line(cnt);
              dot_skip_over_ws();
              end_cmd_q();
              current_block = 15129665204879337069;
            }
            17725350714912028156 => {
              p = get_input_line(b":\x00" as *const u8 as *const libc::c_char);
              colon(p);
              current_block = 15129665204879337069;
            }
            14526470074083880812 => {
              q = char_search(
                (*ptr_to_globals).dot,
                b"\n\n\x00" as *const u8 as *const libc::c_char,
                (FORWARD as libc::c_int) << 1i32 | FULL as libc::c_int,
              );
              if !q.is_null() {
                (*ptr_to_globals).dot = next_line(q)
              }
              current_block = 15129665204879337069;
            }
            8893187391306414141 => {
              q = char_search(
                (*ptr_to_globals).dot,
                b"\n\n\x00" as *const u8 as *const libc::c_char,
                ((BACK as libc::c_int as libc::c_uint) << 1i32
                  | FULL as libc::c_int as libc::c_uint) as libc::c_int,
              );
              if !q.is_null() {
                (*ptr_to_globals).dot = next_line(q)
              }
              current_block = 15129665204879337069;
            }
            7021673758293221412 => {
              dir = BACK as libc::c_int;
              p = (*ptr_to_globals).dot.offset(-1);
              if *(*ptr_to_globals).last_search_pattern.offset(0) as libc::c_int == '?' as i32 {
                dir = FORWARD as libc::c_int;
                p = (*ptr_to_globals).dot.offset(1)
              }
              current_block = 4166979493554389389;
            }
            18374191879090272823 => {
              buf[0] = c as libc::c_char;
              buf[1] = '\u{0}' as i32 as libc::c_char;
              q = get_input_line(buf.as_mut_ptr());
              if *q.offset(0) as libc::c_int != 0 && *q.offset(1) == 0 {
                if *(*ptr_to_globals).last_search_pattern.offset(0) != 0 {
                  *(*ptr_to_globals).last_search_pattern.offset(0) = c as libc::c_char
                }
                current_block = 7392824444931029276;
              } else if *q.offset(0) != 0 {
                free((*ptr_to_globals).last_search_pattern as *mut libc::c_void);
                (*ptr_to_globals).last_search_pattern = crate::libbb::xfuncs_printf::xstrdup(q);
                current_block = 7392824444931029276;
              } else {
                current_block = 15129665204879337069;
              }
            }
            16407828456666301883 => {
              if (*ptr_to_globals).last_forward_char == 0 {
                current_block = 15129665204879337069;
              } else {
                loop {
                  q = (*ptr_to_globals).dot.offset(-1);
                  while q >= (*ptr_to_globals).text
                    && *q as libc::c_int != '\n' as i32
                    && *q as libc::c_int != (*ptr_to_globals).last_forward_char
                  {
                    q = q.offset(-1)
                  }
                  if q >= (*ptr_to_globals).text
                    && *q as libc::c_int == (*ptr_to_globals).last_forward_char
                  {
                    (*ptr_to_globals).dot = q
                  }
                  (*ptr_to_globals).cmdcnt -= 1;
                  if !((*ptr_to_globals).cmdcnt > 0) {
                    break;
                  }
                }
                current_block = 15129665204879337069;
              }
            }
            9018432604062702004 => {
              q = (*ptr_to_globals).dot;
              while q < (*ptr_to_globals).end && *q as libc::c_int != '\n' as i32 {
                if !strchr(
                  b"()[]{}\x00" as *const u8 as *const libc::c_char,
                  *q as libc::c_int,
                )
                .is_null()
                {
                  p = find_pair(q, *q);
                  if p.is_null() {
                    indicate_error();
                  } else {
                    (*ptr_to_globals).dot = p
                  }
                  break;
                } else {
                  q = q.offset(1)
                }
              }
              if *q as libc::c_int == '\n' as i32 {
                indicate_error();
              }
              current_block = 15129665204879337069;
            }
            10247103787464459848 => {
              p = (*ptr_to_globals).reg[(*ptr_to_globals).YDreg as usize];
              if p.is_null() {
                status_line_bold(
                  b"Nothing in register %c\x00" as *const u8 as *const libc::c_char,
                  what_reg() as libc::c_int,
                );
              } else {
                if !strchr(p, '\n' as i32).is_null() {
                  if c == 'P' as i32 {
                    dot_begin();
                  }
                  if c == 'p' as i32 {
                    if end_line((*ptr_to_globals).dot) == (*ptr_to_globals).end.offset(-1) {
                      (*ptr_to_globals).dot = (*ptr_to_globals).end
                    } else {
                      dot_next();
                    }
                  }
                } else if c == 'p' as i32 {
                  dot_right();
                }
                string_insert((*ptr_to_globals).dot, p, 1i32);
                end_cmd_q();
              }
              current_block = 15129665204879337069;
            }
            15260732871948875843 => {
              c1 = (get_one_char() | 0x20i32) - 'a' as i32;
              if c1 as libc::c_uint <= 25i32 as libc::c_uint {
                (*ptr_to_globals).mark[c1 as usize] = (*ptr_to_globals).dot
              } else {
                indicate_error();
              }
              current_block = 15129665204879337069;
            }
            12738322036487086035 => {
              c1 = get_one_char() | 0x20i32;
              if (c1 - 'a' as i32) as libc::c_uint <= 25i32 as libc::c_uint {
                c1 = c1 - 'a' as i32;
                q = (*ptr_to_globals).mark[c1 as usize];
                if (*ptr_to_globals).text <= q && q < (*ptr_to_globals).end {
                  (*ptr_to_globals).dot = q;
                  dot_begin();
                  dot_skip_over_ws();
                }
              } else if c1 == '\'' as i32 {
                (*ptr_to_globals).dot = swap_context((*ptr_to_globals).dot);
                dot_begin();
                dot_skip_over_ws();
              } else {
                indicate_error();
              }
              current_block = 15129665204879337069;
            }
            13255096073384561358 => {
              c1 = (get_one_char() | 0x20i32) - 'a' as i32;
              if c1 as libc::c_uint <= 25i32 as libc::c_uint {
                (*ptr_to_globals).YDreg = c1 as smalluint
              } else {
                indicate_error();
              }
              current_block = 15129665204879337069;
            }
            10258711639984089377 => {
              if (*ptr_to_globals).cmd_mode as libc::c_int == 0 {
                indicate_error();
              }
              (*ptr_to_globals).cmd_mode = 0 as smallint;
              undo_queue_commit();
              end_cmd_q();
              (*ptr_to_globals).last_status_cksum = 0;
              current_block = 15129665204879337069;
            }
            11439127087547047736 => {
              buf[0] = c as libc::c_char;
              buf[1] = '\u{0}' as i32 as libc::c_char;
              not_implemented(buf.as_mut_ptr());
              end_cmd_q();
              current_block = 17440971994642376514;
            }
            7961798899781870241 => {
              dot_scroll(
                (*ptr_to_globals).rows.wrapping_sub(2i32 as libc::c_uint) as libc::c_int,
                -1i32,
              );
              current_block = 15129665204879337069;
            }
            9426343755402444879 => {
              dot_scroll(
                (*ptr_to_globals)
                  .rows
                  .wrapping_sub(2i32 as libc::c_uint)
                  .wrapping_div(2i32 as libc::c_uint) as libc::c_int,
                1i32,
              );
              current_block = 15129665204879337069;
            }
            13352459794680105913 => {
              dot_scroll(1i32, 1i32);
              current_block = 15129665204879337069;
            }
            14142272253464333006 => {
              dot_scroll(
                (*ptr_to_globals).rows.wrapping_sub(2i32 as libc::c_uint) as libc::c_int,
                1i32,
              );
              current_block = 15129665204879337069;
            }
            10758177197742640066 => {
              (*ptr_to_globals).last_status_cksum = 0;
              current_block = 15129665204879337069;
            }
            6152256259730122749 => {
              current_block = 7534742345255184552;
            }
            12883932598258173301 => {
              current_block = 8800996768013373992;
            }
            11242998110520238401 => {
              redraw(1i32);
              current_block = 15129665204879337069;
            }
            13619733043935729992 => {
              loop {
                dot_next();
                dot_skip_over_ws();
                (*ptr_to_globals).cmdcnt -= 1;
                if !((*ptr_to_globals).cmdcnt > 0) {
                  break;
                }
              }
              current_block = 15129665204879337069;
            }
            9339065157412720613 => {
              dot_scroll(
                (*ptr_to_globals)
                  .rows
                  .wrapping_sub(2i32 as libc::c_uint)
                  .wrapping_div(2i32 as libc::c_uint) as libc::c_int,
                -1i32,
              );
              current_block = 15129665204879337069;
            }
            11447082683497798022 => {
              dot_scroll(1i32, -1i32);
              current_block = 15129665204879337069;
            }
            5182000506326660482 => {
              current_block = 13993698454868426881;
            }
            1105010766850597332 => {
              if !(*ptr_to_globals).reg[27].is_null() {
                p = begin_line((*ptr_to_globals).dot);
                q = end_line((*ptr_to_globals).dot);
                p = text_hole_delete(p, q, 1i32);
                p = p.offset(string_insert(p, (*ptr_to_globals).reg[27], 2i32) as isize);
                (*ptr_to_globals).dot = p;
                dot_skip_over_ws();
              }
              current_block = 15129665204879337069;
            }
            8616046655533110204 => {
              undo_pop();
              current_block = 15129665204879337069;
            }
            5127767458142431603 => {
              loop {
                (*ptr_to_globals).dot = end_line((*ptr_to_globals).dot);
                (*ptr_to_globals).cmdcnt -= 1;
                if (*ptr_to_globals).cmdcnt <= 0 {
                  break;
                }
                dot_next();
              }
              current_block = 15129665204879337069;
            }
            222014967776118151 => {
              (*ptr_to_globals).last_forward_char = get_one_char();
              current_block = 7856905509180742666;
            }
            11209792479411604110 => {
              loop {
                dot_prev();
                dot_skip_over_ws();
                (*ptr_to_globals).cmdcnt -= 1;
                if !((*ptr_to_globals).cmdcnt > 0) {
                  break;
                }
              }
              current_block = 15129665204879337069;
            }
            3364823792826654116 => {
              if (*ptr_to_globals).lmc_len != 0 {
                (*ptr_to_globals).ioq_start = crate::libbb::xfuncs_printf::xstrndup(
                  (*ptr_to_globals).last_modifying_cmd.as_mut_ptr(),
                  (*ptr_to_globals).lmc_len,
                );
                (*ptr_to_globals).ioq = (*ptr_to_globals).ioq_start
              }
              current_block = 15129665204879337069;
            }
            18096603330221575131 => {
              current_block = 17498168302144015873;
            }
            16891123271837848903 => {
              dot_end();
              current_block = 1752638907092016026;
            }
            8517235759107662071 => {
              current_block = 5847749760081351726;
            }
            12525254419223051704 => {
              if (*ptr_to_globals).dot < (*ptr_to_globals).end.offset(-1) {
                (*ptr_to_globals).dot = yank_delete(
                  (*ptr_to_globals).dot,
                  (*ptr_to_globals).dot,
                  1i32,
                  YANKDEL as libc::c_int,
                  1i32,
                )
              }
              current_block = 15129665204879337069;
            }
            15232911949322867522 => {
              current_block = 17251831742223396249;
            }
            10863374208794025069 => {
              current_block = 1895262434596074581;
            }
            451126677064669119 => {
              loop {
                dot_prev();
                (*ptr_to_globals).dot = move_to_col(
                  (*ptr_to_globals).dot,
                  (*ptr_to_globals).ccol + (*ptr_to_globals).offset,
                );
                (*ptr_to_globals).cmdcnt -= 1;
                if !((*ptr_to_globals).cmdcnt > 0) {
                  break;
                }
              }
              current_block = 15129665204879337069;
            }
            4611735929166613116 => {
              loop {
                if bb_ascii_isalnum(*(*ptr_to_globals).dot as libc::c_uchar) != 0
                  || *(*ptr_to_globals).dot as libc::c_int == '_' as i32
                {
                  (*ptr_to_globals).dot = skip_thing(
                    (*ptr_to_globals).dot,
                    1i32,
                    FORWARD as libc::c_int,
                    S_END_ALNUM as libc::c_int,
                  )
                } else if *strchrnul(
                  b"!\"#$%&\'()*+,-./:;<=>?@[\\]^_`{|}~\x00" as *const u8 as *const libc::c_char,
                  *(*ptr_to_globals).dot as libc::c_int,
                )
                .offset(0)
                  != 0
                {
                  (*ptr_to_globals).dot = skip_thing(
                    (*ptr_to_globals).dot,
                    1i32,
                    FORWARD as libc::c_int,
                    S_END_PUNCT as libc::c_int,
                  )
                }
                if (*ptr_to_globals).dot < (*ptr_to_globals).end.offset(-1) {
                  (*ptr_to_globals).dot = (*ptr_to_globals).dot.offset(1)
                }
                if ({
                  let mut bb__isspace: libc::c_uchar =
                    (*(*ptr_to_globals).dot as libc::c_int - 9i32) as libc::c_uchar;
                  (bb__isspace as libc::c_int == ' ' as i32 - 9i32
                    || bb__isspace as libc::c_int <= 13i32 - 9i32) as libc::c_int
                }) != 0
                {
                  (*ptr_to_globals).dot = skip_thing(
                    (*ptr_to_globals).dot,
                    2i32,
                    FORWARD as libc::c_int,
                    S_OVER_WS as libc::c_int,
                  )
                }
                (*ptr_to_globals).cmdcnt -= 1;
                if !((*ptr_to_globals).cmdcnt > 0) {
                  break;
                }
              }
              current_block = 15129665204879337069;
            }
            4386451087681909888 => {
              (*ptr_to_globals).dot =
                move_to_col((*ptr_to_globals).dot, (*ptr_to_globals).cmdcnt - 1i32);
              current_block = 15129665204879337069;
            }
            1296397779060594135 => {
              dot_begin();
              current_block = 15129665204879337069;
            }
            _ => {}
          }
          match current_block {
            15129665204879337069 => {}
            8629930936610358348 => {}
            _ => {
              match current_block {
                17251831742223396249 => {
                  dir = 0;
                  if c == 'X' as i32 {
                    dir = -1i32
                  }
                  loop {
                    if *(*ptr_to_globals).dot.offset(dir as isize) as libc::c_int != '\n' as i32 {
                      if c == 'X' as i32 {
                        (*ptr_to_globals).dot = (*ptr_to_globals).dot.offset(-1)
                      }
                      (*ptr_to_globals).dot = yank_delete(
                        (*ptr_to_globals).dot,
                        (*ptr_to_globals).dot,
                        0,
                        YANKDEL as libc::c_int,
                        1i32,
                      )
                    }
                    (*ptr_to_globals).cmdcnt -= 1;
                    if !((*ptr_to_globals).cmdcnt > 0) {
                      break;
                    }
                  }
                  end_cmd_q();
                  if c == 's' as i32 {
                    current_block = 8629930936610358348;
                  } else {
                    current_block = 15129665204879337069;
                  }
                }
                2087484904894455135 => {
                  dot_end();
                  (*ptr_to_globals).dot =
                    char_insert((*ptr_to_globals).dot, '\n' as i32 as libc::c_char, 1i32);
                  current_block = 8629930936610358348;
                }
                11945623545738147997 => {
                  (*ptr_to_globals).dot = (*ptr_to_globals).end.offset(-1);
                  if (*ptr_to_globals).cmdcnt > 0 {
                    (*ptr_to_globals).dot = find_line((*ptr_to_globals).cmdcnt)
                  }
                  dot_skip_over_ws();
                  current_block = 15129665204879337069;
                }
                5847749760081351726 => {
                  dir = FORWARD as libc::c_int;
                  if c == 'B' as i32 {
                    dir = BACK as libc::c_int
                  }
                  loop {
                    if c == 'W' as i32
                      || ({
                        let mut bb__isspace: libc::c_uchar =
                          (*(*ptr_to_globals).dot.offset(dir as isize) as libc::c_int - 9i32)
                            as libc::c_uchar;
                        (bb__isspace as libc::c_int == ' ' as i32 - 9i32
                          || bb__isspace as libc::c_int <= 13i32 - 9i32)
                          as libc::c_int
                      }) != 0
                    {
                      (*ptr_to_globals).dot =
                        skip_thing((*ptr_to_globals).dot, 1i32, dir, S_TO_WS as libc::c_int);
                      (*ptr_to_globals).dot =
                        skip_thing((*ptr_to_globals).dot, 2i32, dir, S_OVER_WS as libc::c_int)
                    }
                    if c != 'W' as i32 {
                      (*ptr_to_globals).dot =
                        skip_thing((*ptr_to_globals).dot, 1i32, dir, S_BEFORE_WS as libc::c_int)
                    }
                    (*ptr_to_globals).cmdcnt -= 1;
                    if !((*ptr_to_globals).cmdcnt > 0) {
                      break;
                    }
                  }
                  current_block = 15129665204879337069;
                }
                17440971994642376514 => {
                  current_block = 15129665204879337069;
                }
                7534742345255184552 => {
                  current_block = 17247297260531395789;
                }
                8800996768013373992 => {
                  loop {
                    dot_next();
                    (*ptr_to_globals).dot = move_to_col(
                      (*ptr_to_globals).dot,
                      (*ptr_to_globals).ccol + (*ptr_to_globals).offset,
                    );
                    (*ptr_to_globals).cmdcnt -= 1;
                    if !((*ptr_to_globals).cmdcnt > 0) {
                      break;
                    }
                  }
                  current_block = 15129665204879337069;
                }
                13993698454868426881 => {
                  loop {
                    dot_right();
                    (*ptr_to_globals).cmdcnt -= 1;
                    if !((*ptr_to_globals).cmdcnt > 0) {
                      break;
                    }
                  }
                  current_block = 15129665204879337069;
                }
                7856905509180742666 => {
                  while !((*ptr_to_globals).last_forward_char == 0) {
                    q = (*ptr_to_globals).dot.offset(1);
                    while q < (*ptr_to_globals).end.offset(-1)
                      && *q as libc::c_int != '\n' as i32
                      && *q as libc::c_int != (*ptr_to_globals).last_forward_char
                    {
                      q = q.offset(1)
                    }
                    if *q as libc::c_int == (*ptr_to_globals).last_forward_char {
                      (*ptr_to_globals).dot = q
                    }
                    (*ptr_to_globals).cmdcnt -= 1;
                    if !((*ptr_to_globals).cmdcnt > 0) {
                      break;
                    }
                  }
                  current_block = 15129665204879337069;
                }
                17498168302144015873 => {
                  current_block = 8681395796513813967;
                }
                1752638907092016026 => {
                  if *(*ptr_to_globals).dot as libc::c_int != '\n' as i32 {
                    (*ptr_to_globals).dot = (*ptr_to_globals).dot.offset(1)
                  }
                  current_block = 8629930936610358348;
                }
                3268579060917229304 => {
                  current_block = 8629930936610358348;
                }
                1895262434596074581 => {
                  current_block = 8908416993177701018;
                }
                _ => {}
              }
              match current_block {
                8629930936610358348 => {}
                15129665204879337069 => {}
                _ => {
                  match current_block {
                    17247297260531395789 => {
                      loop {
                        dot_left();
                        (*ptr_to_globals).cmdcnt -= 1;
                        if !((*ptr_to_globals).cmdcnt > 0) {
                          break;
                        }
                      }
                      current_block = 15129665204879337069;
                    }
                    8681395796513813967 => {
                      current_block = 5591548203144509315;
                    }
                    8908416993177701018 => {
                      current_block = 16124761010012532485;
                    }
                    _ => {}
                  }
                  match current_block {
                    15129665204879337069 => {}
                    _ => {
                      match current_block {
                        16124761010012532485 => {
                          let mut yf: libc::c_int = 0;
                          let mut ml: libc::c_int = 0;
                          let mut whole: libc::c_int = 0;
                          yf = YANKDEL as libc::c_int;
                          if c == 'y' as i32 || c == 'Y' as i32 {
                            yf = YANKONLY as libc::c_int
                          }
                          c1 = 'y' as i32;
                          if c != 'Y' as i32 {
                            c1 = get_one_char()
                          }
                          ml = find_range(&mut p, &mut q, c1 as libc::c_char);
                          place_cursor(0i32, 0);
                          if c1 == 27i32 {
                            c1 = 27i32;
                            c = c1
                          } else if !strchr(b"wW\x00" as *const u8 as *const libc::c_char, c1)
                            .is_null()
                          {
                            ml = 0;
                            if c == 'c' as i32 {
                              while ({
                                let mut bb__isspace: libc::c_uchar =
                                  (*q as libc::c_int - 9i32) as libc::c_uchar;
                                (bb__isspace as libc::c_int == ' ' as i32 - 9i32
                                  || bb__isspace as libc::c_int <= 13i32 - 9i32)
                                  as libc::c_int
                              }) != 0
                                && q > p
                              {
                                q = q.offset(-1)
                              }
                            }
                            (*ptr_to_globals).dot = yank_delete(p, q, ml, yf, 1i32)
                          } else if !strchr(
                            b"^0bBeEft%$ lh\x08\x7f\x00" as *const u8 as *const libc::c_char,
                            c1,
                          )
                          .is_null()
                          {
                            (*ptr_to_globals).dot = yank_delete(p, q, ml, yf, 1i32)
                          } else if !strchr(
                            b"cdykjGHL+-{}\r\n\x00" as *const u8 as *const libc::c_char,
                            c1,
                          )
                          .is_null()
                          {
                            (*ptr_to_globals).dot = yank_delete(p, q, ml, yf, 1i32);
                            whole = 1i32
                          } else {
                            c1 = 27i32;
                            c = c1;
                            ml = 0;
                            indicate_error();
                          }
                          if ml != 0 && whole != 0 {
                            if c == 'c' as i32 {
                              (*ptr_to_globals).dot = char_insert(
                                (*ptr_to_globals).dot,
                                '\n' as i32 as libc::c_char,
                                2i32,
                              );
                              if whole != 0
                                && (*ptr_to_globals).dot != (*ptr_to_globals).end.offset(-1)
                              {
                                dot_prev();
                              }
                            } else if c == 'd' as i32 {
                              dot_begin();
                              dot_skip_over_ws();
                            }
                          }
                          if c1 != 27i32 {
                            if c == 'c' as i32 {
                              strcpy(
                                buf.as_mut_ptr(),
                                b"Change\x00" as *const u8 as *const libc::c_char,
                              );
                              current_block = 8629930936610358348;
                            } else {
                              if c == 'd' as i32 {
                                strcpy(
                                  buf.as_mut_ptr(),
                                  b"Delete\x00" as *const u8 as *const libc::c_char,
                                );
                              }
                              if c == 'y' as i32 || c == 'Y' as i32 {
                                strcpy(
                                  buf.as_mut_ptr(),
                                  b"Yank\x00" as *const u8 as *const libc::c_char,
                                );
                              }
                              p = (*ptr_to_globals).reg[(*ptr_to_globals).YDreg as usize];
                              q = p.offset(strlen(p) as isize);
                              cnt = 0;
                              while p <= q {
                                if *p as libc::c_int == '\n' as i32 {
                                  cnt += 1
                                }
                                p = p.offset(1)
                              }
                              status_line(
                                b"%s %u lines (%u chars) using [%c]\x00" as *const u8
                                  as *const libc::c_char,
                                buf.as_mut_ptr(),
                                cnt,
                                strlen((*ptr_to_globals).reg[(*ptr_to_globals).YDreg as usize])
                                  as libc::c_uint,
                                what_reg() as libc::c_int,
                              );
                              end_cmd_q();
                              current_block = 15129665204879337069;
                            }
                          } else {
                            current_block = 15129665204879337069;
                          }
                        }
                        5591548203144509315 => {
                          current_block = 2636677179867529885;
                        }
                        _ => {}
                      }
                      match current_block {
                        15129665204879337069 => {}
                        8629930936610358348 => {}
                        _ => {
                          match current_block {
                            2636677179867529885 => {
                              current_block = 12309206730560524281;
                            }
                            _ => {}
                          }
                          match current_block {
                            12309206730560524281 => {
                              current_block = 3325768110057758661;
                            }
                            _ => {}
                          }
                          match current_block {
                            3325768110057758661 => {
                              current_block = 14815832896553429982;
                            }
                            _ => {}
                          }
                          match current_block {
                            14815832896553429982 => {
                              current_block = 10731695520297161438;
                            }
                            _ => {}
                          }
                          match current_block {
                            10731695520297161438 => {
                              if c == '0' as i32 && (*ptr_to_globals).cmdcnt < 1i32 {
                                dot_begin();
                              } else {
                                (*ptr_to_globals).cmdcnt =
                                  (*ptr_to_globals).cmdcnt * 10i32 + (c - '0' as i32)
                              }
                              current_block = 15129665204879337069;
                            }
                            _ => {}
                          }
                          match current_block {
                            15129665204879337069 => {}
                            _ => {
                              loop {
                                match current_block {
                                  16813369756331276724 => {
                                    msg = std::ptr::null();
                                    current_block = 7392824444931029276;
                                  }
                                  7392824444931029276 => {
                                    dir = FORWARD as libc::c_int;
                                    p = (*ptr_to_globals).dot.offset(1);
                                    if *(*ptr_to_globals).last_search_pattern.offset(0)
                                      as libc::c_int
                                      == '?' as i32
                                    {
                                      dir = BACK as libc::c_int;
                                      p = (*ptr_to_globals).dot.offset(-1)
                                    }
                                    current_block = 4166979493554389389;
                                  }
                                  _ => {
                                    q = char_search(
                                      p,
                                      (*ptr_to_globals).last_search_pattern.offset(1),
                                      dir << 1i32 | FULL as libc::c_int,
                                    );
                                    if !q.is_null() {
                                      (*ptr_to_globals).dot = q;
                                      msg = std::ptr::null()
                                    } else {
                                      p = (*ptr_to_globals).text;
                                      if dir == BACK as libc::c_int {
                                        p = (*ptr_to_globals).end.offset(-1)
                                      }
                                      q = char_search(
                                        p,
                                        (*ptr_to_globals).last_search_pattern.offset(1),
                                        dir << 1i32 | FULL as libc::c_int,
                                      );
                                      if !q.is_null() {
                                        (*ptr_to_globals).dot = q;
                                        msg = b"search hit BOTTOM, continuing at TOP\x00"
                                          as *const u8
                                          as *const libc::c_char;
                                        if dir == BACK as libc::c_int {
                                          msg = b"search hit TOP, continuing at BOTTOM\x00"
                                            as *const u8
                                            as *const libc::c_char
                                        }
                                      } else {
                                        msg = b"Pattern not found\x00" as *const u8
                                          as *const libc::c_char
                                      }
                                    }
                                    if !msg.is_null() {
                                      status_line_bold(
                                        b"%s\x00" as *const u8 as *const libc::c_char,
                                        msg,
                                      );
                                    }
                                    (*ptr_to_globals).cmdcnt -= 1;
                                    if (*ptr_to_globals).cmdcnt > 0 {
                                      current_block = 16813369756331276724;
                                    } else {
                                      break;
                                    }
                                  }
                                }
                              }
                              current_block = 15129665204879337069;
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
        108 | -4 => {
          current_block = 13993698454868426881;
          match current_block {
            16992905640583886232 => {
              loop {
                if (*(*ptr_to_globals).dot as libc::c_int - 'a' as i32) as libc::c_uchar
                  as libc::c_int
                  <= 'z' as i32 - 'a' as i32
                {
                  undo_push(
                    (*ptr_to_globals).dot,
                    1i32 as libc::c_uint,
                    1i32 as libc::c_uchar,
                  );
                  *(*ptr_to_globals).dot =
                    bb_ascii_toupper(*(*ptr_to_globals).dot as libc::c_uchar) as libc::c_char;
                  undo_push(
                    (*ptr_to_globals).dot,
                    1i32 as libc::c_uint,
                    2i32 as libc::c_uchar,
                  );
                } else if (*(*ptr_to_globals).dot as libc::c_int - 'A' as i32) as libc::c_uchar
                  as libc::c_int
                  <= 'Z' as i32 - 'A' as i32
                {
                  undo_push(
                    (*ptr_to_globals).dot,
                    1i32 as libc::c_uint,
                    1i32 as libc::c_uchar,
                  );
                  *(*ptr_to_globals).dot =
                    bb_ascii_tolower(*(*ptr_to_globals).dot as libc::c_uchar) as libc::c_char;
                  undo_push(
                    (*ptr_to_globals).dot,
                    1i32 as libc::c_uint,
                    2i32 as libc::c_uchar,
                  );
                }
                dot_right();
                (*ptr_to_globals).cmdcnt -= 1;
                if !((*ptr_to_globals).cmdcnt > 0) {
                  break;
                }
              }
              end_cmd_q();
              current_block = 15129665204879337069;
            }
            8729655159604064397 => {
              c1 = get_one_char();
              cnt = 0;
              if c1 == '.' as i32 {
                cnt = (*ptr_to_globals)
                  .rows
                  .wrapping_sub(2i32 as libc::c_uint)
                  .wrapping_div(2i32 as libc::c_uint) as libc::c_int
              }
              if c1 == '-' as i32 {
                cnt = (*ptr_to_globals).rows.wrapping_sub(2i32 as libc::c_uint) as libc::c_int
              }
              (*ptr_to_globals).screenbegin = begin_line((*ptr_to_globals).dot);
              dot_scroll(cnt, -1i32);
              current_block = 15129665204879337069;
            }
            15899500648299942075 => {
              (*ptr_to_globals).last_forward_char = get_one_char();
              do_cmd(';' as i32);
              if *(*ptr_to_globals).dot as libc::c_int == (*ptr_to_globals).last_forward_char {
                dot_left();
              }
              (*ptr_to_globals).last_forward_char = 0;
              current_block = 15129665204879337069;
            }
            9051390181078481641 => {
              c1 = get_one_char();
              if *(*ptr_to_globals).dot as libc::c_int != '\n' as i32 {
                (*ptr_to_globals).dot =
                  text_hole_delete((*ptr_to_globals).dot, (*ptr_to_globals).dot, 1i32);
                (*ptr_to_globals).dot =
                  char_insert((*ptr_to_globals).dot, c1 as libc::c_char, 2i32);
                dot_left();
              }
              end_cmd_q();
              current_block = 15129665204879337069;
            }
            877115918601926659 => {
              dir = FORWARD as libc::c_int;
              if c == 'b' as i32 {
                dir = BACK as libc::c_int
              }
              while !((*ptr_to_globals).dot.offset(dir as isize) < (*ptr_to_globals).text
                || (*ptr_to_globals).dot.offset(dir as isize) > (*ptr_to_globals).end.offset(-1))
              {
                (*ptr_to_globals).dot = (*ptr_to_globals).dot.offset(dir as isize);
                if ({
                  let mut bb__isspace: libc::c_uchar =
                    (*(*ptr_to_globals).dot as libc::c_int - 9i32) as libc::c_uchar;
                  (bb__isspace as libc::c_int == ' ' as i32 - 9i32
                    || bb__isspace as libc::c_int <= 13i32 - 9i32) as libc::c_int
                }) != 0
                {
                  (*ptr_to_globals).dot = skip_thing(
                    (*ptr_to_globals).dot,
                    if c == 'e' as i32 { 2i32 } else { 1i32 },
                    dir,
                    S_OVER_WS as libc::c_int,
                  )
                }
                if bb_ascii_isalnum(*(*ptr_to_globals).dot as libc::c_uchar) != 0
                  || *(*ptr_to_globals).dot as libc::c_int == '_' as i32
                {
                  (*ptr_to_globals).dot =
                    skip_thing((*ptr_to_globals).dot, 1i32, dir, S_END_ALNUM as libc::c_int)
                } else if *strchrnul(
                  b"!\"#$%&\'()*+,-./:;<=>?@[\\]^_`{|}~\x00" as *const u8 as *const libc::c_char,
                  *(*ptr_to_globals).dot as libc::c_int,
                )
                .offset(0)
                  != 0
                {
                  (*ptr_to_globals).dot =
                    skip_thing((*ptr_to_globals).dot, 1i32, dir, S_END_PUNCT as libc::c_int)
                }
                (*ptr_to_globals).cmdcnt -= 1;
                if !((*ptr_to_globals).cmdcnt > 0) {
                  break;
                }
              }
              current_block = 15129665204879337069;
            }
            1085022737867179637 => {
              dot_begin();
              dot_skip_over_ws();
              current_block = 15129665204879337069;
            }
            3113147720494587438 => {
              c1 = get_one_char();
              if c1 != 'Z' as i32 {
                indicate_error();
              } else if (*ptr_to_globals).modified_count != 0 {
                if 1i32 != 0 && (*ptr_to_globals).readonly_mode as libc::c_int != 0 {
                  status_line_bold(
                    b"\'%s\' is read only\x00" as *const u8 as *const libc::c_char,
                    (*ptr_to_globals).current_filename,
                  );
                } else {
                  cnt = file_write(
                    (*ptr_to_globals).current_filename,
                    (*ptr_to_globals).text,
                    (*ptr_to_globals).end.offset(-1),
                  );
                  if cnt < 0 {
                    if cnt == -1i32 {
                      status_line_bold(b"Write error: %m\x00" as *const u8 as *const libc::c_char);
                    }
                  } else if cnt as libc::c_long
                    == (*ptr_to_globals)
                      .end
                      .offset(-1)
                      .wrapping_offset_from((*ptr_to_globals).text)
                      as libc::c_long
                      + 1
                  {
                    (*ptr_to_globals).editing = 0 as smallint
                  }
                }
              } else {
                (*ptr_to_globals).editing = 0 as smallint
              }
              current_block = 15129665204879337069;
            }
            12960118908218882441 => {
              p = begin_line((*ptr_to_globals).dot);
              if *p.offset(-1i32 as isize) as libc::c_int == '\n' as i32 {
                dot_prev();
                current_block = 2087484904894455135;
              } else {
                dot_begin();
                (*ptr_to_globals).dot =
                  char_insert((*ptr_to_globals).dot, '\n' as i32 as libc::c_char, 1i32);
                dot_prev();
                current_block = 8629930936610358348;
              }
            }
            8720450212473544924 => {
              (*ptr_to_globals).dot = (*ptr_to_globals).screenbegin;
              cnt = 0;
              while (cnt as libc::c_uint)
                < (*ptr_to_globals)
                  .rows
                  .wrapping_sub(1i32 as libc::c_uint)
                  .wrapping_div(2i32 as libc::c_uint)
              {
                (*ptr_to_globals).dot = next_line((*ptr_to_globals).dot);
                cnt += 1
              }
              current_block = 15129665204879337069;
            }
            13015277209715431090 => {
              (*ptr_to_globals).dot = end_screen();
              if (*ptr_to_globals).cmdcnt as libc::c_uint
                > (*ptr_to_globals).rows.wrapping_sub(1i32 as libc::c_uint)
              {
                (*ptr_to_globals).cmdcnt =
                  (*ptr_to_globals).rows.wrapping_sub(1i32 as libc::c_uint) as libc::c_int
              }
              (*ptr_to_globals).cmdcnt -= 1;
              if (*ptr_to_globals).cmdcnt > 0 {
                do_cmd('-' as i32);
              }
              dot_begin();
              dot_skip_over_ws();
              current_block = 15129665204879337069;
            }
            9800435767766781385 => {
              loop {
                dot_end();
                if (*ptr_to_globals).dot < (*ptr_to_globals).end.offset(-1) {
                  undo_push(
                    (*ptr_to_globals).dot,
                    1i32 as libc::c_uint,
                    1i32 as libc::c_uchar,
                  );
                  let fresh15 = (*ptr_to_globals).dot;
                  (*ptr_to_globals).dot = (*ptr_to_globals).dot.offset(1);
                  *fresh15 = ' ' as i32 as libc::c_char;
                  undo_push(
                    (*ptr_to_globals).dot.offset(-1),
                    1i32 as libc::c_uint,
                    2i32 as libc::c_uchar,
                  );
                  while ({
                    let mut bb__isblank: libc::c_uchar = *(*ptr_to_globals).dot as libc::c_uchar;
                    (bb__isblank as libc::c_int == ' ' as i32
                      || bb__isblank as libc::c_int == '\t' as i32)
                      as libc::c_int
                  }) != 0
                  {
                    text_hole_delete((*ptr_to_globals).dot, (*ptr_to_globals).dot, 2i32);
                  }
                }
                (*ptr_to_globals).cmdcnt -= 1;
                if !((*ptr_to_globals).cmdcnt > 0) {
                  break;
                }
              }
              end_cmd_q();
              current_block = 15129665204879337069;
            }
            3432363526595694666 => {
              dot_begin();
              dot_skip_over_ws();
              current_block = 3268579060917229304;
            }
            3494829253343353619 => {
              (*ptr_to_globals).dot = (*ptr_to_globals).screenbegin;
              if (*ptr_to_globals).cmdcnt as libc::c_uint
                > (*ptr_to_globals).rows.wrapping_sub(1i32 as libc::c_uint)
              {
                (*ptr_to_globals).cmdcnt =
                  (*ptr_to_globals).rows.wrapping_sub(1i32 as libc::c_uint) as libc::c_int
              }
              (*ptr_to_globals).cmdcnt -= 1;
              if (*ptr_to_globals).cmdcnt > 0 {
                do_cmd('+' as i32);
              }
              dot_skip_over_ws();
              current_block = 15129665204879337069;
            }
            17973101765331640574 => {
              c1 = get_one_char();
              if c1 != 'g' as i32 {
                buf[0] = 'g' as i32 as libc::c_char;
                buf[1] = if c1 >= 0 { c1 } else { '*' as i32 } as libc::c_char;
                buf[2] = '\u{0}' as i32 as libc::c_char;
                not_implemented(buf.as_mut_ptr());
                current_block = 15129665204879337069;
              } else {
                if (*ptr_to_globals).cmdcnt == 0 {
                  (*ptr_to_globals).cmdcnt = 1i32
                }
                current_block = 11945623545738147997;
              }
            }
            16546625800574160972 => {
              save_dot = (*ptr_to_globals).dot;
              (*ptr_to_globals).dot = dollar_line((*ptr_to_globals).dot);
              (*ptr_to_globals).dot = yank_delete(
                save_dot,
                (*ptr_to_globals).dot,
                0,
                YANKDEL as libc::c_int,
                1i32,
              );
              if c == 'C' as i32 {
                current_block = 8629930936610358348;
              } else {
                if c == 'D' as i32 {
                  end_cmd_q();
                }
                current_block = 15129665204879337069;
              }
            }
            11937696639986586685 => {
              cnt = count_lines((*ptr_to_globals).text, (*ptr_to_globals).dot);
              c1 = get_one_char();
              find_range(&mut p, &mut q, c1 as libc::c_char);
              yank_delete(p, q, 1i32, YANKONLY as libc::c_int, 0);
              p = begin_line(p);
              q = end_line(q);
              i = count_lines(p, q);
              while i > 0 {
                if c == '<' as i32 {
                  if *p as libc::c_int == '\t' as i32 {
                    text_hole_delete(p, p, 0);
                  } else if *p as libc::c_int == ' ' as i32 {
                    j = 0;
                    while *p as libc::c_int == ' ' as i32 && j < (*ptr_to_globals).tabstop {
                      text_hole_delete(p, p, 0);
                      j += 1
                    }
                  }
                } else if c == '>' as i32 {
                  char_insert(p, '\t' as i32 as libc::c_char, 1i32);
                }
                i -= 1;
                p = next_line(p)
              }
              (*ptr_to_globals).dot = find_line(cnt);
              dot_skip_over_ws();
              end_cmd_q();
              current_block = 15129665204879337069;
            }
            17725350714912028156 => {
              p = get_input_line(b":\x00" as *const u8 as *const libc::c_char);
              colon(p);
              current_block = 15129665204879337069;
            }
            14526470074083880812 => {
              q = char_search(
                (*ptr_to_globals).dot,
                b"\n\n\x00" as *const u8 as *const libc::c_char,
                (FORWARD as libc::c_int) << 1i32 | FULL as libc::c_int,
              );
              if !q.is_null() {
                (*ptr_to_globals).dot = next_line(q)
              }
              current_block = 15129665204879337069;
            }
            8893187391306414141 => {
              q = char_search(
                (*ptr_to_globals).dot,
                b"\n\n\x00" as *const u8 as *const libc::c_char,
                ((BACK as libc::c_int as libc::c_uint) << 1i32
                  | FULL as libc::c_int as libc::c_uint) as libc::c_int,
              );
              if !q.is_null() {
                (*ptr_to_globals).dot = next_line(q)
              }
              current_block = 15129665204879337069;
            }
            7021673758293221412 => {
              dir = BACK as libc::c_int;
              p = (*ptr_to_globals).dot.offset(-1);
              if *(*ptr_to_globals).last_search_pattern.offset(0) as libc::c_int == '?' as i32 {
                dir = FORWARD as libc::c_int;
                p = (*ptr_to_globals).dot.offset(1)
              }
              current_block = 4166979493554389389;
            }
            18374191879090272823 => {
              buf[0] = c as libc::c_char;
              buf[1] = '\u{0}' as i32 as libc::c_char;
              q = get_input_line(buf.as_mut_ptr());
              if *q.offset(0) as libc::c_int != 0 && *q.offset(1) == 0 {
                if *(*ptr_to_globals).last_search_pattern.offset(0) != 0 {
                  *(*ptr_to_globals).last_search_pattern.offset(0) = c as libc::c_char
                }
                current_block = 7392824444931029276;
              } else if *q.offset(0) != 0 {
                free((*ptr_to_globals).last_search_pattern as *mut libc::c_void);
                (*ptr_to_globals).last_search_pattern = crate::libbb::xfuncs_printf::xstrdup(q);
                current_block = 7392824444931029276;
              } else {
                current_block = 15129665204879337069;
              }
            }
            16407828456666301883 => {
              if (*ptr_to_globals).last_forward_char == 0 {
                current_block = 15129665204879337069;
              } else {
                loop {
                  q = (*ptr_to_globals).dot.offset(-1);
                  while q >= (*ptr_to_globals).text
                    && *q as libc::c_int != '\n' as i32
                    && *q as libc::c_int != (*ptr_to_globals).last_forward_char
                  {
                    q = q.offset(-1)
                  }
                  if q >= (*ptr_to_globals).text
                    && *q as libc::c_int == (*ptr_to_globals).last_forward_char
                  {
                    (*ptr_to_globals).dot = q
                  }
                  (*ptr_to_globals).cmdcnt -= 1;
                  if !((*ptr_to_globals).cmdcnt > 0) {
                    break;
                  }
                }
                current_block = 15129665204879337069;
              }
            }
            9018432604062702004 => {
              q = (*ptr_to_globals).dot;
              while q < (*ptr_to_globals).end && *q as libc::c_int != '\n' as i32 {
                if !strchr(
                  b"()[]{}\x00" as *const u8 as *const libc::c_char,
                  *q as libc::c_int,
                )
                .is_null()
                {
                  p = find_pair(q, *q);
                  if p.is_null() {
                    indicate_error();
                  } else {
                    (*ptr_to_globals).dot = p
                  }
                  break;
                } else {
                  q = q.offset(1)
                }
              }
              if *q as libc::c_int == '\n' as i32 {
                indicate_error();
              }
              current_block = 15129665204879337069;
            }
            10247103787464459848 => {
              p = (*ptr_to_globals).reg[(*ptr_to_globals).YDreg as usize];
              if p.is_null() {
                status_line_bold(
                  b"Nothing in register %c\x00" as *const u8 as *const libc::c_char,
                  what_reg() as libc::c_int,
                );
              } else {
                if !strchr(p, '\n' as i32).is_null() {
                  if c == 'P' as i32 {
                    dot_begin();
                  }
                  if c == 'p' as i32 {
                    if end_line((*ptr_to_globals).dot) == (*ptr_to_globals).end.offset(-1) {
                      (*ptr_to_globals).dot = (*ptr_to_globals).end
                    } else {
                      dot_next();
                    }
                  }
                } else if c == 'p' as i32 {
                  dot_right();
                }
                string_insert((*ptr_to_globals).dot, p, 1i32);
                end_cmd_q();
              }
              current_block = 15129665204879337069;
            }
            15260732871948875843 => {
              c1 = (get_one_char() | 0x20i32) - 'a' as i32;
              if c1 as libc::c_uint <= 25i32 as libc::c_uint {
                (*ptr_to_globals).mark[c1 as usize] = (*ptr_to_globals).dot
              } else {
                indicate_error();
              }
              current_block = 15129665204879337069;
            }
            12738322036487086035 => {
              c1 = get_one_char() | 0x20i32;
              if (c1 - 'a' as i32) as libc::c_uint <= 25i32 as libc::c_uint {
                c1 = c1 - 'a' as i32;
                q = (*ptr_to_globals).mark[c1 as usize];
                if (*ptr_to_globals).text <= q && q < (*ptr_to_globals).end {
                  (*ptr_to_globals).dot = q;
                  dot_begin();
                  dot_skip_over_ws();
                }
              } else if c1 == '\'' as i32 {
                (*ptr_to_globals).dot = swap_context((*ptr_to_globals).dot);
                dot_begin();
                dot_skip_over_ws();
              } else {
                indicate_error();
              }
              current_block = 15129665204879337069;
            }
            13255096073384561358 => {
              c1 = (get_one_char() | 0x20i32) - 'a' as i32;
              if c1 as libc::c_uint <= 25i32 as libc::c_uint {
                (*ptr_to_globals).YDreg = c1 as smalluint
              } else {
                indicate_error();
              }
              current_block = 15129665204879337069;
            }
            10258711639984089377 => {
              if (*ptr_to_globals).cmd_mode as libc::c_int == 0 {
                indicate_error();
              }
              (*ptr_to_globals).cmd_mode = 0 as smallint;
              undo_queue_commit();
              end_cmd_q();
              (*ptr_to_globals).last_status_cksum = 0;
              current_block = 15129665204879337069;
            }
            11439127087547047736 => {
              buf[0] = c as libc::c_char;
              buf[1] = '\u{0}' as i32 as libc::c_char;
              not_implemented(buf.as_mut_ptr());
              end_cmd_q();
              current_block = 17440971994642376514;
            }
            7961798899781870241 => {
              dot_scroll(
                (*ptr_to_globals).rows.wrapping_sub(2i32 as libc::c_uint) as libc::c_int,
                -1i32,
              );
              current_block = 15129665204879337069;
            }
            9426343755402444879 => {
              dot_scroll(
                (*ptr_to_globals)
                  .rows
                  .wrapping_sub(2i32 as libc::c_uint)
                  .wrapping_div(2i32 as libc::c_uint) as libc::c_int,
                1i32,
              );
              current_block = 15129665204879337069;
            }
            13352459794680105913 => {
              dot_scroll(1i32, 1i32);
              current_block = 15129665204879337069;
            }
            14142272253464333006 => {
              dot_scroll(
                (*ptr_to_globals).rows.wrapping_sub(2i32 as libc::c_uint) as libc::c_int,
                1i32,
              );
              current_block = 15129665204879337069;
            }
            10758177197742640066 => {
              (*ptr_to_globals).last_status_cksum = 0;
              current_block = 15129665204879337069;
            }
            6152256259730122749 => {
              current_block = 7534742345255184552;
            }
            12883932598258173301 => {
              current_block = 8800996768013373992;
            }
            11242998110520238401 => {
              redraw(1i32);
              current_block = 15129665204879337069;
            }
            13619733043935729992 => {
              loop {
                dot_next();
                dot_skip_over_ws();
                (*ptr_to_globals).cmdcnt -= 1;
                if !((*ptr_to_globals).cmdcnt > 0) {
                  break;
                }
              }
              current_block = 15129665204879337069;
            }
            9339065157412720613 => {
              dot_scroll(
                (*ptr_to_globals)
                  .rows
                  .wrapping_sub(2i32 as libc::c_uint)
                  .wrapping_div(2i32 as libc::c_uint) as libc::c_int,
                -1i32,
              );
              current_block = 15129665204879337069;
            }
            11447082683497798022 => {
              dot_scroll(1i32, -1i32);
              current_block = 15129665204879337069;
            }
            5182000506326660482 => {
              current_block = 13993698454868426881;
            }
            1105010766850597332 => {
              if !(*ptr_to_globals).reg[27].is_null() {
                p = begin_line((*ptr_to_globals).dot);
                q = end_line((*ptr_to_globals).dot);
                p = text_hole_delete(p, q, 1i32);
                p = p.offset(string_insert(p, (*ptr_to_globals).reg[27], 2i32) as isize);
                (*ptr_to_globals).dot = p;
                dot_skip_over_ws();
              }
              current_block = 15129665204879337069;
            }
            8616046655533110204 => {
              undo_pop();
              current_block = 15129665204879337069;
            }
            5127767458142431603 => {
              loop {
                (*ptr_to_globals).dot = end_line((*ptr_to_globals).dot);
                (*ptr_to_globals).cmdcnt -= 1;
                if (*ptr_to_globals).cmdcnt <= 0 {
                  break;
                }
                dot_next();
              }
              current_block = 15129665204879337069;
            }
            222014967776118151 => {
              (*ptr_to_globals).last_forward_char = get_one_char();
              current_block = 7856905509180742666;
            }
            11209792479411604110 => {
              loop {
                dot_prev();
                dot_skip_over_ws();
                (*ptr_to_globals).cmdcnt -= 1;
                if !((*ptr_to_globals).cmdcnt > 0) {
                  break;
                }
              }
              current_block = 15129665204879337069;
            }
            3364823792826654116 => {
              if (*ptr_to_globals).lmc_len != 0 {
                (*ptr_to_globals).ioq_start = crate::libbb::xfuncs_printf::xstrndup(
                  (*ptr_to_globals).last_modifying_cmd.as_mut_ptr(),
                  (*ptr_to_globals).lmc_len,
                );
                (*ptr_to_globals).ioq = (*ptr_to_globals).ioq_start
              }
              current_block = 15129665204879337069;
            }
            18096603330221575131 => {
              current_block = 17498168302144015873;
            }
            16891123271837848903 => {
              dot_end();
              current_block = 1752638907092016026;
            }
            8517235759107662071 => {
              current_block = 5847749760081351726;
            }
            12525254419223051704 => {
              if (*ptr_to_globals).dot < (*ptr_to_globals).end.offset(-1) {
                (*ptr_to_globals).dot = yank_delete(
                  (*ptr_to_globals).dot,
                  (*ptr_to_globals).dot,
                  1i32,
                  YANKDEL as libc::c_int,
                  1i32,
                )
              }
              current_block = 15129665204879337069;
            }
            15232911949322867522 => {
              current_block = 17251831742223396249;
            }
            10863374208794025069 => {
              current_block = 1895262434596074581;
            }
            451126677064669119 => {
              loop {
                dot_prev();
                (*ptr_to_globals).dot = move_to_col(
                  (*ptr_to_globals).dot,
                  (*ptr_to_globals).ccol + (*ptr_to_globals).offset,
                );
                (*ptr_to_globals).cmdcnt -= 1;
                if !((*ptr_to_globals).cmdcnt > 0) {
                  break;
                }
              }
              current_block = 15129665204879337069;
            }
            4611735929166613116 => {
              loop {
                if bb_ascii_isalnum(*(*ptr_to_globals).dot as libc::c_uchar) != 0
                  || *(*ptr_to_globals).dot as libc::c_int == '_' as i32
                {
                  (*ptr_to_globals).dot = skip_thing(
                    (*ptr_to_globals).dot,
                    1i32,
                    FORWARD as libc::c_int,
                    S_END_ALNUM as libc::c_int,
                  )
                } else if *strchrnul(
                  b"!\"#$%&\'()*+,-./:;<=>?@[\\]^_`{|}~\x00" as *const u8 as *const libc::c_char,
                  *(*ptr_to_globals).dot as libc::c_int,
                )
                .offset(0)
                  != 0
                {
                  (*ptr_to_globals).dot = skip_thing(
                    (*ptr_to_globals).dot,
                    1i32,
                    FORWARD as libc::c_int,
                    S_END_PUNCT as libc::c_int,
                  )
                }
                if (*ptr_to_globals).dot < (*ptr_to_globals).end.offset(-1) {
                  (*ptr_to_globals).dot = (*ptr_to_globals).dot.offset(1)
                }
                if ({
                  let mut bb__isspace: libc::c_uchar =
                    (*(*ptr_to_globals).dot as libc::c_int - 9i32) as libc::c_uchar;
                  (bb__isspace as libc::c_int == ' ' as i32 - 9i32
                    || bb__isspace as libc::c_int <= 13i32 - 9i32) as libc::c_int
                }) != 0
                {
                  (*ptr_to_globals).dot = skip_thing(
                    (*ptr_to_globals).dot,
                    2i32,
                    FORWARD as libc::c_int,
                    S_OVER_WS as libc::c_int,
                  )
                }
                (*ptr_to_globals).cmdcnt -= 1;
                if !((*ptr_to_globals).cmdcnt > 0) {
                  break;
                }
              }
              current_block = 15129665204879337069;
            }
            4386451087681909888 => {
              (*ptr_to_globals).dot =
                move_to_col((*ptr_to_globals).dot, (*ptr_to_globals).cmdcnt - 1i32);
              current_block = 15129665204879337069;
            }
            1296397779060594135 => {
              dot_begin();
              current_block = 15129665204879337069;
            }
            _ => {}
          }
          match current_block {
            15129665204879337069 => {}
            8629930936610358348 => {}
            _ => {
              match current_block {
                17251831742223396249 => {
                  dir = 0;
                  if c == 'X' as i32 {
                    dir = -1i32
                  }
                  loop {
                    if *(*ptr_to_globals).dot.offset(dir as isize) as libc::c_int != '\n' as i32 {
                      if c == 'X' as i32 {
                        (*ptr_to_globals).dot = (*ptr_to_globals).dot.offset(-1)
                      }
                      (*ptr_to_globals).dot = yank_delete(
                        (*ptr_to_globals).dot,
                        (*ptr_to_globals).dot,
                        0,
                        YANKDEL as libc::c_int,
                        1i32,
                      )
                    }
                    (*ptr_to_globals).cmdcnt -= 1;
                    if !((*ptr_to_globals).cmdcnt > 0) {
                      break;
                    }
                  }
                  end_cmd_q();
                  if c == 's' as i32 {
                    current_block = 8629930936610358348;
                  } else {
                    current_block = 15129665204879337069;
                  }
                }
                2087484904894455135 => {
                  dot_end();
                  (*ptr_to_globals).dot =
                    char_insert((*ptr_to_globals).dot, '\n' as i32 as libc::c_char, 1i32);
                  current_block = 8629930936610358348;
                }
                11945623545738147997 => {
                  (*ptr_to_globals).dot = (*ptr_to_globals).end.offset(-1);
                  if (*ptr_to_globals).cmdcnt > 0 {
                    (*ptr_to_globals).dot = find_line((*ptr_to_globals).cmdcnt)
                  }
                  dot_skip_over_ws();
                  current_block = 15129665204879337069;
                }
                5847749760081351726 => {
                  dir = FORWARD as libc::c_int;
                  if c == 'B' as i32 {
                    dir = BACK as libc::c_int
                  }
                  loop {
                    if c == 'W' as i32
                      || ({
                        let mut bb__isspace: libc::c_uchar =
                          (*(*ptr_to_globals).dot.offset(dir as isize) as libc::c_int - 9i32)
                            as libc::c_uchar;
                        (bb__isspace as libc::c_int == ' ' as i32 - 9i32
                          || bb__isspace as libc::c_int <= 13i32 - 9i32)
                          as libc::c_int
                      }) != 0
                    {
                      (*ptr_to_globals).dot =
                        skip_thing((*ptr_to_globals).dot, 1i32, dir, S_TO_WS as libc::c_int);
                      (*ptr_to_globals).dot =
                        skip_thing((*ptr_to_globals).dot, 2i32, dir, S_OVER_WS as libc::c_int)
                    }
                    if c != 'W' as i32 {
                      (*ptr_to_globals).dot =
                        skip_thing((*ptr_to_globals).dot, 1i32, dir, S_BEFORE_WS as libc::c_int)
                    }
                    (*ptr_to_globals).cmdcnt -= 1;
                    if !((*ptr_to_globals).cmdcnt > 0) {
                      break;
                    }
                  }
                  current_block = 15129665204879337069;
                }
                17440971994642376514 => {
                  current_block = 15129665204879337069;
                }
                7534742345255184552 => {
                  current_block = 17247297260531395789;
                }
                8800996768013373992 => {
                  loop {
                    dot_next();
                    (*ptr_to_globals).dot = move_to_col(
                      (*ptr_to_globals).dot,
                      (*ptr_to_globals).ccol + (*ptr_to_globals).offset,
                    );
                    (*ptr_to_globals).cmdcnt -= 1;
                    if !((*ptr_to_globals).cmdcnt > 0) {
                      break;
                    }
                  }
                  current_block = 15129665204879337069;
                }
                13993698454868426881 => {
                  loop {
                    dot_right();
                    (*ptr_to_globals).cmdcnt -= 1;
                    if !((*ptr_to_globals).cmdcnt > 0) {
                      break;
                    }
                  }
                  current_block = 15129665204879337069;
                }
                7856905509180742666 => {
                  while !((*ptr_to_globals).last_forward_char == 0) {
                    q = (*ptr_to_globals).dot.offset(1);
                    while q < (*ptr_to_globals).end.offset(-1)
                      && *q as libc::c_int != '\n' as i32
                      && *q as libc::c_int != (*ptr_to_globals).last_forward_char
                    {
                      q = q.offset(1)
                    }
                    if *q as libc::c_int == (*ptr_to_globals).last_forward_char {
                      (*ptr_to_globals).dot = q
                    }
                    (*ptr_to_globals).cmdcnt -= 1;
                    if !((*ptr_to_globals).cmdcnt > 0) {
                      break;
                    }
                  }
                  current_block = 15129665204879337069;
                }
                17498168302144015873 => {
                  current_block = 8681395796513813967;
                }
                1752638907092016026 => {
                  if *(*ptr_to_globals).dot as libc::c_int != '\n' as i32 {
                    (*ptr_to_globals).dot = (*ptr_to_globals).dot.offset(1)
                  }
                  current_block = 8629930936610358348;
                }
                3268579060917229304 => {
                  current_block = 8629930936610358348;
                }
                1895262434596074581 => {
                  current_block = 8908416993177701018;
                }
                _ => {}
              }
              match current_block {
                8629930936610358348 => {}
                15129665204879337069 => {}
                _ => {
                  match current_block {
                    17247297260531395789 => {
                      loop {
                        dot_left();
                        (*ptr_to_globals).cmdcnt -= 1;
                        if !((*ptr_to_globals).cmdcnt > 0) {
                          break;
                        }
                      }
                      current_block = 15129665204879337069;
                    }
                    8681395796513813967 => {
                      current_block = 5591548203144509315;
                    }
                    8908416993177701018 => {
                      current_block = 16124761010012532485;
                    }
                    _ => {}
                  }
                  match current_block {
                    15129665204879337069 => {}
                    _ => {
                      match current_block {
                        16124761010012532485 => {
                          let mut yf: libc::c_int = 0;
                          let mut ml: libc::c_int = 0;
                          let mut whole: libc::c_int = 0;
                          yf = YANKDEL as libc::c_int;
                          if c == 'y' as i32 || c == 'Y' as i32 {
                            yf = YANKONLY as libc::c_int
                          }
                          c1 = 'y' as i32;
                          if c != 'Y' as i32 {
                            c1 = get_one_char()
                          }
                          ml = find_range(&mut p, &mut q, c1 as libc::c_char);
                          place_cursor(0i32, 0);
                          if c1 == 27i32 {
                            c1 = 27i32;
                            c = c1
                          } else if !strchr(b"wW\x00" as *const u8 as *const libc::c_char, c1)
                            .is_null()
                          {
                            ml = 0;
                            if c == 'c' as i32 {
                              while ({
                                let mut bb__isspace: libc::c_uchar =
                                  (*q as libc::c_int - 9i32) as libc::c_uchar;
                                (bb__isspace as libc::c_int == ' ' as i32 - 9i32
                                  || bb__isspace as libc::c_int <= 13i32 - 9i32)
                                  as libc::c_int
                              }) != 0
                                && q > p
                              {
                                q = q.offset(-1)
                              }
                            }
                            (*ptr_to_globals).dot = yank_delete(p, q, ml, yf, 1i32)
                          } else if !strchr(
                            b"^0bBeEft%$ lh\x08\x7f\x00" as *const u8 as *const libc::c_char,
                            c1,
                          )
                          .is_null()
                          {
                            (*ptr_to_globals).dot = yank_delete(p, q, ml, yf, 1i32)
                          } else if !strchr(
                            b"cdykjGHL+-{}\r\n\x00" as *const u8 as *const libc::c_char,
                            c1,
                          )
                          .is_null()
                          {
                            (*ptr_to_globals).dot = yank_delete(p, q, ml, yf, 1i32);
                            whole = 1i32
                          } else {
                            c1 = 27i32;
                            c = c1;
                            ml = 0;
                            indicate_error();
                          }
                          if ml != 0 && whole != 0 {
                            if c == 'c' as i32 {
                              (*ptr_to_globals).dot = char_insert(
                                (*ptr_to_globals).dot,
                                '\n' as i32 as libc::c_char,
                                2i32,
                              );
                              if whole != 0
                                && (*ptr_to_globals).dot != (*ptr_to_globals).end.offset(-1)
                              {
                                dot_prev();
                              }
                            } else if c == 'd' as i32 {
                              dot_begin();
                              dot_skip_over_ws();
                            }
                          }
                          if c1 != 27i32 {
                            if c == 'c' as i32 {
                              strcpy(
                                buf.as_mut_ptr(),
                                b"Change\x00" as *const u8 as *const libc::c_char,
                              );
                              current_block = 8629930936610358348;
                            } else {
                              if c == 'd' as i32 {
                                strcpy(
                                  buf.as_mut_ptr(),
                                  b"Delete\x00" as *const u8 as *const libc::c_char,
                                );
                              }
                              if c == 'y' as i32 || c == 'Y' as i32 {
                                strcpy(
                                  buf.as_mut_ptr(),
                                  b"Yank\x00" as *const u8 as *const libc::c_char,
                                );
                              }
                              p = (*ptr_to_globals).reg[(*ptr_to_globals).YDreg as usize];
                              q = p.offset(strlen(p) as isize);
                              cnt = 0;
                              while p <= q {
                                if *p as libc::c_int == '\n' as i32 {
                                  cnt += 1
                                }
                                p = p.offset(1)
                              }
                              status_line(
                                b"%s %u lines (%u chars) using [%c]\x00" as *const u8
                                  as *const libc::c_char,
                                buf.as_mut_ptr(),
                                cnt,
                                strlen((*ptr_to_globals).reg[(*ptr_to_globals).YDreg as usize])
                                  as libc::c_uint,
                                what_reg() as libc::c_int,
                              );
                              end_cmd_q();
                              current_block = 15129665204879337069;
                            }
                          } else {
                            current_block = 15129665204879337069;
                          }
                        }
                        5591548203144509315 => {
                          current_block = 2636677179867529885;
                        }
                        _ => {}
                      }
                      match current_block {
                        15129665204879337069 => {}
                        8629930936610358348 => {}
                        _ => {
                          match current_block {
                            2636677179867529885 => {
                              current_block = 12309206730560524281;
                            }
                            _ => {}
                          }
                          match current_block {
                            12309206730560524281 => {
                              current_block = 3325768110057758661;
                            }
                            _ => {}
                          }
                          match current_block {
                            3325768110057758661 => {
                              current_block = 14815832896553429982;
                            }
                            _ => {}
                          }
                          match current_block {
                            14815832896553429982 => {
                              current_block = 10731695520297161438;
                            }
                            _ => {}
                          }
                          match current_block {
                            10731695520297161438 => {
                              if c == '0' as i32 && (*ptr_to_globals).cmdcnt < 1i32 {
                                dot_begin();
                              } else {
                                (*ptr_to_globals).cmdcnt =
                                  (*ptr_to_globals).cmdcnt * 10i32 + (c - '0' as i32)
                              }
                              current_block = 15129665204879337069;
                            }
                            _ => {}
                          }
                          match current_block {
                            15129665204879337069 => {}
                            _ => {
                              loop {
                                match current_block {
                                  16813369756331276724 => {
                                    msg = std::ptr::null();
                                    current_block = 7392824444931029276;
                                  }
                                  7392824444931029276 => {
                                    dir = FORWARD as libc::c_int;
                                    p = (*ptr_to_globals).dot.offset(1);
                                    if *(*ptr_to_globals).last_search_pattern.offset(0)
                                      as libc::c_int
                                      == '?' as i32
                                    {
                                      dir = BACK as libc::c_int;
                                      p = (*ptr_to_globals).dot.offset(-1)
                                    }
                                    current_block = 4166979493554389389;
                                  }
                                  _ => {
                                    q = char_search(
                                      p,
                                      (*ptr_to_globals).last_search_pattern.offset(1),
                                      dir << 1i32 | FULL as libc::c_int,
                                    );
                                    if !q.is_null() {
                                      (*ptr_to_globals).dot = q;
                                      msg = std::ptr::null()
                                    } else {
                                      p = (*ptr_to_globals).text;
                                      if dir == BACK as libc::c_int {
                                        p = (*ptr_to_globals).end.offset(-1)
                                      }
                                      q = char_search(
                                        p,
                                        (*ptr_to_globals).last_search_pattern.offset(1),
                                        dir << 1i32 | FULL as libc::c_int,
                                      );
                                      if !q.is_null() {
                                        (*ptr_to_globals).dot = q;
                                        msg = b"search hit BOTTOM, continuing at TOP\x00"
                                          as *const u8
                                          as *const libc::c_char;
                                        if dir == BACK as libc::c_int {
                                          msg = b"search hit TOP, continuing at BOTTOM\x00"
                                            as *const u8
                                            as *const libc::c_char
                                        }
                                      } else {
                                        msg = b"Pattern not found\x00" as *const u8
                                          as *const libc::c_char
                                      }
                                    }
                                    if !msg.is_null() {
                                      status_line_bold(
                                        b"%s\x00" as *const u8 as *const libc::c_char,
                                        msg,
                                      );
                                    }
                                    (*ptr_to_globals).cmdcnt -= 1;
                                    if (*ptr_to_globals).cmdcnt > 0 {
                                      current_block = 16813369756331276724;
                                    } else {
                                      break;
                                    }
                                  }
                                }
                              }
                              current_block = 15129665204879337069;
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
        34 => {
          current_block = 13255096073384561358;
          match current_block {
            16992905640583886232 => {
              loop {
                if (*(*ptr_to_globals).dot as libc::c_int - 'a' as i32) as libc::c_uchar
                  as libc::c_int
                  <= 'z' as i32 - 'a' as i32
                {
                  undo_push(
                    (*ptr_to_globals).dot,
                    1i32 as libc::c_uint,
                    1i32 as libc::c_uchar,
                  );
                  *(*ptr_to_globals).dot =
                    bb_ascii_toupper(*(*ptr_to_globals).dot as libc::c_uchar) as libc::c_char;
                  undo_push(
                    (*ptr_to_globals).dot,
                    1i32 as libc::c_uint,
                    2i32 as libc::c_uchar,
                  );
                } else if (*(*ptr_to_globals).dot as libc::c_int - 'A' as i32) as libc::c_uchar
                  as libc::c_int
                  <= 'Z' as i32 - 'A' as i32
                {
                  undo_push(
                    (*ptr_to_globals).dot,
                    1i32 as libc::c_uint,
                    1i32 as libc::c_uchar,
                  );
                  *(*ptr_to_globals).dot =
                    bb_ascii_tolower(*(*ptr_to_globals).dot as libc::c_uchar) as libc::c_char;
                  undo_push(
                    (*ptr_to_globals).dot,
                    1i32 as libc::c_uint,
                    2i32 as libc::c_uchar,
                  );
                }
                dot_right();
                (*ptr_to_globals).cmdcnt -= 1;
                if !((*ptr_to_globals).cmdcnt > 0) {
                  break;
                }
              }
              end_cmd_q();
              current_block = 15129665204879337069;
            }
            8729655159604064397 => {
              c1 = get_one_char();
              cnt = 0;
              if c1 == '.' as i32 {
                cnt = (*ptr_to_globals)
                  .rows
                  .wrapping_sub(2i32 as libc::c_uint)
                  .wrapping_div(2i32 as libc::c_uint) as libc::c_int
              }
              if c1 == '-' as i32 {
                cnt = (*ptr_to_globals).rows.wrapping_sub(2i32 as libc::c_uint) as libc::c_int
              }
              (*ptr_to_globals).screenbegin = begin_line((*ptr_to_globals).dot);
              dot_scroll(cnt, -1i32);
              current_block = 15129665204879337069;
            }
            15899500648299942075 => {
              (*ptr_to_globals).last_forward_char = get_one_char();
              do_cmd(';' as i32);
              if *(*ptr_to_globals).dot as libc::c_int == (*ptr_to_globals).last_forward_char {
                dot_left();
              }
              (*ptr_to_globals).last_forward_char = 0;
              current_block = 15129665204879337069;
            }
            9051390181078481641 => {
              c1 = get_one_char();
              if *(*ptr_to_globals).dot as libc::c_int != '\n' as i32 {
                (*ptr_to_globals).dot =
                  text_hole_delete((*ptr_to_globals).dot, (*ptr_to_globals).dot, 1i32);
                (*ptr_to_globals).dot =
                  char_insert((*ptr_to_globals).dot, c1 as libc::c_char, 2i32);
                dot_left();
              }
              end_cmd_q();
              current_block = 15129665204879337069;
            }
            877115918601926659 => {
              dir = FORWARD as libc::c_int;
              if c == 'b' as i32 {
                dir = BACK as libc::c_int
              }
              while !((*ptr_to_globals).dot.offset(dir as isize) < (*ptr_to_globals).text
                || (*ptr_to_globals).dot.offset(dir as isize) > (*ptr_to_globals).end.offset(-1))
              {
                (*ptr_to_globals).dot = (*ptr_to_globals).dot.offset(dir as isize);
                if ({
                  let mut bb__isspace: libc::c_uchar =
                    (*(*ptr_to_globals).dot as libc::c_int - 9i32) as libc::c_uchar;
                  (bb__isspace as libc::c_int == ' ' as i32 - 9i32
                    || bb__isspace as libc::c_int <= 13i32 - 9i32) as libc::c_int
                }) != 0
                {
                  (*ptr_to_globals).dot = skip_thing(
                    (*ptr_to_globals).dot,
                    if c == 'e' as i32 { 2i32 } else { 1i32 },
                    dir,
                    S_OVER_WS as libc::c_int,
                  )
                }
                if bb_ascii_isalnum(*(*ptr_to_globals).dot as libc::c_uchar) != 0
                  || *(*ptr_to_globals).dot as libc::c_int == '_' as i32
                {
                  (*ptr_to_globals).dot =
                    skip_thing((*ptr_to_globals).dot, 1i32, dir, S_END_ALNUM as libc::c_int)
                } else if *strchrnul(
                  b"!\"#$%&\'()*+,-./:;<=>?@[\\]^_`{|}~\x00" as *const u8 as *const libc::c_char,
                  *(*ptr_to_globals).dot as libc::c_int,
                )
                .offset(0)
                  != 0
                {
                  (*ptr_to_globals).dot =
                    skip_thing((*ptr_to_globals).dot, 1i32, dir, S_END_PUNCT as libc::c_int)
                }
                (*ptr_to_globals).cmdcnt -= 1;
                if !((*ptr_to_globals).cmdcnt > 0) {
                  break;
                }
              }
              current_block = 15129665204879337069;
            }
            1085022737867179637 => {
              dot_begin();
              dot_skip_over_ws();
              current_block = 15129665204879337069;
            }
            3113147720494587438 => {
              c1 = get_one_char();
              if c1 != 'Z' as i32 {
                indicate_error();
              } else if (*ptr_to_globals).modified_count != 0 {
                if 1i32 != 0 && (*ptr_to_globals).readonly_mode as libc::c_int != 0 {
                  status_line_bold(
                    b"\'%s\' is read only\x00" as *const u8 as *const libc::c_char,
                    (*ptr_to_globals).current_filename,
                  );
                } else {
                  cnt = file_write(
                    (*ptr_to_globals).current_filename,
                    (*ptr_to_globals).text,
                    (*ptr_to_globals).end.offset(-1),
                  );
                  if cnt < 0 {
                    if cnt == -1i32 {
                      status_line_bold(b"Write error: %m\x00" as *const u8 as *const libc::c_char);
                    }
                  } else if cnt as libc::c_long
                    == (*ptr_to_globals)
                      .end
                      .offset(-1)
                      .wrapping_offset_from((*ptr_to_globals).text)
                      as libc::c_long
                      + 1
                  {
                    (*ptr_to_globals).editing = 0 as smallint
                  }
                }
              } else {
                (*ptr_to_globals).editing = 0 as smallint
              }
              current_block = 15129665204879337069;
            }
            12960118908218882441 => {
              p = begin_line((*ptr_to_globals).dot);
              if *p.offset(-1i32 as isize) as libc::c_int == '\n' as i32 {
                dot_prev();
                current_block = 2087484904894455135;
              } else {
                dot_begin();
                (*ptr_to_globals).dot =
                  char_insert((*ptr_to_globals).dot, '\n' as i32 as libc::c_char, 1i32);
                dot_prev();
                current_block = 8629930936610358348;
              }
            }
            8720450212473544924 => {
              (*ptr_to_globals).dot = (*ptr_to_globals).screenbegin;
              cnt = 0;
              while (cnt as libc::c_uint)
                < (*ptr_to_globals)
                  .rows
                  .wrapping_sub(1i32 as libc::c_uint)
                  .wrapping_div(2i32 as libc::c_uint)
              {
                (*ptr_to_globals).dot = next_line((*ptr_to_globals).dot);
                cnt += 1
              }
              current_block = 15129665204879337069;
            }
            13015277209715431090 => {
              (*ptr_to_globals).dot = end_screen();
              if (*ptr_to_globals).cmdcnt as libc::c_uint
                > (*ptr_to_globals).rows.wrapping_sub(1i32 as libc::c_uint)
              {
                (*ptr_to_globals).cmdcnt =
                  (*ptr_to_globals).rows.wrapping_sub(1i32 as libc::c_uint) as libc::c_int
              }
              (*ptr_to_globals).cmdcnt -= 1;
              if (*ptr_to_globals).cmdcnt > 0 {
                do_cmd('-' as i32);
              }
              dot_begin();
              dot_skip_over_ws();
              current_block = 15129665204879337069;
            }
            9800435767766781385 => {
              loop {
                dot_end();
                if (*ptr_to_globals).dot < (*ptr_to_globals).end.offset(-1) {
                  undo_push(
                    (*ptr_to_globals).dot,
                    1i32 as libc::c_uint,
                    1i32 as libc::c_uchar,
                  );
                  let fresh15 = (*ptr_to_globals).dot;
                  (*ptr_to_globals).dot = (*ptr_to_globals).dot.offset(1);
                  *fresh15 = ' ' as i32 as libc::c_char;
                  undo_push(
                    (*ptr_to_globals).dot.offset(-1),
                    1i32 as libc::c_uint,
                    2i32 as libc::c_uchar,
                  );
                  while ({
                    let mut bb__isblank: libc::c_uchar = *(*ptr_to_globals).dot as libc::c_uchar;
                    (bb__isblank as libc::c_int == ' ' as i32
                      || bb__isblank as libc::c_int == '\t' as i32)
                      as libc::c_int
                  }) != 0
                  {
                    text_hole_delete((*ptr_to_globals).dot, (*ptr_to_globals).dot, 2i32);
                  }
                }
                (*ptr_to_globals).cmdcnt -= 1;
                if !((*ptr_to_globals).cmdcnt > 0) {
                  break;
                }
              }
              end_cmd_q();
              current_block = 15129665204879337069;
            }
            3432363526595694666 => {
              dot_begin();
              dot_skip_over_ws();
              current_block = 3268579060917229304;
            }
            3494829253343353619 => {
              (*ptr_to_globals).dot = (*ptr_to_globals).screenbegin;
              if (*ptr_to_globals).cmdcnt as libc::c_uint
                > (*ptr_to_globals).rows.wrapping_sub(1i32 as libc::c_uint)
              {
                (*ptr_to_globals).cmdcnt =
                  (*ptr_to_globals).rows.wrapping_sub(1i32 as libc::c_uint) as libc::c_int
              }
              (*ptr_to_globals).cmdcnt -= 1;
              if (*ptr_to_globals).cmdcnt > 0 {
                do_cmd('+' as i32);
              }
              dot_skip_over_ws();
              current_block = 15129665204879337069;
            }
            17973101765331640574 => {
              c1 = get_one_char();
              if c1 != 'g' as i32 {
                buf[0] = 'g' as i32 as libc::c_char;
                buf[1] = if c1 >= 0 { c1 } else { '*' as i32 } as libc::c_char;
                buf[2] = '\u{0}' as i32 as libc::c_char;
                not_implemented(buf.as_mut_ptr());
                current_block = 15129665204879337069;
              } else {
                if (*ptr_to_globals).cmdcnt == 0 {
                  (*ptr_to_globals).cmdcnt = 1i32
                }
                current_block = 11945623545738147997;
              }
            }
            16546625800574160972 => {
              save_dot = (*ptr_to_globals).dot;
              (*ptr_to_globals).dot = dollar_line((*ptr_to_globals).dot);
              (*ptr_to_globals).dot = yank_delete(
                save_dot,
                (*ptr_to_globals).dot,
                0,
                YANKDEL as libc::c_int,
                1i32,
              );
              if c == 'C' as i32 {
                current_block = 8629930936610358348;
              } else {
                if c == 'D' as i32 {
                  end_cmd_q();
                }
                current_block = 15129665204879337069;
              }
            }
            11937696639986586685 => {
              cnt = count_lines((*ptr_to_globals).text, (*ptr_to_globals).dot);
              c1 = get_one_char();
              find_range(&mut p, &mut q, c1 as libc::c_char);
              yank_delete(p, q, 1i32, YANKONLY as libc::c_int, 0);
              p = begin_line(p);
              q = end_line(q);
              i = count_lines(p, q);
              while i > 0 {
                if c == '<' as i32 {
                  if *p as libc::c_int == '\t' as i32 {
                    text_hole_delete(p, p, 0);
                  } else if *p as libc::c_int == ' ' as i32 {
                    j = 0;
                    while *p as libc::c_int == ' ' as i32 && j < (*ptr_to_globals).tabstop {
                      text_hole_delete(p, p, 0);
                      j += 1
                    }
                  }
                } else if c == '>' as i32 {
                  char_insert(p, '\t' as i32 as libc::c_char, 1i32);
                }
                i -= 1;
                p = next_line(p)
              }
              (*ptr_to_globals).dot = find_line(cnt);
              dot_skip_over_ws();
              end_cmd_q();
              current_block = 15129665204879337069;
            }
            17725350714912028156 => {
              p = get_input_line(b":\x00" as *const u8 as *const libc::c_char);
              colon(p);
              current_block = 15129665204879337069;
            }
            14526470074083880812 => {
              q = char_search(
                (*ptr_to_globals).dot,
                b"\n\n\x00" as *const u8 as *const libc::c_char,
                (FORWARD as libc::c_int) << 1i32 | FULL as libc::c_int,
              );
              if !q.is_null() {
                (*ptr_to_globals).dot = next_line(q)
              }
              current_block = 15129665204879337069;
            }
            8893187391306414141 => {
              q = char_search(
                (*ptr_to_globals).dot,
                b"\n\n\x00" as *const u8 as *const libc::c_char,
                ((BACK as libc::c_int as libc::c_uint) << 1i32
                  | FULL as libc::c_int as libc::c_uint) as libc::c_int,
              );
              if !q.is_null() {
                (*ptr_to_globals).dot = next_line(q)
              }
              current_block = 15129665204879337069;
            }
            7021673758293221412 => {
              dir = BACK as libc::c_int;
              p = (*ptr_to_globals).dot.offset(-1);
              if *(*ptr_to_globals).last_search_pattern.offset(0) as libc::c_int == '?' as i32 {
                dir = FORWARD as libc::c_int;
                p = (*ptr_to_globals).dot.offset(1)
              }
              current_block = 4166979493554389389;
            }
            18374191879090272823 => {
              buf[0] = c as libc::c_char;
              buf[1] = '\u{0}' as i32 as libc::c_char;
              q = get_input_line(buf.as_mut_ptr());
              if *q.offset(0) as libc::c_int != 0 && *q.offset(1) == 0 {
                if *(*ptr_to_globals).last_search_pattern.offset(0) != 0 {
                  *(*ptr_to_globals).last_search_pattern.offset(0) = c as libc::c_char
                }
                current_block = 7392824444931029276;
              } else if *q.offset(0) != 0 {
                free((*ptr_to_globals).last_search_pattern as *mut libc::c_void);
                (*ptr_to_globals).last_search_pattern = crate::libbb::xfuncs_printf::xstrdup(q);
                current_block = 7392824444931029276;
              } else {
                current_block = 15129665204879337069;
              }
            }
            16407828456666301883 => {
              if (*ptr_to_globals).last_forward_char == 0 {
                current_block = 15129665204879337069;
              } else {
                loop {
                  q = (*ptr_to_globals).dot.offset(-1);
                  while q >= (*ptr_to_globals).text
                    && *q as libc::c_int != '\n' as i32
                    && *q as libc::c_int != (*ptr_to_globals).last_forward_char
                  {
                    q = q.offset(-1)
                  }
                  if q >= (*ptr_to_globals).text
                    && *q as libc::c_int == (*ptr_to_globals).last_forward_char
                  {
                    (*ptr_to_globals).dot = q
                  }
                  (*ptr_to_globals).cmdcnt -= 1;
                  if !((*ptr_to_globals).cmdcnt > 0) {
                    break;
                  }
                }
                current_block = 15129665204879337069;
              }
            }
            9018432604062702004 => {
              q = (*ptr_to_globals).dot;
              while q < (*ptr_to_globals).end && *q as libc::c_int != '\n' as i32 {
                if !strchr(
                  b"()[]{}\x00" as *const u8 as *const libc::c_char,
                  *q as libc::c_int,
                )
                .is_null()
                {
                  p = find_pair(q, *q);
                  if p.is_null() {
                    indicate_error();
                  } else {
                    (*ptr_to_globals).dot = p
                  }
                  break;
                } else {
                  q = q.offset(1)
                }
              }
              if *q as libc::c_int == '\n' as i32 {
                indicate_error();
              }
              current_block = 15129665204879337069;
            }
            10247103787464459848 => {
              p = (*ptr_to_globals).reg[(*ptr_to_globals).YDreg as usize];
              if p.is_null() {
                status_line_bold(
                  b"Nothing in register %c\x00" as *const u8 as *const libc::c_char,
                  what_reg() as libc::c_int,
                );
              } else {
                if !strchr(p, '\n' as i32).is_null() {
                  if c == 'P' as i32 {
                    dot_begin();
                  }
                  if c == 'p' as i32 {
                    if end_line((*ptr_to_globals).dot) == (*ptr_to_globals).end.offset(-1) {
                      (*ptr_to_globals).dot = (*ptr_to_globals).end
                    } else {
                      dot_next();
                    }
                  }
                } else if c == 'p' as i32 {
                  dot_right();
                }
                string_insert((*ptr_to_globals).dot, p, 1i32);
                end_cmd_q();
              }
              current_block = 15129665204879337069;
            }
            15260732871948875843 => {
              c1 = (get_one_char() | 0x20i32) - 'a' as i32;
              if c1 as libc::c_uint <= 25i32 as libc::c_uint {
                (*ptr_to_globals).mark[c1 as usize] = (*ptr_to_globals).dot
              } else {
                indicate_error();
              }
              current_block = 15129665204879337069;
            }
            12738322036487086035 => {
              c1 = get_one_char() | 0x20i32;
              if (c1 - 'a' as i32) as libc::c_uint <= 25i32 as libc::c_uint {
                c1 = c1 - 'a' as i32;
                q = (*ptr_to_globals).mark[c1 as usize];
                if (*ptr_to_globals).text <= q && q < (*ptr_to_globals).end {
                  (*ptr_to_globals).dot = q;
                  dot_begin();
                  dot_skip_over_ws();
                }
              } else if c1 == '\'' as i32 {
                (*ptr_to_globals).dot = swap_context((*ptr_to_globals).dot);
                dot_begin();
                dot_skip_over_ws();
              } else {
                indicate_error();
              }
              current_block = 15129665204879337069;
            }
            13255096073384561358 => {
              c1 = (get_one_char() | 0x20i32) - 'a' as i32;
              if c1 as libc::c_uint <= 25i32 as libc::c_uint {
                (*ptr_to_globals).YDreg = c1 as smalluint
              } else {
                indicate_error();
              }
              current_block = 15129665204879337069;
            }
            10258711639984089377 => {
              if (*ptr_to_globals).cmd_mode as libc::c_int == 0 {
                indicate_error();
              }
              (*ptr_to_globals).cmd_mode = 0 as smallint;
              undo_queue_commit();
              end_cmd_q();
              (*ptr_to_globals).last_status_cksum = 0;
              current_block = 15129665204879337069;
            }
            11439127087547047736 => {
              buf[0] = c as libc::c_char;
              buf[1] = '\u{0}' as i32 as libc::c_char;
              not_implemented(buf.as_mut_ptr());
              end_cmd_q();
              current_block = 17440971994642376514;
            }
            7961798899781870241 => {
              dot_scroll(
                (*ptr_to_globals).rows.wrapping_sub(2i32 as libc::c_uint) as libc::c_int,
                -1i32,
              );
              current_block = 15129665204879337069;
            }
            9426343755402444879 => {
              dot_scroll(
                (*ptr_to_globals)
                  .rows
                  .wrapping_sub(2i32 as libc::c_uint)
                  .wrapping_div(2i32 as libc::c_uint) as libc::c_int,
                1i32,
              );
              current_block = 15129665204879337069;
            }
            13352459794680105913 => {
              dot_scroll(1i32, 1i32);
              current_block = 15129665204879337069;
            }
            14142272253464333006 => {
              dot_scroll(
                (*ptr_to_globals).rows.wrapping_sub(2i32 as libc::c_uint) as libc::c_int,
                1i32,
              );
              current_block = 15129665204879337069;
            }
            10758177197742640066 => {
              (*ptr_to_globals).last_status_cksum = 0;
              current_block = 15129665204879337069;
            }
            6152256259730122749 => {
              current_block = 7534742345255184552;
            }
            12883932598258173301 => {
              current_block = 8800996768013373992;
            }
            11242998110520238401 => {
              redraw(1i32);
              current_block = 15129665204879337069;
            }
            13619733043935729992 => {
              loop {
                dot_next();
                dot_skip_over_ws();
                (*ptr_to_globals).cmdcnt -= 1;
                if !((*ptr_to_globals).cmdcnt > 0) {
                  break;
                }
              }
              current_block = 15129665204879337069;
            }
            9339065157412720613 => {
              dot_scroll(
                (*ptr_to_globals)
                  .rows
                  .wrapping_sub(2i32 as libc::c_uint)
                  .wrapping_div(2i32 as libc::c_uint) as libc::c_int,
                -1i32,
              );
              current_block = 15129665204879337069;
            }
            11447082683497798022 => {
              dot_scroll(1i32, -1i32);
              current_block = 15129665204879337069;
            }
            5182000506326660482 => {
              current_block = 13993698454868426881;
            }
            1105010766850597332 => {
              if !(*ptr_to_globals).reg[27].is_null() {
                p = begin_line((*ptr_to_globals).dot);
                q = end_line((*ptr_to_globals).dot);
                p = text_hole_delete(p, q, 1i32);
                p = p.offset(string_insert(p, (*ptr_to_globals).reg[27], 2i32) as isize);
                (*ptr_to_globals).dot = p;
                dot_skip_over_ws();
              }
              current_block = 15129665204879337069;
            }
            8616046655533110204 => {
              undo_pop();
              current_block = 15129665204879337069;
            }
            5127767458142431603 => {
              loop {
                (*ptr_to_globals).dot = end_line((*ptr_to_globals).dot);
                (*ptr_to_globals).cmdcnt -= 1;
                if (*ptr_to_globals).cmdcnt <= 0 {
                  break;
                }
                dot_next();
              }
              current_block = 15129665204879337069;
            }
            222014967776118151 => {
              (*ptr_to_globals).last_forward_char = get_one_char();
              current_block = 7856905509180742666;
            }
            11209792479411604110 => {
              loop {
                dot_prev();
                dot_skip_over_ws();
                (*ptr_to_globals).cmdcnt -= 1;
                if !((*ptr_to_globals).cmdcnt > 0) {
                  break;
                }
              }
              current_block = 15129665204879337069;
            }
            3364823792826654116 => {
              if (*ptr_to_globals).lmc_len != 0 {
                (*ptr_to_globals).ioq_start = crate::libbb::xfuncs_printf::xstrndup(
                  (*ptr_to_globals).last_modifying_cmd.as_mut_ptr(),
                  (*ptr_to_globals).lmc_len,
                );
                (*ptr_to_globals).ioq = (*ptr_to_globals).ioq_start
              }
              current_block = 15129665204879337069;
            }
            18096603330221575131 => {
              current_block = 17498168302144015873;
            }
            16891123271837848903 => {
              dot_end();
              current_block = 1752638907092016026;
            }
            8517235759107662071 => {
              current_block = 5847749760081351726;
            }
            12525254419223051704 => {
              if (*ptr_to_globals).dot < (*ptr_to_globals).end.offset(-1) {
                (*ptr_to_globals).dot = yank_delete(
                  (*ptr_to_globals).dot,
                  (*ptr_to_globals).dot,
                  1i32,
                  YANKDEL as libc::c_int,
                  1i32,
                )
              }
              current_block = 15129665204879337069;
            }
            15232911949322867522 => {
              current_block = 17251831742223396249;
            }
            10863374208794025069 => {
              current_block = 1895262434596074581;
            }
            451126677064669119 => {
              loop {
                dot_prev();
                (*ptr_to_globals).dot = move_to_col(
                  (*ptr_to_globals).dot,
                  (*ptr_to_globals).ccol + (*ptr_to_globals).offset,
                );
                (*ptr_to_globals).cmdcnt -= 1;
                if !((*ptr_to_globals).cmdcnt > 0) {
                  break;
                }
              }
              current_block = 15129665204879337069;
            }
            4611735929166613116 => {
              loop {
                if bb_ascii_isalnum(*(*ptr_to_globals).dot as libc::c_uchar) != 0
                  || *(*ptr_to_globals).dot as libc::c_int == '_' as i32
                {
                  (*ptr_to_globals).dot = skip_thing(
                    (*ptr_to_globals).dot,
                    1i32,
                    FORWARD as libc::c_int,
                    S_END_ALNUM as libc::c_int,
                  )
                } else if *strchrnul(
                  b"!\"#$%&\'()*+,-./:;<=>?@[\\]^_`{|}~\x00" as *const u8 as *const libc::c_char,
                  *(*ptr_to_globals).dot as libc::c_int,
                )
                .offset(0)
                  != 0
                {
                  (*ptr_to_globals).dot = skip_thing(
                    (*ptr_to_globals).dot,
                    1i32,
                    FORWARD as libc::c_int,
                    S_END_PUNCT as libc::c_int,
                  )
                }
                if (*ptr_to_globals).dot < (*ptr_to_globals).end.offset(-1) {
                  (*ptr_to_globals).dot = (*ptr_to_globals).dot.offset(1)
                }
                if ({
                  let mut bb__isspace: libc::c_uchar =
                    (*(*ptr_to_globals).dot as libc::c_int - 9i32) as libc::c_uchar;
                  (bb__isspace as libc::c_int == ' ' as i32 - 9i32
                    || bb__isspace as libc::c_int <= 13i32 - 9i32) as libc::c_int
                }) != 0
                {
                  (*ptr_to_globals).dot = skip_thing(
                    (*ptr_to_globals).dot,
                    2i32,
                    FORWARD as libc::c_int,
                    S_OVER_WS as libc::c_int,
                  )
                }
                (*ptr_to_globals).cmdcnt -= 1;
                if !((*ptr_to_globals).cmdcnt > 0) {
                  break;
                }
              }
              current_block = 15129665204879337069;
            }
            4386451087681909888 => {
              (*ptr_to_globals).dot =
                move_to_col((*ptr_to_globals).dot, (*ptr_to_globals).cmdcnt - 1i32);
              current_block = 15129665204879337069;
            }
            1296397779060594135 => {
              dot_begin();
              current_block = 15129665204879337069;
            }
            _ => {}
          }
          match current_block {
            15129665204879337069 => {}
            8629930936610358348 => {}
            _ => {
              match current_block {
                17251831742223396249 => {
                  dir = 0;
                  if c == 'X' as i32 {
                    dir = -1i32
                  }
                  loop {
                    if *(*ptr_to_globals).dot.offset(dir as isize) as libc::c_int != '\n' as i32 {
                      if c == 'X' as i32 {
                        (*ptr_to_globals).dot = (*ptr_to_globals).dot.offset(-1)
                      }
                      (*ptr_to_globals).dot = yank_delete(
                        (*ptr_to_globals).dot,
                        (*ptr_to_globals).dot,
                        0,
                        YANKDEL as libc::c_int,
                        1i32,
                      )
                    }
                    (*ptr_to_globals).cmdcnt -= 1;
                    if !((*ptr_to_globals).cmdcnt > 0) {
                      break;
                    }
                  }
                  end_cmd_q();
                  if c == 's' as i32 {
                    current_block = 8629930936610358348;
                  } else {
                    current_block = 15129665204879337069;
                  }
                }
                2087484904894455135 => {
                  dot_end();
                  (*ptr_to_globals).dot =
                    char_insert((*ptr_to_globals).dot, '\n' as i32 as libc::c_char, 1i32);
                  current_block = 8629930936610358348;
                }
                11945623545738147997 => {
                  (*ptr_to_globals).dot = (*ptr_to_globals).end.offset(-1);
                  if (*ptr_to_globals).cmdcnt > 0 {
                    (*ptr_to_globals).dot = find_line((*ptr_to_globals).cmdcnt)
                  }
                  dot_skip_over_ws();
                  current_block = 15129665204879337069;
                }
                5847749760081351726 => {
                  dir = FORWARD as libc::c_int;
                  if c == 'B' as i32 {
                    dir = BACK as libc::c_int
                  }
                  loop {
                    if c == 'W' as i32
                      || ({
                        let mut bb__isspace: libc::c_uchar =
                          (*(*ptr_to_globals).dot.offset(dir as isize) as libc::c_int - 9i32)
                            as libc::c_uchar;
                        (bb__isspace as libc::c_int == ' ' as i32 - 9i32
                          || bb__isspace as libc::c_int <= 13i32 - 9i32)
                          as libc::c_int
                      }) != 0
                    {
                      (*ptr_to_globals).dot =
                        skip_thing((*ptr_to_globals).dot, 1i32, dir, S_TO_WS as libc::c_int);
                      (*ptr_to_globals).dot =
                        skip_thing((*ptr_to_globals).dot, 2i32, dir, S_OVER_WS as libc::c_int)
                    }
                    if c != 'W' as i32 {
                      (*ptr_to_globals).dot =
                        skip_thing((*ptr_to_globals).dot, 1i32, dir, S_BEFORE_WS as libc::c_int)
                    }
                    (*ptr_to_globals).cmdcnt -= 1;
                    if !((*ptr_to_globals).cmdcnt > 0) {
                      break;
                    }
                  }
                  current_block = 15129665204879337069;
                }
                17440971994642376514 => {
                  current_block = 15129665204879337069;
                }
                7534742345255184552 => {
                  current_block = 17247297260531395789;
                }
                8800996768013373992 => {
                  loop {
                    dot_next();
                    (*ptr_to_globals).dot = move_to_col(
                      (*ptr_to_globals).dot,
                      (*ptr_to_globals).ccol + (*ptr_to_globals).offset,
                    );
                    (*ptr_to_globals).cmdcnt -= 1;
                    if !((*ptr_to_globals).cmdcnt > 0) {
                      break;
                    }
                  }
                  current_block = 15129665204879337069;
                }
                13993698454868426881 => {
                  loop {
                    dot_right();
                    (*ptr_to_globals).cmdcnt -= 1;
                    if !((*ptr_to_globals).cmdcnt > 0) {
                      break;
                    }
                  }
                  current_block = 15129665204879337069;
                }
                7856905509180742666 => {
                  while !((*ptr_to_globals).last_forward_char == 0) {
                    q = (*ptr_to_globals).dot.offset(1);
                    while q < (*ptr_to_globals).end.offset(-1)
                      && *q as libc::c_int != '\n' as i32
                      && *q as libc::c_int != (*ptr_to_globals).last_forward_char
                    {
                      q = q.offset(1)
                    }
                    if *q as libc::c_int == (*ptr_to_globals).last_forward_char {
                      (*ptr_to_globals).dot = q
                    }
                    (*ptr_to_globals).cmdcnt -= 1;
                    if !((*ptr_to_globals).cmdcnt > 0) {
                      break;
                    }
                  }
                  current_block = 15129665204879337069;
                }
                17498168302144015873 => {
                  current_block = 8681395796513813967;
                }
                1752638907092016026 => {
                  if *(*ptr_to_globals).dot as libc::c_int != '\n' as i32 {
                    (*ptr_to_globals).dot = (*ptr_to_globals).dot.offset(1)
                  }
                  current_block = 8629930936610358348;
                }
                3268579060917229304 => {
                  current_block = 8629930936610358348;
                }
                1895262434596074581 => {
                  current_block = 8908416993177701018;
                }
                _ => {}
              }
              match current_block {
                8629930936610358348 => {}
                15129665204879337069 => {}
                _ => {
                  match current_block {
                    17247297260531395789 => {
                      loop {
                        dot_left();
                        (*ptr_to_globals).cmdcnt -= 1;
                        if !((*ptr_to_globals).cmdcnt > 0) {
                          break;
                        }
                      }
                      current_block = 15129665204879337069;
                    }
                    8681395796513813967 => {
                      current_block = 5591548203144509315;
                    }
                    8908416993177701018 => {
                      current_block = 16124761010012532485;
                    }
                    _ => {}
                  }
                  match current_block {
                    15129665204879337069 => {}
                    _ => {
                      match current_block {
                        16124761010012532485 => {
                          let mut yf: libc::c_int = 0;
                          let mut ml: libc::c_int = 0;
                          let mut whole: libc::c_int = 0;
                          yf = YANKDEL as libc::c_int;
                          if c == 'y' as i32 || c == 'Y' as i32 {
                            yf = YANKONLY as libc::c_int
                          }
                          c1 = 'y' as i32;
                          if c != 'Y' as i32 {
                            c1 = get_one_char()
                          }
                          ml = find_range(&mut p, &mut q, c1 as libc::c_char);
                          place_cursor(0i32, 0);
                          if c1 == 27i32 {
                            c1 = 27i32;
                            c = c1
                          } else if !strchr(b"wW\x00" as *const u8 as *const libc::c_char, c1)
                            .is_null()
                          {
                            ml = 0;
                            if c == 'c' as i32 {
                              while ({
                                let mut bb__isspace: libc::c_uchar =
                                  (*q as libc::c_int - 9i32) as libc::c_uchar;
                                (bb__isspace as libc::c_int == ' ' as i32 - 9i32
                                  || bb__isspace as libc::c_int <= 13i32 - 9i32)
                                  as libc::c_int
                              }) != 0
                                && q > p
                              {
                                q = q.offset(-1)
                              }
                            }
                            (*ptr_to_globals).dot = yank_delete(p, q, ml, yf, 1i32)
                          } else if !strchr(
                            b"^0bBeEft%$ lh\x08\x7f\x00" as *const u8 as *const libc::c_char,
                            c1,
                          )
                          .is_null()
                          {
                            (*ptr_to_globals).dot = yank_delete(p, q, ml, yf, 1i32)
                          } else if !strchr(
                            b"cdykjGHL+-{}\r\n\x00" as *const u8 as *const libc::c_char,
                            c1,
                          )
                          .is_null()
                          {
                            (*ptr_to_globals).dot = yank_delete(p, q, ml, yf, 1i32);
                            whole = 1i32
                          } else {
                            c1 = 27i32;
                            c = c1;
                            ml = 0;
                            indicate_error();
                          }
                          if ml != 0 && whole != 0 {
                            if c == 'c' as i32 {
                              (*ptr_to_globals).dot = char_insert(
                                (*ptr_to_globals).dot,
                                '\n' as i32 as libc::c_char,
                                2i32,
                              );
                              if whole != 0
                                && (*ptr_to_globals).dot != (*ptr_to_globals).end.offset(-1)
                              {
                                dot_prev();
                              }
                            } else if c == 'd' as i32 {
                              dot_begin();
                              dot_skip_over_ws();
                            }
                          }
                          if c1 != 27i32 {
                            if c == 'c' as i32 {
                              strcpy(
                                buf.as_mut_ptr(),
                                b"Change\x00" as *const u8 as *const libc::c_char,
                              );
                              current_block = 8629930936610358348;
                            } else {
                              if c == 'd' as i32 {
                                strcpy(
                                  buf.as_mut_ptr(),
                                  b"Delete\x00" as *const u8 as *const libc::c_char,
                                );
                              }
                              if c == 'y' as i32 || c == 'Y' as i32 {
                                strcpy(
                                  buf.as_mut_ptr(),
                                  b"Yank\x00" as *const u8 as *const libc::c_char,
                                );
                              }
                              p = (*ptr_to_globals).reg[(*ptr_to_globals).YDreg as usize];
                              q = p.offset(strlen(p) as isize);
                              cnt = 0;
                              while p <= q {
                                if *p as libc::c_int == '\n' as i32 {
                                  cnt += 1
                                }
                                p = p.offset(1)
                              }
                              status_line(
                                b"%s %u lines (%u chars) using [%c]\x00" as *const u8
                                  as *const libc::c_char,
                                buf.as_mut_ptr(),
                                cnt,
                                strlen((*ptr_to_globals).reg[(*ptr_to_globals).YDreg as usize])
                                  as libc::c_uint,
                                what_reg() as libc::c_int,
                              );
                              end_cmd_q();
                              current_block = 15129665204879337069;
                            }
                          } else {
                            current_block = 15129665204879337069;
                          }
                        }
                        5591548203144509315 => {
                          current_block = 2636677179867529885;
                        }
                        _ => {}
                      }
                      match current_block {
                        15129665204879337069 => {}
                        8629930936610358348 => {}
                        _ => {
                          match current_block {
                            2636677179867529885 => {
                              current_block = 12309206730560524281;
                            }
                            _ => {}
                          }
                          match current_block {
                            12309206730560524281 => {
                              current_block = 3325768110057758661;
                            }
                            _ => {}
                          }
                          match current_block {
                            3325768110057758661 => {
                              current_block = 14815832896553429982;
                            }
                            _ => {}
                          }
                          match current_block {
                            14815832896553429982 => {
                              current_block = 10731695520297161438;
                            }
                            _ => {}
                          }
                          match current_block {
                            10731695520297161438 => {
                              if c == '0' as i32 && (*ptr_to_globals).cmdcnt < 1i32 {
                                dot_begin();
                              } else {
                                (*ptr_to_globals).cmdcnt =
                                  (*ptr_to_globals).cmdcnt * 10i32 + (c - '0' as i32)
                              }
                              current_block = 15129665204879337069;
                            }
                            _ => {}
                          }
                          match current_block {
                            15129665204879337069 => {}
                            _ => {
                              loop {
                                match current_block {
                                  16813369756331276724 => {
                                    msg = std::ptr::null();
                                    current_block = 7392824444931029276;
                                  }
                                  7392824444931029276 => {
                                    dir = FORWARD as libc::c_int;
                                    p = (*ptr_to_globals).dot.offset(1);
                                    if *(*ptr_to_globals).last_search_pattern.offset(0)
                                      as libc::c_int
                                      == '?' as i32
                                    {
                                      dir = BACK as libc::c_int;
                                      p = (*ptr_to_globals).dot.offset(-1)
                                    }
                                    current_block = 4166979493554389389;
                                  }
                                  _ => {
                                    q = char_search(
                                      p,
                                      (*ptr_to_globals).last_search_pattern.offset(1),
                                      dir << 1i32 | FULL as libc::c_int,
                                    );
                                    if !q.is_null() {
                                      (*ptr_to_globals).dot = q;
                                      msg = std::ptr::null()
                                    } else {
                                      p = (*ptr_to_globals).text;
                                      if dir == BACK as libc::c_int {
                                        p = (*ptr_to_globals).end.offset(-1)
                                      }
                                      q = char_search(
                                        p,
                                        (*ptr_to_globals).last_search_pattern.offset(1),
                                        dir << 1i32 | FULL as libc::c_int,
                                      );
                                      if !q.is_null() {
                                        (*ptr_to_globals).dot = q;
                                        msg = b"search hit BOTTOM, continuing at TOP\x00"
                                          as *const u8
                                          as *const libc::c_char;
                                        if dir == BACK as libc::c_int {
                                          msg = b"search hit TOP, continuing at BOTTOM\x00"
                                            as *const u8
                                            as *const libc::c_char
                                        }
                                      } else {
                                        msg = b"Pattern not found\x00" as *const u8
                                          as *const libc::c_char
                                      }
                                    }
                                    if !msg.is_null() {
                                      status_line_bold(
                                        b"%s\x00" as *const u8 as *const libc::c_char,
                                        msg,
                                      );
                                    }
                                    (*ptr_to_globals).cmdcnt -= 1;
                                    if (*ptr_to_globals).cmdcnt > 0 {
                                      current_block = 16813369756331276724;
                                    } else {
                                      break;
                                    }
                                  }
                                }
                              }
                              current_block = 15129665204879337069;
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
        39 => {
          current_block = 12738322036487086035;
          match current_block {
            16992905640583886232 => {
              loop {
                if (*(*ptr_to_globals).dot as libc::c_int - 'a' as i32) as libc::c_uchar
                  as libc::c_int
                  <= 'z' as i32 - 'a' as i32
                {
                  undo_push(
                    (*ptr_to_globals).dot,
                    1i32 as libc::c_uint,
                    1i32 as libc::c_uchar,
                  );
                  *(*ptr_to_globals).dot =
                    bb_ascii_toupper(*(*ptr_to_globals).dot as libc::c_uchar) as libc::c_char;
                  undo_push(
                    (*ptr_to_globals).dot,
                    1i32 as libc::c_uint,
                    2i32 as libc::c_uchar,
                  );
                } else if (*(*ptr_to_globals).dot as libc::c_int - 'A' as i32) as libc::c_uchar
                  as libc::c_int
                  <= 'Z' as i32 - 'A' as i32
                {
                  undo_push(
                    (*ptr_to_globals).dot,
                    1i32 as libc::c_uint,
                    1i32 as libc::c_uchar,
                  );
                  *(*ptr_to_globals).dot =
                    bb_ascii_tolower(*(*ptr_to_globals).dot as libc::c_uchar) as libc::c_char;
                  undo_push(
                    (*ptr_to_globals).dot,
                    1i32 as libc::c_uint,
                    2i32 as libc::c_uchar,
                  );
                }
                dot_right();
                (*ptr_to_globals).cmdcnt -= 1;
                if !((*ptr_to_globals).cmdcnt > 0) {
                  break;
                }
              }
              end_cmd_q();
              current_block = 15129665204879337069;
            }
            8729655159604064397 => {
              c1 = get_one_char();
              cnt = 0;
              if c1 == '.' as i32 {
                cnt = (*ptr_to_globals)
                  .rows
                  .wrapping_sub(2i32 as libc::c_uint)
                  .wrapping_div(2i32 as libc::c_uint) as libc::c_int
              }
              if c1 == '-' as i32 {
                cnt = (*ptr_to_globals).rows.wrapping_sub(2i32 as libc::c_uint) as libc::c_int
              }
              (*ptr_to_globals).screenbegin = begin_line((*ptr_to_globals).dot);
              dot_scroll(cnt, -1i32);
              current_block = 15129665204879337069;
            }
            15899500648299942075 => {
              (*ptr_to_globals).last_forward_char = get_one_char();
              do_cmd(';' as i32);
              if *(*ptr_to_globals).dot as libc::c_int == (*ptr_to_globals).last_forward_char {
                dot_left();
              }
              (*ptr_to_globals).last_forward_char = 0;
              current_block = 15129665204879337069;
            }
            9051390181078481641 => {
              c1 = get_one_char();
              if *(*ptr_to_globals).dot as libc::c_int != '\n' as i32 {
                (*ptr_to_globals).dot =
                  text_hole_delete((*ptr_to_globals).dot, (*ptr_to_globals).dot, 1i32);
                (*ptr_to_globals).dot =
                  char_insert((*ptr_to_globals).dot, c1 as libc::c_char, 2i32);
                dot_left();
              }
              end_cmd_q();
              current_block = 15129665204879337069;
            }
            877115918601926659 => {
              dir = FORWARD as libc::c_int;
              if c == 'b' as i32 {
                dir = BACK as libc::c_int
              }
              while !((*ptr_to_globals).dot.offset(dir as isize) < (*ptr_to_globals).text
                || (*ptr_to_globals).dot.offset(dir as isize) > (*ptr_to_globals).end.offset(-1))
              {
                (*ptr_to_globals).dot = (*ptr_to_globals).dot.offset(dir as isize);
                if ({
                  let mut bb__isspace: libc::c_uchar =
                    (*(*ptr_to_globals).dot as libc::c_int - 9i32) as libc::c_uchar;
                  (bb__isspace as libc::c_int == ' ' as i32 - 9i32
                    || bb__isspace as libc::c_int <= 13i32 - 9i32) as libc::c_int
                }) != 0
                {
                  (*ptr_to_globals).dot = skip_thing(
                    (*ptr_to_globals).dot,
                    if c == 'e' as i32 { 2i32 } else { 1i32 },
                    dir,
                    S_OVER_WS as libc::c_int,
                  )
                }
                if bb_ascii_isalnum(*(*ptr_to_globals).dot as libc::c_uchar) != 0
                  || *(*ptr_to_globals).dot as libc::c_int == '_' as i32
                {
                  (*ptr_to_globals).dot =
                    skip_thing((*ptr_to_globals).dot, 1i32, dir, S_END_ALNUM as libc::c_int)
                } else if *strchrnul(
                  b"!\"#$%&\'()*+,-./:;<=>?@[\\]^_`{|}~\x00" as *const u8 as *const libc::c_char,
                  *(*ptr_to_globals).dot as libc::c_int,
                )
                .offset(0)
                  != 0
                {
                  (*ptr_to_globals).dot =
                    skip_thing((*ptr_to_globals).dot, 1i32, dir, S_END_PUNCT as libc::c_int)
                }
                (*ptr_to_globals).cmdcnt -= 1;
                if !((*ptr_to_globals).cmdcnt > 0) {
                  break;
                }
              }
              current_block = 15129665204879337069;
            }
            1085022737867179637 => {
              dot_begin();
              dot_skip_over_ws();
              current_block = 15129665204879337069;
            }
            3113147720494587438 => {
              c1 = get_one_char();
              if c1 != 'Z' as i32 {
                indicate_error();
              } else if (*ptr_to_globals).modified_count != 0 {
                if 1i32 != 0 && (*ptr_to_globals).readonly_mode as libc::c_int != 0 {
                  status_line_bold(
                    b"\'%s\' is read only\x00" as *const u8 as *const libc::c_char,
                    (*ptr_to_globals).current_filename,
                  );
                } else {
                  cnt = file_write(
                    (*ptr_to_globals).current_filename,
                    (*ptr_to_globals).text,
                    (*ptr_to_globals).end.offset(-1),
                  );
                  if cnt < 0 {
                    if cnt == -1i32 {
                      status_line_bold(b"Write error: %m\x00" as *const u8 as *const libc::c_char);
                    }
                  } else if cnt as libc::c_long
                    == (*ptr_to_globals)
                      .end
                      .offset(-1)
                      .wrapping_offset_from((*ptr_to_globals).text)
                      as libc::c_long
                      + 1
                  {
                    (*ptr_to_globals).editing = 0 as smallint
                  }
                }
              } else {
                (*ptr_to_globals).editing = 0 as smallint
              }
              current_block = 15129665204879337069;
            }
            12960118908218882441 => {
              p = begin_line((*ptr_to_globals).dot);
              if *p.offset(-1i32 as isize) as libc::c_int == '\n' as i32 {
                dot_prev();
                current_block = 2087484904894455135;
              } else {
                dot_begin();
                (*ptr_to_globals).dot =
                  char_insert((*ptr_to_globals).dot, '\n' as i32 as libc::c_char, 1i32);
                dot_prev();
                current_block = 8629930936610358348;
              }
            }
            8720450212473544924 => {
              (*ptr_to_globals).dot = (*ptr_to_globals).screenbegin;
              cnt = 0;
              while (cnt as libc::c_uint)
                < (*ptr_to_globals)
                  .rows
                  .wrapping_sub(1i32 as libc::c_uint)
                  .wrapping_div(2i32 as libc::c_uint)
              {
                (*ptr_to_globals).dot = next_line((*ptr_to_globals).dot);
                cnt += 1
              }
              current_block = 15129665204879337069;
            }
            13015277209715431090 => {
              (*ptr_to_globals).dot = end_screen();
              if (*ptr_to_globals).cmdcnt as libc::c_uint
                > (*ptr_to_globals).rows.wrapping_sub(1i32 as libc::c_uint)
              {
                (*ptr_to_globals).cmdcnt =
                  (*ptr_to_globals).rows.wrapping_sub(1i32 as libc::c_uint) as libc::c_int
              }
              (*ptr_to_globals).cmdcnt -= 1;
              if (*ptr_to_globals).cmdcnt > 0 {
                do_cmd('-' as i32);
              }
              dot_begin();
              dot_skip_over_ws();
              current_block = 15129665204879337069;
            }
            9800435767766781385 => {
              loop {
                dot_end();
                if (*ptr_to_globals).dot < (*ptr_to_globals).end.offset(-1) {
                  undo_push(
                    (*ptr_to_globals).dot,
                    1i32 as libc::c_uint,
                    1i32 as libc::c_uchar,
                  );
                  let fresh15 = (*ptr_to_globals).dot;
                  (*ptr_to_globals).dot = (*ptr_to_globals).dot.offset(1);
                  *fresh15 = ' ' as i32 as libc::c_char;
                  undo_push(
                    (*ptr_to_globals).dot.offset(-1),
                    1i32 as libc::c_uint,
                    2i32 as libc::c_uchar,
                  );
                  while ({
                    let mut bb__isblank: libc::c_uchar = *(*ptr_to_globals).dot as libc::c_uchar;
                    (bb__isblank as libc::c_int == ' ' as i32
                      || bb__isblank as libc::c_int == '\t' as i32)
                      as libc::c_int
                  }) != 0
                  {
                    text_hole_delete((*ptr_to_globals).dot, (*ptr_to_globals).dot, 2i32);
                  }
                }
                (*ptr_to_globals).cmdcnt -= 1;
                if !((*ptr_to_globals).cmdcnt > 0) {
                  break;
                }
              }
              end_cmd_q();
              current_block = 15129665204879337069;
            }
            3432363526595694666 => {
              dot_begin();
              dot_skip_over_ws();
              current_block = 3268579060917229304;
            }
            3494829253343353619 => {
              (*ptr_to_globals).dot = (*ptr_to_globals).screenbegin;
              if (*ptr_to_globals).cmdcnt as libc::c_uint
                > (*ptr_to_globals).rows.wrapping_sub(1i32 as libc::c_uint)
              {
                (*ptr_to_globals).cmdcnt =
                  (*ptr_to_globals).rows.wrapping_sub(1i32 as libc::c_uint) as libc::c_int
              }
              (*ptr_to_globals).cmdcnt -= 1;
              if (*ptr_to_globals).cmdcnt > 0 {
                do_cmd('+' as i32);
              }
              dot_skip_over_ws();
              current_block = 15129665204879337069;
            }
            17973101765331640574 => {
              c1 = get_one_char();
              if c1 != 'g' as i32 {
                buf[0] = 'g' as i32 as libc::c_char;
                buf[1] = if c1 >= 0 { c1 } else { '*' as i32 } as libc::c_char;
                buf[2] = '\u{0}' as i32 as libc::c_char;
                not_implemented(buf.as_mut_ptr());
                current_block = 15129665204879337069;
              } else {
                if (*ptr_to_globals).cmdcnt == 0 {
                  (*ptr_to_globals).cmdcnt = 1i32
                }
                current_block = 11945623545738147997;
              }
            }
            16546625800574160972 => {
              save_dot = (*ptr_to_globals).dot;
              (*ptr_to_globals).dot = dollar_line((*ptr_to_globals).dot);
              (*ptr_to_globals).dot = yank_delete(
                save_dot,
                (*ptr_to_globals).dot,
                0,
                YANKDEL as libc::c_int,
                1i32,
              );
              if c == 'C' as i32 {
                current_block = 8629930936610358348;
              } else {
                if c == 'D' as i32 {
                  end_cmd_q();
                }
                current_block = 15129665204879337069;
              }
            }
            11937696639986586685 => {
              cnt = count_lines((*ptr_to_globals).text, (*ptr_to_globals).dot);
              c1 = get_one_char();
              find_range(&mut p, &mut q, c1 as libc::c_char);
              yank_delete(p, q, 1i32, YANKONLY as libc::c_int, 0);
              p = begin_line(p);
              q = end_line(q);
              i = count_lines(p, q);
              while i > 0 {
                if c == '<' as i32 {
                  if *p as libc::c_int == '\t' as i32 {
                    text_hole_delete(p, p, 0);
                  } else if *p as libc::c_int == ' ' as i32 {
                    j = 0;
                    while *p as libc::c_int == ' ' as i32 && j < (*ptr_to_globals).tabstop {
                      text_hole_delete(p, p, 0);
                      j += 1
                    }
                  }
                } else if c == '>' as i32 {
                  char_insert(p, '\t' as i32 as libc::c_char, 1i32);
                }
                i -= 1;
                p = next_line(p)
              }
              (*ptr_to_globals).dot = find_line(cnt);
              dot_skip_over_ws();
              end_cmd_q();
              current_block = 15129665204879337069;
            }
            17725350714912028156 => {
              p = get_input_line(b":\x00" as *const u8 as *const libc::c_char);
              colon(p);
              current_block = 15129665204879337069;
            }
            14526470074083880812 => {
              q = char_search(
                (*ptr_to_globals).dot,
                b"\n\n\x00" as *const u8 as *const libc::c_char,
                (FORWARD as libc::c_int) << 1i32 | FULL as libc::c_int,
              );
              if !q.is_null() {
                (*ptr_to_globals).dot = next_line(q)
              }
              current_block = 15129665204879337069;
            }
            8893187391306414141 => {
              q = char_search(
                (*ptr_to_globals).dot,
                b"\n\n\x00" as *const u8 as *const libc::c_char,
                ((BACK as libc::c_int as libc::c_uint) << 1i32
                  | FULL as libc::c_int as libc::c_uint) as libc::c_int,
              );
              if !q.is_null() {
                (*ptr_to_globals).dot = next_line(q)
              }
              current_block = 15129665204879337069;
            }
            7021673758293221412 => {
              dir = BACK as libc::c_int;
              p = (*ptr_to_globals).dot.offset(-1);
              if *(*ptr_to_globals).last_search_pattern.offset(0) as libc::c_int == '?' as i32 {
                dir = FORWARD as libc::c_int;
                p = (*ptr_to_globals).dot.offset(1)
              }
              current_block = 4166979493554389389;
            }
            18374191879090272823 => {
              buf[0] = c as libc::c_char;
              buf[1] = '\u{0}' as i32 as libc::c_char;
              q = get_input_line(buf.as_mut_ptr());
              if *q.offset(0) as libc::c_int != 0 && *q.offset(1) == 0 {
                if *(*ptr_to_globals).last_search_pattern.offset(0) != 0 {
                  *(*ptr_to_globals).last_search_pattern.offset(0) = c as libc::c_char
                }
                current_block = 7392824444931029276;
              } else if *q.offset(0) != 0 {
                free((*ptr_to_globals).last_search_pattern as *mut libc::c_void);
                (*ptr_to_globals).last_search_pattern = crate::libbb::xfuncs_printf::xstrdup(q);
                current_block = 7392824444931029276;
              } else {
                current_block = 15129665204879337069;
              }
            }
            16407828456666301883 => {
              if (*ptr_to_globals).last_forward_char == 0 {
                current_block = 15129665204879337069;
              } else {
                loop {
                  q = (*ptr_to_globals).dot.offset(-1);
                  while q >= (*ptr_to_globals).text
                    && *q as libc::c_int != '\n' as i32
                    && *q as libc::c_int != (*ptr_to_globals).last_forward_char
                  {
                    q = q.offset(-1)
                  }
                  if q >= (*ptr_to_globals).text
                    && *q as libc::c_int == (*ptr_to_globals).last_forward_char
                  {
                    (*ptr_to_globals).dot = q
                  }
                  (*ptr_to_globals).cmdcnt -= 1;
                  if !((*ptr_to_globals).cmdcnt > 0) {
                    break;
                  }
                }
                current_block = 15129665204879337069;
              }
            }
            9018432604062702004 => {
              q = (*ptr_to_globals).dot;
              while q < (*ptr_to_globals).end && *q as libc::c_int != '\n' as i32 {
                if !strchr(
                  b"()[]{}\x00" as *const u8 as *const libc::c_char,
                  *q as libc::c_int,
                )
                .is_null()
                {
                  p = find_pair(q, *q);
                  if p.is_null() {
                    indicate_error();
                  } else {
                    (*ptr_to_globals).dot = p
                  }
                  break;
                } else {
                  q = q.offset(1)
                }
              }
              if *q as libc::c_int == '\n' as i32 {
                indicate_error();
              }
              current_block = 15129665204879337069;
            }
            10247103787464459848 => {
              p = (*ptr_to_globals).reg[(*ptr_to_globals).YDreg as usize];
              if p.is_null() {
                status_line_bold(
                  b"Nothing in register %c\x00" as *const u8 as *const libc::c_char,
                  what_reg() as libc::c_int,
                );
              } else {
                if !strchr(p, '\n' as i32).is_null() {
                  if c == 'P' as i32 {
                    dot_begin();
                  }
                  if c == 'p' as i32 {
                    if end_line((*ptr_to_globals).dot) == (*ptr_to_globals).end.offset(-1) {
                      (*ptr_to_globals).dot = (*ptr_to_globals).end
                    } else {
                      dot_next();
                    }
                  }
                } else if c == 'p' as i32 {
                  dot_right();
                }
                string_insert((*ptr_to_globals).dot, p, 1i32);
                end_cmd_q();
              }
              current_block = 15129665204879337069;
            }
            15260732871948875843 => {
              c1 = (get_one_char() | 0x20i32) - 'a' as i32;
              if c1 as libc::c_uint <= 25i32 as libc::c_uint {
                (*ptr_to_globals).mark[c1 as usize] = (*ptr_to_globals).dot
              } else {
                indicate_error();
              }
              current_block = 15129665204879337069;
            }
            12738322036487086035 => {
              c1 = get_one_char() | 0x20i32;
              if (c1 - 'a' as i32) as libc::c_uint <= 25i32 as libc::c_uint {
                c1 = c1 - 'a' as i32;
                q = (*ptr_to_globals).mark[c1 as usize];
                if (*ptr_to_globals).text <= q && q < (*ptr_to_globals).end {
                  (*ptr_to_globals).dot = q;
                  dot_begin();
                  dot_skip_over_ws();
                }
              } else if c1 == '\'' as i32 {
                (*ptr_to_globals).dot = swap_context((*ptr_to_globals).dot);
                dot_begin();
                dot_skip_over_ws();
              } else {
                indicate_error();
              }
              current_block = 15129665204879337069;
            }
            13255096073384561358 => {
              c1 = (get_one_char() | 0x20i32) - 'a' as i32;
              if c1 as libc::c_uint <= 25i32 as libc::c_uint {
                (*ptr_to_globals).YDreg = c1 as smalluint
              } else {
                indicate_error();
              }
              current_block = 15129665204879337069;
            }
            10258711639984089377 => {
              if (*ptr_to_globals).cmd_mode as libc::c_int == 0 {
                indicate_error();
              }
              (*ptr_to_globals).cmd_mode = 0 as smallint;
              undo_queue_commit();
              end_cmd_q();
              (*ptr_to_globals).last_status_cksum = 0;
              current_block = 15129665204879337069;
            }
            11439127087547047736 => {
              buf[0] = c as libc::c_char;
              buf[1] = '\u{0}' as i32 as libc::c_char;
              not_implemented(buf.as_mut_ptr());
              end_cmd_q();
              current_block = 17440971994642376514;
            }
            7961798899781870241 => {
              dot_scroll(
                (*ptr_to_globals).rows.wrapping_sub(2i32 as libc::c_uint) as libc::c_int,
                -1i32,
              );
              current_block = 15129665204879337069;
            }
            9426343755402444879 => {
              dot_scroll(
                (*ptr_to_globals)
                  .rows
                  .wrapping_sub(2i32 as libc::c_uint)
                  .wrapping_div(2i32 as libc::c_uint) as libc::c_int,
                1i32,
              );
              current_block = 15129665204879337069;
            }
            13352459794680105913 => {
              dot_scroll(1i32, 1i32);
              current_block = 15129665204879337069;
            }
            14142272253464333006 => {
              dot_scroll(
                (*ptr_to_globals).rows.wrapping_sub(2i32 as libc::c_uint) as libc::c_int,
                1i32,
              );
              current_block = 15129665204879337069;
            }
            10758177197742640066 => {
              (*ptr_to_globals).last_status_cksum = 0;
              current_block = 15129665204879337069;
            }
            6152256259730122749 => {
              current_block = 7534742345255184552;
            }
            12883932598258173301 => {
              current_block = 8800996768013373992;
            }
            11242998110520238401 => {
              redraw(1i32);
              current_block = 15129665204879337069;
            }
            13619733043935729992 => {
              loop {
                dot_next();
                dot_skip_over_ws();
                (*ptr_to_globals).cmdcnt -= 1;
                if !((*ptr_to_globals).cmdcnt > 0) {
                  break;
                }
              }
              current_block = 15129665204879337069;
            }
            9339065157412720613 => {
              dot_scroll(
                (*ptr_to_globals)
                  .rows
                  .wrapping_sub(2i32 as libc::c_uint)
                  .wrapping_div(2i32 as libc::c_uint) as libc::c_int,
                -1i32,
              );
              current_block = 15129665204879337069;
            }
            11447082683497798022 => {
              dot_scroll(1i32, -1i32);
              current_block = 15129665204879337069;
            }
            5182000506326660482 => {
              current_block = 13993698454868426881;
            }
            1105010766850597332 => {
              if !(*ptr_to_globals).reg[27].is_null() {
                p = begin_line((*ptr_to_globals).dot);
                q = end_line((*ptr_to_globals).dot);
                p = text_hole_delete(p, q, 1i32);
                p = p.offset(string_insert(p, (*ptr_to_globals).reg[27], 2i32) as isize);
                (*ptr_to_globals).dot = p;
                dot_skip_over_ws();
              }
              current_block = 15129665204879337069;
            }
            8616046655533110204 => {
              undo_pop();
              current_block = 15129665204879337069;
            }
            5127767458142431603 => {
              loop {
                (*ptr_to_globals).dot = end_line((*ptr_to_globals).dot);
                (*ptr_to_globals).cmdcnt -= 1;
                if (*ptr_to_globals).cmdcnt <= 0 {
                  break;
                }
                dot_next();
              }
              current_block = 15129665204879337069;
            }
            222014967776118151 => {
              (*ptr_to_globals).last_forward_char = get_one_char();
              current_block = 7856905509180742666;
            }
            11209792479411604110 => {
              loop {
                dot_prev();
                dot_skip_over_ws();
                (*ptr_to_globals).cmdcnt -= 1;
                if !((*ptr_to_globals).cmdcnt > 0) {
                  break;
                }
              }
              current_block = 15129665204879337069;
            }
            3364823792826654116 => {
              if (*ptr_to_globals).lmc_len != 0 {
                (*ptr_to_globals).ioq_start = crate::libbb::xfuncs_printf::xstrndup(
                  (*ptr_to_globals).last_modifying_cmd.as_mut_ptr(),
                  (*ptr_to_globals).lmc_len,
                );
                (*ptr_to_globals).ioq = (*ptr_to_globals).ioq_start
              }
              current_block = 15129665204879337069;
            }
            18096603330221575131 => {
              current_block = 17498168302144015873;
            }
            16891123271837848903 => {
              dot_end();
              current_block = 1752638907092016026;
            }
            8517235759107662071 => {
              current_block = 5847749760081351726;
            }
            12525254419223051704 => {
              if (*ptr_to_globals).dot < (*ptr_to_globals).end.offset(-1) {
                (*ptr_to_globals).dot = yank_delete(
                  (*ptr_to_globals).dot,
                  (*ptr_to_globals).dot,
                  1i32,
                  YANKDEL as libc::c_int,
                  1i32,
                )
              }
              current_block = 15129665204879337069;
            }
            15232911949322867522 => {
              current_block = 17251831742223396249;
            }
            10863374208794025069 => {
              current_block = 1895262434596074581;
            }
            451126677064669119 => {
              loop {
                dot_prev();
                (*ptr_to_globals).dot = move_to_col(
                  (*ptr_to_globals).dot,
                  (*ptr_to_globals).ccol + (*ptr_to_globals).offset,
                );
                (*ptr_to_globals).cmdcnt -= 1;
                if !((*ptr_to_globals).cmdcnt > 0) {
                  break;
                }
              }
              current_block = 15129665204879337069;
            }
            4611735929166613116 => {
              loop {
                if bb_ascii_isalnum(*(*ptr_to_globals).dot as libc::c_uchar) != 0
                  || *(*ptr_to_globals).dot as libc::c_int == '_' as i32
                {
                  (*ptr_to_globals).dot = skip_thing(
                    (*ptr_to_globals).dot,
                    1i32,
                    FORWARD as libc::c_int,
                    S_END_ALNUM as libc::c_int,
                  )
                } else if *strchrnul(
                  b"!\"#$%&\'()*+,-./:;<=>?@[\\]^_`{|}~\x00" as *const u8 as *const libc::c_char,
                  *(*ptr_to_globals).dot as libc::c_int,
                )
                .offset(0)
                  != 0
                {
                  (*ptr_to_globals).dot = skip_thing(
                    (*ptr_to_globals).dot,
                    1i32,
                    FORWARD as libc::c_int,
                    S_END_PUNCT as libc::c_int,
                  )
                }
                if (*ptr_to_globals).dot < (*ptr_to_globals).end.offset(-1) {
                  (*ptr_to_globals).dot = (*ptr_to_globals).dot.offset(1)
                }
                if ({
                  let mut bb__isspace: libc::c_uchar =
                    (*(*ptr_to_globals).dot as libc::c_int - 9i32) as libc::c_uchar;
                  (bb__isspace as libc::c_int == ' ' as i32 - 9i32
                    || bb__isspace as libc::c_int <= 13i32 - 9i32) as libc::c_int
                }) != 0
                {
                  (*ptr_to_globals).dot = skip_thing(
                    (*ptr_to_globals).dot,
                    2i32,
                    FORWARD as libc::c_int,
                    S_OVER_WS as libc::c_int,
                  )
                }
                (*ptr_to_globals).cmdcnt -= 1;
                if !((*ptr_to_globals).cmdcnt > 0) {
                  break;
                }
              }
              current_block = 15129665204879337069;
            }
            4386451087681909888 => {
              (*ptr_to_globals).dot =
                move_to_col((*ptr_to_globals).dot, (*ptr_to_globals).cmdcnt - 1i32);
              current_block = 15129665204879337069;
            }
            1296397779060594135 => {
              dot_begin();
              current_block = 15129665204879337069;
            }
            _ => {}
          }
          match current_block {
            15129665204879337069 => {}
            8629930936610358348 => {}
            _ => {
              match current_block {
                17251831742223396249 => {
                  dir = 0;
                  if c == 'X' as i32 {
                    dir = -1i32
                  }
                  loop {
                    if *(*ptr_to_globals).dot.offset(dir as isize) as libc::c_int != '\n' as i32 {
                      if c == 'X' as i32 {
                        (*ptr_to_globals).dot = (*ptr_to_globals).dot.offset(-1)
                      }
                      (*ptr_to_globals).dot = yank_delete(
                        (*ptr_to_globals).dot,
                        (*ptr_to_globals).dot,
                        0,
                        YANKDEL as libc::c_int,
                        1i32,
                      )
                    }
                    (*ptr_to_globals).cmdcnt -= 1;
                    if !((*ptr_to_globals).cmdcnt > 0) {
                      break;
                    }
                  }
                  end_cmd_q();
                  if c == 's' as i32 {
                    current_block = 8629930936610358348;
                  } else {
                    current_block = 15129665204879337069;
                  }
                }
                2087484904894455135 => {
                  dot_end();
                  (*ptr_to_globals).dot =
                    char_insert((*ptr_to_globals).dot, '\n' as i32 as libc::c_char, 1i32);
                  current_block = 8629930936610358348;
                }
                11945623545738147997 => {
                  (*ptr_to_globals).dot = (*ptr_to_globals).end.offset(-1);
                  if (*ptr_to_globals).cmdcnt > 0 {
                    (*ptr_to_globals).dot = find_line((*ptr_to_globals).cmdcnt)
                  }
                  dot_skip_over_ws();
                  current_block = 15129665204879337069;
                }
                5847749760081351726 => {
                  dir = FORWARD as libc::c_int;
                  if c == 'B' as i32 {
                    dir = BACK as libc::c_int
                  }
                  loop {
                    if c == 'W' as i32
                      || ({
                        let mut bb__isspace: libc::c_uchar =
                          (*(*ptr_to_globals).dot.offset(dir as isize) as libc::c_int - 9i32)
                            as libc::c_uchar;
                        (bb__isspace as libc::c_int == ' ' as i32 - 9i32
                          || bb__isspace as libc::c_int <= 13i32 - 9i32)
                          as libc::c_int
                      }) != 0
                    {
                      (*ptr_to_globals).dot =
                        skip_thing((*ptr_to_globals).dot, 1i32, dir, S_TO_WS as libc::c_int);
                      (*ptr_to_globals).dot =
                        skip_thing((*ptr_to_globals).dot, 2i32, dir, S_OVER_WS as libc::c_int)
                    }
                    if c != 'W' as i32 {
                      (*ptr_to_globals).dot =
                        skip_thing((*ptr_to_globals).dot, 1i32, dir, S_BEFORE_WS as libc::c_int)
                    }
                    (*ptr_to_globals).cmdcnt -= 1;
                    if !((*ptr_to_globals).cmdcnt > 0) {
                      break;
                    }
                  }
                  current_block = 15129665204879337069;
                }
                17440971994642376514 => {
                  current_block = 15129665204879337069;
                }
                7534742345255184552 => {
                  current_block = 17247297260531395789;
                }
                8800996768013373992 => {
                  loop {
                    dot_next();
                    (*ptr_to_globals).dot = move_to_col(
                      (*ptr_to_globals).dot,
                      (*ptr_to_globals).ccol + (*ptr_to_globals).offset,
                    );
                    (*ptr_to_globals).cmdcnt -= 1;
                    if !((*ptr_to_globals).cmdcnt > 0) {
                      break;
                    }
                  }
                  current_block = 15129665204879337069;
                }
                13993698454868426881 => {
                  loop {
                    dot_right();
                    (*ptr_to_globals).cmdcnt -= 1;
                    if !((*ptr_to_globals).cmdcnt > 0) {
                      break;
                    }
                  }
                  current_block = 15129665204879337069;
                }
                7856905509180742666 => {
                  while !((*ptr_to_globals).last_forward_char == 0) {
                    q = (*ptr_to_globals).dot.offset(1);
                    while q < (*ptr_to_globals).end.offset(-1)
                      && *q as libc::c_int != '\n' as i32
                      && *q as libc::c_int != (*ptr_to_globals).last_forward_char
                    {
                      q = q.offset(1)
                    }
                    if *q as libc::c_int == (*ptr_to_globals).last_forward_char {
                      (*ptr_to_globals).dot = q
                    }
                    (*ptr_to_globals).cmdcnt -= 1;
                    if !((*ptr_to_globals).cmdcnt > 0) {
                      break;
                    }
                  }
                  current_block = 15129665204879337069;
                }
                17498168302144015873 => {
                  current_block = 8681395796513813967;
                }
                1752638907092016026 => {
                  if *(*ptr_to_globals).dot as libc::c_int != '\n' as i32 {
                    (*ptr_to_globals).dot = (*ptr_to_globals).dot.offset(1)
                  }
                  current_block = 8629930936610358348;
                }
                3268579060917229304 => {
                  current_block = 8629930936610358348;
                }
                1895262434596074581 => {
                  current_block = 8908416993177701018;
                }
                _ => {}
              }
              match current_block {
                8629930936610358348 => {}
                15129665204879337069 => {}
                _ => {
                  match current_block {
                    17247297260531395789 => {
                      loop {
                        dot_left();
                        (*ptr_to_globals).cmdcnt -= 1;
                        if !((*ptr_to_globals).cmdcnt > 0) {
                          break;
                        }
                      }
                      current_block = 15129665204879337069;
                    }
                    8681395796513813967 => {
                      current_block = 5591548203144509315;
                    }
                    8908416993177701018 => {
                      current_block = 16124761010012532485;
                    }
                    _ => {}
                  }
                  match current_block {
                    15129665204879337069 => {}
                    _ => {
                      match current_block {
                        16124761010012532485 => {
                          let mut yf: libc::c_int = 0;
                          let mut ml: libc::c_int = 0;
                          let mut whole: libc::c_int = 0;
                          yf = YANKDEL as libc::c_int;
                          if c == 'y' as i32 || c == 'Y' as i32 {
                            yf = YANKONLY as libc::c_int
                          }
                          c1 = 'y' as i32;
                          if c != 'Y' as i32 {
                            c1 = get_one_char()
                          }
                          ml = find_range(&mut p, &mut q, c1 as libc::c_char);
                          place_cursor(0i32, 0);
                          if c1 == 27i32 {
                            c1 = 27i32;
                            c = c1
                          } else if !strchr(b"wW\x00" as *const u8 as *const libc::c_char, c1)
                            .is_null()
                          {
                            ml = 0;
                            if c == 'c' as i32 {
                              while ({
                                let mut bb__isspace: libc::c_uchar =
                                  (*q as libc::c_int - 9i32) as libc::c_uchar;
                                (bb__isspace as libc::c_int == ' ' as i32 - 9i32
                                  || bb__isspace as libc::c_int <= 13i32 - 9i32)
                                  as libc::c_int
                              }) != 0
                                && q > p
                              {
                                q = q.offset(-1)
                              }
                            }
                            (*ptr_to_globals).dot = yank_delete(p, q, ml, yf, 1i32)
                          } else if !strchr(
                            b"^0bBeEft%$ lh\x08\x7f\x00" as *const u8 as *const libc::c_char,
                            c1,
                          )
                          .is_null()
                          {
                            (*ptr_to_globals).dot = yank_delete(p, q, ml, yf, 1i32)
                          } else if !strchr(
                            b"cdykjGHL+-{}\r\n\x00" as *const u8 as *const libc::c_char,
                            c1,
                          )
                          .is_null()
                          {
                            (*ptr_to_globals).dot = yank_delete(p, q, ml, yf, 1i32);
                            whole = 1i32
                          } else {
                            c1 = 27i32;
                            c = c1;
                            ml = 0;
                            indicate_error();
                          }
                          if ml != 0 && whole != 0 {
                            if c == 'c' as i32 {
                              (*ptr_to_globals).dot = char_insert(
                                (*ptr_to_globals).dot,
                                '\n' as i32 as libc::c_char,
                                2i32,
                              );
                              if whole != 0
                                && (*ptr_to_globals).dot != (*ptr_to_globals).end.offset(-1)
                              {
                                dot_prev();
                              }
                            } else if c == 'd' as i32 {
                              dot_begin();
                              dot_skip_over_ws();
                            }
                          }
                          if c1 != 27i32 {
                            if c == 'c' as i32 {
                              strcpy(
                                buf.as_mut_ptr(),
                                b"Change\x00" as *const u8 as *const libc::c_char,
                              );
                              current_block = 8629930936610358348;
                            } else {
                              if c == 'd' as i32 {
                                strcpy(
                                  buf.as_mut_ptr(),
                                  b"Delete\x00" as *const u8 as *const libc::c_char,
                                );
                              }
                              if c == 'y' as i32 || c == 'Y' as i32 {
                                strcpy(
                                  buf.as_mut_ptr(),
                                  b"Yank\x00" as *const u8 as *const libc::c_char,
                                );
                              }
                              p = (*ptr_to_globals).reg[(*ptr_to_globals).YDreg as usize];
                              q = p.offset(strlen(p) as isize);
                              cnt = 0;
                              while p <= q {
                                if *p as libc::c_int == '\n' as i32 {
                                  cnt += 1
                                }
                                p = p.offset(1)
                              }
                              status_line(
                                b"%s %u lines (%u chars) using [%c]\x00" as *const u8
                                  as *const libc::c_char,
                                buf.as_mut_ptr(),
                                cnt,
                                strlen((*ptr_to_globals).reg[(*ptr_to_globals).YDreg as usize])
                                  as libc::c_uint,
                                what_reg() as libc::c_int,
                              );
                              end_cmd_q();
                              current_block = 15129665204879337069;
                            }
                          } else {
                            current_block = 15129665204879337069;
                          }
                        }
                        5591548203144509315 => {
                          current_block = 2636677179867529885;
                        }
                        _ => {}
                      }
                      match current_block {
                        15129665204879337069 => {}
                        8629930936610358348 => {}
                        _ => {
                          match current_block {
                            2636677179867529885 => {
                              current_block = 12309206730560524281;
                            }
                            _ => {}
                          }
                          match current_block {
                            12309206730560524281 => {
                              current_block = 3325768110057758661;
                            }
                            _ => {}
                          }
                          match current_block {
                            3325768110057758661 => {
                              current_block = 14815832896553429982;
                            }
                            _ => {}
                          }
                          match current_block {
                            14815832896553429982 => {
                              current_block = 10731695520297161438;
                            }
                            _ => {}
                          }
                          match current_block {
                            10731695520297161438 => {
                              if c == '0' as i32 && (*ptr_to_globals).cmdcnt < 1i32 {
                                dot_begin();
                              } else {
                                (*ptr_to_globals).cmdcnt =
                                  (*ptr_to_globals).cmdcnt * 10i32 + (c - '0' as i32)
                              }
                              current_block = 15129665204879337069;
                            }
                            _ => {}
                          }
                          match current_block {
                            15129665204879337069 => {}
                            _ => {
                              loop {
                                match current_block {
                                  16813369756331276724 => {
                                    msg = std::ptr::null();
                                    current_block = 7392824444931029276;
                                  }
                                  7392824444931029276 => {
                                    dir = FORWARD as libc::c_int;
                                    p = (*ptr_to_globals).dot.offset(1);
                                    if *(*ptr_to_globals).last_search_pattern.offset(0)
                                      as libc::c_int
                                      == '?' as i32
                                    {
                                      dir = BACK as libc::c_int;
                                      p = (*ptr_to_globals).dot.offset(-1)
                                    }
                                    current_block = 4166979493554389389;
                                  }
                                  _ => {
                                    q = char_search(
                                      p,
                                      (*ptr_to_globals).last_search_pattern.offset(1),
                                      dir << 1i32 | FULL as libc::c_int,
                                    );
                                    if !q.is_null() {
                                      (*ptr_to_globals).dot = q;
                                      msg = std::ptr::null()
                                    } else {
                                      p = (*ptr_to_globals).text;
                                      if dir == BACK as libc::c_int {
                                        p = (*ptr_to_globals).end.offset(-1)
                                      }
                                      q = char_search(
                                        p,
                                        (*ptr_to_globals).last_search_pattern.offset(1),
                                        dir << 1i32 | FULL as libc::c_int,
                                      );
                                      if !q.is_null() {
                                        (*ptr_to_globals).dot = q;
                                        msg = b"search hit BOTTOM, continuing at TOP\x00"
                                          as *const u8
                                          as *const libc::c_char;
                                        if dir == BACK as libc::c_int {
                                          msg = b"search hit TOP, continuing at BOTTOM\x00"
                                            as *const u8
                                            as *const libc::c_char
                                        }
                                      } else {
                                        msg = b"Pattern not found\x00" as *const u8
                                          as *const libc::c_char
                                      }
                                    }
                                    if !msg.is_null() {
                                      status_line_bold(
                                        b"%s\x00" as *const u8 as *const libc::c_char,
                                        msg,
                                      );
                                    }
                                    (*ptr_to_globals).cmdcnt -= 1;
                                    if (*ptr_to_globals).cmdcnt > 0 {
                                      current_block = 16813369756331276724;
                                    } else {
                                      break;
                                    }
                                  }
                                }
                              }
                              current_block = 15129665204879337069;
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
        109 => {
          current_block = 15260732871948875843;
          match current_block {
            16992905640583886232 => {
              loop {
                if (*(*ptr_to_globals).dot as libc::c_int - 'a' as i32) as libc::c_uchar
                  as libc::c_int
                  <= 'z' as i32 - 'a' as i32
                {
                  undo_push(
                    (*ptr_to_globals).dot,
                    1i32 as libc::c_uint,
                    1i32 as libc::c_uchar,
                  );
                  *(*ptr_to_globals).dot =
                    bb_ascii_toupper(*(*ptr_to_globals).dot as libc::c_uchar) as libc::c_char;
                  undo_push(
                    (*ptr_to_globals).dot,
                    1i32 as libc::c_uint,
                    2i32 as libc::c_uchar,
                  );
                } else if (*(*ptr_to_globals).dot as libc::c_int - 'A' as i32) as libc::c_uchar
                  as libc::c_int
                  <= 'Z' as i32 - 'A' as i32
                {
                  undo_push(
                    (*ptr_to_globals).dot,
                    1i32 as libc::c_uint,
                    1i32 as libc::c_uchar,
                  );
                  *(*ptr_to_globals).dot =
                    bb_ascii_tolower(*(*ptr_to_globals).dot as libc::c_uchar) as libc::c_char;
                  undo_push(
                    (*ptr_to_globals).dot,
                    1i32 as libc::c_uint,
                    2i32 as libc::c_uchar,
                  );
                }
                dot_right();
                (*ptr_to_globals).cmdcnt -= 1;
                if !((*ptr_to_globals).cmdcnt > 0) {
                  break;
                }
              }
              end_cmd_q();
              current_block = 15129665204879337069;
            }
            8729655159604064397 => {
              c1 = get_one_char();
              cnt = 0;
              if c1 == '.' as i32 {
                cnt = (*ptr_to_globals)
                  .rows
                  .wrapping_sub(2i32 as libc::c_uint)
                  .wrapping_div(2i32 as libc::c_uint) as libc::c_int
              }
              if c1 == '-' as i32 {
                cnt = (*ptr_to_globals).rows.wrapping_sub(2i32 as libc::c_uint) as libc::c_int
              }
              (*ptr_to_globals).screenbegin = begin_line((*ptr_to_globals).dot);
              dot_scroll(cnt, -1i32);
              current_block = 15129665204879337069;
            }
            15899500648299942075 => {
              (*ptr_to_globals).last_forward_char = get_one_char();
              do_cmd(';' as i32);
              if *(*ptr_to_globals).dot as libc::c_int == (*ptr_to_globals).last_forward_char {
                dot_left();
              }
              (*ptr_to_globals).last_forward_char = 0;
              current_block = 15129665204879337069;
            }
            9051390181078481641 => {
              c1 = get_one_char();
              if *(*ptr_to_globals).dot as libc::c_int != '\n' as i32 {
                (*ptr_to_globals).dot =
                  text_hole_delete((*ptr_to_globals).dot, (*ptr_to_globals).dot, 1i32);
                (*ptr_to_globals).dot =
                  char_insert((*ptr_to_globals).dot, c1 as libc::c_char, 2i32);
                dot_left();
              }
              end_cmd_q();
              current_block = 15129665204879337069;
            }
            877115918601926659 => {
              dir = FORWARD as libc::c_int;
              if c == 'b' as i32 {
                dir = BACK as libc::c_int
              }
              while !((*ptr_to_globals).dot.offset(dir as isize) < (*ptr_to_globals).text
                || (*ptr_to_globals).dot.offset(dir as isize) > (*ptr_to_globals).end.offset(-1))
              {
                (*ptr_to_globals).dot = (*ptr_to_globals).dot.offset(dir as isize);
                if ({
                  let mut bb__isspace: libc::c_uchar =
                    (*(*ptr_to_globals).dot as libc::c_int - 9i32) as libc::c_uchar;
                  (bb__isspace as libc::c_int == ' ' as i32 - 9i32
                    || bb__isspace as libc::c_int <= 13i32 - 9i32) as libc::c_int
                }) != 0
                {
                  (*ptr_to_globals).dot = skip_thing(
                    (*ptr_to_globals).dot,
                    if c == 'e' as i32 { 2i32 } else { 1i32 },
                    dir,
                    S_OVER_WS as libc::c_int,
                  )
                }
                if bb_ascii_isalnum(*(*ptr_to_globals).dot as libc::c_uchar) != 0
                  || *(*ptr_to_globals).dot as libc::c_int == '_' as i32
                {
                  (*ptr_to_globals).dot =
                    skip_thing((*ptr_to_globals).dot, 1i32, dir, S_END_ALNUM as libc::c_int)
                } else if *strchrnul(
                  b"!\"#$%&\'()*+,-./:;<=>?@[\\]^_`{|}~\x00" as *const u8 as *const libc::c_char,
                  *(*ptr_to_globals).dot as libc::c_int,
                )
                .offset(0)
                  != 0
                {
                  (*ptr_to_globals).dot =
                    skip_thing((*ptr_to_globals).dot, 1i32, dir, S_END_PUNCT as libc::c_int)
                }
                (*ptr_to_globals).cmdcnt -= 1;
                if !((*ptr_to_globals).cmdcnt > 0) {
                  break;
                }
              }
              current_block = 15129665204879337069;
            }
            1085022737867179637 => {
              dot_begin();
              dot_skip_over_ws();
              current_block = 15129665204879337069;
            }
            3113147720494587438 => {
              c1 = get_one_char();
              if c1 != 'Z' as i32 {
                indicate_error();
              } else if (*ptr_to_globals).modified_count != 0 {
                if 1i32 != 0 && (*ptr_to_globals).readonly_mode as libc::c_int != 0 {
                  status_line_bold(
                    b"\'%s\' is read only\x00" as *const u8 as *const libc::c_char,
                    (*ptr_to_globals).current_filename,
                  );
                } else {
                  cnt = file_write(
                    (*ptr_to_globals).current_filename,
                    (*ptr_to_globals).text,
                    (*ptr_to_globals).end.offset(-1),
                  );
                  if cnt < 0 {
                    if cnt == -1i32 {
                      status_line_bold(b"Write error: %m\x00" as *const u8 as *const libc::c_char);
                    }
                  } else if cnt as libc::c_long
                    == (*ptr_to_globals)
                      .end
                      .offset(-1)
                      .wrapping_offset_from((*ptr_to_globals).text)
                      as libc::c_long
                      + 1
                  {
                    (*ptr_to_globals).editing = 0 as smallint
                  }
                }
              } else {
                (*ptr_to_globals).editing = 0 as smallint
              }
              current_block = 15129665204879337069;
            }
            12960118908218882441 => {
              p = begin_line((*ptr_to_globals).dot);
              if *p.offset(-1i32 as isize) as libc::c_int == '\n' as i32 {
                dot_prev();
                current_block = 2087484904894455135;
              } else {
                dot_begin();
                (*ptr_to_globals).dot =
                  char_insert((*ptr_to_globals).dot, '\n' as i32 as libc::c_char, 1i32);
                dot_prev();
                current_block = 8629930936610358348;
              }
            }
            8720450212473544924 => {
              (*ptr_to_globals).dot = (*ptr_to_globals).screenbegin;
              cnt = 0;
              while (cnt as libc::c_uint)
                < (*ptr_to_globals)
                  .rows
                  .wrapping_sub(1i32 as libc::c_uint)
                  .wrapping_div(2i32 as libc::c_uint)
              {
                (*ptr_to_globals).dot = next_line((*ptr_to_globals).dot);
                cnt += 1
              }
              current_block = 15129665204879337069;
            }
            13015277209715431090 => {
              (*ptr_to_globals).dot = end_screen();
              if (*ptr_to_globals).cmdcnt as libc::c_uint
                > (*ptr_to_globals).rows.wrapping_sub(1i32 as libc::c_uint)
              {
                (*ptr_to_globals).cmdcnt =
                  (*ptr_to_globals).rows.wrapping_sub(1i32 as libc::c_uint) as libc::c_int
              }
              (*ptr_to_globals).cmdcnt -= 1;
              if (*ptr_to_globals).cmdcnt > 0 {
                do_cmd('-' as i32);
              }
              dot_begin();
              dot_skip_over_ws();
              current_block = 15129665204879337069;
            }
            9800435767766781385 => {
              loop {
                dot_end();
                if (*ptr_to_globals).dot < (*ptr_to_globals).end.offset(-1) {
                  undo_push(
                    (*ptr_to_globals).dot,
                    1i32 as libc::c_uint,
                    1i32 as libc::c_uchar,
                  );
                  let fresh15 = (*ptr_to_globals).dot;
                  (*ptr_to_globals).dot = (*ptr_to_globals).dot.offset(1);
                  *fresh15 = ' ' as i32 as libc::c_char;
                  undo_push(
                    (*ptr_to_globals).dot.offset(-1),
                    1i32 as libc::c_uint,
                    2i32 as libc::c_uchar,
                  );
                  while ({
                    let mut bb__isblank: libc::c_uchar = *(*ptr_to_globals).dot as libc::c_uchar;
                    (bb__isblank as libc::c_int == ' ' as i32
                      || bb__isblank as libc::c_int == '\t' as i32)
                      as libc::c_int
                  }) != 0
                  {
                    text_hole_delete((*ptr_to_globals).dot, (*ptr_to_globals).dot, 2i32);
                  }
                }
                (*ptr_to_globals).cmdcnt -= 1;
                if !((*ptr_to_globals).cmdcnt > 0) {
                  break;
                }
              }
              end_cmd_q();
              current_block = 15129665204879337069;
            }
            3432363526595694666 => {
              dot_begin();
              dot_skip_over_ws();
              current_block = 3268579060917229304;
            }
            3494829253343353619 => {
              (*ptr_to_globals).dot = (*ptr_to_globals).screenbegin;
              if (*ptr_to_globals).cmdcnt as libc::c_uint
                > (*ptr_to_globals).rows.wrapping_sub(1i32 as libc::c_uint)
              {
                (*ptr_to_globals).cmdcnt =
                  (*ptr_to_globals).rows.wrapping_sub(1i32 as libc::c_uint) as libc::c_int
              }
              (*ptr_to_globals).cmdcnt -= 1;
              if (*ptr_to_globals).cmdcnt > 0 {
                do_cmd('+' as i32);
              }
              dot_skip_over_ws();
              current_block = 15129665204879337069;
            }
            17973101765331640574 => {
              c1 = get_one_char();
              if c1 != 'g' as i32 {
                buf[0] = 'g' as i32 as libc::c_char;
                buf[1] = if c1 >= 0 { c1 } else { '*' as i32 } as libc::c_char;
                buf[2] = '\u{0}' as i32 as libc::c_char;
                not_implemented(buf.as_mut_ptr());
                current_block = 15129665204879337069;
              } else {
                if (*ptr_to_globals).cmdcnt == 0 {
                  (*ptr_to_globals).cmdcnt = 1i32
                }
                current_block = 11945623545738147997;
              }
            }
            16546625800574160972 => {
              save_dot = (*ptr_to_globals).dot;
              (*ptr_to_globals).dot = dollar_line((*ptr_to_globals).dot);
              (*ptr_to_globals).dot = yank_delete(
                save_dot,
                (*ptr_to_globals).dot,
                0,
                YANKDEL as libc::c_int,
                1i32,
              );
              if c == 'C' as i32 {
                current_block = 8629930936610358348;
              } else {
                if c == 'D' as i32 {
                  end_cmd_q();
                }
                current_block = 15129665204879337069;
              }
            }
            11937696639986586685 => {
              cnt = count_lines((*ptr_to_globals).text, (*ptr_to_globals).dot);
              c1 = get_one_char();
              find_range(&mut p, &mut q, c1 as libc::c_char);
              yank_delete(p, q, 1i32, YANKONLY as libc::c_int, 0);
              p = begin_line(p);
              q = end_line(q);
              i = count_lines(p, q);
              while i > 0 {
                if c == '<' as i32 {
                  if *p as libc::c_int == '\t' as i32 {
                    text_hole_delete(p, p, 0);
                  } else if *p as libc::c_int == ' ' as i32 {
                    j = 0;
                    while *p as libc::c_int == ' ' as i32 && j < (*ptr_to_globals).tabstop {
                      text_hole_delete(p, p, 0);
                      j += 1
                    }
                  }
                } else if c == '>' as i32 {
                  char_insert(p, '\t' as i32 as libc::c_char, 1i32);
                }
                i -= 1;
                p = next_line(p)
              }
              (*ptr_to_globals).dot = find_line(cnt);
              dot_skip_over_ws();
              end_cmd_q();
              current_block = 15129665204879337069;
            }
            17725350714912028156 => {
              p = get_input_line(b":\x00" as *const u8 as *const libc::c_char);
              colon(p);
              current_block = 15129665204879337069;
            }
            14526470074083880812 => {
              q = char_search(
                (*ptr_to_globals).dot,
                b"\n\n\x00" as *const u8 as *const libc::c_char,
                (FORWARD as libc::c_int) << 1i32 | FULL as libc::c_int,
              );
              if !q.is_null() {
                (*ptr_to_globals).dot = next_line(q)
              }
              current_block = 15129665204879337069;
            }
            8893187391306414141 => {
              q = char_search(
                (*ptr_to_globals).dot,
                b"\n\n\x00" as *const u8 as *const libc::c_char,
                ((BACK as libc::c_int as libc::c_uint) << 1i32
                  | FULL as libc::c_int as libc::c_uint) as libc::c_int,
              );
              if !q.is_null() {
                (*ptr_to_globals).dot = next_line(q)
              }
              current_block = 15129665204879337069;
            }
            7021673758293221412 => {
              dir = BACK as libc::c_int;
              p = (*ptr_to_globals).dot.offset(-1);
              if *(*ptr_to_globals).last_search_pattern.offset(0) as libc::c_int == '?' as i32 {
                dir = FORWARD as libc::c_int;
                p = (*ptr_to_globals).dot.offset(1)
              }
              current_block = 4166979493554389389;
            }
            18374191879090272823 => {
              buf[0] = c as libc::c_char;
              buf[1] = '\u{0}' as i32 as libc::c_char;
              q = get_input_line(buf.as_mut_ptr());
              if *q.offset(0) as libc::c_int != 0 && *q.offset(1) == 0 {
                if *(*ptr_to_globals).last_search_pattern.offset(0) != 0 {
                  *(*ptr_to_globals).last_search_pattern.offset(0) = c as libc::c_char
                }
                current_block = 7392824444931029276;
              } else if *q.offset(0) != 0 {
                free((*ptr_to_globals).last_search_pattern as *mut libc::c_void);
                (*ptr_to_globals).last_search_pattern = crate::libbb::xfuncs_printf::xstrdup(q);
                current_block = 7392824444931029276;
              } else {
                current_block = 15129665204879337069;
              }
            }
            16407828456666301883 => {
              if (*ptr_to_globals).last_forward_char == 0 {
                current_block = 15129665204879337069;
              } else {
                loop {
                  q = (*ptr_to_globals).dot.offset(-1);
                  while q >= (*ptr_to_globals).text
                    && *q as libc::c_int != '\n' as i32
                    && *q as libc::c_int != (*ptr_to_globals).last_forward_char
                  {
                    q = q.offset(-1)
                  }
                  if q >= (*ptr_to_globals).text
                    && *q as libc::c_int == (*ptr_to_globals).last_forward_char
                  {
                    (*ptr_to_globals).dot = q
                  }
                  (*ptr_to_globals).cmdcnt -= 1;
                  if !((*ptr_to_globals).cmdcnt > 0) {
                    break;
                  }
                }
                current_block = 15129665204879337069;
              }
            }
            9018432604062702004 => {
              q = (*ptr_to_globals).dot;
              while q < (*ptr_to_globals).end && *q as libc::c_int != '\n' as i32 {
                if !strchr(
                  b"()[]{}\x00" as *const u8 as *const libc::c_char,
                  *q as libc::c_int,
                )
                .is_null()
                {
                  p = find_pair(q, *q);
                  if p.is_null() {
                    indicate_error();
                  } else {
                    (*ptr_to_globals).dot = p
                  }
                  break;
                } else {
                  q = q.offset(1)
                }
              }
              if *q as libc::c_int == '\n' as i32 {
                indicate_error();
              }
              current_block = 15129665204879337069;
            }
            10247103787464459848 => {
              p = (*ptr_to_globals).reg[(*ptr_to_globals).YDreg as usize];
              if p.is_null() {
                status_line_bold(
                  b"Nothing in register %c\x00" as *const u8 as *const libc::c_char,
                  what_reg() as libc::c_int,
                );
              } else {
                if !strchr(p, '\n' as i32).is_null() {
                  if c == 'P' as i32 {
                    dot_begin();
                  }
                  if c == 'p' as i32 {
                    if end_line((*ptr_to_globals).dot) == (*ptr_to_globals).end.offset(-1) {
                      (*ptr_to_globals).dot = (*ptr_to_globals).end
                    } else {
                      dot_next();
                    }
                  }
                } else if c == 'p' as i32 {
                  dot_right();
                }
                string_insert((*ptr_to_globals).dot, p, 1i32);
                end_cmd_q();
              }
              current_block = 15129665204879337069;
            }
            15260732871948875843 => {
              c1 = (get_one_char() | 0x20i32) - 'a' as i32;
              if c1 as libc::c_uint <= 25i32 as libc::c_uint {
                (*ptr_to_globals).mark[c1 as usize] = (*ptr_to_globals).dot
              } else {
                indicate_error();
              }
              current_block = 15129665204879337069;
            }
            12738322036487086035 => {
              c1 = get_one_char() | 0x20i32;
              if (c1 - 'a' as i32) as libc::c_uint <= 25i32 as libc::c_uint {
                c1 = c1 - 'a' as i32;
                q = (*ptr_to_globals).mark[c1 as usize];
                if (*ptr_to_globals).text <= q && q < (*ptr_to_globals).end {
                  (*ptr_to_globals).dot = q;
                  dot_begin();
                  dot_skip_over_ws();
                }
              } else if c1 == '\'' as i32 {
                (*ptr_to_globals).dot = swap_context((*ptr_to_globals).dot);
                dot_begin();
                dot_skip_over_ws();
              } else {
                indicate_error();
              }
              current_block = 15129665204879337069;
            }
            13255096073384561358 => {
              c1 = (get_one_char() | 0x20i32) - 'a' as i32;
              if c1 as libc::c_uint <= 25i32 as libc::c_uint {
                (*ptr_to_globals).YDreg = c1 as smalluint
              } else {
                indicate_error();
              }
              current_block = 15129665204879337069;
            }
            10258711639984089377 => {
              if (*ptr_to_globals).cmd_mode as libc::c_int == 0 {
                indicate_error();
              }
              (*ptr_to_globals).cmd_mode = 0 as smallint;
              undo_queue_commit();
              end_cmd_q();
              (*ptr_to_globals).last_status_cksum = 0;
              current_block = 15129665204879337069;
            }
            11439127087547047736 => {
              buf[0] = c as libc::c_char;
              buf[1] = '\u{0}' as i32 as libc::c_char;
              not_implemented(buf.as_mut_ptr());
              end_cmd_q();
              current_block = 17440971994642376514;
            }
            7961798899781870241 => {
              dot_scroll(
                (*ptr_to_globals).rows.wrapping_sub(2i32 as libc::c_uint) as libc::c_int,
                -1i32,
              );
              current_block = 15129665204879337069;
            }
            9426343755402444879 => {
              dot_scroll(
                (*ptr_to_globals)
                  .rows
                  .wrapping_sub(2i32 as libc::c_uint)
                  .wrapping_div(2i32 as libc::c_uint) as libc::c_int,
                1i32,
              );
              current_block = 15129665204879337069;
            }
            13352459794680105913 => {
              dot_scroll(1i32, 1i32);
              current_block = 15129665204879337069;
            }
            14142272253464333006 => {
              dot_scroll(
                (*ptr_to_globals).rows.wrapping_sub(2i32 as libc::c_uint) as libc::c_int,
                1i32,
              );
              current_block = 15129665204879337069;
            }
            10758177197742640066 => {
              (*ptr_to_globals).last_status_cksum = 0;
              current_block = 15129665204879337069;
            }
            6152256259730122749 => {
              current_block = 7534742345255184552;
            }
            12883932598258173301 => {
              current_block = 8800996768013373992;
            }
            11242998110520238401 => {
              redraw(1i32);
              current_block = 15129665204879337069;
            }
            13619733043935729992 => {
              loop {
                dot_next();
                dot_skip_over_ws();
                (*ptr_to_globals).cmdcnt -= 1;
                if !((*ptr_to_globals).cmdcnt > 0) {
                  break;
                }
              }
              current_block = 15129665204879337069;
            }
            9339065157412720613 => {
              dot_scroll(
                (*ptr_to_globals)
                  .rows
                  .wrapping_sub(2i32 as libc::c_uint)
                  .wrapping_div(2i32 as libc::c_uint) as libc::c_int,
                -1i32,
              );
              current_block = 15129665204879337069;
            }
            11447082683497798022 => {
              dot_scroll(1i32, -1i32);
              current_block = 15129665204879337069;
            }
            5182000506326660482 => {
              current_block = 13993698454868426881;
            }
            1105010766850597332 => {
              if !(*ptr_to_globals).reg[27].is_null() {
                p = begin_line((*ptr_to_globals).dot);
                q = end_line((*ptr_to_globals).dot);
                p = text_hole_delete(p, q, 1i32);
                p = p.offset(string_insert(p, (*ptr_to_globals).reg[27], 2i32) as isize);
                (*ptr_to_globals).dot = p;
                dot_skip_over_ws();
              }
              current_block = 15129665204879337069;
            }
            8616046655533110204 => {
              undo_pop();
              current_block = 15129665204879337069;
            }
            5127767458142431603 => {
              loop {
                (*ptr_to_globals).dot = end_line((*ptr_to_globals).dot);
                (*ptr_to_globals).cmdcnt -= 1;
                if (*ptr_to_globals).cmdcnt <= 0 {
                  break;
                }
                dot_next();
              }
              current_block = 15129665204879337069;
            }
            222014967776118151 => {
              (*ptr_to_globals).last_forward_char = get_one_char();
              current_block = 7856905509180742666;
            }
            11209792479411604110 => {
              loop {
                dot_prev();
                dot_skip_over_ws();
                (*ptr_to_globals).cmdcnt -= 1;
                if !((*ptr_to_globals).cmdcnt > 0) {
                  break;
                }
              }
              current_block = 15129665204879337069;
            }
            3364823792826654116 => {
              if (*ptr_to_globals).lmc_len != 0 {
                (*ptr_to_globals).ioq_start = crate::libbb::xfuncs_printf::xstrndup(
                  (*ptr_to_globals).last_modifying_cmd.as_mut_ptr(),
                  (*ptr_to_globals).lmc_len,
                );
                (*ptr_to_globals).ioq = (*ptr_to_globals).ioq_start
              }
              current_block = 15129665204879337069;
            }
            18096603330221575131 => {
              current_block = 17498168302144015873;
            }
            16891123271837848903 => {
              dot_end();
              current_block = 1752638907092016026;
            }
            8517235759107662071 => {
              current_block = 5847749760081351726;
            }
            12525254419223051704 => {
              if (*ptr_to_globals).dot < (*ptr_to_globals).end.offset(-1) {
                (*ptr_to_globals).dot = yank_delete(
                  (*ptr_to_globals).dot,
                  (*ptr_to_globals).dot,
                  1i32,
                  YANKDEL as libc::c_int,
                  1i32,
                )
              }
              current_block = 15129665204879337069;
            }
            15232911949322867522 => {
              current_block = 17251831742223396249;
            }
            10863374208794025069 => {
              current_block = 1895262434596074581;
            }
            451126677064669119 => {
              loop {
                dot_prev();
                (*ptr_to_globals).dot = move_to_col(
                  (*ptr_to_globals).dot,
                  (*ptr_to_globals).ccol + (*ptr_to_globals).offset,
                );
                (*ptr_to_globals).cmdcnt -= 1;
                if !((*ptr_to_globals).cmdcnt > 0) {
                  break;
                }
              }
              current_block = 15129665204879337069;
            }
            4611735929166613116 => {
              loop {
                if bb_ascii_isalnum(*(*ptr_to_globals).dot as libc::c_uchar) != 0
                  || *(*ptr_to_globals).dot as libc::c_int == '_' as i32
                {
                  (*ptr_to_globals).dot = skip_thing(
                    (*ptr_to_globals).dot,
                    1i32,
                    FORWARD as libc::c_int,
                    S_END_ALNUM as libc::c_int,
                  )
                } else if *strchrnul(
                  b"!\"#$%&\'()*+,-./:;<=>?@[\\]^_`{|}~\x00" as *const u8 as *const libc::c_char,
                  *(*ptr_to_globals).dot as libc::c_int,
                )
                .offset(0)
                  != 0
                {
                  (*ptr_to_globals).dot = skip_thing(
                    (*ptr_to_globals).dot,
                    1i32,
                    FORWARD as libc::c_int,
                    S_END_PUNCT as libc::c_int,
                  )
                }
                if (*ptr_to_globals).dot < (*ptr_to_globals).end.offset(-1) {
                  (*ptr_to_globals).dot = (*ptr_to_globals).dot.offset(1)
                }
                if ({
                  let mut bb__isspace: libc::c_uchar =
                    (*(*ptr_to_globals).dot as libc::c_int - 9i32) as libc::c_uchar;
                  (bb__isspace as libc::c_int == ' ' as i32 - 9i32
                    || bb__isspace as libc::c_int <= 13i32 - 9i32) as libc::c_int
                }) != 0
                {
                  (*ptr_to_globals).dot = skip_thing(
                    (*ptr_to_globals).dot,
                    2i32,
                    FORWARD as libc::c_int,
                    S_OVER_WS as libc::c_int,
                  )
                }
                (*ptr_to_globals).cmdcnt -= 1;
                if !((*ptr_to_globals).cmdcnt > 0) {
                  break;
                }
              }
              current_block = 15129665204879337069;
            }
            4386451087681909888 => {
              (*ptr_to_globals).dot =
                move_to_col((*ptr_to_globals).dot, (*ptr_to_globals).cmdcnt - 1i32);
              current_block = 15129665204879337069;
            }
            1296397779060594135 => {
              dot_begin();
              current_block = 15129665204879337069;
            }
            _ => {}
          }
          match current_block {
            15129665204879337069 => {}
            8629930936610358348 => {}
            _ => {
              match current_block {
                17251831742223396249 => {
                  dir = 0;
                  if c == 'X' as i32 {
                    dir = -1i32
                  }
                  loop {
                    if *(*ptr_to_globals).dot.offset(dir as isize) as libc::c_int != '\n' as i32 {
                      if c == 'X' as i32 {
                        (*ptr_to_globals).dot = (*ptr_to_globals).dot.offset(-1)
                      }
                      (*ptr_to_globals).dot = yank_delete(
                        (*ptr_to_globals).dot,
                        (*ptr_to_globals).dot,
                        0,
                        YANKDEL as libc::c_int,
                        1i32,
                      )
                    }
                    (*ptr_to_globals).cmdcnt -= 1;
                    if !((*ptr_to_globals).cmdcnt > 0) {
                      break;
                    }
                  }
                  end_cmd_q();
                  if c == 's' as i32 {
                    current_block = 8629930936610358348;
                  } else {
                    current_block = 15129665204879337069;
                  }
                }
                2087484904894455135 => {
                  dot_end();
                  (*ptr_to_globals).dot =
                    char_insert((*ptr_to_globals).dot, '\n' as i32 as libc::c_char, 1i32);
                  current_block = 8629930936610358348;
                }
                11945623545738147997 => {
                  (*ptr_to_globals).dot = (*ptr_to_globals).end.offset(-1);
                  if (*ptr_to_globals).cmdcnt > 0 {
                    (*ptr_to_globals).dot = find_line((*ptr_to_globals).cmdcnt)
                  }
                  dot_skip_over_ws();
                  current_block = 15129665204879337069;
                }
                5847749760081351726 => {
                  dir = FORWARD as libc::c_int;
                  if c == 'B' as i32 {
                    dir = BACK as libc::c_int
                  }
                  loop {
                    if c == 'W' as i32
                      || ({
                        let mut bb__isspace: libc::c_uchar =
                          (*(*ptr_to_globals).dot.offset(dir as isize) as libc::c_int - 9i32)
                            as libc::c_uchar;
                        (bb__isspace as libc::c_int == ' ' as i32 - 9i32
                          || bb__isspace as libc::c_int <= 13i32 - 9i32)
                          as libc::c_int
                      }) != 0
                    {
                      (*ptr_to_globals).dot =
                        skip_thing((*ptr_to_globals).dot, 1i32, dir, S_TO_WS as libc::c_int);
                      (*ptr_to_globals).dot =
                        skip_thing((*ptr_to_globals).dot, 2i32, dir, S_OVER_WS as libc::c_int)
                    }
                    if c != 'W' as i32 {
                      (*ptr_to_globals).dot =
                        skip_thing((*ptr_to_globals).dot, 1i32, dir, S_BEFORE_WS as libc::c_int)
                    }
                    (*ptr_to_globals).cmdcnt -= 1;
                    if !((*ptr_to_globals).cmdcnt > 0) {
                      break;
                    }
                  }
                  current_block = 15129665204879337069;
                }
                17440971994642376514 => {
                  current_block = 15129665204879337069;
                }
                7534742345255184552 => {
                  current_block = 17247297260531395789;
                }
                8800996768013373992 => {
                  loop {
                    dot_next();
                    (*ptr_to_globals).dot = move_to_col(
                      (*ptr_to_globals).dot,
                      (*ptr_to_globals).ccol + (*ptr_to_globals).offset,
                    );
                    (*ptr_to_globals).cmdcnt -= 1;
                    if !((*ptr_to_globals).cmdcnt > 0) {
                      break;
                    }
                  }
                  current_block = 15129665204879337069;
                }
                13993698454868426881 => {
                  loop {
                    dot_right();
                    (*ptr_to_globals).cmdcnt -= 1;
                    if !((*ptr_to_globals).cmdcnt > 0) {
                      break;
                    }
                  }
                  current_block = 15129665204879337069;
                }
                7856905509180742666 => {
                  while !((*ptr_to_globals).last_forward_char == 0) {
                    q = (*ptr_to_globals).dot.offset(1);
                    while q < (*ptr_to_globals).end.offset(-1)
                      && *q as libc::c_int != '\n' as i32
                      && *q as libc::c_int != (*ptr_to_globals).last_forward_char
                    {
                      q = q.offset(1)
                    }
                    if *q as libc::c_int == (*ptr_to_globals).last_forward_char {
                      (*ptr_to_globals).dot = q
                    }
                    (*ptr_to_globals).cmdcnt -= 1;
                    if !((*ptr_to_globals).cmdcnt > 0) {
                      break;
                    }
                  }
                  current_block = 15129665204879337069;
                }
                17498168302144015873 => {
                  current_block = 8681395796513813967;
                }
                1752638907092016026 => {
                  if *(*ptr_to_globals).dot as libc::c_int != '\n' as i32 {
                    (*ptr_to_globals).dot = (*ptr_to_globals).dot.offset(1)
                  }
                  current_block = 8629930936610358348;
                }
                3268579060917229304 => {
                  current_block = 8629930936610358348;
                }
                1895262434596074581 => {
                  current_block = 8908416993177701018;
                }
                _ => {}
              }
              match current_block {
                8629930936610358348 => {}
                15129665204879337069 => {}
                _ => {
                  match current_block {
                    17247297260531395789 => {
                      loop {
                        dot_left();
                        (*ptr_to_globals).cmdcnt -= 1;
                        if !((*ptr_to_globals).cmdcnt > 0) {
                          break;
                        }
                      }
                      current_block = 15129665204879337069;
                    }
                    8681395796513813967 => {
                      current_block = 5591548203144509315;
                    }
                    8908416993177701018 => {
                      current_block = 16124761010012532485;
                    }
                    _ => {}
                  }
                  match current_block {
                    15129665204879337069 => {}
                    _ => {
                      match current_block {
                        16124761010012532485 => {
                          let mut yf: libc::c_int = 0;
                          let mut ml: libc::c_int = 0;
                          let mut whole: libc::c_int = 0;
                          yf = YANKDEL as libc::c_int;
                          if c == 'y' as i32 || c == 'Y' as i32 {
                            yf = YANKONLY as libc::c_int
                          }
                          c1 = 'y' as i32;
                          if c != 'Y' as i32 {
                            c1 = get_one_char()
                          }
                          ml = find_range(&mut p, &mut q, c1 as libc::c_char);
                          place_cursor(0i32, 0);
                          if c1 == 27i32 {
                            c1 = 27i32;
                            c = c1
                          } else if !strchr(b"wW\x00" as *const u8 as *const libc::c_char, c1)
                            .is_null()
                          {
                            ml = 0;
                            if c == 'c' as i32 {
                              while ({
                                let mut bb__isspace: libc::c_uchar =
                                  (*q as libc::c_int - 9i32) as libc::c_uchar;
                                (bb__isspace as libc::c_int == ' ' as i32 - 9i32
                                  || bb__isspace as libc::c_int <= 13i32 - 9i32)
                                  as libc::c_int
                              }) != 0
                                && q > p
                              {
                                q = q.offset(-1)
                              }
                            }
                            (*ptr_to_globals).dot = yank_delete(p, q, ml, yf, 1i32)
                          } else if !strchr(
                            b"^0bBeEft%$ lh\x08\x7f\x00" as *const u8 as *const libc::c_char,
                            c1,
                          )
                          .is_null()
                          {
                            (*ptr_to_globals).dot = yank_delete(p, q, ml, yf, 1i32)
                          } else if !strchr(
                            b"cdykjGHL+-{}\r\n\x00" as *const u8 as *const libc::c_char,
                            c1,
                          )
                          .is_null()
                          {
                            (*ptr_to_globals).dot = yank_delete(p, q, ml, yf, 1i32);
                            whole = 1i32
                          } else {
                            c1 = 27i32;
                            c = c1;
                            ml = 0;
                            indicate_error();
                          }
                          if ml != 0 && whole != 0 {
                            if c == 'c' as i32 {
                              (*ptr_to_globals).dot = char_insert(
                                (*ptr_to_globals).dot,
                                '\n' as i32 as libc::c_char,
                                2i32,
                              );
                              if whole != 0
                                && (*ptr_to_globals).dot != (*ptr_to_globals).end.offset(-1)
                              {
                                dot_prev();
                              }
                            } else if c == 'd' as i32 {
                              dot_begin();
                              dot_skip_over_ws();
                            }
                          }
                          if c1 != 27i32 {
                            if c == 'c' as i32 {
                              strcpy(
                                buf.as_mut_ptr(),
                                b"Change\x00" as *const u8 as *const libc::c_char,
                              );
                              current_block = 8629930936610358348;
                            } else {
                              if c == 'd' as i32 {
                                strcpy(
                                  buf.as_mut_ptr(),
                                  b"Delete\x00" as *const u8 as *const libc::c_char,
                                );
                              }
                              if c == 'y' as i32 || c == 'Y' as i32 {
                                strcpy(
                                  buf.as_mut_ptr(),
                                  b"Yank\x00" as *const u8 as *const libc::c_char,
                                );
                              }
                              p = (*ptr_to_globals).reg[(*ptr_to_globals).YDreg as usize];
                              q = p.offset(strlen(p) as isize);
                              cnt = 0;
                              while p <= q {
                                if *p as libc::c_int == '\n' as i32 {
                                  cnt += 1
                                }
                                p = p.offset(1)
                              }
                              status_line(
                                b"%s %u lines (%u chars) using [%c]\x00" as *const u8
                                  as *const libc::c_char,
                                buf.as_mut_ptr(),
                                cnt,
                                strlen((*ptr_to_globals).reg[(*ptr_to_globals).YDreg as usize])
                                  as libc::c_uint,
                                what_reg() as libc::c_int,
                              );
                              end_cmd_q();
                              current_block = 15129665204879337069;
                            }
                          } else {
                            current_block = 15129665204879337069;
                          }
                        }
                        5591548203144509315 => {
                          current_block = 2636677179867529885;
                        }
                        _ => {}
                      }
                      match current_block {
                        15129665204879337069 => {}
                        8629930936610358348 => {}
                        _ => {
                          match current_block {
                            2636677179867529885 => {
                              current_block = 12309206730560524281;
                            }
                            _ => {}
                          }
                          match current_block {
                            12309206730560524281 => {
                              current_block = 3325768110057758661;
                            }
                            _ => {}
                          }
                          match current_block {
                            3325768110057758661 => {
                              current_block = 14815832896553429982;
                            }
                            _ => {}
                          }
                          match current_block {
                            14815832896553429982 => {
                              current_block = 10731695520297161438;
                            }
                            _ => {}
                          }
                          match current_block {
                            10731695520297161438 => {
                              if c == '0' as i32 && (*ptr_to_globals).cmdcnt < 1i32 {
                                dot_begin();
                              } else {
                                (*ptr_to_globals).cmdcnt =
                                  (*ptr_to_globals).cmdcnt * 10i32 + (c - '0' as i32)
                              }
                              current_block = 15129665204879337069;
                            }
                            _ => {}
                          }
                          match current_block {
                            15129665204879337069 => {}
                            _ => {
                              loop {
                                match current_block {
                                  16813369756331276724 => {
                                    msg = std::ptr::null();
                                    current_block = 7392824444931029276;
                                  }
                                  7392824444931029276 => {
                                    dir = FORWARD as libc::c_int;
                                    p = (*ptr_to_globals).dot.offset(1);
                                    if *(*ptr_to_globals).last_search_pattern.offset(0)
                                      as libc::c_int
                                      == '?' as i32
                                    {
                                      dir = BACK as libc::c_int;
                                      p = (*ptr_to_globals).dot.offset(-1)
                                    }
                                    current_block = 4166979493554389389;
                                  }
                                  _ => {
                                    q = char_search(
                                      p,
                                      (*ptr_to_globals).last_search_pattern.offset(1),
                                      dir << 1i32 | FULL as libc::c_int,
                                    );
                                    if !q.is_null() {
                                      (*ptr_to_globals).dot = q;
                                      msg = std::ptr::null()
                                    } else {
                                      p = (*ptr_to_globals).text;
                                      if dir == BACK as libc::c_int {
                                        p = (*ptr_to_globals).end.offset(-1)
                                      }
                                      q = char_search(
                                        p,
                                        (*ptr_to_globals).last_search_pattern.offset(1),
                                        dir << 1i32 | FULL as libc::c_int,
                                      );
                                      if !q.is_null() {
                                        (*ptr_to_globals).dot = q;
                                        msg = b"search hit BOTTOM, continuing at TOP\x00"
                                          as *const u8
                                          as *const libc::c_char;
                                        if dir == BACK as libc::c_int {
                                          msg = b"search hit TOP, continuing at BOTTOM\x00"
                                            as *const u8
                                            as *const libc::c_char
                                        }
                                      } else {
                                        msg = b"Pattern not found\x00" as *const u8
                                          as *const libc::c_char
                                      }
                                    }
                                    if !msg.is_null() {
                                      status_line_bold(
                                        b"%s\x00" as *const u8 as *const libc::c_char,
                                        msg,
                                      );
                                    }
                                    (*ptr_to_globals).cmdcnt -= 1;
                                    if (*ptr_to_globals).cmdcnt > 0 {
                                      current_block = 16813369756331276724;
                                    } else {
                                      break;
                                    }
                                  }
                                }
                              }
                              current_block = 15129665204879337069;
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
        80 | 112 => {
          current_block = 10247103787464459848;
          match current_block {
            16992905640583886232 => {
              loop {
                if (*(*ptr_to_globals).dot as libc::c_int - 'a' as i32) as libc::c_uchar
                  as libc::c_int
                  <= 'z' as i32 - 'a' as i32
                {
                  undo_push(
                    (*ptr_to_globals).dot,
                    1i32 as libc::c_uint,
                    1i32 as libc::c_uchar,
                  );
                  *(*ptr_to_globals).dot =
                    bb_ascii_toupper(*(*ptr_to_globals).dot as libc::c_uchar) as libc::c_char;
                  undo_push(
                    (*ptr_to_globals).dot,
                    1i32 as libc::c_uint,
                    2i32 as libc::c_uchar,
                  );
                } else if (*(*ptr_to_globals).dot as libc::c_int - 'A' as i32) as libc::c_uchar
                  as libc::c_int
                  <= 'Z' as i32 - 'A' as i32
                {
                  undo_push(
                    (*ptr_to_globals).dot,
                    1i32 as libc::c_uint,
                    1i32 as libc::c_uchar,
                  );
                  *(*ptr_to_globals).dot =
                    bb_ascii_tolower(*(*ptr_to_globals).dot as libc::c_uchar) as libc::c_char;
                  undo_push(
                    (*ptr_to_globals).dot,
                    1i32 as libc::c_uint,
                    2i32 as libc::c_uchar,
                  );
                }
                dot_right();
                (*ptr_to_globals).cmdcnt -= 1;
                if !((*ptr_to_globals).cmdcnt > 0) {
                  break;
                }
              }
              end_cmd_q();
              current_block = 15129665204879337069;
            }
            8729655159604064397 => {
              c1 = get_one_char();
              cnt = 0;
              if c1 == '.' as i32 {
                cnt = (*ptr_to_globals)
                  .rows
                  .wrapping_sub(2i32 as libc::c_uint)
                  .wrapping_div(2i32 as libc::c_uint) as libc::c_int
              }
              if c1 == '-' as i32 {
                cnt = (*ptr_to_globals).rows.wrapping_sub(2i32 as libc::c_uint) as libc::c_int
              }
              (*ptr_to_globals).screenbegin = begin_line((*ptr_to_globals).dot);
              dot_scroll(cnt, -1i32);
              current_block = 15129665204879337069;
            }
            15899500648299942075 => {
              (*ptr_to_globals).last_forward_char = get_one_char();
              do_cmd(';' as i32);
              if *(*ptr_to_globals).dot as libc::c_int == (*ptr_to_globals).last_forward_char {
                dot_left();
              }
              (*ptr_to_globals).last_forward_char = 0;
              current_block = 15129665204879337069;
            }
            9051390181078481641 => {
              c1 = get_one_char();
              if *(*ptr_to_globals).dot as libc::c_int != '\n' as i32 {
                (*ptr_to_globals).dot =
                  text_hole_delete((*ptr_to_globals).dot, (*ptr_to_globals).dot, 1i32);
                (*ptr_to_globals).dot =
                  char_insert((*ptr_to_globals).dot, c1 as libc::c_char, 2i32);
                dot_left();
              }
              end_cmd_q();
              current_block = 15129665204879337069;
            }
            877115918601926659 => {
              dir = FORWARD as libc::c_int;
              if c == 'b' as i32 {
                dir = BACK as libc::c_int
              }
              while !((*ptr_to_globals).dot.offset(dir as isize) < (*ptr_to_globals).text
                || (*ptr_to_globals).dot.offset(dir as isize) > (*ptr_to_globals).end.offset(-1))
              {
                (*ptr_to_globals).dot = (*ptr_to_globals).dot.offset(dir as isize);
                if ({
                  let mut bb__isspace: libc::c_uchar =
                    (*(*ptr_to_globals).dot as libc::c_int - 9i32) as libc::c_uchar;
                  (bb__isspace as libc::c_int == ' ' as i32 - 9i32
                    || bb__isspace as libc::c_int <= 13i32 - 9i32) as libc::c_int
                }) != 0
                {
                  (*ptr_to_globals).dot = skip_thing(
                    (*ptr_to_globals).dot,
                    if c == 'e' as i32 { 2i32 } else { 1i32 },
                    dir,
                    S_OVER_WS as libc::c_int,
                  )
                }
                if bb_ascii_isalnum(*(*ptr_to_globals).dot as libc::c_uchar) != 0
                  || *(*ptr_to_globals).dot as libc::c_int == '_' as i32
                {
                  (*ptr_to_globals).dot =
                    skip_thing((*ptr_to_globals).dot, 1i32, dir, S_END_ALNUM as libc::c_int)
                } else if *strchrnul(
                  b"!\"#$%&\'()*+,-./:;<=>?@[\\]^_`{|}~\x00" as *const u8 as *const libc::c_char,
                  *(*ptr_to_globals).dot as libc::c_int,
                )
                .offset(0)
                  != 0
                {
                  (*ptr_to_globals).dot =
                    skip_thing((*ptr_to_globals).dot, 1i32, dir, S_END_PUNCT as libc::c_int)
                }
                (*ptr_to_globals).cmdcnt -= 1;
                if !((*ptr_to_globals).cmdcnt > 0) {
                  break;
                }
              }
              current_block = 15129665204879337069;
            }
            1085022737867179637 => {
              dot_begin();
              dot_skip_over_ws();
              current_block = 15129665204879337069;
            }
            3113147720494587438 => {
              c1 = get_one_char();
              if c1 != 'Z' as i32 {
                indicate_error();
              } else if (*ptr_to_globals).modified_count != 0 {
                if 1i32 != 0 && (*ptr_to_globals).readonly_mode as libc::c_int != 0 {
                  status_line_bold(
                    b"\'%s\' is read only\x00" as *const u8 as *const libc::c_char,
                    (*ptr_to_globals).current_filename,
                  );
                } else {
                  cnt = file_write(
                    (*ptr_to_globals).current_filename,
                    (*ptr_to_globals).text,
                    (*ptr_to_globals).end.offset(-1),
                  );
                  if cnt < 0 {
                    if cnt == -1i32 {
                      status_line_bold(b"Write error: %m\x00" as *const u8 as *const libc::c_char);
                    }
                  } else if cnt as libc::c_long
                    == (*ptr_to_globals)
                      .end
                      .offset(-1)
                      .wrapping_offset_from((*ptr_to_globals).text)
                      as libc::c_long
                      + 1
                  {
                    (*ptr_to_globals).editing = 0 as smallint
                  }
                }
              } else {
                (*ptr_to_globals).editing = 0 as smallint
              }
              current_block = 15129665204879337069;
            }
            12960118908218882441 => {
              p = begin_line((*ptr_to_globals).dot);
              if *p.offset(-1i32 as isize) as libc::c_int == '\n' as i32 {
                dot_prev();
                current_block = 2087484904894455135;
              } else {
                dot_begin();
                (*ptr_to_globals).dot =
                  char_insert((*ptr_to_globals).dot, '\n' as i32 as libc::c_char, 1i32);
                dot_prev();
                current_block = 8629930936610358348;
              }
            }
            8720450212473544924 => {
              (*ptr_to_globals).dot = (*ptr_to_globals).screenbegin;
              cnt = 0;
              while (cnt as libc::c_uint)
                < (*ptr_to_globals)
                  .rows
                  .wrapping_sub(1i32 as libc::c_uint)
                  .wrapping_div(2i32 as libc::c_uint)
              {
                (*ptr_to_globals).dot = next_line((*ptr_to_globals).dot);
                cnt += 1
              }
              current_block = 15129665204879337069;
            }
            13015277209715431090 => {
              (*ptr_to_globals).dot = end_screen();
              if (*ptr_to_globals).cmdcnt as libc::c_uint
                > (*ptr_to_globals).rows.wrapping_sub(1i32 as libc::c_uint)
              {
                (*ptr_to_globals).cmdcnt =
                  (*ptr_to_globals).rows.wrapping_sub(1i32 as libc::c_uint) as libc::c_int
              }
              (*ptr_to_globals).cmdcnt -= 1;
              if (*ptr_to_globals).cmdcnt > 0 {
                do_cmd('-' as i32);
              }
              dot_begin();
              dot_skip_over_ws();
              current_block = 15129665204879337069;
            }
            9800435767766781385 => {
              loop {
                dot_end();
                if (*ptr_to_globals).dot < (*ptr_to_globals).end.offset(-1) {
                  undo_push(
                    (*ptr_to_globals).dot,
                    1i32 as libc::c_uint,
                    1i32 as libc::c_uchar,
                  );
                  let fresh15 = (*ptr_to_globals).dot;
                  (*ptr_to_globals).dot = (*ptr_to_globals).dot.offset(1);
                  *fresh15 = ' ' as i32 as libc::c_char;
                  undo_push(
                    (*ptr_to_globals).dot.offset(-1),
                    1i32 as libc::c_uint,
                    2i32 as libc::c_uchar,
                  );
                  while ({
                    let mut bb__isblank: libc::c_uchar = *(*ptr_to_globals).dot as libc::c_uchar;
                    (bb__isblank as libc::c_int == ' ' as i32
                      || bb__isblank as libc::c_int == '\t' as i32)
                      as libc::c_int
                  }) != 0
                  {
                    text_hole_delete((*ptr_to_globals).dot, (*ptr_to_globals).dot, 2i32);
                  }
                }
                (*ptr_to_globals).cmdcnt -= 1;
                if !((*ptr_to_globals).cmdcnt > 0) {
                  break;
                }
              }
              end_cmd_q();
              current_block = 15129665204879337069;
            }
            3432363526595694666 => {
              dot_begin();
              dot_skip_over_ws();
              current_block = 3268579060917229304;
            }
            3494829253343353619 => {
              (*ptr_to_globals).dot = (*ptr_to_globals).screenbegin;
              if (*ptr_to_globals).cmdcnt as libc::c_uint
                > (*ptr_to_globals).rows.wrapping_sub(1i32 as libc::c_uint)
              {
                (*ptr_to_globals).cmdcnt =
                  (*ptr_to_globals).rows.wrapping_sub(1i32 as libc::c_uint) as libc::c_int
              }
              (*ptr_to_globals).cmdcnt -= 1;
              if (*ptr_to_globals).cmdcnt > 0 {
                do_cmd('+' as i32);
              }
              dot_skip_over_ws();
              current_block = 15129665204879337069;
            }
            17973101765331640574 => {
              c1 = get_one_char();
              if c1 != 'g' as i32 {
                buf[0] = 'g' as i32 as libc::c_char;
                buf[1] = if c1 >= 0 { c1 } else { '*' as i32 } as libc::c_char;
                buf[2] = '\u{0}' as i32 as libc::c_char;
                not_implemented(buf.as_mut_ptr());
                current_block = 15129665204879337069;
              } else {
                if (*ptr_to_globals).cmdcnt == 0 {
                  (*ptr_to_globals).cmdcnt = 1i32
                }
                current_block = 11945623545738147997;
              }
            }
            16546625800574160972 => {
              save_dot = (*ptr_to_globals).dot;
              (*ptr_to_globals).dot = dollar_line((*ptr_to_globals).dot);
              (*ptr_to_globals).dot = yank_delete(
                save_dot,
                (*ptr_to_globals).dot,
                0,
                YANKDEL as libc::c_int,
                1i32,
              );
              if c == 'C' as i32 {
                current_block = 8629930936610358348;
              } else {
                if c == 'D' as i32 {
                  end_cmd_q();
                }
                current_block = 15129665204879337069;
              }
            }
            11937696639986586685 => {
              cnt = count_lines((*ptr_to_globals).text, (*ptr_to_globals).dot);
              c1 = get_one_char();
              find_range(&mut p, &mut q, c1 as libc::c_char);
              yank_delete(p, q, 1i32, YANKONLY as libc::c_int, 0);
              p = begin_line(p);
              q = end_line(q);
              i = count_lines(p, q);
              while i > 0 {
                if c == '<' as i32 {
                  if *p as libc::c_int == '\t' as i32 {
                    text_hole_delete(p, p, 0);
                  } else if *p as libc::c_int == ' ' as i32 {
                    j = 0;
                    while *p as libc::c_int == ' ' as i32 && j < (*ptr_to_globals).tabstop {
                      text_hole_delete(p, p, 0);
                      j += 1
                    }
                  }
                } else if c == '>' as i32 {
                  char_insert(p, '\t' as i32 as libc::c_char, 1i32);
                }
                i -= 1;
                p = next_line(p)
              }
              (*ptr_to_globals).dot = find_line(cnt);
              dot_skip_over_ws();
              end_cmd_q();
              current_block = 15129665204879337069;
            }
            17725350714912028156 => {
              p = get_input_line(b":\x00" as *const u8 as *const libc::c_char);
              colon(p);
              current_block = 15129665204879337069;
            }
            14526470074083880812 => {
              q = char_search(
                (*ptr_to_globals).dot,
                b"\n\n\x00" as *const u8 as *const libc::c_char,
                (FORWARD as libc::c_int) << 1i32 | FULL as libc::c_int,
              );
              if !q.is_null() {
                (*ptr_to_globals).dot = next_line(q)
              }
              current_block = 15129665204879337069;
            }
            8893187391306414141 => {
              q = char_search(
                (*ptr_to_globals).dot,
                b"\n\n\x00" as *const u8 as *const libc::c_char,
                ((BACK as libc::c_int as libc::c_uint) << 1i32
                  | FULL as libc::c_int as libc::c_uint) as libc::c_int,
              );
              if !q.is_null() {
                (*ptr_to_globals).dot = next_line(q)
              }
              current_block = 15129665204879337069;
            }
            7021673758293221412 => {
              dir = BACK as libc::c_int;
              p = (*ptr_to_globals).dot.offset(-1);
              if *(*ptr_to_globals).last_search_pattern.offset(0) as libc::c_int == '?' as i32 {
                dir = FORWARD as libc::c_int;
                p = (*ptr_to_globals).dot.offset(1)
              }
              current_block = 4166979493554389389;
            }
            18374191879090272823 => {
              buf[0] = c as libc::c_char;
              buf[1] = '\u{0}' as i32 as libc::c_char;
              q = get_input_line(buf.as_mut_ptr());
              if *q.offset(0) as libc::c_int != 0 && *q.offset(1) == 0 {
                if *(*ptr_to_globals).last_search_pattern.offset(0) != 0 {
                  *(*ptr_to_globals).last_search_pattern.offset(0) = c as libc::c_char
                }
                current_block = 7392824444931029276;
              } else if *q.offset(0) != 0 {
                free((*ptr_to_globals).last_search_pattern as *mut libc::c_void);
                (*ptr_to_globals).last_search_pattern = crate::libbb::xfuncs_printf::xstrdup(q);
                current_block = 7392824444931029276;
              } else {
                current_block = 15129665204879337069;
              }
            }
            16407828456666301883 => {
              if (*ptr_to_globals).last_forward_char == 0 {
                current_block = 15129665204879337069;
              } else {
                loop {
                  q = (*ptr_to_globals).dot.offset(-1);
                  while q >= (*ptr_to_globals).text
                    && *q as libc::c_int != '\n' as i32
                    && *q as libc::c_int != (*ptr_to_globals).last_forward_char
                  {
                    q = q.offset(-1)
                  }
                  if q >= (*ptr_to_globals).text
                    && *q as libc::c_int == (*ptr_to_globals).last_forward_char
                  {
                    (*ptr_to_globals).dot = q
                  }
                  (*ptr_to_globals).cmdcnt -= 1;
                  if !((*ptr_to_globals).cmdcnt > 0) {
                    break;
                  }
                }
                current_block = 15129665204879337069;
              }
            }
            9018432604062702004 => {
              q = (*ptr_to_globals).dot;
              while q < (*ptr_to_globals).end && *q as libc::c_int != '\n' as i32 {
                if !strchr(
                  b"()[]{}\x00" as *const u8 as *const libc::c_char,
                  *q as libc::c_int,
                )
                .is_null()
                {
                  p = find_pair(q, *q);
                  if p.is_null() {
                    indicate_error();
                  } else {
                    (*ptr_to_globals).dot = p
                  }
                  break;
                } else {
                  q = q.offset(1)
                }
              }
              if *q as libc::c_int == '\n' as i32 {
                indicate_error();
              }
              current_block = 15129665204879337069;
            }
            10247103787464459848 => {
              p = (*ptr_to_globals).reg[(*ptr_to_globals).YDreg as usize];
              if p.is_null() {
                status_line_bold(
                  b"Nothing in register %c\x00" as *const u8 as *const libc::c_char,
                  what_reg() as libc::c_int,
                );
              } else {
                if !strchr(p, '\n' as i32).is_null() {
                  if c == 'P' as i32 {
                    dot_begin();
                  }
                  if c == 'p' as i32 {
                    if end_line((*ptr_to_globals).dot) == (*ptr_to_globals).end.offset(-1) {
                      (*ptr_to_globals).dot = (*ptr_to_globals).end
                    } else {
                      dot_next();
                    }
                  }
                } else if c == 'p' as i32 {
                  dot_right();
                }
                string_insert((*ptr_to_globals).dot, p, 1i32);
                end_cmd_q();
              }
              current_block = 15129665204879337069;
            }
            15260732871948875843 => {
              c1 = (get_one_char() | 0x20i32) - 'a' as i32;
              if c1 as libc::c_uint <= 25i32 as libc::c_uint {
                (*ptr_to_globals).mark[c1 as usize] = (*ptr_to_globals).dot
              } else {
                indicate_error();
              }
              current_block = 15129665204879337069;
            }
            12738322036487086035 => {
              c1 = get_one_char() | 0x20i32;
              if (c1 - 'a' as i32) as libc::c_uint <= 25i32 as libc::c_uint {
                c1 = c1 - 'a' as i32;
                q = (*ptr_to_globals).mark[c1 as usize];
                if (*ptr_to_globals).text <= q && q < (*ptr_to_globals).end {
                  (*ptr_to_globals).dot = q;
                  dot_begin();
                  dot_skip_over_ws();
                }
              } else if c1 == '\'' as i32 {
                (*ptr_to_globals).dot = swap_context((*ptr_to_globals).dot);
                dot_begin();
                dot_skip_over_ws();
              } else {
                indicate_error();
              }
              current_block = 15129665204879337069;
            }
            13255096073384561358 => {
              c1 = (get_one_char() | 0x20i32) - 'a' as i32;
              if c1 as libc::c_uint <= 25i32 as libc::c_uint {
                (*ptr_to_globals).YDreg = c1 as smalluint
              } else {
                indicate_error();
              }
              current_block = 15129665204879337069;
            }
            10258711639984089377 => {
              if (*ptr_to_globals).cmd_mode as libc::c_int == 0 {
                indicate_error();
              }
              (*ptr_to_globals).cmd_mode = 0 as smallint;
              undo_queue_commit();
              end_cmd_q();
              (*ptr_to_globals).last_status_cksum = 0;
              current_block = 15129665204879337069;
            }
            11439127087547047736 => {
              buf[0] = c as libc::c_char;
              buf[1] = '\u{0}' as i32 as libc::c_char;
              not_implemented(buf.as_mut_ptr());
              end_cmd_q();
              current_block = 17440971994642376514;
            }
            7961798899781870241 => {
              dot_scroll(
                (*ptr_to_globals).rows.wrapping_sub(2i32 as libc::c_uint) as libc::c_int,
                -1i32,
              );
              current_block = 15129665204879337069;
            }
            9426343755402444879 => {
              dot_scroll(
                (*ptr_to_globals)
                  .rows
                  .wrapping_sub(2i32 as libc::c_uint)
                  .wrapping_div(2i32 as libc::c_uint) as libc::c_int,
                1i32,
              );
              current_block = 15129665204879337069;
            }
            13352459794680105913 => {
              dot_scroll(1i32, 1i32);
              current_block = 15129665204879337069;
            }
            14142272253464333006 => {
              dot_scroll(
                (*ptr_to_globals).rows.wrapping_sub(2i32 as libc::c_uint) as libc::c_int,
                1i32,
              );
              current_block = 15129665204879337069;
            }
            10758177197742640066 => {
              (*ptr_to_globals).last_status_cksum = 0;
              current_block = 15129665204879337069;
            }
            6152256259730122749 => {
              current_block = 7534742345255184552;
            }
            12883932598258173301 => {
              current_block = 8800996768013373992;
            }
            11242998110520238401 => {
              redraw(1i32);
              current_block = 15129665204879337069;
            }
            13619733043935729992 => {
              loop {
                dot_next();
                dot_skip_over_ws();
                (*ptr_to_globals).cmdcnt -= 1;
                if !((*ptr_to_globals).cmdcnt > 0) {
                  break;
                }
              }
              current_block = 15129665204879337069;
            }
            9339065157412720613 => {
              dot_scroll(
                (*ptr_to_globals)
                  .rows
                  .wrapping_sub(2i32 as libc::c_uint)
                  .wrapping_div(2i32 as libc::c_uint) as libc::c_int,
                -1i32,
              );
              current_block = 15129665204879337069;
            }
            11447082683497798022 => {
              dot_scroll(1i32, -1i32);
              current_block = 15129665204879337069;
            }
            5182000506326660482 => {
              current_block = 13993698454868426881;
            }
            1105010766850597332 => {
              if !(*ptr_to_globals).reg[27].is_null() {
                p = begin_line((*ptr_to_globals).dot);
                q = end_line((*ptr_to_globals).dot);
                p = text_hole_delete(p, q, 1i32);
                p = p.offset(string_insert(p, (*ptr_to_globals).reg[27], 2i32) as isize);
                (*ptr_to_globals).dot = p;
                dot_skip_over_ws();
              }
              current_block = 15129665204879337069;
            }
            8616046655533110204 => {
              undo_pop();
              current_block = 15129665204879337069;
            }
            5127767458142431603 => {
              loop {
                (*ptr_to_globals).dot = end_line((*ptr_to_globals).dot);
                (*ptr_to_globals).cmdcnt -= 1;
                if (*ptr_to_globals).cmdcnt <= 0 {
                  break;
                }
                dot_next();
              }
              current_block = 15129665204879337069;
            }
            222014967776118151 => {
              (*ptr_to_globals).last_forward_char = get_one_char();
              current_block = 7856905509180742666;
            }
            11209792479411604110 => {
              loop {
                dot_prev();
                dot_skip_over_ws();
                (*ptr_to_globals).cmdcnt -= 1;
                if !((*ptr_to_globals).cmdcnt > 0) {
                  break;
                }
              }
              current_block = 15129665204879337069;
            }
            3364823792826654116 => {
              if (*ptr_to_globals).lmc_len != 0 {
                (*ptr_to_globals).ioq_start = crate::libbb::xfuncs_printf::xstrndup(
                  (*ptr_to_globals).last_modifying_cmd.as_mut_ptr(),
                  (*ptr_to_globals).lmc_len,
                );
                (*ptr_to_globals).ioq = (*ptr_to_globals).ioq_start
              }
              current_block = 15129665204879337069;
            }
            18096603330221575131 => {
              current_block = 17498168302144015873;
            }
            16891123271837848903 => {
              dot_end();
              current_block = 1752638907092016026;
            }
            8517235759107662071 => {
              current_block = 5847749760081351726;
            }
            12525254419223051704 => {
              if (*ptr_to_globals).dot < (*ptr_to_globals).end.offset(-1) {
                (*ptr_to_globals).dot = yank_delete(
                  (*ptr_to_globals).dot,
                  (*ptr_to_globals).dot,
                  1i32,
                  YANKDEL as libc::c_int,
                  1i32,
                )
              }
              current_block = 15129665204879337069;
            }
            15232911949322867522 => {
              current_block = 17251831742223396249;
            }
            10863374208794025069 => {
              current_block = 1895262434596074581;
            }
            451126677064669119 => {
              loop {
                dot_prev();
                (*ptr_to_globals).dot = move_to_col(
                  (*ptr_to_globals).dot,
                  (*ptr_to_globals).ccol + (*ptr_to_globals).offset,
                );
                (*ptr_to_globals).cmdcnt -= 1;
                if !((*ptr_to_globals).cmdcnt > 0) {
                  break;
                }
              }
              current_block = 15129665204879337069;
            }
            4611735929166613116 => {
              loop {
                if bb_ascii_isalnum(*(*ptr_to_globals).dot as libc::c_uchar) != 0
                  || *(*ptr_to_globals).dot as libc::c_int == '_' as i32
                {
                  (*ptr_to_globals).dot = skip_thing(
                    (*ptr_to_globals).dot,
                    1i32,
                    FORWARD as libc::c_int,
                    S_END_ALNUM as libc::c_int,
                  )
                } else if *strchrnul(
                  b"!\"#$%&\'()*+,-./:;<=>?@[\\]^_`{|}~\x00" as *const u8 as *const libc::c_char,
                  *(*ptr_to_globals).dot as libc::c_int,
                )
                .offset(0)
                  != 0
                {
                  (*ptr_to_globals).dot = skip_thing(
                    (*ptr_to_globals).dot,
                    1i32,
                    FORWARD as libc::c_int,
                    S_END_PUNCT as libc::c_int,
                  )
                }
                if (*ptr_to_globals).dot < (*ptr_to_globals).end.offset(-1) {
                  (*ptr_to_globals).dot = (*ptr_to_globals).dot.offset(1)
                }
                if ({
                  let mut bb__isspace: libc::c_uchar =
                    (*(*ptr_to_globals).dot as libc::c_int - 9i32) as libc::c_uchar;
                  (bb__isspace as libc::c_int == ' ' as i32 - 9i32
                    || bb__isspace as libc::c_int <= 13i32 - 9i32) as libc::c_int
                }) != 0
                {
                  (*ptr_to_globals).dot = skip_thing(
                    (*ptr_to_globals).dot,
                    2i32,
                    FORWARD as libc::c_int,
                    S_OVER_WS as libc::c_int,
                  )
                }
                (*ptr_to_globals).cmdcnt -= 1;
                if !((*ptr_to_globals).cmdcnt > 0) {
                  break;
                }
              }
              current_block = 15129665204879337069;
            }
            4386451087681909888 => {
              (*ptr_to_globals).dot =
                move_to_col((*ptr_to_globals).dot, (*ptr_to_globals).cmdcnt - 1i32);
              current_block = 15129665204879337069;
            }
            1296397779060594135 => {
              dot_begin();
              current_block = 15129665204879337069;
            }
            _ => {}
          }
          match current_block {
            15129665204879337069 => {}
            8629930936610358348 => {}
            _ => {
              match current_block {
                17251831742223396249 => {
                  dir = 0;
                  if c == 'X' as i32 {
                    dir = -1i32
                  }
                  loop {
                    if *(*ptr_to_globals).dot.offset(dir as isize) as libc::c_int != '\n' as i32 {
                      if c == 'X' as i32 {
                        (*ptr_to_globals).dot = (*ptr_to_globals).dot.offset(-1)
                      }
                      (*ptr_to_globals).dot = yank_delete(
                        (*ptr_to_globals).dot,
                        (*ptr_to_globals).dot,
                        0,
                        YANKDEL as libc::c_int,
                        1i32,
                      )
                    }
                    (*ptr_to_globals).cmdcnt -= 1;
                    if !((*ptr_to_globals).cmdcnt > 0) {
                      break;
                    }
                  }
                  end_cmd_q();
                  if c == 's' as i32 {
                    current_block = 8629930936610358348;
                  } else {
                    current_block = 15129665204879337069;
                  }
                }
                2087484904894455135 => {
                  dot_end();
                  (*ptr_to_globals).dot =
                    char_insert((*ptr_to_globals).dot, '\n' as i32 as libc::c_char, 1i32);
                  current_block = 8629930936610358348;
                }
                11945623545738147997 => {
                  (*ptr_to_globals).dot = (*ptr_to_globals).end.offset(-1);
                  if (*ptr_to_globals).cmdcnt > 0 {
                    (*ptr_to_globals).dot = find_line((*ptr_to_globals).cmdcnt)
                  }
                  dot_skip_over_ws();
                  current_block = 15129665204879337069;
                }
                5847749760081351726 => {
                  dir = FORWARD as libc::c_int;
                  if c == 'B' as i32 {
                    dir = BACK as libc::c_int
                  }
                  loop {
                    if c == 'W' as i32
                      || ({
                        let mut bb__isspace: libc::c_uchar =
                          (*(*ptr_to_globals).dot.offset(dir as isize) as libc::c_int - 9i32)
                            as libc::c_uchar;
                        (bb__isspace as libc::c_int == ' ' as i32 - 9i32
                          || bb__isspace as libc::c_int <= 13i32 - 9i32)
                          as libc::c_int
                      }) != 0
                    {
                      (*ptr_to_globals).dot =
                        skip_thing((*ptr_to_globals).dot, 1i32, dir, S_TO_WS as libc::c_int);
                      (*ptr_to_globals).dot =
                        skip_thing((*ptr_to_globals).dot, 2i32, dir, S_OVER_WS as libc::c_int)
                    }
                    if c != 'W' as i32 {
                      (*ptr_to_globals).dot =
                        skip_thing((*ptr_to_globals).dot, 1i32, dir, S_BEFORE_WS as libc::c_int)
                    }
                    (*ptr_to_globals).cmdcnt -= 1;
                    if !((*ptr_to_globals).cmdcnt > 0) {
                      break;
                    }
                  }
                  current_block = 15129665204879337069;
                }
                17440971994642376514 => {
                  current_block = 15129665204879337069;
                }
                7534742345255184552 => {
                  current_block = 17247297260531395789;
                }
                8800996768013373992 => {
                  loop {
                    dot_next();
                    (*ptr_to_globals).dot = move_to_col(
                      (*ptr_to_globals).dot,
                      (*ptr_to_globals).ccol + (*ptr_to_globals).offset,
                    );
                    (*ptr_to_globals).cmdcnt -= 1;
                    if !((*ptr_to_globals).cmdcnt > 0) {
                      break;
                    }
                  }
                  current_block = 15129665204879337069;
                }
                13993698454868426881 => {
                  loop {
                    dot_right();
                    (*ptr_to_globals).cmdcnt -= 1;
                    if !((*ptr_to_globals).cmdcnt > 0) {
                      break;
                    }
                  }
                  current_block = 15129665204879337069;
                }
                7856905509180742666 => {
                  while !((*ptr_to_globals).last_forward_char == 0) {
                    q = (*ptr_to_globals).dot.offset(1);
                    while q < (*ptr_to_globals).end.offset(-1)
                      && *q as libc::c_int != '\n' as i32
                      && *q as libc::c_int != (*ptr_to_globals).last_forward_char
                    {
                      q = q.offset(1)
                    }
                    if *q as libc::c_int == (*ptr_to_globals).last_forward_char {
                      (*ptr_to_globals).dot = q
                    }
                    (*ptr_to_globals).cmdcnt -= 1;
                    if !((*ptr_to_globals).cmdcnt > 0) {
                      break;
                    }
                  }
                  current_block = 15129665204879337069;
                }
                17498168302144015873 => {
                  current_block = 8681395796513813967;
                }
                1752638907092016026 => {
                  if *(*ptr_to_globals).dot as libc::c_int != '\n' as i32 {
                    (*ptr_to_globals).dot = (*ptr_to_globals).dot.offset(1)
                  }
                  current_block = 8629930936610358348;
                }
                3268579060917229304 => {
                  current_block = 8629930936610358348;
                }
                1895262434596074581 => {
                  current_block = 8908416993177701018;
                }
                _ => {}
              }
              match current_block {
                8629930936610358348 => {}
                15129665204879337069 => {}
                _ => {
                  match current_block {
                    17247297260531395789 => {
                      loop {
                        dot_left();
                        (*ptr_to_globals).cmdcnt -= 1;
                        if !((*ptr_to_globals).cmdcnt > 0) {
                          break;
                        }
                      }
                      current_block = 15129665204879337069;
                    }
                    8681395796513813967 => {
                      current_block = 5591548203144509315;
                    }
                    8908416993177701018 => {
                      current_block = 16124761010012532485;
                    }
                    _ => {}
                  }
                  match current_block {
                    15129665204879337069 => {}
                    _ => {
                      match current_block {
                        16124761010012532485 => {
                          let mut yf: libc::c_int = 0;
                          let mut ml: libc::c_int = 0;
                          let mut whole: libc::c_int = 0;
                          yf = YANKDEL as libc::c_int;
                          if c == 'y' as i32 || c == 'Y' as i32 {
                            yf = YANKONLY as libc::c_int
                          }
                          c1 = 'y' as i32;
                          if c != 'Y' as i32 {
                            c1 = get_one_char()
                          }
                          ml = find_range(&mut p, &mut q, c1 as libc::c_char);
                          place_cursor(0i32, 0);
                          if c1 == 27i32 {
                            c1 = 27i32;
                            c = c1
                          } else if !strchr(b"wW\x00" as *const u8 as *const libc::c_char, c1)
                            .is_null()
                          {
                            ml = 0;
                            if c == 'c' as i32 {
                              while ({
                                let mut bb__isspace: libc::c_uchar =
                                  (*q as libc::c_int - 9i32) as libc::c_uchar;
                                (bb__isspace as libc::c_int == ' ' as i32 - 9i32
                                  || bb__isspace as libc::c_int <= 13i32 - 9i32)
                                  as libc::c_int
                              }) != 0
                                && q > p
                              {
                                q = q.offset(-1)
                              }
                            }
                            (*ptr_to_globals).dot = yank_delete(p, q, ml, yf, 1i32)
                          } else if !strchr(
                            b"^0bBeEft%$ lh\x08\x7f\x00" as *const u8 as *const libc::c_char,
                            c1,
                          )
                          .is_null()
                          {
                            (*ptr_to_globals).dot = yank_delete(p, q, ml, yf, 1i32)
                          } else if !strchr(
                            b"cdykjGHL+-{}\r\n\x00" as *const u8 as *const libc::c_char,
                            c1,
                          )
                          .is_null()
                          {
                            (*ptr_to_globals).dot = yank_delete(p, q, ml, yf, 1i32);
                            whole = 1i32
                          } else {
                            c1 = 27i32;
                            c = c1;
                            ml = 0;
                            indicate_error();
                          }
                          if ml != 0 && whole != 0 {
                            if c == 'c' as i32 {
                              (*ptr_to_globals).dot = char_insert(
                                (*ptr_to_globals).dot,
                                '\n' as i32 as libc::c_char,
                                2i32,
                              );
                              if whole != 0
                                && (*ptr_to_globals).dot != (*ptr_to_globals).end.offset(-1)
                              {
                                dot_prev();
                              }
                            } else if c == 'd' as i32 {
                              dot_begin();
                              dot_skip_over_ws();
                            }
                          }
                          if c1 != 27i32 {
                            if c == 'c' as i32 {
                              strcpy(
                                buf.as_mut_ptr(),
                                b"Change\x00" as *const u8 as *const libc::c_char,
                              );
                              current_block = 8629930936610358348;
                            } else {
                              if c == 'd' as i32 {
                                strcpy(
                                  buf.as_mut_ptr(),
                                  b"Delete\x00" as *const u8 as *const libc::c_char,
                                );
                              }
                              if c == 'y' as i32 || c == 'Y' as i32 {
                                strcpy(
                                  buf.as_mut_ptr(),
                                  b"Yank\x00" as *const u8 as *const libc::c_char,
                                );
                              }
                              p = (*ptr_to_globals).reg[(*ptr_to_globals).YDreg as usize];
                              q = p.offset(strlen(p) as isize);
                              cnt = 0;
                              while p <= q {
                                if *p as libc::c_int == '\n' as i32 {
                                  cnt += 1
                                }
                                p = p.offset(1)
                              }
                              status_line(
                                b"%s %u lines (%u chars) using [%c]\x00" as *const u8
                                  as *const libc::c_char,
                                buf.as_mut_ptr(),
                                cnt,
                                strlen((*ptr_to_globals).reg[(*ptr_to_globals).YDreg as usize])
                                  as libc::c_uint,
                                what_reg() as libc::c_int,
                              );
                              end_cmd_q();
                              current_block = 15129665204879337069;
                            }
                          } else {
                            current_block = 15129665204879337069;
                          }
                        }
                        5591548203144509315 => {
                          current_block = 2636677179867529885;
                        }
                        _ => {}
                      }
                      match current_block {
                        15129665204879337069 => {}
                        8629930936610358348 => {}
                        _ => {
                          match current_block {
                            2636677179867529885 => {
                              current_block = 12309206730560524281;
                            }
                            _ => {}
                          }
                          match current_block {
                            12309206730560524281 => {
                              current_block = 3325768110057758661;
                            }
                            _ => {}
                          }
                          match current_block {
                            3325768110057758661 => {
                              current_block = 14815832896553429982;
                            }
                            _ => {}
                          }
                          match current_block {
                            14815832896553429982 => {
                              current_block = 10731695520297161438;
                            }
                            _ => {}
                          }
                          match current_block {
                            10731695520297161438 => {
                              if c == '0' as i32 && (*ptr_to_globals).cmdcnt < 1i32 {
                                dot_begin();
                              } else {
                                (*ptr_to_globals).cmdcnt =
                                  (*ptr_to_globals).cmdcnt * 10i32 + (c - '0' as i32)
                              }
                              current_block = 15129665204879337069;
                            }
                            _ => {}
                          }
                          match current_block {
                            15129665204879337069 => {}
                            _ => {
                              loop {
                                match current_block {
                                  16813369756331276724 => {
                                    msg = std::ptr::null();
                                    current_block = 7392824444931029276;
                                  }
                                  7392824444931029276 => {
                                    dir = FORWARD as libc::c_int;
                                    p = (*ptr_to_globals).dot.offset(1);
                                    if *(*ptr_to_globals).last_search_pattern.offset(0)
                                      as libc::c_int
                                      == '?' as i32
                                    {
                                      dir = BACK as libc::c_int;
                                      p = (*ptr_to_globals).dot.offset(-1)
                                    }
                                    current_block = 4166979493554389389;
                                  }
                                  _ => {
                                    q = char_search(
                                      p,
                                      (*ptr_to_globals).last_search_pattern.offset(1),
                                      dir << 1i32 | FULL as libc::c_int,
                                    );
                                    if !q.is_null() {
                                      (*ptr_to_globals).dot = q;
                                      msg = std::ptr::null()
                                    } else {
                                      p = (*ptr_to_globals).text;
                                      if dir == BACK as libc::c_int {
                                        p = (*ptr_to_globals).end.offset(-1)
                                      }
                                      q = char_search(
                                        p,
                                        (*ptr_to_globals).last_search_pattern.offset(1),
                                        dir << 1i32 | FULL as libc::c_int,
                                      );
                                      if !q.is_null() {
                                        (*ptr_to_globals).dot = q;
                                        msg = b"search hit BOTTOM, continuing at TOP\x00"
                                          as *const u8
                                          as *const libc::c_char;
                                        if dir == BACK as libc::c_int {
                                          msg = b"search hit TOP, continuing at BOTTOM\x00"
                                            as *const u8
                                            as *const libc::c_char
                                        }
                                      } else {
                                        msg = b"Pattern not found\x00" as *const u8
                                          as *const libc::c_char
                                      }
                                    }
                                    if !msg.is_null() {
                                      status_line_bold(
                                        b"%s\x00" as *const u8 as *const libc::c_char,
                                        msg,
                                      );
                                    }
                                    (*ptr_to_globals).cmdcnt -= 1;
                                    if (*ptr_to_globals).cmdcnt > 0 {
                                      current_block = 16813369756331276724;
                                    } else {
                                      break;
                                    }
                                  }
                                }
                              }
                              current_block = 15129665204879337069;
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
        85 => {
          current_block = 1105010766850597332;
          match current_block {
            16992905640583886232 => {
              loop {
                if (*(*ptr_to_globals).dot as libc::c_int - 'a' as i32) as libc::c_uchar
                  as libc::c_int
                  <= 'z' as i32 - 'a' as i32
                {
                  undo_push(
                    (*ptr_to_globals).dot,
                    1i32 as libc::c_uint,
                    1i32 as libc::c_uchar,
                  );
                  *(*ptr_to_globals).dot =
                    bb_ascii_toupper(*(*ptr_to_globals).dot as libc::c_uchar) as libc::c_char;
                  undo_push(
                    (*ptr_to_globals).dot,
                    1i32 as libc::c_uint,
                    2i32 as libc::c_uchar,
                  );
                } else if (*(*ptr_to_globals).dot as libc::c_int - 'A' as i32) as libc::c_uchar
                  as libc::c_int
                  <= 'Z' as i32 - 'A' as i32
                {
                  undo_push(
                    (*ptr_to_globals).dot,
                    1i32 as libc::c_uint,
                    1i32 as libc::c_uchar,
                  );
                  *(*ptr_to_globals).dot =
                    bb_ascii_tolower(*(*ptr_to_globals).dot as libc::c_uchar) as libc::c_char;
                  undo_push(
                    (*ptr_to_globals).dot,
                    1i32 as libc::c_uint,
                    2i32 as libc::c_uchar,
                  );
                }
                dot_right();
                (*ptr_to_globals).cmdcnt -= 1;
                if !((*ptr_to_globals).cmdcnt > 0) {
                  break;
                }
              }
              end_cmd_q();
              current_block = 15129665204879337069;
            }
            8729655159604064397 => {
              c1 = get_one_char();
              cnt = 0;
              if c1 == '.' as i32 {
                cnt = (*ptr_to_globals)
                  .rows
                  .wrapping_sub(2i32 as libc::c_uint)
                  .wrapping_div(2i32 as libc::c_uint) as libc::c_int
              }
              if c1 == '-' as i32 {
                cnt = (*ptr_to_globals).rows.wrapping_sub(2i32 as libc::c_uint) as libc::c_int
              }
              (*ptr_to_globals).screenbegin = begin_line((*ptr_to_globals).dot);
              dot_scroll(cnt, -1i32);
              current_block = 15129665204879337069;
            }
            15899500648299942075 => {
              (*ptr_to_globals).last_forward_char = get_one_char();
              do_cmd(';' as i32);
              if *(*ptr_to_globals).dot as libc::c_int == (*ptr_to_globals).last_forward_char {
                dot_left();
              }
              (*ptr_to_globals).last_forward_char = 0;
              current_block = 15129665204879337069;
            }
            9051390181078481641 => {
              c1 = get_one_char();
              if *(*ptr_to_globals).dot as libc::c_int != '\n' as i32 {
                (*ptr_to_globals).dot =
                  text_hole_delete((*ptr_to_globals).dot, (*ptr_to_globals).dot, 1i32);
                (*ptr_to_globals).dot =
                  char_insert((*ptr_to_globals).dot, c1 as libc::c_char, 2i32);
                dot_left();
              }
              end_cmd_q();
              current_block = 15129665204879337069;
            }
            877115918601926659 => {
              dir = FORWARD as libc::c_int;
              if c == 'b' as i32 {
                dir = BACK as libc::c_int
              }
              while !((*ptr_to_globals).dot.offset(dir as isize) < (*ptr_to_globals).text
                || (*ptr_to_globals).dot.offset(dir as isize) > (*ptr_to_globals).end.offset(-1))
              {
                (*ptr_to_globals).dot = (*ptr_to_globals).dot.offset(dir as isize);
                if ({
                  let mut bb__isspace: libc::c_uchar =
                    (*(*ptr_to_globals).dot as libc::c_int - 9i32) as libc::c_uchar;
                  (bb__isspace as libc::c_int == ' ' as i32 - 9i32
                    || bb__isspace as libc::c_int <= 13i32 - 9i32) as libc::c_int
                }) != 0
                {
                  (*ptr_to_globals).dot = skip_thing(
                    (*ptr_to_globals).dot,
                    if c == 'e' as i32 { 2i32 } else { 1i32 },
                    dir,
                    S_OVER_WS as libc::c_int,
                  )
                }
                if bb_ascii_isalnum(*(*ptr_to_globals).dot as libc::c_uchar) != 0
                  || *(*ptr_to_globals).dot as libc::c_int == '_' as i32
                {
                  (*ptr_to_globals).dot =
                    skip_thing((*ptr_to_globals).dot, 1i32, dir, S_END_ALNUM as libc::c_int)
                } else if *strchrnul(
                  b"!\"#$%&\'()*+,-./:;<=>?@[\\]^_`{|}~\x00" as *const u8 as *const libc::c_char,
                  *(*ptr_to_globals).dot as libc::c_int,
                )
                .offset(0)
                  != 0
                {
                  (*ptr_to_globals).dot =
                    skip_thing((*ptr_to_globals).dot, 1i32, dir, S_END_PUNCT as libc::c_int)
                }
                (*ptr_to_globals).cmdcnt -= 1;
                if !((*ptr_to_globals).cmdcnt > 0) {
                  break;
                }
              }
              current_block = 15129665204879337069;
            }
            1085022737867179637 => {
              dot_begin();
              dot_skip_over_ws();
              current_block = 15129665204879337069;
            }
            3113147720494587438 => {
              c1 = get_one_char();
              if c1 != 'Z' as i32 {
                indicate_error();
              } else if (*ptr_to_globals).modified_count != 0 {
                if 1i32 != 0 && (*ptr_to_globals).readonly_mode as libc::c_int != 0 {
                  status_line_bold(
                    b"\'%s\' is read only\x00" as *const u8 as *const libc::c_char,
                    (*ptr_to_globals).current_filename,
                  );
                } else {
                  cnt = file_write(
                    (*ptr_to_globals).current_filename,
                    (*ptr_to_globals).text,
                    (*ptr_to_globals).end.offset(-1),
                  );
                  if cnt < 0 {
                    if cnt == -1i32 {
                      status_line_bold(b"Write error: %m\x00" as *const u8 as *const libc::c_char);
                    }
                  } else if cnt as libc::c_long
                    == (*ptr_to_globals)
                      .end
                      .offset(-1)
                      .wrapping_offset_from((*ptr_to_globals).text)
                      as libc::c_long
                      + 1
                  {
                    (*ptr_to_globals).editing = 0 as smallint
                  }
                }
              } else {
                (*ptr_to_globals).editing = 0 as smallint
              }
              current_block = 15129665204879337069;
            }
            12960118908218882441 => {
              p = begin_line((*ptr_to_globals).dot);
              if *p.offset(-1i32 as isize) as libc::c_int == '\n' as i32 {
                dot_prev();
                current_block = 2087484904894455135;
              } else {
                dot_begin();
                (*ptr_to_globals).dot =
                  char_insert((*ptr_to_globals).dot, '\n' as i32 as libc::c_char, 1i32);
                dot_prev();
                current_block = 8629930936610358348;
              }
            }
            8720450212473544924 => {
              (*ptr_to_globals).dot = (*ptr_to_globals).screenbegin;
              cnt = 0;
              while (cnt as libc::c_uint)
                < (*ptr_to_globals)
                  .rows
                  .wrapping_sub(1i32 as libc::c_uint)
                  .wrapping_div(2i32 as libc::c_uint)
              {
                (*ptr_to_globals).dot = next_line((*ptr_to_globals).dot);
                cnt += 1
              }
              current_block = 15129665204879337069;
            }
            13015277209715431090 => {
              (*ptr_to_globals).dot = end_screen();
              if (*ptr_to_globals).cmdcnt as libc::c_uint
                > (*ptr_to_globals).rows.wrapping_sub(1i32 as libc::c_uint)
              {
                (*ptr_to_globals).cmdcnt =
                  (*ptr_to_globals).rows.wrapping_sub(1i32 as libc::c_uint) as libc::c_int
              }
              (*ptr_to_globals).cmdcnt -= 1;
              if (*ptr_to_globals).cmdcnt > 0 {
                do_cmd('-' as i32);
              }
              dot_begin();
              dot_skip_over_ws();
              current_block = 15129665204879337069;
            }
            9800435767766781385 => {
              loop {
                dot_end();
                if (*ptr_to_globals).dot < (*ptr_to_globals).end.offset(-1) {
                  undo_push(
                    (*ptr_to_globals).dot,
                    1i32 as libc::c_uint,
                    1i32 as libc::c_uchar,
                  );
                  let fresh15 = (*ptr_to_globals).dot;
                  (*ptr_to_globals).dot = (*ptr_to_globals).dot.offset(1);
                  *fresh15 = ' ' as i32 as libc::c_char;
                  undo_push(
                    (*ptr_to_globals).dot.offset(-1),
                    1i32 as libc::c_uint,
                    2i32 as libc::c_uchar,
                  );
                  while ({
                    let mut bb__isblank: libc::c_uchar = *(*ptr_to_globals).dot as libc::c_uchar;
                    (bb__isblank as libc::c_int == ' ' as i32
                      || bb__isblank as libc::c_int == '\t' as i32)
                      as libc::c_int
                  }) != 0
                  {
                    text_hole_delete((*ptr_to_globals).dot, (*ptr_to_globals).dot, 2i32);
                  }
                }
                (*ptr_to_globals).cmdcnt -= 1;
                if !((*ptr_to_globals).cmdcnt > 0) {
                  break;
                }
              }
              end_cmd_q();
              current_block = 15129665204879337069;
            }
            3432363526595694666 => {
              dot_begin();
              dot_skip_over_ws();
              current_block = 3268579060917229304;
            }
            3494829253343353619 => {
              (*ptr_to_globals).dot = (*ptr_to_globals).screenbegin;
              if (*ptr_to_globals).cmdcnt as libc::c_uint
                > (*ptr_to_globals).rows.wrapping_sub(1i32 as libc::c_uint)
              {
                (*ptr_to_globals).cmdcnt =
                  (*ptr_to_globals).rows.wrapping_sub(1i32 as libc::c_uint) as libc::c_int
              }
              (*ptr_to_globals).cmdcnt -= 1;
              if (*ptr_to_globals).cmdcnt > 0 {
                do_cmd('+' as i32);
              }
              dot_skip_over_ws();
              current_block = 15129665204879337069;
            }
            17973101765331640574 => {
              c1 = get_one_char();
              if c1 != 'g' as i32 {
                buf[0] = 'g' as i32 as libc::c_char;
                buf[1] = if c1 >= 0 { c1 } else { '*' as i32 } as libc::c_char;
                buf[2] = '\u{0}' as i32 as libc::c_char;
                not_implemented(buf.as_mut_ptr());
                current_block = 15129665204879337069;
              } else {
                if (*ptr_to_globals).cmdcnt == 0 {
                  (*ptr_to_globals).cmdcnt = 1i32
                }
                current_block = 11945623545738147997;
              }
            }
            16546625800574160972 => {
              save_dot = (*ptr_to_globals).dot;
              (*ptr_to_globals).dot = dollar_line((*ptr_to_globals).dot);
              (*ptr_to_globals).dot = yank_delete(
                save_dot,
                (*ptr_to_globals).dot,
                0,
                YANKDEL as libc::c_int,
                1i32,
              );
              if c == 'C' as i32 {
                current_block = 8629930936610358348;
              } else {
                if c == 'D' as i32 {
                  end_cmd_q();
                }
                current_block = 15129665204879337069;
              }
            }
            11937696639986586685 => {
              cnt = count_lines((*ptr_to_globals).text, (*ptr_to_globals).dot);
              c1 = get_one_char();
              find_range(&mut p, &mut q, c1 as libc::c_char);
              yank_delete(p, q, 1i32, YANKONLY as libc::c_int, 0);
              p = begin_line(p);
              q = end_line(q);
              i = count_lines(p, q);
              while i > 0 {
                if c == '<' as i32 {
                  if *p as libc::c_int == '\t' as i32 {
                    text_hole_delete(p, p, 0);
                  } else if *p as libc::c_int == ' ' as i32 {
                    j = 0;
                    while *p as libc::c_int == ' ' as i32 && j < (*ptr_to_globals).tabstop {
                      text_hole_delete(p, p, 0);
                      j += 1
                    }
                  }
                } else if c == '>' as i32 {
                  char_insert(p, '\t' as i32 as libc::c_char, 1i32);
                }
                i -= 1;
                p = next_line(p)
              }
              (*ptr_to_globals).dot = find_line(cnt);
              dot_skip_over_ws();
              end_cmd_q();
              current_block = 15129665204879337069;
            }
            17725350714912028156 => {
              p = get_input_line(b":\x00" as *const u8 as *const libc::c_char);
              colon(p);
              current_block = 15129665204879337069;
            }
            14526470074083880812 => {
              q = char_search(
                (*ptr_to_globals).dot,
                b"\n\n\x00" as *const u8 as *const libc::c_char,
                (FORWARD as libc::c_int) << 1i32 | FULL as libc::c_int,
              );
              if !q.is_null() {
                (*ptr_to_globals).dot = next_line(q)
              }
              current_block = 15129665204879337069;
            }
            8893187391306414141 => {
              q = char_search(
                (*ptr_to_globals).dot,
                b"\n\n\x00" as *const u8 as *const libc::c_char,
                ((BACK as libc::c_int as libc::c_uint) << 1i32
                  | FULL as libc::c_int as libc::c_uint) as libc::c_int,
              );
              if !q.is_null() {
                (*ptr_to_globals).dot = next_line(q)
              }
              current_block = 15129665204879337069;
            }
            7021673758293221412 => {
              dir = BACK as libc::c_int;
              p = (*ptr_to_globals).dot.offset(-1);
              if *(*ptr_to_globals).last_search_pattern.offset(0) as libc::c_int == '?' as i32 {
                dir = FORWARD as libc::c_int;
                p = (*ptr_to_globals).dot.offset(1)
              }
              current_block = 4166979493554389389;
            }
            18374191879090272823 => {
              buf[0] = c as libc::c_char;
              buf[1] = '\u{0}' as i32 as libc::c_char;
              q = get_input_line(buf.as_mut_ptr());
              if *q.offset(0) as libc::c_int != 0 && *q.offset(1) == 0 {
                if *(*ptr_to_globals).last_search_pattern.offset(0) != 0 {
                  *(*ptr_to_globals).last_search_pattern.offset(0) = c as libc::c_char
                }
                current_block = 7392824444931029276;
              } else if *q.offset(0) != 0 {
                free((*ptr_to_globals).last_search_pattern as *mut libc::c_void);
                (*ptr_to_globals).last_search_pattern = crate::libbb::xfuncs_printf::xstrdup(q);
                current_block = 7392824444931029276;
              } else {
                current_block = 15129665204879337069;
              }
            }
            16407828456666301883 => {
              if (*ptr_to_globals).last_forward_char == 0 {
                current_block = 15129665204879337069;
              } else {
                loop {
                  q = (*ptr_to_globals).dot.offset(-1);
                  while q >= (*ptr_to_globals).text
                    && *q as libc::c_int != '\n' as i32
                    && *q as libc::c_int != (*ptr_to_globals).last_forward_char
                  {
                    q = q.offset(-1)
                  }
                  if q >= (*ptr_to_globals).text
                    && *q as libc::c_int == (*ptr_to_globals).last_forward_char
                  {
                    (*ptr_to_globals).dot = q
                  }
                  (*ptr_to_globals).cmdcnt -= 1;
                  if !((*ptr_to_globals).cmdcnt > 0) {
                    break;
                  }
                }
                current_block = 15129665204879337069;
              }
            }
            9018432604062702004 => {
              q = (*ptr_to_globals).dot;
              while q < (*ptr_to_globals).end && *q as libc::c_int != '\n' as i32 {
                if !strchr(
                  b"()[]{}\x00" as *const u8 as *const libc::c_char,
                  *q as libc::c_int,
                )
                .is_null()
                {
                  p = find_pair(q, *q);
                  if p.is_null() {
                    indicate_error();
                  } else {
                    (*ptr_to_globals).dot = p
                  }
                  break;
                } else {
                  q = q.offset(1)
                }
              }
              if *q as libc::c_int == '\n' as i32 {
                indicate_error();
              }
              current_block = 15129665204879337069;
            }
            10247103787464459848 => {
              p = (*ptr_to_globals).reg[(*ptr_to_globals).YDreg as usize];
              if p.is_null() {
                status_line_bold(
                  b"Nothing in register %c\x00" as *const u8 as *const libc::c_char,
                  what_reg() as libc::c_int,
                );
              } else {
                if !strchr(p, '\n' as i32).is_null() {
                  if c == 'P' as i32 {
                    dot_begin();
                  }
                  if c == 'p' as i32 {
                    if end_line((*ptr_to_globals).dot) == (*ptr_to_globals).end.offset(-1) {
                      (*ptr_to_globals).dot = (*ptr_to_globals).end
                    } else {
                      dot_next();
                    }
                  }
                } else if c == 'p' as i32 {
                  dot_right();
                }
                string_insert((*ptr_to_globals).dot, p, 1i32);
                end_cmd_q();
              }
              current_block = 15129665204879337069;
            }
            15260732871948875843 => {
              c1 = (get_one_char() | 0x20i32) - 'a' as i32;
              if c1 as libc::c_uint <= 25i32 as libc::c_uint {
                (*ptr_to_globals).mark[c1 as usize] = (*ptr_to_globals).dot
              } else {
                indicate_error();
              }
              current_block = 15129665204879337069;
            }
            12738322036487086035 => {
              c1 = get_one_char() | 0x20i32;
              if (c1 - 'a' as i32) as libc::c_uint <= 25i32 as libc::c_uint {
                c1 = c1 - 'a' as i32;
                q = (*ptr_to_globals).mark[c1 as usize];
                if (*ptr_to_globals).text <= q && q < (*ptr_to_globals).end {
                  (*ptr_to_globals).dot = q;
                  dot_begin();
                  dot_skip_over_ws();
                }
              } else if c1 == '\'' as i32 {
                (*ptr_to_globals).dot = swap_context((*ptr_to_globals).dot);
                dot_begin();
                dot_skip_over_ws();
              } else {
                indicate_error();
              }
              current_block = 15129665204879337069;
            }
            13255096073384561358 => {
              c1 = (get_one_char() | 0x20i32) - 'a' as i32;
              if c1 as libc::c_uint <= 25i32 as libc::c_uint {
                (*ptr_to_globals).YDreg = c1 as smalluint
              } else {
                indicate_error();
              }
              current_block = 15129665204879337069;
            }
            10258711639984089377 => {
              if (*ptr_to_globals).cmd_mode as libc::c_int == 0 {
                indicate_error();
              }
              (*ptr_to_globals).cmd_mode = 0 as smallint;
              undo_queue_commit();
              end_cmd_q();
              (*ptr_to_globals).last_status_cksum = 0;
              current_block = 15129665204879337069;
            }
            11439127087547047736 => {
              buf[0] = c as libc::c_char;
              buf[1] = '\u{0}' as i32 as libc::c_char;
              not_implemented(buf.as_mut_ptr());
              end_cmd_q();
              current_block = 17440971994642376514;
            }
            7961798899781870241 => {
              dot_scroll(
                (*ptr_to_globals).rows.wrapping_sub(2i32 as libc::c_uint) as libc::c_int,
                -1i32,
              );
              current_block = 15129665204879337069;
            }
            9426343755402444879 => {
              dot_scroll(
                (*ptr_to_globals)
                  .rows
                  .wrapping_sub(2i32 as libc::c_uint)
                  .wrapping_div(2i32 as libc::c_uint) as libc::c_int,
                1i32,
              );
              current_block = 15129665204879337069;
            }
            13352459794680105913 => {
              dot_scroll(1i32, 1i32);
              current_block = 15129665204879337069;
            }
            14142272253464333006 => {
              dot_scroll(
                (*ptr_to_globals).rows.wrapping_sub(2i32 as libc::c_uint) as libc::c_int,
                1i32,
              );
              current_block = 15129665204879337069;
            }
            10758177197742640066 => {
              (*ptr_to_globals).last_status_cksum = 0;
              current_block = 15129665204879337069;
            }
            6152256259730122749 => {
              current_block = 7534742345255184552;
            }
            12883932598258173301 => {
              current_block = 8800996768013373992;
            }
            11242998110520238401 => {
              redraw(1i32);
              current_block = 15129665204879337069;
            }
            13619733043935729992 => {
              loop {
                dot_next();
                dot_skip_over_ws();
                (*ptr_to_globals).cmdcnt -= 1;
                if !((*ptr_to_globals).cmdcnt > 0) {
                  break;
                }
              }
              current_block = 15129665204879337069;
            }
            9339065157412720613 => {
              dot_scroll(
                (*ptr_to_globals)
                  .rows
                  .wrapping_sub(2i32 as libc::c_uint)
                  .wrapping_div(2i32 as libc::c_uint) as libc::c_int,
                -1i32,
              );
              current_block = 15129665204879337069;
            }
            11447082683497798022 => {
              dot_scroll(1i32, -1i32);
              current_block = 15129665204879337069;
            }
            5182000506326660482 => {
              current_block = 13993698454868426881;
            }
            1105010766850597332 => {
              if !(*ptr_to_globals).reg[27].is_null() {
                p = begin_line((*ptr_to_globals).dot);
                q = end_line((*ptr_to_globals).dot);
                p = text_hole_delete(p, q, 1i32);
                p = p.offset(string_insert(p, (*ptr_to_globals).reg[27], 2i32) as isize);
                (*ptr_to_globals).dot = p;
                dot_skip_over_ws();
              }
              current_block = 15129665204879337069;
            }
            8616046655533110204 => {
              undo_pop();
              current_block = 15129665204879337069;
            }
            5127767458142431603 => {
              loop {
                (*ptr_to_globals).dot = end_line((*ptr_to_globals).dot);
                (*ptr_to_globals).cmdcnt -= 1;
                if (*ptr_to_globals).cmdcnt <= 0 {
                  break;
                }
                dot_next();
              }
              current_block = 15129665204879337069;
            }
            222014967776118151 => {
              (*ptr_to_globals).last_forward_char = get_one_char();
              current_block = 7856905509180742666;
            }
            11209792479411604110 => {
              loop {
                dot_prev();
                dot_skip_over_ws();
                (*ptr_to_globals).cmdcnt -= 1;
                if !((*ptr_to_globals).cmdcnt > 0) {
                  break;
                }
              }
              current_block = 15129665204879337069;
            }
            3364823792826654116 => {
              if (*ptr_to_globals).lmc_len != 0 {
                (*ptr_to_globals).ioq_start = crate::libbb::xfuncs_printf::xstrndup(
                  (*ptr_to_globals).last_modifying_cmd.as_mut_ptr(),
                  (*ptr_to_globals).lmc_len,
                );
                (*ptr_to_globals).ioq = (*ptr_to_globals).ioq_start
              }
              current_block = 15129665204879337069;
            }
            18096603330221575131 => {
              current_block = 17498168302144015873;
            }
            16891123271837848903 => {
              dot_end();
              current_block = 1752638907092016026;
            }
            8517235759107662071 => {
              current_block = 5847749760081351726;
            }
            12525254419223051704 => {
              if (*ptr_to_globals).dot < (*ptr_to_globals).end.offset(-1) {
                (*ptr_to_globals).dot = yank_delete(
                  (*ptr_to_globals).dot,
                  (*ptr_to_globals).dot,
                  1i32,
                  YANKDEL as libc::c_int,
                  1i32,
                )
              }
              current_block = 15129665204879337069;
            }
            15232911949322867522 => {
              current_block = 17251831742223396249;
            }
            10863374208794025069 => {
              current_block = 1895262434596074581;
            }
            451126677064669119 => {
              loop {
                dot_prev();
                (*ptr_to_globals).dot = move_to_col(
                  (*ptr_to_globals).dot,
                  (*ptr_to_globals).ccol + (*ptr_to_globals).offset,
                );
                (*ptr_to_globals).cmdcnt -= 1;
                if !((*ptr_to_globals).cmdcnt > 0) {
                  break;
                }
              }
              current_block = 15129665204879337069;
            }
            4611735929166613116 => {
              loop {
                if bb_ascii_isalnum(*(*ptr_to_globals).dot as libc::c_uchar) != 0
                  || *(*ptr_to_globals).dot as libc::c_int == '_' as i32
                {
                  (*ptr_to_globals).dot = skip_thing(
                    (*ptr_to_globals).dot,
                    1i32,
                    FORWARD as libc::c_int,
                    S_END_ALNUM as libc::c_int,
                  )
                } else if *strchrnul(
                  b"!\"#$%&\'()*+,-./:;<=>?@[\\]^_`{|}~\x00" as *const u8 as *const libc::c_char,
                  *(*ptr_to_globals).dot as libc::c_int,
                )
                .offset(0)
                  != 0
                {
                  (*ptr_to_globals).dot = skip_thing(
                    (*ptr_to_globals).dot,
                    1i32,
                    FORWARD as libc::c_int,
                    S_END_PUNCT as libc::c_int,
                  )
                }
                if (*ptr_to_globals).dot < (*ptr_to_globals).end.offset(-1) {
                  (*ptr_to_globals).dot = (*ptr_to_globals).dot.offset(1)
                }
                if ({
                  let mut bb__isspace: libc::c_uchar =
                    (*(*ptr_to_globals).dot as libc::c_int - 9i32) as libc::c_uchar;
                  (bb__isspace as libc::c_int == ' ' as i32 - 9i32
                    || bb__isspace as libc::c_int <= 13i32 - 9i32) as libc::c_int
                }) != 0
                {
                  (*ptr_to_globals).dot = skip_thing(
                    (*ptr_to_globals).dot,
                    2i32,
                    FORWARD as libc::c_int,
                    S_OVER_WS as libc::c_int,
                  )
                }
                (*ptr_to_globals).cmdcnt -= 1;
                if !((*ptr_to_globals).cmdcnt > 0) {
                  break;
                }
              }
              current_block = 15129665204879337069;
            }
            4386451087681909888 => {
              (*ptr_to_globals).dot =
                move_to_col((*ptr_to_globals).dot, (*ptr_to_globals).cmdcnt - 1i32);
              current_block = 15129665204879337069;
            }
            1296397779060594135 => {
              dot_begin();
              current_block = 15129665204879337069;
            }
            _ => {}
          }
          match current_block {
            15129665204879337069 => {}
            8629930936610358348 => {}
            _ => {
              match current_block {
                17251831742223396249 => {
                  dir = 0;
                  if c == 'X' as i32 {
                    dir = -1i32
                  }
                  loop {
                    if *(*ptr_to_globals).dot.offset(dir as isize) as libc::c_int != '\n' as i32 {
                      if c == 'X' as i32 {
                        (*ptr_to_globals).dot = (*ptr_to_globals).dot.offset(-1)
                      }
                      (*ptr_to_globals).dot = yank_delete(
                        (*ptr_to_globals).dot,
                        (*ptr_to_globals).dot,
                        0,
                        YANKDEL as libc::c_int,
                        1i32,
                      )
                    }
                    (*ptr_to_globals).cmdcnt -= 1;
                    if !((*ptr_to_globals).cmdcnt > 0) {
                      break;
                    }
                  }
                  end_cmd_q();
                  if c == 's' as i32 {
                    current_block = 8629930936610358348;
                  } else {
                    current_block = 15129665204879337069;
                  }
                }
                2087484904894455135 => {
                  dot_end();
                  (*ptr_to_globals).dot =
                    char_insert((*ptr_to_globals).dot, '\n' as i32 as libc::c_char, 1i32);
                  current_block = 8629930936610358348;
                }
                11945623545738147997 => {
                  (*ptr_to_globals).dot = (*ptr_to_globals).end.offset(-1);
                  if (*ptr_to_globals).cmdcnt > 0 {
                    (*ptr_to_globals).dot = find_line((*ptr_to_globals).cmdcnt)
                  }
                  dot_skip_over_ws();
                  current_block = 15129665204879337069;
                }
                5847749760081351726 => {
                  dir = FORWARD as libc::c_int;
                  if c == 'B' as i32 {
                    dir = BACK as libc::c_int
                  }
                  loop {
                    if c == 'W' as i32
                      || ({
                        let mut bb__isspace: libc::c_uchar =
                          (*(*ptr_to_globals).dot.offset(dir as isize) as libc::c_int - 9i32)
                            as libc::c_uchar;
                        (bb__isspace as libc::c_int == ' ' as i32 - 9i32
                          || bb__isspace as libc::c_int <= 13i32 - 9i32)
                          as libc::c_int
                      }) != 0
                    {
                      (*ptr_to_globals).dot =
                        skip_thing((*ptr_to_globals).dot, 1i32, dir, S_TO_WS as libc::c_int);
                      (*ptr_to_globals).dot =
                        skip_thing((*ptr_to_globals).dot, 2i32, dir, S_OVER_WS as libc::c_int)
                    }
                    if c != 'W' as i32 {
                      (*ptr_to_globals).dot =
                        skip_thing((*ptr_to_globals).dot, 1i32, dir, S_BEFORE_WS as libc::c_int)
                    }
                    (*ptr_to_globals).cmdcnt -= 1;
                    if !((*ptr_to_globals).cmdcnt > 0) {
                      break;
                    }
                  }
                  current_block = 15129665204879337069;
                }
                17440971994642376514 => {
                  current_block = 15129665204879337069;
                }
                7534742345255184552 => {
                  current_block = 17247297260531395789;
                }
                8800996768013373992 => {
                  loop {
                    dot_next();
                    (*ptr_to_globals).dot = move_to_col(
                      (*ptr_to_globals).dot,
                      (*ptr_to_globals).ccol + (*ptr_to_globals).offset,
                    );
                    (*ptr_to_globals).cmdcnt -= 1;
                    if !((*ptr_to_globals).cmdcnt > 0) {
                      break;
                    }
                  }
                  current_block = 15129665204879337069;
                }
                13993698454868426881 => {
                  loop {
                    dot_right();
                    (*ptr_to_globals).cmdcnt -= 1;
                    if !((*ptr_to_globals).cmdcnt > 0) {
                      break;
                    }
                  }
                  current_block = 15129665204879337069;
                }
                7856905509180742666 => {
                  while !((*ptr_to_globals).last_forward_char == 0) {
                    q = (*ptr_to_globals).dot.offset(1);
                    while q < (*ptr_to_globals).end.offset(-1)
                      && *q as libc::c_int != '\n' as i32
                      && *q as libc::c_int != (*ptr_to_globals).last_forward_char
                    {
                      q = q.offset(1)
                    }
                    if *q as libc::c_int == (*ptr_to_globals).last_forward_char {
                      (*ptr_to_globals).dot = q
                    }
                    (*ptr_to_globals).cmdcnt -= 1;
                    if !((*ptr_to_globals).cmdcnt > 0) {
                      break;
                    }
                  }
                  current_block = 15129665204879337069;
                }
                17498168302144015873 => {
                  current_block = 8681395796513813967;
                }
                1752638907092016026 => {
                  if *(*ptr_to_globals).dot as libc::c_int != '\n' as i32 {
                    (*ptr_to_globals).dot = (*ptr_to_globals).dot.offset(1)
                  }
                  current_block = 8629930936610358348;
                }
                3268579060917229304 => {
                  current_block = 8629930936610358348;
                }
                1895262434596074581 => {
                  current_block = 8908416993177701018;
                }
                _ => {}
              }
              match current_block {
                8629930936610358348 => {}
                15129665204879337069 => {}
                _ => {
                  match current_block {
                    17247297260531395789 => {
                      loop {
                        dot_left();
                        (*ptr_to_globals).cmdcnt -= 1;
                        if !((*ptr_to_globals).cmdcnt > 0) {
                          break;
                        }
                      }
                      current_block = 15129665204879337069;
                    }
                    8681395796513813967 => {
                      current_block = 5591548203144509315;
                    }
                    8908416993177701018 => {
                      current_block = 16124761010012532485;
                    }
                    _ => {}
                  }
                  match current_block {
                    15129665204879337069 => {}
                    _ => {
                      match current_block {
                        16124761010012532485 => {
                          let mut yf: libc::c_int = 0;
                          let mut ml: libc::c_int = 0;
                          let mut whole: libc::c_int = 0;
                          yf = YANKDEL as libc::c_int;
                          if c == 'y' as i32 || c == 'Y' as i32 {
                            yf = YANKONLY as libc::c_int
                          }
                          c1 = 'y' as i32;
                          if c != 'Y' as i32 {
                            c1 = get_one_char()
                          }
                          ml = find_range(&mut p, &mut q, c1 as libc::c_char);
                          place_cursor(0i32, 0);
                          if c1 == 27i32 {
                            c1 = 27i32;
                            c = c1
                          } else if !strchr(b"wW\x00" as *const u8 as *const libc::c_char, c1)
                            .is_null()
                          {
                            ml = 0;
                            if c == 'c' as i32 {
                              while ({
                                let mut bb__isspace: libc::c_uchar =
                                  (*q as libc::c_int - 9i32) as libc::c_uchar;
                                (bb__isspace as libc::c_int == ' ' as i32 - 9i32
                                  || bb__isspace as libc::c_int <= 13i32 - 9i32)
                                  as libc::c_int
                              }) != 0
                                && q > p
                              {
                                q = q.offset(-1)
                              }
                            }
                            (*ptr_to_globals).dot = yank_delete(p, q, ml, yf, 1i32)
                          } else if !strchr(
                            b"^0bBeEft%$ lh\x08\x7f\x00" as *const u8 as *const libc::c_char,
                            c1,
                          )
                          .is_null()
                          {
                            (*ptr_to_globals).dot = yank_delete(p, q, ml, yf, 1i32)
                          } else if !strchr(
                            b"cdykjGHL+-{}\r\n\x00" as *const u8 as *const libc::c_char,
                            c1,
                          )
                          .is_null()
                          {
                            (*ptr_to_globals).dot = yank_delete(p, q, ml, yf, 1i32);
                            whole = 1i32
                          } else {
                            c1 = 27i32;
                            c = c1;
                            ml = 0;
                            indicate_error();
                          }
                          if ml != 0 && whole != 0 {
                            if c == 'c' as i32 {
                              (*ptr_to_globals).dot = char_insert(
                                (*ptr_to_globals).dot,
                                '\n' as i32 as libc::c_char,
                                2i32,
                              );
                              if whole != 0
                                && (*ptr_to_globals).dot != (*ptr_to_globals).end.offset(-1)
                              {
                                dot_prev();
                              }
                            } else if c == 'd' as i32 {
                              dot_begin();
                              dot_skip_over_ws();
                            }
                          }
                          if c1 != 27i32 {
                            if c == 'c' as i32 {
                              strcpy(
                                buf.as_mut_ptr(),
                                b"Change\x00" as *const u8 as *const libc::c_char,
                              );
                              current_block = 8629930936610358348;
                            } else {
                              if c == 'd' as i32 {
                                strcpy(
                                  buf.as_mut_ptr(),
                                  b"Delete\x00" as *const u8 as *const libc::c_char,
                                );
                              }
                              if c == 'y' as i32 || c == 'Y' as i32 {
                                strcpy(
                                  buf.as_mut_ptr(),
                                  b"Yank\x00" as *const u8 as *const libc::c_char,
                                );
                              }
                              p = (*ptr_to_globals).reg[(*ptr_to_globals).YDreg as usize];
                              q = p.offset(strlen(p) as isize);
                              cnt = 0;
                              while p <= q {
                                if *p as libc::c_int == '\n' as i32 {
                                  cnt += 1
                                }
                                p = p.offset(1)
                              }
                              status_line(
                                b"%s %u lines (%u chars) using [%c]\x00" as *const u8
                                  as *const libc::c_char,
                                buf.as_mut_ptr(),
                                cnt,
                                strlen((*ptr_to_globals).reg[(*ptr_to_globals).YDreg as usize])
                                  as libc::c_uint,
                                what_reg() as libc::c_int,
                              );
                              end_cmd_q();
                              current_block = 15129665204879337069;
                            }
                          } else {
                            current_block = 15129665204879337069;
                          }
                        }
                        5591548203144509315 => {
                          current_block = 2636677179867529885;
                        }
                        _ => {}
                      }
                      match current_block {
                        15129665204879337069 => {}
                        8629930936610358348 => {}
                        _ => {
                          match current_block {
                            2636677179867529885 => {
                              current_block = 12309206730560524281;
                            }
                            _ => {}
                          }
                          match current_block {
                            12309206730560524281 => {
                              current_block = 3325768110057758661;
                            }
                            _ => {}
                          }
                          match current_block {
                            3325768110057758661 => {
                              current_block = 14815832896553429982;
                            }
                            _ => {}
                          }
                          match current_block {
                            14815832896553429982 => {
                              current_block = 10731695520297161438;
                            }
                            _ => {}
                          }
                          match current_block {
                            10731695520297161438 => {
                              if c == '0' as i32 && (*ptr_to_globals).cmdcnt < 1i32 {
                                dot_begin();
                              } else {
                                (*ptr_to_globals).cmdcnt =
                                  (*ptr_to_globals).cmdcnt * 10i32 + (c - '0' as i32)
                              }
                              current_block = 15129665204879337069;
                            }
                            _ => {}
                          }
                          match current_block {
                            15129665204879337069 => {}
                            _ => {
                              loop {
                                match current_block {
                                  16813369756331276724 => {
                                    msg = std::ptr::null();
                                    current_block = 7392824444931029276;
                                  }
                                  7392824444931029276 => {
                                    dir = FORWARD as libc::c_int;
                                    p = (*ptr_to_globals).dot.offset(1);
                                    if *(*ptr_to_globals).last_search_pattern.offset(0)
                                      as libc::c_int
                                      == '?' as i32
                                    {
                                      dir = BACK as libc::c_int;
                                      p = (*ptr_to_globals).dot.offset(-1)
                                    }
                                    current_block = 4166979493554389389;
                                  }
                                  _ => {
                                    q = char_search(
                                      p,
                                      (*ptr_to_globals).last_search_pattern.offset(1),
                                      dir << 1i32 | FULL as libc::c_int,
                                    );
                                    if !q.is_null() {
                                      (*ptr_to_globals).dot = q;
                                      msg = std::ptr::null()
                                    } else {
                                      p = (*ptr_to_globals).text;
                                      if dir == BACK as libc::c_int {
                                        p = (*ptr_to_globals).end.offset(-1)
                                      }
                                      q = char_search(
                                        p,
                                        (*ptr_to_globals).last_search_pattern.offset(1),
                                        dir << 1i32 | FULL as libc::c_int,
                                      );
                                      if !q.is_null() {
                                        (*ptr_to_globals).dot = q;
                                        msg = b"search hit BOTTOM, continuing at TOP\x00"
                                          as *const u8
                                          as *const libc::c_char;
                                        if dir == BACK as libc::c_int {
                                          msg = b"search hit TOP, continuing at BOTTOM\x00"
                                            as *const u8
                                            as *const libc::c_char
                                        }
                                      } else {
                                        msg = b"Pattern not found\x00" as *const u8
                                          as *const libc::c_char
                                      }
                                    }
                                    if !msg.is_null() {
                                      status_line_bold(
                                        b"%s\x00" as *const u8 as *const libc::c_char,
                                        msg,
                                      );
                                    }
                                    (*ptr_to_globals).cmdcnt -= 1;
                                    if (*ptr_to_globals).cmdcnt > 0 {
                                      current_block = 16813369756331276724;
                                    } else {
                                      break;
                                    }
                                  }
                                }
                              }
                              current_block = 15129665204879337069;
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
        117 => {
          current_block = 8616046655533110204;
          match current_block {
            16992905640583886232 => {
              loop {
                if (*(*ptr_to_globals).dot as libc::c_int - 'a' as i32) as libc::c_uchar
                  as libc::c_int
                  <= 'z' as i32 - 'a' as i32
                {
                  undo_push(
                    (*ptr_to_globals).dot,
                    1i32 as libc::c_uint,
                    1i32 as libc::c_uchar,
                  );
                  *(*ptr_to_globals).dot =
                    bb_ascii_toupper(*(*ptr_to_globals).dot as libc::c_uchar) as libc::c_char;
                  undo_push(
                    (*ptr_to_globals).dot,
                    1i32 as libc::c_uint,
                    2i32 as libc::c_uchar,
                  );
                } else if (*(*ptr_to_globals).dot as libc::c_int - 'A' as i32) as libc::c_uchar
                  as libc::c_int
                  <= 'Z' as i32 - 'A' as i32
                {
                  undo_push(
                    (*ptr_to_globals).dot,
                    1i32 as libc::c_uint,
                    1i32 as libc::c_uchar,
                  );
                  *(*ptr_to_globals).dot =
                    bb_ascii_tolower(*(*ptr_to_globals).dot as libc::c_uchar) as libc::c_char;
                  undo_push(
                    (*ptr_to_globals).dot,
                    1i32 as libc::c_uint,
                    2i32 as libc::c_uchar,
                  );
                }
                dot_right();
                (*ptr_to_globals).cmdcnt -= 1;
                if !((*ptr_to_globals).cmdcnt > 0) {
                  break;
                }
              }
              end_cmd_q();
              current_block = 15129665204879337069;
            }
            8729655159604064397 => {
              c1 = get_one_char();
              cnt = 0;
              if c1 == '.' as i32 {
                cnt = (*ptr_to_globals)
                  .rows
                  .wrapping_sub(2i32 as libc::c_uint)
                  .wrapping_div(2i32 as libc::c_uint) as libc::c_int
              }
              if c1 == '-' as i32 {
                cnt = (*ptr_to_globals).rows.wrapping_sub(2i32 as libc::c_uint) as libc::c_int
              }
              (*ptr_to_globals).screenbegin = begin_line((*ptr_to_globals).dot);
              dot_scroll(cnt, -1i32);
              current_block = 15129665204879337069;
            }
            15899500648299942075 => {
              (*ptr_to_globals).last_forward_char = get_one_char();
              do_cmd(';' as i32);
              if *(*ptr_to_globals).dot as libc::c_int == (*ptr_to_globals).last_forward_char {
                dot_left();
              }
              (*ptr_to_globals).last_forward_char = 0;
              current_block = 15129665204879337069;
            }
            9051390181078481641 => {
              c1 = get_one_char();
              if *(*ptr_to_globals).dot as libc::c_int != '\n' as i32 {
                (*ptr_to_globals).dot =
                  text_hole_delete((*ptr_to_globals).dot, (*ptr_to_globals).dot, 1i32);
                (*ptr_to_globals).dot =
                  char_insert((*ptr_to_globals).dot, c1 as libc::c_char, 2i32);
                dot_left();
              }
              end_cmd_q();
              current_block = 15129665204879337069;
            }
            877115918601926659 => {
              dir = FORWARD as libc::c_int;
              if c == 'b' as i32 {
                dir = BACK as libc::c_int
              }
              while !((*ptr_to_globals).dot.offset(dir as isize) < (*ptr_to_globals).text
                || (*ptr_to_globals).dot.offset(dir as isize) > (*ptr_to_globals).end.offset(-1))
              {
                (*ptr_to_globals).dot = (*ptr_to_globals).dot.offset(dir as isize);
                if ({
                  let mut bb__isspace: libc::c_uchar =
                    (*(*ptr_to_globals).dot as libc::c_int - 9i32) as libc::c_uchar;
                  (bb__isspace as libc::c_int == ' ' as i32 - 9i32
                    || bb__isspace as libc::c_int <= 13i32 - 9i32) as libc::c_int
                }) != 0
                {
                  (*ptr_to_globals).dot = skip_thing(
                    (*ptr_to_globals).dot,
                    if c == 'e' as i32 { 2i32 } else { 1i32 },
                    dir,
                    S_OVER_WS as libc::c_int,
                  )
                }
                if bb_ascii_isalnum(*(*ptr_to_globals).dot as libc::c_uchar) != 0
                  || *(*ptr_to_globals).dot as libc::c_int == '_' as i32
                {
                  (*ptr_to_globals).dot =
                    skip_thing((*ptr_to_globals).dot, 1i32, dir, S_END_ALNUM as libc::c_int)
                } else if *strchrnul(
                  b"!\"#$%&\'()*+,-./:;<=>?@[\\]^_`{|}~\x00" as *const u8 as *const libc::c_char,
                  *(*ptr_to_globals).dot as libc::c_int,
                )
                .offset(0)
                  != 0
                {
                  (*ptr_to_globals).dot =
                    skip_thing((*ptr_to_globals).dot, 1i32, dir, S_END_PUNCT as libc::c_int)
                }
                (*ptr_to_globals).cmdcnt -= 1;
                if !((*ptr_to_globals).cmdcnt > 0) {
                  break;
                }
              }
              current_block = 15129665204879337069;
            }
            1085022737867179637 => {
              dot_begin();
              dot_skip_over_ws();
              current_block = 15129665204879337069;
            }
            3113147720494587438 => {
              c1 = get_one_char();
              if c1 != 'Z' as i32 {
                indicate_error();
              } else if (*ptr_to_globals).modified_count != 0 {
                if 1i32 != 0 && (*ptr_to_globals).readonly_mode as libc::c_int != 0 {
                  status_line_bold(
                    b"\'%s\' is read only\x00" as *const u8 as *const libc::c_char,
                    (*ptr_to_globals).current_filename,
                  );
                } else {
                  cnt = file_write(
                    (*ptr_to_globals).current_filename,
                    (*ptr_to_globals).text,
                    (*ptr_to_globals).end.offset(-1),
                  );
                  if cnt < 0 {
                    if cnt == -1i32 {
                      status_line_bold(b"Write error: %m\x00" as *const u8 as *const libc::c_char);
                    }
                  } else if cnt as libc::c_long
                    == (*ptr_to_globals)
                      .end
                      .offset(-1)
                      .wrapping_offset_from((*ptr_to_globals).text)
                      as libc::c_long
                      + 1
                  {
                    (*ptr_to_globals).editing = 0 as smallint
                  }
                }
              } else {
                (*ptr_to_globals).editing = 0 as smallint
              }
              current_block = 15129665204879337069;
            }
            12960118908218882441 => {
              p = begin_line((*ptr_to_globals).dot);
              if *p.offset(-1i32 as isize) as libc::c_int == '\n' as i32 {
                dot_prev();
                current_block = 2087484904894455135;
              } else {
                dot_begin();
                (*ptr_to_globals).dot =
                  char_insert((*ptr_to_globals).dot, '\n' as i32 as libc::c_char, 1i32);
                dot_prev();
                current_block = 8629930936610358348;
              }
            }
            8720450212473544924 => {
              (*ptr_to_globals).dot = (*ptr_to_globals).screenbegin;
              cnt = 0;
              while (cnt as libc::c_uint)
                < (*ptr_to_globals)
                  .rows
                  .wrapping_sub(1i32 as libc::c_uint)
                  .wrapping_div(2i32 as libc::c_uint)
              {
                (*ptr_to_globals).dot = next_line((*ptr_to_globals).dot);
                cnt += 1
              }
              current_block = 15129665204879337069;
            }
            13015277209715431090 => {
              (*ptr_to_globals).dot = end_screen();
              if (*ptr_to_globals).cmdcnt as libc::c_uint
                > (*ptr_to_globals).rows.wrapping_sub(1i32 as libc::c_uint)
              {
                (*ptr_to_globals).cmdcnt =
                  (*ptr_to_globals).rows.wrapping_sub(1i32 as libc::c_uint) as libc::c_int
              }
              (*ptr_to_globals).cmdcnt -= 1;
              if (*ptr_to_globals).cmdcnt > 0 {
                do_cmd('-' as i32);
              }
              dot_begin();
              dot_skip_over_ws();
              current_block = 15129665204879337069;
            }
            9800435767766781385 => {
              loop {
                dot_end();
                if (*ptr_to_globals).dot < (*ptr_to_globals).end.offset(-1) {
                  undo_push(
                    (*ptr_to_globals).dot,
                    1i32 as libc::c_uint,
                    1i32 as libc::c_uchar,
                  );
                  let fresh15 = (*ptr_to_globals).dot;
                  (*ptr_to_globals).dot = (*ptr_to_globals).dot.offset(1);
                  *fresh15 = ' ' as i32 as libc::c_char;
                  undo_push(
                    (*ptr_to_globals).dot.offset(-1),
                    1i32 as libc::c_uint,
                    2i32 as libc::c_uchar,
                  );
                  while ({
                    let mut bb__isblank: libc::c_uchar = *(*ptr_to_globals).dot as libc::c_uchar;
                    (bb__isblank as libc::c_int == ' ' as i32
                      || bb__isblank as libc::c_int == '\t' as i32)
                      as libc::c_int
                  }) != 0
                  {
                    text_hole_delete((*ptr_to_globals).dot, (*ptr_to_globals).dot, 2i32);
                  }
                }
                (*ptr_to_globals).cmdcnt -= 1;
                if !((*ptr_to_globals).cmdcnt > 0) {
                  break;
                }
              }
              end_cmd_q();
              current_block = 15129665204879337069;
            }
            3432363526595694666 => {
              dot_begin();
              dot_skip_over_ws();
              current_block = 3268579060917229304;
            }
            3494829253343353619 => {
              (*ptr_to_globals).dot = (*ptr_to_globals).screenbegin;
              if (*ptr_to_globals).cmdcnt as libc::c_uint
                > (*ptr_to_globals).rows.wrapping_sub(1i32 as libc::c_uint)
              {
                (*ptr_to_globals).cmdcnt =
                  (*ptr_to_globals).rows.wrapping_sub(1i32 as libc::c_uint) as libc::c_int
              }
              (*ptr_to_globals).cmdcnt -= 1;
              if (*ptr_to_globals).cmdcnt > 0 {
                do_cmd('+' as i32);
              }
              dot_skip_over_ws();
              current_block = 15129665204879337069;
            }
            17973101765331640574 => {
              c1 = get_one_char();
              if c1 != 'g' as i32 {
                buf[0] = 'g' as i32 as libc::c_char;
                buf[1] = if c1 >= 0 { c1 } else { '*' as i32 } as libc::c_char;
                buf[2] = '\u{0}' as i32 as libc::c_char;
                not_implemented(buf.as_mut_ptr());
                current_block = 15129665204879337069;
              } else {
                if (*ptr_to_globals).cmdcnt == 0 {
                  (*ptr_to_globals).cmdcnt = 1i32
                }
                current_block = 11945623545738147997;
              }
            }
            16546625800574160972 => {
              save_dot = (*ptr_to_globals).dot;
              (*ptr_to_globals).dot = dollar_line((*ptr_to_globals).dot);
              (*ptr_to_globals).dot = yank_delete(
                save_dot,
                (*ptr_to_globals).dot,
                0,
                YANKDEL as libc::c_int,
                1i32,
              );
              if c == 'C' as i32 {
                current_block = 8629930936610358348;
              } else {
                if c == 'D' as i32 {
                  end_cmd_q();
                }
                current_block = 15129665204879337069;
              }
            }
            11937696639986586685 => {
              cnt = count_lines((*ptr_to_globals).text, (*ptr_to_globals).dot);
              c1 = get_one_char();
              find_range(&mut p, &mut q, c1 as libc::c_char);
              yank_delete(p, q, 1i32, YANKONLY as libc::c_int, 0);
              p = begin_line(p);
              q = end_line(q);
              i = count_lines(p, q);
              while i > 0 {
                if c == '<' as i32 {
                  if *p as libc::c_int == '\t' as i32 {
                    text_hole_delete(p, p, 0);
                  } else if *p as libc::c_int == ' ' as i32 {
                    j = 0;
                    while *p as libc::c_int == ' ' as i32 && j < (*ptr_to_globals).tabstop {
                      text_hole_delete(p, p, 0);
                      j += 1
                    }
                  }
                } else if c == '>' as i32 {
                  char_insert(p, '\t' as i32 as libc::c_char, 1i32);
                }
                i -= 1;
                p = next_line(p)
              }
              (*ptr_to_globals).dot = find_line(cnt);
              dot_skip_over_ws();
              end_cmd_q();
              current_block = 15129665204879337069;
            }
            17725350714912028156 => {
              p = get_input_line(b":\x00" as *const u8 as *const libc::c_char);
              colon(p);
              current_block = 15129665204879337069;
            }
            14526470074083880812 => {
              q = char_search(
                (*ptr_to_globals).dot,
                b"\n\n\x00" as *const u8 as *const libc::c_char,
                (FORWARD as libc::c_int) << 1i32 | FULL as libc::c_int,
              );
              if !q.is_null() {
                (*ptr_to_globals).dot = next_line(q)
              }
              current_block = 15129665204879337069;
            }
            8893187391306414141 => {
              q = char_search(
                (*ptr_to_globals).dot,
                b"\n\n\x00" as *const u8 as *const libc::c_char,
                ((BACK as libc::c_int as libc::c_uint) << 1i32
                  | FULL as libc::c_int as libc::c_uint) as libc::c_int,
              );
              if !q.is_null() {
                (*ptr_to_globals).dot = next_line(q)
              }
              current_block = 15129665204879337069;
            }
            7021673758293221412 => {
              dir = BACK as libc::c_int;
              p = (*ptr_to_globals).dot.offset(-1);
              if *(*ptr_to_globals).last_search_pattern.offset(0) as libc::c_int == '?' as i32 {
                dir = FORWARD as libc::c_int;
                p = (*ptr_to_globals).dot.offset(1)
              }
              current_block = 4166979493554389389;
            }
            18374191879090272823 => {
              buf[0] = c as libc::c_char;
              buf[1] = '\u{0}' as i32 as libc::c_char;
              q = get_input_line(buf.as_mut_ptr());
              if *q.offset(0) as libc::c_int != 0 && *q.offset(1) == 0 {
                if *(*ptr_to_globals).last_search_pattern.offset(0) != 0 {
                  *(*ptr_to_globals).last_search_pattern.offset(0) = c as libc::c_char
                }
                current_block = 7392824444931029276;
              } else if *q.offset(0) != 0 {
                free((*ptr_to_globals).last_search_pattern as *mut libc::c_void);
                (*ptr_to_globals).last_search_pattern = crate::libbb::xfuncs_printf::xstrdup(q);
                current_block = 7392824444931029276;
              } else {
                current_block = 15129665204879337069;
              }
            }
            16407828456666301883 => {
              if (*ptr_to_globals).last_forward_char == 0 {
                current_block = 15129665204879337069;
              } else {
                loop {
                  q = (*ptr_to_globals).dot.offset(-1);
                  while q >= (*ptr_to_globals).text
                    && *q as libc::c_int != '\n' as i32
                    && *q as libc::c_int != (*ptr_to_globals).last_forward_char
                  {
                    q = q.offset(-1)
                  }
                  if q >= (*ptr_to_globals).text
                    && *q as libc::c_int == (*ptr_to_globals).last_forward_char
                  {
                    (*ptr_to_globals).dot = q
                  }
                  (*ptr_to_globals).cmdcnt -= 1;
                  if !((*ptr_to_globals).cmdcnt > 0) {
                    break;
                  }
                }
                current_block = 15129665204879337069;
              }
            }
            9018432604062702004 => {
              q = (*ptr_to_globals).dot;
              while q < (*ptr_to_globals).end && *q as libc::c_int != '\n' as i32 {
                if !strchr(
                  b"()[]{}\x00" as *const u8 as *const libc::c_char,
                  *q as libc::c_int,
                )
                .is_null()
                {
                  p = find_pair(q, *q);
                  if p.is_null() {
                    indicate_error();
                  } else {
                    (*ptr_to_globals).dot = p
                  }
                  break;
                } else {
                  q = q.offset(1)
                }
              }
              if *q as libc::c_int == '\n' as i32 {
                indicate_error();
              }
              current_block = 15129665204879337069;
            }
            10247103787464459848 => {
              p = (*ptr_to_globals).reg[(*ptr_to_globals).YDreg as usize];
              if p.is_null() {
                status_line_bold(
                  b"Nothing in register %c\x00" as *const u8 as *const libc::c_char,
                  what_reg() as libc::c_int,
                );
              } else {
                if !strchr(p, '\n' as i32).is_null() {
                  if c == 'P' as i32 {
                    dot_begin();
                  }
                  if c == 'p' as i32 {
                    if end_line((*ptr_to_globals).dot) == (*ptr_to_globals).end.offset(-1) {
                      (*ptr_to_globals).dot = (*ptr_to_globals).end
                    } else {
                      dot_next();
                    }
                  }
                } else if c == 'p' as i32 {
                  dot_right();
                }
                string_insert((*ptr_to_globals).dot, p, 1i32);
                end_cmd_q();
              }
              current_block = 15129665204879337069;
            }
            15260732871948875843 => {
              c1 = (get_one_char() | 0x20i32) - 'a' as i32;
              if c1 as libc::c_uint <= 25i32 as libc::c_uint {
                (*ptr_to_globals).mark[c1 as usize] = (*ptr_to_globals).dot
              } else {
                indicate_error();
              }
              current_block = 15129665204879337069;
            }
            12738322036487086035 => {
              c1 = get_one_char() | 0x20i32;
              if (c1 - 'a' as i32) as libc::c_uint <= 25i32 as libc::c_uint {
                c1 = c1 - 'a' as i32;
                q = (*ptr_to_globals).mark[c1 as usize];
                if (*ptr_to_globals).text <= q && q < (*ptr_to_globals).end {
                  (*ptr_to_globals).dot = q;
                  dot_begin();
                  dot_skip_over_ws();
                }
              } else if c1 == '\'' as i32 {
                (*ptr_to_globals).dot = swap_context((*ptr_to_globals).dot);
                dot_begin();
                dot_skip_over_ws();
              } else {
                indicate_error();
              }
              current_block = 15129665204879337069;
            }
            13255096073384561358 => {
              c1 = (get_one_char() | 0x20i32) - 'a' as i32;
              if c1 as libc::c_uint <= 25i32 as libc::c_uint {
                (*ptr_to_globals).YDreg = c1 as smalluint
              } else {
                indicate_error();
              }
              current_block = 15129665204879337069;
            }
            10258711639984089377 => {
              if (*ptr_to_globals).cmd_mode as libc::c_int == 0 {
                indicate_error();
              }
              (*ptr_to_globals).cmd_mode = 0 as smallint;
              undo_queue_commit();
              end_cmd_q();
              (*ptr_to_globals).last_status_cksum = 0;
              current_block = 15129665204879337069;
            }
            11439127087547047736 => {
              buf[0] = c as libc::c_char;
              buf[1] = '\u{0}' as i32 as libc::c_char;
              not_implemented(buf.as_mut_ptr());
              end_cmd_q();
              current_block = 17440971994642376514;
            }
            7961798899781870241 => {
              dot_scroll(
                (*ptr_to_globals).rows.wrapping_sub(2i32 as libc::c_uint) as libc::c_int,
                -1i32,
              );
              current_block = 15129665204879337069;
            }
            9426343755402444879 => {
              dot_scroll(
                (*ptr_to_globals)
                  .rows
                  .wrapping_sub(2i32 as libc::c_uint)
                  .wrapping_div(2i32 as libc::c_uint) as libc::c_int,
                1i32,
              );
              current_block = 15129665204879337069;
            }
            13352459794680105913 => {
              dot_scroll(1i32, 1i32);
              current_block = 15129665204879337069;
            }
            14142272253464333006 => {
              dot_scroll(
                (*ptr_to_globals).rows.wrapping_sub(2i32 as libc::c_uint) as libc::c_int,
                1i32,
              );
              current_block = 15129665204879337069;
            }
            10758177197742640066 => {
              (*ptr_to_globals).last_status_cksum = 0;
              current_block = 15129665204879337069;
            }
            6152256259730122749 => {
              current_block = 7534742345255184552;
            }
            12883932598258173301 => {
              current_block = 8800996768013373992;
            }
            11242998110520238401 => {
              redraw(1i32);
              current_block = 15129665204879337069;
            }
            13619733043935729992 => {
              loop {
                dot_next();
                dot_skip_over_ws();
                (*ptr_to_globals).cmdcnt -= 1;
                if !((*ptr_to_globals).cmdcnt > 0) {
                  break;
                }
              }
              current_block = 15129665204879337069;
            }
            9339065157412720613 => {
              dot_scroll(
                (*ptr_to_globals)
                  .rows
                  .wrapping_sub(2i32 as libc::c_uint)
                  .wrapping_div(2i32 as libc::c_uint) as libc::c_int,
                -1i32,
              );
              current_block = 15129665204879337069;
            }
            11447082683497798022 => {
              dot_scroll(1i32, -1i32);
              current_block = 15129665204879337069;
            }
            5182000506326660482 => {
              current_block = 13993698454868426881;
            }
            1105010766850597332 => {
              if !(*ptr_to_globals).reg[27].is_null() {
                p = begin_line((*ptr_to_globals).dot);
                q = end_line((*ptr_to_globals).dot);
                p = text_hole_delete(p, q, 1i32);
                p = p.offset(string_insert(p, (*ptr_to_globals).reg[27], 2i32) as isize);
                (*ptr_to_globals).dot = p;
                dot_skip_over_ws();
              }
              current_block = 15129665204879337069;
            }
            8616046655533110204 => {
              undo_pop();
              current_block = 15129665204879337069;
            }
            5127767458142431603 => {
              loop {
                (*ptr_to_globals).dot = end_line((*ptr_to_globals).dot);
                (*ptr_to_globals).cmdcnt -= 1;
                if (*ptr_to_globals).cmdcnt <= 0 {
                  break;
                }
                dot_next();
              }
              current_block = 15129665204879337069;
            }
            222014967776118151 => {
              (*ptr_to_globals).last_forward_char = get_one_char();
              current_block = 7856905509180742666;
            }
            11209792479411604110 => {
              loop {
                dot_prev();
                dot_skip_over_ws();
                (*ptr_to_globals).cmdcnt -= 1;
                if !((*ptr_to_globals).cmdcnt > 0) {
                  break;
                }
              }
              current_block = 15129665204879337069;
            }
            3364823792826654116 => {
              if (*ptr_to_globals).lmc_len != 0 {
                (*ptr_to_globals).ioq_start = crate::libbb::xfuncs_printf::xstrndup(
                  (*ptr_to_globals).last_modifying_cmd.as_mut_ptr(),
                  (*ptr_to_globals).lmc_len,
                );
                (*ptr_to_globals).ioq = (*ptr_to_globals).ioq_start
              }
              current_block = 15129665204879337069;
            }
            18096603330221575131 => {
              current_block = 17498168302144015873;
            }
            16891123271837848903 => {
              dot_end();
              current_block = 1752638907092016026;
            }
            8517235759107662071 => {
              current_block = 5847749760081351726;
            }
            12525254419223051704 => {
              if (*ptr_to_globals).dot < (*ptr_to_globals).end.offset(-1) {
                (*ptr_to_globals).dot = yank_delete(
                  (*ptr_to_globals).dot,
                  (*ptr_to_globals).dot,
                  1i32,
                  YANKDEL as libc::c_int,
                  1i32,
                )
              }
              current_block = 15129665204879337069;
            }
            15232911949322867522 => {
              current_block = 17251831742223396249;
            }
            10863374208794025069 => {
              current_block = 1895262434596074581;
            }
            451126677064669119 => {
              loop {
                dot_prev();
                (*ptr_to_globals).dot = move_to_col(
                  (*ptr_to_globals).dot,
                  (*ptr_to_globals).ccol + (*ptr_to_globals).offset,
                );
                (*ptr_to_globals).cmdcnt -= 1;
                if !((*ptr_to_globals).cmdcnt > 0) {
                  break;
                }
              }
              current_block = 15129665204879337069;
            }
            4611735929166613116 => {
              loop {
                if bb_ascii_isalnum(*(*ptr_to_globals).dot as libc::c_uchar) != 0
                  || *(*ptr_to_globals).dot as libc::c_int == '_' as i32
                {
                  (*ptr_to_globals).dot = skip_thing(
                    (*ptr_to_globals).dot,
                    1i32,
                    FORWARD as libc::c_int,
                    S_END_ALNUM as libc::c_int,
                  )
                } else if *strchrnul(
                  b"!\"#$%&\'()*+,-./:;<=>?@[\\]^_`{|}~\x00" as *const u8 as *const libc::c_char,
                  *(*ptr_to_globals).dot as libc::c_int,
                )
                .offset(0)
                  != 0
                {
                  (*ptr_to_globals).dot = skip_thing(
                    (*ptr_to_globals).dot,
                    1i32,
                    FORWARD as libc::c_int,
                    S_END_PUNCT as libc::c_int,
                  )
                }
                if (*ptr_to_globals).dot < (*ptr_to_globals).end.offset(-1) {
                  (*ptr_to_globals).dot = (*ptr_to_globals).dot.offset(1)
                }
                if ({
                  let mut bb__isspace: libc::c_uchar =
                    (*(*ptr_to_globals).dot as libc::c_int - 9i32) as libc::c_uchar;
                  (bb__isspace as libc::c_int == ' ' as i32 - 9i32
                    || bb__isspace as libc::c_int <= 13i32 - 9i32) as libc::c_int
                }) != 0
                {
                  (*ptr_to_globals).dot = skip_thing(
                    (*ptr_to_globals).dot,
                    2i32,
                    FORWARD as libc::c_int,
                    S_OVER_WS as libc::c_int,
                  )
                }
                (*ptr_to_globals).cmdcnt -= 1;
                if !((*ptr_to_globals).cmdcnt > 0) {
                  break;
                }
              }
              current_block = 15129665204879337069;
            }
            4386451087681909888 => {
              (*ptr_to_globals).dot =
                move_to_col((*ptr_to_globals).dot, (*ptr_to_globals).cmdcnt - 1i32);
              current_block = 15129665204879337069;
            }
            1296397779060594135 => {
              dot_begin();
              current_block = 15129665204879337069;
            }
            _ => {}
          }
          match current_block {
            15129665204879337069 => {}
            8629930936610358348 => {}
            _ => {
              match current_block {
                17251831742223396249 => {
                  dir = 0;
                  if c == 'X' as i32 {
                    dir = -1i32
                  }
                  loop {
                    if *(*ptr_to_globals).dot.offset(dir as isize) as libc::c_int != '\n' as i32 {
                      if c == 'X' as i32 {
                        (*ptr_to_globals).dot = (*ptr_to_globals).dot.offset(-1)
                      }
                      (*ptr_to_globals).dot = yank_delete(
                        (*ptr_to_globals).dot,
                        (*ptr_to_globals).dot,
                        0,
                        YANKDEL as libc::c_int,
                        1i32,
                      )
                    }
                    (*ptr_to_globals).cmdcnt -= 1;
                    if !((*ptr_to_globals).cmdcnt > 0) {
                      break;
                    }
                  }
                  end_cmd_q();
                  if c == 's' as i32 {
                    current_block = 8629930936610358348;
                  } else {
                    current_block = 15129665204879337069;
                  }
                }
                2087484904894455135 => {
                  dot_end();
                  (*ptr_to_globals).dot =
                    char_insert((*ptr_to_globals).dot, '\n' as i32 as libc::c_char, 1i32);
                  current_block = 8629930936610358348;
                }
                11945623545738147997 => {
                  (*ptr_to_globals).dot = (*ptr_to_globals).end.offset(-1);
                  if (*ptr_to_globals).cmdcnt > 0 {
                    (*ptr_to_globals).dot = find_line((*ptr_to_globals).cmdcnt)
                  }
                  dot_skip_over_ws();
                  current_block = 15129665204879337069;
                }
                5847749760081351726 => {
                  dir = FORWARD as libc::c_int;
                  if c == 'B' as i32 {
                    dir = BACK as libc::c_int
                  }
                  loop {
                    if c == 'W' as i32
                      || ({
                        let mut bb__isspace: libc::c_uchar =
                          (*(*ptr_to_globals).dot.offset(dir as isize) as libc::c_int - 9i32)
                            as libc::c_uchar;
                        (bb__isspace as libc::c_int == ' ' as i32 - 9i32
                          || bb__isspace as libc::c_int <= 13i32 - 9i32)
                          as libc::c_int
                      }) != 0
                    {
                      (*ptr_to_globals).dot =
                        skip_thing((*ptr_to_globals).dot, 1i32, dir, S_TO_WS as libc::c_int);
                      (*ptr_to_globals).dot =
                        skip_thing((*ptr_to_globals).dot, 2i32, dir, S_OVER_WS as libc::c_int)
                    }
                    if c != 'W' as i32 {
                      (*ptr_to_globals).dot =
                        skip_thing((*ptr_to_globals).dot, 1i32, dir, S_BEFORE_WS as libc::c_int)
                    }
                    (*ptr_to_globals).cmdcnt -= 1;
                    if !((*ptr_to_globals).cmdcnt > 0) {
                      break;
                    }
                  }
                  current_block = 15129665204879337069;
                }
                17440971994642376514 => {
                  current_block = 15129665204879337069;
                }
                7534742345255184552 => {
                  current_block = 17247297260531395789;
                }
                8800996768013373992 => {
                  loop {
                    dot_next();
                    (*ptr_to_globals).dot = move_to_col(
                      (*ptr_to_globals).dot,
                      (*ptr_to_globals).ccol + (*ptr_to_globals).offset,
                    );
                    (*ptr_to_globals).cmdcnt -= 1;
                    if !((*ptr_to_globals).cmdcnt > 0) {
                      break;
                    }
                  }
                  current_block = 15129665204879337069;
                }
                13993698454868426881 => {
                  loop {
                    dot_right();
                    (*ptr_to_globals).cmdcnt -= 1;
                    if !((*ptr_to_globals).cmdcnt > 0) {
                      break;
                    }
                  }
                  current_block = 15129665204879337069;
                }
                7856905509180742666 => {
                  while !((*ptr_to_globals).last_forward_char == 0) {
                    q = (*ptr_to_globals).dot.offset(1);
                    while q < (*ptr_to_globals).end.offset(-1)
                      && *q as libc::c_int != '\n' as i32
                      && *q as libc::c_int != (*ptr_to_globals).last_forward_char
                    {
                      q = q.offset(1)
                    }
                    if *q as libc::c_int == (*ptr_to_globals).last_forward_char {
                      (*ptr_to_globals).dot = q
                    }
                    (*ptr_to_globals).cmdcnt -= 1;
                    if !((*ptr_to_globals).cmdcnt > 0) {
                      break;
                    }
                  }
                  current_block = 15129665204879337069;
                }
                17498168302144015873 => {
                  current_block = 8681395796513813967;
                }
                1752638907092016026 => {
                  if *(*ptr_to_globals).dot as libc::c_int != '\n' as i32 {
                    (*ptr_to_globals).dot = (*ptr_to_globals).dot.offset(1)
                  }
                  current_block = 8629930936610358348;
                }
                3268579060917229304 => {
                  current_block = 8629930936610358348;
                }
                1895262434596074581 => {
                  current_block = 8908416993177701018;
                }
                _ => {}
              }
              match current_block {
                8629930936610358348 => {}
                15129665204879337069 => {}
                _ => {
                  match current_block {
                    17247297260531395789 => {
                      loop {
                        dot_left();
                        (*ptr_to_globals).cmdcnt -= 1;
                        if !((*ptr_to_globals).cmdcnt > 0) {
                          break;
                        }
                      }
                      current_block = 15129665204879337069;
                    }
                    8681395796513813967 => {
                      current_block = 5591548203144509315;
                    }
                    8908416993177701018 => {
                      current_block = 16124761010012532485;
                    }
                    _ => {}
                  }
                  match current_block {
                    15129665204879337069 => {}
                    _ => {
                      match current_block {
                        16124761010012532485 => {
                          let mut yf: libc::c_int = 0;
                          let mut ml: libc::c_int = 0;
                          let mut whole: libc::c_int = 0;
                          yf = YANKDEL as libc::c_int;
                          if c == 'y' as i32 || c == 'Y' as i32 {
                            yf = YANKONLY as libc::c_int
                          }
                          c1 = 'y' as i32;
                          if c != 'Y' as i32 {
                            c1 = get_one_char()
                          }
                          ml = find_range(&mut p, &mut q, c1 as libc::c_char);
                          place_cursor(0i32, 0);
                          if c1 == 27i32 {
                            c1 = 27i32;
                            c = c1
                          } else if !strchr(b"wW\x00" as *const u8 as *const libc::c_char, c1)
                            .is_null()
                          {
                            ml = 0;
                            if c == 'c' as i32 {
                              while ({
                                let mut bb__isspace: libc::c_uchar =
                                  (*q as libc::c_int - 9i32) as libc::c_uchar;
                                (bb__isspace as libc::c_int == ' ' as i32 - 9i32
                                  || bb__isspace as libc::c_int <= 13i32 - 9i32)
                                  as libc::c_int
                              }) != 0
                                && q > p
                              {
                                q = q.offset(-1)
                              }
                            }
                            (*ptr_to_globals).dot = yank_delete(p, q, ml, yf, 1i32)
                          } else if !strchr(
                            b"^0bBeEft%$ lh\x08\x7f\x00" as *const u8 as *const libc::c_char,
                            c1,
                          )
                          .is_null()
                          {
                            (*ptr_to_globals).dot = yank_delete(p, q, ml, yf, 1i32)
                          } else if !strchr(
                            b"cdykjGHL+-{}\r\n\x00" as *const u8 as *const libc::c_char,
                            c1,
                          )
                          .is_null()
                          {
                            (*ptr_to_globals).dot = yank_delete(p, q, ml, yf, 1i32);
                            whole = 1i32
                          } else {
                            c1 = 27i32;
                            c = c1;
                            ml = 0;
                            indicate_error();
                          }
                          if ml != 0 && whole != 0 {
                            if c == 'c' as i32 {
                              (*ptr_to_globals).dot = char_insert(
                                (*ptr_to_globals).dot,
                                '\n' as i32 as libc::c_char,
                                2i32,
                              );
                              if whole != 0
                                && (*ptr_to_globals).dot != (*ptr_to_globals).end.offset(-1)
                              {
                                dot_prev();
                              }
                            } else if c == 'd' as i32 {
                              dot_begin();
                              dot_skip_over_ws();
                            }
                          }
                          if c1 != 27i32 {
                            if c == 'c' as i32 {
                              strcpy(
                                buf.as_mut_ptr(),
                                b"Change\x00" as *const u8 as *const libc::c_char,
                              );
                              current_block = 8629930936610358348;
                            } else {
                              if c == 'd' as i32 {
                                strcpy(
                                  buf.as_mut_ptr(),
                                  b"Delete\x00" as *const u8 as *const libc::c_char,
                                );
                              }
                              if c == 'y' as i32 || c == 'Y' as i32 {
                                strcpy(
                                  buf.as_mut_ptr(),
                                  b"Yank\x00" as *const u8 as *const libc::c_char,
                                );
                              }
                              p = (*ptr_to_globals).reg[(*ptr_to_globals).YDreg as usize];
                              q = p.offset(strlen(p) as isize);
                              cnt = 0;
                              while p <= q {
                                if *p as libc::c_int == '\n' as i32 {
                                  cnt += 1
                                }
                                p = p.offset(1)
                              }
                              status_line(
                                b"%s %u lines (%u chars) using [%c]\x00" as *const u8
                                  as *const libc::c_char,
                                buf.as_mut_ptr(),
                                cnt,
                                strlen((*ptr_to_globals).reg[(*ptr_to_globals).YDreg as usize])
                                  as libc::c_uint,
                                what_reg() as libc::c_int,
                              );
                              end_cmd_q();
                              current_block = 15129665204879337069;
                            }
                          } else {
                            current_block = 15129665204879337069;
                          }
                        }
                        5591548203144509315 => {
                          current_block = 2636677179867529885;
                        }
                        _ => {}
                      }
                      match current_block {
                        15129665204879337069 => {}
                        8629930936610358348 => {}
                        _ => {
                          match current_block {
                            2636677179867529885 => {
                              current_block = 12309206730560524281;
                            }
                            _ => {}
                          }
                          match current_block {
                            12309206730560524281 => {
                              current_block = 3325768110057758661;
                            }
                            _ => {}
                          }
                          match current_block {
                            3325768110057758661 => {
                              current_block = 14815832896553429982;
                            }
                            _ => {}
                          }
                          match current_block {
                            14815832896553429982 => {
                              current_block = 10731695520297161438;
                            }
                            _ => {}
                          }
                          match current_block {
                            10731695520297161438 => {
                              if c == '0' as i32 && (*ptr_to_globals).cmdcnt < 1i32 {
                                dot_begin();
                              } else {
                                (*ptr_to_globals).cmdcnt =
                                  (*ptr_to_globals).cmdcnt * 10i32 + (c - '0' as i32)
                              }
                              current_block = 15129665204879337069;
                            }
                            _ => {}
                          }
                          match current_block {
                            15129665204879337069 => {}
                            _ => {
                              loop {
                                match current_block {
                                  16813369756331276724 => {
                                    msg = std::ptr::null();
                                    current_block = 7392824444931029276;
                                  }
                                  7392824444931029276 => {
                                    dir = FORWARD as libc::c_int;
                                    p = (*ptr_to_globals).dot.offset(1);
                                    if *(*ptr_to_globals).last_search_pattern.offset(0)
                                      as libc::c_int
                                      == '?' as i32
                                    {
                                      dir = BACK as libc::c_int;
                                      p = (*ptr_to_globals).dot.offset(-1)
                                    }
                                    current_block = 4166979493554389389;
                                  }
                                  _ => {
                                    q = char_search(
                                      p,
                                      (*ptr_to_globals).last_search_pattern.offset(1),
                                      dir << 1i32 | FULL as libc::c_int,
                                    );
                                    if !q.is_null() {
                                      (*ptr_to_globals).dot = q;
                                      msg = std::ptr::null()
                                    } else {
                                      p = (*ptr_to_globals).text;
                                      if dir == BACK as libc::c_int {
                                        p = (*ptr_to_globals).end.offset(-1)
                                      }
                                      q = char_search(
                                        p,
                                        (*ptr_to_globals).last_search_pattern.offset(1),
                                        dir << 1i32 | FULL as libc::c_int,
                                      );
                                      if !q.is_null() {
                                        (*ptr_to_globals).dot = q;
                                        msg = b"search hit BOTTOM, continuing at TOP\x00"
                                          as *const u8
                                          as *const libc::c_char;
                                        if dir == BACK as libc::c_int {
                                          msg = b"search hit TOP, continuing at BOTTOM\x00"
                                            as *const u8
                                            as *const libc::c_char
                                        }
                                      } else {
                                        msg = b"Pattern not found\x00" as *const u8
                                          as *const libc::c_char
                                      }
                                    }
                                    if !msg.is_null() {
                                      status_line_bold(
                                        b"%s\x00" as *const u8 as *const libc::c_char,
                                        msg,
                                      );
                                    }
                                    (*ptr_to_globals).cmdcnt -= 1;
                                    if (*ptr_to_globals).cmdcnt > 0 {
                                      current_block = 16813369756331276724;
                                    } else {
                                      break;
                                    }
                                  }
                                }
                              }
                              current_block = 15129665204879337069;
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
        36 | -7 => {
          current_block = 5127767458142431603;
          match current_block {
            16992905640583886232 => {
              loop {
                if (*(*ptr_to_globals).dot as libc::c_int - 'a' as i32) as libc::c_uchar
                  as libc::c_int
                  <= 'z' as i32 - 'a' as i32
                {
                  undo_push(
                    (*ptr_to_globals).dot,
                    1i32 as libc::c_uint,
                    1i32 as libc::c_uchar,
                  );
                  *(*ptr_to_globals).dot =
                    bb_ascii_toupper(*(*ptr_to_globals).dot as libc::c_uchar) as libc::c_char;
                  undo_push(
                    (*ptr_to_globals).dot,
                    1i32 as libc::c_uint,
                    2i32 as libc::c_uchar,
                  );
                } else if (*(*ptr_to_globals).dot as libc::c_int - 'A' as i32) as libc::c_uchar
                  as libc::c_int
                  <= 'Z' as i32 - 'A' as i32
                {
                  undo_push(
                    (*ptr_to_globals).dot,
                    1i32 as libc::c_uint,
                    1i32 as libc::c_uchar,
                  );
                  *(*ptr_to_globals).dot =
                    bb_ascii_tolower(*(*ptr_to_globals).dot as libc::c_uchar) as libc::c_char;
                  undo_push(
                    (*ptr_to_globals).dot,
                    1i32 as libc::c_uint,
                    2i32 as libc::c_uchar,
                  );
                }
                dot_right();
                (*ptr_to_globals).cmdcnt -= 1;
                if !((*ptr_to_globals).cmdcnt > 0) {
                  break;
                }
              }
              end_cmd_q();
              current_block = 15129665204879337069;
            }
            8729655159604064397 => {
              c1 = get_one_char();
              cnt = 0;
              if c1 == '.' as i32 {
                cnt = (*ptr_to_globals)
                  .rows
                  .wrapping_sub(2i32 as libc::c_uint)
                  .wrapping_div(2i32 as libc::c_uint) as libc::c_int
              }
              if c1 == '-' as i32 {
                cnt = (*ptr_to_globals).rows.wrapping_sub(2i32 as libc::c_uint) as libc::c_int
              }
              (*ptr_to_globals).screenbegin = begin_line((*ptr_to_globals).dot);
              dot_scroll(cnt, -1i32);
              current_block = 15129665204879337069;
            }
            15899500648299942075 => {
              (*ptr_to_globals).last_forward_char = get_one_char();
              do_cmd(';' as i32);
              if *(*ptr_to_globals).dot as libc::c_int == (*ptr_to_globals).last_forward_char {
                dot_left();
              }
              (*ptr_to_globals).last_forward_char = 0;
              current_block = 15129665204879337069;
            }
            9051390181078481641 => {
              c1 = get_one_char();
              if *(*ptr_to_globals).dot as libc::c_int != '\n' as i32 {
                (*ptr_to_globals).dot =
                  text_hole_delete((*ptr_to_globals).dot, (*ptr_to_globals).dot, 1i32);
                (*ptr_to_globals).dot =
                  char_insert((*ptr_to_globals).dot, c1 as libc::c_char, 2i32);
                dot_left();
              }
              end_cmd_q();
              current_block = 15129665204879337069;
            }
            877115918601926659 => {
              dir = FORWARD as libc::c_int;
              if c == 'b' as i32 {
                dir = BACK as libc::c_int
              }
              while !((*ptr_to_globals).dot.offset(dir as isize) < (*ptr_to_globals).text
                || (*ptr_to_globals).dot.offset(dir as isize) > (*ptr_to_globals).end.offset(-1))
              {
                (*ptr_to_globals).dot = (*ptr_to_globals).dot.offset(dir as isize);
                if ({
                  let mut bb__isspace: libc::c_uchar =
                    (*(*ptr_to_globals).dot as libc::c_int - 9i32) as libc::c_uchar;
                  (bb__isspace as libc::c_int == ' ' as i32 - 9i32
                    || bb__isspace as libc::c_int <= 13i32 - 9i32) as libc::c_int
                }) != 0
                {
                  (*ptr_to_globals).dot = skip_thing(
                    (*ptr_to_globals).dot,
                    if c == 'e' as i32 { 2i32 } else { 1i32 },
                    dir,
                    S_OVER_WS as libc::c_int,
                  )
                }
                if bb_ascii_isalnum(*(*ptr_to_globals).dot as libc::c_uchar) != 0
                  || *(*ptr_to_globals).dot as libc::c_int == '_' as i32
                {
                  (*ptr_to_globals).dot =
                    skip_thing((*ptr_to_globals).dot, 1i32, dir, S_END_ALNUM as libc::c_int)
                } else if *strchrnul(
                  b"!\"#$%&\'()*+,-./:;<=>?@[\\]^_`{|}~\x00" as *const u8 as *const libc::c_char,
                  *(*ptr_to_globals).dot as libc::c_int,
                )
                .offset(0)
                  != 0
                {
                  (*ptr_to_globals).dot =
                    skip_thing((*ptr_to_globals).dot, 1i32, dir, S_END_PUNCT as libc::c_int)
                }
                (*ptr_to_globals).cmdcnt -= 1;
                if !((*ptr_to_globals).cmdcnt > 0) {
                  break;
                }
              }
              current_block = 15129665204879337069;
            }
            1085022737867179637 => {
              dot_begin();
              dot_skip_over_ws();
              current_block = 15129665204879337069;
            }
            3113147720494587438 => {
              c1 = get_one_char();
              if c1 != 'Z' as i32 {
                indicate_error();
              } else if (*ptr_to_globals).modified_count != 0 {
                if 1i32 != 0 && (*ptr_to_globals).readonly_mode as libc::c_int != 0 {
                  status_line_bold(
                    b"\'%s\' is read only\x00" as *const u8 as *const libc::c_char,
                    (*ptr_to_globals).current_filename,
                  );
                } else {
                  cnt = file_write(
                    (*ptr_to_globals).current_filename,
                    (*ptr_to_globals).text,
                    (*ptr_to_globals).end.offset(-1),
                  );
                  if cnt < 0 {
                    if cnt == -1i32 {
                      status_line_bold(b"Write error: %m\x00" as *const u8 as *const libc::c_char);
                    }
                  } else if cnt as libc::c_long
                    == (*ptr_to_globals)
                      .end
                      .offset(-1)
                      .wrapping_offset_from((*ptr_to_globals).text)
                      as libc::c_long
                      + 1
                  {
                    (*ptr_to_globals).editing = 0 as smallint
                  }
                }
              } else {
                (*ptr_to_globals).editing = 0 as smallint
              }
              current_block = 15129665204879337069;
            }
            12960118908218882441 => {
              p = begin_line((*ptr_to_globals).dot);
              if *p.offset(-1i32 as isize) as libc::c_int == '\n' as i32 {
                dot_prev();
                current_block = 2087484904894455135;
              } else {
                dot_begin();
                (*ptr_to_globals).dot =
                  char_insert((*ptr_to_globals).dot, '\n' as i32 as libc::c_char, 1i32);
                dot_prev();
                current_block = 8629930936610358348;
              }
            }
            8720450212473544924 => {
              (*ptr_to_globals).dot = (*ptr_to_globals).screenbegin;
              cnt = 0;
              while (cnt as libc::c_uint)
                < (*ptr_to_globals)
                  .rows
                  .wrapping_sub(1i32 as libc::c_uint)
                  .wrapping_div(2i32 as libc::c_uint)
              {
                (*ptr_to_globals).dot = next_line((*ptr_to_globals).dot);
                cnt += 1
              }
              current_block = 15129665204879337069;
            }
            13015277209715431090 => {
              (*ptr_to_globals).dot = end_screen();
              if (*ptr_to_globals).cmdcnt as libc::c_uint
                > (*ptr_to_globals).rows.wrapping_sub(1i32 as libc::c_uint)
              {
                (*ptr_to_globals).cmdcnt =
                  (*ptr_to_globals).rows.wrapping_sub(1i32 as libc::c_uint) as libc::c_int
              }
              (*ptr_to_globals).cmdcnt -= 1;
              if (*ptr_to_globals).cmdcnt > 0 {
                do_cmd('-' as i32);
              }
              dot_begin();
              dot_skip_over_ws();
              current_block = 15129665204879337069;
            }
            9800435767766781385 => {
              loop {
                dot_end();
                if (*ptr_to_globals).dot < (*ptr_to_globals).end.offset(-1) {
                  undo_push(
                    (*ptr_to_globals).dot,
                    1i32 as libc::c_uint,
                    1i32 as libc::c_uchar,
                  );
                  let fresh15 = (*ptr_to_globals).dot;
                  (*ptr_to_globals).dot = (*ptr_to_globals).dot.offset(1);
                  *fresh15 = ' ' as i32 as libc::c_char;
                  undo_push(
                    (*ptr_to_globals).dot.offset(-1),
                    1i32 as libc::c_uint,
                    2i32 as libc::c_uchar,
                  );
                  while ({
                    let mut bb__isblank: libc::c_uchar = *(*ptr_to_globals).dot as libc::c_uchar;
                    (bb__isblank as libc::c_int == ' ' as i32
                      || bb__isblank as libc::c_int == '\t' as i32)
                      as libc::c_int
                  }) != 0
                  {
                    text_hole_delete((*ptr_to_globals).dot, (*ptr_to_globals).dot, 2i32);
                  }
                }
                (*ptr_to_globals).cmdcnt -= 1;
                if !((*ptr_to_globals).cmdcnt > 0) {
                  break;
                }
              }
              end_cmd_q();
              current_block = 15129665204879337069;
            }
            3432363526595694666 => {
              dot_begin();
              dot_skip_over_ws();
              current_block = 3268579060917229304;
            }
            3494829253343353619 => {
              (*ptr_to_globals).dot = (*ptr_to_globals).screenbegin;
              if (*ptr_to_globals).cmdcnt as libc::c_uint
                > (*ptr_to_globals).rows.wrapping_sub(1i32 as libc::c_uint)
              {
                (*ptr_to_globals).cmdcnt =
                  (*ptr_to_globals).rows.wrapping_sub(1i32 as libc::c_uint) as libc::c_int
              }
              (*ptr_to_globals).cmdcnt -= 1;
              if (*ptr_to_globals).cmdcnt > 0 {
                do_cmd('+' as i32);
              }
              dot_skip_over_ws();
              current_block = 15129665204879337069;
            }
            17973101765331640574 => {
              c1 = get_one_char();
              if c1 != 'g' as i32 {
                buf[0] = 'g' as i32 as libc::c_char;
                buf[1] = if c1 >= 0 { c1 } else { '*' as i32 } as libc::c_char;
                buf[2] = '\u{0}' as i32 as libc::c_char;
                not_implemented(buf.as_mut_ptr());
                current_block = 15129665204879337069;
              } else {
                if (*ptr_to_globals).cmdcnt == 0 {
                  (*ptr_to_globals).cmdcnt = 1i32
                }
                current_block = 11945623545738147997;
              }
            }
            16546625800574160972 => {
              save_dot = (*ptr_to_globals).dot;
              (*ptr_to_globals).dot = dollar_line((*ptr_to_globals).dot);
              (*ptr_to_globals).dot = yank_delete(
                save_dot,
                (*ptr_to_globals).dot,
                0,
                YANKDEL as libc::c_int,
                1i32,
              );
              if c == 'C' as i32 {
                current_block = 8629930936610358348;
              } else {
                if c == 'D' as i32 {
                  end_cmd_q();
                }
                current_block = 15129665204879337069;
              }
            }
            11937696639986586685 => {
              cnt = count_lines((*ptr_to_globals).text, (*ptr_to_globals).dot);
              c1 = get_one_char();
              find_range(&mut p, &mut q, c1 as libc::c_char);
              yank_delete(p, q, 1i32, YANKONLY as libc::c_int, 0);
              p = begin_line(p);
              q = end_line(q);
              i = count_lines(p, q);
              while i > 0 {
                if c == '<' as i32 {
                  if *p as libc::c_int == '\t' as i32 {
                    text_hole_delete(p, p, 0);
                  } else if *p as libc::c_int == ' ' as i32 {
                    j = 0;
                    while *p as libc::c_int == ' ' as i32 && j < (*ptr_to_globals).tabstop {
                      text_hole_delete(p, p, 0);
                      j += 1
                    }
                  }
                } else if c == '>' as i32 {
                  char_insert(p, '\t' as i32 as libc::c_char, 1i32);
                }
                i -= 1;
                p = next_line(p)
              }
              (*ptr_to_globals).dot = find_line(cnt);
              dot_skip_over_ws();
              end_cmd_q();
              current_block = 15129665204879337069;
            }
            17725350714912028156 => {
              p = get_input_line(b":\x00" as *const u8 as *const libc::c_char);
              colon(p);
              current_block = 15129665204879337069;
            }
            14526470074083880812 => {
              q = char_search(
                (*ptr_to_globals).dot,
                b"\n\n\x00" as *const u8 as *const libc::c_char,
                (FORWARD as libc::c_int) << 1i32 | FULL as libc::c_int,
              );
              if !q.is_null() {
                (*ptr_to_globals).dot = next_line(q)
              }
              current_block = 15129665204879337069;
            }
            8893187391306414141 => {
              q = char_search(
                (*ptr_to_globals).dot,
                b"\n\n\x00" as *const u8 as *const libc::c_char,
                ((BACK as libc::c_int as libc::c_uint) << 1i32
                  | FULL as libc::c_int as libc::c_uint) as libc::c_int,
              );
              if !q.is_null() {
                (*ptr_to_globals).dot = next_line(q)
              }
              current_block = 15129665204879337069;
            }
            7021673758293221412 => {
              dir = BACK as libc::c_int;
              p = (*ptr_to_globals).dot.offset(-1);
              if *(*ptr_to_globals).last_search_pattern.offset(0) as libc::c_int == '?' as i32 {
                dir = FORWARD as libc::c_int;
                p = (*ptr_to_globals).dot.offset(1)
              }
              current_block = 4166979493554389389;
            }
            18374191879090272823 => {
              buf[0] = c as libc::c_char;
              buf[1] = '\u{0}' as i32 as libc::c_char;
              q = get_input_line(buf.as_mut_ptr());
              if *q.offset(0) as libc::c_int != 0 && *q.offset(1) == 0 {
                if *(*ptr_to_globals).last_search_pattern.offset(0) != 0 {
                  *(*ptr_to_globals).last_search_pattern.offset(0) = c as libc::c_char
                }
                current_block = 7392824444931029276;
              } else if *q.offset(0) != 0 {
                free((*ptr_to_globals).last_search_pattern as *mut libc::c_void);
                (*ptr_to_globals).last_search_pattern = crate::libbb::xfuncs_printf::xstrdup(q);
                current_block = 7392824444931029276;
              } else {
                current_block = 15129665204879337069;
              }
            }
            16407828456666301883 => {
              if (*ptr_to_globals).last_forward_char == 0 {
                current_block = 15129665204879337069;
              } else {
                loop {
                  q = (*ptr_to_globals).dot.offset(-1);
                  while q >= (*ptr_to_globals).text
                    && *q as libc::c_int != '\n' as i32
                    && *q as libc::c_int != (*ptr_to_globals).last_forward_char
                  {
                    q = q.offset(-1)
                  }
                  if q >= (*ptr_to_globals).text
                    && *q as libc::c_int == (*ptr_to_globals).last_forward_char
                  {
                    (*ptr_to_globals).dot = q
                  }
                  (*ptr_to_globals).cmdcnt -= 1;
                  if !((*ptr_to_globals).cmdcnt > 0) {
                    break;
                  }
                }
                current_block = 15129665204879337069;
              }
            }
            9018432604062702004 => {
              q = (*ptr_to_globals).dot;
              while q < (*ptr_to_globals).end && *q as libc::c_int != '\n' as i32 {
                if !strchr(
                  b"()[]{}\x00" as *const u8 as *const libc::c_char,
                  *q as libc::c_int,
                )
                .is_null()
                {
                  p = find_pair(q, *q);
                  if p.is_null() {
                    indicate_error();
                  } else {
                    (*ptr_to_globals).dot = p
                  }
                  break;
                } else {
                  q = q.offset(1)
                }
              }
              if *q as libc::c_int == '\n' as i32 {
                indicate_error();
              }
              current_block = 15129665204879337069;
            }
            10247103787464459848 => {
              p = (*ptr_to_globals).reg[(*ptr_to_globals).YDreg as usize];
              if p.is_null() {
                status_line_bold(
                  b"Nothing in register %c\x00" as *const u8 as *const libc::c_char,
                  what_reg() as libc::c_int,
                );
              } else {
                if !strchr(p, '\n' as i32).is_null() {
                  if c == 'P' as i32 {
                    dot_begin();
                  }
                  if c == 'p' as i32 {
                    if end_line((*ptr_to_globals).dot) == (*ptr_to_globals).end.offset(-1) {
                      (*ptr_to_globals).dot = (*ptr_to_globals).end
                    } else {
                      dot_next();
                    }
                  }
                } else if c == 'p' as i32 {
                  dot_right();
                }
                string_insert((*ptr_to_globals).dot, p, 1i32);
                end_cmd_q();
              }
              current_block = 15129665204879337069;
            }
            15260732871948875843 => {
              c1 = (get_one_char() | 0x20i32) - 'a' as i32;
              if c1 as libc::c_uint <= 25i32 as libc::c_uint {
                (*ptr_to_globals).mark[c1 as usize] = (*ptr_to_globals).dot
              } else {
                indicate_error();
              }
              current_block = 15129665204879337069;
            }
            12738322036487086035 => {
              c1 = get_one_char() | 0x20i32;
              if (c1 - 'a' as i32) as libc::c_uint <= 25i32 as libc::c_uint {
                c1 = c1 - 'a' as i32;
                q = (*ptr_to_globals).mark[c1 as usize];
                if (*ptr_to_globals).text <= q && q < (*ptr_to_globals).end {
                  (*ptr_to_globals).dot = q;
                  dot_begin();
                  dot_skip_over_ws();
                }
              } else if c1 == '\'' as i32 {
                (*ptr_to_globals).dot = swap_context((*ptr_to_globals).dot);
                dot_begin();
                dot_skip_over_ws();
              } else {
                indicate_error();
              }
              current_block = 15129665204879337069;
            }
            13255096073384561358 => {
              c1 = (get_one_char() | 0x20i32) - 'a' as i32;
              if c1 as libc::c_uint <= 25i32 as libc::c_uint {
                (*ptr_to_globals).YDreg = c1 as smalluint
              } else {
                indicate_error();
              }
              current_block = 15129665204879337069;
            }
            10258711639984089377 => {
              if (*ptr_to_globals).cmd_mode as libc::c_int == 0 {
                indicate_error();
              }
              (*ptr_to_globals).cmd_mode = 0 as smallint;
              undo_queue_commit();
              end_cmd_q();
              (*ptr_to_globals).last_status_cksum = 0;
              current_block = 15129665204879337069;
            }
            11439127087547047736 => {
              buf[0] = c as libc::c_char;
              buf[1] = '\u{0}' as i32 as libc::c_char;
              not_implemented(buf.as_mut_ptr());
              end_cmd_q();
              current_block = 17440971994642376514;
            }
            7961798899781870241 => {
              dot_scroll(
                (*ptr_to_globals).rows.wrapping_sub(2i32 as libc::c_uint) as libc::c_int,
                -1i32,
              );
              current_block = 15129665204879337069;
            }
            9426343755402444879 => {
              dot_scroll(
                (*ptr_to_globals)
                  .rows
                  .wrapping_sub(2i32 as libc::c_uint)
                  .wrapping_div(2i32 as libc::c_uint) as libc::c_int,
                1i32,
              );
              current_block = 15129665204879337069;
            }
            13352459794680105913 => {
              dot_scroll(1i32, 1i32);
              current_block = 15129665204879337069;
            }
            14142272253464333006 => {
              dot_scroll(
                (*ptr_to_globals).rows.wrapping_sub(2i32 as libc::c_uint) as libc::c_int,
                1i32,
              );
              current_block = 15129665204879337069;
            }
            10758177197742640066 => {
              (*ptr_to_globals).last_status_cksum = 0;
              current_block = 15129665204879337069;
            }
            6152256259730122749 => {
              current_block = 7534742345255184552;
            }
            12883932598258173301 => {
              current_block = 8800996768013373992;
            }
            11242998110520238401 => {
              redraw(1i32);
              current_block = 15129665204879337069;
            }
            13619733043935729992 => {
              loop {
                dot_next();
                dot_skip_over_ws();
                (*ptr_to_globals).cmdcnt -= 1;
                if !((*ptr_to_globals).cmdcnt > 0) {
                  break;
                }
              }
              current_block = 15129665204879337069;
            }
            9339065157412720613 => {
              dot_scroll(
                (*ptr_to_globals)
                  .rows
                  .wrapping_sub(2i32 as libc::c_uint)
                  .wrapping_div(2i32 as libc::c_uint) as libc::c_int,
                -1i32,
              );
              current_block = 15129665204879337069;
            }
            11447082683497798022 => {
              dot_scroll(1i32, -1i32);
              current_block = 15129665204879337069;
            }
            5182000506326660482 => {
              current_block = 13993698454868426881;
            }
            1105010766850597332 => {
              if !(*ptr_to_globals).reg[27].is_null() {
                p = begin_line((*ptr_to_globals).dot);
                q = end_line((*ptr_to_globals).dot);
                p = text_hole_delete(p, q, 1i32);
                p = p.offset(string_insert(p, (*ptr_to_globals).reg[27], 2i32) as isize);
                (*ptr_to_globals).dot = p;
                dot_skip_over_ws();
              }
              current_block = 15129665204879337069;
            }
            8616046655533110204 => {
              undo_pop();
              current_block = 15129665204879337069;
            }
            5127767458142431603 => {
              loop {
                (*ptr_to_globals).dot = end_line((*ptr_to_globals).dot);
                (*ptr_to_globals).cmdcnt -= 1;
                if (*ptr_to_globals).cmdcnt <= 0 {
                  break;
                }
                dot_next();
              }
              current_block = 15129665204879337069;
            }
            222014967776118151 => {
              (*ptr_to_globals).last_forward_char = get_one_char();
              current_block = 7856905509180742666;
            }
            11209792479411604110 => {
              loop {
                dot_prev();
                dot_skip_over_ws();
                (*ptr_to_globals).cmdcnt -= 1;
                if !((*ptr_to_globals).cmdcnt > 0) {
                  break;
                }
              }
              current_block = 15129665204879337069;
            }
            3364823792826654116 => {
              if (*ptr_to_globals).lmc_len != 0 {
                (*ptr_to_globals).ioq_start = crate::libbb::xfuncs_printf::xstrndup(
                  (*ptr_to_globals).last_modifying_cmd.as_mut_ptr(),
                  (*ptr_to_globals).lmc_len,
                );
                (*ptr_to_globals).ioq = (*ptr_to_globals).ioq_start
              }
              current_block = 15129665204879337069;
            }
            18096603330221575131 => {
              current_block = 17498168302144015873;
            }
            16891123271837848903 => {
              dot_end();
              current_block = 1752638907092016026;
            }
            8517235759107662071 => {
              current_block = 5847749760081351726;
            }
            12525254419223051704 => {
              if (*ptr_to_globals).dot < (*ptr_to_globals).end.offset(-1) {
                (*ptr_to_globals).dot = yank_delete(
                  (*ptr_to_globals).dot,
                  (*ptr_to_globals).dot,
                  1i32,
                  YANKDEL as libc::c_int,
                  1i32,
                )
              }
              current_block = 15129665204879337069;
            }
            15232911949322867522 => {
              current_block = 17251831742223396249;
            }
            10863374208794025069 => {
              current_block = 1895262434596074581;
            }
            451126677064669119 => {
              loop {
                dot_prev();
                (*ptr_to_globals).dot = move_to_col(
                  (*ptr_to_globals).dot,
                  (*ptr_to_globals).ccol + (*ptr_to_globals).offset,
                );
                (*ptr_to_globals).cmdcnt -= 1;
                if !((*ptr_to_globals).cmdcnt > 0) {
                  break;
                }
              }
              current_block = 15129665204879337069;
            }
            4611735929166613116 => {
              loop {
                if bb_ascii_isalnum(*(*ptr_to_globals).dot as libc::c_uchar) != 0
                  || *(*ptr_to_globals).dot as libc::c_int == '_' as i32
                {
                  (*ptr_to_globals).dot = skip_thing(
                    (*ptr_to_globals).dot,
                    1i32,
                    FORWARD as libc::c_int,
                    S_END_ALNUM as libc::c_int,
                  )
                } else if *strchrnul(
                  b"!\"#$%&\'()*+,-./:;<=>?@[\\]^_`{|}~\x00" as *const u8 as *const libc::c_char,
                  *(*ptr_to_globals).dot as libc::c_int,
                )
                .offset(0)
                  != 0
                {
                  (*ptr_to_globals).dot = skip_thing(
                    (*ptr_to_globals).dot,
                    1i32,
                    FORWARD as libc::c_int,
                    S_END_PUNCT as libc::c_int,
                  )
                }
                if (*ptr_to_globals).dot < (*ptr_to_globals).end.offset(-1) {
                  (*ptr_to_globals).dot = (*ptr_to_globals).dot.offset(1)
                }
                if ({
                  let mut bb__isspace: libc::c_uchar =
                    (*(*ptr_to_globals).dot as libc::c_int - 9i32) as libc::c_uchar;
                  (bb__isspace as libc::c_int == ' ' as i32 - 9i32
                    || bb__isspace as libc::c_int <= 13i32 - 9i32) as libc::c_int
                }) != 0
                {
                  (*ptr_to_globals).dot = skip_thing(
                    (*ptr_to_globals).dot,
                    2i32,
                    FORWARD as libc::c_int,
                    S_OVER_WS as libc::c_int,
                  )
                }
                (*ptr_to_globals).cmdcnt -= 1;
                if !((*ptr_to_globals).cmdcnt > 0) {
                  break;
                }
              }
              current_block = 15129665204879337069;
            }
            4386451087681909888 => {
              (*ptr_to_globals).dot =
                move_to_col((*ptr_to_globals).dot, (*ptr_to_globals).cmdcnt - 1i32);
              current_block = 15129665204879337069;
            }
            1296397779060594135 => {
              dot_begin();
              current_block = 15129665204879337069;
            }
            _ => {}
          }
          match current_block {
            15129665204879337069 => {}
            8629930936610358348 => {}
            _ => {
              match current_block {
                17251831742223396249 => {
                  dir = 0;
                  if c == 'X' as i32 {
                    dir = -1i32
                  }
                  loop {
                    if *(*ptr_to_globals).dot.offset(dir as isize) as libc::c_int != '\n' as i32 {
                      if c == 'X' as i32 {
                        (*ptr_to_globals).dot = (*ptr_to_globals).dot.offset(-1)
                      }
                      (*ptr_to_globals).dot = yank_delete(
                        (*ptr_to_globals).dot,
                        (*ptr_to_globals).dot,
                        0,
                        YANKDEL as libc::c_int,
                        1i32,
                      )
                    }
                    (*ptr_to_globals).cmdcnt -= 1;
                    if !((*ptr_to_globals).cmdcnt > 0) {
                      break;
                    }
                  }
                  end_cmd_q();
                  if c == 's' as i32 {
                    current_block = 8629930936610358348;
                  } else {
                    current_block = 15129665204879337069;
                  }
                }
                2087484904894455135 => {
                  dot_end();
                  (*ptr_to_globals).dot =
                    char_insert((*ptr_to_globals).dot, '\n' as i32 as libc::c_char, 1i32);
                  current_block = 8629930936610358348;
                }
                11945623545738147997 => {
                  (*ptr_to_globals).dot = (*ptr_to_globals).end.offset(-1);
                  if (*ptr_to_globals).cmdcnt > 0 {
                    (*ptr_to_globals).dot = find_line((*ptr_to_globals).cmdcnt)
                  }
                  dot_skip_over_ws();
                  current_block = 15129665204879337069;
                }
                5847749760081351726 => {
                  dir = FORWARD as libc::c_int;
                  if c == 'B' as i32 {
                    dir = BACK as libc::c_int
                  }
                  loop {
                    if c == 'W' as i32
                      || ({
                        let mut bb__isspace: libc::c_uchar =
                          (*(*ptr_to_globals).dot.offset(dir as isize) as libc::c_int - 9i32)
                            as libc::c_uchar;
                        (bb__isspace as libc::c_int == ' ' as i32 - 9i32
                          || bb__isspace as libc::c_int <= 13i32 - 9i32)
                          as libc::c_int
                      }) != 0
                    {
                      (*ptr_to_globals).dot =
                        skip_thing((*ptr_to_globals).dot, 1i32, dir, S_TO_WS as libc::c_int);
                      (*ptr_to_globals).dot =
                        skip_thing((*ptr_to_globals).dot, 2i32, dir, S_OVER_WS as libc::c_int)
                    }
                    if c != 'W' as i32 {
                      (*ptr_to_globals).dot =
                        skip_thing((*ptr_to_globals).dot, 1i32, dir, S_BEFORE_WS as libc::c_int)
                    }
                    (*ptr_to_globals).cmdcnt -= 1;
                    if !((*ptr_to_globals).cmdcnt > 0) {
                      break;
                    }
                  }
                  current_block = 15129665204879337069;
                }
                17440971994642376514 => {
                  current_block = 15129665204879337069;
                }
                7534742345255184552 => {
                  current_block = 17247297260531395789;
                }
                8800996768013373992 => {
                  loop {
                    dot_next();
                    (*ptr_to_globals).dot = move_to_col(
                      (*ptr_to_globals).dot,
                      (*ptr_to_globals).ccol + (*ptr_to_globals).offset,
                    );
                    (*ptr_to_globals).cmdcnt -= 1;
                    if !((*ptr_to_globals).cmdcnt > 0) {
                      break;
                    }
                  }
                  current_block = 15129665204879337069;
                }
                13993698454868426881 => {
                  loop {
                    dot_right();
                    (*ptr_to_globals).cmdcnt -= 1;
                    if !((*ptr_to_globals).cmdcnt > 0) {
                      break;
                    }
                  }
                  current_block = 15129665204879337069;
                }
                7856905509180742666 => {
                  while !((*ptr_to_globals).last_forward_char == 0) {
                    q = (*ptr_to_globals).dot.offset(1);
                    while q < (*ptr_to_globals).end.offset(-1)
                      && *q as libc::c_int != '\n' as i32
                      && *q as libc::c_int != (*ptr_to_globals).last_forward_char
                    {
                      q = q.offset(1)
                    }
                    if *q as libc::c_int == (*ptr_to_globals).last_forward_char {
                      (*ptr_to_globals).dot = q
                    }
                    (*ptr_to_globals).cmdcnt -= 1;
                    if !((*ptr_to_globals).cmdcnt > 0) {
                      break;
                    }
                  }
                  current_block = 15129665204879337069;
                }
                17498168302144015873 => {
                  current_block = 8681395796513813967;
                }
                1752638907092016026 => {
                  if *(*ptr_to_globals).dot as libc::c_int != '\n' as i32 {
                    (*ptr_to_globals).dot = (*ptr_to_globals).dot.offset(1)
                  }
                  current_block = 8629930936610358348;
                }
                3268579060917229304 => {
                  current_block = 8629930936610358348;
                }
                1895262434596074581 => {
                  current_block = 8908416993177701018;
                }
                _ => {}
              }
              match current_block {
                8629930936610358348 => {}
                15129665204879337069 => {}
                _ => {
                  match current_block {
                    17247297260531395789 => {
                      loop {
                        dot_left();
                        (*ptr_to_globals).cmdcnt -= 1;
                        if !((*ptr_to_globals).cmdcnt > 0) {
                          break;
                        }
                      }
                      current_block = 15129665204879337069;
                    }
                    8681395796513813967 => {
                      current_block = 5591548203144509315;
                    }
                    8908416993177701018 => {
                      current_block = 16124761010012532485;
                    }
                    _ => {}
                  }
                  match current_block {
                    15129665204879337069 => {}
                    _ => {
                      match current_block {
                        16124761010012532485 => {
                          let mut yf: libc::c_int = 0;
                          let mut ml: libc::c_int = 0;
                          let mut whole: libc::c_int = 0;
                          yf = YANKDEL as libc::c_int;
                          if c == 'y' as i32 || c == 'Y' as i32 {
                            yf = YANKONLY as libc::c_int
                          }
                          c1 = 'y' as i32;
                          if c != 'Y' as i32 {
                            c1 = get_one_char()
                          }
                          ml = find_range(&mut p, &mut q, c1 as libc::c_char);
                          place_cursor(0i32, 0);
                          if c1 == 27i32 {
                            c1 = 27i32;
                            c = c1
                          } else if !strchr(b"wW\x00" as *const u8 as *const libc::c_char, c1)
                            .is_null()
                          {
                            ml = 0;
                            if c == 'c' as i32 {
                              while ({
                                let mut bb__isspace: libc::c_uchar =
                                  (*q as libc::c_int - 9i32) as libc::c_uchar;
                                (bb__isspace as libc::c_int == ' ' as i32 - 9i32
                                  || bb__isspace as libc::c_int <= 13i32 - 9i32)
                                  as libc::c_int
                              }) != 0
                                && q > p
                              {
                                q = q.offset(-1)
                              }
                            }
                            (*ptr_to_globals).dot = yank_delete(p, q, ml, yf, 1i32)
                          } else if !strchr(
                            b"^0bBeEft%$ lh\x08\x7f\x00" as *const u8 as *const libc::c_char,
                            c1,
                          )
                          .is_null()
                          {
                            (*ptr_to_globals).dot = yank_delete(p, q, ml, yf, 1i32)
                          } else if !strchr(
                            b"cdykjGHL+-{}\r\n\x00" as *const u8 as *const libc::c_char,
                            c1,
                          )
                          .is_null()
                          {
                            (*ptr_to_globals).dot = yank_delete(p, q, ml, yf, 1i32);
                            whole = 1i32
                          } else {
                            c1 = 27i32;
                            c = c1;
                            ml = 0;
                            indicate_error();
                          }
                          if ml != 0 && whole != 0 {
                            if c == 'c' as i32 {
                              (*ptr_to_globals).dot = char_insert(
                                (*ptr_to_globals).dot,
                                '\n' as i32 as libc::c_char,
                                2i32,
                              );
                              if whole != 0
                                && (*ptr_to_globals).dot != (*ptr_to_globals).end.offset(-1)
                              {
                                dot_prev();
                              }
                            } else if c == 'd' as i32 {
                              dot_begin();
                              dot_skip_over_ws();
                            }
                          }
                          if c1 != 27i32 {
                            if c == 'c' as i32 {
                              strcpy(
                                buf.as_mut_ptr(),
                                b"Change\x00" as *const u8 as *const libc::c_char,
                              );
                              current_block = 8629930936610358348;
                            } else {
                              if c == 'd' as i32 {
                                strcpy(
                                  buf.as_mut_ptr(),
                                  b"Delete\x00" as *const u8 as *const libc::c_char,
                                );
                              }
                              if c == 'y' as i32 || c == 'Y' as i32 {
                                strcpy(
                                  buf.as_mut_ptr(),
                                  b"Yank\x00" as *const u8 as *const libc::c_char,
                                );
                              }
                              p = (*ptr_to_globals).reg[(*ptr_to_globals).YDreg as usize];
                              q = p.offset(strlen(p) as isize);
                              cnt = 0;
                              while p <= q {
                                if *p as libc::c_int == '\n' as i32 {
                                  cnt += 1
                                }
                                p = p.offset(1)
                              }
                              status_line(
                                b"%s %u lines (%u chars) using [%c]\x00" as *const u8
                                  as *const libc::c_char,
                                buf.as_mut_ptr(),
                                cnt,
                                strlen((*ptr_to_globals).reg[(*ptr_to_globals).YDreg as usize])
                                  as libc::c_uint,
                                what_reg() as libc::c_int,
                              );
                              end_cmd_q();
                              current_block = 15129665204879337069;
                            }
                          } else {
                            current_block = 15129665204879337069;
                          }
                        }
                        5591548203144509315 => {
                          current_block = 2636677179867529885;
                        }
                        _ => {}
                      }
                      match current_block {
                        15129665204879337069 => {}
                        8629930936610358348 => {}
                        _ => {
                          match current_block {
                            2636677179867529885 => {
                              current_block = 12309206730560524281;
                            }
                            _ => {}
                          }
                          match current_block {
                            12309206730560524281 => {
                              current_block = 3325768110057758661;
                            }
                            _ => {}
                          }
                          match current_block {
                            3325768110057758661 => {
                              current_block = 14815832896553429982;
                            }
                            _ => {}
                          }
                          match current_block {
                            14815832896553429982 => {
                              current_block = 10731695520297161438;
                            }
                            _ => {}
                          }
                          match current_block {
                            10731695520297161438 => {
                              if c == '0' as i32 && (*ptr_to_globals).cmdcnt < 1i32 {
                                dot_begin();
                              } else {
                                (*ptr_to_globals).cmdcnt =
                                  (*ptr_to_globals).cmdcnt * 10i32 + (c - '0' as i32)
                              }
                              current_block = 15129665204879337069;
                            }
                            _ => {}
                          }
                          match current_block {
                            15129665204879337069 => {}
                            _ => {
                              loop {
                                match current_block {
                                  16813369756331276724 => {
                                    msg = std::ptr::null();
                                    current_block = 7392824444931029276;
                                  }
                                  7392824444931029276 => {
                                    dir = FORWARD as libc::c_int;
                                    p = (*ptr_to_globals).dot.offset(1);
                                    if *(*ptr_to_globals).last_search_pattern.offset(0)
                                      as libc::c_int
                                      == '?' as i32
                                    {
                                      dir = BACK as libc::c_int;
                                      p = (*ptr_to_globals).dot.offset(-1)
                                    }
                                    current_block = 4166979493554389389;
                                  }
                                  _ => {
                                    q = char_search(
                                      p,
                                      (*ptr_to_globals).last_search_pattern.offset(1),
                                      dir << 1i32 | FULL as libc::c_int,
                                    );
                                    if !q.is_null() {
                                      (*ptr_to_globals).dot = q;
                                      msg = std::ptr::null()
                                    } else {
                                      p = (*ptr_to_globals).text;
                                      if dir == BACK as libc::c_int {
                                        p = (*ptr_to_globals).end.offset(-1)
                                      }
                                      q = char_search(
                                        p,
                                        (*ptr_to_globals).last_search_pattern.offset(1),
                                        dir << 1i32 | FULL as libc::c_int,
                                      );
                                      if !q.is_null() {
                                        (*ptr_to_globals).dot = q;
                                        msg = b"search hit BOTTOM, continuing at TOP\x00"
                                          as *const u8
                                          as *const libc::c_char;
                                        if dir == BACK as libc::c_int {
                                          msg = b"search hit TOP, continuing at BOTTOM\x00"
                                            as *const u8
                                            as *const libc::c_char
                                        }
                                      } else {
                                        msg = b"Pattern not found\x00" as *const u8
                                          as *const libc::c_char
                                      }
                                    }
                                    if !msg.is_null() {
                                      status_line_bold(
                                        b"%s\x00" as *const u8 as *const libc::c_char,
                                        msg,
                                      );
                                    }
                                    (*ptr_to_globals).cmdcnt -= 1;
                                    if (*ptr_to_globals).cmdcnt > 0 {
                                      current_block = 16813369756331276724;
                                    } else {
                                      break;
                                    }
                                  }
                                }
                              }
                              current_block = 15129665204879337069;
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
        37 => {
          current_block = 9018432604062702004;
          match current_block {
            16992905640583886232 => {
              loop {
                if (*(*ptr_to_globals).dot as libc::c_int - 'a' as i32) as libc::c_uchar
                  as libc::c_int
                  <= 'z' as i32 - 'a' as i32
                {
                  undo_push(
                    (*ptr_to_globals).dot,
                    1i32 as libc::c_uint,
                    1i32 as libc::c_uchar,
                  );
                  *(*ptr_to_globals).dot =
                    bb_ascii_toupper(*(*ptr_to_globals).dot as libc::c_uchar) as libc::c_char;
                  undo_push(
                    (*ptr_to_globals).dot,
                    1i32 as libc::c_uint,
                    2i32 as libc::c_uchar,
                  );
                } else if (*(*ptr_to_globals).dot as libc::c_int - 'A' as i32) as libc::c_uchar
                  as libc::c_int
                  <= 'Z' as i32 - 'A' as i32
                {
                  undo_push(
                    (*ptr_to_globals).dot,
                    1i32 as libc::c_uint,
                    1i32 as libc::c_uchar,
                  );
                  *(*ptr_to_globals).dot =
                    bb_ascii_tolower(*(*ptr_to_globals).dot as libc::c_uchar) as libc::c_char;
                  undo_push(
                    (*ptr_to_globals).dot,
                    1i32 as libc::c_uint,
                    2i32 as libc::c_uchar,
                  );
                }
                dot_right();
                (*ptr_to_globals).cmdcnt -= 1;
                if !((*ptr_to_globals).cmdcnt > 0) {
                  break;
                }
              }
              end_cmd_q();
              current_block = 15129665204879337069;
            }
            8729655159604064397 => {
              c1 = get_one_char();
              cnt = 0;
              if c1 == '.' as i32 {
                cnt = (*ptr_to_globals)
                  .rows
                  .wrapping_sub(2i32 as libc::c_uint)
                  .wrapping_div(2i32 as libc::c_uint) as libc::c_int
              }
              if c1 == '-' as i32 {
                cnt = (*ptr_to_globals).rows.wrapping_sub(2i32 as libc::c_uint) as libc::c_int
              }
              (*ptr_to_globals).screenbegin = begin_line((*ptr_to_globals).dot);
              dot_scroll(cnt, -1i32);
              current_block = 15129665204879337069;
            }
            15899500648299942075 => {
              (*ptr_to_globals).last_forward_char = get_one_char();
              do_cmd(';' as i32);
              if *(*ptr_to_globals).dot as libc::c_int == (*ptr_to_globals).last_forward_char {
                dot_left();
              }
              (*ptr_to_globals).last_forward_char = 0;
              current_block = 15129665204879337069;
            }
            9051390181078481641 => {
              c1 = get_one_char();
              if *(*ptr_to_globals).dot as libc::c_int != '\n' as i32 {
                (*ptr_to_globals).dot =
                  text_hole_delete((*ptr_to_globals).dot, (*ptr_to_globals).dot, 1i32);
                (*ptr_to_globals).dot =
                  char_insert((*ptr_to_globals).dot, c1 as libc::c_char, 2i32);
                dot_left();
              }
              end_cmd_q();
              current_block = 15129665204879337069;
            }
            877115918601926659 => {
              dir = FORWARD as libc::c_int;
              if c == 'b' as i32 {
                dir = BACK as libc::c_int
              }
              while !((*ptr_to_globals).dot.offset(dir as isize) < (*ptr_to_globals).text
                || (*ptr_to_globals).dot.offset(dir as isize) > (*ptr_to_globals).end.offset(-1))
              {
                (*ptr_to_globals).dot = (*ptr_to_globals).dot.offset(dir as isize);
                if ({
                  let mut bb__isspace: libc::c_uchar =
                    (*(*ptr_to_globals).dot as libc::c_int - 9i32) as libc::c_uchar;
                  (bb__isspace as libc::c_int == ' ' as i32 - 9i32
                    || bb__isspace as libc::c_int <= 13i32 - 9i32) as libc::c_int
                }) != 0
                {
                  (*ptr_to_globals).dot = skip_thing(
                    (*ptr_to_globals).dot,
                    if c == 'e' as i32 { 2i32 } else { 1i32 },
                    dir,
                    S_OVER_WS as libc::c_int,
                  )
                }
                if bb_ascii_isalnum(*(*ptr_to_globals).dot as libc::c_uchar) != 0
                  || *(*ptr_to_globals).dot as libc::c_int == '_' as i32
                {
                  (*ptr_to_globals).dot =
                    skip_thing((*ptr_to_globals).dot, 1i32, dir, S_END_ALNUM as libc::c_int)
                } else if *strchrnul(
                  b"!\"#$%&\'()*+,-./:;<=>?@[\\]^_`{|}~\x00" as *const u8 as *const libc::c_char,
                  *(*ptr_to_globals).dot as libc::c_int,
                )
                .offset(0)
                  != 0
                {
                  (*ptr_to_globals).dot =
                    skip_thing((*ptr_to_globals).dot, 1i32, dir, S_END_PUNCT as libc::c_int)
                }
                (*ptr_to_globals).cmdcnt -= 1;
                if !((*ptr_to_globals).cmdcnt > 0) {
                  break;
                }
              }
              current_block = 15129665204879337069;
            }
            1085022737867179637 => {
              dot_begin();
              dot_skip_over_ws();
              current_block = 15129665204879337069;
            }
            3113147720494587438 => {
              c1 = get_one_char();
              if c1 != 'Z' as i32 {
                indicate_error();
              } else if (*ptr_to_globals).modified_count != 0 {
                if 1i32 != 0 && (*ptr_to_globals).readonly_mode as libc::c_int != 0 {
                  status_line_bold(
                    b"\'%s\' is read only\x00" as *const u8 as *const libc::c_char,
                    (*ptr_to_globals).current_filename,
                  );
                } else {
                  cnt = file_write(
                    (*ptr_to_globals).current_filename,
                    (*ptr_to_globals).text,
                    (*ptr_to_globals).end.offset(-1),
                  );
                  if cnt < 0 {
                    if cnt == -1i32 {
                      status_line_bold(b"Write error: %m\x00" as *const u8 as *const libc::c_char);
                    }
                  } else if cnt as libc::c_long
                    == (*ptr_to_globals)
                      .end
                      .offset(-1)
                      .wrapping_offset_from((*ptr_to_globals).text)
                      as libc::c_long
                      + 1
                  {
                    (*ptr_to_globals).editing = 0 as smallint
                  }
                }
              } else {
                (*ptr_to_globals).editing = 0 as smallint
              }
              current_block = 15129665204879337069;
            }
            12960118908218882441 => {
              p = begin_line((*ptr_to_globals).dot);
              if *p.offset(-1i32 as isize) as libc::c_int == '\n' as i32 {
                dot_prev();
                current_block = 2087484904894455135;
              } else {
                dot_begin();
                (*ptr_to_globals).dot =
                  char_insert((*ptr_to_globals).dot, '\n' as i32 as libc::c_char, 1i32);
                dot_prev();
                current_block = 8629930936610358348;
              }
            }
            8720450212473544924 => {
              (*ptr_to_globals).dot = (*ptr_to_globals).screenbegin;
              cnt = 0;
              while (cnt as libc::c_uint)
                < (*ptr_to_globals)
                  .rows
                  .wrapping_sub(1i32 as libc::c_uint)
                  .wrapping_div(2i32 as libc::c_uint)
              {
                (*ptr_to_globals).dot = next_line((*ptr_to_globals).dot);
                cnt += 1
              }
              current_block = 15129665204879337069;
            }
            13015277209715431090 => {
              (*ptr_to_globals).dot = end_screen();
              if (*ptr_to_globals).cmdcnt as libc::c_uint
                > (*ptr_to_globals).rows.wrapping_sub(1i32 as libc::c_uint)
              {
                (*ptr_to_globals).cmdcnt =
                  (*ptr_to_globals).rows.wrapping_sub(1i32 as libc::c_uint) as libc::c_int
              }
              (*ptr_to_globals).cmdcnt -= 1;
              if (*ptr_to_globals).cmdcnt > 0 {
                do_cmd('-' as i32);
              }
              dot_begin();
              dot_skip_over_ws();
              current_block = 15129665204879337069;
            }
            9800435767766781385 => {
              loop {
                dot_end();
                if (*ptr_to_globals).dot < (*ptr_to_globals).end.offset(-1) {
                  undo_push(
                    (*ptr_to_globals).dot,
                    1i32 as libc::c_uint,
                    1i32 as libc::c_uchar,
                  );
                  let fresh15 = (*ptr_to_globals).dot;
                  (*ptr_to_globals).dot = (*ptr_to_globals).dot.offset(1);
                  *fresh15 = ' ' as i32 as libc::c_char;
                  undo_push(
                    (*ptr_to_globals).dot.offset(-1),
                    1i32 as libc::c_uint,
                    2i32 as libc::c_uchar,
                  );
                  while ({
                    let mut bb__isblank: libc::c_uchar = *(*ptr_to_globals).dot as libc::c_uchar;
                    (bb__isblank as libc::c_int == ' ' as i32
                      || bb__isblank as libc::c_int == '\t' as i32)
                      as libc::c_int
                  }) != 0
                  {
                    text_hole_delete((*ptr_to_globals).dot, (*ptr_to_globals).dot, 2i32);
                  }
                }
                (*ptr_to_globals).cmdcnt -= 1;
                if !((*ptr_to_globals).cmdcnt > 0) {
                  break;
                }
              }
              end_cmd_q();
              current_block = 15129665204879337069;
            }
            3432363526595694666 => {
              dot_begin();
              dot_skip_over_ws();
              current_block = 3268579060917229304;
            }
            3494829253343353619 => {
              (*ptr_to_globals).dot = (*ptr_to_globals).screenbegin;
              if (*ptr_to_globals).cmdcnt as libc::c_uint
                > (*ptr_to_globals).rows.wrapping_sub(1i32 as libc::c_uint)
              {
                (*ptr_to_globals).cmdcnt =
                  (*ptr_to_globals).rows.wrapping_sub(1i32 as libc::c_uint) as libc::c_int
              }
              (*ptr_to_globals).cmdcnt -= 1;
              if (*ptr_to_globals).cmdcnt > 0 {
                do_cmd('+' as i32);
              }
              dot_skip_over_ws();
              current_block = 15129665204879337069;
            }
            17973101765331640574 => {
              c1 = get_one_char();
              if c1 != 'g' as i32 {
                buf[0] = 'g' as i32 as libc::c_char;
                buf[1] = if c1 >= 0 { c1 } else { '*' as i32 } as libc::c_char;
                buf[2] = '\u{0}' as i32 as libc::c_char;
                not_implemented(buf.as_mut_ptr());
                current_block = 15129665204879337069;
              } else {
                if (*ptr_to_globals).cmdcnt == 0 {
                  (*ptr_to_globals).cmdcnt = 1i32
                }
                current_block = 11945623545738147997;
              }
            }
            16546625800574160972 => {
              save_dot = (*ptr_to_globals).dot;
              (*ptr_to_globals).dot = dollar_line((*ptr_to_globals).dot);
              (*ptr_to_globals).dot = yank_delete(
                save_dot,
                (*ptr_to_globals).dot,
                0,
                YANKDEL as libc::c_int,
                1i32,
              );
              if c == 'C' as i32 {
                current_block = 8629930936610358348;
              } else {
                if c == 'D' as i32 {
                  end_cmd_q();
                }
                current_block = 15129665204879337069;
              }
            }
            11937696639986586685 => {
              cnt = count_lines((*ptr_to_globals).text, (*ptr_to_globals).dot);
              c1 = get_one_char();
              find_range(&mut p, &mut q, c1 as libc::c_char);
              yank_delete(p, q, 1i32, YANKONLY as libc::c_int, 0);
              p = begin_line(p);
              q = end_line(q);
              i = count_lines(p, q);
              while i > 0 {
                if c == '<' as i32 {
                  if *p as libc::c_int == '\t' as i32 {
                    text_hole_delete(p, p, 0);
                  } else if *p as libc::c_int == ' ' as i32 {
                    j = 0;
                    while *p as libc::c_int == ' ' as i32 && j < (*ptr_to_globals).tabstop {
                      text_hole_delete(p, p, 0);
                      j += 1
                    }
                  }
                } else if c == '>' as i32 {
                  char_insert(p, '\t' as i32 as libc::c_char, 1i32);
                }
                i -= 1;
                p = next_line(p)
              }
              (*ptr_to_globals).dot = find_line(cnt);
              dot_skip_over_ws();
              end_cmd_q();
              current_block = 15129665204879337069;
            }
            17725350714912028156 => {
              p = get_input_line(b":\x00" as *const u8 as *const libc::c_char);
              colon(p);
              current_block = 15129665204879337069;
            }
            14526470074083880812 => {
              q = char_search(
                (*ptr_to_globals).dot,
                b"\n\n\x00" as *const u8 as *const libc::c_char,
                (FORWARD as libc::c_int) << 1i32 | FULL as libc::c_int,
              );
              if !q.is_null() {
                (*ptr_to_globals).dot = next_line(q)
              }
              current_block = 15129665204879337069;
            }
            8893187391306414141 => {
              q = char_search(
                (*ptr_to_globals).dot,
                b"\n\n\x00" as *const u8 as *const libc::c_char,
                ((BACK as libc::c_int as libc::c_uint) << 1i32
                  | FULL as libc::c_int as libc::c_uint) as libc::c_int,
              );
              if !q.is_null() {
                (*ptr_to_globals).dot = next_line(q)
              }
              current_block = 15129665204879337069;
            }
            7021673758293221412 => {
              dir = BACK as libc::c_int;
              p = (*ptr_to_globals).dot.offset(-1);
              if *(*ptr_to_globals).last_search_pattern.offset(0) as libc::c_int == '?' as i32 {
                dir = FORWARD as libc::c_int;
                p = (*ptr_to_globals).dot.offset(1)
              }
              current_block = 4166979493554389389;
            }
            18374191879090272823 => {
              buf[0] = c as libc::c_char;
              buf[1] = '\u{0}' as i32 as libc::c_char;
              q = get_input_line(buf.as_mut_ptr());
              if *q.offset(0) as libc::c_int != 0 && *q.offset(1) == 0 {
                if *(*ptr_to_globals).last_search_pattern.offset(0) != 0 {
                  *(*ptr_to_globals).last_search_pattern.offset(0) = c as libc::c_char
                }
                current_block = 7392824444931029276;
              } else if *q.offset(0) != 0 {
                free((*ptr_to_globals).last_search_pattern as *mut libc::c_void);
                (*ptr_to_globals).last_search_pattern = crate::libbb::xfuncs_printf::xstrdup(q);
                current_block = 7392824444931029276;
              } else {
                current_block = 15129665204879337069;
              }
            }
            16407828456666301883 => {
              if (*ptr_to_globals).last_forward_char == 0 {
                current_block = 15129665204879337069;
              } else {
                loop {
                  q = (*ptr_to_globals).dot.offset(-1);
                  while q >= (*ptr_to_globals).text
                    && *q as libc::c_int != '\n' as i32
                    && *q as libc::c_int != (*ptr_to_globals).last_forward_char
                  {
                    q = q.offset(-1)
                  }
                  if q >= (*ptr_to_globals).text
                    && *q as libc::c_int == (*ptr_to_globals).last_forward_char
                  {
                    (*ptr_to_globals).dot = q
                  }
                  (*ptr_to_globals).cmdcnt -= 1;
                  if !((*ptr_to_globals).cmdcnt > 0) {
                    break;
                  }
                }
                current_block = 15129665204879337069;
              }
            }
            9018432604062702004 => {
              q = (*ptr_to_globals).dot;
              while q < (*ptr_to_globals).end && *q as libc::c_int != '\n' as i32 {
                if !strchr(
                  b"()[]{}\x00" as *const u8 as *const libc::c_char,
                  *q as libc::c_int,
                )
                .is_null()
                {
                  p = find_pair(q, *q);
                  if p.is_null() {
                    indicate_error();
                  } else {
                    (*ptr_to_globals).dot = p
                  }
                  break;
                } else {
                  q = q.offset(1)
                }
              }
              if *q as libc::c_int == '\n' as i32 {
                indicate_error();
              }
              current_block = 15129665204879337069;
            }
            10247103787464459848 => {
              p = (*ptr_to_globals).reg[(*ptr_to_globals).YDreg as usize];
              if p.is_null() {
                status_line_bold(
                  b"Nothing in register %c\x00" as *const u8 as *const libc::c_char,
                  what_reg() as libc::c_int,
                );
              } else {
                if !strchr(p, '\n' as i32).is_null() {
                  if c == 'P' as i32 {
                    dot_begin();
                  }
                  if c == 'p' as i32 {
                    if end_line((*ptr_to_globals).dot) == (*ptr_to_globals).end.offset(-1) {
                      (*ptr_to_globals).dot = (*ptr_to_globals).end
                    } else {
                      dot_next();
                    }
                  }
                } else if c == 'p' as i32 {
                  dot_right();
                }
                string_insert((*ptr_to_globals).dot, p, 1i32);
                end_cmd_q();
              }
              current_block = 15129665204879337069;
            }
            15260732871948875843 => {
              c1 = (get_one_char() | 0x20i32) - 'a' as i32;
              if c1 as libc::c_uint <= 25i32 as libc::c_uint {
                (*ptr_to_globals).mark[c1 as usize] = (*ptr_to_globals).dot
              } else {
                indicate_error();
              }
              current_block = 15129665204879337069;
            }
            12738322036487086035 => {
              c1 = get_one_char() | 0x20i32;
              if (c1 - 'a' as i32) as libc::c_uint <= 25i32 as libc::c_uint {
                c1 = c1 - 'a' as i32;
                q = (*ptr_to_globals).mark[c1 as usize];
                if (*ptr_to_globals).text <= q && q < (*ptr_to_globals).end {
                  (*ptr_to_globals).dot = q;
                  dot_begin();
                  dot_skip_over_ws();
                }
              } else if c1 == '\'' as i32 {
                (*ptr_to_globals).dot = swap_context((*ptr_to_globals).dot);
                dot_begin();
                dot_skip_over_ws();
              } else {
                indicate_error();
              }
              current_block = 15129665204879337069;
            }
            13255096073384561358 => {
              c1 = (get_one_char() | 0x20i32) - 'a' as i32;
              if c1 as libc::c_uint <= 25i32 as libc::c_uint {
                (*ptr_to_globals).YDreg = c1 as smalluint
              } else {
                indicate_error();
              }
              current_block = 15129665204879337069;
            }
            10258711639984089377 => {
              if (*ptr_to_globals).cmd_mode as libc::c_int == 0 {
                indicate_error();
              }
              (*ptr_to_globals).cmd_mode = 0 as smallint;
              undo_queue_commit();
              end_cmd_q();
              (*ptr_to_globals).last_status_cksum = 0;
              current_block = 15129665204879337069;
            }
            11439127087547047736 => {
              buf[0] = c as libc::c_char;
              buf[1] = '\u{0}' as i32 as libc::c_char;
              not_implemented(buf.as_mut_ptr());
              end_cmd_q();
              current_block = 17440971994642376514;
            }
            7961798899781870241 => {
              dot_scroll(
                (*ptr_to_globals).rows.wrapping_sub(2i32 as libc::c_uint) as libc::c_int,
                -1i32,
              );
              current_block = 15129665204879337069;
            }
            9426343755402444879 => {
              dot_scroll(
                (*ptr_to_globals)
                  .rows
                  .wrapping_sub(2i32 as libc::c_uint)
                  .wrapping_div(2i32 as libc::c_uint) as libc::c_int,
                1i32,
              );
              current_block = 15129665204879337069;
            }
            13352459794680105913 => {
              dot_scroll(1i32, 1i32);
              current_block = 15129665204879337069;
            }
            14142272253464333006 => {
              dot_scroll(
                (*ptr_to_globals).rows.wrapping_sub(2i32 as libc::c_uint) as libc::c_int,
                1i32,
              );
              current_block = 15129665204879337069;
            }
            10758177197742640066 => {
              (*ptr_to_globals).last_status_cksum = 0;
              current_block = 15129665204879337069;
            }
            6152256259730122749 => {
              current_block = 7534742345255184552;
            }
            12883932598258173301 => {
              current_block = 8800996768013373992;
            }
            11242998110520238401 => {
              redraw(1i32);
              current_block = 15129665204879337069;
            }
            13619733043935729992 => {
              loop {
                dot_next();
                dot_skip_over_ws();
                (*ptr_to_globals).cmdcnt -= 1;
                if !((*ptr_to_globals).cmdcnt > 0) {
                  break;
                }
              }
              current_block = 15129665204879337069;
            }
            9339065157412720613 => {
              dot_scroll(
                (*ptr_to_globals)
                  .rows
                  .wrapping_sub(2i32 as libc::c_uint)
                  .wrapping_div(2i32 as libc::c_uint) as libc::c_int,
                -1i32,
              );
              current_block = 15129665204879337069;
            }
            11447082683497798022 => {
              dot_scroll(1i32, -1i32);
              current_block = 15129665204879337069;
            }
            5182000506326660482 => {
              current_block = 13993698454868426881;
            }
            1105010766850597332 => {
              if !(*ptr_to_globals).reg[27].is_null() {
                p = begin_line((*ptr_to_globals).dot);
                q = end_line((*ptr_to_globals).dot);
                p = text_hole_delete(p, q, 1i32);
                p = p.offset(string_insert(p, (*ptr_to_globals).reg[27], 2i32) as isize);
                (*ptr_to_globals).dot = p;
                dot_skip_over_ws();
              }
              current_block = 15129665204879337069;
            }
            8616046655533110204 => {
              undo_pop();
              current_block = 15129665204879337069;
            }
            5127767458142431603 => {
              loop {
                (*ptr_to_globals).dot = end_line((*ptr_to_globals).dot);
                (*ptr_to_globals).cmdcnt -= 1;
                if (*ptr_to_globals).cmdcnt <= 0 {
                  break;
                }
                dot_next();
              }
              current_block = 15129665204879337069;
            }
            222014967776118151 => {
              (*ptr_to_globals).last_forward_char = get_one_char();
              current_block = 7856905509180742666;
            }
            11209792479411604110 => {
              loop {
                dot_prev();
                dot_skip_over_ws();
                (*ptr_to_globals).cmdcnt -= 1;
                if !((*ptr_to_globals).cmdcnt > 0) {
                  break;
                }
              }
              current_block = 15129665204879337069;
            }
            3364823792826654116 => {
              if (*ptr_to_globals).lmc_len != 0 {
                (*ptr_to_globals).ioq_start = crate::libbb::xfuncs_printf::xstrndup(
                  (*ptr_to_globals).last_modifying_cmd.as_mut_ptr(),
                  (*ptr_to_globals).lmc_len,
                );
                (*ptr_to_globals).ioq = (*ptr_to_globals).ioq_start
              }
              current_block = 15129665204879337069;
            }
            18096603330221575131 => {
              current_block = 17498168302144015873;
            }
            16891123271837848903 => {
              dot_end();
              current_block = 1752638907092016026;
            }
            8517235759107662071 => {
              current_block = 5847749760081351726;
            }
            12525254419223051704 => {
              if (*ptr_to_globals).dot < (*ptr_to_globals).end.offset(-1) {
                (*ptr_to_globals).dot = yank_delete(
                  (*ptr_to_globals).dot,
                  (*ptr_to_globals).dot,
                  1i32,
                  YANKDEL as libc::c_int,
                  1i32,
                )
              }
              current_block = 15129665204879337069;
            }
            15232911949322867522 => {
              current_block = 17251831742223396249;
            }
            10863374208794025069 => {
              current_block = 1895262434596074581;
            }
            451126677064669119 => {
              loop {
                dot_prev();
                (*ptr_to_globals).dot = move_to_col(
                  (*ptr_to_globals).dot,
                  (*ptr_to_globals).ccol + (*ptr_to_globals).offset,
                );
                (*ptr_to_globals).cmdcnt -= 1;
                if !((*ptr_to_globals).cmdcnt > 0) {
                  break;
                }
              }
              current_block = 15129665204879337069;
            }
            4611735929166613116 => {
              loop {
                if bb_ascii_isalnum(*(*ptr_to_globals).dot as libc::c_uchar) != 0
                  || *(*ptr_to_globals).dot as libc::c_int == '_' as i32
                {
                  (*ptr_to_globals).dot = skip_thing(
                    (*ptr_to_globals).dot,
                    1i32,
                    FORWARD as libc::c_int,
                    S_END_ALNUM as libc::c_int,
                  )
                } else if *strchrnul(
                  b"!\"#$%&\'()*+,-./:;<=>?@[\\]^_`{|}~\x00" as *const u8 as *const libc::c_char,
                  *(*ptr_to_globals).dot as libc::c_int,
                )
                .offset(0)
                  != 0
                {
                  (*ptr_to_globals).dot = skip_thing(
                    (*ptr_to_globals).dot,
                    1i32,
                    FORWARD as libc::c_int,
                    S_END_PUNCT as libc::c_int,
                  )
                }
                if (*ptr_to_globals).dot < (*ptr_to_globals).end.offset(-1) {
                  (*ptr_to_globals).dot = (*ptr_to_globals).dot.offset(1)
                }
                if ({
                  let mut bb__isspace: libc::c_uchar =
                    (*(*ptr_to_globals).dot as libc::c_int - 9i32) as libc::c_uchar;
                  (bb__isspace as libc::c_int == ' ' as i32 - 9i32
                    || bb__isspace as libc::c_int <= 13i32 - 9i32) as libc::c_int
                }) != 0
                {
                  (*ptr_to_globals).dot = skip_thing(
                    (*ptr_to_globals).dot,
                    2i32,
                    FORWARD as libc::c_int,
                    S_OVER_WS as libc::c_int,
                  )
                }
                (*ptr_to_globals).cmdcnt -= 1;
                if !((*ptr_to_globals).cmdcnt > 0) {
                  break;
                }
              }
              current_block = 15129665204879337069;
            }
            4386451087681909888 => {
              (*ptr_to_globals).dot =
                move_to_col((*ptr_to_globals).dot, (*ptr_to_globals).cmdcnt - 1i32);
              current_block = 15129665204879337069;
            }
            1296397779060594135 => {
              dot_begin();
              current_block = 15129665204879337069;
            }
            _ => {}
          }
          match current_block {
            15129665204879337069 => {}
            8629930936610358348 => {}
            _ => {
              match current_block {
                17251831742223396249 => {
                  dir = 0;
                  if c == 'X' as i32 {
                    dir = -1i32
                  }
                  loop {
                    if *(*ptr_to_globals).dot.offset(dir as isize) as libc::c_int != '\n' as i32 {
                      if c == 'X' as i32 {
                        (*ptr_to_globals).dot = (*ptr_to_globals).dot.offset(-1)
                      }
                      (*ptr_to_globals).dot = yank_delete(
                        (*ptr_to_globals).dot,
                        (*ptr_to_globals).dot,
                        0,
                        YANKDEL as libc::c_int,
                        1i32,
                      )
                    }
                    (*ptr_to_globals).cmdcnt -= 1;
                    if !((*ptr_to_globals).cmdcnt > 0) {
                      break;
                    }
                  }
                  end_cmd_q();
                  if c == 's' as i32 {
                    current_block = 8629930936610358348;
                  } else {
                    current_block = 15129665204879337069;
                  }
                }
                2087484904894455135 => {
                  dot_end();
                  (*ptr_to_globals).dot =
                    char_insert((*ptr_to_globals).dot, '\n' as i32 as libc::c_char, 1i32);
                  current_block = 8629930936610358348;
                }
                11945623545738147997 => {
                  (*ptr_to_globals).dot = (*ptr_to_globals).end.offset(-1);
                  if (*ptr_to_globals).cmdcnt > 0 {
                    (*ptr_to_globals).dot = find_line((*ptr_to_globals).cmdcnt)
                  }
                  dot_skip_over_ws();
                  current_block = 15129665204879337069;
                }
                5847749760081351726 => {
                  dir = FORWARD as libc::c_int;
                  if c == 'B' as i32 {
                    dir = BACK as libc::c_int
                  }
                  loop {
                    if c == 'W' as i32
                      || ({
                        let mut bb__isspace: libc::c_uchar =
                          (*(*ptr_to_globals).dot.offset(dir as isize) as libc::c_int - 9i32)
                            as libc::c_uchar;
                        (bb__isspace as libc::c_int == ' ' as i32 - 9i32
                          || bb__isspace as libc::c_int <= 13i32 - 9i32)
                          as libc::c_int
                      }) != 0
                    {
                      (*ptr_to_globals).dot =
                        skip_thing((*ptr_to_globals).dot, 1i32, dir, S_TO_WS as libc::c_int);
                      (*ptr_to_globals).dot =
                        skip_thing((*ptr_to_globals).dot, 2i32, dir, S_OVER_WS as libc::c_int)
                    }
                    if c != 'W' as i32 {
                      (*ptr_to_globals).dot =
                        skip_thing((*ptr_to_globals).dot, 1i32, dir, S_BEFORE_WS as libc::c_int)
                    }
                    (*ptr_to_globals).cmdcnt -= 1;
                    if !((*ptr_to_globals).cmdcnt > 0) {
                      break;
                    }
                  }
                  current_block = 15129665204879337069;
                }
                17440971994642376514 => {
                  current_block = 15129665204879337069;
                }
                7534742345255184552 => {
                  current_block = 17247297260531395789;
                }
                8800996768013373992 => {
                  loop {
                    dot_next();
                    (*ptr_to_globals).dot = move_to_col(
                      (*ptr_to_globals).dot,
                      (*ptr_to_globals).ccol + (*ptr_to_globals).offset,
                    );
                    (*ptr_to_globals).cmdcnt -= 1;
                    if !((*ptr_to_globals).cmdcnt > 0) {
                      break;
                    }
                  }
                  current_block = 15129665204879337069;
                }
                13993698454868426881 => {
                  loop {
                    dot_right();
                    (*ptr_to_globals).cmdcnt -= 1;
                    if !((*ptr_to_globals).cmdcnt > 0) {
                      break;
                    }
                  }
                  current_block = 15129665204879337069;
                }
                7856905509180742666 => {
                  while !((*ptr_to_globals).last_forward_char == 0) {
                    q = (*ptr_to_globals).dot.offset(1);
                    while q < (*ptr_to_globals).end.offset(-1)
                      && *q as libc::c_int != '\n' as i32
                      && *q as libc::c_int != (*ptr_to_globals).last_forward_char
                    {
                      q = q.offset(1)
                    }
                    if *q as libc::c_int == (*ptr_to_globals).last_forward_char {
                      (*ptr_to_globals).dot = q
                    }
                    (*ptr_to_globals).cmdcnt -= 1;
                    if !((*ptr_to_globals).cmdcnt > 0) {
                      break;
                    }
                  }
                  current_block = 15129665204879337069;
                }
                17498168302144015873 => {
                  current_block = 8681395796513813967;
                }
                1752638907092016026 => {
                  if *(*ptr_to_globals).dot as libc::c_int != '\n' as i32 {
                    (*ptr_to_globals).dot = (*ptr_to_globals).dot.offset(1)
                  }
                  current_block = 8629930936610358348;
                }
                3268579060917229304 => {
                  current_block = 8629930936610358348;
                }
                1895262434596074581 => {
                  current_block = 8908416993177701018;
                }
                _ => {}
              }
              match current_block {
                8629930936610358348 => {}
                15129665204879337069 => {}
                _ => {
                  match current_block {
                    17247297260531395789 => {
                      loop {
                        dot_left();
                        (*ptr_to_globals).cmdcnt -= 1;
                        if !((*ptr_to_globals).cmdcnt > 0) {
                          break;
                        }
                      }
                      current_block = 15129665204879337069;
                    }
                    8681395796513813967 => {
                      current_block = 5591548203144509315;
                    }
                    8908416993177701018 => {
                      current_block = 16124761010012532485;
                    }
                    _ => {}
                  }
                  match current_block {
                    15129665204879337069 => {}
                    _ => {
                      match current_block {
                        16124761010012532485 => {
                          let mut yf: libc::c_int = 0;
                          let mut ml: libc::c_int = 0;
                          let mut whole: libc::c_int = 0;
                          yf = YANKDEL as libc::c_int;
                          if c == 'y' as i32 || c == 'Y' as i32 {
                            yf = YANKONLY as libc::c_int
                          }
                          c1 = 'y' as i32;
                          if c != 'Y' as i32 {
                            c1 = get_one_char()
                          }
                          ml = find_range(&mut p, &mut q, c1 as libc::c_char);
                          place_cursor(0i32, 0);
                          if c1 == 27i32 {
                            c1 = 27i32;
                            c = c1
                          } else if !strchr(b"wW\x00" as *const u8 as *const libc::c_char, c1)
                            .is_null()
                          {
                            ml = 0;
                            if c == 'c' as i32 {
                              while ({
                                let mut bb__isspace: libc::c_uchar =
                                  (*q as libc::c_int - 9i32) as libc::c_uchar;
                                (bb__isspace as libc::c_int == ' ' as i32 - 9i32
                                  || bb__isspace as libc::c_int <= 13i32 - 9i32)
                                  as libc::c_int
                              }) != 0
                                && q > p
                              {
                                q = q.offset(-1)
                              }
                            }
                            (*ptr_to_globals).dot = yank_delete(p, q, ml, yf, 1i32)
                          } else if !strchr(
                            b"^0bBeEft%$ lh\x08\x7f\x00" as *const u8 as *const libc::c_char,
                            c1,
                          )
                          .is_null()
                          {
                            (*ptr_to_globals).dot = yank_delete(p, q, ml, yf, 1i32)
                          } else if !strchr(
                            b"cdykjGHL+-{}\r\n\x00" as *const u8 as *const libc::c_char,
                            c1,
                          )
                          .is_null()
                          {
                            (*ptr_to_globals).dot = yank_delete(p, q, ml, yf, 1i32);
                            whole = 1i32
                          } else {
                            c1 = 27i32;
                            c = c1;
                            ml = 0;
                            indicate_error();
                          }
                          if ml != 0 && whole != 0 {
                            if c == 'c' as i32 {
                              (*ptr_to_globals).dot = char_insert(
                                (*ptr_to_globals).dot,
                                '\n' as i32 as libc::c_char,
                                2i32,
                              );
                              if whole != 0
                                && (*ptr_to_globals).dot != (*ptr_to_globals).end.offset(-1)
                              {
                                dot_prev();
                              }
                            } else if c == 'd' as i32 {
                              dot_begin();
                              dot_skip_over_ws();
                            }
                          }
                          if c1 != 27i32 {
                            if c == 'c' as i32 {
                              strcpy(
                                buf.as_mut_ptr(),
                                b"Change\x00" as *const u8 as *const libc::c_char,
                              );
                              current_block = 8629930936610358348;
                            } else {
                              if c == 'd' as i32 {
                                strcpy(
                                  buf.as_mut_ptr(),
                                  b"Delete\x00" as *const u8 as *const libc::c_char,
                                );
                              }
                              if c == 'y' as i32 || c == 'Y' as i32 {
                                strcpy(
                                  buf.as_mut_ptr(),
                                  b"Yank\x00" as *const u8 as *const libc::c_char,
                                );
                              }
                              p = (*ptr_to_globals).reg[(*ptr_to_globals).YDreg as usize];
                              q = p.offset(strlen(p) as isize);
                              cnt = 0;
                              while p <= q {
                                if *p as libc::c_int == '\n' as i32 {
                                  cnt += 1
                                }
                                p = p.offset(1)
                              }
                              status_line(
                                b"%s %u lines (%u chars) using [%c]\x00" as *const u8
                                  as *const libc::c_char,
                                buf.as_mut_ptr(),
                                cnt,
                                strlen((*ptr_to_globals).reg[(*ptr_to_globals).YDreg as usize])
                                  as libc::c_uint,
                                what_reg() as libc::c_int,
                              );
                              end_cmd_q();
                              current_block = 15129665204879337069;
                            }
                          } else {
                            current_block = 15129665204879337069;
                          }
                        }
                        5591548203144509315 => {
                          current_block = 2636677179867529885;
                        }
                        _ => {}
                      }
                      match current_block {
                        15129665204879337069 => {}
                        8629930936610358348 => {}
                        _ => {
                          match current_block {
                            2636677179867529885 => {
                              current_block = 12309206730560524281;
                            }
                            _ => {}
                          }
                          match current_block {
                            12309206730560524281 => {
                              current_block = 3325768110057758661;
                            }
                            _ => {}
                          }
                          match current_block {
                            3325768110057758661 => {
                              current_block = 14815832896553429982;
                            }
                            _ => {}
                          }
                          match current_block {
                            14815832896553429982 => {
                              current_block = 10731695520297161438;
                            }
                            _ => {}
                          }
                          match current_block {
                            10731695520297161438 => {
                              if c == '0' as i32 && (*ptr_to_globals).cmdcnt < 1i32 {
                                dot_begin();
                              } else {
                                (*ptr_to_globals).cmdcnt =
                                  (*ptr_to_globals).cmdcnt * 10i32 + (c - '0' as i32)
                              }
                              current_block = 15129665204879337069;
                            }
                            _ => {}
                          }
                          match current_block {
                            15129665204879337069 => {}
                            _ => {
                              loop {
                                match current_block {
                                  16813369756331276724 => {
                                    msg = std::ptr::null();
                                    current_block = 7392824444931029276;
                                  }
                                  7392824444931029276 => {
                                    dir = FORWARD as libc::c_int;
                                    p = (*ptr_to_globals).dot.offset(1);
                                    if *(*ptr_to_globals).last_search_pattern.offset(0)
                                      as libc::c_int
                                      == '?' as i32
                                    {
                                      dir = BACK as libc::c_int;
                                      p = (*ptr_to_globals).dot.offset(-1)
                                    }
                                    current_block = 4166979493554389389;
                                  }
                                  _ => {
                                    q = char_search(
                                      p,
                                      (*ptr_to_globals).last_search_pattern.offset(1),
                                      dir << 1i32 | FULL as libc::c_int,
                                    );
                                    if !q.is_null() {
                                      (*ptr_to_globals).dot = q;
                                      msg = std::ptr::null()
                                    } else {
                                      p = (*ptr_to_globals).text;
                                      if dir == BACK as libc::c_int {
                                        p = (*ptr_to_globals).end.offset(-1)
                                      }
                                      q = char_search(
                                        p,
                                        (*ptr_to_globals).last_search_pattern.offset(1),
                                        dir << 1i32 | FULL as libc::c_int,
                                      );
                                      if !q.is_null() {
                                        (*ptr_to_globals).dot = q;
                                        msg = b"search hit BOTTOM, continuing at TOP\x00"
                                          as *const u8
                                          as *const libc::c_char;
                                        if dir == BACK as libc::c_int {
                                          msg = b"search hit TOP, continuing at BOTTOM\x00"
                                            as *const u8
                                            as *const libc::c_char
                                        }
                                      } else {
                                        msg = b"Pattern not found\x00" as *const u8
                                          as *const libc::c_char
                                      }
                                    }
                                    if !msg.is_null() {
                                      status_line_bold(
                                        b"%s\x00" as *const u8 as *const libc::c_char,
                                        msg,
                                      );
                                    }
                                    (*ptr_to_globals).cmdcnt -= 1;
                                    if (*ptr_to_globals).cmdcnt > 0 {
                                      current_block = 16813369756331276724;
                                    } else {
                                      break;
                                    }
                                  }
                                }
                              }
                              current_block = 15129665204879337069;
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
        102 => {
          current_block = 222014967776118151;
          match current_block {
            16992905640583886232 => {
              loop {
                if (*(*ptr_to_globals).dot as libc::c_int - 'a' as i32) as libc::c_uchar
                  as libc::c_int
                  <= 'z' as i32 - 'a' as i32
                {
                  undo_push(
                    (*ptr_to_globals).dot,
                    1i32 as libc::c_uint,
                    1i32 as libc::c_uchar,
                  );
                  *(*ptr_to_globals).dot =
                    bb_ascii_toupper(*(*ptr_to_globals).dot as libc::c_uchar) as libc::c_char;
                  undo_push(
                    (*ptr_to_globals).dot,
                    1i32 as libc::c_uint,
                    2i32 as libc::c_uchar,
                  );
                } else if (*(*ptr_to_globals).dot as libc::c_int - 'A' as i32) as libc::c_uchar
                  as libc::c_int
                  <= 'Z' as i32 - 'A' as i32
                {
                  undo_push(
                    (*ptr_to_globals).dot,
                    1i32 as libc::c_uint,
                    1i32 as libc::c_uchar,
                  );
                  *(*ptr_to_globals).dot =
                    bb_ascii_tolower(*(*ptr_to_globals).dot as libc::c_uchar) as libc::c_char;
                  undo_push(
                    (*ptr_to_globals).dot,
                    1i32 as libc::c_uint,
                    2i32 as libc::c_uchar,
                  );
                }
                dot_right();
                (*ptr_to_globals).cmdcnt -= 1;
                if !((*ptr_to_globals).cmdcnt > 0) {
                  break;
                }
              }
              end_cmd_q();
              current_block = 15129665204879337069;
            }
            8729655159604064397 => {
              c1 = get_one_char();
              cnt = 0;
              if c1 == '.' as i32 {
                cnt = (*ptr_to_globals)
                  .rows
                  .wrapping_sub(2i32 as libc::c_uint)
                  .wrapping_div(2i32 as libc::c_uint) as libc::c_int
              }
              if c1 == '-' as i32 {
                cnt = (*ptr_to_globals).rows.wrapping_sub(2i32 as libc::c_uint) as libc::c_int
              }
              (*ptr_to_globals).screenbegin = begin_line((*ptr_to_globals).dot);
              dot_scroll(cnt, -1i32);
              current_block = 15129665204879337069;
            }
            15899500648299942075 => {
              (*ptr_to_globals).last_forward_char = get_one_char();
              do_cmd(';' as i32);
              if *(*ptr_to_globals).dot as libc::c_int == (*ptr_to_globals).last_forward_char {
                dot_left();
              }
              (*ptr_to_globals).last_forward_char = 0;
              current_block = 15129665204879337069;
            }
            9051390181078481641 => {
              c1 = get_one_char();
              if *(*ptr_to_globals).dot as libc::c_int != '\n' as i32 {
                (*ptr_to_globals).dot =
                  text_hole_delete((*ptr_to_globals).dot, (*ptr_to_globals).dot, 1i32);
                (*ptr_to_globals).dot =
                  char_insert((*ptr_to_globals).dot, c1 as libc::c_char, 2i32);
                dot_left();
              }
              end_cmd_q();
              current_block = 15129665204879337069;
            }
            877115918601926659 => {
              dir = FORWARD as libc::c_int;
              if c == 'b' as i32 {
                dir = BACK as libc::c_int
              }
              while !((*ptr_to_globals).dot.offset(dir as isize) < (*ptr_to_globals).text
                || (*ptr_to_globals).dot.offset(dir as isize) > (*ptr_to_globals).end.offset(-1))
              {
                (*ptr_to_globals).dot = (*ptr_to_globals).dot.offset(dir as isize);
                if ({
                  let mut bb__isspace: libc::c_uchar =
                    (*(*ptr_to_globals).dot as libc::c_int - 9i32) as libc::c_uchar;
                  (bb__isspace as libc::c_int == ' ' as i32 - 9i32
                    || bb__isspace as libc::c_int <= 13i32 - 9i32) as libc::c_int
                }) != 0
                {
                  (*ptr_to_globals).dot = skip_thing(
                    (*ptr_to_globals).dot,
                    if c == 'e' as i32 { 2i32 } else { 1i32 },
                    dir,
                    S_OVER_WS as libc::c_int,
                  )
                }
                if bb_ascii_isalnum(*(*ptr_to_globals).dot as libc::c_uchar) != 0
                  || *(*ptr_to_globals).dot as libc::c_int == '_' as i32
                {
                  (*ptr_to_globals).dot =
                    skip_thing((*ptr_to_globals).dot, 1i32, dir, S_END_ALNUM as libc::c_int)
                } else if *strchrnul(
                  b"!\"#$%&\'()*+,-./:;<=>?@[\\]^_`{|}~\x00" as *const u8 as *const libc::c_char,
                  *(*ptr_to_globals).dot as libc::c_int,
                )
                .offset(0)
                  != 0
                {
                  (*ptr_to_globals).dot =
                    skip_thing((*ptr_to_globals).dot, 1i32, dir, S_END_PUNCT as libc::c_int)
                }
                (*ptr_to_globals).cmdcnt -= 1;
                if !((*ptr_to_globals).cmdcnt > 0) {
                  break;
                }
              }
              current_block = 15129665204879337069;
            }
            1085022737867179637 => {
              dot_begin();
              dot_skip_over_ws();
              current_block = 15129665204879337069;
            }
            3113147720494587438 => {
              c1 = get_one_char();
              if c1 != 'Z' as i32 {
                indicate_error();
              } else if (*ptr_to_globals).modified_count != 0 {
                if 1i32 != 0 && (*ptr_to_globals).readonly_mode as libc::c_int != 0 {
                  status_line_bold(
                    b"\'%s\' is read only\x00" as *const u8 as *const libc::c_char,
                    (*ptr_to_globals).current_filename,
                  );
                } else {
                  cnt = file_write(
                    (*ptr_to_globals).current_filename,
                    (*ptr_to_globals).text,
                    (*ptr_to_globals).end.offset(-1),
                  );
                  if cnt < 0 {
                    if cnt == -1i32 {
                      status_line_bold(b"Write error: %m\x00" as *const u8 as *const libc::c_char);
                    }
                  } else if cnt as libc::c_long
                    == (*ptr_to_globals)
                      .end
                      .offset(-1)
                      .wrapping_offset_from((*ptr_to_globals).text)
                      as libc::c_long
                      + 1
                  {
                    (*ptr_to_globals).editing = 0 as smallint
                  }
                }
              } else {
                (*ptr_to_globals).editing = 0 as smallint
              }
              current_block = 15129665204879337069;
            }
            12960118908218882441 => {
              p = begin_line((*ptr_to_globals).dot);
              if *p.offset(-1i32 as isize) as libc::c_int == '\n' as i32 {
                dot_prev();
                current_block = 2087484904894455135;
              } else {
                dot_begin();
                (*ptr_to_globals).dot =
                  char_insert((*ptr_to_globals).dot, '\n' as i32 as libc::c_char, 1i32);
                dot_prev();
                current_block = 8629930936610358348;
              }
            }
            8720450212473544924 => {
              (*ptr_to_globals).dot = (*ptr_to_globals).screenbegin;
              cnt = 0;
              while (cnt as libc::c_uint)
                < (*ptr_to_globals)
                  .rows
                  .wrapping_sub(1i32 as libc::c_uint)
                  .wrapping_div(2i32 as libc::c_uint)
              {
                (*ptr_to_globals).dot = next_line((*ptr_to_globals).dot);
                cnt += 1
              }
              current_block = 15129665204879337069;
            }
            13015277209715431090 => {
              (*ptr_to_globals).dot = end_screen();
              if (*ptr_to_globals).cmdcnt as libc::c_uint
                > (*ptr_to_globals).rows.wrapping_sub(1i32 as libc::c_uint)
              {
                (*ptr_to_globals).cmdcnt =
                  (*ptr_to_globals).rows.wrapping_sub(1i32 as libc::c_uint) as libc::c_int
              }
              (*ptr_to_globals).cmdcnt -= 1;
              if (*ptr_to_globals).cmdcnt > 0 {
                do_cmd('-' as i32);
              }
              dot_begin();
              dot_skip_over_ws();
              current_block = 15129665204879337069;
            }
            9800435767766781385 => {
              loop {
                dot_end();
                if (*ptr_to_globals).dot < (*ptr_to_globals).end.offset(-1) {
                  undo_push(
                    (*ptr_to_globals).dot,
                    1i32 as libc::c_uint,
                    1i32 as libc::c_uchar,
                  );
                  let fresh15 = (*ptr_to_globals).dot;
                  (*ptr_to_globals).dot = (*ptr_to_globals).dot.offset(1);
                  *fresh15 = ' ' as i32 as libc::c_char;
                  undo_push(
                    (*ptr_to_globals).dot.offset(-1),
                    1i32 as libc::c_uint,
                    2i32 as libc::c_uchar,
                  );
                  while ({
                    let mut bb__isblank: libc::c_uchar = *(*ptr_to_globals).dot as libc::c_uchar;
                    (bb__isblank as libc::c_int == ' ' as i32
                      || bb__isblank as libc::c_int == '\t' as i32)
                      as libc::c_int
                  }) != 0
                  {
                    text_hole_delete((*ptr_to_globals).dot, (*ptr_to_globals).dot, 2i32);
                  }
                }
                (*ptr_to_globals).cmdcnt -= 1;
                if !((*ptr_to_globals).cmdcnt > 0) {
                  break;
                }
              }
              end_cmd_q();
              current_block = 15129665204879337069;
            }
            3432363526595694666 => {
              dot_begin();
              dot_skip_over_ws();
              current_block = 3268579060917229304;
            }
            3494829253343353619 => {
              (*ptr_to_globals).dot = (*ptr_to_globals).screenbegin;
              if (*ptr_to_globals).cmdcnt as libc::c_uint
                > (*ptr_to_globals).rows.wrapping_sub(1i32 as libc::c_uint)
              {
                (*ptr_to_globals).cmdcnt =
                  (*ptr_to_globals).rows.wrapping_sub(1i32 as libc::c_uint) as libc::c_int
              }
              (*ptr_to_globals).cmdcnt -= 1;
              if (*ptr_to_globals).cmdcnt > 0 {
                do_cmd('+' as i32);
              }
              dot_skip_over_ws();
              current_block = 15129665204879337069;
            }
            17973101765331640574 => {
              c1 = get_one_char();
              if c1 != 'g' as i32 {
                buf[0] = 'g' as i32 as libc::c_char;
                buf[1] = if c1 >= 0 { c1 } else { '*' as i32 } as libc::c_char;
                buf[2] = '\u{0}' as i32 as libc::c_char;
                not_implemented(buf.as_mut_ptr());
                current_block = 15129665204879337069;
              } else {
                if (*ptr_to_globals).cmdcnt == 0 {
                  (*ptr_to_globals).cmdcnt = 1i32
                }
                current_block = 11945623545738147997;
              }
            }
            16546625800574160972 => {
              save_dot = (*ptr_to_globals).dot;
              (*ptr_to_globals).dot = dollar_line((*ptr_to_globals).dot);
              (*ptr_to_globals).dot = yank_delete(
                save_dot,
                (*ptr_to_globals).dot,
                0,
                YANKDEL as libc::c_int,
                1i32,
              );
              if c == 'C' as i32 {
                current_block = 8629930936610358348;
              } else {
                if c == 'D' as i32 {
                  end_cmd_q();
                }
                current_block = 15129665204879337069;
              }
            }
            11937696639986586685 => {
              cnt = count_lines((*ptr_to_globals).text, (*ptr_to_globals).dot);
              c1 = get_one_char();
              find_range(&mut p, &mut q, c1 as libc::c_char);
              yank_delete(p, q, 1i32, YANKONLY as libc::c_int, 0);
              p = begin_line(p);
              q = end_line(q);
              i = count_lines(p, q);
              while i > 0 {
                if c == '<' as i32 {
                  if *p as libc::c_int == '\t' as i32 {
                    text_hole_delete(p, p, 0);
                  } else if *p as libc::c_int == ' ' as i32 {
                    j = 0;
                    while *p as libc::c_int == ' ' as i32 && j < (*ptr_to_globals).tabstop {
                      text_hole_delete(p, p, 0);
                      j += 1
                    }
                  }
                } else if c == '>' as i32 {
                  char_insert(p, '\t' as i32 as libc::c_char, 1i32);
                }
                i -= 1;
                p = next_line(p)
              }
              (*ptr_to_globals).dot = find_line(cnt);
              dot_skip_over_ws();
              end_cmd_q();
              current_block = 15129665204879337069;
            }
            17725350714912028156 => {
              p = get_input_line(b":\x00" as *const u8 as *const libc::c_char);
              colon(p);
              current_block = 15129665204879337069;
            }
            14526470074083880812 => {
              q = char_search(
                (*ptr_to_globals).dot,
                b"\n\n\x00" as *const u8 as *const libc::c_char,
                (FORWARD as libc::c_int) << 1i32 | FULL as libc::c_int,
              );
              if !q.is_null() {
                (*ptr_to_globals).dot = next_line(q)
              }
              current_block = 15129665204879337069;
            }
            8893187391306414141 => {
              q = char_search(
                (*ptr_to_globals).dot,
                b"\n\n\x00" as *const u8 as *const libc::c_char,
                ((BACK as libc::c_int as libc::c_uint) << 1i32
                  | FULL as libc::c_int as libc::c_uint) as libc::c_int,
              );
              if !q.is_null() {
                (*ptr_to_globals).dot = next_line(q)
              }
              current_block = 15129665204879337069;
            }
            7021673758293221412 => {
              dir = BACK as libc::c_int;
              p = (*ptr_to_globals).dot.offset(-1);
              if *(*ptr_to_globals).last_search_pattern.offset(0) as libc::c_int == '?' as i32 {
                dir = FORWARD as libc::c_int;
                p = (*ptr_to_globals).dot.offset(1)
              }
              current_block = 4166979493554389389;
            }
            18374191879090272823 => {
              buf[0] = c as libc::c_char;
              buf[1] = '\u{0}' as i32 as libc::c_char;
              q = get_input_line(buf.as_mut_ptr());
              if *q.offset(0) as libc::c_int != 0 && *q.offset(1) == 0 {
                if *(*ptr_to_globals).last_search_pattern.offset(0) != 0 {
                  *(*ptr_to_globals).last_search_pattern.offset(0) = c as libc::c_char
                }
                current_block = 7392824444931029276;
              } else if *q.offset(0) != 0 {
                free((*ptr_to_globals).last_search_pattern as *mut libc::c_void);
                (*ptr_to_globals).last_search_pattern = crate::libbb::xfuncs_printf::xstrdup(q);
                current_block = 7392824444931029276;
              } else {
                current_block = 15129665204879337069;
              }
            }
            16407828456666301883 => {
              if (*ptr_to_globals).last_forward_char == 0 {
                current_block = 15129665204879337069;
              } else {
                loop {
                  q = (*ptr_to_globals).dot.offset(-1);
                  while q >= (*ptr_to_globals).text
                    && *q as libc::c_int != '\n' as i32
                    && *q as libc::c_int != (*ptr_to_globals).last_forward_char
                  {
                    q = q.offset(-1)
                  }
                  if q >= (*ptr_to_globals).text
                    && *q as libc::c_int == (*ptr_to_globals).last_forward_char
                  {
                    (*ptr_to_globals).dot = q
                  }
                  (*ptr_to_globals).cmdcnt -= 1;
                  if !((*ptr_to_globals).cmdcnt > 0) {
                    break;
                  }
                }
                current_block = 15129665204879337069;
              }
            }
            9018432604062702004 => {
              q = (*ptr_to_globals).dot;
              while q < (*ptr_to_globals).end && *q as libc::c_int != '\n' as i32 {
                if !strchr(
                  b"()[]{}\x00" as *const u8 as *const libc::c_char,
                  *q as libc::c_int,
                )
                .is_null()
                {
                  p = find_pair(q, *q);
                  if p.is_null() {
                    indicate_error();
                  } else {
                    (*ptr_to_globals).dot = p
                  }
                  break;
                } else {
                  q = q.offset(1)
                }
              }
              if *q as libc::c_int == '\n' as i32 {
                indicate_error();
              }
              current_block = 15129665204879337069;
            }
            10247103787464459848 => {
              p = (*ptr_to_globals).reg[(*ptr_to_globals).YDreg as usize];
              if p.is_null() {
                status_line_bold(
                  b"Nothing in register %c\x00" as *const u8 as *const libc::c_char,
                  what_reg() as libc::c_int,
                );
              } else {
                if !strchr(p, '\n' as i32).is_null() {
                  if c == 'P' as i32 {
                    dot_begin();
                  }
                  if c == 'p' as i32 {
                    if end_line((*ptr_to_globals).dot) == (*ptr_to_globals).end.offset(-1) {
                      (*ptr_to_globals).dot = (*ptr_to_globals).end
                    } else {
                      dot_next();
                    }
                  }
                } else if c == 'p' as i32 {
                  dot_right();
                }
                string_insert((*ptr_to_globals).dot, p, 1i32);
                end_cmd_q();
              }
              current_block = 15129665204879337069;
            }
            15260732871948875843 => {
              c1 = (get_one_char() | 0x20i32) - 'a' as i32;
              if c1 as libc::c_uint <= 25i32 as libc::c_uint {
                (*ptr_to_globals).mark[c1 as usize] = (*ptr_to_globals).dot
              } else {
                indicate_error();
              }
              current_block = 15129665204879337069;
            }
            12738322036487086035 => {
              c1 = get_one_char() | 0x20i32;
              if (c1 - 'a' as i32) as libc::c_uint <= 25i32 as libc::c_uint {
                c1 = c1 - 'a' as i32;
                q = (*ptr_to_globals).mark[c1 as usize];
                if (*ptr_to_globals).text <= q && q < (*ptr_to_globals).end {
                  (*ptr_to_globals).dot = q;
                  dot_begin();
                  dot_skip_over_ws();
                }
              } else if c1 == '\'' as i32 {
                (*ptr_to_globals).dot = swap_context((*ptr_to_globals).dot);
                dot_begin();
                dot_skip_over_ws();
              } else {
                indicate_error();
              }
              current_block = 15129665204879337069;
            }
            13255096073384561358 => {
              c1 = (get_one_char() | 0x20i32) - 'a' as i32;
              if c1 as libc::c_uint <= 25i32 as libc::c_uint {
                (*ptr_to_globals).YDreg = c1 as smalluint
              } else {
                indicate_error();
              }
              current_block = 15129665204879337069;
            }
            10258711639984089377 => {
              if (*ptr_to_globals).cmd_mode as libc::c_int == 0 {
                indicate_error();
              }
              (*ptr_to_globals).cmd_mode = 0 as smallint;
              undo_queue_commit();
              end_cmd_q();
              (*ptr_to_globals).last_status_cksum = 0;
              current_block = 15129665204879337069;
            }
            11439127087547047736 => {
              buf[0] = c as libc::c_char;
              buf[1] = '\u{0}' as i32 as libc::c_char;
              not_implemented(buf.as_mut_ptr());
              end_cmd_q();
              current_block = 17440971994642376514;
            }
            7961798899781870241 => {
              dot_scroll(
                (*ptr_to_globals).rows.wrapping_sub(2i32 as libc::c_uint) as libc::c_int,
                -1i32,
              );
              current_block = 15129665204879337069;
            }
            9426343755402444879 => {
              dot_scroll(
                (*ptr_to_globals)
                  .rows
                  .wrapping_sub(2i32 as libc::c_uint)
                  .wrapping_div(2i32 as libc::c_uint) as libc::c_int,
                1i32,
              );
              current_block = 15129665204879337069;
            }
            13352459794680105913 => {
              dot_scroll(1i32, 1i32);
              current_block = 15129665204879337069;
            }
            14142272253464333006 => {
              dot_scroll(
                (*ptr_to_globals).rows.wrapping_sub(2i32 as libc::c_uint) as libc::c_int,
                1i32,
              );
              current_block = 15129665204879337069;
            }
            10758177197742640066 => {
              (*ptr_to_globals).last_status_cksum = 0;
              current_block = 15129665204879337069;
            }
            6152256259730122749 => {
              current_block = 7534742345255184552;
            }
            12883932598258173301 => {
              current_block = 8800996768013373992;
            }
            11242998110520238401 => {
              redraw(1i32);
              current_block = 15129665204879337069;
            }
            13619733043935729992 => {
              loop {
                dot_next();
                dot_skip_over_ws();
                (*ptr_to_globals).cmdcnt -= 1;
                if !((*ptr_to_globals).cmdcnt > 0) {
                  break;
                }
              }
              current_block = 15129665204879337069;
            }
            9339065157412720613 => {
              dot_scroll(
                (*ptr_to_globals)
                  .rows
                  .wrapping_sub(2i32 as libc::c_uint)
                  .wrapping_div(2i32 as libc::c_uint) as libc::c_int,
                -1i32,
              );
              current_block = 15129665204879337069;
            }
            11447082683497798022 => {
              dot_scroll(1i32, -1i32);
              current_block = 15129665204879337069;
            }
            5182000506326660482 => {
              current_block = 13993698454868426881;
            }
            1105010766850597332 => {
              if !(*ptr_to_globals).reg[27].is_null() {
                p = begin_line((*ptr_to_globals).dot);
                q = end_line((*ptr_to_globals).dot);
                p = text_hole_delete(p, q, 1i32);
                p = p.offset(string_insert(p, (*ptr_to_globals).reg[27], 2i32) as isize);
                (*ptr_to_globals).dot = p;
                dot_skip_over_ws();
              }
              current_block = 15129665204879337069;
            }
            8616046655533110204 => {
              undo_pop();
              current_block = 15129665204879337069;
            }
            5127767458142431603 => {
              loop {
                (*ptr_to_globals).dot = end_line((*ptr_to_globals).dot);
                (*ptr_to_globals).cmdcnt -= 1;
                if (*ptr_to_globals).cmdcnt <= 0 {
                  break;
                }
                dot_next();
              }
              current_block = 15129665204879337069;
            }
            222014967776118151 => {
              (*ptr_to_globals).last_forward_char = get_one_char();
              current_block = 7856905509180742666;
            }
            11209792479411604110 => {
              loop {
                dot_prev();
                dot_skip_over_ws();
                (*ptr_to_globals).cmdcnt -= 1;
                if !((*ptr_to_globals).cmdcnt > 0) {
                  break;
                }
              }
              current_block = 15129665204879337069;
            }
            3364823792826654116 => {
              if (*ptr_to_globals).lmc_len != 0 {
                (*ptr_to_globals).ioq_start = crate::libbb::xfuncs_printf::xstrndup(
                  (*ptr_to_globals).last_modifying_cmd.as_mut_ptr(),
                  (*ptr_to_globals).lmc_len,
                );
                (*ptr_to_globals).ioq = (*ptr_to_globals).ioq_start
              }
              current_block = 15129665204879337069;
            }
            18096603330221575131 => {
              current_block = 17498168302144015873;
            }
            16891123271837848903 => {
              dot_end();
              current_block = 1752638907092016026;
            }
            8517235759107662071 => {
              current_block = 5847749760081351726;
            }
            12525254419223051704 => {
              if (*ptr_to_globals).dot < (*ptr_to_globals).end.offset(-1) {
                (*ptr_to_globals).dot = yank_delete(
                  (*ptr_to_globals).dot,
                  (*ptr_to_globals).dot,
                  1i32,
                  YANKDEL as libc::c_int,
                  1i32,
                )
              }
              current_block = 15129665204879337069;
            }
            15232911949322867522 => {
              current_block = 17251831742223396249;
            }
            10863374208794025069 => {
              current_block = 1895262434596074581;
            }
            451126677064669119 => {
              loop {
                dot_prev();
                (*ptr_to_globals).dot = move_to_col(
                  (*ptr_to_globals).dot,
                  (*ptr_to_globals).ccol + (*ptr_to_globals).offset,
                );
                (*ptr_to_globals).cmdcnt -= 1;
                if !((*ptr_to_globals).cmdcnt > 0) {
                  break;
                }
              }
              current_block = 15129665204879337069;
            }
            4611735929166613116 => {
              loop {
                if bb_ascii_isalnum(*(*ptr_to_globals).dot as libc::c_uchar) != 0
                  || *(*ptr_to_globals).dot as libc::c_int == '_' as i32
                {
                  (*ptr_to_globals).dot = skip_thing(
                    (*ptr_to_globals).dot,
                    1i32,
                    FORWARD as libc::c_int,
                    S_END_ALNUM as libc::c_int,
                  )
                } else if *strchrnul(
                  b"!\"#$%&\'()*+,-./:;<=>?@[\\]^_`{|}~\x00" as *const u8 as *const libc::c_char,
                  *(*ptr_to_globals).dot as libc::c_int,
                )
                .offset(0)
                  != 0
                {
                  (*ptr_to_globals).dot = skip_thing(
                    (*ptr_to_globals).dot,
                    1i32,
                    FORWARD as libc::c_int,
                    S_END_PUNCT as libc::c_int,
                  )
                }
                if (*ptr_to_globals).dot < (*ptr_to_globals).end.offset(-1) {
                  (*ptr_to_globals).dot = (*ptr_to_globals).dot.offset(1)
                }
                if ({
                  let mut bb__isspace: libc::c_uchar =
                    (*(*ptr_to_globals).dot as libc::c_int - 9i32) as libc::c_uchar;
                  (bb__isspace as libc::c_int == ' ' as i32 - 9i32
                    || bb__isspace as libc::c_int <= 13i32 - 9i32) as libc::c_int
                }) != 0
                {
                  (*ptr_to_globals).dot = skip_thing(
                    (*ptr_to_globals).dot,
                    2i32,
                    FORWARD as libc::c_int,
                    S_OVER_WS as libc::c_int,
                  )
                }
                (*ptr_to_globals).cmdcnt -= 1;
                if !((*ptr_to_globals).cmdcnt > 0) {
                  break;
                }
              }
              current_block = 15129665204879337069;
            }
            4386451087681909888 => {
              (*ptr_to_globals).dot =
                move_to_col((*ptr_to_globals).dot, (*ptr_to_globals).cmdcnt - 1i32);
              current_block = 15129665204879337069;
            }
            1296397779060594135 => {
              dot_begin();
              current_block = 15129665204879337069;
            }
            _ => {}
          }
          match current_block {
            15129665204879337069 => {}
            8629930936610358348 => {}
            _ => {
              match current_block {
                17251831742223396249 => {
                  dir = 0;
                  if c == 'X' as i32 {
                    dir = -1i32
                  }
                  loop {
                    if *(*ptr_to_globals).dot.offset(dir as isize) as libc::c_int != '\n' as i32 {
                      if c == 'X' as i32 {
                        (*ptr_to_globals).dot = (*ptr_to_globals).dot.offset(-1)
                      }
                      (*ptr_to_globals).dot = yank_delete(
                        (*ptr_to_globals).dot,
                        (*ptr_to_globals).dot,
                        0,
                        YANKDEL as libc::c_int,
                        1i32,
                      )
                    }
                    (*ptr_to_globals).cmdcnt -= 1;
                    if !((*ptr_to_globals).cmdcnt > 0) {
                      break;
                    }
                  }
                  end_cmd_q();
                  if c == 's' as i32 {
                    current_block = 8629930936610358348;
                  } else {
                    current_block = 15129665204879337069;
                  }
                }
                2087484904894455135 => {
                  dot_end();
                  (*ptr_to_globals).dot =
                    char_insert((*ptr_to_globals).dot, '\n' as i32 as libc::c_char, 1i32);
                  current_block = 8629930936610358348;
                }
                11945623545738147997 => {
                  (*ptr_to_globals).dot = (*ptr_to_globals).end.offset(-1);
                  if (*ptr_to_globals).cmdcnt > 0 {
                    (*ptr_to_globals).dot = find_line((*ptr_to_globals).cmdcnt)
                  }
                  dot_skip_over_ws();
                  current_block = 15129665204879337069;
                }
                5847749760081351726 => {
                  dir = FORWARD as libc::c_int;
                  if c == 'B' as i32 {
                    dir = BACK as libc::c_int
                  }
                  loop {
                    if c == 'W' as i32
                      || ({
                        let mut bb__isspace: libc::c_uchar =
                          (*(*ptr_to_globals).dot.offset(dir as isize) as libc::c_int - 9i32)
                            as libc::c_uchar;
                        (bb__isspace as libc::c_int == ' ' as i32 - 9i32
                          || bb__isspace as libc::c_int <= 13i32 - 9i32)
                          as libc::c_int
                      }) != 0
                    {
                      (*ptr_to_globals).dot =
                        skip_thing((*ptr_to_globals).dot, 1i32, dir, S_TO_WS as libc::c_int);
                      (*ptr_to_globals).dot =
                        skip_thing((*ptr_to_globals).dot, 2i32, dir, S_OVER_WS as libc::c_int)
                    }
                    if c != 'W' as i32 {
                      (*ptr_to_globals).dot =
                        skip_thing((*ptr_to_globals).dot, 1i32, dir, S_BEFORE_WS as libc::c_int)
                    }
                    (*ptr_to_globals).cmdcnt -= 1;
                    if !((*ptr_to_globals).cmdcnt > 0) {
                      break;
                    }
                  }
                  current_block = 15129665204879337069;
                }
                17440971994642376514 => {
                  current_block = 15129665204879337069;
                }
                7534742345255184552 => {
                  current_block = 17247297260531395789;
                }
                8800996768013373992 => {
                  loop {
                    dot_next();
                    (*ptr_to_globals).dot = move_to_col(
                      (*ptr_to_globals).dot,
                      (*ptr_to_globals).ccol + (*ptr_to_globals).offset,
                    );
                    (*ptr_to_globals).cmdcnt -= 1;
                    if !((*ptr_to_globals).cmdcnt > 0) {
                      break;
                    }
                  }
                  current_block = 15129665204879337069;
                }
                13993698454868426881 => {
                  loop {
                    dot_right();
                    (*ptr_to_globals).cmdcnt -= 1;
                    if !((*ptr_to_globals).cmdcnt > 0) {
                      break;
                    }
                  }
                  current_block = 15129665204879337069;
                }
                7856905509180742666 => {
                  while !((*ptr_to_globals).last_forward_char == 0) {
                    q = (*ptr_to_globals).dot.offset(1);
                    while q < (*ptr_to_globals).end.offset(-1)
                      && *q as libc::c_int != '\n' as i32
                      && *q as libc::c_int != (*ptr_to_globals).last_forward_char
                    {
                      q = q.offset(1)
                    }
                    if *q as libc::c_int == (*ptr_to_globals).last_forward_char {
                      (*ptr_to_globals).dot = q
                    }
                    (*ptr_to_globals).cmdcnt -= 1;
                    if !((*ptr_to_globals).cmdcnt > 0) {
                      break;
                    }
                  }
                  current_block = 15129665204879337069;
                }
                17498168302144015873 => {
                  current_block = 8681395796513813967;
                }
                1752638907092016026 => {
                  if *(*ptr_to_globals).dot as libc::c_int != '\n' as i32 {
                    (*ptr_to_globals).dot = (*ptr_to_globals).dot.offset(1)
                  }
                  current_block = 8629930936610358348;
                }
                3268579060917229304 => {
                  current_block = 8629930936610358348;
                }
                1895262434596074581 => {
                  current_block = 8908416993177701018;
                }
                _ => {}
              }
              match current_block {
                8629930936610358348 => {}
                15129665204879337069 => {}
                _ => {
                  match current_block {
                    17247297260531395789 => {
                      loop {
                        dot_left();
                        (*ptr_to_globals).cmdcnt -= 1;
                        if !((*ptr_to_globals).cmdcnt > 0) {
                          break;
                        }
                      }
                      current_block = 15129665204879337069;
                    }
                    8681395796513813967 => {
                      current_block = 5591548203144509315;
                    }
                    8908416993177701018 => {
                      current_block = 16124761010012532485;
                    }
                    _ => {}
                  }
                  match current_block {
                    15129665204879337069 => {}
                    _ => {
                      match current_block {
                        16124761010012532485 => {
                          let mut yf: libc::c_int = 0;
                          let mut ml: libc::c_int = 0;
                          let mut whole: libc::c_int = 0;
                          yf = YANKDEL as libc::c_int;
                          if c == 'y' as i32 || c == 'Y' as i32 {
                            yf = YANKONLY as libc::c_int
                          }
                          c1 = 'y' as i32;
                          if c != 'Y' as i32 {
                            c1 = get_one_char()
                          }
                          ml = find_range(&mut p, &mut q, c1 as libc::c_char);
                          place_cursor(0i32, 0);
                          if c1 == 27i32 {
                            c1 = 27i32;
                            c = c1
                          } else if !strchr(b"wW\x00" as *const u8 as *const libc::c_char, c1)
                            .is_null()
                          {
                            ml = 0;
                            if c == 'c' as i32 {
                              while ({
                                let mut bb__isspace: libc::c_uchar =
                                  (*q as libc::c_int - 9i32) as libc::c_uchar;
                                (bb__isspace as libc::c_int == ' ' as i32 - 9i32
                                  || bb__isspace as libc::c_int <= 13i32 - 9i32)
                                  as libc::c_int
                              }) != 0
                                && q > p
                              {
                                q = q.offset(-1)
                              }
                            }
                            (*ptr_to_globals).dot = yank_delete(p, q, ml, yf, 1i32)
                          } else if !strchr(
                            b"^0bBeEft%$ lh\x08\x7f\x00" as *const u8 as *const libc::c_char,
                            c1,
                          )
                          .is_null()
                          {
                            (*ptr_to_globals).dot = yank_delete(p, q, ml, yf, 1i32)
                          } else if !strchr(
                            b"cdykjGHL+-{}\r\n\x00" as *const u8 as *const libc::c_char,
                            c1,
                          )
                          .is_null()
                          {
                            (*ptr_to_globals).dot = yank_delete(p, q, ml, yf, 1i32);
                            whole = 1i32
                          } else {
                            c1 = 27i32;
                            c = c1;
                            ml = 0;
                            indicate_error();
                          }
                          if ml != 0 && whole != 0 {
                            if c == 'c' as i32 {
                              (*ptr_to_globals).dot = char_insert(
                                (*ptr_to_globals).dot,
                                '\n' as i32 as libc::c_char,
                                2i32,
                              );
                              if whole != 0
                                && (*ptr_to_globals).dot != (*ptr_to_globals).end.offset(-1)
                              {
                                dot_prev();
                              }
                            } else if c == 'd' as i32 {
                              dot_begin();
                              dot_skip_over_ws();
                            }
                          }
                          if c1 != 27i32 {
                            if c == 'c' as i32 {
                              strcpy(
                                buf.as_mut_ptr(),
                                b"Change\x00" as *const u8 as *const libc::c_char,
                              );
                              current_block = 8629930936610358348;
                            } else {
                              if c == 'd' as i32 {
                                strcpy(
                                  buf.as_mut_ptr(),
                                  b"Delete\x00" as *const u8 as *const libc::c_char,
                                );
                              }
                              if c == 'y' as i32 || c == 'Y' as i32 {
                                strcpy(
                                  buf.as_mut_ptr(),
                                  b"Yank\x00" as *const u8 as *const libc::c_char,
                                );
                              }
                              p = (*ptr_to_globals).reg[(*ptr_to_globals).YDreg as usize];
                              q = p.offset(strlen(p) as isize);
                              cnt = 0;
                              while p <= q {
                                if *p as libc::c_int == '\n' as i32 {
                                  cnt += 1
                                }
                                p = p.offset(1)
                              }
                              status_line(
                                b"%s %u lines (%u chars) using [%c]\x00" as *const u8
                                  as *const libc::c_char,
                                buf.as_mut_ptr(),
                                cnt,
                                strlen((*ptr_to_globals).reg[(*ptr_to_globals).YDreg as usize])
                                  as libc::c_uint,
                                what_reg() as libc::c_int,
                              );
                              end_cmd_q();
                              current_block = 15129665204879337069;
                            }
                          } else {
                            current_block = 15129665204879337069;
                          }
                        }
                        5591548203144509315 => {
                          current_block = 2636677179867529885;
                        }
                        _ => {}
                      }
                      match current_block {
                        15129665204879337069 => {}
                        8629930936610358348 => {}
                        _ => {
                          match current_block {
                            2636677179867529885 => {
                              current_block = 12309206730560524281;
                            }
                            _ => {}
                          }
                          match current_block {
                            12309206730560524281 => {
                              current_block = 3325768110057758661;
                            }
                            _ => {}
                          }
                          match current_block {
                            3325768110057758661 => {
                              current_block = 14815832896553429982;
                            }
                            _ => {}
                          }
                          match current_block {
                            14815832896553429982 => {
                              current_block = 10731695520297161438;
                            }
                            _ => {}
                          }
                          match current_block {
                            10731695520297161438 => {
                              if c == '0' as i32 && (*ptr_to_globals).cmdcnt < 1i32 {
                                dot_begin();
                              } else {
                                (*ptr_to_globals).cmdcnt =
                                  (*ptr_to_globals).cmdcnt * 10i32 + (c - '0' as i32)
                              }
                              current_block = 15129665204879337069;
                            }
                            _ => {}
                          }
                          match current_block {
                            15129665204879337069 => {}
                            _ => {
                              loop {
                                match current_block {
                                  16813369756331276724 => {
                                    msg = std::ptr::null();
                                    current_block = 7392824444931029276;
                                  }
                                  7392824444931029276 => {
                                    dir = FORWARD as libc::c_int;
                                    p = (*ptr_to_globals).dot.offset(1);
                                    if *(*ptr_to_globals).last_search_pattern.offset(0)
                                      as libc::c_int
                                      == '?' as i32
                                    {
                                      dir = BACK as libc::c_int;
                                      p = (*ptr_to_globals).dot.offset(-1)
                                    }
                                    current_block = 4166979493554389389;
                                  }
                                  _ => {
                                    q = char_search(
                                      p,
                                      (*ptr_to_globals).last_search_pattern.offset(1),
                                      dir << 1i32 | FULL as libc::c_int,
                                    );
                                    if !q.is_null() {
                                      (*ptr_to_globals).dot = q;
                                      msg = std::ptr::null()
                                    } else {
                                      p = (*ptr_to_globals).text;
                                      if dir == BACK as libc::c_int {
                                        p = (*ptr_to_globals).end.offset(-1)
                                      }
                                      q = char_search(
                                        p,
                                        (*ptr_to_globals).last_search_pattern.offset(1),
                                        dir << 1i32 | FULL as libc::c_int,
                                      );
                                      if !q.is_null() {
                                        (*ptr_to_globals).dot = q;
                                        msg = b"search hit BOTTOM, continuing at TOP\x00"
                                          as *const u8
                                          as *const libc::c_char;
                                        if dir == BACK as libc::c_int {
                                          msg = b"search hit TOP, continuing at BOTTOM\x00"
                                            as *const u8
                                            as *const libc::c_char
                                        }
                                      } else {
                                        msg = b"Pattern not found\x00" as *const u8
                                          as *const libc::c_char
                                      }
                                    }
                                    if !msg.is_null() {
                                      status_line_bold(
                                        b"%s\x00" as *const u8 as *const libc::c_char,
                                        msg,
                                      );
                                    }
                                    (*ptr_to_globals).cmdcnt -= 1;
                                    if (*ptr_to_globals).cmdcnt > 0 {
                                      current_block = 16813369756331276724;
                                    } else {
                                      break;
                                    }
                                  }
                                }
                              }
                              current_block = 15129665204879337069;
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
        59 => {
          current_block = 7856905509180742666;
          match current_block {
            16992905640583886232 => {
              loop {
                if (*(*ptr_to_globals).dot as libc::c_int - 'a' as i32) as libc::c_uchar
                  as libc::c_int
                  <= 'z' as i32 - 'a' as i32
                {
                  undo_push(
                    (*ptr_to_globals).dot,
                    1i32 as libc::c_uint,
                    1i32 as libc::c_uchar,
                  );
                  *(*ptr_to_globals).dot =
                    bb_ascii_toupper(*(*ptr_to_globals).dot as libc::c_uchar) as libc::c_char;
                  undo_push(
                    (*ptr_to_globals).dot,
                    1i32 as libc::c_uint,
                    2i32 as libc::c_uchar,
                  );
                } else if (*(*ptr_to_globals).dot as libc::c_int - 'A' as i32) as libc::c_uchar
                  as libc::c_int
                  <= 'Z' as i32 - 'A' as i32
                {
                  undo_push(
                    (*ptr_to_globals).dot,
                    1i32 as libc::c_uint,
                    1i32 as libc::c_uchar,
                  );
                  *(*ptr_to_globals).dot =
                    bb_ascii_tolower(*(*ptr_to_globals).dot as libc::c_uchar) as libc::c_char;
                  undo_push(
                    (*ptr_to_globals).dot,
                    1i32 as libc::c_uint,
                    2i32 as libc::c_uchar,
                  );
                }
                dot_right();
                (*ptr_to_globals).cmdcnt -= 1;
                if !((*ptr_to_globals).cmdcnt > 0) {
                  break;
                }
              }
              end_cmd_q();
              current_block = 15129665204879337069;
            }
            8729655159604064397 => {
              c1 = get_one_char();
              cnt = 0;
              if c1 == '.' as i32 {
                cnt = (*ptr_to_globals)
                  .rows
                  .wrapping_sub(2i32 as libc::c_uint)
                  .wrapping_div(2i32 as libc::c_uint) as libc::c_int
              }
              if c1 == '-' as i32 {
                cnt = (*ptr_to_globals).rows.wrapping_sub(2i32 as libc::c_uint) as libc::c_int
              }
              (*ptr_to_globals).screenbegin = begin_line((*ptr_to_globals).dot);
              dot_scroll(cnt, -1i32);
              current_block = 15129665204879337069;
            }
            15899500648299942075 => {
              (*ptr_to_globals).last_forward_char = get_one_char();
              do_cmd(';' as i32);
              if *(*ptr_to_globals).dot as libc::c_int == (*ptr_to_globals).last_forward_char {
                dot_left();
              }
              (*ptr_to_globals).last_forward_char = 0;
              current_block = 15129665204879337069;
            }
            9051390181078481641 => {
              c1 = get_one_char();
              if *(*ptr_to_globals).dot as libc::c_int != '\n' as i32 {
                (*ptr_to_globals).dot =
                  text_hole_delete((*ptr_to_globals).dot, (*ptr_to_globals).dot, 1i32);
                (*ptr_to_globals).dot =
                  char_insert((*ptr_to_globals).dot, c1 as libc::c_char, 2i32);
                dot_left();
              }
              end_cmd_q();
              current_block = 15129665204879337069;
            }
            877115918601926659 => {
              dir = FORWARD as libc::c_int;
              if c == 'b' as i32 {
                dir = BACK as libc::c_int
              }
              while !((*ptr_to_globals).dot.offset(dir as isize) < (*ptr_to_globals).text
                || (*ptr_to_globals).dot.offset(dir as isize) > (*ptr_to_globals).end.offset(-1))
              {
                (*ptr_to_globals).dot = (*ptr_to_globals).dot.offset(dir as isize);
                if ({
                  let mut bb__isspace: libc::c_uchar =
                    (*(*ptr_to_globals).dot as libc::c_int - 9i32) as libc::c_uchar;
                  (bb__isspace as libc::c_int == ' ' as i32 - 9i32
                    || bb__isspace as libc::c_int <= 13i32 - 9i32) as libc::c_int
                }) != 0
                {
                  (*ptr_to_globals).dot = skip_thing(
                    (*ptr_to_globals).dot,
                    if c == 'e' as i32 { 2i32 } else { 1i32 },
                    dir,
                    S_OVER_WS as libc::c_int,
                  )
                }
                if bb_ascii_isalnum(*(*ptr_to_globals).dot as libc::c_uchar) != 0
                  || *(*ptr_to_globals).dot as libc::c_int == '_' as i32
                {
                  (*ptr_to_globals).dot =
                    skip_thing((*ptr_to_globals).dot, 1i32, dir, S_END_ALNUM as libc::c_int)
                } else if *strchrnul(
                  b"!\"#$%&\'()*+,-./:;<=>?@[\\]^_`{|}~\x00" as *const u8 as *const libc::c_char,
                  *(*ptr_to_globals).dot as libc::c_int,
                )
                .offset(0)
                  != 0
                {
                  (*ptr_to_globals).dot =
                    skip_thing((*ptr_to_globals).dot, 1i32, dir, S_END_PUNCT as libc::c_int)
                }
                (*ptr_to_globals).cmdcnt -= 1;
                if !((*ptr_to_globals).cmdcnt > 0) {
                  break;
                }
              }
              current_block = 15129665204879337069;
            }
            1085022737867179637 => {
              dot_begin();
              dot_skip_over_ws();
              current_block = 15129665204879337069;
            }
            3113147720494587438 => {
              c1 = get_one_char();
              if c1 != 'Z' as i32 {
                indicate_error();
              } else if (*ptr_to_globals).modified_count != 0 {
                if 1i32 != 0 && (*ptr_to_globals).readonly_mode as libc::c_int != 0 {
                  status_line_bold(
                    b"\'%s\' is read only\x00" as *const u8 as *const libc::c_char,
                    (*ptr_to_globals).current_filename,
                  );
                } else {
                  cnt = file_write(
                    (*ptr_to_globals).current_filename,
                    (*ptr_to_globals).text,
                    (*ptr_to_globals).end.offset(-1),
                  );
                  if cnt < 0 {
                    if cnt == -1i32 {
                      status_line_bold(b"Write error: %m\x00" as *const u8 as *const libc::c_char);
                    }
                  } else if cnt as libc::c_long
                    == (*ptr_to_globals)
                      .end
                      .offset(-1)
                      .wrapping_offset_from((*ptr_to_globals).text)
                      as libc::c_long
                      + 1
                  {
                    (*ptr_to_globals).editing = 0 as smallint
                  }
                }
              } else {
                (*ptr_to_globals).editing = 0 as smallint
              }
              current_block = 15129665204879337069;
            }
            12960118908218882441 => {
              p = begin_line((*ptr_to_globals).dot);
              if *p.offset(-1i32 as isize) as libc::c_int == '\n' as i32 {
                dot_prev();
                current_block = 2087484904894455135;
              } else {
                dot_begin();
                (*ptr_to_globals).dot =
                  char_insert((*ptr_to_globals).dot, '\n' as i32 as libc::c_char, 1i32);
                dot_prev();
                current_block = 8629930936610358348;
              }
            }
            8720450212473544924 => {
              (*ptr_to_globals).dot = (*ptr_to_globals).screenbegin;
              cnt = 0;
              while (cnt as libc::c_uint)
                < (*ptr_to_globals)
                  .rows
                  .wrapping_sub(1i32 as libc::c_uint)
                  .wrapping_div(2i32 as libc::c_uint)
              {
                (*ptr_to_globals).dot = next_line((*ptr_to_globals).dot);
                cnt += 1
              }
              current_block = 15129665204879337069;
            }
            13015277209715431090 => {
              (*ptr_to_globals).dot = end_screen();
              if (*ptr_to_globals).cmdcnt as libc::c_uint
                > (*ptr_to_globals).rows.wrapping_sub(1i32 as libc::c_uint)
              {
                (*ptr_to_globals).cmdcnt =
                  (*ptr_to_globals).rows.wrapping_sub(1i32 as libc::c_uint) as libc::c_int
              }
              (*ptr_to_globals).cmdcnt -= 1;
              if (*ptr_to_globals).cmdcnt > 0 {
                do_cmd('-' as i32);
              }
              dot_begin();
              dot_skip_over_ws();
              current_block = 15129665204879337069;
            }
            9800435767766781385 => {
              loop {
                dot_end();
                if (*ptr_to_globals).dot < (*ptr_to_globals).end.offset(-1) {
                  undo_push(
                    (*ptr_to_globals).dot,
                    1i32 as libc::c_uint,
                    1i32 as libc::c_uchar,
                  );
                  let fresh15 = (*ptr_to_globals).dot;
                  (*ptr_to_globals).dot = (*ptr_to_globals).dot.offset(1);
                  *fresh15 = ' ' as i32 as libc::c_char;
                  undo_push(
                    (*ptr_to_globals).dot.offset(-1),
                    1i32 as libc::c_uint,
                    2i32 as libc::c_uchar,
                  );
                  while ({
                    let mut bb__isblank: libc::c_uchar = *(*ptr_to_globals).dot as libc::c_uchar;
                    (bb__isblank as libc::c_int == ' ' as i32
                      || bb__isblank as libc::c_int == '\t' as i32)
                      as libc::c_int
                  }) != 0
                  {
                    text_hole_delete((*ptr_to_globals).dot, (*ptr_to_globals).dot, 2i32);
                  }
                }
                (*ptr_to_globals).cmdcnt -= 1;
                if !((*ptr_to_globals).cmdcnt > 0) {
                  break;
                }
              }
              end_cmd_q();
              current_block = 15129665204879337069;
            }
            3432363526595694666 => {
              dot_begin();
              dot_skip_over_ws();
              current_block = 3268579060917229304;
            }
            3494829253343353619 => {
              (*ptr_to_globals).dot = (*ptr_to_globals).screenbegin;
              if (*ptr_to_globals).cmdcnt as libc::c_uint
                > (*ptr_to_globals).rows.wrapping_sub(1i32 as libc::c_uint)
              {
                (*ptr_to_globals).cmdcnt =
                  (*ptr_to_globals).rows.wrapping_sub(1i32 as libc::c_uint) as libc::c_int
              }
              (*ptr_to_globals).cmdcnt -= 1;
              if (*ptr_to_globals).cmdcnt > 0 {
                do_cmd('+' as i32);
              }
              dot_skip_over_ws();
              current_block = 15129665204879337069;
            }
            17973101765331640574 => {
              c1 = get_one_char();
              if c1 != 'g' as i32 {
                buf[0] = 'g' as i32 as libc::c_char;
                buf[1] = if c1 >= 0 { c1 } else { '*' as i32 } as libc::c_char;
                buf[2] = '\u{0}' as i32 as libc::c_char;
                not_implemented(buf.as_mut_ptr());
                current_block = 15129665204879337069;
              } else {
                if (*ptr_to_globals).cmdcnt == 0 {
                  (*ptr_to_globals).cmdcnt = 1i32
                }
                current_block = 11945623545738147997;
              }
            }
            16546625800574160972 => {
              save_dot = (*ptr_to_globals).dot;
              (*ptr_to_globals).dot = dollar_line((*ptr_to_globals).dot);
              (*ptr_to_globals).dot = yank_delete(
                save_dot,
                (*ptr_to_globals).dot,
                0,
                YANKDEL as libc::c_int,
                1i32,
              );
              if c == 'C' as i32 {
                current_block = 8629930936610358348;
              } else {
                if c == 'D' as i32 {
                  end_cmd_q();
                }
                current_block = 15129665204879337069;
              }
            }
            11937696639986586685 => {
              cnt = count_lines((*ptr_to_globals).text, (*ptr_to_globals).dot);
              c1 = get_one_char();
              find_range(&mut p, &mut q, c1 as libc::c_char);
              yank_delete(p, q, 1i32, YANKONLY as libc::c_int, 0);
              p = begin_line(p);
              q = end_line(q);
              i = count_lines(p, q);
              while i > 0 {
                if c == '<' as i32 {
                  if *p as libc::c_int == '\t' as i32 {
                    text_hole_delete(p, p, 0);
                  } else if *p as libc::c_int == ' ' as i32 {
                    j = 0;
                    while *p as libc::c_int == ' ' as i32 && j < (*ptr_to_globals).tabstop {
                      text_hole_delete(p, p, 0);
                      j += 1
                    }
                  }
                } else if c == '>' as i32 {
                  char_insert(p, '\t' as i32 as libc::c_char, 1i32);
                }
                i -= 1;
                p = next_line(p)
              }
              (*ptr_to_globals).dot = find_line(cnt);
              dot_skip_over_ws();
              end_cmd_q();
              current_block = 15129665204879337069;
            }
            17725350714912028156 => {
              p = get_input_line(b":\x00" as *const u8 as *const libc::c_char);
              colon(p);
              current_block = 15129665204879337069;
            }
            14526470074083880812 => {
              q = char_search(
                (*ptr_to_globals).dot,
                b"\n\n\x00" as *const u8 as *const libc::c_char,
                (FORWARD as libc::c_int) << 1i32 | FULL as libc::c_int,
              );
              if !q.is_null() {
                (*ptr_to_globals).dot = next_line(q)
              }
              current_block = 15129665204879337069;
            }
            8893187391306414141 => {
              q = char_search(
                (*ptr_to_globals).dot,
                b"\n\n\x00" as *const u8 as *const libc::c_char,
                ((BACK as libc::c_int as libc::c_uint) << 1i32
                  | FULL as libc::c_int as libc::c_uint) as libc::c_int,
              );
              if !q.is_null() {
                (*ptr_to_globals).dot = next_line(q)
              }
              current_block = 15129665204879337069;
            }
            7021673758293221412 => {
              dir = BACK as libc::c_int;
              p = (*ptr_to_globals).dot.offset(-1);
              if *(*ptr_to_globals).last_search_pattern.offset(0) as libc::c_int == '?' as i32 {
                dir = FORWARD as libc::c_int;
                p = (*ptr_to_globals).dot.offset(1)
              }
              current_block = 4166979493554389389;
            }
            18374191879090272823 => {
              buf[0] = c as libc::c_char;
              buf[1] = '\u{0}' as i32 as libc::c_char;
              q = get_input_line(buf.as_mut_ptr());
              if *q.offset(0) as libc::c_int != 0 && *q.offset(1) == 0 {
                if *(*ptr_to_globals).last_search_pattern.offset(0) != 0 {
                  *(*ptr_to_globals).last_search_pattern.offset(0) = c as libc::c_char
                }
                current_block = 7392824444931029276;
              } else if *q.offset(0) != 0 {
                free((*ptr_to_globals).last_search_pattern as *mut libc::c_void);
                (*ptr_to_globals).last_search_pattern = crate::libbb::xfuncs_printf::xstrdup(q);
                current_block = 7392824444931029276;
              } else {
                current_block = 15129665204879337069;
              }
            }
            16407828456666301883 => {
              if (*ptr_to_globals).last_forward_char == 0 {
                current_block = 15129665204879337069;
              } else {
                loop {
                  q = (*ptr_to_globals).dot.offset(-1);
                  while q >= (*ptr_to_globals).text
                    && *q as libc::c_int != '\n' as i32
                    && *q as libc::c_int != (*ptr_to_globals).last_forward_char
                  {
                    q = q.offset(-1)
                  }
                  if q >= (*ptr_to_globals).text
                    && *q as libc::c_int == (*ptr_to_globals).last_forward_char
                  {
                    (*ptr_to_globals).dot = q
                  }
                  (*ptr_to_globals).cmdcnt -= 1;
                  if !((*ptr_to_globals).cmdcnt > 0) {
                    break;
                  }
                }
                current_block = 15129665204879337069;
              }
            }
            9018432604062702004 => {
              q = (*ptr_to_globals).dot;
              while q < (*ptr_to_globals).end && *q as libc::c_int != '\n' as i32 {
                if !strchr(
                  b"()[]{}\x00" as *const u8 as *const libc::c_char,
                  *q as libc::c_int,
                )
                .is_null()
                {
                  p = find_pair(q, *q);
                  if p.is_null() {
                    indicate_error();
                  } else {
                    (*ptr_to_globals).dot = p
                  }
                  break;
                } else {
                  q = q.offset(1)
                }
              }
              if *q as libc::c_int == '\n' as i32 {
                indicate_error();
              }
              current_block = 15129665204879337069;
            }
            10247103787464459848 => {
              p = (*ptr_to_globals).reg[(*ptr_to_globals).YDreg as usize];
              if p.is_null() {
                status_line_bold(
                  b"Nothing in register %c\x00" as *const u8 as *const libc::c_char,
                  what_reg() as libc::c_int,
                );
              } else {
                if !strchr(p, '\n' as i32).is_null() {
                  if c == 'P' as i32 {
                    dot_begin();
                  }
                  if c == 'p' as i32 {
                    if end_line((*ptr_to_globals).dot) == (*ptr_to_globals).end.offset(-1) {
                      (*ptr_to_globals).dot = (*ptr_to_globals).end
                    } else {
                      dot_next();
                    }
                  }
                } else if c == 'p' as i32 {
                  dot_right();
                }
                string_insert((*ptr_to_globals).dot, p, 1i32);
                end_cmd_q();
              }
              current_block = 15129665204879337069;
            }
            15260732871948875843 => {
              c1 = (get_one_char() | 0x20i32) - 'a' as i32;
              if c1 as libc::c_uint <= 25i32 as libc::c_uint {
                (*ptr_to_globals).mark[c1 as usize] = (*ptr_to_globals).dot
              } else {
                indicate_error();
              }
              current_block = 15129665204879337069;
            }
            12738322036487086035 => {
              c1 = get_one_char() | 0x20i32;
              if (c1 - 'a' as i32) as libc::c_uint <= 25i32 as libc::c_uint {
                c1 = c1 - 'a' as i32;
                q = (*ptr_to_globals).mark[c1 as usize];
                if (*ptr_to_globals).text <= q && q < (*ptr_to_globals).end {
                  (*ptr_to_globals).dot = q;
                  dot_begin();
                  dot_skip_over_ws();
                }
              } else if c1 == '\'' as i32 {
                (*ptr_to_globals).dot = swap_context((*ptr_to_globals).dot);
                dot_begin();
                dot_skip_over_ws();
              } else {
                indicate_error();
              }
              current_block = 15129665204879337069;
            }
            13255096073384561358 => {
              c1 = (get_one_char() | 0x20i32) - 'a' as i32;
              if c1 as libc::c_uint <= 25i32 as libc::c_uint {
                (*ptr_to_globals).YDreg = c1 as smalluint
              } else {
                indicate_error();
              }
              current_block = 15129665204879337069;
            }
            10258711639984089377 => {
              if (*ptr_to_globals).cmd_mode as libc::c_int == 0 {
                indicate_error();
              }
              (*ptr_to_globals).cmd_mode = 0 as smallint;
              undo_queue_commit();
              end_cmd_q();
              (*ptr_to_globals).last_status_cksum = 0;
              current_block = 15129665204879337069;
            }
            11439127087547047736 => {
              buf[0] = c as libc::c_char;
              buf[1] = '\u{0}' as i32 as libc::c_char;
              not_implemented(buf.as_mut_ptr());
              end_cmd_q();
              current_block = 17440971994642376514;
            }
            7961798899781870241 => {
              dot_scroll(
                (*ptr_to_globals).rows.wrapping_sub(2i32 as libc::c_uint) as libc::c_int,
                -1i32,
              );
              current_block = 15129665204879337069;
            }
            9426343755402444879 => {
              dot_scroll(
                (*ptr_to_globals)
                  .rows
                  .wrapping_sub(2i32 as libc::c_uint)
                  .wrapping_div(2i32 as libc::c_uint) as libc::c_int,
                1i32,
              );
              current_block = 15129665204879337069;
            }
            13352459794680105913 => {
              dot_scroll(1i32, 1i32);
              current_block = 15129665204879337069;
            }
            14142272253464333006 => {
              dot_scroll(
                (*ptr_to_globals).rows.wrapping_sub(2i32 as libc::c_uint) as libc::c_int,
                1i32,
              );
              current_block = 15129665204879337069;
            }
            10758177197742640066 => {
              (*ptr_to_globals).last_status_cksum = 0;
              current_block = 15129665204879337069;
            }
            6152256259730122749 => {
              current_block = 7534742345255184552;
            }
            12883932598258173301 => {
              current_block = 8800996768013373992;
            }
            11242998110520238401 => {
              redraw(1i32);
              current_block = 15129665204879337069;
            }
            13619733043935729992 => {
              loop {
                dot_next();
                dot_skip_over_ws();
                (*ptr_to_globals).cmdcnt -= 1;
                if !((*ptr_to_globals).cmdcnt > 0) {
                  break;
                }
              }
              current_block = 15129665204879337069;
            }
            9339065157412720613 => {
              dot_scroll(
                (*ptr_to_globals)
                  .rows
                  .wrapping_sub(2i32 as libc::c_uint)
                  .wrapping_div(2i32 as libc::c_uint) as libc::c_int,
                -1i32,
              );
              current_block = 15129665204879337069;
            }
            11447082683497798022 => {
              dot_scroll(1i32, -1i32);
              current_block = 15129665204879337069;
            }
            5182000506326660482 => {
              current_block = 13993698454868426881;
            }
            1105010766850597332 => {
              if !(*ptr_to_globals).reg[27].is_null() {
                p = begin_line((*ptr_to_globals).dot);
                q = end_line((*ptr_to_globals).dot);
                p = text_hole_delete(p, q, 1i32);
                p = p.offset(string_insert(p, (*ptr_to_globals).reg[27], 2i32) as isize);
                (*ptr_to_globals).dot = p;
                dot_skip_over_ws();
              }
              current_block = 15129665204879337069;
            }
            8616046655533110204 => {
              undo_pop();
              current_block = 15129665204879337069;
            }
            5127767458142431603 => {
              loop {
                (*ptr_to_globals).dot = end_line((*ptr_to_globals).dot);
                (*ptr_to_globals).cmdcnt -= 1;
                if (*ptr_to_globals).cmdcnt <= 0 {
                  break;
                }
                dot_next();
              }
              current_block = 15129665204879337069;
            }
            222014967776118151 => {
              (*ptr_to_globals).last_forward_char = get_one_char();
              current_block = 7856905509180742666;
            }
            11209792479411604110 => {
              loop {
                dot_prev();
                dot_skip_over_ws();
                (*ptr_to_globals).cmdcnt -= 1;
                if !((*ptr_to_globals).cmdcnt > 0) {
                  break;
                }
              }
              current_block = 15129665204879337069;
            }
            3364823792826654116 => {
              if (*ptr_to_globals).lmc_len != 0 {
                (*ptr_to_globals).ioq_start = crate::libbb::xfuncs_printf::xstrndup(
                  (*ptr_to_globals).last_modifying_cmd.as_mut_ptr(),
                  (*ptr_to_globals).lmc_len,
                );
                (*ptr_to_globals).ioq = (*ptr_to_globals).ioq_start
              }
              current_block = 15129665204879337069;
            }
            18096603330221575131 => {
              current_block = 17498168302144015873;
            }
            16891123271837848903 => {
              dot_end();
              current_block = 1752638907092016026;
            }
            8517235759107662071 => {
              current_block = 5847749760081351726;
            }
            12525254419223051704 => {
              if (*ptr_to_globals).dot < (*ptr_to_globals).end.offset(-1) {
                (*ptr_to_globals).dot = yank_delete(
                  (*ptr_to_globals).dot,
                  (*ptr_to_globals).dot,
                  1i32,
                  YANKDEL as libc::c_int,
                  1i32,
                )
              }
              current_block = 15129665204879337069;
            }
            15232911949322867522 => {
              current_block = 17251831742223396249;
            }
            10863374208794025069 => {
              current_block = 1895262434596074581;
            }
            451126677064669119 => {
              loop {
                dot_prev();
                (*ptr_to_globals).dot = move_to_col(
                  (*ptr_to_globals).dot,
                  (*ptr_to_globals).ccol + (*ptr_to_globals).offset,
                );
                (*ptr_to_globals).cmdcnt -= 1;
                if !((*ptr_to_globals).cmdcnt > 0) {
                  break;
                }
              }
              current_block = 15129665204879337069;
            }
            4611735929166613116 => {
              loop {
                if bb_ascii_isalnum(*(*ptr_to_globals).dot as libc::c_uchar) != 0
                  || *(*ptr_to_globals).dot as libc::c_int == '_' as i32
                {
                  (*ptr_to_globals).dot = skip_thing(
                    (*ptr_to_globals).dot,
                    1i32,
                    FORWARD as libc::c_int,
                    S_END_ALNUM as libc::c_int,
                  )
                } else if *strchrnul(
                  b"!\"#$%&\'()*+,-./:;<=>?@[\\]^_`{|}~\x00" as *const u8 as *const libc::c_char,
                  *(*ptr_to_globals).dot as libc::c_int,
                )
                .offset(0)
                  != 0
                {
                  (*ptr_to_globals).dot = skip_thing(
                    (*ptr_to_globals).dot,
                    1i32,
                    FORWARD as libc::c_int,
                    S_END_PUNCT as libc::c_int,
                  )
                }
                if (*ptr_to_globals).dot < (*ptr_to_globals).end.offset(-1) {
                  (*ptr_to_globals).dot = (*ptr_to_globals).dot.offset(1)
                }
                if ({
                  let mut bb__isspace: libc::c_uchar =
                    (*(*ptr_to_globals).dot as libc::c_int - 9i32) as libc::c_uchar;
                  (bb__isspace as libc::c_int == ' ' as i32 - 9i32
                    || bb__isspace as libc::c_int <= 13i32 - 9i32) as libc::c_int
                }) != 0
                {
                  (*ptr_to_globals).dot = skip_thing(
                    (*ptr_to_globals).dot,
                    2i32,
                    FORWARD as libc::c_int,
                    S_OVER_WS as libc::c_int,
                  )
                }
                (*ptr_to_globals).cmdcnt -= 1;
                if !((*ptr_to_globals).cmdcnt > 0) {
                  break;
                }
              }
              current_block = 15129665204879337069;
            }
            4386451087681909888 => {
              (*ptr_to_globals).dot =
                move_to_col((*ptr_to_globals).dot, (*ptr_to_globals).cmdcnt - 1i32);
              current_block = 15129665204879337069;
            }
            1296397779060594135 => {
              dot_begin();
              current_block = 15129665204879337069;
            }
            _ => {}
          }
          match current_block {
            15129665204879337069 => {}
            8629930936610358348 => {}
            _ => {
              match current_block {
                17251831742223396249 => {
                  dir = 0;
                  if c == 'X' as i32 {
                    dir = -1i32
                  }
                  loop {
                    if *(*ptr_to_globals).dot.offset(dir as isize) as libc::c_int != '\n' as i32 {
                      if c == 'X' as i32 {
                        (*ptr_to_globals).dot = (*ptr_to_globals).dot.offset(-1)
                      }
                      (*ptr_to_globals).dot = yank_delete(
                        (*ptr_to_globals).dot,
                        (*ptr_to_globals).dot,
                        0,
                        YANKDEL as libc::c_int,
                        1i32,
                      )
                    }
                    (*ptr_to_globals).cmdcnt -= 1;
                    if !((*ptr_to_globals).cmdcnt > 0) {
                      break;
                    }
                  }
                  end_cmd_q();
                  if c == 's' as i32 {
                    current_block = 8629930936610358348;
                  } else {
                    current_block = 15129665204879337069;
                  }
                }
                2087484904894455135 => {
                  dot_end();
                  (*ptr_to_globals).dot =
                    char_insert((*ptr_to_globals).dot, '\n' as i32 as libc::c_char, 1i32);
                  current_block = 8629930936610358348;
                }
                11945623545738147997 => {
                  (*ptr_to_globals).dot = (*ptr_to_globals).end.offset(-1);
                  if (*ptr_to_globals).cmdcnt > 0 {
                    (*ptr_to_globals).dot = find_line((*ptr_to_globals).cmdcnt)
                  }
                  dot_skip_over_ws();
                  current_block = 15129665204879337069;
                }
                5847749760081351726 => {
                  dir = FORWARD as libc::c_int;
                  if c == 'B' as i32 {
                    dir = BACK as libc::c_int
                  }
                  loop {
                    if c == 'W' as i32
                      || ({
                        let mut bb__isspace: libc::c_uchar =
                          (*(*ptr_to_globals).dot.offset(dir as isize) as libc::c_int - 9i32)
                            as libc::c_uchar;
                        (bb__isspace as libc::c_int == ' ' as i32 - 9i32
                          || bb__isspace as libc::c_int <= 13i32 - 9i32)
                          as libc::c_int
                      }) != 0
                    {
                      (*ptr_to_globals).dot =
                        skip_thing((*ptr_to_globals).dot, 1i32, dir, S_TO_WS as libc::c_int);
                      (*ptr_to_globals).dot =
                        skip_thing((*ptr_to_globals).dot, 2i32, dir, S_OVER_WS as libc::c_int)
                    }
                    if c != 'W' as i32 {
                      (*ptr_to_globals).dot =
                        skip_thing((*ptr_to_globals).dot, 1i32, dir, S_BEFORE_WS as libc::c_int)
                    }
                    (*ptr_to_globals).cmdcnt -= 1;
                    if !((*ptr_to_globals).cmdcnt > 0) {
                      break;
                    }
                  }
                  current_block = 15129665204879337069;
                }
                17440971994642376514 => {
                  current_block = 15129665204879337069;
                }
                7534742345255184552 => {
                  current_block = 17247297260531395789;
                }
                8800996768013373992 => {
                  loop {
                    dot_next();
                    (*ptr_to_globals).dot = move_to_col(
                      (*ptr_to_globals).dot,
                      (*ptr_to_globals).ccol + (*ptr_to_globals).offset,
                    );
                    (*ptr_to_globals).cmdcnt -= 1;
                    if !((*ptr_to_globals).cmdcnt > 0) {
                      break;
                    }
                  }
                  current_block = 15129665204879337069;
                }
                13993698454868426881 => {
                  loop {
                    dot_right();
                    (*ptr_to_globals).cmdcnt -= 1;
                    if !((*ptr_to_globals).cmdcnt > 0) {
                      break;
                    }
                  }
                  current_block = 15129665204879337069;
                }
                7856905509180742666 => {
                  while !((*ptr_to_globals).last_forward_char == 0) {
                    q = (*ptr_to_globals).dot.offset(1);
                    while q < (*ptr_to_globals).end.offset(-1)
                      && *q as libc::c_int != '\n' as i32
                      && *q as libc::c_int != (*ptr_to_globals).last_forward_char
                    {
                      q = q.offset(1)
                    }
                    if *q as libc::c_int == (*ptr_to_globals).last_forward_char {
                      (*ptr_to_globals).dot = q
                    }
                    (*ptr_to_globals).cmdcnt -= 1;
                    if !((*ptr_to_globals).cmdcnt > 0) {
                      break;
                    }
                  }
                  current_block = 15129665204879337069;
                }
                17498168302144015873 => {
                  current_block = 8681395796513813967;
                }
                1752638907092016026 => {
                  if *(*ptr_to_globals).dot as libc::c_int != '\n' as i32 {
                    (*ptr_to_globals).dot = (*ptr_to_globals).dot.offset(1)
                  }
                  current_block = 8629930936610358348;
                }
                3268579060917229304 => {
                  current_block = 8629930936610358348;
                }
                1895262434596074581 => {
                  current_block = 8908416993177701018;
                }
                _ => {}
              }
              match current_block {
                8629930936610358348 => {}
                15129665204879337069 => {}
                _ => {
                  match current_block {
                    17247297260531395789 => {
                      loop {
                        dot_left();
                        (*ptr_to_globals).cmdcnt -= 1;
                        if !((*ptr_to_globals).cmdcnt > 0) {
                          break;
                        }
                      }
                      current_block = 15129665204879337069;
                    }
                    8681395796513813967 => {
                      current_block = 5591548203144509315;
                    }
                    8908416993177701018 => {
                      current_block = 16124761010012532485;
                    }
                    _ => {}
                  }
                  match current_block {
                    15129665204879337069 => {}
                    _ => {
                      match current_block {
                        16124761010012532485 => {
                          let mut yf: libc::c_int = 0;
                          let mut ml: libc::c_int = 0;
                          let mut whole: libc::c_int = 0;
                          yf = YANKDEL as libc::c_int;
                          if c == 'y' as i32 || c == 'Y' as i32 {
                            yf = YANKONLY as libc::c_int
                          }
                          c1 = 'y' as i32;
                          if c != 'Y' as i32 {
                            c1 = get_one_char()
                          }
                          ml = find_range(&mut p, &mut q, c1 as libc::c_char);
                          place_cursor(0i32, 0);
                          if c1 == 27i32 {
                            c1 = 27i32;
                            c = c1
                          } else if !strchr(b"wW\x00" as *const u8 as *const libc::c_char, c1)
                            .is_null()
                          {
                            ml = 0;
                            if c == 'c' as i32 {
                              while ({
                                let mut bb__isspace: libc::c_uchar =
                                  (*q as libc::c_int - 9i32) as libc::c_uchar;
                                (bb__isspace as libc::c_int == ' ' as i32 - 9i32
                                  || bb__isspace as libc::c_int <= 13i32 - 9i32)
                                  as libc::c_int
                              }) != 0
                                && q > p
                              {
                                q = q.offset(-1)
                              }
                            }
                            (*ptr_to_globals).dot = yank_delete(p, q, ml, yf, 1i32)
                          } else if !strchr(
                            b"^0bBeEft%$ lh\x08\x7f\x00" as *const u8 as *const libc::c_char,
                            c1,
                          )
                          .is_null()
                          {
                            (*ptr_to_globals).dot = yank_delete(p, q, ml, yf, 1i32)
                          } else if !strchr(
                            b"cdykjGHL+-{}\r\n\x00" as *const u8 as *const libc::c_char,
                            c1,
                          )
                          .is_null()
                          {
                            (*ptr_to_globals).dot = yank_delete(p, q, ml, yf, 1i32);
                            whole = 1i32
                          } else {
                            c1 = 27i32;
                            c = c1;
                            ml = 0;
                            indicate_error();
                          }
                          if ml != 0 && whole != 0 {
                            if c == 'c' as i32 {
                              (*ptr_to_globals).dot = char_insert(
                                (*ptr_to_globals).dot,
                                '\n' as i32 as libc::c_char,
                                2i32,
                              );
                              if whole != 0
                                && (*ptr_to_globals).dot != (*ptr_to_globals).end.offset(-1)
                              {
                                dot_prev();
                              }
                            } else if c == 'd' as i32 {
                              dot_begin();
                              dot_skip_over_ws();
                            }
                          }
                          if c1 != 27i32 {
                            if c == 'c' as i32 {
                              strcpy(
                                buf.as_mut_ptr(),
                                b"Change\x00" as *const u8 as *const libc::c_char,
                              );
                              current_block = 8629930936610358348;
                            } else {
                              if c == 'd' as i32 {
                                strcpy(
                                  buf.as_mut_ptr(),
                                  b"Delete\x00" as *const u8 as *const libc::c_char,
                                );
                              }
                              if c == 'y' as i32 || c == 'Y' as i32 {
                                strcpy(
                                  buf.as_mut_ptr(),
                                  b"Yank\x00" as *const u8 as *const libc::c_char,
                                );
                              }
                              p = (*ptr_to_globals).reg[(*ptr_to_globals).YDreg as usize];
                              q = p.offset(strlen(p) as isize);
                              cnt = 0;
                              while p <= q {
                                if *p as libc::c_int == '\n' as i32 {
                                  cnt += 1
                                }
                                p = p.offset(1)
                              }
                              status_line(
                                b"%s %u lines (%u chars) using [%c]\x00" as *const u8
                                  as *const libc::c_char,
                                buf.as_mut_ptr(),
                                cnt,
                                strlen((*ptr_to_globals).reg[(*ptr_to_globals).YDreg as usize])
                                  as libc::c_uint,
                                what_reg() as libc::c_int,
                              );
                              end_cmd_q();
                              current_block = 15129665204879337069;
                            }
                          } else {
                            current_block = 15129665204879337069;
                          }
                        }
                        5591548203144509315 => {
                          current_block = 2636677179867529885;
                        }
                        _ => {}
                      }
                      match current_block {
                        15129665204879337069 => {}
                        8629930936610358348 => {}
                        _ => {
                          match current_block {
                            2636677179867529885 => {
                              current_block = 12309206730560524281;
                            }
                            _ => {}
                          }
                          match current_block {
                            12309206730560524281 => {
                              current_block = 3325768110057758661;
                            }
                            _ => {}
                          }
                          match current_block {
                            3325768110057758661 => {
                              current_block = 14815832896553429982;
                            }
                            _ => {}
                          }
                          match current_block {
                            14815832896553429982 => {
                              current_block = 10731695520297161438;
                            }
                            _ => {}
                          }
                          match current_block {
                            10731695520297161438 => {
                              if c == '0' as i32 && (*ptr_to_globals).cmdcnt < 1i32 {
                                dot_begin();
                              } else {
                                (*ptr_to_globals).cmdcnt =
                                  (*ptr_to_globals).cmdcnt * 10i32 + (c - '0' as i32)
                              }
                              current_block = 15129665204879337069;
                            }
                            _ => {}
                          }
                          match current_block {
                            15129665204879337069 => {}
                            _ => {
                              loop {
                                match current_block {
                                  16813369756331276724 => {
                                    msg = std::ptr::null();
                                    current_block = 7392824444931029276;
                                  }
                                  7392824444931029276 => {
                                    dir = FORWARD as libc::c_int;
                                    p = (*ptr_to_globals).dot.offset(1);
                                    if *(*ptr_to_globals).last_search_pattern.offset(0)
                                      as libc::c_int
                                      == '?' as i32
                                    {
                                      dir = BACK as libc::c_int;
                                      p = (*ptr_to_globals).dot.offset(-1)
                                    }
                                    current_block = 4166979493554389389;
                                  }
                                  _ => {
                                    q = char_search(
                                      p,
                                      (*ptr_to_globals).last_search_pattern.offset(1),
                                      dir << 1i32 | FULL as libc::c_int,
                                    );
                                    if !q.is_null() {
                                      (*ptr_to_globals).dot = q;
                                      msg = std::ptr::null()
                                    } else {
                                      p = (*ptr_to_globals).text;
                                      if dir == BACK as libc::c_int {
                                        p = (*ptr_to_globals).end.offset(-1)
                                      }
                                      q = char_search(
                                        p,
                                        (*ptr_to_globals).last_search_pattern.offset(1),
                                        dir << 1i32 | FULL as libc::c_int,
                                      );
                                      if !q.is_null() {
                                        (*ptr_to_globals).dot = q;
                                        msg = b"search hit BOTTOM, continuing at TOP\x00"
                                          as *const u8
                                          as *const libc::c_char;
                                        if dir == BACK as libc::c_int {
                                          msg = b"search hit TOP, continuing at BOTTOM\x00"
                                            as *const u8
                                            as *const libc::c_char
                                        }
                                      } else {
                                        msg = b"Pattern not found\x00" as *const u8
                                          as *const libc::c_char
                                      }
                                    }
                                    if !msg.is_null() {
                                      status_line_bold(
                                        b"%s\x00" as *const u8 as *const libc::c_char,
                                        msg,
                                      );
                                    }
                                    (*ptr_to_globals).cmdcnt -= 1;
                                    if (*ptr_to_globals).cmdcnt > 0 {
                                      current_block = 16813369756331276724;
                                    } else {
                                      break;
                                    }
                                  }
                                }
                              }
                              current_block = 15129665204879337069;
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
        44 => {
          current_block = 16407828456666301883;
          match current_block {
            16992905640583886232 => {
              loop {
                if (*(*ptr_to_globals).dot as libc::c_int - 'a' as i32) as libc::c_uchar
                  as libc::c_int
                  <= 'z' as i32 - 'a' as i32
                {
                  undo_push(
                    (*ptr_to_globals).dot,
                    1i32 as libc::c_uint,
                    1i32 as libc::c_uchar,
                  );
                  *(*ptr_to_globals).dot =
                    bb_ascii_toupper(*(*ptr_to_globals).dot as libc::c_uchar) as libc::c_char;
                  undo_push(
                    (*ptr_to_globals).dot,
                    1i32 as libc::c_uint,
                    2i32 as libc::c_uchar,
                  );
                } else if (*(*ptr_to_globals).dot as libc::c_int - 'A' as i32) as libc::c_uchar
                  as libc::c_int
                  <= 'Z' as i32 - 'A' as i32
                {
                  undo_push(
                    (*ptr_to_globals).dot,
                    1i32 as libc::c_uint,
                    1i32 as libc::c_uchar,
                  );
                  *(*ptr_to_globals).dot =
                    bb_ascii_tolower(*(*ptr_to_globals).dot as libc::c_uchar) as libc::c_char;
                  undo_push(
                    (*ptr_to_globals).dot,
                    1i32 as libc::c_uint,
                    2i32 as libc::c_uchar,
                  );
                }
                dot_right();
                (*ptr_to_globals).cmdcnt -= 1;
                if !((*ptr_to_globals).cmdcnt > 0) {
                  break;
                }
              }
              end_cmd_q();
              current_block = 15129665204879337069;
            }
            8729655159604064397 => {
              c1 = get_one_char();
              cnt = 0;
              if c1 == '.' as i32 {
                cnt = (*ptr_to_globals)
                  .rows
                  .wrapping_sub(2i32 as libc::c_uint)
                  .wrapping_div(2i32 as libc::c_uint) as libc::c_int
              }
              if c1 == '-' as i32 {
                cnt = (*ptr_to_globals).rows.wrapping_sub(2i32 as libc::c_uint) as libc::c_int
              }
              (*ptr_to_globals).screenbegin = begin_line((*ptr_to_globals).dot);
              dot_scroll(cnt, -1i32);
              current_block = 15129665204879337069;
            }
            15899500648299942075 => {
              (*ptr_to_globals).last_forward_char = get_one_char();
              do_cmd(';' as i32);
              if *(*ptr_to_globals).dot as libc::c_int == (*ptr_to_globals).last_forward_char {
                dot_left();
              }
              (*ptr_to_globals).last_forward_char = 0;
              current_block = 15129665204879337069;
            }
            9051390181078481641 => {
              c1 = get_one_char();
              if *(*ptr_to_globals).dot as libc::c_int != '\n' as i32 {
                (*ptr_to_globals).dot =
                  text_hole_delete((*ptr_to_globals).dot, (*ptr_to_globals).dot, 1i32);
                (*ptr_to_globals).dot =
                  char_insert((*ptr_to_globals).dot, c1 as libc::c_char, 2i32);
                dot_left();
              }
              end_cmd_q();
              current_block = 15129665204879337069;
            }
            877115918601926659 => {
              dir = FORWARD as libc::c_int;
              if c == 'b' as i32 {
                dir = BACK as libc::c_int
              }
              while !((*ptr_to_globals).dot.offset(dir as isize) < (*ptr_to_globals).text
                || (*ptr_to_globals).dot.offset(dir as isize) > (*ptr_to_globals).end.offset(-1))
              {
                (*ptr_to_globals).dot = (*ptr_to_globals).dot.offset(dir as isize);
                if ({
                  let mut bb__isspace: libc::c_uchar =
                    (*(*ptr_to_globals).dot as libc::c_int - 9i32) as libc::c_uchar;
                  (bb__isspace as libc::c_int == ' ' as i32 - 9i32
                    || bb__isspace as libc::c_int <= 13i32 - 9i32) as libc::c_int
                }) != 0
                {
                  (*ptr_to_globals).dot = skip_thing(
                    (*ptr_to_globals).dot,
                    if c == 'e' as i32 { 2i32 } else { 1i32 },
                    dir,
                    S_OVER_WS as libc::c_int,
                  )
                }
                if bb_ascii_isalnum(*(*ptr_to_globals).dot as libc::c_uchar) != 0
                  || *(*ptr_to_globals).dot as libc::c_int == '_' as i32
                {
                  (*ptr_to_globals).dot =
                    skip_thing((*ptr_to_globals).dot, 1i32, dir, S_END_ALNUM as libc::c_int)
                } else if *strchrnul(
                  b"!\"#$%&\'()*+,-./:;<=>?@[\\]^_`{|}~\x00" as *const u8 as *const libc::c_char,
                  *(*ptr_to_globals).dot as libc::c_int,
                )
                .offset(0)
                  != 0
                {
                  (*ptr_to_globals).dot =
                    skip_thing((*ptr_to_globals).dot, 1i32, dir, S_END_PUNCT as libc::c_int)
                }
                (*ptr_to_globals).cmdcnt -= 1;
                if !((*ptr_to_globals).cmdcnt > 0) {
                  break;
                }
              }
              current_block = 15129665204879337069;
            }
            1085022737867179637 => {
              dot_begin();
              dot_skip_over_ws();
              current_block = 15129665204879337069;
            }
            3113147720494587438 => {
              c1 = get_one_char();
              if c1 != 'Z' as i32 {
                indicate_error();
              } else if (*ptr_to_globals).modified_count != 0 {
                if 1i32 != 0 && (*ptr_to_globals).readonly_mode as libc::c_int != 0 {
                  status_line_bold(
                    b"\'%s\' is read only\x00" as *const u8 as *const libc::c_char,
                    (*ptr_to_globals).current_filename,
                  );
                } else {
                  cnt = file_write(
                    (*ptr_to_globals).current_filename,
                    (*ptr_to_globals).text,
                    (*ptr_to_globals).end.offset(-1),
                  );
                  if cnt < 0 {
                    if cnt == -1i32 {
                      status_line_bold(b"Write error: %m\x00" as *const u8 as *const libc::c_char);
                    }
                  } else if cnt as libc::c_long
                    == (*ptr_to_globals)
                      .end
                      .offset(-1)
                      .wrapping_offset_from((*ptr_to_globals).text)
                      as libc::c_long
                      + 1
                  {
                    (*ptr_to_globals).editing = 0 as smallint
                  }
                }
              } else {
                (*ptr_to_globals).editing = 0 as smallint
              }
              current_block = 15129665204879337069;
            }
            12960118908218882441 => {
              p = begin_line((*ptr_to_globals).dot);
              if *p.offset(-1i32 as isize) as libc::c_int == '\n' as i32 {
                dot_prev();
                current_block = 2087484904894455135;
              } else {
                dot_begin();
                (*ptr_to_globals).dot =
                  char_insert((*ptr_to_globals).dot, '\n' as i32 as libc::c_char, 1i32);
                dot_prev();
                current_block = 8629930936610358348;
              }
            }
            8720450212473544924 => {
              (*ptr_to_globals).dot = (*ptr_to_globals).screenbegin;
              cnt = 0;
              while (cnt as libc::c_uint)
                < (*ptr_to_globals)
                  .rows
                  .wrapping_sub(1i32 as libc::c_uint)
                  .wrapping_div(2i32 as libc::c_uint)
              {
                (*ptr_to_globals).dot = next_line((*ptr_to_globals).dot);
                cnt += 1
              }
              current_block = 15129665204879337069;
            }
            13015277209715431090 => {
              (*ptr_to_globals).dot = end_screen();
              if (*ptr_to_globals).cmdcnt as libc::c_uint
                > (*ptr_to_globals).rows.wrapping_sub(1i32 as libc::c_uint)
              {
                (*ptr_to_globals).cmdcnt =
                  (*ptr_to_globals).rows.wrapping_sub(1i32 as libc::c_uint) as libc::c_int
              }
              (*ptr_to_globals).cmdcnt -= 1;
              if (*ptr_to_globals).cmdcnt > 0 {
                do_cmd('-' as i32);
              }
              dot_begin();
              dot_skip_over_ws();
              current_block = 15129665204879337069;
            }
            9800435767766781385 => {
              loop {
                dot_end();
                if (*ptr_to_globals).dot < (*ptr_to_globals).end.offset(-1) {
                  undo_push(
                    (*ptr_to_globals).dot,
                    1i32 as libc::c_uint,
                    1i32 as libc::c_uchar,
                  );
                  let fresh15 = (*ptr_to_globals).dot;
                  (*ptr_to_globals).dot = (*ptr_to_globals).dot.offset(1);
                  *fresh15 = ' ' as i32 as libc::c_char;
                  undo_push(
                    (*ptr_to_globals).dot.offset(-1),
                    1i32 as libc::c_uint,
                    2i32 as libc::c_uchar,
                  );
                  while ({
                    let mut bb__isblank: libc::c_uchar = *(*ptr_to_globals).dot as libc::c_uchar;
                    (bb__isblank as libc::c_int == ' ' as i32
                      || bb__isblank as libc::c_int == '\t' as i32)
                      as libc::c_int
                  }) != 0
                  {
                    text_hole_delete((*ptr_to_globals).dot, (*ptr_to_globals).dot, 2i32);
                  }
                }
                (*ptr_to_globals).cmdcnt -= 1;
                if !((*ptr_to_globals).cmdcnt > 0) {
                  break;
                }
              }
              end_cmd_q();
              current_block = 15129665204879337069;
            }
            3432363526595694666 => {
              dot_begin();
              dot_skip_over_ws();
              current_block = 3268579060917229304;
            }
            3494829253343353619 => {
              (*ptr_to_globals).dot = (*ptr_to_globals).screenbegin;
              if (*ptr_to_globals).cmdcnt as libc::c_uint
                > (*ptr_to_globals).rows.wrapping_sub(1i32 as libc::c_uint)
              {
                (*ptr_to_globals).cmdcnt =
                  (*ptr_to_globals).rows.wrapping_sub(1i32 as libc::c_uint) as libc::c_int
              }
              (*ptr_to_globals).cmdcnt -= 1;
              if (*ptr_to_globals).cmdcnt > 0 {
                do_cmd('+' as i32);
              }
              dot_skip_over_ws();
              current_block = 15129665204879337069;
            }
            17973101765331640574 => {
              c1 = get_one_char();
              if c1 != 'g' as i32 {
                buf[0] = 'g' as i32 as libc::c_char;
                buf[1] = if c1 >= 0 { c1 } else { '*' as i32 } as libc::c_char;
                buf[2] = '\u{0}' as i32 as libc::c_char;
                not_implemented(buf.as_mut_ptr());
                current_block = 15129665204879337069;
              } else {
                if (*ptr_to_globals).cmdcnt == 0 {
                  (*ptr_to_globals).cmdcnt = 1i32
                }
                current_block = 11945623545738147997;
              }
            }
            16546625800574160972 => {
              save_dot = (*ptr_to_globals).dot;
              (*ptr_to_globals).dot = dollar_line((*ptr_to_globals).dot);
              (*ptr_to_globals).dot = yank_delete(
                save_dot,
                (*ptr_to_globals).dot,
                0,
                YANKDEL as libc::c_int,
                1i32,
              );
              if c == 'C' as i32 {
                current_block = 8629930936610358348;
              } else {
                if c == 'D' as i32 {
                  end_cmd_q();
                }
                current_block = 15129665204879337069;
              }
            }
            11937696639986586685 => {
              cnt = count_lines((*ptr_to_globals).text, (*ptr_to_globals).dot);
              c1 = get_one_char();
              find_range(&mut p, &mut q, c1 as libc::c_char);
              yank_delete(p, q, 1i32, YANKONLY as libc::c_int, 0);
              p = begin_line(p);
              q = end_line(q);
              i = count_lines(p, q);
              while i > 0 {
                if c == '<' as i32 {
                  if *p as libc::c_int == '\t' as i32 {
                    text_hole_delete(p, p, 0);
                  } else if *p as libc::c_int == ' ' as i32 {
                    j = 0;
                    while *p as libc::c_int == ' ' as i32 && j < (*ptr_to_globals).tabstop {
                      text_hole_delete(p, p, 0);
                      j += 1
                    }
                  }
                } else if c == '>' as i32 {
                  char_insert(p, '\t' as i32 as libc::c_char, 1i32);
                }
                i -= 1;
                p = next_line(p)
              }
              (*ptr_to_globals).dot = find_line(cnt);
              dot_skip_over_ws();
              end_cmd_q();
              current_block = 15129665204879337069;
            }
            17725350714912028156 => {
              p = get_input_line(b":\x00" as *const u8 as *const libc::c_char);
              colon(p);
              current_block = 15129665204879337069;
            }
            14526470074083880812 => {
              q = char_search(
                (*ptr_to_globals).dot,
                b"\n\n\x00" as *const u8 as *const libc::c_char,
                (FORWARD as libc::c_int) << 1i32 | FULL as libc::c_int,
              );
              if !q.is_null() {
                (*ptr_to_globals).dot = next_line(q)
              }
              current_block = 15129665204879337069;
            }
            8893187391306414141 => {
              q = char_search(
                (*ptr_to_globals).dot,
                b"\n\n\x00" as *const u8 as *const libc::c_char,
                ((BACK as libc::c_int as libc::c_uint) << 1i32
                  | FULL as libc::c_int as libc::c_uint) as libc::c_int,
              );
              if !q.is_null() {
                (*ptr_to_globals).dot = next_line(q)
              }
              current_block = 15129665204879337069;
            }
            7021673758293221412 => {
              dir = BACK as libc::c_int;
              p = (*ptr_to_globals).dot.offset(-1);
              if *(*ptr_to_globals).last_search_pattern.offset(0) as libc::c_int == '?' as i32 {
                dir = FORWARD as libc::c_int;
                p = (*ptr_to_globals).dot.offset(1)
              }
              current_block = 4166979493554389389;
            }
            18374191879090272823 => {
              buf[0] = c as libc::c_char;
              buf[1] = '\u{0}' as i32 as libc::c_char;
              q = get_input_line(buf.as_mut_ptr());
              if *q.offset(0) as libc::c_int != 0 && *q.offset(1) == 0 {
                if *(*ptr_to_globals).last_search_pattern.offset(0) != 0 {
                  *(*ptr_to_globals).last_search_pattern.offset(0) = c as libc::c_char
                }
                current_block = 7392824444931029276;
              } else if *q.offset(0) != 0 {
                free((*ptr_to_globals).last_search_pattern as *mut libc::c_void);
                (*ptr_to_globals).last_search_pattern = crate::libbb::xfuncs_printf::xstrdup(q);
                current_block = 7392824444931029276;
              } else {
                current_block = 15129665204879337069;
              }
            }
            16407828456666301883 => {
              if (*ptr_to_globals).last_forward_char == 0 {
                current_block = 15129665204879337069;
              } else {
                loop {
                  q = (*ptr_to_globals).dot.offset(-1);
                  while q >= (*ptr_to_globals).text
                    && *q as libc::c_int != '\n' as i32
                    && *q as libc::c_int != (*ptr_to_globals).last_forward_char
                  {
                    q = q.offset(-1)
                  }
                  if q >= (*ptr_to_globals).text
                    && *q as libc::c_int == (*ptr_to_globals).last_forward_char
                  {
                    (*ptr_to_globals).dot = q
                  }
                  (*ptr_to_globals).cmdcnt -= 1;
                  if !((*ptr_to_globals).cmdcnt > 0) {
                    break;
                  }
                }
                current_block = 15129665204879337069;
              }
            }
            9018432604062702004 => {
              q = (*ptr_to_globals).dot;
              while q < (*ptr_to_globals).end && *q as libc::c_int != '\n' as i32 {
                if !strchr(
                  b"()[]{}\x00" as *const u8 as *const libc::c_char,
                  *q as libc::c_int,
                )
                .is_null()
                {
                  p = find_pair(q, *q);
                  if p.is_null() {
                    indicate_error();
                  } else {
                    (*ptr_to_globals).dot = p
                  }
                  break;
                } else {
                  q = q.offset(1)
                }
              }
              if *q as libc::c_int == '\n' as i32 {
                indicate_error();
              }
              current_block = 15129665204879337069;
            }
            10247103787464459848 => {
              p = (*ptr_to_globals).reg[(*ptr_to_globals).YDreg as usize];
              if p.is_null() {
                status_line_bold(
                  b"Nothing in register %c\x00" as *const u8 as *const libc::c_char,
                  what_reg() as libc::c_int,
                );
              } else {
                if !strchr(p, '\n' as i32).is_null() {
                  if c == 'P' as i32 {
                    dot_begin();
                  }
                  if c == 'p' as i32 {
                    if end_line((*ptr_to_globals).dot) == (*ptr_to_globals).end.offset(-1) {
                      (*ptr_to_globals).dot = (*ptr_to_globals).end
                    } else {
                      dot_next();
                    }
                  }
                } else if c == 'p' as i32 {
                  dot_right();
                }
                string_insert((*ptr_to_globals).dot, p, 1i32);
                end_cmd_q();
              }
              current_block = 15129665204879337069;
            }
            15260732871948875843 => {
              c1 = (get_one_char() | 0x20i32) - 'a' as i32;
              if c1 as libc::c_uint <= 25i32 as libc::c_uint {
                (*ptr_to_globals).mark[c1 as usize] = (*ptr_to_globals).dot
              } else {
                indicate_error();
              }
              current_block = 15129665204879337069;
            }
            12738322036487086035 => {
              c1 = get_one_char() | 0x20i32;
              if (c1 - 'a' as i32) as libc::c_uint <= 25i32 as libc::c_uint {
                c1 = c1 - 'a' as i32;
                q = (*ptr_to_globals).mark[c1 as usize];
                if (*ptr_to_globals).text <= q && q < (*ptr_to_globals).end {
                  (*ptr_to_globals).dot = q;
                  dot_begin();
                  dot_skip_over_ws();
                }
              } else if c1 == '\'' as i32 {
                (*ptr_to_globals).dot = swap_context((*ptr_to_globals).dot);
                dot_begin();
                dot_skip_over_ws();
              } else {
                indicate_error();
              }
              current_block = 15129665204879337069;
            }
            13255096073384561358 => {
              c1 = (get_one_char() | 0x20i32) - 'a' as i32;
              if c1 as libc::c_uint <= 25i32 as libc::c_uint {
                (*ptr_to_globals).YDreg = c1 as smalluint
              } else {
                indicate_error();
              }
              current_block = 15129665204879337069;
            }
            10258711639984089377 => {
              if (*ptr_to_globals).cmd_mode as libc::c_int == 0 {
                indicate_error();
              }
              (*ptr_to_globals).cmd_mode = 0 as smallint;
              undo_queue_commit();
              end_cmd_q();
              (*ptr_to_globals).last_status_cksum = 0;
              current_block = 15129665204879337069;
            }
            11439127087547047736 => {
              buf[0] = c as libc::c_char;
              buf[1] = '\u{0}' as i32 as libc::c_char;
              not_implemented(buf.as_mut_ptr());
              end_cmd_q();
              current_block = 17440971994642376514;
            }
            7961798899781870241 => {
              dot_scroll(
                (*ptr_to_globals).rows.wrapping_sub(2i32 as libc::c_uint) as libc::c_int,
                -1i32,
              );
              current_block = 15129665204879337069;
            }
            9426343755402444879 => {
              dot_scroll(
                (*ptr_to_globals)
                  .rows
                  .wrapping_sub(2i32 as libc::c_uint)
                  .wrapping_div(2i32 as libc::c_uint) as libc::c_int,
                1i32,
              );
              current_block = 15129665204879337069;
            }
            13352459794680105913 => {
              dot_scroll(1i32, 1i32);
              current_block = 15129665204879337069;
            }
            14142272253464333006 => {
              dot_scroll(
                (*ptr_to_globals).rows.wrapping_sub(2i32 as libc::c_uint) as libc::c_int,
                1i32,
              );
              current_block = 15129665204879337069;
            }
            10758177197742640066 => {
              (*ptr_to_globals).last_status_cksum = 0;
              current_block = 15129665204879337069;
            }
            6152256259730122749 => {
              current_block = 7534742345255184552;
            }
            12883932598258173301 => {
              current_block = 8800996768013373992;
            }
            11242998110520238401 => {
              redraw(1i32);
              current_block = 15129665204879337069;
            }
            13619733043935729992 => {
              loop {
                dot_next();
                dot_skip_over_ws();
                (*ptr_to_globals).cmdcnt -= 1;
                if !((*ptr_to_globals).cmdcnt > 0) {
                  break;
                }
              }
              current_block = 15129665204879337069;
            }
            9339065157412720613 => {
              dot_scroll(
                (*ptr_to_globals)
                  .rows
                  .wrapping_sub(2i32 as libc::c_uint)
                  .wrapping_div(2i32 as libc::c_uint) as libc::c_int,
                -1i32,
              );
              current_block = 15129665204879337069;
            }
            11447082683497798022 => {
              dot_scroll(1i32, -1i32);
              current_block = 15129665204879337069;
            }
            5182000506326660482 => {
              current_block = 13993698454868426881;
            }
            1105010766850597332 => {
              if !(*ptr_to_globals).reg[27].is_null() {
                p = begin_line((*ptr_to_globals).dot);
                q = end_line((*ptr_to_globals).dot);
                p = text_hole_delete(p, q, 1i32);
                p = p.offset(string_insert(p, (*ptr_to_globals).reg[27], 2i32) as isize);
                (*ptr_to_globals).dot = p;
                dot_skip_over_ws();
              }
              current_block = 15129665204879337069;
            }
            8616046655533110204 => {
              undo_pop();
              current_block = 15129665204879337069;
            }
            5127767458142431603 => {
              loop {
                (*ptr_to_globals).dot = end_line((*ptr_to_globals).dot);
                (*ptr_to_globals).cmdcnt -= 1;
                if (*ptr_to_globals).cmdcnt <= 0 {
                  break;
                }
                dot_next();
              }
              current_block = 15129665204879337069;
            }
            222014967776118151 => {
              (*ptr_to_globals).last_forward_char = get_one_char();
              current_block = 7856905509180742666;
            }
            11209792479411604110 => {
              loop {
                dot_prev();
                dot_skip_over_ws();
                (*ptr_to_globals).cmdcnt -= 1;
                if !((*ptr_to_globals).cmdcnt > 0) {
                  break;
                }
              }
              current_block = 15129665204879337069;
            }
            3364823792826654116 => {
              if (*ptr_to_globals).lmc_len != 0 {
                (*ptr_to_globals).ioq_start = crate::libbb::xfuncs_printf::xstrndup(
                  (*ptr_to_globals).last_modifying_cmd.as_mut_ptr(),
                  (*ptr_to_globals).lmc_len,
                );
                (*ptr_to_globals).ioq = (*ptr_to_globals).ioq_start
              }
              current_block = 15129665204879337069;
            }
            18096603330221575131 => {
              current_block = 17498168302144015873;
            }
            16891123271837848903 => {
              dot_end();
              current_block = 1752638907092016026;
            }
            8517235759107662071 => {
              current_block = 5847749760081351726;
            }
            12525254419223051704 => {
              if (*ptr_to_globals).dot < (*ptr_to_globals).end.offset(-1) {
                (*ptr_to_globals).dot = yank_delete(
                  (*ptr_to_globals).dot,
                  (*ptr_to_globals).dot,
                  1i32,
                  YANKDEL as libc::c_int,
                  1i32,
                )
              }
              current_block = 15129665204879337069;
            }
            15232911949322867522 => {
              current_block = 17251831742223396249;
            }
            10863374208794025069 => {
              current_block = 1895262434596074581;
            }
            451126677064669119 => {
              loop {
                dot_prev();
                (*ptr_to_globals).dot = move_to_col(
                  (*ptr_to_globals).dot,
                  (*ptr_to_globals).ccol + (*ptr_to_globals).offset,
                );
                (*ptr_to_globals).cmdcnt -= 1;
                if !((*ptr_to_globals).cmdcnt > 0) {
                  break;
                }
              }
              current_block = 15129665204879337069;
            }
            4611735929166613116 => {
              loop {
                if bb_ascii_isalnum(*(*ptr_to_globals).dot as libc::c_uchar) != 0
                  || *(*ptr_to_globals).dot as libc::c_int == '_' as i32
                {
                  (*ptr_to_globals).dot = skip_thing(
                    (*ptr_to_globals).dot,
                    1i32,
                    FORWARD as libc::c_int,
                    S_END_ALNUM as libc::c_int,
                  )
                } else if *strchrnul(
                  b"!\"#$%&\'()*+,-./:;<=>?@[\\]^_`{|}~\x00" as *const u8 as *const libc::c_char,
                  *(*ptr_to_globals).dot as libc::c_int,
                )
                .offset(0)
                  != 0
                {
                  (*ptr_to_globals).dot = skip_thing(
                    (*ptr_to_globals).dot,
                    1i32,
                    FORWARD as libc::c_int,
                    S_END_PUNCT as libc::c_int,
                  )
                }
                if (*ptr_to_globals).dot < (*ptr_to_globals).end.offset(-1) {
                  (*ptr_to_globals).dot = (*ptr_to_globals).dot.offset(1)
                }
                if ({
                  let mut bb__isspace: libc::c_uchar =
                    (*(*ptr_to_globals).dot as libc::c_int - 9i32) as libc::c_uchar;
                  (bb__isspace as libc::c_int == ' ' as i32 - 9i32
                    || bb__isspace as libc::c_int <= 13i32 - 9i32) as libc::c_int
                }) != 0
                {
                  (*ptr_to_globals).dot = skip_thing(
                    (*ptr_to_globals).dot,
                    2i32,
                    FORWARD as libc::c_int,
                    S_OVER_WS as libc::c_int,
                  )
                }
                (*ptr_to_globals).cmdcnt -= 1;
                if !((*ptr_to_globals).cmdcnt > 0) {
                  break;
                }
              }
              current_block = 15129665204879337069;
            }
            4386451087681909888 => {
              (*ptr_to_globals).dot =
                move_to_col((*ptr_to_globals).dot, (*ptr_to_globals).cmdcnt - 1i32);
              current_block = 15129665204879337069;
            }
            1296397779060594135 => {
              dot_begin();
              current_block = 15129665204879337069;
            }
            _ => {}
          }
          match current_block {
            15129665204879337069 => {}
            8629930936610358348 => {}
            _ => {
              match current_block {
                17251831742223396249 => {
                  dir = 0;
                  if c == 'X' as i32 {
                    dir = -1i32
                  }
                  loop {
                    if *(*ptr_to_globals).dot.offset(dir as isize) as libc::c_int != '\n' as i32 {
                      if c == 'X' as i32 {
                        (*ptr_to_globals).dot = (*ptr_to_globals).dot.offset(-1)
                      }
                      (*ptr_to_globals).dot = yank_delete(
                        (*ptr_to_globals).dot,
                        (*ptr_to_globals).dot,
                        0,
                        YANKDEL as libc::c_int,
                        1i32,
                      )
                    }
                    (*ptr_to_globals).cmdcnt -= 1;
                    if !((*ptr_to_globals).cmdcnt > 0) {
                      break;
                    }
                  }
                  end_cmd_q();
                  if c == 's' as i32 {
                    current_block = 8629930936610358348;
                  } else {
                    current_block = 15129665204879337069;
                  }
                }
                2087484904894455135 => {
                  dot_end();
                  (*ptr_to_globals).dot =
                    char_insert((*ptr_to_globals).dot, '\n' as i32 as libc::c_char, 1i32);
                  current_block = 8629930936610358348;
                }
                11945623545738147997 => {
                  (*ptr_to_globals).dot = (*ptr_to_globals).end.offset(-1);
                  if (*ptr_to_globals).cmdcnt > 0 {
                    (*ptr_to_globals).dot = find_line((*ptr_to_globals).cmdcnt)
                  }
                  dot_skip_over_ws();
                  current_block = 15129665204879337069;
                }
                5847749760081351726 => {
                  dir = FORWARD as libc::c_int;
                  if c == 'B' as i32 {
                    dir = BACK as libc::c_int
                  }
                  loop {
                    if c == 'W' as i32
                      || ({
                        let mut bb__isspace: libc::c_uchar =
                          (*(*ptr_to_globals).dot.offset(dir as isize) as libc::c_int - 9i32)
                            as libc::c_uchar;
                        (bb__isspace as libc::c_int == ' ' as i32 - 9i32
                          || bb__isspace as libc::c_int <= 13i32 - 9i32)
                          as libc::c_int
                      }) != 0
                    {
                      (*ptr_to_globals).dot =
                        skip_thing((*ptr_to_globals).dot, 1i32, dir, S_TO_WS as libc::c_int);
                      (*ptr_to_globals).dot =
                        skip_thing((*ptr_to_globals).dot, 2i32, dir, S_OVER_WS as libc::c_int)
                    }
                    if c != 'W' as i32 {
                      (*ptr_to_globals).dot =
                        skip_thing((*ptr_to_globals).dot, 1i32, dir, S_BEFORE_WS as libc::c_int)
                    }
                    (*ptr_to_globals).cmdcnt -= 1;
                    if !((*ptr_to_globals).cmdcnt > 0) {
                      break;
                    }
                  }
                  current_block = 15129665204879337069;
                }
                17440971994642376514 => {
                  current_block = 15129665204879337069;
                }
                7534742345255184552 => {
                  current_block = 17247297260531395789;
                }
                8800996768013373992 => {
                  loop {
                    dot_next();
                    (*ptr_to_globals).dot = move_to_col(
                      (*ptr_to_globals).dot,
                      (*ptr_to_globals).ccol + (*ptr_to_globals).offset,
                    );
                    (*ptr_to_globals).cmdcnt -= 1;
                    if !((*ptr_to_globals).cmdcnt > 0) {
                      break;
                    }
                  }
                  current_block = 15129665204879337069;
                }
                13993698454868426881 => {
                  loop {
                    dot_right();
                    (*ptr_to_globals).cmdcnt -= 1;
                    if !((*ptr_to_globals).cmdcnt > 0) {
                      break;
                    }
                  }
                  current_block = 15129665204879337069;
                }
                7856905509180742666 => {
                  while !((*ptr_to_globals).last_forward_char == 0) {
                    q = (*ptr_to_globals).dot.offset(1);
                    while q < (*ptr_to_globals).end.offset(-1)
                      && *q as libc::c_int != '\n' as i32
                      && *q as libc::c_int != (*ptr_to_globals).last_forward_char
                    {
                      q = q.offset(1)
                    }
                    if *q as libc::c_int == (*ptr_to_globals).last_forward_char {
                      (*ptr_to_globals).dot = q
                    }
                    (*ptr_to_globals).cmdcnt -= 1;
                    if !((*ptr_to_globals).cmdcnt > 0) {
                      break;
                    }
                  }
                  current_block = 15129665204879337069;
                }
                17498168302144015873 => {
                  current_block = 8681395796513813967;
                }
                1752638907092016026 => {
                  if *(*ptr_to_globals).dot as libc::c_int != '\n' as i32 {
                    (*ptr_to_globals).dot = (*ptr_to_globals).dot.offset(1)
                  }
                  current_block = 8629930936610358348;
                }
                3268579060917229304 => {
                  current_block = 8629930936610358348;
                }
                1895262434596074581 => {
                  current_block = 8908416993177701018;
                }
                _ => {}
              }
              match current_block {
                8629930936610358348 => {}
                15129665204879337069 => {}
                _ => {
                  match current_block {
                    17247297260531395789 => {
                      loop {
                        dot_left();
                        (*ptr_to_globals).cmdcnt -= 1;
                        if !((*ptr_to_globals).cmdcnt > 0) {
                          break;
                        }
                      }
                      current_block = 15129665204879337069;
                    }
                    8681395796513813967 => {
                      current_block = 5591548203144509315;
                    }
                    8908416993177701018 => {
                      current_block = 16124761010012532485;
                    }
                    _ => {}
                  }
                  match current_block {
                    15129665204879337069 => {}
                    _ => {
                      match current_block {
                        16124761010012532485 => {
                          let mut yf: libc::c_int = 0;
                          let mut ml: libc::c_int = 0;
                          let mut whole: libc::c_int = 0;
                          yf = YANKDEL as libc::c_int;
                          if c == 'y' as i32 || c == 'Y' as i32 {
                            yf = YANKONLY as libc::c_int
                          }
                          c1 = 'y' as i32;
                          if c != 'Y' as i32 {
                            c1 = get_one_char()
                          }
                          ml = find_range(&mut p, &mut q, c1 as libc::c_char);
                          place_cursor(0i32, 0);
                          if c1 == 27i32 {
                            c1 = 27i32;
                            c = c1
                          } else if !strchr(b"wW\x00" as *const u8 as *const libc::c_char, c1)
                            .is_null()
                          {
                            ml = 0;
                            if c == 'c' as i32 {
                              while ({
                                let mut bb__isspace: libc::c_uchar =
                                  (*q as libc::c_int - 9i32) as libc::c_uchar;
                                (bb__isspace as libc::c_int == ' ' as i32 - 9i32
                                  || bb__isspace as libc::c_int <= 13i32 - 9i32)
                                  as libc::c_int
                              }) != 0
                                && q > p
                              {
                                q = q.offset(-1)
                              }
                            }
                            (*ptr_to_globals).dot = yank_delete(p, q, ml, yf, 1i32)
                          } else if !strchr(
                            b"^0bBeEft%$ lh\x08\x7f\x00" as *const u8 as *const libc::c_char,
                            c1,
                          )
                          .is_null()
                          {
                            (*ptr_to_globals).dot = yank_delete(p, q, ml, yf, 1i32)
                          } else if !strchr(
                            b"cdykjGHL+-{}\r\n\x00" as *const u8 as *const libc::c_char,
                            c1,
                          )
                          .is_null()
                          {
                            (*ptr_to_globals).dot = yank_delete(p, q, ml, yf, 1i32);
                            whole = 1i32
                          } else {
                            c1 = 27i32;
                            c = c1;
                            ml = 0;
                            indicate_error();
                          }
                          if ml != 0 && whole != 0 {
                            if c == 'c' as i32 {
                              (*ptr_to_globals).dot = char_insert(
                                (*ptr_to_globals).dot,
                                '\n' as i32 as libc::c_char,
                                2i32,
                              );
                              if whole != 0
                                && (*ptr_to_globals).dot != (*ptr_to_globals).end.offset(-1)
                              {
                                dot_prev();
                              }
                            } else if c == 'd' as i32 {
                              dot_begin();
                              dot_skip_over_ws();
                            }
                          }
                          if c1 != 27i32 {
                            if c == 'c' as i32 {
                              strcpy(
                                buf.as_mut_ptr(),
                                b"Change\x00" as *const u8 as *const libc::c_char,
                              );
                              current_block = 8629930936610358348;
                            } else {
                              if c == 'd' as i32 {
                                strcpy(
                                  buf.as_mut_ptr(),
                                  b"Delete\x00" as *const u8 as *const libc::c_char,
                                );
                              }
                              if c == 'y' as i32 || c == 'Y' as i32 {
                                strcpy(
                                  buf.as_mut_ptr(),
                                  b"Yank\x00" as *const u8 as *const libc::c_char,
                                );
                              }
                              p = (*ptr_to_globals).reg[(*ptr_to_globals).YDreg as usize];
                              q = p.offset(strlen(p) as isize);
                              cnt = 0;
                              while p <= q {
                                if *p as libc::c_int == '\n' as i32 {
                                  cnt += 1
                                }
                                p = p.offset(1)
                              }
                              status_line(
                                b"%s %u lines (%u chars) using [%c]\x00" as *const u8
                                  as *const libc::c_char,
                                buf.as_mut_ptr(),
                                cnt,
                                strlen((*ptr_to_globals).reg[(*ptr_to_globals).YDreg as usize])
                                  as libc::c_uint,
                                what_reg() as libc::c_int,
                              );
                              end_cmd_q();
                              current_block = 15129665204879337069;
                            }
                          } else {
                            current_block = 15129665204879337069;
                          }
                        }
                        5591548203144509315 => {
                          current_block = 2636677179867529885;
                        }
                        _ => {}
                      }
                      match current_block {
                        15129665204879337069 => {}
                        8629930936610358348 => {}
                        _ => {
                          match current_block {
                            2636677179867529885 => {
                              current_block = 12309206730560524281;
                            }
                            _ => {}
                          }
                          match current_block {
                            12309206730560524281 => {
                              current_block = 3325768110057758661;
                            }
                            _ => {}
                          }
                          match current_block {
                            3325768110057758661 => {
                              current_block = 14815832896553429982;
                            }
                            _ => {}
                          }
                          match current_block {
                            14815832896553429982 => {
                              current_block = 10731695520297161438;
                            }
                            _ => {}
                          }
                          match current_block {
                            10731695520297161438 => {
                              if c == '0' as i32 && (*ptr_to_globals).cmdcnt < 1i32 {
                                dot_begin();
                              } else {
                                (*ptr_to_globals).cmdcnt =
                                  (*ptr_to_globals).cmdcnt * 10i32 + (c - '0' as i32)
                              }
                              current_block = 15129665204879337069;
                            }
                            _ => {}
                          }
                          match current_block {
                            15129665204879337069 => {}
                            _ => {
                              loop {
                                match current_block {
                                  16813369756331276724 => {
                                    msg = std::ptr::null();
                                    current_block = 7392824444931029276;
                                  }
                                  7392824444931029276 => {
                                    dir = FORWARD as libc::c_int;
                                    p = (*ptr_to_globals).dot.offset(1);
                                    if *(*ptr_to_globals).last_search_pattern.offset(0)
                                      as libc::c_int
                                      == '?' as i32
                                    {
                                      dir = BACK as libc::c_int;
                                      p = (*ptr_to_globals).dot.offset(-1)
                                    }
                                    current_block = 4166979493554389389;
                                  }
                                  _ => {
                                    q = char_search(
                                      p,
                                      (*ptr_to_globals).last_search_pattern.offset(1),
                                      dir << 1i32 | FULL as libc::c_int,
                                    );
                                    if !q.is_null() {
                                      (*ptr_to_globals).dot = q;
                                      msg = std::ptr::null()
                                    } else {
                                      p = (*ptr_to_globals).text;
                                      if dir == BACK as libc::c_int {
                                        p = (*ptr_to_globals).end.offset(-1)
                                      }
                                      q = char_search(
                                        p,
                                        (*ptr_to_globals).last_search_pattern.offset(1),
                                        dir << 1i32 | FULL as libc::c_int,
                                      );
                                      if !q.is_null() {
                                        (*ptr_to_globals).dot = q;
                                        msg = b"search hit BOTTOM, continuing at TOP\x00"
                                          as *const u8
                                          as *const libc::c_char;
                                        if dir == BACK as libc::c_int {
                                          msg = b"search hit TOP, continuing at BOTTOM\x00"
                                            as *const u8
                                            as *const libc::c_char
                                        }
                                      } else {
                                        msg = b"Pattern not found\x00" as *const u8
                                          as *const libc::c_char
                                      }
                                    }
                                    if !msg.is_null() {
                                      status_line_bold(
                                        b"%s\x00" as *const u8 as *const libc::c_char,
                                        msg,
                                      );
                                    }
                                    (*ptr_to_globals).cmdcnt -= 1;
                                    if (*ptr_to_globals).cmdcnt > 0 {
                                      current_block = 16813369756331276724;
                                    } else {
                                      break;
                                    }
                                  }
                                }
                              }
                              current_block = 15129665204879337069;
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
        45 => {
          current_block = 11209792479411604110;
          match current_block {
            16992905640583886232 => {
              loop {
                if (*(*ptr_to_globals).dot as libc::c_int - 'a' as i32) as libc::c_uchar
                  as libc::c_int
                  <= 'z' as i32 - 'a' as i32
                {
                  undo_push(
                    (*ptr_to_globals).dot,
                    1i32 as libc::c_uint,
                    1i32 as libc::c_uchar,
                  );
                  *(*ptr_to_globals).dot =
                    bb_ascii_toupper(*(*ptr_to_globals).dot as libc::c_uchar) as libc::c_char;
                  undo_push(
                    (*ptr_to_globals).dot,
                    1i32 as libc::c_uint,
                    2i32 as libc::c_uchar,
                  );
                } else if (*(*ptr_to_globals).dot as libc::c_int - 'A' as i32) as libc::c_uchar
                  as libc::c_int
                  <= 'Z' as i32 - 'A' as i32
                {
                  undo_push(
                    (*ptr_to_globals).dot,
                    1i32 as libc::c_uint,
                    1i32 as libc::c_uchar,
                  );
                  *(*ptr_to_globals).dot =
                    bb_ascii_tolower(*(*ptr_to_globals).dot as libc::c_uchar) as libc::c_char;
                  undo_push(
                    (*ptr_to_globals).dot,
                    1i32 as libc::c_uint,
                    2i32 as libc::c_uchar,
                  );
                }
                dot_right();
                (*ptr_to_globals).cmdcnt -= 1;
                if !((*ptr_to_globals).cmdcnt > 0) {
                  break;
                }
              }
              end_cmd_q();
              current_block = 15129665204879337069;
            }
            8729655159604064397 => {
              c1 = get_one_char();
              cnt = 0;
              if c1 == '.' as i32 {
                cnt = (*ptr_to_globals)
                  .rows
                  .wrapping_sub(2i32 as libc::c_uint)
                  .wrapping_div(2i32 as libc::c_uint) as libc::c_int
              }
              if c1 == '-' as i32 {
                cnt = (*ptr_to_globals).rows.wrapping_sub(2i32 as libc::c_uint) as libc::c_int
              }
              (*ptr_to_globals).screenbegin = begin_line((*ptr_to_globals).dot);
              dot_scroll(cnt, -1i32);
              current_block = 15129665204879337069;
            }
            15899500648299942075 => {
              (*ptr_to_globals).last_forward_char = get_one_char();
              do_cmd(';' as i32);
              if *(*ptr_to_globals).dot as libc::c_int == (*ptr_to_globals).last_forward_char {
                dot_left();
              }
              (*ptr_to_globals).last_forward_char = 0;
              current_block = 15129665204879337069;
            }
            9051390181078481641 => {
              c1 = get_one_char();
              if *(*ptr_to_globals).dot as libc::c_int != '\n' as i32 {
                (*ptr_to_globals).dot =
                  text_hole_delete((*ptr_to_globals).dot, (*ptr_to_globals).dot, 1i32);
                (*ptr_to_globals).dot =
                  char_insert((*ptr_to_globals).dot, c1 as libc::c_char, 2i32);
                dot_left();
              }
              end_cmd_q();
              current_block = 15129665204879337069;
            }
            877115918601926659 => {
              dir = FORWARD as libc::c_int;
              if c == 'b' as i32 {
                dir = BACK as libc::c_int
              }
              while !((*ptr_to_globals).dot.offset(dir as isize) < (*ptr_to_globals).text
                || (*ptr_to_globals).dot.offset(dir as isize) > (*ptr_to_globals).end.offset(-1))
              {
                (*ptr_to_globals).dot = (*ptr_to_globals).dot.offset(dir as isize);
                if ({
                  let mut bb__isspace: libc::c_uchar =
                    (*(*ptr_to_globals).dot as libc::c_int - 9i32) as libc::c_uchar;
                  (bb__isspace as libc::c_int == ' ' as i32 - 9i32
                    || bb__isspace as libc::c_int <= 13i32 - 9i32) as libc::c_int
                }) != 0
                {
                  (*ptr_to_globals).dot = skip_thing(
                    (*ptr_to_globals).dot,
                    if c == 'e' as i32 { 2i32 } else { 1i32 },
                    dir,
                    S_OVER_WS as libc::c_int,
                  )
                }
                if bb_ascii_isalnum(*(*ptr_to_globals).dot as libc::c_uchar) != 0
                  || *(*ptr_to_globals).dot as libc::c_int == '_' as i32
                {
                  (*ptr_to_globals).dot =
                    skip_thing((*ptr_to_globals).dot, 1i32, dir, S_END_ALNUM as libc::c_int)
                } else if *strchrnul(
                  b"!\"#$%&\'()*+,-./:;<=>?@[\\]^_`{|}~\x00" as *const u8 as *const libc::c_char,
                  *(*ptr_to_globals).dot as libc::c_int,
                )
                .offset(0)
                  != 0
                {
                  (*ptr_to_globals).dot =
                    skip_thing((*ptr_to_globals).dot, 1i32, dir, S_END_PUNCT as libc::c_int)
                }
                (*ptr_to_globals).cmdcnt -= 1;
                if !((*ptr_to_globals).cmdcnt > 0) {
                  break;
                }
              }
              current_block = 15129665204879337069;
            }
            1085022737867179637 => {
              dot_begin();
              dot_skip_over_ws();
              current_block = 15129665204879337069;
            }
            3113147720494587438 => {
              c1 = get_one_char();
              if c1 != 'Z' as i32 {
                indicate_error();
              } else if (*ptr_to_globals).modified_count != 0 {
                if 1i32 != 0 && (*ptr_to_globals).readonly_mode as libc::c_int != 0 {
                  status_line_bold(
                    b"\'%s\' is read only\x00" as *const u8 as *const libc::c_char,
                    (*ptr_to_globals).current_filename,
                  );
                } else {
                  cnt = file_write(
                    (*ptr_to_globals).current_filename,
                    (*ptr_to_globals).text,
                    (*ptr_to_globals).end.offset(-1),
                  );
                  if cnt < 0 {
                    if cnt == -1i32 {
                      status_line_bold(b"Write error: %m\x00" as *const u8 as *const libc::c_char);
                    }
                  } else if cnt as libc::c_long
                    == (*ptr_to_globals)
                      .end
                      .offset(-1)
                      .wrapping_offset_from((*ptr_to_globals).text)
                      as libc::c_long
                      + 1
                  {
                    (*ptr_to_globals).editing = 0 as smallint
                  }
                }
              } else {
                (*ptr_to_globals).editing = 0 as smallint
              }
              current_block = 15129665204879337069;
            }
            12960118908218882441 => {
              p = begin_line((*ptr_to_globals).dot);
              if *p.offset(-1i32 as isize) as libc::c_int == '\n' as i32 {
                dot_prev();
                current_block = 2087484904894455135;
              } else {
                dot_begin();
                (*ptr_to_globals).dot =
                  char_insert((*ptr_to_globals).dot, '\n' as i32 as libc::c_char, 1i32);
                dot_prev();
                current_block = 8629930936610358348;
              }
            }
            8720450212473544924 => {
              (*ptr_to_globals).dot = (*ptr_to_globals).screenbegin;
              cnt = 0;
              while (cnt as libc::c_uint)
                < (*ptr_to_globals)
                  .rows
                  .wrapping_sub(1i32 as libc::c_uint)
                  .wrapping_div(2i32 as libc::c_uint)
              {
                (*ptr_to_globals).dot = next_line((*ptr_to_globals).dot);
                cnt += 1
              }
              current_block = 15129665204879337069;
            }
            13015277209715431090 => {
              (*ptr_to_globals).dot = end_screen();
              if (*ptr_to_globals).cmdcnt as libc::c_uint
                > (*ptr_to_globals).rows.wrapping_sub(1i32 as libc::c_uint)
              {
                (*ptr_to_globals).cmdcnt =
                  (*ptr_to_globals).rows.wrapping_sub(1i32 as libc::c_uint) as libc::c_int
              }
              (*ptr_to_globals).cmdcnt -= 1;
              if (*ptr_to_globals).cmdcnt > 0 {
                do_cmd('-' as i32);
              }
              dot_begin();
              dot_skip_over_ws();
              current_block = 15129665204879337069;
            }
            9800435767766781385 => {
              loop {
                dot_end();
                if (*ptr_to_globals).dot < (*ptr_to_globals).end.offset(-1) {
                  undo_push(
                    (*ptr_to_globals).dot,
                    1i32 as libc::c_uint,
                    1i32 as libc::c_uchar,
                  );
                  let fresh15 = (*ptr_to_globals).dot;
                  (*ptr_to_globals).dot = (*ptr_to_globals).dot.offset(1);
                  *fresh15 = ' ' as i32 as libc::c_char;
                  undo_push(
                    (*ptr_to_globals).dot.offset(-1),
                    1i32 as libc::c_uint,
                    2i32 as libc::c_uchar,
                  );
                  while ({
                    let mut bb__isblank: libc::c_uchar = *(*ptr_to_globals).dot as libc::c_uchar;
                    (bb__isblank as libc::c_int == ' ' as i32
                      || bb__isblank as libc::c_int == '\t' as i32)
                      as libc::c_int
                  }) != 0
                  {
                    text_hole_delete((*ptr_to_globals).dot, (*ptr_to_globals).dot, 2i32);
                  }
                }
                (*ptr_to_globals).cmdcnt -= 1;
                if !((*ptr_to_globals).cmdcnt > 0) {
                  break;
                }
              }
              end_cmd_q();
              current_block = 15129665204879337069;
            }
            3432363526595694666 => {
              dot_begin();
              dot_skip_over_ws();
              current_block = 3268579060917229304;
            }
            3494829253343353619 => {
              (*ptr_to_globals).dot = (*ptr_to_globals).screenbegin;
              if (*ptr_to_globals).cmdcnt as libc::c_uint
                > (*ptr_to_globals).rows.wrapping_sub(1i32 as libc::c_uint)
              {
                (*ptr_to_globals).cmdcnt =
                  (*ptr_to_globals).rows.wrapping_sub(1i32 as libc::c_uint) as libc::c_int
              }
              (*ptr_to_globals).cmdcnt -= 1;
              if (*ptr_to_globals).cmdcnt > 0 {
                do_cmd('+' as i32);
              }
              dot_skip_over_ws();
              current_block = 15129665204879337069;
            }
            17973101765331640574 => {
              c1 = get_one_char();
              if c1 != 'g' as i32 {
                buf[0] = 'g' as i32 as libc::c_char;
                buf[1] = if c1 >= 0 { c1 } else { '*' as i32 } as libc::c_char;
                buf[2] = '\u{0}' as i32 as libc::c_char;
                not_implemented(buf.as_mut_ptr());
                current_block = 15129665204879337069;
              } else {
                if (*ptr_to_globals).cmdcnt == 0 {
                  (*ptr_to_globals).cmdcnt = 1i32
                }
                current_block = 11945623545738147997;
              }
            }
            16546625800574160972 => {
              save_dot = (*ptr_to_globals).dot;
              (*ptr_to_globals).dot = dollar_line((*ptr_to_globals).dot);
              (*ptr_to_globals).dot = yank_delete(
                save_dot,
                (*ptr_to_globals).dot,
                0,
                YANKDEL as libc::c_int,
                1i32,
              );
              if c == 'C' as i32 {
                current_block = 8629930936610358348;
              } else {
                if c == 'D' as i32 {
                  end_cmd_q();
                }
                current_block = 15129665204879337069;
              }
            }
            11937696639986586685 => {
              cnt = count_lines((*ptr_to_globals).text, (*ptr_to_globals).dot);
              c1 = get_one_char();
              find_range(&mut p, &mut q, c1 as libc::c_char);
              yank_delete(p, q, 1i32, YANKONLY as libc::c_int, 0);
              p = begin_line(p);
              q = end_line(q);
              i = count_lines(p, q);
              while i > 0 {
                if c == '<' as i32 {
                  if *p as libc::c_int == '\t' as i32 {
                    text_hole_delete(p, p, 0);
                  } else if *p as libc::c_int == ' ' as i32 {
                    j = 0;
                    while *p as libc::c_int == ' ' as i32 && j < (*ptr_to_globals).tabstop {
                      text_hole_delete(p, p, 0);
                      j += 1
                    }
                  }
                } else if c == '>' as i32 {
                  char_insert(p, '\t' as i32 as libc::c_char, 1i32);
                }
                i -= 1;
                p = next_line(p)
              }
              (*ptr_to_globals).dot = find_line(cnt);
              dot_skip_over_ws();
              end_cmd_q();
              current_block = 15129665204879337069;
            }
            17725350714912028156 => {
              p = get_input_line(b":\x00" as *const u8 as *const libc::c_char);
              colon(p);
              current_block = 15129665204879337069;
            }
            14526470074083880812 => {
              q = char_search(
                (*ptr_to_globals).dot,
                b"\n\n\x00" as *const u8 as *const libc::c_char,
                (FORWARD as libc::c_int) << 1i32 | FULL as libc::c_int,
              );
              if !q.is_null() {
                (*ptr_to_globals).dot = next_line(q)
              }
              current_block = 15129665204879337069;
            }
            8893187391306414141 => {
              q = char_search(
                (*ptr_to_globals).dot,
                b"\n\n\x00" as *const u8 as *const libc::c_char,
                ((BACK as libc::c_int as libc::c_uint) << 1i32
                  | FULL as libc::c_int as libc::c_uint) as libc::c_int,
              );
              if !q.is_null() {
                (*ptr_to_globals).dot = next_line(q)
              }
              current_block = 15129665204879337069;
            }
            7021673758293221412 => {
              dir = BACK as libc::c_int;
              p = (*ptr_to_globals).dot.offset(-1);
              if *(*ptr_to_globals).last_search_pattern.offset(0) as libc::c_int == '?' as i32 {
                dir = FORWARD as libc::c_int;
                p = (*ptr_to_globals).dot.offset(1)
              }
              current_block = 4166979493554389389;
            }
            18374191879090272823 => {
              buf[0] = c as libc::c_char;
              buf[1] = '\u{0}' as i32 as libc::c_char;
              q = get_input_line(buf.as_mut_ptr());
              if *q.offset(0) as libc::c_int != 0 && *q.offset(1) == 0 {
                if *(*ptr_to_globals).last_search_pattern.offset(0) != 0 {
                  *(*ptr_to_globals).last_search_pattern.offset(0) = c as libc::c_char
                }
                current_block = 7392824444931029276;
              } else if *q.offset(0) != 0 {
                free((*ptr_to_globals).last_search_pattern as *mut libc::c_void);
                (*ptr_to_globals).last_search_pattern = crate::libbb::xfuncs_printf::xstrdup(q);
                current_block = 7392824444931029276;
              } else {
                current_block = 15129665204879337069;
              }
            }
            16407828456666301883 => {
              if (*ptr_to_globals).last_forward_char == 0 {
                current_block = 15129665204879337069;
              } else {
                loop {
                  q = (*ptr_to_globals).dot.offset(-1);
                  while q >= (*ptr_to_globals).text
                    && *q as libc::c_int != '\n' as i32
                    && *q as libc::c_int != (*ptr_to_globals).last_forward_char
                  {
                    q = q.offset(-1)
                  }
                  if q >= (*ptr_to_globals).text
                    && *q as libc::c_int == (*ptr_to_globals).last_forward_char
                  {
                    (*ptr_to_globals).dot = q
                  }
                  (*ptr_to_globals).cmdcnt -= 1;
                  if !((*ptr_to_globals).cmdcnt > 0) {
                    break;
                  }
                }
                current_block = 15129665204879337069;
              }
            }
            9018432604062702004 => {
              q = (*ptr_to_globals).dot;
              while q < (*ptr_to_globals).end && *q as libc::c_int != '\n' as i32 {
                if !strchr(
                  b"()[]{}\x00" as *const u8 as *const libc::c_char,
                  *q as libc::c_int,
                )
                .is_null()
                {
                  p = find_pair(q, *q);
                  if p.is_null() {
                    indicate_error();
                  } else {
                    (*ptr_to_globals).dot = p
                  }
                  break;
                } else {
                  q = q.offset(1)
                }
              }
              if *q as libc::c_int == '\n' as i32 {
                indicate_error();
              }
              current_block = 15129665204879337069;
            }
            10247103787464459848 => {
              p = (*ptr_to_globals).reg[(*ptr_to_globals).YDreg as usize];
              if p.is_null() {
                status_line_bold(
                  b"Nothing in register %c\x00" as *const u8 as *const libc::c_char,
                  what_reg() as libc::c_int,
                );
              } else {
                if !strchr(p, '\n' as i32).is_null() {
                  if c == 'P' as i32 {
                    dot_begin();
                  }
                  if c == 'p' as i32 {
                    if end_line((*ptr_to_globals).dot) == (*ptr_to_globals).end.offset(-1) {
                      (*ptr_to_globals).dot = (*ptr_to_globals).end
                    } else {
                      dot_next();
                    }
                  }
                } else if c == 'p' as i32 {
                  dot_right();
                }
                string_insert((*ptr_to_globals).dot, p, 1i32);
                end_cmd_q();
              }
              current_block = 15129665204879337069;
            }
            15260732871948875843 => {
              c1 = (get_one_char() | 0x20i32) - 'a' as i32;
              if c1 as libc::c_uint <= 25i32 as libc::c_uint {
                (*ptr_to_globals).mark[c1 as usize] = (*ptr_to_globals).dot
              } else {
                indicate_error();
              }
              current_block = 15129665204879337069;
            }
            12738322036487086035 => {
              c1 = get_one_char() | 0x20i32;
              if (c1 - 'a' as i32) as libc::c_uint <= 25i32 as libc::c_uint {
                c1 = c1 - 'a' as i32;
                q = (*ptr_to_globals).mark[c1 as usize];
                if (*ptr_to_globals).text <= q && q < (*ptr_to_globals).end {
                  (*ptr_to_globals).dot = q;
                  dot_begin();
                  dot_skip_over_ws();
                }
              } else if c1 == '\'' as i32 {
                (*ptr_to_globals).dot = swap_context((*ptr_to_globals).dot);
                dot_begin();
                dot_skip_over_ws();
              } else {
                indicate_error();
              }
              current_block = 15129665204879337069;
            }
            13255096073384561358 => {
              c1 = (get_one_char() | 0x20i32) - 'a' as i32;
              if c1 as libc::c_uint <= 25i32 as libc::c_uint {
                (*ptr_to_globals).YDreg = c1 as smalluint
              } else {
                indicate_error();
              }
              current_block = 15129665204879337069;
            }
            10258711639984089377 => {
              if (*ptr_to_globals).cmd_mode as libc::c_int == 0 {
                indicate_error();
              }
              (*ptr_to_globals).cmd_mode = 0 as smallint;
              undo_queue_commit();
              end_cmd_q();
              (*ptr_to_globals).last_status_cksum = 0;
              current_block = 15129665204879337069;
            }
            11439127087547047736 => {
              buf[0] = c as libc::c_char;
              buf[1] = '\u{0}' as i32 as libc::c_char;
              not_implemented(buf.as_mut_ptr());
              end_cmd_q();
              current_block = 17440971994642376514;
            }
            7961798899781870241 => {
              dot_scroll(
                (*ptr_to_globals).rows.wrapping_sub(2i32 as libc::c_uint) as libc::c_int,
                -1i32,
              );
              current_block = 15129665204879337069;
            }
            9426343755402444879 => {
              dot_scroll(
                (*ptr_to_globals)
                  .rows
                  .wrapping_sub(2i32 as libc::c_uint)
                  .wrapping_div(2i32 as libc::c_uint) as libc::c_int,
                1i32,
              );
              current_block = 15129665204879337069;
            }
            13352459794680105913 => {
              dot_scroll(1i32, 1i32);
              current_block = 15129665204879337069;
            }
            14142272253464333006 => {
              dot_scroll(
                (*ptr_to_globals).rows.wrapping_sub(2i32 as libc::c_uint) as libc::c_int,
                1i32,
              );
              current_block = 15129665204879337069;
            }
            10758177197742640066 => {
              (*ptr_to_globals).last_status_cksum = 0;
              current_block = 15129665204879337069;
            }
            6152256259730122749 => {
              current_block = 7534742345255184552;
            }
            12883932598258173301 => {
              current_block = 8800996768013373992;
            }
            11242998110520238401 => {
              redraw(1i32);
              current_block = 15129665204879337069;
            }
            13619733043935729992 => {
              loop {
                dot_next();
                dot_skip_over_ws();
                (*ptr_to_globals).cmdcnt -= 1;
                if !((*ptr_to_globals).cmdcnt > 0) {
                  break;
                }
              }
              current_block = 15129665204879337069;
            }
            9339065157412720613 => {
              dot_scroll(
                (*ptr_to_globals)
                  .rows
                  .wrapping_sub(2i32 as libc::c_uint)
                  .wrapping_div(2i32 as libc::c_uint) as libc::c_int,
                -1i32,
              );
              current_block = 15129665204879337069;
            }
            11447082683497798022 => {
              dot_scroll(1i32, -1i32);
              current_block = 15129665204879337069;
            }
            5182000506326660482 => {
              current_block = 13993698454868426881;
            }
            1105010766850597332 => {
              if !(*ptr_to_globals).reg[27].is_null() {
                p = begin_line((*ptr_to_globals).dot);
                q = end_line((*ptr_to_globals).dot);
                p = text_hole_delete(p, q, 1i32);
                p = p.offset(string_insert(p, (*ptr_to_globals).reg[27], 2i32) as isize);
                (*ptr_to_globals).dot = p;
                dot_skip_over_ws();
              }
              current_block = 15129665204879337069;
            }
            8616046655533110204 => {
              undo_pop();
              current_block = 15129665204879337069;
            }
            5127767458142431603 => {
              loop {
                (*ptr_to_globals).dot = end_line((*ptr_to_globals).dot);
                (*ptr_to_globals).cmdcnt -= 1;
                if (*ptr_to_globals).cmdcnt <= 0 {
                  break;
                }
                dot_next();
              }
              current_block = 15129665204879337069;
            }
            222014967776118151 => {
              (*ptr_to_globals).last_forward_char = get_one_char();
              current_block = 7856905509180742666;
            }
            11209792479411604110 => {
              loop {
                dot_prev();
                dot_skip_over_ws();
                (*ptr_to_globals).cmdcnt -= 1;
                if !((*ptr_to_globals).cmdcnt > 0) {
                  break;
                }
              }
              current_block = 15129665204879337069;
            }
            3364823792826654116 => {
              if (*ptr_to_globals).lmc_len != 0 {
                (*ptr_to_globals).ioq_start = crate::libbb::xfuncs_printf::xstrndup(
                  (*ptr_to_globals).last_modifying_cmd.as_mut_ptr(),
                  (*ptr_to_globals).lmc_len,
                );
                (*ptr_to_globals).ioq = (*ptr_to_globals).ioq_start
              }
              current_block = 15129665204879337069;
            }
            18096603330221575131 => {
              current_block = 17498168302144015873;
            }
            16891123271837848903 => {
              dot_end();
              current_block = 1752638907092016026;
            }
            8517235759107662071 => {
              current_block = 5847749760081351726;
            }
            12525254419223051704 => {
              if (*ptr_to_globals).dot < (*ptr_to_globals).end.offset(-1) {
                (*ptr_to_globals).dot = yank_delete(
                  (*ptr_to_globals).dot,
                  (*ptr_to_globals).dot,
                  1i32,
                  YANKDEL as libc::c_int,
                  1i32,
                )
              }
              current_block = 15129665204879337069;
            }
            15232911949322867522 => {
              current_block = 17251831742223396249;
            }
            10863374208794025069 => {
              current_block = 1895262434596074581;
            }
            451126677064669119 => {
              loop {
                dot_prev();
                (*ptr_to_globals).dot = move_to_col(
                  (*ptr_to_globals).dot,
                  (*ptr_to_globals).ccol + (*ptr_to_globals).offset,
                );
                (*ptr_to_globals).cmdcnt -= 1;
                if !((*ptr_to_globals).cmdcnt > 0) {
                  break;
                }
              }
              current_block = 15129665204879337069;
            }
            4611735929166613116 => {
              loop {
                if bb_ascii_isalnum(*(*ptr_to_globals).dot as libc::c_uchar) != 0
                  || *(*ptr_to_globals).dot as libc::c_int == '_' as i32
                {
                  (*ptr_to_globals).dot = skip_thing(
                    (*ptr_to_globals).dot,
                    1i32,
                    FORWARD as libc::c_int,
                    S_END_ALNUM as libc::c_int,
                  )
                } else if *strchrnul(
                  b"!\"#$%&\'()*+,-./:;<=>?@[\\]^_`{|}~\x00" as *const u8 as *const libc::c_char,
                  *(*ptr_to_globals).dot as libc::c_int,
                )
                .offset(0)
                  != 0
                {
                  (*ptr_to_globals).dot = skip_thing(
                    (*ptr_to_globals).dot,
                    1i32,
                    FORWARD as libc::c_int,
                    S_END_PUNCT as libc::c_int,
                  )
                }
                if (*ptr_to_globals).dot < (*ptr_to_globals).end.offset(-1) {
                  (*ptr_to_globals).dot = (*ptr_to_globals).dot.offset(1)
                }
                if ({
                  let mut bb__isspace: libc::c_uchar =
                    (*(*ptr_to_globals).dot as libc::c_int - 9i32) as libc::c_uchar;
                  (bb__isspace as libc::c_int == ' ' as i32 - 9i32
                    || bb__isspace as libc::c_int <= 13i32 - 9i32) as libc::c_int
                }) != 0
                {
                  (*ptr_to_globals).dot = skip_thing(
                    (*ptr_to_globals).dot,
                    2i32,
                    FORWARD as libc::c_int,
                    S_OVER_WS as libc::c_int,
                  )
                }
                (*ptr_to_globals).cmdcnt -= 1;
                if !((*ptr_to_globals).cmdcnt > 0) {
                  break;
                }
              }
              current_block = 15129665204879337069;
            }
            4386451087681909888 => {
              (*ptr_to_globals).dot =
                move_to_col((*ptr_to_globals).dot, (*ptr_to_globals).cmdcnt - 1i32);
              current_block = 15129665204879337069;
            }
            1296397779060594135 => {
              dot_begin();
              current_block = 15129665204879337069;
            }
            _ => {}
          }
          match current_block {
            15129665204879337069 => {}
            8629930936610358348 => {}
            _ => {
              match current_block {
                17251831742223396249 => {
                  dir = 0;
                  if c == 'X' as i32 {
                    dir = -1i32
                  }
                  loop {
                    if *(*ptr_to_globals).dot.offset(dir as isize) as libc::c_int != '\n' as i32 {
                      if c == 'X' as i32 {
                        (*ptr_to_globals).dot = (*ptr_to_globals).dot.offset(-1)
                      }
                      (*ptr_to_globals).dot = yank_delete(
                        (*ptr_to_globals).dot,
                        (*ptr_to_globals).dot,
                        0,
                        YANKDEL as libc::c_int,
                        1i32,
                      )
                    }
                    (*ptr_to_globals).cmdcnt -= 1;
                    if !((*ptr_to_globals).cmdcnt > 0) {
                      break;
                    }
                  }
                  end_cmd_q();
                  if c == 's' as i32 {
                    current_block = 8629930936610358348;
                  } else {
                    current_block = 15129665204879337069;
                  }
                }
                2087484904894455135 => {
                  dot_end();
                  (*ptr_to_globals).dot =
                    char_insert((*ptr_to_globals).dot, '\n' as i32 as libc::c_char, 1i32);
                  current_block = 8629930936610358348;
                }
                11945623545738147997 => {
                  (*ptr_to_globals).dot = (*ptr_to_globals).end.offset(-1);
                  if (*ptr_to_globals).cmdcnt > 0 {
                    (*ptr_to_globals).dot = find_line((*ptr_to_globals).cmdcnt)
                  }
                  dot_skip_over_ws();
                  current_block = 15129665204879337069;
                }
                5847749760081351726 => {
                  dir = FORWARD as libc::c_int;
                  if c == 'B' as i32 {
                    dir = BACK as libc::c_int
                  }
                  loop {
                    if c == 'W' as i32
                      || ({
                        let mut bb__isspace: libc::c_uchar =
                          (*(*ptr_to_globals).dot.offset(dir as isize) as libc::c_int - 9i32)
                            as libc::c_uchar;
                        (bb__isspace as libc::c_int == ' ' as i32 - 9i32
                          || bb__isspace as libc::c_int <= 13i32 - 9i32)
                          as libc::c_int
                      }) != 0
                    {
                      (*ptr_to_globals).dot =
                        skip_thing((*ptr_to_globals).dot, 1i32, dir, S_TO_WS as libc::c_int);
                      (*ptr_to_globals).dot =
                        skip_thing((*ptr_to_globals).dot, 2i32, dir, S_OVER_WS as libc::c_int)
                    }
                    if c != 'W' as i32 {
                      (*ptr_to_globals).dot =
                        skip_thing((*ptr_to_globals).dot, 1i32, dir, S_BEFORE_WS as libc::c_int)
                    }
                    (*ptr_to_globals).cmdcnt -= 1;
                    if !((*ptr_to_globals).cmdcnt > 0) {
                      break;
                    }
                  }
                  current_block = 15129665204879337069;
                }
                17440971994642376514 => {
                  current_block = 15129665204879337069;
                }
                7534742345255184552 => {
                  current_block = 17247297260531395789;
                }
                8800996768013373992 => {
                  loop {
                    dot_next();
                    (*ptr_to_globals).dot = move_to_col(
                      (*ptr_to_globals).dot,
                      (*ptr_to_globals).ccol + (*ptr_to_globals).offset,
                    );
                    (*ptr_to_globals).cmdcnt -= 1;
                    if !((*ptr_to_globals).cmdcnt > 0) {
                      break;
                    }
                  }
                  current_block = 15129665204879337069;
                }
                13993698454868426881 => {
                  loop {
                    dot_right();
                    (*ptr_to_globals).cmdcnt -= 1;
                    if !((*ptr_to_globals).cmdcnt > 0) {
                      break;
                    }
                  }
                  current_block = 15129665204879337069;
                }
                7856905509180742666 => {
                  while !((*ptr_to_globals).last_forward_char == 0) {
                    q = (*ptr_to_globals).dot.offset(1);
                    while q < (*ptr_to_globals).end.offset(-1)
                      && *q as libc::c_int != '\n' as i32
                      && *q as libc::c_int != (*ptr_to_globals).last_forward_char
                    {
                      q = q.offset(1)
                    }
                    if *q as libc::c_int == (*ptr_to_globals).last_forward_char {
                      (*ptr_to_globals).dot = q
                    }
                    (*ptr_to_globals).cmdcnt -= 1;
                    if !((*ptr_to_globals).cmdcnt > 0) {
                      break;
                    }
                  }
                  current_block = 15129665204879337069;
                }
                17498168302144015873 => {
                  current_block = 8681395796513813967;
                }
                1752638907092016026 => {
                  if *(*ptr_to_globals).dot as libc::c_int != '\n' as i32 {
                    (*ptr_to_globals).dot = (*ptr_to_globals).dot.offset(1)
                  }
                  current_block = 8629930936610358348;
                }
                3268579060917229304 => {
                  current_block = 8629930936610358348;
                }
                1895262434596074581 => {
                  current_block = 8908416993177701018;
                }
                _ => {}
              }
              match current_block {
                8629930936610358348 => {}
                15129665204879337069 => {}
                _ => {
                  match current_block {
                    17247297260531395789 => {
                      loop {
                        dot_left();
                        (*ptr_to_globals).cmdcnt -= 1;
                        if !((*ptr_to_globals).cmdcnt > 0) {
                          break;
                        }
                      }
                      current_block = 15129665204879337069;
                    }
                    8681395796513813967 => {
                      current_block = 5591548203144509315;
                    }
                    8908416993177701018 => {
                      current_block = 16124761010012532485;
                    }
                    _ => {}
                  }
                  match current_block {
                    15129665204879337069 => {}
                    _ => {
                      match current_block {
                        16124761010012532485 => {
                          let mut yf: libc::c_int = 0;
                          let mut ml: libc::c_int = 0;
                          let mut whole: libc::c_int = 0;
                          yf = YANKDEL as libc::c_int;
                          if c == 'y' as i32 || c == 'Y' as i32 {
                            yf = YANKONLY as libc::c_int
                          }
                          c1 = 'y' as i32;
                          if c != 'Y' as i32 {
                            c1 = get_one_char()
                          }
                          ml = find_range(&mut p, &mut q, c1 as libc::c_char);
                          place_cursor(0i32, 0);
                          if c1 == 27i32 {
                            c1 = 27i32;
                            c = c1
                          } else if !strchr(b"wW\x00" as *const u8 as *const libc::c_char, c1)
                            .is_null()
                          {
                            ml = 0;
                            if c == 'c' as i32 {
                              while ({
                                let mut bb__isspace: libc::c_uchar =
                                  (*q as libc::c_int - 9i32) as libc::c_uchar;
                                (bb__isspace as libc::c_int == ' ' as i32 - 9i32
                                  || bb__isspace as libc::c_int <= 13i32 - 9i32)
                                  as libc::c_int
                              }) != 0
                                && q > p
                              {
                                q = q.offset(-1)
                              }
                            }
                            (*ptr_to_globals).dot = yank_delete(p, q, ml, yf, 1i32)
                          } else if !strchr(
                            b"^0bBeEft%$ lh\x08\x7f\x00" as *const u8 as *const libc::c_char,
                            c1,
                          )
                          .is_null()
                          {
                            (*ptr_to_globals).dot = yank_delete(p, q, ml, yf, 1i32)
                          } else if !strchr(
                            b"cdykjGHL+-{}\r\n\x00" as *const u8 as *const libc::c_char,
                            c1,
                          )
                          .is_null()
                          {
                            (*ptr_to_globals).dot = yank_delete(p, q, ml, yf, 1i32);
                            whole = 1i32
                          } else {
                            c1 = 27i32;
                            c = c1;
                            ml = 0;
                            indicate_error();
                          }
                          if ml != 0 && whole != 0 {
                            if c == 'c' as i32 {
                              (*ptr_to_globals).dot = char_insert(
                                (*ptr_to_globals).dot,
                                '\n' as i32 as libc::c_char,
                                2i32,
                              );
                              if whole != 0
                                && (*ptr_to_globals).dot != (*ptr_to_globals).end.offset(-1)
                              {
                                dot_prev();
                              }
                            } else if c == 'd' as i32 {
                              dot_begin();
                              dot_skip_over_ws();
                            }
                          }
                          if c1 != 27i32 {
                            if c == 'c' as i32 {
                              strcpy(
                                buf.as_mut_ptr(),
                                b"Change\x00" as *const u8 as *const libc::c_char,
                              );
                              current_block = 8629930936610358348;
                            } else {
                              if c == 'd' as i32 {
                                strcpy(
                                  buf.as_mut_ptr(),
                                  b"Delete\x00" as *const u8 as *const libc::c_char,
                                );
                              }
                              if c == 'y' as i32 || c == 'Y' as i32 {
                                strcpy(
                                  buf.as_mut_ptr(),
                                  b"Yank\x00" as *const u8 as *const libc::c_char,
                                );
                              }
                              p = (*ptr_to_globals).reg[(*ptr_to_globals).YDreg as usize];
                              q = p.offset(strlen(p) as isize);
                              cnt = 0;
                              while p <= q {
                                if *p as libc::c_int == '\n' as i32 {
                                  cnt += 1
                                }
                                p = p.offset(1)
                              }
                              status_line(
                                b"%s %u lines (%u chars) using [%c]\x00" as *const u8
                                  as *const libc::c_char,
                                buf.as_mut_ptr(),
                                cnt,
                                strlen((*ptr_to_globals).reg[(*ptr_to_globals).YDreg as usize])
                                  as libc::c_uint,
                                what_reg() as libc::c_int,
                              );
                              end_cmd_q();
                              current_block = 15129665204879337069;
                            }
                          } else {
                            current_block = 15129665204879337069;
                          }
                        }
                        5591548203144509315 => {
                          current_block = 2636677179867529885;
                        }
                        _ => {}
                      }
                      match current_block {
                        15129665204879337069 => {}
                        8629930936610358348 => {}
                        _ => {
                          match current_block {
                            2636677179867529885 => {
                              current_block = 12309206730560524281;
                            }
                            _ => {}
                          }
                          match current_block {
                            12309206730560524281 => {
                              current_block = 3325768110057758661;
                            }
                            _ => {}
                          }
                          match current_block {
                            3325768110057758661 => {
                              current_block = 14815832896553429982;
                            }
                            _ => {}
                          }
                          match current_block {
                            14815832896553429982 => {
                              current_block = 10731695520297161438;
                            }
                            _ => {}
                          }
                          match current_block {
                            10731695520297161438 => {
                              if c == '0' as i32 && (*ptr_to_globals).cmdcnt < 1i32 {
                                dot_begin();
                              } else {
                                (*ptr_to_globals).cmdcnt =
                                  (*ptr_to_globals).cmdcnt * 10i32 + (c - '0' as i32)
                              }
                              current_block = 15129665204879337069;
                            }
                            _ => {}
                          }
                          match current_block {
                            15129665204879337069 => {}
                            _ => {
                              loop {
                                match current_block {
                                  16813369756331276724 => {
                                    msg = std::ptr::null();
                                    current_block = 7392824444931029276;
                                  }
                                  7392824444931029276 => {
                                    dir = FORWARD as libc::c_int;
                                    p = (*ptr_to_globals).dot.offset(1);
                                    if *(*ptr_to_globals).last_search_pattern.offset(0)
                                      as libc::c_int
                                      == '?' as i32
                                    {
                                      dir = BACK as libc::c_int;
                                      p = (*ptr_to_globals).dot.offset(-1)
                                    }
                                    current_block = 4166979493554389389;
                                  }
                                  _ => {
                                    q = char_search(
                                      p,
                                      (*ptr_to_globals).last_search_pattern.offset(1),
                                      dir << 1i32 | FULL as libc::c_int,
                                    );
                                    if !q.is_null() {
                                      (*ptr_to_globals).dot = q;
                                      msg = std::ptr::null()
                                    } else {
                                      p = (*ptr_to_globals).text;
                                      if dir == BACK as libc::c_int {
                                        p = (*ptr_to_globals).end.offset(-1)
                                      }
                                      q = char_search(
                                        p,
                                        (*ptr_to_globals).last_search_pattern.offset(1),
                                        dir << 1i32 | FULL as libc::c_int,
                                      );
                                      if !q.is_null() {
                                        (*ptr_to_globals).dot = q;
                                        msg = b"search hit BOTTOM, continuing at TOP\x00"
                                          as *const u8
                                          as *const libc::c_char;
                                        if dir == BACK as libc::c_int {
                                          msg = b"search hit TOP, continuing at BOTTOM\x00"
                                            as *const u8
                                            as *const libc::c_char
                                        }
                                      } else {
                                        msg = b"Pattern not found\x00" as *const u8
                                          as *const libc::c_char
                                      }
                                    }
                                    if !msg.is_null() {
                                      status_line_bold(
                                        b"%s\x00" as *const u8 as *const libc::c_char,
                                        msg,
                                      );
                                    }
                                    (*ptr_to_globals).cmdcnt -= 1;
                                    if (*ptr_to_globals).cmdcnt > 0 {
                                      current_block = 16813369756331276724;
                                    } else {
                                      break;
                                    }
                                  }
                                }
                              }
                              current_block = 15129665204879337069;
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
        46 => {
          current_block = 3364823792826654116;
          match current_block {
            16992905640583886232 => {
              loop {
                if (*(*ptr_to_globals).dot as libc::c_int - 'a' as i32) as libc::c_uchar
                  as libc::c_int
                  <= 'z' as i32 - 'a' as i32
                {
                  undo_push(
                    (*ptr_to_globals).dot,
                    1i32 as libc::c_uint,
                    1i32 as libc::c_uchar,
                  );
                  *(*ptr_to_globals).dot =
                    bb_ascii_toupper(*(*ptr_to_globals).dot as libc::c_uchar) as libc::c_char;
                  undo_push(
                    (*ptr_to_globals).dot,
                    1i32 as libc::c_uint,
                    2i32 as libc::c_uchar,
                  );
                } else if (*(*ptr_to_globals).dot as libc::c_int - 'A' as i32) as libc::c_uchar
                  as libc::c_int
                  <= 'Z' as i32 - 'A' as i32
                {
                  undo_push(
                    (*ptr_to_globals).dot,
                    1i32 as libc::c_uint,
                    1i32 as libc::c_uchar,
                  );
                  *(*ptr_to_globals).dot =
                    bb_ascii_tolower(*(*ptr_to_globals).dot as libc::c_uchar) as libc::c_char;
                  undo_push(
                    (*ptr_to_globals).dot,
                    1i32 as libc::c_uint,
                    2i32 as libc::c_uchar,
                  );
                }
                dot_right();
                (*ptr_to_globals).cmdcnt -= 1;
                if !((*ptr_to_globals).cmdcnt > 0) {
                  break;
                }
              }
              end_cmd_q();
              current_block = 15129665204879337069;
            }
            8729655159604064397 => {
              c1 = get_one_char();
              cnt = 0;
              if c1 == '.' as i32 {
                cnt = (*ptr_to_globals)
                  .rows
                  .wrapping_sub(2i32 as libc::c_uint)
                  .wrapping_div(2i32 as libc::c_uint) as libc::c_int
              }
              if c1 == '-' as i32 {
                cnt = (*ptr_to_globals).rows.wrapping_sub(2i32 as libc::c_uint) as libc::c_int
              }
              (*ptr_to_globals).screenbegin = begin_line((*ptr_to_globals).dot);
              dot_scroll(cnt, -1i32);
              current_block = 15129665204879337069;
            }
            15899500648299942075 => {
              (*ptr_to_globals).last_forward_char = get_one_char();
              do_cmd(';' as i32);
              if *(*ptr_to_globals).dot as libc::c_int == (*ptr_to_globals).last_forward_char {
                dot_left();
              }
              (*ptr_to_globals).last_forward_char = 0;
              current_block = 15129665204879337069;
            }
            9051390181078481641 => {
              c1 = get_one_char();
              if *(*ptr_to_globals).dot as libc::c_int != '\n' as i32 {
                (*ptr_to_globals).dot =
                  text_hole_delete((*ptr_to_globals).dot, (*ptr_to_globals).dot, 1i32);
                (*ptr_to_globals).dot =
                  char_insert((*ptr_to_globals).dot, c1 as libc::c_char, 2i32);
                dot_left();
              }
              end_cmd_q();
              current_block = 15129665204879337069;
            }
            877115918601926659 => {
              dir = FORWARD as libc::c_int;
              if c == 'b' as i32 {
                dir = BACK as libc::c_int
              }
              while !((*ptr_to_globals).dot.offset(dir as isize) < (*ptr_to_globals).text
                || (*ptr_to_globals).dot.offset(dir as isize) > (*ptr_to_globals).end.offset(-1))
              {
                (*ptr_to_globals).dot = (*ptr_to_globals).dot.offset(dir as isize);
                if ({
                  let mut bb__isspace: libc::c_uchar =
                    (*(*ptr_to_globals).dot as libc::c_int - 9i32) as libc::c_uchar;
                  (bb__isspace as libc::c_int == ' ' as i32 - 9i32
                    || bb__isspace as libc::c_int <= 13i32 - 9i32) as libc::c_int
                }) != 0
                {
                  (*ptr_to_globals).dot = skip_thing(
                    (*ptr_to_globals).dot,
                    if c == 'e' as i32 { 2i32 } else { 1i32 },
                    dir,
                    S_OVER_WS as libc::c_int,
                  )
                }
                if bb_ascii_isalnum(*(*ptr_to_globals).dot as libc::c_uchar) != 0
                  || *(*ptr_to_globals).dot as libc::c_int == '_' as i32
                {
                  (*ptr_to_globals).dot =
                    skip_thing((*ptr_to_globals).dot, 1i32, dir, S_END_ALNUM as libc::c_int)
                } else if *strchrnul(
                  b"!\"#$%&\'()*+,-./:;<=>?@[\\]^_`{|}~\x00" as *const u8 as *const libc::c_char,
                  *(*ptr_to_globals).dot as libc::c_int,
                )
                .offset(0)
                  != 0
                {
                  (*ptr_to_globals).dot =
                    skip_thing((*ptr_to_globals).dot, 1i32, dir, S_END_PUNCT as libc::c_int)
                }
                (*ptr_to_globals).cmdcnt -= 1;
                if !((*ptr_to_globals).cmdcnt > 0) {
                  break;
                }
              }
              current_block = 15129665204879337069;
            }
            1085022737867179637 => {
              dot_begin();
              dot_skip_over_ws();
              current_block = 15129665204879337069;
            }
            3113147720494587438 => {
              c1 = get_one_char();
              if c1 != 'Z' as i32 {
                indicate_error();
              } else if (*ptr_to_globals).modified_count != 0 {
                if 1i32 != 0 && (*ptr_to_globals).readonly_mode as libc::c_int != 0 {
                  status_line_bold(
                    b"\'%s\' is read only\x00" as *const u8 as *const libc::c_char,
                    (*ptr_to_globals).current_filename,
                  );
                } else {
                  cnt = file_write(
                    (*ptr_to_globals).current_filename,
                    (*ptr_to_globals).text,
                    (*ptr_to_globals).end.offset(-1),
                  );
                  if cnt < 0 {
                    if cnt == -1i32 {
                      status_line_bold(b"Write error: %m\x00" as *const u8 as *const libc::c_char);
                    }
                  } else if cnt as libc::c_long
                    == (*ptr_to_globals)
                      .end
                      .offset(-1)
                      .wrapping_offset_from((*ptr_to_globals).text)
                      as libc::c_long
                      + 1
                  {
                    (*ptr_to_globals).editing = 0 as smallint
                  }
                }
              } else {
                (*ptr_to_globals).editing = 0 as smallint
              }
              current_block = 15129665204879337069;
            }
            12960118908218882441 => {
              p = begin_line((*ptr_to_globals).dot);
              if *p.offset(-1i32 as isize) as libc::c_int == '\n' as i32 {
                dot_prev();
                current_block = 2087484904894455135;
              } else {
                dot_begin();
                (*ptr_to_globals).dot =
                  char_insert((*ptr_to_globals).dot, '\n' as i32 as libc::c_char, 1i32);
                dot_prev();
                current_block = 8629930936610358348;
              }
            }
            8720450212473544924 => {
              (*ptr_to_globals).dot = (*ptr_to_globals).screenbegin;
              cnt = 0;
              while (cnt as libc::c_uint)
                < (*ptr_to_globals)
                  .rows
                  .wrapping_sub(1i32 as libc::c_uint)
                  .wrapping_div(2i32 as libc::c_uint)
              {
                (*ptr_to_globals).dot = next_line((*ptr_to_globals).dot);
                cnt += 1
              }
              current_block = 15129665204879337069;
            }
            13015277209715431090 => {
              (*ptr_to_globals).dot = end_screen();
              if (*ptr_to_globals).cmdcnt as libc::c_uint
                > (*ptr_to_globals).rows.wrapping_sub(1i32 as libc::c_uint)
              {
                (*ptr_to_globals).cmdcnt =
                  (*ptr_to_globals).rows.wrapping_sub(1i32 as libc::c_uint) as libc::c_int
              }
              (*ptr_to_globals).cmdcnt -= 1;
              if (*ptr_to_globals).cmdcnt > 0 {
                do_cmd('-' as i32);
              }
              dot_begin();
              dot_skip_over_ws();
              current_block = 15129665204879337069;
            }
            9800435767766781385 => {
              loop {
                dot_end();
                if (*ptr_to_globals).dot < (*ptr_to_globals).end.offset(-1) {
                  undo_push(
                    (*ptr_to_globals).dot,
                    1i32 as libc::c_uint,
                    1i32 as libc::c_uchar,
                  );
                  let fresh15 = (*ptr_to_globals).dot;
                  (*ptr_to_globals).dot = (*ptr_to_globals).dot.offset(1);
                  *fresh15 = ' ' as i32 as libc::c_char;
                  undo_push(
                    (*ptr_to_globals).dot.offset(-1),
                    1i32 as libc::c_uint,
                    2i32 as libc::c_uchar,
                  );
                  while ({
                    let mut bb__isblank: libc::c_uchar = *(*ptr_to_globals).dot as libc::c_uchar;
                    (bb__isblank as libc::c_int == ' ' as i32
                      || bb__isblank as libc::c_int == '\t' as i32)
                      as libc::c_int
                  }) != 0
                  {
                    text_hole_delete((*ptr_to_globals).dot, (*ptr_to_globals).dot, 2i32);
                  }
                }
                (*ptr_to_globals).cmdcnt -= 1;
                if !((*ptr_to_globals).cmdcnt > 0) {
                  break;
                }
              }
              end_cmd_q();
              current_block = 15129665204879337069;
            }
            3432363526595694666 => {
              dot_begin();
              dot_skip_over_ws();
              current_block = 3268579060917229304;
            }
            3494829253343353619 => {
              (*ptr_to_globals).dot = (*ptr_to_globals).screenbegin;
              if (*ptr_to_globals).cmdcnt as libc::c_uint
                > (*ptr_to_globals).rows.wrapping_sub(1i32 as libc::c_uint)
              {
                (*ptr_to_globals).cmdcnt =
                  (*ptr_to_globals).rows.wrapping_sub(1i32 as libc::c_uint) as libc::c_int
              }
              (*ptr_to_globals).cmdcnt -= 1;
              if (*ptr_to_globals).cmdcnt > 0 {
                do_cmd('+' as i32);
              }
              dot_skip_over_ws();
              current_block = 15129665204879337069;
            }
            17973101765331640574 => {
              c1 = get_one_char();
              if c1 != 'g' as i32 {
                buf[0] = 'g' as i32 as libc::c_char;
                buf[1] = if c1 >= 0 { c1 } else { '*' as i32 } as libc::c_char;
                buf[2] = '\u{0}' as i32 as libc::c_char;
                not_implemented(buf.as_mut_ptr());
                current_block = 15129665204879337069;
              } else {
                if (*ptr_to_globals).cmdcnt == 0 {
                  (*ptr_to_globals).cmdcnt = 1i32
                }
                current_block = 11945623545738147997;
              }
            }
            16546625800574160972 => {
              save_dot = (*ptr_to_globals).dot;
              (*ptr_to_globals).dot = dollar_line((*ptr_to_globals).dot);
              (*ptr_to_globals).dot = yank_delete(
                save_dot,
                (*ptr_to_globals).dot,
                0,
                YANKDEL as libc::c_int,
                1i32,
              );
              if c == 'C' as i32 {
                current_block = 8629930936610358348;
              } else {
                if c == 'D' as i32 {
                  end_cmd_q();
                }
                current_block = 15129665204879337069;
              }
            }
            11937696639986586685 => {
              cnt = count_lines((*ptr_to_globals).text, (*ptr_to_globals).dot);
              c1 = get_one_char();
              find_range(&mut p, &mut q, c1 as libc::c_char);
              yank_delete(p, q, 1i32, YANKONLY as libc::c_int, 0);
              p = begin_line(p);
              q = end_line(q);
              i = count_lines(p, q);
              while i > 0 {
                if c == '<' as i32 {
                  if *p as libc::c_int == '\t' as i32 {
                    text_hole_delete(p, p, 0);
                  } else if *p as libc::c_int == ' ' as i32 {
                    j = 0;
                    while *p as libc::c_int == ' ' as i32 && j < (*ptr_to_globals).tabstop {
                      text_hole_delete(p, p, 0);
                      j += 1
                    }
                  }
                } else if c == '>' as i32 {
                  char_insert(p, '\t' as i32 as libc::c_char, 1i32);
                }
                i -= 1;
                p = next_line(p)
              }
              (*ptr_to_globals).dot = find_line(cnt);
              dot_skip_over_ws();
              end_cmd_q();
              current_block = 15129665204879337069;
            }
            17725350714912028156 => {
              p = get_input_line(b":\x00" as *const u8 as *const libc::c_char);
              colon(p);
              current_block = 15129665204879337069;
            }
            14526470074083880812 => {
              q = char_search(
                (*ptr_to_globals).dot,
                b"\n\n\x00" as *const u8 as *const libc::c_char,
                (FORWARD as libc::c_int) << 1i32 | FULL as libc::c_int,
              );
              if !q.is_null() {
                (*ptr_to_globals).dot = next_line(q)
              }
              current_block = 15129665204879337069;
            }
            8893187391306414141 => {
              q = char_search(
                (*ptr_to_globals).dot,
                b"\n\n\x00" as *const u8 as *const libc::c_char,
                ((BACK as libc::c_int as libc::c_uint) << 1i32
                  | FULL as libc::c_int as libc::c_uint) as libc::c_int,
              );
              if !q.is_null() {
                (*ptr_to_globals).dot = next_line(q)
              }
              current_block = 15129665204879337069;
            }
            7021673758293221412 => {
              dir = BACK as libc::c_int;
              p = (*ptr_to_globals).dot.offset(-1);
              if *(*ptr_to_globals).last_search_pattern.offset(0) as libc::c_int == '?' as i32 {
                dir = FORWARD as libc::c_int;
                p = (*ptr_to_globals).dot.offset(1)
              }
              current_block = 4166979493554389389;
            }
            18374191879090272823 => {
              buf[0] = c as libc::c_char;
              buf[1] = '\u{0}' as i32 as libc::c_char;
              q = get_input_line(buf.as_mut_ptr());
              if *q.offset(0) as libc::c_int != 0 && *q.offset(1) == 0 {
                if *(*ptr_to_globals).last_search_pattern.offset(0) != 0 {
                  *(*ptr_to_globals).last_search_pattern.offset(0) = c as libc::c_char
                }
                current_block = 7392824444931029276;
              } else if *q.offset(0) != 0 {
                free((*ptr_to_globals).last_search_pattern as *mut libc::c_void);
                (*ptr_to_globals).last_search_pattern = crate::libbb::xfuncs_printf::xstrdup(q);
                current_block = 7392824444931029276;
              } else {
                current_block = 15129665204879337069;
              }
            }
            16407828456666301883 => {
              if (*ptr_to_globals).last_forward_char == 0 {
                current_block = 15129665204879337069;
              } else {
                loop {
                  q = (*ptr_to_globals).dot.offset(-1);
                  while q >= (*ptr_to_globals).text
                    && *q as libc::c_int != '\n' as i32
                    && *q as libc::c_int != (*ptr_to_globals).last_forward_char
                  {
                    q = q.offset(-1)
                  }
                  if q >= (*ptr_to_globals).text
                    && *q as libc::c_int == (*ptr_to_globals).last_forward_char
                  {
                    (*ptr_to_globals).dot = q
                  }
                  (*ptr_to_globals).cmdcnt -= 1;
                  if !((*ptr_to_globals).cmdcnt > 0) {
                    break;
                  }
                }
                current_block = 15129665204879337069;
              }
            }
            9018432604062702004 => {
              q = (*ptr_to_globals).dot;
              while q < (*ptr_to_globals).end && *q as libc::c_int != '\n' as i32 {
                if !strchr(
                  b"()[]{}\x00" as *const u8 as *const libc::c_char,
                  *q as libc::c_int,
                )
                .is_null()
                {
                  p = find_pair(q, *q);
                  if p.is_null() {
                    indicate_error();
                  } else {
                    (*ptr_to_globals).dot = p
                  }
                  break;
                } else {
                  q = q.offset(1)
                }
              }
              if *q as libc::c_int == '\n' as i32 {
                indicate_error();
              }
              current_block = 15129665204879337069;
            }
            10247103787464459848 => {
              p = (*ptr_to_globals).reg[(*ptr_to_globals).YDreg as usize];
              if p.is_null() {
                status_line_bold(
                  b"Nothing in register %c\x00" as *const u8 as *const libc::c_char,
                  what_reg() as libc::c_int,
                );
              } else {
                if !strchr(p, '\n' as i32).is_null() {
                  if c == 'P' as i32 {
                    dot_begin();
                  }
                  if c == 'p' as i32 {
                    if end_line((*ptr_to_globals).dot) == (*ptr_to_globals).end.offset(-1) {
                      (*ptr_to_globals).dot = (*ptr_to_globals).end
                    } else {
                      dot_next();
                    }
                  }
                } else if c == 'p' as i32 {
                  dot_right();
                }
                string_insert((*ptr_to_globals).dot, p, 1i32);
                end_cmd_q();
              }
              current_block = 15129665204879337069;
            }
            15260732871948875843 => {
              c1 = (get_one_char() | 0x20i32) - 'a' as i32;
              if c1 as libc::c_uint <= 25i32 as libc::c_uint {
                (*ptr_to_globals).mark[c1 as usize] = (*ptr_to_globals).dot
              } else {
                indicate_error();
              }
              current_block = 15129665204879337069;
            }
            12738322036487086035 => {
              c1 = get_one_char() | 0x20i32;
              if (c1 - 'a' as i32) as libc::c_uint <= 25i32 as libc::c_uint {
                c1 = c1 - 'a' as i32;
                q = (*ptr_to_globals).mark[c1 as usize];
                if (*ptr_to_globals).text <= q && q < (*ptr_to_globals).end {
                  (*ptr_to_globals).dot = q;
                  dot_begin();
                  dot_skip_over_ws();
                }
              } else if c1 == '\'' as i32 {
                (*ptr_to_globals).dot = swap_context((*ptr_to_globals).dot);
                dot_begin();
                dot_skip_over_ws();
              } else {
                indicate_error();
              }
              current_block = 15129665204879337069;
            }
            13255096073384561358 => {
              c1 = (get_one_char() | 0x20i32) - 'a' as i32;
              if c1 as libc::c_uint <= 25i32 as libc::c_uint {
                (*ptr_to_globals).YDreg = c1 as smalluint
              } else {
                indicate_error();
              }
              current_block = 15129665204879337069;
            }
            10258711639984089377 => {
              if (*ptr_to_globals).cmd_mode as libc::c_int == 0 {
                indicate_error();
              }
              (*ptr_to_globals).cmd_mode = 0 as smallint;
              undo_queue_commit();
              end_cmd_q();
              (*ptr_to_globals).last_status_cksum = 0;
              current_block = 15129665204879337069;
            }
            11439127087547047736 => {
              buf[0] = c as libc::c_char;
              buf[1] = '\u{0}' as i32 as libc::c_char;
              not_implemented(buf.as_mut_ptr());
              end_cmd_q();
              current_block = 17440971994642376514;
            }
            7961798899781870241 => {
              dot_scroll(
                (*ptr_to_globals).rows.wrapping_sub(2i32 as libc::c_uint) as libc::c_int,
                -1i32,
              );
              current_block = 15129665204879337069;
            }
            9426343755402444879 => {
              dot_scroll(
                (*ptr_to_globals)
                  .rows
                  .wrapping_sub(2i32 as libc::c_uint)
                  .wrapping_div(2i32 as libc::c_uint) as libc::c_int,
                1i32,
              );
              current_block = 15129665204879337069;
            }
            13352459794680105913 => {
              dot_scroll(1i32, 1i32);
              current_block = 15129665204879337069;
            }
            14142272253464333006 => {
              dot_scroll(
                (*ptr_to_globals).rows.wrapping_sub(2i32 as libc::c_uint) as libc::c_int,
                1i32,
              );
              current_block = 15129665204879337069;
            }
            10758177197742640066 => {
              (*ptr_to_globals).last_status_cksum = 0;
              current_block = 15129665204879337069;
            }
            6152256259730122749 => {
              current_block = 7534742345255184552;
            }
            12883932598258173301 => {
              current_block = 8800996768013373992;
            }
            11242998110520238401 => {
              redraw(1i32);
              current_block = 15129665204879337069;
            }
            13619733043935729992 => {
              loop {
                dot_next();
                dot_skip_over_ws();
                (*ptr_to_globals).cmdcnt -= 1;
                if !((*ptr_to_globals).cmdcnt > 0) {
                  break;
                }
              }
              current_block = 15129665204879337069;
            }
            9339065157412720613 => {
              dot_scroll(
                (*ptr_to_globals)
                  .rows
                  .wrapping_sub(2i32 as libc::c_uint)
                  .wrapping_div(2i32 as libc::c_uint) as libc::c_int,
                -1i32,
              );
              current_block = 15129665204879337069;
            }
            11447082683497798022 => {
              dot_scroll(1i32, -1i32);
              current_block = 15129665204879337069;
            }
            5182000506326660482 => {
              current_block = 13993698454868426881;
            }
            1105010766850597332 => {
              if !(*ptr_to_globals).reg[27].is_null() {
                p = begin_line((*ptr_to_globals).dot);
                q = end_line((*ptr_to_globals).dot);
                p = text_hole_delete(p, q, 1i32);
                p = p.offset(string_insert(p, (*ptr_to_globals).reg[27], 2i32) as isize);
                (*ptr_to_globals).dot = p;
                dot_skip_over_ws();
              }
              current_block = 15129665204879337069;
            }
            8616046655533110204 => {
              undo_pop();
              current_block = 15129665204879337069;
            }
            5127767458142431603 => {
              loop {
                (*ptr_to_globals).dot = end_line((*ptr_to_globals).dot);
                (*ptr_to_globals).cmdcnt -= 1;
                if (*ptr_to_globals).cmdcnt <= 0 {
                  break;
                }
                dot_next();
              }
              current_block = 15129665204879337069;
            }
            222014967776118151 => {
              (*ptr_to_globals).last_forward_char = get_one_char();
              current_block = 7856905509180742666;
            }
            11209792479411604110 => {
              loop {
                dot_prev();
                dot_skip_over_ws();
                (*ptr_to_globals).cmdcnt -= 1;
                if !((*ptr_to_globals).cmdcnt > 0) {
                  break;
                }
              }
              current_block = 15129665204879337069;
            }
            3364823792826654116 => {
              if (*ptr_to_globals).lmc_len != 0 {
                (*ptr_to_globals).ioq_start = crate::libbb::xfuncs_printf::xstrndup(
                  (*ptr_to_globals).last_modifying_cmd.as_mut_ptr(),
                  (*ptr_to_globals).lmc_len,
                );
                (*ptr_to_globals).ioq = (*ptr_to_globals).ioq_start
              }
              current_block = 15129665204879337069;
            }
            18096603330221575131 => {
              current_block = 17498168302144015873;
            }
            16891123271837848903 => {
              dot_end();
              current_block = 1752638907092016026;
            }
            8517235759107662071 => {
              current_block = 5847749760081351726;
            }
            12525254419223051704 => {
              if (*ptr_to_globals).dot < (*ptr_to_globals).end.offset(-1) {
                (*ptr_to_globals).dot = yank_delete(
                  (*ptr_to_globals).dot,
                  (*ptr_to_globals).dot,
                  1i32,
                  YANKDEL as libc::c_int,
                  1i32,
                )
              }
              current_block = 15129665204879337069;
            }
            15232911949322867522 => {
              current_block = 17251831742223396249;
            }
            10863374208794025069 => {
              current_block = 1895262434596074581;
            }
            451126677064669119 => {
              loop {
                dot_prev();
                (*ptr_to_globals).dot = move_to_col(
                  (*ptr_to_globals).dot,
                  (*ptr_to_globals).ccol + (*ptr_to_globals).offset,
                );
                (*ptr_to_globals).cmdcnt -= 1;
                if !((*ptr_to_globals).cmdcnt > 0) {
                  break;
                }
              }
              current_block = 15129665204879337069;
            }
            4611735929166613116 => {
              loop {
                if bb_ascii_isalnum(*(*ptr_to_globals).dot as libc::c_uchar) != 0
                  || *(*ptr_to_globals).dot as libc::c_int == '_' as i32
                {
                  (*ptr_to_globals).dot = skip_thing(
                    (*ptr_to_globals).dot,
                    1i32,
                    FORWARD as libc::c_int,
                    S_END_ALNUM as libc::c_int,
                  )
                } else if *strchrnul(
                  b"!\"#$%&\'()*+,-./:;<=>?@[\\]^_`{|}~\x00" as *const u8 as *const libc::c_char,
                  *(*ptr_to_globals).dot as libc::c_int,
                )
                .offset(0)
                  != 0
                {
                  (*ptr_to_globals).dot = skip_thing(
                    (*ptr_to_globals).dot,
                    1i32,
                    FORWARD as libc::c_int,
                    S_END_PUNCT as libc::c_int,
                  )
                }
                if (*ptr_to_globals).dot < (*ptr_to_globals).end.offset(-1) {
                  (*ptr_to_globals).dot = (*ptr_to_globals).dot.offset(1)
                }
                if ({
                  let mut bb__isspace: libc::c_uchar =
                    (*(*ptr_to_globals).dot as libc::c_int - 9i32) as libc::c_uchar;
                  (bb__isspace as libc::c_int == ' ' as i32 - 9i32
                    || bb__isspace as libc::c_int <= 13i32 - 9i32) as libc::c_int
                }) != 0
                {
                  (*ptr_to_globals).dot = skip_thing(
                    (*ptr_to_globals).dot,
                    2i32,
                    FORWARD as libc::c_int,
                    S_OVER_WS as libc::c_int,
                  )
                }
                (*ptr_to_globals).cmdcnt -= 1;
                if !((*ptr_to_globals).cmdcnt > 0) {
                  break;
                }
              }
              current_block = 15129665204879337069;
            }
            4386451087681909888 => {
              (*ptr_to_globals).dot =
                move_to_col((*ptr_to_globals).dot, (*ptr_to_globals).cmdcnt - 1i32);
              current_block = 15129665204879337069;
            }
            1296397779060594135 => {
              dot_begin();
              current_block = 15129665204879337069;
            }
            _ => {}
          }
          match current_block {
            15129665204879337069 => {}
            8629930936610358348 => {}
            _ => {
              match current_block {
                17251831742223396249 => {
                  dir = 0;
                  if c == 'X' as i32 {
                    dir = -1i32
                  }
                  loop {
                    if *(*ptr_to_globals).dot.offset(dir as isize) as libc::c_int != '\n' as i32 {
                      if c == 'X' as i32 {
                        (*ptr_to_globals).dot = (*ptr_to_globals).dot.offset(-1)
                      }
                      (*ptr_to_globals).dot = yank_delete(
                        (*ptr_to_globals).dot,
                        (*ptr_to_globals).dot,
                        0,
                        YANKDEL as libc::c_int,
                        1i32,
                      )
                    }
                    (*ptr_to_globals).cmdcnt -= 1;
                    if !((*ptr_to_globals).cmdcnt > 0) {
                      break;
                    }
                  }
                  end_cmd_q();
                  if c == 's' as i32 {
                    current_block = 8629930936610358348;
                  } else {
                    current_block = 15129665204879337069;
                  }
                }
                2087484904894455135 => {
                  dot_end();
                  (*ptr_to_globals).dot =
                    char_insert((*ptr_to_globals).dot, '\n' as i32 as libc::c_char, 1i32);
                  current_block = 8629930936610358348;
                }
                11945623545738147997 => {
                  (*ptr_to_globals).dot = (*ptr_to_globals).end.offset(-1);
                  if (*ptr_to_globals).cmdcnt > 0 {
                    (*ptr_to_globals).dot = find_line((*ptr_to_globals).cmdcnt)
                  }
                  dot_skip_over_ws();
                  current_block = 15129665204879337069;
                }
                5847749760081351726 => {
                  dir = FORWARD as libc::c_int;
                  if c == 'B' as i32 {
                    dir = BACK as libc::c_int
                  }
                  loop {
                    if c == 'W' as i32
                      || ({
                        let mut bb__isspace: libc::c_uchar =
                          (*(*ptr_to_globals).dot.offset(dir as isize) as libc::c_int - 9i32)
                            as libc::c_uchar;
                        (bb__isspace as libc::c_int == ' ' as i32 - 9i32
                          || bb__isspace as libc::c_int <= 13i32 - 9i32)
                          as libc::c_int
                      }) != 0
                    {
                      (*ptr_to_globals).dot =
                        skip_thing((*ptr_to_globals).dot, 1i32, dir, S_TO_WS as libc::c_int);
                      (*ptr_to_globals).dot =
                        skip_thing((*ptr_to_globals).dot, 2i32, dir, S_OVER_WS as libc::c_int)
                    }
                    if c != 'W' as i32 {
                      (*ptr_to_globals).dot =
                        skip_thing((*ptr_to_globals).dot, 1i32, dir, S_BEFORE_WS as libc::c_int)
                    }
                    (*ptr_to_globals).cmdcnt -= 1;
                    if !((*ptr_to_globals).cmdcnt > 0) {
                      break;
                    }
                  }
                  current_block = 15129665204879337069;
                }
                17440971994642376514 => {
                  current_block = 15129665204879337069;
                }
                7534742345255184552 => {
                  current_block = 17247297260531395789;
                }
                8800996768013373992 => {
                  loop {
                    dot_next();
                    (*ptr_to_globals).dot = move_to_col(
                      (*ptr_to_globals).dot,
                      (*ptr_to_globals).ccol + (*ptr_to_globals).offset,
                    );
                    (*ptr_to_globals).cmdcnt -= 1;
                    if !((*ptr_to_globals).cmdcnt > 0) {
                      break;
                    }
                  }
                  current_block = 15129665204879337069;
                }
                13993698454868426881 => {
                  loop {
                    dot_right();
                    (*ptr_to_globals).cmdcnt -= 1;
                    if !((*ptr_to_globals).cmdcnt > 0) {
                      break;
                    }
                  }
                  current_block = 15129665204879337069;
                }
                7856905509180742666 => {
                  while !((*ptr_to_globals).last_forward_char == 0) {
                    q = (*ptr_to_globals).dot.offset(1);
                    while q < (*ptr_to_globals).end.offset(-1)
                      && *q as libc::c_int != '\n' as i32
                      && *q as libc::c_int != (*ptr_to_globals).last_forward_char
                    {
                      q = q.offset(1)
                    }
                    if *q as libc::c_int == (*ptr_to_globals).last_forward_char {
                      (*ptr_to_globals).dot = q
                    }
                    (*ptr_to_globals).cmdcnt -= 1;
                    if !((*ptr_to_globals).cmdcnt > 0) {
                      break;
                    }
                  }
                  current_block = 15129665204879337069;
                }
                17498168302144015873 => {
                  current_block = 8681395796513813967;
                }
                1752638907092016026 => {
                  if *(*ptr_to_globals).dot as libc::c_int != '\n' as i32 {
                    (*ptr_to_globals).dot = (*ptr_to_globals).dot.offset(1)
                  }
                  current_block = 8629930936610358348;
                }
                3268579060917229304 => {
                  current_block = 8629930936610358348;
                }
                1895262434596074581 => {
                  current_block = 8908416993177701018;
                }
                _ => {}
              }
              match current_block {
                8629930936610358348 => {}
                15129665204879337069 => {}
                _ => {
                  match current_block {
                    17247297260531395789 => {
                      loop {
                        dot_left();
                        (*ptr_to_globals).cmdcnt -= 1;
                        if !((*ptr_to_globals).cmdcnt > 0) {
                          break;
                        }
                      }
                      current_block = 15129665204879337069;
                    }
                    8681395796513813967 => {
                      current_block = 5591548203144509315;
                    }
                    8908416993177701018 => {
                      current_block = 16124761010012532485;
                    }
                    _ => {}
                  }
                  match current_block {
                    15129665204879337069 => {}
                    _ => {
                      match current_block {
                        16124761010012532485 => {
                          let mut yf: libc::c_int = 0;
                          let mut ml: libc::c_int = 0;
                          let mut whole: libc::c_int = 0;
                          yf = YANKDEL as libc::c_int;
                          if c == 'y' as i32 || c == 'Y' as i32 {
                            yf = YANKONLY as libc::c_int
                          }
                          c1 = 'y' as i32;
                          if c != 'Y' as i32 {
                            c1 = get_one_char()
                          }
                          ml = find_range(&mut p, &mut q, c1 as libc::c_char);
                          place_cursor(0i32, 0);
                          if c1 == 27i32 {
                            c1 = 27i32;
                            c = c1
                          } else if !strchr(b"wW\x00" as *const u8 as *const libc::c_char, c1)
                            .is_null()
                          {
                            ml = 0;
                            if c == 'c' as i32 {
                              while ({
                                let mut bb__isspace: libc::c_uchar =
                                  (*q as libc::c_int - 9i32) as libc::c_uchar;
                                (bb__isspace as libc::c_int == ' ' as i32 - 9i32
                                  || bb__isspace as libc::c_int <= 13i32 - 9i32)
                                  as libc::c_int
                              }) != 0
                                && q > p
                              {
                                q = q.offset(-1)
                              }
                            }
                            (*ptr_to_globals).dot = yank_delete(p, q, ml, yf, 1i32)
                          } else if !strchr(
                            b"^0bBeEft%$ lh\x08\x7f\x00" as *const u8 as *const libc::c_char,
                            c1,
                          )
                          .is_null()
                          {
                            (*ptr_to_globals).dot = yank_delete(p, q, ml, yf, 1i32)
                          } else if !strchr(
                            b"cdykjGHL+-{}\r\n\x00" as *const u8 as *const libc::c_char,
                            c1,
                          )
                          .is_null()
                          {
                            (*ptr_to_globals).dot = yank_delete(p, q, ml, yf, 1i32);
                            whole = 1i32
                          } else {
                            c1 = 27i32;
                            c = c1;
                            ml = 0;
                            indicate_error();
                          }
                          if ml != 0 && whole != 0 {
                            if c == 'c' as i32 {
                              (*ptr_to_globals).dot = char_insert(
                                (*ptr_to_globals).dot,
                                '\n' as i32 as libc::c_char,
                                2i32,
                              );
                              if whole != 0
                                && (*ptr_to_globals).dot != (*ptr_to_globals).end.offset(-1)
                              {
                                dot_prev();
                              }
                            } else if c == 'd' as i32 {
                              dot_begin();
                              dot_skip_over_ws();
                            }
                          }
                          if c1 != 27i32 {
                            if c == 'c' as i32 {
                              strcpy(
                                buf.as_mut_ptr(),
                                b"Change\x00" as *const u8 as *const libc::c_char,
                              );
                              current_block = 8629930936610358348;
                            } else {
                              if c == 'd' as i32 {
                                strcpy(
                                  buf.as_mut_ptr(),
                                  b"Delete\x00" as *const u8 as *const libc::c_char,
                                );
                              }
                              if c == 'y' as i32 || c == 'Y' as i32 {
                                strcpy(
                                  buf.as_mut_ptr(),
                                  b"Yank\x00" as *const u8 as *const libc::c_char,
                                );
                              }
                              p = (*ptr_to_globals).reg[(*ptr_to_globals).YDreg as usize];
                              q = p.offset(strlen(p) as isize);
                              cnt = 0;
                              while p <= q {
                                if *p as libc::c_int == '\n' as i32 {
                                  cnt += 1
                                }
                                p = p.offset(1)
                              }
                              status_line(
                                b"%s %u lines (%u chars) using [%c]\x00" as *const u8
                                  as *const libc::c_char,
                                buf.as_mut_ptr(),
                                cnt,
                                strlen((*ptr_to_globals).reg[(*ptr_to_globals).YDreg as usize])
                                  as libc::c_uint,
                                what_reg() as libc::c_int,
                              );
                              end_cmd_q();
                              current_block = 15129665204879337069;
                            }
                          } else {
                            current_block = 15129665204879337069;
                          }
                        }
                        5591548203144509315 => {
                          current_block = 2636677179867529885;
                        }
                        _ => {}
                      }
                      match current_block {
                        15129665204879337069 => {}
                        8629930936610358348 => {}
                        _ => {
                          match current_block {
                            2636677179867529885 => {
                              current_block = 12309206730560524281;
                            }
                            _ => {}
                          }
                          match current_block {
                            12309206730560524281 => {
                              current_block = 3325768110057758661;
                            }
                            _ => {}
                          }
                          match current_block {
                            3325768110057758661 => {
                              current_block = 14815832896553429982;
                            }
                            _ => {}
                          }
                          match current_block {
                            14815832896553429982 => {
                              current_block = 10731695520297161438;
                            }
                            _ => {}
                          }
                          match current_block {
                            10731695520297161438 => {
                              if c == '0' as i32 && (*ptr_to_globals).cmdcnt < 1i32 {
                                dot_begin();
                              } else {
                                (*ptr_to_globals).cmdcnt =
                                  (*ptr_to_globals).cmdcnt * 10i32 + (c - '0' as i32)
                              }
                              current_block = 15129665204879337069;
                            }
                            _ => {}
                          }
                          match current_block {
                            15129665204879337069 => {}
                            _ => {
                              loop {
                                match current_block {
                                  16813369756331276724 => {
                                    msg = std::ptr::null();
                                    current_block = 7392824444931029276;
                                  }
                                  7392824444931029276 => {
                                    dir = FORWARD as libc::c_int;
                                    p = (*ptr_to_globals).dot.offset(1);
                                    if *(*ptr_to_globals).last_search_pattern.offset(0)
                                      as libc::c_int
                                      == '?' as i32
                                    {
                                      dir = BACK as libc::c_int;
                                      p = (*ptr_to_globals).dot.offset(-1)
                                    }
                                    current_block = 4166979493554389389;
                                  }
                                  _ => {
                                    q = char_search(
                                      p,
                                      (*ptr_to_globals).last_search_pattern.offset(1),
                                      dir << 1i32 | FULL as libc::c_int,
                                    );
                                    if !q.is_null() {
                                      (*ptr_to_globals).dot = q;
                                      msg = std::ptr::null()
                                    } else {
                                      p = (*ptr_to_globals).text;
                                      if dir == BACK as libc::c_int {
                                        p = (*ptr_to_globals).end.offset(-1)
                                      }
                                      q = char_search(
                                        p,
                                        (*ptr_to_globals).last_search_pattern.offset(1),
                                        dir << 1i32 | FULL as libc::c_int,
                                      );
                                      if !q.is_null() {
                                        (*ptr_to_globals).dot = q;
                                        msg = b"search hit BOTTOM, continuing at TOP\x00"
                                          as *const u8
                                          as *const libc::c_char;
                                        if dir == BACK as libc::c_int {
                                          msg = b"search hit TOP, continuing at BOTTOM\x00"
                                            as *const u8
                                            as *const libc::c_char
                                        }
                                      } else {
                                        msg = b"Pattern not found\x00" as *const u8
                                          as *const libc::c_char
                                      }
                                    }
                                    if !msg.is_null() {
                                      status_line_bold(
                                        b"%s\x00" as *const u8 as *const libc::c_char,
                                        msg,
                                      );
                                    }
                                    (*ptr_to_globals).cmdcnt -= 1;
                                    if (*ptr_to_globals).cmdcnt > 0 {
                                      current_block = 16813369756331276724;
                                    } else {
                                      break;
                                    }
                                  }
                                }
                              }
                              current_block = 15129665204879337069;
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
        63 | 47 => {
          current_block = 18374191879090272823;
          match current_block {
            16992905640583886232 => {
              loop {
                if (*(*ptr_to_globals).dot as libc::c_int - 'a' as i32) as libc::c_uchar
                  as libc::c_int
                  <= 'z' as i32 - 'a' as i32
                {
                  undo_push(
                    (*ptr_to_globals).dot,
                    1i32 as libc::c_uint,
                    1i32 as libc::c_uchar,
                  );
                  *(*ptr_to_globals).dot =
                    bb_ascii_toupper(*(*ptr_to_globals).dot as libc::c_uchar) as libc::c_char;
                  undo_push(
                    (*ptr_to_globals).dot,
                    1i32 as libc::c_uint,
                    2i32 as libc::c_uchar,
                  );
                } else if (*(*ptr_to_globals).dot as libc::c_int - 'A' as i32) as libc::c_uchar
                  as libc::c_int
                  <= 'Z' as i32 - 'A' as i32
                {
                  undo_push(
                    (*ptr_to_globals).dot,
                    1i32 as libc::c_uint,
                    1i32 as libc::c_uchar,
                  );
                  *(*ptr_to_globals).dot =
                    bb_ascii_tolower(*(*ptr_to_globals).dot as libc::c_uchar) as libc::c_char;
                  undo_push(
                    (*ptr_to_globals).dot,
                    1i32 as libc::c_uint,
                    2i32 as libc::c_uchar,
                  );
                }
                dot_right();
                (*ptr_to_globals).cmdcnt -= 1;
                if !((*ptr_to_globals).cmdcnt > 0) {
                  break;
                }
              }
              end_cmd_q();
              current_block = 15129665204879337069;
            }
            8729655159604064397 => {
              c1 = get_one_char();
              cnt = 0;
              if c1 == '.' as i32 {
                cnt = (*ptr_to_globals)
                  .rows
                  .wrapping_sub(2i32 as libc::c_uint)
                  .wrapping_div(2i32 as libc::c_uint) as libc::c_int
              }
              if c1 == '-' as i32 {
                cnt = (*ptr_to_globals).rows.wrapping_sub(2i32 as libc::c_uint) as libc::c_int
              }
              (*ptr_to_globals).screenbegin = begin_line((*ptr_to_globals).dot);
              dot_scroll(cnt, -1i32);
              current_block = 15129665204879337069;
            }
            15899500648299942075 => {
              (*ptr_to_globals).last_forward_char = get_one_char();
              do_cmd(';' as i32);
              if *(*ptr_to_globals).dot as libc::c_int == (*ptr_to_globals).last_forward_char {
                dot_left();
              }
              (*ptr_to_globals).last_forward_char = 0;
              current_block = 15129665204879337069;
            }
            9051390181078481641 => {
              c1 = get_one_char();
              if *(*ptr_to_globals).dot as libc::c_int != '\n' as i32 {
                (*ptr_to_globals).dot =
                  text_hole_delete((*ptr_to_globals).dot, (*ptr_to_globals).dot, 1i32);
                (*ptr_to_globals).dot =
                  char_insert((*ptr_to_globals).dot, c1 as libc::c_char, 2i32);
                dot_left();
              }
              end_cmd_q();
              current_block = 15129665204879337069;
            }
            877115918601926659 => {
              dir = FORWARD as libc::c_int;
              if c == 'b' as i32 {
                dir = BACK as libc::c_int
              }
              while !((*ptr_to_globals).dot.offset(dir as isize) < (*ptr_to_globals).text
                || (*ptr_to_globals).dot.offset(dir as isize) > (*ptr_to_globals).end.offset(-1))
              {
                (*ptr_to_globals).dot = (*ptr_to_globals).dot.offset(dir as isize);
                if ({
                  let mut bb__isspace: libc::c_uchar =
                    (*(*ptr_to_globals).dot as libc::c_int - 9i32) as libc::c_uchar;
                  (bb__isspace as libc::c_int == ' ' as i32 - 9i32
                    || bb__isspace as libc::c_int <= 13i32 - 9i32) as libc::c_int
                }) != 0
                {
                  (*ptr_to_globals).dot = skip_thing(
                    (*ptr_to_globals).dot,
                    if c == 'e' as i32 { 2i32 } else { 1i32 },
                    dir,
                    S_OVER_WS as libc::c_int,
                  )
                }
                if bb_ascii_isalnum(*(*ptr_to_globals).dot as libc::c_uchar) != 0
                  || *(*ptr_to_globals).dot as libc::c_int == '_' as i32
                {
                  (*ptr_to_globals).dot =
                    skip_thing((*ptr_to_globals).dot, 1i32, dir, S_END_ALNUM as libc::c_int)
                } else if *strchrnul(
                  b"!\"#$%&\'()*+,-./:;<=>?@[\\]^_`{|}~\x00" as *const u8 as *const libc::c_char,
                  *(*ptr_to_globals).dot as libc::c_int,
                )
                .offset(0)
                  != 0
                {
                  (*ptr_to_globals).dot =
                    skip_thing((*ptr_to_globals).dot, 1i32, dir, S_END_PUNCT as libc::c_int)
                }
                (*ptr_to_globals).cmdcnt -= 1;
                if !((*ptr_to_globals).cmdcnt > 0) {
                  break;
                }
              }
              current_block = 15129665204879337069;
            }
            1085022737867179637 => {
              dot_begin();
              dot_skip_over_ws();
              current_block = 15129665204879337069;
            }
            3113147720494587438 => {
              c1 = get_one_char();
              if c1 != 'Z' as i32 {
                indicate_error();
              } else if (*ptr_to_globals).modified_count != 0 {
                if 1i32 != 0 && (*ptr_to_globals).readonly_mode as libc::c_int != 0 {
                  status_line_bold(
                    b"\'%s\' is read only\x00" as *const u8 as *const libc::c_char,
                    (*ptr_to_globals).current_filename,
                  );
                } else {
                  cnt = file_write(
                    (*ptr_to_globals).current_filename,
                    (*ptr_to_globals).text,
                    (*ptr_to_globals).end.offset(-1),
                  );
                  if cnt < 0 {
                    if cnt == -1i32 {
                      status_line_bold(b"Write error: %m\x00" as *const u8 as *const libc::c_char);
                    }
                  } else if cnt as libc::c_long
                    == (*ptr_to_globals)
                      .end
                      .offset(-1)
                      .wrapping_offset_from((*ptr_to_globals).text)
                      as libc::c_long
                      + 1
                  {
                    (*ptr_to_globals).editing = 0 as smallint
                  }
                }
              } else {
                (*ptr_to_globals).editing = 0 as smallint
              }
              current_block = 15129665204879337069;
            }
            12960118908218882441 => {
              p = begin_line((*ptr_to_globals).dot);
              if *p.offset(-1i32 as isize) as libc::c_int == '\n' as i32 {
                dot_prev();
                current_block = 2087484904894455135;
              } else {
                dot_begin();
                (*ptr_to_globals).dot =
                  char_insert((*ptr_to_globals).dot, '\n' as i32 as libc::c_char, 1i32);
                dot_prev();
                current_block = 8629930936610358348;
              }
            }
            8720450212473544924 => {
              (*ptr_to_globals).dot = (*ptr_to_globals).screenbegin;
              cnt = 0;
              while (cnt as libc::c_uint)
                < (*ptr_to_globals)
                  .rows
                  .wrapping_sub(1i32 as libc::c_uint)
                  .wrapping_div(2i32 as libc::c_uint)
              {
                (*ptr_to_globals).dot = next_line((*ptr_to_globals).dot);
                cnt += 1
              }
              current_block = 15129665204879337069;
            }
            13015277209715431090 => {
              (*ptr_to_globals).dot = end_screen();
              if (*ptr_to_globals).cmdcnt as libc::c_uint
                > (*ptr_to_globals).rows.wrapping_sub(1i32 as libc::c_uint)
              {
                (*ptr_to_globals).cmdcnt =
                  (*ptr_to_globals).rows.wrapping_sub(1i32 as libc::c_uint) as libc::c_int
              }
              (*ptr_to_globals).cmdcnt -= 1;
              if (*ptr_to_globals).cmdcnt > 0 {
                do_cmd('-' as i32);
              }
              dot_begin();
              dot_skip_over_ws();
              current_block = 15129665204879337069;
            }
            9800435767766781385 => {
              loop {
                dot_end();
                if (*ptr_to_globals).dot < (*ptr_to_globals).end.offset(-1) {
                  undo_push(
                    (*ptr_to_globals).dot,
                    1i32 as libc::c_uint,
                    1i32 as libc::c_uchar,
                  );
                  let fresh15 = (*ptr_to_globals).dot;
                  (*ptr_to_globals).dot = (*ptr_to_globals).dot.offset(1);
                  *fresh15 = ' ' as i32 as libc::c_char;
                  undo_push(
                    (*ptr_to_globals).dot.offset(-1),
                    1i32 as libc::c_uint,
                    2i32 as libc::c_uchar,
                  );
                  while ({
                    let mut bb__isblank: libc::c_uchar = *(*ptr_to_globals).dot as libc::c_uchar;
                    (bb__isblank as libc::c_int == ' ' as i32
                      || bb__isblank as libc::c_int == '\t' as i32)
                      as libc::c_int
                  }) != 0
                  {
                    text_hole_delete((*ptr_to_globals).dot, (*ptr_to_globals).dot, 2i32);
                  }
                }
                (*ptr_to_globals).cmdcnt -= 1;
                if !((*ptr_to_globals).cmdcnt > 0) {
                  break;
                }
              }
              end_cmd_q();
              current_block = 15129665204879337069;
            }
            3432363526595694666 => {
              dot_begin();
              dot_skip_over_ws();
              current_block = 3268579060917229304;
            }
            3494829253343353619 => {
              (*ptr_to_globals).dot = (*ptr_to_globals).screenbegin;
              if (*ptr_to_globals).cmdcnt as libc::c_uint
                > (*ptr_to_globals).rows.wrapping_sub(1i32 as libc::c_uint)
              {
                (*ptr_to_globals).cmdcnt =
                  (*ptr_to_globals).rows.wrapping_sub(1i32 as libc::c_uint) as libc::c_int
              }
              (*ptr_to_globals).cmdcnt -= 1;
              if (*ptr_to_globals).cmdcnt > 0 {
                do_cmd('+' as i32);
              }
              dot_skip_over_ws();
              current_block = 15129665204879337069;
            }
            17973101765331640574 => {
              c1 = get_one_char();
              if c1 != 'g' as i32 {
                buf[0] = 'g' as i32 as libc::c_char;
                buf[1] = if c1 >= 0 { c1 } else { '*' as i32 } as libc::c_char;
                buf[2] = '\u{0}' as i32 as libc::c_char;
                not_implemented(buf.as_mut_ptr());
                current_block = 15129665204879337069;
              } else {
                if (*ptr_to_globals).cmdcnt == 0 {
                  (*ptr_to_globals).cmdcnt = 1i32
                }
                current_block = 11945623545738147997;
              }
            }
            16546625800574160972 => {
              save_dot = (*ptr_to_globals).dot;
              (*ptr_to_globals).dot = dollar_line((*ptr_to_globals).dot);
              (*ptr_to_globals).dot = yank_delete(
                save_dot,
                (*ptr_to_globals).dot,
                0,
                YANKDEL as libc::c_int,
                1i32,
              );
              if c == 'C' as i32 {
                current_block = 8629930936610358348;
              } else {
                if c == 'D' as i32 {
                  end_cmd_q();
                }
                current_block = 15129665204879337069;
              }
            }
            11937696639986586685 => {
              cnt = count_lines((*ptr_to_globals).text, (*ptr_to_globals).dot);
              c1 = get_one_char();
              find_range(&mut p, &mut q, c1 as libc::c_char);
              yank_delete(p, q, 1i32, YANKONLY as libc::c_int, 0);
              p = begin_line(p);
              q = end_line(q);
              i = count_lines(p, q);
              while i > 0 {
                if c == '<' as i32 {
                  if *p as libc::c_int == '\t' as i32 {
                    text_hole_delete(p, p, 0);
                  } else if *p as libc::c_int == ' ' as i32 {
                    j = 0;
                    while *p as libc::c_int == ' ' as i32 && j < (*ptr_to_globals).tabstop {
                      text_hole_delete(p, p, 0);
                      j += 1
                    }
                  }
                } else if c == '>' as i32 {
                  char_insert(p, '\t' as i32 as libc::c_char, 1i32);
                }
                i -= 1;
                p = next_line(p)
              }
              (*ptr_to_globals).dot = find_line(cnt);
              dot_skip_over_ws();
              end_cmd_q();
              current_block = 15129665204879337069;
            }
            17725350714912028156 => {
              p = get_input_line(b":\x00" as *const u8 as *const libc::c_char);
              colon(p);
              current_block = 15129665204879337069;
            }
            14526470074083880812 => {
              q = char_search(
                (*ptr_to_globals).dot,
                b"\n\n\x00" as *const u8 as *const libc::c_char,
                (FORWARD as libc::c_int) << 1i32 | FULL as libc::c_int,
              );
              if !q.is_null() {
                (*ptr_to_globals).dot = next_line(q)
              }
              current_block = 15129665204879337069;
            }
            8893187391306414141 => {
              q = char_search(
                (*ptr_to_globals).dot,
                b"\n\n\x00" as *const u8 as *const libc::c_char,
                ((BACK as libc::c_int as libc::c_uint) << 1i32
                  | FULL as libc::c_int as libc::c_uint) as libc::c_int,
              );
              if !q.is_null() {
                (*ptr_to_globals).dot = next_line(q)
              }
              current_block = 15129665204879337069;
            }
            7021673758293221412 => {
              dir = BACK as libc::c_int;
              p = (*ptr_to_globals).dot.offset(-1);
              if *(*ptr_to_globals).last_search_pattern.offset(0) as libc::c_int == '?' as i32 {
                dir = FORWARD as libc::c_int;
                p = (*ptr_to_globals).dot.offset(1)
              }
              current_block = 4166979493554389389;
            }
            18374191879090272823 => {
              buf[0] = c as libc::c_char;
              buf[1] = '\u{0}' as i32 as libc::c_char;
              q = get_input_line(buf.as_mut_ptr());
              if *q.offset(0) as libc::c_int != 0 && *q.offset(1) == 0 {
                if *(*ptr_to_globals).last_search_pattern.offset(0) != 0 {
                  *(*ptr_to_globals).last_search_pattern.offset(0) = c as libc::c_char
                }
                current_block = 7392824444931029276;
              } else if *q.offset(0) != 0 {
                free((*ptr_to_globals).last_search_pattern as *mut libc::c_void);
                (*ptr_to_globals).last_search_pattern = crate::libbb::xfuncs_printf::xstrdup(q);
                current_block = 7392824444931029276;
              } else {
                current_block = 15129665204879337069;
              }
            }
            16407828456666301883 => {
              if (*ptr_to_globals).last_forward_char == 0 {
                current_block = 15129665204879337069;
              } else {
                loop {
                  q = (*ptr_to_globals).dot.offset(-1);
                  while q >= (*ptr_to_globals).text
                    && *q as libc::c_int != '\n' as i32
                    && *q as libc::c_int != (*ptr_to_globals).last_forward_char
                  {
                    q = q.offset(-1)
                  }
                  if q >= (*ptr_to_globals).text
                    && *q as libc::c_int == (*ptr_to_globals).last_forward_char
                  {
                    (*ptr_to_globals).dot = q
                  }
                  (*ptr_to_globals).cmdcnt -= 1;
                  if !((*ptr_to_globals).cmdcnt > 0) {
                    break;
                  }
                }
                current_block = 15129665204879337069;
              }
            }
            9018432604062702004 => {
              q = (*ptr_to_globals).dot;
              while q < (*ptr_to_globals).end && *q as libc::c_int != '\n' as i32 {
                if !strchr(
                  b"()[]{}\x00" as *const u8 as *const libc::c_char,
                  *q as libc::c_int,
                )
                .is_null()
                {
                  p = find_pair(q, *q);
                  if p.is_null() {
                    indicate_error();
                  } else {
                    (*ptr_to_globals).dot = p
                  }
                  break;
                } else {
                  q = q.offset(1)
                }
              }
              if *q as libc::c_int == '\n' as i32 {
                indicate_error();
              }
              current_block = 15129665204879337069;
            }
            10247103787464459848 => {
              p = (*ptr_to_globals).reg[(*ptr_to_globals).YDreg as usize];
              if p.is_null() {
                status_line_bold(
                  b"Nothing in register %c\x00" as *const u8 as *const libc::c_char,
                  what_reg() as libc::c_int,
                );
              } else {
                if !strchr(p, '\n' as i32).is_null() {
                  if c == 'P' as i32 {
                    dot_begin();
                  }
                  if c == 'p' as i32 {
                    if end_line((*ptr_to_globals).dot) == (*ptr_to_globals).end.offset(-1) {
                      (*ptr_to_globals).dot = (*ptr_to_globals).end
                    } else {
                      dot_next();
                    }
                  }
                } else if c == 'p' as i32 {
                  dot_right();
                }
                string_insert((*ptr_to_globals).dot, p, 1i32);
                end_cmd_q();
              }
              current_block = 15129665204879337069;
            }
            15260732871948875843 => {
              c1 = (get_one_char() | 0x20i32) - 'a' as i32;
              if c1 as libc::c_uint <= 25i32 as libc::c_uint {
                (*ptr_to_globals).mark[c1 as usize] = (*ptr_to_globals).dot
              } else {
                indicate_error();
              }
              current_block = 15129665204879337069;
            }
            12738322036487086035 => {
              c1 = get_one_char() | 0x20i32;
              if (c1 - 'a' as i32) as libc::c_uint <= 25i32 as libc::c_uint {
                c1 = c1 - 'a' as i32;
                q = (*ptr_to_globals).mark[c1 as usize];
                if (*ptr_to_globals).text <= q && q < (*ptr_to_globals).end {
                  (*ptr_to_globals).dot = q;
                  dot_begin();
                  dot_skip_over_ws();
                }
              } else if c1 == '\'' as i32 {
                (*ptr_to_globals).dot = swap_context((*ptr_to_globals).dot);
                dot_begin();
                dot_skip_over_ws();
              } else {
                indicate_error();
              }
              current_block = 15129665204879337069;
            }
            13255096073384561358 => {
              c1 = (get_one_char() | 0x20i32) - 'a' as i32;
              if c1 as libc::c_uint <= 25i32 as libc::c_uint {
                (*ptr_to_globals).YDreg = c1 as smalluint
              } else {
                indicate_error();
              }
              current_block = 15129665204879337069;
            }
            10258711639984089377 => {
              if (*ptr_to_globals).cmd_mode as libc::c_int == 0 {
                indicate_error();
              }
              (*ptr_to_globals).cmd_mode = 0 as smallint;
              undo_queue_commit();
              end_cmd_q();
              (*ptr_to_globals).last_status_cksum = 0;
              current_block = 15129665204879337069;
            }
            11439127087547047736 => {
              buf[0] = c as libc::c_char;
              buf[1] = '\u{0}' as i32 as libc::c_char;
              not_implemented(buf.as_mut_ptr());
              end_cmd_q();
              current_block = 17440971994642376514;
            }
            7961798899781870241 => {
              dot_scroll(
                (*ptr_to_globals).rows.wrapping_sub(2i32 as libc::c_uint) as libc::c_int,
                -1i32,
              );
              current_block = 15129665204879337069;
            }
            9426343755402444879 => {
              dot_scroll(
                (*ptr_to_globals)
                  .rows
                  .wrapping_sub(2i32 as libc::c_uint)
                  .wrapping_div(2i32 as libc::c_uint) as libc::c_int,
                1i32,
              );
              current_block = 15129665204879337069;
            }
            13352459794680105913 => {
              dot_scroll(1i32, 1i32);
              current_block = 15129665204879337069;
            }
            14142272253464333006 => {
              dot_scroll(
                (*ptr_to_globals).rows.wrapping_sub(2i32 as libc::c_uint) as libc::c_int,
                1i32,
              );
              current_block = 15129665204879337069;
            }
            10758177197742640066 => {
              (*ptr_to_globals).last_status_cksum = 0;
              current_block = 15129665204879337069;
            }
            6152256259730122749 => {
              current_block = 7534742345255184552;
            }
            12883932598258173301 => {
              current_block = 8800996768013373992;
            }
            11242998110520238401 => {
              redraw(1i32);
              current_block = 15129665204879337069;
            }
            13619733043935729992 => {
              loop {
                dot_next();
                dot_skip_over_ws();
                (*ptr_to_globals).cmdcnt -= 1;
                if !((*ptr_to_globals).cmdcnt > 0) {
                  break;
                }
              }
              current_block = 15129665204879337069;
            }
            9339065157412720613 => {
              dot_scroll(
                (*ptr_to_globals)
                  .rows
                  .wrapping_sub(2i32 as libc::c_uint)
                  .wrapping_div(2i32 as libc::c_uint) as libc::c_int,
                -1i32,
              );
              current_block = 15129665204879337069;
            }
            11447082683497798022 => {
              dot_scroll(1i32, -1i32);
              current_block = 15129665204879337069;
            }
            5182000506326660482 => {
              current_block = 13993698454868426881;
            }
            1105010766850597332 => {
              if !(*ptr_to_globals).reg[27].is_null() {
                p = begin_line((*ptr_to_globals).dot);
                q = end_line((*ptr_to_globals).dot);
                p = text_hole_delete(p, q, 1i32);
                p = p.offset(string_insert(p, (*ptr_to_globals).reg[27], 2i32) as isize);
                (*ptr_to_globals).dot = p;
                dot_skip_over_ws();
              }
              current_block = 15129665204879337069;
            }
            8616046655533110204 => {
              undo_pop();
              current_block = 15129665204879337069;
            }
            5127767458142431603 => {
              loop {
                (*ptr_to_globals).dot = end_line((*ptr_to_globals).dot);
                (*ptr_to_globals).cmdcnt -= 1;
                if (*ptr_to_globals).cmdcnt <= 0 {
                  break;
                }
                dot_next();
              }
              current_block = 15129665204879337069;
            }
            222014967776118151 => {
              (*ptr_to_globals).last_forward_char = get_one_char();
              current_block = 7856905509180742666;
            }
            11209792479411604110 => {
              loop {
                dot_prev();
                dot_skip_over_ws();
                (*ptr_to_globals).cmdcnt -= 1;
                if !((*ptr_to_globals).cmdcnt > 0) {
                  break;
                }
              }
              current_block = 15129665204879337069;
            }
            3364823792826654116 => {
              if (*ptr_to_globals).lmc_len != 0 {
                (*ptr_to_globals).ioq_start = crate::libbb::xfuncs_printf::xstrndup(
                  (*ptr_to_globals).last_modifying_cmd.as_mut_ptr(),
                  (*ptr_to_globals).lmc_len,
                );
                (*ptr_to_globals).ioq = (*ptr_to_globals).ioq_start
              }
              current_block = 15129665204879337069;
            }
            18096603330221575131 => {
              current_block = 17498168302144015873;
            }
            16891123271837848903 => {
              dot_end();
              current_block = 1752638907092016026;
            }
            8517235759107662071 => {
              current_block = 5847749760081351726;
            }
            12525254419223051704 => {
              if (*ptr_to_globals).dot < (*ptr_to_globals).end.offset(-1) {
                (*ptr_to_globals).dot = yank_delete(
                  (*ptr_to_globals).dot,
                  (*ptr_to_globals).dot,
                  1i32,
                  YANKDEL as libc::c_int,
                  1i32,
                )
              }
              current_block = 15129665204879337069;
            }
            15232911949322867522 => {
              current_block = 17251831742223396249;
            }
            10863374208794025069 => {
              current_block = 1895262434596074581;
            }
            451126677064669119 => {
              loop {
                dot_prev();
                (*ptr_to_globals).dot = move_to_col(
                  (*ptr_to_globals).dot,
                  (*ptr_to_globals).ccol + (*ptr_to_globals).offset,
                );
                (*ptr_to_globals).cmdcnt -= 1;
                if !((*ptr_to_globals).cmdcnt > 0) {
                  break;
                }
              }
              current_block = 15129665204879337069;
            }
            4611735929166613116 => {
              loop {
                if bb_ascii_isalnum(*(*ptr_to_globals).dot as libc::c_uchar) != 0
                  || *(*ptr_to_globals).dot as libc::c_int == '_' as i32
                {
                  (*ptr_to_globals).dot = skip_thing(
                    (*ptr_to_globals).dot,
                    1i32,
                    FORWARD as libc::c_int,
                    S_END_ALNUM as libc::c_int,
                  )
                } else if *strchrnul(
                  b"!\"#$%&\'()*+,-./:;<=>?@[\\]^_`{|}~\x00" as *const u8 as *const libc::c_char,
                  *(*ptr_to_globals).dot as libc::c_int,
                )
                .offset(0)
                  != 0
                {
                  (*ptr_to_globals).dot = skip_thing(
                    (*ptr_to_globals).dot,
                    1i32,
                    FORWARD as libc::c_int,
                    S_END_PUNCT as libc::c_int,
                  )
                }
                if (*ptr_to_globals).dot < (*ptr_to_globals).end.offset(-1) {
                  (*ptr_to_globals).dot = (*ptr_to_globals).dot.offset(1)
                }
                if ({
                  let mut bb__isspace: libc::c_uchar =
                    (*(*ptr_to_globals).dot as libc::c_int - 9i32) as libc::c_uchar;
                  (bb__isspace as libc::c_int == ' ' as i32 - 9i32
                    || bb__isspace as libc::c_int <= 13i32 - 9i32) as libc::c_int
                }) != 0
                {
                  (*ptr_to_globals).dot = skip_thing(
                    (*ptr_to_globals).dot,
                    2i32,
                    FORWARD as libc::c_int,
                    S_OVER_WS as libc::c_int,
                  )
                }
                (*ptr_to_globals).cmdcnt -= 1;
                if !((*ptr_to_globals).cmdcnt > 0) {
                  break;
                }
              }
              current_block = 15129665204879337069;
            }
            4386451087681909888 => {
              (*ptr_to_globals).dot =
                move_to_col((*ptr_to_globals).dot, (*ptr_to_globals).cmdcnt - 1i32);
              current_block = 15129665204879337069;
            }
            1296397779060594135 => {
              dot_begin();
              current_block = 15129665204879337069;
            }
            _ => {}
          }
          match current_block {
            15129665204879337069 => {}
            8629930936610358348 => {}
            _ => {
              match current_block {
                17251831742223396249 => {
                  dir = 0;
                  if c == 'X' as i32 {
                    dir = -1i32
                  }
                  loop {
                    if *(*ptr_to_globals).dot.offset(dir as isize) as libc::c_int != '\n' as i32 {
                      if c == 'X' as i32 {
                        (*ptr_to_globals).dot = (*ptr_to_globals).dot.offset(-1)
                      }
                      (*ptr_to_globals).dot = yank_delete(
                        (*ptr_to_globals).dot,
                        (*ptr_to_globals).dot,
                        0,
                        YANKDEL as libc::c_int,
                        1i32,
                      )
                    }
                    (*ptr_to_globals).cmdcnt -= 1;
                    if !((*ptr_to_globals).cmdcnt > 0) {
                      break;
                    }
                  }
                  end_cmd_q();
                  if c == 's' as i32 {
                    current_block = 8629930936610358348;
                  } else {
                    current_block = 15129665204879337069;
                  }
                }
                2087484904894455135 => {
                  dot_end();
                  (*ptr_to_globals).dot =
                    char_insert((*ptr_to_globals).dot, '\n' as i32 as libc::c_char, 1i32);
                  current_block = 8629930936610358348;
                }
                11945623545738147997 => {
                  (*ptr_to_globals).dot = (*ptr_to_globals).end.offset(-1);
                  if (*ptr_to_globals).cmdcnt > 0 {
                    (*ptr_to_globals).dot = find_line((*ptr_to_globals).cmdcnt)
                  }
                  dot_skip_over_ws();
                  current_block = 15129665204879337069;
                }
                5847749760081351726 => {
                  dir = FORWARD as libc::c_int;
                  if c == 'B' as i32 {
                    dir = BACK as libc::c_int
                  }
                  loop {
                    if c == 'W' as i32
                      || ({
                        let mut bb__isspace: libc::c_uchar =
                          (*(*ptr_to_globals).dot.offset(dir as isize) as libc::c_int - 9i32)
                            as libc::c_uchar;
                        (bb__isspace as libc::c_int == ' ' as i32 - 9i32
                          || bb__isspace as libc::c_int <= 13i32 - 9i32)
                          as libc::c_int
                      }) != 0
                    {
                      (*ptr_to_globals).dot =
                        skip_thing((*ptr_to_globals).dot, 1i32, dir, S_TO_WS as libc::c_int);
                      (*ptr_to_globals).dot =
                        skip_thing((*ptr_to_globals).dot, 2i32, dir, S_OVER_WS as libc::c_int)
                    }
                    if c != 'W' as i32 {
                      (*ptr_to_globals).dot =
                        skip_thing((*ptr_to_globals).dot, 1i32, dir, S_BEFORE_WS as libc::c_int)
                    }
                    (*ptr_to_globals).cmdcnt -= 1;
                    if !((*ptr_to_globals).cmdcnt > 0) {
                      break;
                    }
                  }
                  current_block = 15129665204879337069;
                }
                17440971994642376514 => {
                  current_block = 15129665204879337069;
                }
                7534742345255184552 => {
                  current_block = 17247297260531395789;
                }
                8800996768013373992 => {
                  loop {
                    dot_next();
                    (*ptr_to_globals).dot = move_to_col(
                      (*ptr_to_globals).dot,
                      (*ptr_to_globals).ccol + (*ptr_to_globals).offset,
                    );
                    (*ptr_to_globals).cmdcnt -= 1;
                    if !((*ptr_to_globals).cmdcnt > 0) {
                      break;
                    }
                  }
                  current_block = 15129665204879337069;
                }
                13993698454868426881 => {
                  loop {
                    dot_right();
                    (*ptr_to_globals).cmdcnt -= 1;
                    if !((*ptr_to_globals).cmdcnt > 0) {
                      break;
                    }
                  }
                  current_block = 15129665204879337069;
                }
                7856905509180742666 => {
                  while !((*ptr_to_globals).last_forward_char == 0) {
                    q = (*ptr_to_globals).dot.offset(1);
                    while q < (*ptr_to_globals).end.offset(-1)
                      && *q as libc::c_int != '\n' as i32
                      && *q as libc::c_int != (*ptr_to_globals).last_forward_char
                    {
                      q = q.offset(1)
                    }
                    if *q as libc::c_int == (*ptr_to_globals).last_forward_char {
                      (*ptr_to_globals).dot = q
                    }
                    (*ptr_to_globals).cmdcnt -= 1;
                    if !((*ptr_to_globals).cmdcnt > 0) {
                      break;
                    }
                  }
                  current_block = 15129665204879337069;
                }
                17498168302144015873 => {
                  current_block = 8681395796513813967;
                }
                1752638907092016026 => {
                  if *(*ptr_to_globals).dot as libc::c_int != '\n' as i32 {
                    (*ptr_to_globals).dot = (*ptr_to_globals).dot.offset(1)
                  }
                  current_block = 8629930936610358348;
                }
                3268579060917229304 => {
                  current_block = 8629930936610358348;
                }
                1895262434596074581 => {
                  current_block = 8908416993177701018;
                }
                _ => {}
              }
              match current_block {
                8629930936610358348 => {}
                15129665204879337069 => {}
                _ => {
                  match current_block {
                    17247297260531395789 => {
                      loop {
                        dot_left();
                        (*ptr_to_globals).cmdcnt -= 1;
                        if !((*ptr_to_globals).cmdcnt > 0) {
                          break;
                        }
                      }
                      current_block = 15129665204879337069;
                    }
                    8681395796513813967 => {
                      current_block = 5591548203144509315;
                    }
                    8908416993177701018 => {
                      current_block = 16124761010012532485;
                    }
                    _ => {}
                  }
                  match current_block {
                    15129665204879337069 => {}
                    _ => {
                      match current_block {
                        16124761010012532485 => {
                          let mut yf: libc::c_int = 0;
                          let mut ml: libc::c_int = 0;
                          let mut whole: libc::c_int = 0;
                          yf = YANKDEL as libc::c_int;
                          if c == 'y' as i32 || c == 'Y' as i32 {
                            yf = YANKONLY as libc::c_int
                          }
                          c1 = 'y' as i32;
                          if c != 'Y' as i32 {
                            c1 = get_one_char()
                          }
                          ml = find_range(&mut p, &mut q, c1 as libc::c_char);
                          place_cursor(0i32, 0);
                          if c1 == 27i32 {
                            c1 = 27i32;
                            c = c1
                          } else if !strchr(b"wW\x00" as *const u8 as *const libc::c_char, c1)
                            .is_null()
                          {
                            ml = 0;
                            if c == 'c' as i32 {
                              while ({
                                let mut bb__isspace: libc::c_uchar =
                                  (*q as libc::c_int - 9i32) as libc::c_uchar;
                                (bb__isspace as libc::c_int == ' ' as i32 - 9i32
                                  || bb__isspace as libc::c_int <= 13i32 - 9i32)
                                  as libc::c_int
                              }) != 0
                                && q > p
                              {
                                q = q.offset(-1)
                              }
                            }
                            (*ptr_to_globals).dot = yank_delete(p, q, ml, yf, 1i32)
                          } else if !strchr(
                            b"^0bBeEft%$ lh\x08\x7f\x00" as *const u8 as *const libc::c_char,
                            c1,
                          )
                          .is_null()
                          {
                            (*ptr_to_globals).dot = yank_delete(p, q, ml, yf, 1i32)
                          } else if !strchr(
                            b"cdykjGHL+-{}\r\n\x00" as *const u8 as *const libc::c_char,
                            c1,
                          )
                          .is_null()
                          {
                            (*ptr_to_globals).dot = yank_delete(p, q, ml, yf, 1i32);
                            whole = 1i32
                          } else {
                            c1 = 27i32;
                            c = c1;
                            ml = 0;
                            indicate_error();
                          }
                          if ml != 0 && whole != 0 {
                            if c == 'c' as i32 {
                              (*ptr_to_globals).dot = char_insert(
                                (*ptr_to_globals).dot,
                                '\n' as i32 as libc::c_char,
                                2i32,
                              );
                              if whole != 0
                                && (*ptr_to_globals).dot != (*ptr_to_globals).end.offset(-1)
                              {
                                dot_prev();
                              }
                            } else if c == 'd' as i32 {
                              dot_begin();
                              dot_skip_over_ws();
                            }
                          }
                          if c1 != 27i32 {
                            if c == 'c' as i32 {
                              strcpy(
                                buf.as_mut_ptr(),
                                b"Change\x00" as *const u8 as *const libc::c_char,
                              );
                              current_block = 8629930936610358348;
                            } else {
                              if c == 'd' as i32 {
                                strcpy(
                                  buf.as_mut_ptr(),
                                  b"Delete\x00" as *const u8 as *const libc::c_char,
                                );
                              }
                              if c == 'y' as i32 || c == 'Y' as i32 {
                                strcpy(
                                  buf.as_mut_ptr(),
                                  b"Yank\x00" as *const u8 as *const libc::c_char,
                                );
                              }
                              p = (*ptr_to_globals).reg[(*ptr_to_globals).YDreg as usize];
                              q = p.offset(strlen(p) as isize);
                              cnt = 0;
                              while p <= q {
                                if *p as libc::c_int == '\n' as i32 {
                                  cnt += 1
                                }
                                p = p.offset(1)
                              }
                              status_line(
                                b"%s %u lines (%u chars) using [%c]\x00" as *const u8
                                  as *const libc::c_char,
                                buf.as_mut_ptr(),
                                cnt,
                                strlen((*ptr_to_globals).reg[(*ptr_to_globals).YDreg as usize])
                                  as libc::c_uint,
                                what_reg() as libc::c_int,
                              );
                              end_cmd_q();
                              current_block = 15129665204879337069;
                            }
                          } else {
                            current_block = 15129665204879337069;
                          }
                        }
                        5591548203144509315 => {
                          current_block = 2636677179867529885;
                        }
                        _ => {}
                      }
                      match current_block {
                        15129665204879337069 => {}
                        8629930936610358348 => {}
                        _ => {
                          match current_block {
                            2636677179867529885 => {
                              current_block = 12309206730560524281;
                            }
                            _ => {}
                          }
                          match current_block {
                            12309206730560524281 => {
                              current_block = 3325768110057758661;
                            }
                            _ => {}
                          }
                          match current_block {
                            3325768110057758661 => {
                              current_block = 14815832896553429982;
                            }
                            _ => {}
                          }
                          match current_block {
                            14815832896553429982 => {
                              current_block = 10731695520297161438;
                            }
                            _ => {}
                          }
                          match current_block {
                            10731695520297161438 => {
                              if c == '0' as i32 && (*ptr_to_globals).cmdcnt < 1i32 {
                                dot_begin();
                              } else {
                                (*ptr_to_globals).cmdcnt =
                                  (*ptr_to_globals).cmdcnt * 10i32 + (c - '0' as i32)
                              }
                              current_block = 15129665204879337069;
                            }
                            _ => {}
                          }
                          match current_block {
                            15129665204879337069 => {}
                            _ => {
                              loop {
                                match current_block {
                                  16813369756331276724 => {
                                    msg = std::ptr::null();
                                    current_block = 7392824444931029276;
                                  }
                                  7392824444931029276 => {
                                    dir = FORWARD as libc::c_int;
                                    p = (*ptr_to_globals).dot.offset(1);
                                    if *(*ptr_to_globals).last_search_pattern.offset(0)
                                      as libc::c_int
                                      == '?' as i32
                                    {
                                      dir = BACK as libc::c_int;
                                      p = (*ptr_to_globals).dot.offset(-1)
                                    }
                                    current_block = 4166979493554389389;
                                  }
                                  _ => {
                                    q = char_search(
                                      p,
                                      (*ptr_to_globals).last_search_pattern.offset(1),
                                      dir << 1i32 | FULL as libc::c_int,
                                    );
                                    if !q.is_null() {
                                      (*ptr_to_globals).dot = q;
                                      msg = std::ptr::null()
                                    } else {
                                      p = (*ptr_to_globals).text;
                                      if dir == BACK as libc::c_int {
                                        p = (*ptr_to_globals).end.offset(-1)
                                      }
                                      q = char_search(
                                        p,
                                        (*ptr_to_globals).last_search_pattern.offset(1),
                                        dir << 1i32 | FULL as libc::c_int,
                                      );
                                      if !q.is_null() {
                                        (*ptr_to_globals).dot = q;
                                        msg = b"search hit BOTTOM, continuing at TOP\x00"
                                          as *const u8
                                          as *const libc::c_char;
                                        if dir == BACK as libc::c_int {
                                          msg = b"search hit TOP, continuing at BOTTOM\x00"
                                            as *const u8
                                            as *const libc::c_char
                                        }
                                      } else {
                                        msg = b"Pattern not found\x00" as *const u8
                                          as *const libc::c_char
                                      }
                                    }
                                    if !msg.is_null() {
                                      status_line_bold(
                                        b"%s\x00" as *const u8 as *const libc::c_char,
                                        msg,
                                      );
                                    }
                                    (*ptr_to_globals).cmdcnt -= 1;
                                    if (*ptr_to_globals).cmdcnt > 0 {
                                      current_block = 16813369756331276724;
                                    } else {
                                      break;
                                    }
                                  }
                                }
                              }
                              current_block = 15129665204879337069;
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
        78 => {
          current_block = 7021673758293221412;
          match current_block {
            16992905640583886232 => {
              loop {
                if (*(*ptr_to_globals).dot as libc::c_int - 'a' as i32) as libc::c_uchar
                  as libc::c_int
                  <= 'z' as i32 - 'a' as i32
                {
                  undo_push(
                    (*ptr_to_globals).dot,
                    1i32 as libc::c_uint,
                    1i32 as libc::c_uchar,
                  );
                  *(*ptr_to_globals).dot =
                    bb_ascii_toupper(*(*ptr_to_globals).dot as libc::c_uchar) as libc::c_char;
                  undo_push(
                    (*ptr_to_globals).dot,
                    1i32 as libc::c_uint,
                    2i32 as libc::c_uchar,
                  );
                } else if (*(*ptr_to_globals).dot as libc::c_int - 'A' as i32) as libc::c_uchar
                  as libc::c_int
                  <= 'Z' as i32 - 'A' as i32
                {
                  undo_push(
                    (*ptr_to_globals).dot,
                    1i32 as libc::c_uint,
                    1i32 as libc::c_uchar,
                  );
                  *(*ptr_to_globals).dot =
                    bb_ascii_tolower(*(*ptr_to_globals).dot as libc::c_uchar) as libc::c_char;
                  undo_push(
                    (*ptr_to_globals).dot,
                    1i32 as libc::c_uint,
                    2i32 as libc::c_uchar,
                  );
                }
                dot_right();
                (*ptr_to_globals).cmdcnt -= 1;
                if !((*ptr_to_globals).cmdcnt > 0) {
                  break;
                }
              }
              end_cmd_q();
              current_block = 15129665204879337069;
            }
            8729655159604064397 => {
              c1 = get_one_char();
              cnt = 0;
              if c1 == '.' as i32 {
                cnt = (*ptr_to_globals)
                  .rows
                  .wrapping_sub(2i32 as libc::c_uint)
                  .wrapping_div(2i32 as libc::c_uint) as libc::c_int
              }
              if c1 == '-' as i32 {
                cnt = (*ptr_to_globals).rows.wrapping_sub(2i32 as libc::c_uint) as libc::c_int
              }
              (*ptr_to_globals).screenbegin = begin_line((*ptr_to_globals).dot);
              dot_scroll(cnt, -1i32);
              current_block = 15129665204879337069;
            }
            15899500648299942075 => {
              (*ptr_to_globals).last_forward_char = get_one_char();
              do_cmd(';' as i32);
              if *(*ptr_to_globals).dot as libc::c_int == (*ptr_to_globals).last_forward_char {
                dot_left();
              }
              (*ptr_to_globals).last_forward_char = 0;
              current_block = 15129665204879337069;
            }
            9051390181078481641 => {
              c1 = get_one_char();
              if *(*ptr_to_globals).dot as libc::c_int != '\n' as i32 {
                (*ptr_to_globals).dot =
                  text_hole_delete((*ptr_to_globals).dot, (*ptr_to_globals).dot, 1i32);
                (*ptr_to_globals).dot =
                  char_insert((*ptr_to_globals).dot, c1 as libc::c_char, 2i32);
                dot_left();
              }
              end_cmd_q();
              current_block = 15129665204879337069;
            }
            877115918601926659 => {
              dir = FORWARD as libc::c_int;
              if c == 'b' as i32 {
                dir = BACK as libc::c_int
              }
              while !((*ptr_to_globals).dot.offset(dir as isize) < (*ptr_to_globals).text
                || (*ptr_to_globals).dot.offset(dir as isize) > (*ptr_to_globals).end.offset(-1))
              {
                (*ptr_to_globals).dot = (*ptr_to_globals).dot.offset(dir as isize);
                if ({
                  let mut bb__isspace: libc::c_uchar =
                    (*(*ptr_to_globals).dot as libc::c_int - 9i32) as libc::c_uchar;
                  (bb__isspace as libc::c_int == ' ' as i32 - 9i32
                    || bb__isspace as libc::c_int <= 13i32 - 9i32) as libc::c_int
                }) != 0
                {
                  (*ptr_to_globals).dot = skip_thing(
                    (*ptr_to_globals).dot,
                    if c == 'e' as i32 { 2i32 } else { 1i32 },
                    dir,
                    S_OVER_WS as libc::c_int,
                  )
                }
                if bb_ascii_isalnum(*(*ptr_to_globals).dot as libc::c_uchar) != 0
                  || *(*ptr_to_globals).dot as libc::c_int == '_' as i32
                {
                  (*ptr_to_globals).dot =
                    skip_thing((*ptr_to_globals).dot, 1i32, dir, S_END_ALNUM as libc::c_int)
                } else if *strchrnul(
                  b"!\"#$%&\'()*+,-./:;<=>?@[\\]^_`{|}~\x00" as *const u8 as *const libc::c_char,
                  *(*ptr_to_globals).dot as libc::c_int,
                )
                .offset(0)
                  != 0
                {
                  (*ptr_to_globals).dot =
                    skip_thing((*ptr_to_globals).dot, 1i32, dir, S_END_PUNCT as libc::c_int)
                }
                (*ptr_to_globals).cmdcnt -= 1;
                if !((*ptr_to_globals).cmdcnt > 0) {
                  break;
                }
              }
              current_block = 15129665204879337069;
            }
            1085022737867179637 => {
              dot_begin();
              dot_skip_over_ws();
              current_block = 15129665204879337069;
            }
            3113147720494587438 => {
              c1 = get_one_char();
              if c1 != 'Z' as i32 {
                indicate_error();
              } else if (*ptr_to_globals).modified_count != 0 {
                if 1i32 != 0 && (*ptr_to_globals).readonly_mode as libc::c_int != 0 {
                  status_line_bold(
                    b"\'%s\' is read only\x00" as *const u8 as *const libc::c_char,
                    (*ptr_to_globals).current_filename,
                  );
                } else {
                  cnt = file_write(
                    (*ptr_to_globals).current_filename,
                    (*ptr_to_globals).text,
                    (*ptr_to_globals).end.offset(-1),
                  );
                  if cnt < 0 {
                    if cnt == -1i32 {
                      status_line_bold(b"Write error: %m\x00" as *const u8 as *const libc::c_char);
                    }
                  } else if cnt as libc::c_long
                    == (*ptr_to_globals)
                      .end
                      .offset(-1)
                      .wrapping_offset_from((*ptr_to_globals).text)
                      as libc::c_long
                      + 1
                  {
                    (*ptr_to_globals).editing = 0 as smallint
                  }
                }
              } else {
                (*ptr_to_globals).editing = 0 as smallint
              }
              current_block = 15129665204879337069;
            }
            12960118908218882441 => {
              p = begin_line((*ptr_to_globals).dot);
              if *p.offset(-1i32 as isize) as libc::c_int == '\n' as i32 {
                dot_prev();
                current_block = 2087484904894455135;
              } else {
                dot_begin();
                (*ptr_to_globals).dot =
                  char_insert((*ptr_to_globals).dot, '\n' as i32 as libc::c_char, 1i32);
                dot_prev();
                current_block = 8629930936610358348;
              }
            }
            8720450212473544924 => {
              (*ptr_to_globals).dot = (*ptr_to_globals).screenbegin;
              cnt = 0;
              while (cnt as libc::c_uint)
                < (*ptr_to_globals)
                  .rows
                  .wrapping_sub(1i32 as libc::c_uint)
                  .wrapping_div(2i32 as libc::c_uint)
              {
                (*ptr_to_globals).dot = next_line((*ptr_to_globals).dot);
                cnt += 1
              }
              current_block = 15129665204879337069;
            }
            13015277209715431090 => {
              (*ptr_to_globals).dot = end_screen();
              if (*ptr_to_globals).cmdcnt as libc::c_uint
                > (*ptr_to_globals).rows.wrapping_sub(1i32 as libc::c_uint)
              {
                (*ptr_to_globals).cmdcnt =
                  (*ptr_to_globals).rows.wrapping_sub(1i32 as libc::c_uint) as libc::c_int
              }
              (*ptr_to_globals).cmdcnt -= 1;
              if (*ptr_to_globals).cmdcnt > 0 {
                do_cmd('-' as i32);
              }
              dot_begin();
              dot_skip_over_ws();
              current_block = 15129665204879337069;
            }
            9800435767766781385 => {
              loop {
                dot_end();
                if (*ptr_to_globals).dot < (*ptr_to_globals).end.offset(-1) {
                  undo_push(
                    (*ptr_to_globals).dot,
                    1i32 as libc::c_uint,
                    1i32 as libc::c_uchar,
                  );
                  let fresh15 = (*ptr_to_globals).dot;
                  (*ptr_to_globals).dot = (*ptr_to_globals).dot.offset(1);
                  *fresh15 = ' ' as i32 as libc::c_char;
                  undo_push(
                    (*ptr_to_globals).dot.offset(-1),
                    1i32 as libc::c_uint,
                    2i32 as libc::c_uchar,
                  );
                  while ({
                    let mut bb__isblank: libc::c_uchar = *(*ptr_to_globals).dot as libc::c_uchar;
                    (bb__isblank as libc::c_int == ' ' as i32
                      || bb__isblank as libc::c_int == '\t' as i32)
                      as libc::c_int
                  }) != 0
                  {
                    text_hole_delete((*ptr_to_globals).dot, (*ptr_to_globals).dot, 2i32);
                  }
                }
                (*ptr_to_globals).cmdcnt -= 1;
                if !((*ptr_to_globals).cmdcnt > 0) {
                  break;
                }
              }
              end_cmd_q();
              current_block = 15129665204879337069;
            }
            3432363526595694666 => {
              dot_begin();
              dot_skip_over_ws();
              current_block = 3268579060917229304;
            }
            3494829253343353619 => {
              (*ptr_to_globals).dot = (*ptr_to_globals).screenbegin;
              if (*ptr_to_globals).cmdcnt as libc::c_uint
                > (*ptr_to_globals).rows.wrapping_sub(1i32 as libc::c_uint)
              {
                (*ptr_to_globals).cmdcnt =
                  (*ptr_to_globals).rows.wrapping_sub(1i32 as libc::c_uint) as libc::c_int
              }
              (*ptr_to_globals).cmdcnt -= 1;
              if (*ptr_to_globals).cmdcnt > 0 {
                do_cmd('+' as i32);
              }
              dot_skip_over_ws();
              current_block = 15129665204879337069;
            }
            17973101765331640574 => {
              c1 = get_one_char();
              if c1 != 'g' as i32 {
                buf[0] = 'g' as i32 as libc::c_char;
                buf[1] = if c1 >= 0 { c1 } else { '*' as i32 } as libc::c_char;
                buf[2] = '\u{0}' as i32 as libc::c_char;
                not_implemented(buf.as_mut_ptr());
                current_block = 15129665204879337069;
              } else {
                if (*ptr_to_globals).cmdcnt == 0 {
                  (*ptr_to_globals).cmdcnt = 1i32
                }
                current_block = 11945623545738147997;
              }
            }
            16546625800574160972 => {
              save_dot = (*ptr_to_globals).dot;
              (*ptr_to_globals).dot = dollar_line((*ptr_to_globals).dot);
              (*ptr_to_globals).dot = yank_delete(
                save_dot,
                (*ptr_to_globals).dot,
                0,
                YANKDEL as libc::c_int,
                1i32,
              );
              if c == 'C' as i32 {
                current_block = 8629930936610358348;
              } else {
                if c == 'D' as i32 {
                  end_cmd_q();
                }
                current_block = 15129665204879337069;
              }
            }
            11937696639986586685 => {
              cnt = count_lines((*ptr_to_globals).text, (*ptr_to_globals).dot);
              c1 = get_one_char();
              find_range(&mut p, &mut q, c1 as libc::c_char);
              yank_delete(p, q, 1i32, YANKONLY as libc::c_int, 0);
              p = begin_line(p);
              q = end_line(q);
              i = count_lines(p, q);
              while i > 0 {
                if c == '<' as i32 {
                  if *p as libc::c_int == '\t' as i32 {
                    text_hole_delete(p, p, 0);
                  } else if *p as libc::c_int == ' ' as i32 {
                    j = 0;
                    while *p as libc::c_int == ' ' as i32 && j < (*ptr_to_globals).tabstop {
                      text_hole_delete(p, p, 0);
                      j += 1
                    }
                  }
                } else if c == '>' as i32 {
                  char_insert(p, '\t' as i32 as libc::c_char, 1i32);
                }
                i -= 1;
                p = next_line(p)
              }
              (*ptr_to_globals).dot = find_line(cnt);
              dot_skip_over_ws();
              end_cmd_q();
              current_block = 15129665204879337069;
            }
            17725350714912028156 => {
              p = get_input_line(b":\x00" as *const u8 as *const libc::c_char);
              colon(p);
              current_block = 15129665204879337069;
            }
            14526470074083880812 => {
              q = char_search(
                (*ptr_to_globals).dot,
                b"\n\n\x00" as *const u8 as *const libc::c_char,
                (FORWARD as libc::c_int) << 1i32 | FULL as libc::c_int,
              );
              if !q.is_null() {
                (*ptr_to_globals).dot = next_line(q)
              }
              current_block = 15129665204879337069;
            }
            8893187391306414141 => {
              q = char_search(
                (*ptr_to_globals).dot,
                b"\n\n\x00" as *const u8 as *const libc::c_char,
                ((BACK as libc::c_int as libc::c_uint) << 1i32
                  | FULL as libc::c_int as libc::c_uint) as libc::c_int,
              );
              if !q.is_null() {
                (*ptr_to_globals).dot = next_line(q)
              }
              current_block = 15129665204879337069;
            }
            7021673758293221412 => {
              dir = BACK as libc::c_int;
              p = (*ptr_to_globals).dot.offset(-1);
              if *(*ptr_to_globals).last_search_pattern.offset(0) as libc::c_int == '?' as i32 {
                dir = FORWARD as libc::c_int;
                p = (*ptr_to_globals).dot.offset(1)
              }
              current_block = 4166979493554389389;
            }
            18374191879090272823 => {
              buf[0] = c as libc::c_char;
              buf[1] = '\u{0}' as i32 as libc::c_char;
              q = get_input_line(buf.as_mut_ptr());
              if *q.offset(0) as libc::c_int != 0 && *q.offset(1) == 0 {
                if *(*ptr_to_globals).last_search_pattern.offset(0) != 0 {
                  *(*ptr_to_globals).last_search_pattern.offset(0) = c as libc::c_char
                }
                current_block = 7392824444931029276;
              } else if *q.offset(0) != 0 {
                free((*ptr_to_globals).last_search_pattern as *mut libc::c_void);
                (*ptr_to_globals).last_search_pattern = crate::libbb::xfuncs_printf::xstrdup(q);
                current_block = 7392824444931029276;
              } else {
                current_block = 15129665204879337069;
              }
            }
            16407828456666301883 => {
              if (*ptr_to_globals).last_forward_char == 0 {
                current_block = 15129665204879337069;
              } else {
                loop {
                  q = (*ptr_to_globals).dot.offset(-1);
                  while q >= (*ptr_to_globals).text
                    && *q as libc::c_int != '\n' as i32
                    && *q as libc::c_int != (*ptr_to_globals).last_forward_char
                  {
                    q = q.offset(-1)
                  }
                  if q >= (*ptr_to_globals).text
                    && *q as libc::c_int == (*ptr_to_globals).last_forward_char
                  {
                    (*ptr_to_globals).dot = q
                  }
                  (*ptr_to_globals).cmdcnt -= 1;
                  if !((*ptr_to_globals).cmdcnt > 0) {
                    break;
                  }
                }
                current_block = 15129665204879337069;
              }
            }
            9018432604062702004 => {
              q = (*ptr_to_globals).dot;
              while q < (*ptr_to_globals).end && *q as libc::c_int != '\n' as i32 {
                if !strchr(
                  b"()[]{}\x00" as *const u8 as *const libc::c_char,
                  *q as libc::c_int,
                )
                .is_null()
                {
                  p = find_pair(q, *q);
                  if p.is_null() {
                    indicate_error();
                  } else {
                    (*ptr_to_globals).dot = p
                  }
                  break;
                } else {
                  q = q.offset(1)
                }
              }
              if *q as libc::c_int == '\n' as i32 {
                indicate_error();
              }
              current_block = 15129665204879337069;
            }
            10247103787464459848 => {
              p = (*ptr_to_globals).reg[(*ptr_to_globals).YDreg as usize];
              if p.is_null() {
                status_line_bold(
                  b"Nothing in register %c\x00" as *const u8 as *const libc::c_char,
                  what_reg() as libc::c_int,
                );
              } else {
                if !strchr(p, '\n' as i32).is_null() {
                  if c == 'P' as i32 {
                    dot_begin();
                  }
                  if c == 'p' as i32 {
                    if end_line((*ptr_to_globals).dot) == (*ptr_to_globals).end.offset(-1) {
                      (*ptr_to_globals).dot = (*ptr_to_globals).end
                    } else {
                      dot_next();
                    }
                  }
                } else if c == 'p' as i32 {
                  dot_right();
                }
                string_insert((*ptr_to_globals).dot, p, 1i32);
                end_cmd_q();
              }
              current_block = 15129665204879337069;
            }
            15260732871948875843 => {
              c1 = (get_one_char() | 0x20i32) - 'a' as i32;
              if c1 as libc::c_uint <= 25i32 as libc::c_uint {
                (*ptr_to_globals).mark[c1 as usize] = (*ptr_to_globals).dot
              } else {
                indicate_error();
              }
              current_block = 15129665204879337069;
            }
            12738322036487086035 => {
              c1 = get_one_char() | 0x20i32;
              if (c1 - 'a' as i32) as libc::c_uint <= 25i32 as libc::c_uint {
                c1 = c1 - 'a' as i32;
                q = (*ptr_to_globals).mark[c1 as usize];
                if (*ptr_to_globals).text <= q && q < (*ptr_to_globals).end {
                  (*ptr_to_globals).dot = q;
                  dot_begin();
                  dot_skip_over_ws();
                }
              } else if c1 == '\'' as i32 {
                (*ptr_to_globals).dot = swap_context((*ptr_to_globals).dot);
                dot_begin();
                dot_skip_over_ws();
              } else {
                indicate_error();
              }
              current_block = 15129665204879337069;
            }
            13255096073384561358 => {
              c1 = (get_one_char() | 0x20i32) - 'a' as i32;
              if c1 as libc::c_uint <= 25i32 as libc::c_uint {
                (*ptr_to_globals).YDreg = c1 as smalluint
              } else {
                indicate_error();
              }
              current_block = 15129665204879337069;
            }
            10258711639984089377 => {
              if (*ptr_to_globals).cmd_mode as libc::c_int == 0 {
                indicate_error();
              }
              (*ptr_to_globals).cmd_mode = 0 as smallint;
              undo_queue_commit();
              end_cmd_q();
              (*ptr_to_globals).last_status_cksum = 0;
              current_block = 15129665204879337069;
            }
            11439127087547047736 => {
              buf[0] = c as libc::c_char;
              buf[1] = '\u{0}' as i32 as libc::c_char;
              not_implemented(buf.as_mut_ptr());
              end_cmd_q();
              current_block = 17440971994642376514;
            }
            7961798899781870241 => {
              dot_scroll(
                (*ptr_to_globals).rows.wrapping_sub(2i32 as libc::c_uint) as libc::c_int,
                -1i32,
              );
              current_block = 15129665204879337069;
            }
            9426343755402444879 => {
              dot_scroll(
                (*ptr_to_globals)
                  .rows
                  .wrapping_sub(2i32 as libc::c_uint)
                  .wrapping_div(2i32 as libc::c_uint) as libc::c_int,
                1i32,
              );
              current_block = 15129665204879337069;
            }
            13352459794680105913 => {
              dot_scroll(1i32, 1i32);
              current_block = 15129665204879337069;
            }
            14142272253464333006 => {
              dot_scroll(
                (*ptr_to_globals).rows.wrapping_sub(2i32 as libc::c_uint) as libc::c_int,
                1i32,
              );
              current_block = 15129665204879337069;
            }
            10758177197742640066 => {
              (*ptr_to_globals).last_status_cksum = 0;
              current_block = 15129665204879337069;
            }
            6152256259730122749 => {
              current_block = 7534742345255184552;
            }
            12883932598258173301 => {
              current_block = 8800996768013373992;
            }
            11242998110520238401 => {
              redraw(1i32);
              current_block = 15129665204879337069;
            }
            13619733043935729992 => {
              loop {
                dot_next();
                dot_skip_over_ws();
                (*ptr_to_globals).cmdcnt -= 1;
                if !((*ptr_to_globals).cmdcnt > 0) {
                  break;
                }
              }
              current_block = 15129665204879337069;
            }
            9339065157412720613 => {
              dot_scroll(
                (*ptr_to_globals)
                  .rows
                  .wrapping_sub(2i32 as libc::c_uint)
                  .wrapping_div(2i32 as libc::c_uint) as libc::c_int,
                -1i32,
              );
              current_block = 15129665204879337069;
            }
            11447082683497798022 => {
              dot_scroll(1i32, -1i32);
              current_block = 15129665204879337069;
            }
            5182000506326660482 => {
              current_block = 13993698454868426881;
            }
            1105010766850597332 => {
              if !(*ptr_to_globals).reg[27].is_null() {
                p = begin_line((*ptr_to_globals).dot);
                q = end_line((*ptr_to_globals).dot);
                p = text_hole_delete(p, q, 1i32);
                p = p.offset(string_insert(p, (*ptr_to_globals).reg[27], 2i32) as isize);
                (*ptr_to_globals).dot = p;
                dot_skip_over_ws();
              }
              current_block = 15129665204879337069;
            }
            8616046655533110204 => {
              undo_pop();
              current_block = 15129665204879337069;
            }
            5127767458142431603 => {
              loop {
                (*ptr_to_globals).dot = end_line((*ptr_to_globals).dot);
                (*ptr_to_globals).cmdcnt -= 1;
                if (*ptr_to_globals).cmdcnt <= 0 {
                  break;
                }
                dot_next();
              }
              current_block = 15129665204879337069;
            }
            222014967776118151 => {
              (*ptr_to_globals).last_forward_char = get_one_char();
              current_block = 7856905509180742666;
            }
            11209792479411604110 => {
              loop {
                dot_prev();
                dot_skip_over_ws();
                (*ptr_to_globals).cmdcnt -= 1;
                if !((*ptr_to_globals).cmdcnt > 0) {
                  break;
                }
              }
              current_block = 15129665204879337069;
            }
            3364823792826654116 => {
              if (*ptr_to_globals).lmc_len != 0 {
                (*ptr_to_globals).ioq_start = crate::libbb::xfuncs_printf::xstrndup(
                  (*ptr_to_globals).last_modifying_cmd.as_mut_ptr(),
                  (*ptr_to_globals).lmc_len,
                );
                (*ptr_to_globals).ioq = (*ptr_to_globals).ioq_start
              }
              current_block = 15129665204879337069;
            }
            18096603330221575131 => {
              current_block = 17498168302144015873;
            }
            16891123271837848903 => {
              dot_end();
              current_block = 1752638907092016026;
            }
            8517235759107662071 => {
              current_block = 5847749760081351726;
            }
            12525254419223051704 => {
              if (*ptr_to_globals).dot < (*ptr_to_globals).end.offset(-1) {
                (*ptr_to_globals).dot = yank_delete(
                  (*ptr_to_globals).dot,
                  (*ptr_to_globals).dot,
                  1i32,
                  YANKDEL as libc::c_int,
                  1i32,
                )
              }
              current_block = 15129665204879337069;
            }
            15232911949322867522 => {
              current_block = 17251831742223396249;
            }
            10863374208794025069 => {
              current_block = 1895262434596074581;
            }
            451126677064669119 => {
              loop {
                dot_prev();
                (*ptr_to_globals).dot = move_to_col(
                  (*ptr_to_globals).dot,
                  (*ptr_to_globals).ccol + (*ptr_to_globals).offset,
                );
                (*ptr_to_globals).cmdcnt -= 1;
                if !((*ptr_to_globals).cmdcnt > 0) {
                  break;
                }
              }
              current_block = 15129665204879337069;
            }
            4611735929166613116 => {
              loop {
                if bb_ascii_isalnum(*(*ptr_to_globals).dot as libc::c_uchar) != 0
                  || *(*ptr_to_globals).dot as libc::c_int == '_' as i32
                {
                  (*ptr_to_globals).dot = skip_thing(
                    (*ptr_to_globals).dot,
                    1i32,
                    FORWARD as libc::c_int,
                    S_END_ALNUM as libc::c_int,
                  )
                } else if *strchrnul(
                  b"!\"#$%&\'()*+,-./:;<=>?@[\\]^_`{|}~\x00" as *const u8 as *const libc::c_char,
                  *(*ptr_to_globals).dot as libc::c_int,
                )
                .offset(0)
                  != 0
                {
                  (*ptr_to_globals).dot = skip_thing(
                    (*ptr_to_globals).dot,
                    1i32,
                    FORWARD as libc::c_int,
                    S_END_PUNCT as libc::c_int,
                  )
                }
                if (*ptr_to_globals).dot < (*ptr_to_globals).end.offset(-1) {
                  (*ptr_to_globals).dot = (*ptr_to_globals).dot.offset(1)
                }
                if ({
                  let mut bb__isspace: libc::c_uchar =
                    (*(*ptr_to_globals).dot as libc::c_int - 9i32) as libc::c_uchar;
                  (bb__isspace as libc::c_int == ' ' as i32 - 9i32
                    || bb__isspace as libc::c_int <= 13i32 - 9i32) as libc::c_int
                }) != 0
                {
                  (*ptr_to_globals).dot = skip_thing(
                    (*ptr_to_globals).dot,
                    2i32,
                    FORWARD as libc::c_int,
                    S_OVER_WS as libc::c_int,
                  )
                }
                (*ptr_to_globals).cmdcnt -= 1;
                if !((*ptr_to_globals).cmdcnt > 0) {
                  break;
                }
              }
              current_block = 15129665204879337069;
            }
            4386451087681909888 => {
              (*ptr_to_globals).dot =
                move_to_col((*ptr_to_globals).dot, (*ptr_to_globals).cmdcnt - 1i32);
              current_block = 15129665204879337069;
            }
            1296397779060594135 => {
              dot_begin();
              current_block = 15129665204879337069;
            }
            _ => {}
          }
          match current_block {
            15129665204879337069 => {}
            8629930936610358348 => {}
            _ => {
              match current_block {
                17251831742223396249 => {
                  dir = 0;
                  if c == 'X' as i32 {
                    dir = -1i32
                  }
                  loop {
                    if *(*ptr_to_globals).dot.offset(dir as isize) as libc::c_int != '\n' as i32 {
                      if c == 'X' as i32 {
                        (*ptr_to_globals).dot = (*ptr_to_globals).dot.offset(-1)
                      }
                      (*ptr_to_globals).dot = yank_delete(
                        (*ptr_to_globals).dot,
                        (*ptr_to_globals).dot,
                        0,
                        YANKDEL as libc::c_int,
                        1i32,
                      )
                    }
                    (*ptr_to_globals).cmdcnt -= 1;
                    if !((*ptr_to_globals).cmdcnt > 0) {
                      break;
                    }
                  }
                  end_cmd_q();
                  if c == 's' as i32 {
                    current_block = 8629930936610358348;
                  } else {
                    current_block = 15129665204879337069;
                  }
                }
                2087484904894455135 => {
                  dot_end();
                  (*ptr_to_globals).dot =
                    char_insert((*ptr_to_globals).dot, '\n' as i32 as libc::c_char, 1i32);
                  current_block = 8629930936610358348;
                }
                11945623545738147997 => {
                  (*ptr_to_globals).dot = (*ptr_to_globals).end.offset(-1);
                  if (*ptr_to_globals).cmdcnt > 0 {
                    (*ptr_to_globals).dot = find_line((*ptr_to_globals).cmdcnt)
                  }
                  dot_skip_over_ws();
                  current_block = 15129665204879337069;
                }
                5847749760081351726 => {
                  dir = FORWARD as libc::c_int;
                  if c == 'B' as i32 {
                    dir = BACK as libc::c_int
                  }
                  loop {
                    if c == 'W' as i32
                      || ({
                        let mut bb__isspace: libc::c_uchar =
                          (*(*ptr_to_globals).dot.offset(dir as isize) as libc::c_int - 9i32)
                            as libc::c_uchar;
                        (bb__isspace as libc::c_int == ' ' as i32 - 9i32
                          || bb__isspace as libc::c_int <= 13i32 - 9i32)
                          as libc::c_int
                      }) != 0
                    {
                      (*ptr_to_globals).dot =
                        skip_thing((*ptr_to_globals).dot, 1i32, dir, S_TO_WS as libc::c_int);
                      (*ptr_to_globals).dot =
                        skip_thing((*ptr_to_globals).dot, 2i32, dir, S_OVER_WS as libc::c_int)
                    }
                    if c != 'W' as i32 {
                      (*ptr_to_globals).dot =
                        skip_thing((*ptr_to_globals).dot, 1i32, dir, S_BEFORE_WS as libc::c_int)
                    }
                    (*ptr_to_globals).cmdcnt -= 1;
                    if !((*ptr_to_globals).cmdcnt > 0) {
                      break;
                    }
                  }
                  current_block = 15129665204879337069;
                }
                17440971994642376514 => {
                  current_block = 15129665204879337069;
                }
                7534742345255184552 => {
                  current_block = 17247297260531395789;
                }
                8800996768013373992 => {
                  loop {
                    dot_next();
                    (*ptr_to_globals).dot = move_to_col(
                      (*ptr_to_globals).dot,
                      (*ptr_to_globals).ccol + (*ptr_to_globals).offset,
                    );
                    (*ptr_to_globals).cmdcnt -= 1;
                    if !((*ptr_to_globals).cmdcnt > 0) {
                      break;
                    }
                  }
                  current_block = 15129665204879337069;
                }
                13993698454868426881 => {
                  loop {
                    dot_right();
                    (*ptr_to_globals).cmdcnt -= 1;
                    if !((*ptr_to_globals).cmdcnt > 0) {
                      break;
                    }
                  }
                  current_block = 15129665204879337069;
                }
                7856905509180742666 => {
                  while !((*ptr_to_globals).last_forward_char == 0) {
                    q = (*ptr_to_globals).dot.offset(1);
                    while q < (*ptr_to_globals).end.offset(-1)
                      && *q as libc::c_int != '\n' as i32
                      && *q as libc::c_int != (*ptr_to_globals).last_forward_char
                    {
                      q = q.offset(1)
                    }
                    if *q as libc::c_int == (*ptr_to_globals).last_forward_char {
                      (*ptr_to_globals).dot = q
                    }
                    (*ptr_to_globals).cmdcnt -= 1;
                    if !((*ptr_to_globals).cmdcnt > 0) {
                      break;
                    }
                  }
                  current_block = 15129665204879337069;
                }
                17498168302144015873 => {
                  current_block = 8681395796513813967;
                }
                1752638907092016026 => {
                  if *(*ptr_to_globals).dot as libc::c_int != '\n' as i32 {
                    (*ptr_to_globals).dot = (*ptr_to_globals).dot.offset(1)
                  }
                  current_block = 8629930936610358348;
                }
                3268579060917229304 => {
                  current_block = 8629930936610358348;
                }
                1895262434596074581 => {
                  current_block = 8908416993177701018;
                }
                _ => {}
              }
              match current_block {
                8629930936610358348 => {}
                15129665204879337069 => {}
                _ => {
                  match current_block {
                    17247297260531395789 => {
                      loop {
                        dot_left();
                        (*ptr_to_globals).cmdcnt -= 1;
                        if !((*ptr_to_globals).cmdcnt > 0) {
                          break;
                        }
                      }
                      current_block = 15129665204879337069;
                    }
                    8681395796513813967 => {
                      current_block = 5591548203144509315;
                    }
                    8908416993177701018 => {
                      current_block = 16124761010012532485;
                    }
                    _ => {}
                  }
                  match current_block {
                    15129665204879337069 => {}
                    _ => {
                      match current_block {
                        16124761010012532485 => {
                          let mut yf: libc::c_int = 0;
                          let mut ml: libc::c_int = 0;
                          let mut whole: libc::c_int = 0;
                          yf = YANKDEL as libc::c_int;
                          if c == 'y' as i32 || c == 'Y' as i32 {
                            yf = YANKONLY as libc::c_int
                          }
                          c1 = 'y' as i32;
                          if c != 'Y' as i32 {
                            c1 = get_one_char()
                          }
                          ml = find_range(&mut p, &mut q, c1 as libc::c_char);
                          place_cursor(0i32, 0);
                          if c1 == 27i32 {
                            c1 = 27i32;
                            c = c1
                          } else if !strchr(b"wW\x00" as *const u8 as *const libc::c_char, c1)
                            .is_null()
                          {
                            ml = 0;
                            if c == 'c' as i32 {
                              while ({
                                let mut bb__isspace: libc::c_uchar =
                                  (*q as libc::c_int - 9i32) as libc::c_uchar;
                                (bb__isspace as libc::c_int == ' ' as i32 - 9i32
                                  || bb__isspace as libc::c_int <= 13i32 - 9i32)
                                  as libc::c_int
                              }) != 0
                                && q > p
                              {
                                q = q.offset(-1)
                              }
                            }
                            (*ptr_to_globals).dot = yank_delete(p, q, ml, yf, 1i32)
                          } else if !strchr(
                            b"^0bBeEft%$ lh\x08\x7f\x00" as *const u8 as *const libc::c_char,
                            c1,
                          )
                          .is_null()
                          {
                            (*ptr_to_globals).dot = yank_delete(p, q, ml, yf, 1i32)
                          } else if !strchr(
                            b"cdykjGHL+-{}\r\n\x00" as *const u8 as *const libc::c_char,
                            c1,
                          )
                          .is_null()
                          {
                            (*ptr_to_globals).dot = yank_delete(p, q, ml, yf, 1i32);
                            whole = 1i32
                          } else {
                            c1 = 27i32;
                            c = c1;
                            ml = 0;
                            indicate_error();
                          }
                          if ml != 0 && whole != 0 {
                            if c == 'c' as i32 {
                              (*ptr_to_globals).dot = char_insert(
                                (*ptr_to_globals).dot,
                                '\n' as i32 as libc::c_char,
                                2i32,
                              );
                              if whole != 0
                                && (*ptr_to_globals).dot != (*ptr_to_globals).end.offset(-1)
                              {
                                dot_prev();
                              }
                            } else if c == 'd' as i32 {
                              dot_begin();
                              dot_skip_over_ws();
                            }
                          }
                          if c1 != 27i32 {
                            if c == 'c' as i32 {
                              strcpy(
                                buf.as_mut_ptr(),
                                b"Change\x00" as *const u8 as *const libc::c_char,
                              );
                              current_block = 8629930936610358348;
                            } else {
                              if c == 'd' as i32 {
                                strcpy(
                                  buf.as_mut_ptr(),
                                  b"Delete\x00" as *const u8 as *const libc::c_char,
                                );
                              }
                              if c == 'y' as i32 || c == 'Y' as i32 {
                                strcpy(
                                  buf.as_mut_ptr(),
                                  b"Yank\x00" as *const u8 as *const libc::c_char,
                                );
                              }
                              p = (*ptr_to_globals).reg[(*ptr_to_globals).YDreg as usize];
                              q = p.offset(strlen(p) as isize);
                              cnt = 0;
                              while p <= q {
                                if *p as libc::c_int == '\n' as i32 {
                                  cnt += 1
                                }
                                p = p.offset(1)
                              }
                              status_line(
                                b"%s %u lines (%u chars) using [%c]\x00" as *const u8
                                  as *const libc::c_char,
                                buf.as_mut_ptr(),
                                cnt,
                                strlen((*ptr_to_globals).reg[(*ptr_to_globals).YDreg as usize])
                                  as libc::c_uint,
                                what_reg() as libc::c_int,
                              );
                              end_cmd_q();
                              current_block = 15129665204879337069;
                            }
                          } else {
                            current_block = 15129665204879337069;
                          }
                        }
                        5591548203144509315 => {
                          current_block = 2636677179867529885;
                        }
                        _ => {}
                      }
                      match current_block {
                        15129665204879337069 => {}
                        8629930936610358348 => {}
                        _ => {
                          match current_block {
                            2636677179867529885 => {
                              current_block = 12309206730560524281;
                            }
                            _ => {}
                          }
                          match current_block {
                            12309206730560524281 => {
                              current_block = 3325768110057758661;
                            }
                            _ => {}
                          }
                          match current_block {
                            3325768110057758661 => {
                              current_block = 14815832896553429982;
                            }
                            _ => {}
                          }
                          match current_block {
                            14815832896553429982 => {
                              current_block = 10731695520297161438;
                            }
                            _ => {}
                          }
                          match current_block {
                            10731695520297161438 => {
                              if c == '0' as i32 && (*ptr_to_globals).cmdcnt < 1i32 {
                                dot_begin();
                              } else {
                                (*ptr_to_globals).cmdcnt =
                                  (*ptr_to_globals).cmdcnt * 10i32 + (c - '0' as i32)
                              }
                              current_block = 15129665204879337069;
                            }
                            _ => {}
                          }
                          match current_block {
                            15129665204879337069 => {}
                            _ => {
                              loop {
                                match current_block {
                                  16813369756331276724 => {
                                    msg = std::ptr::null();
                                    current_block = 7392824444931029276;
                                  }
                                  7392824444931029276 => {
                                    dir = FORWARD as libc::c_int;
                                    p = (*ptr_to_globals).dot.offset(1);
                                    if *(*ptr_to_globals).last_search_pattern.offset(0)
                                      as libc::c_int
                                      == '?' as i32
                                    {
                                      dir = BACK as libc::c_int;
                                      p = (*ptr_to_globals).dot.offset(-1)
                                    }
                                    current_block = 4166979493554389389;
                                  }
                                  _ => {
                                    q = char_search(
                                      p,
                                      (*ptr_to_globals).last_search_pattern.offset(1),
                                      dir << 1i32 | FULL as libc::c_int,
                                    );
                                    if !q.is_null() {
                                      (*ptr_to_globals).dot = q;
                                      msg = std::ptr::null()
                                    } else {
                                      p = (*ptr_to_globals).text;
                                      if dir == BACK as libc::c_int {
                                        p = (*ptr_to_globals).end.offset(-1)
                                      }
                                      q = char_search(
                                        p,
                                        (*ptr_to_globals).last_search_pattern.offset(1),
                                        dir << 1i32 | FULL as libc::c_int,
                                      );
                                      if !q.is_null() {
                                        (*ptr_to_globals).dot = q;
                                        msg = b"search hit BOTTOM, continuing at TOP\x00"
                                          as *const u8
                                          as *const libc::c_char;
                                        if dir == BACK as libc::c_int {
                                          msg = b"search hit TOP, continuing at BOTTOM\x00"
                                            as *const u8
                                            as *const libc::c_char
                                        }
                                      } else {
                                        msg = b"Pattern not found\x00" as *const u8
                                          as *const libc::c_char
                                      }
                                    }
                                    if !msg.is_null() {
                                      status_line_bold(
                                        b"%s\x00" as *const u8 as *const libc::c_char,
                                        msg,
                                      );
                                    }
                                    (*ptr_to_globals).cmdcnt -= 1;
                                    if (*ptr_to_globals).cmdcnt > 0 {
                                      current_block = 16813369756331276724;
                                    } else {
                                      break;
                                    }
                                  }
                                }
                              }
                              current_block = 15129665204879337069;
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
        110 => {
          current_block = 16813369756331276724;
          match current_block {
            16992905640583886232 => {
              loop {
                if (*(*ptr_to_globals).dot as libc::c_int - 'a' as i32) as libc::c_uchar
                  as libc::c_int
                  <= 'z' as i32 - 'a' as i32
                {
                  undo_push(
                    (*ptr_to_globals).dot,
                    1i32 as libc::c_uint,
                    1i32 as libc::c_uchar,
                  );
                  *(*ptr_to_globals).dot =
                    bb_ascii_toupper(*(*ptr_to_globals).dot as libc::c_uchar) as libc::c_char;
                  undo_push(
                    (*ptr_to_globals).dot,
                    1i32 as libc::c_uint,
                    2i32 as libc::c_uchar,
                  );
                } else if (*(*ptr_to_globals).dot as libc::c_int - 'A' as i32) as libc::c_uchar
                  as libc::c_int
                  <= 'Z' as i32 - 'A' as i32
                {
                  undo_push(
                    (*ptr_to_globals).dot,
                    1i32 as libc::c_uint,
                    1i32 as libc::c_uchar,
                  );
                  *(*ptr_to_globals).dot =
                    bb_ascii_tolower(*(*ptr_to_globals).dot as libc::c_uchar) as libc::c_char;
                  undo_push(
                    (*ptr_to_globals).dot,
                    1i32 as libc::c_uint,
                    2i32 as libc::c_uchar,
                  );
                }
                dot_right();
                (*ptr_to_globals).cmdcnt -= 1;
                if !((*ptr_to_globals).cmdcnt > 0) {
                  break;
                }
              }
              end_cmd_q();
              current_block = 15129665204879337069;
            }
            8729655159604064397 => {
              c1 = get_one_char();
              cnt = 0;
              if c1 == '.' as i32 {
                cnt = (*ptr_to_globals)
                  .rows
                  .wrapping_sub(2i32 as libc::c_uint)
                  .wrapping_div(2i32 as libc::c_uint) as libc::c_int
              }
              if c1 == '-' as i32 {
                cnt = (*ptr_to_globals).rows.wrapping_sub(2i32 as libc::c_uint) as libc::c_int
              }
              (*ptr_to_globals).screenbegin = begin_line((*ptr_to_globals).dot);
              dot_scroll(cnt, -1i32);
              current_block = 15129665204879337069;
            }
            15899500648299942075 => {
              (*ptr_to_globals).last_forward_char = get_one_char();
              do_cmd(';' as i32);
              if *(*ptr_to_globals).dot as libc::c_int == (*ptr_to_globals).last_forward_char {
                dot_left();
              }
              (*ptr_to_globals).last_forward_char = 0;
              current_block = 15129665204879337069;
            }
            9051390181078481641 => {
              c1 = get_one_char();
              if *(*ptr_to_globals).dot as libc::c_int != '\n' as i32 {
                (*ptr_to_globals).dot =
                  text_hole_delete((*ptr_to_globals).dot, (*ptr_to_globals).dot, 1i32);
                (*ptr_to_globals).dot =
                  char_insert((*ptr_to_globals).dot, c1 as libc::c_char, 2i32);
                dot_left();
              }
              end_cmd_q();
              current_block = 15129665204879337069;
            }
            877115918601926659 => {
              dir = FORWARD as libc::c_int;
              if c == 'b' as i32 {
                dir = BACK as libc::c_int
              }
              while !((*ptr_to_globals).dot.offset(dir as isize) < (*ptr_to_globals).text
                || (*ptr_to_globals).dot.offset(dir as isize) > (*ptr_to_globals).end.offset(-1))
              {
                (*ptr_to_globals).dot = (*ptr_to_globals).dot.offset(dir as isize);
                if ({
                  let mut bb__isspace: libc::c_uchar =
                    (*(*ptr_to_globals).dot as libc::c_int - 9i32) as libc::c_uchar;
                  (bb__isspace as libc::c_int == ' ' as i32 - 9i32
                    || bb__isspace as libc::c_int <= 13i32 - 9i32) as libc::c_int
                }) != 0
                {
                  (*ptr_to_globals).dot = skip_thing(
                    (*ptr_to_globals).dot,
                    if c == 'e' as i32 { 2i32 } else { 1i32 },
                    dir,
                    S_OVER_WS as libc::c_int,
                  )
                }
                if bb_ascii_isalnum(*(*ptr_to_globals).dot as libc::c_uchar) != 0
                  || *(*ptr_to_globals).dot as libc::c_int == '_' as i32
                {
                  (*ptr_to_globals).dot =
                    skip_thing((*ptr_to_globals).dot, 1i32, dir, S_END_ALNUM as libc::c_int)
                } else if *strchrnul(
                  b"!\"#$%&\'()*+,-./:;<=>?@[\\]^_`{|}~\x00" as *const u8 as *const libc::c_char,
                  *(*ptr_to_globals).dot as libc::c_int,
                )
                .offset(0)
                  != 0
                {
                  (*ptr_to_globals).dot =
                    skip_thing((*ptr_to_globals).dot, 1i32, dir, S_END_PUNCT as libc::c_int)
                }
                (*ptr_to_globals).cmdcnt -= 1;
                if !((*ptr_to_globals).cmdcnt > 0) {
                  break;
                }
              }
              current_block = 15129665204879337069;
            }
            1085022737867179637 => {
              dot_begin();
              dot_skip_over_ws();
              current_block = 15129665204879337069;
            }
            3113147720494587438 => {
              c1 = get_one_char();
              if c1 != 'Z' as i32 {
                indicate_error();
              } else if (*ptr_to_globals).modified_count != 0 {
                if 1i32 != 0 && (*ptr_to_globals).readonly_mode as libc::c_int != 0 {
                  status_line_bold(
                    b"\'%s\' is read only\x00" as *const u8 as *const libc::c_char,
                    (*ptr_to_globals).current_filename,
                  );
                } else {
                  cnt = file_write(
                    (*ptr_to_globals).current_filename,
                    (*ptr_to_globals).text,
                    (*ptr_to_globals).end.offset(-1),
                  );
                  if cnt < 0 {
                    if cnt == -1i32 {
                      status_line_bold(b"Write error: %m\x00" as *const u8 as *const libc::c_char);
                    }
                  } else if cnt as libc::c_long
                    == (*ptr_to_globals)
                      .end
                      .offset(-1)
                      .wrapping_offset_from((*ptr_to_globals).text)
                      as libc::c_long
                      + 1
                  {
                    (*ptr_to_globals).editing = 0 as smallint
                  }
                }
              } else {
                (*ptr_to_globals).editing = 0 as smallint
              }
              current_block = 15129665204879337069;
            }
            12960118908218882441 => {
              p = begin_line((*ptr_to_globals).dot);
              if *p.offset(-1i32 as isize) as libc::c_int == '\n' as i32 {
                dot_prev();
                current_block = 2087484904894455135;
              } else {
                dot_begin();
                (*ptr_to_globals).dot =
                  char_insert((*ptr_to_globals).dot, '\n' as i32 as libc::c_char, 1i32);
                dot_prev();
                current_block = 8629930936610358348;
              }
            }
            8720450212473544924 => {
              (*ptr_to_globals).dot = (*ptr_to_globals).screenbegin;
              cnt = 0;
              while (cnt as libc::c_uint)
                < (*ptr_to_globals)
                  .rows
                  .wrapping_sub(1i32 as libc::c_uint)
                  .wrapping_div(2i32 as libc::c_uint)
              {
                (*ptr_to_globals).dot = next_line((*ptr_to_globals).dot);
                cnt += 1
              }
              current_block = 15129665204879337069;
            }
            13015277209715431090 => {
              (*ptr_to_globals).dot = end_screen();
              if (*ptr_to_globals).cmdcnt as libc::c_uint
                > (*ptr_to_globals).rows.wrapping_sub(1i32 as libc::c_uint)
              {
                (*ptr_to_globals).cmdcnt =
                  (*ptr_to_globals).rows.wrapping_sub(1i32 as libc::c_uint) as libc::c_int
              }
              (*ptr_to_globals).cmdcnt -= 1;
              if (*ptr_to_globals).cmdcnt > 0 {
                do_cmd('-' as i32);
              }
              dot_begin();
              dot_skip_over_ws();
              current_block = 15129665204879337069;
            }
            9800435767766781385 => {
              loop {
                dot_end();
                if (*ptr_to_globals).dot < (*ptr_to_globals).end.offset(-1) {
                  undo_push(
                    (*ptr_to_globals).dot,
                    1i32 as libc::c_uint,
                    1i32 as libc::c_uchar,
                  );
                  let fresh15 = (*ptr_to_globals).dot;
                  (*ptr_to_globals).dot = (*ptr_to_globals).dot.offset(1);
                  *fresh15 = ' ' as i32 as libc::c_char;
                  undo_push(
                    (*ptr_to_globals).dot.offset(-1),
                    1i32 as libc::c_uint,
                    2i32 as libc::c_uchar,
                  );
                  while ({
                    let mut bb__isblank: libc::c_uchar = *(*ptr_to_globals).dot as libc::c_uchar;
                    (bb__isblank as libc::c_int == ' ' as i32
                      || bb__isblank as libc::c_int == '\t' as i32)
                      as libc::c_int
                  }) != 0
                  {
                    text_hole_delete((*ptr_to_globals).dot, (*ptr_to_globals).dot, 2i32);
                  }
                }
                (*ptr_to_globals).cmdcnt -= 1;
                if !((*ptr_to_globals).cmdcnt > 0) {
                  break;
                }
              }
              end_cmd_q();
              current_block = 15129665204879337069;
            }
            3432363526595694666 => {
              dot_begin();
              dot_skip_over_ws();
              current_block = 3268579060917229304;
            }
            3494829253343353619 => {
              (*ptr_to_globals).dot = (*ptr_to_globals).screenbegin;
              if (*ptr_to_globals).cmdcnt as libc::c_uint
                > (*ptr_to_globals).rows.wrapping_sub(1i32 as libc::c_uint)
              {
                (*ptr_to_globals).cmdcnt =
                  (*ptr_to_globals).rows.wrapping_sub(1i32 as libc::c_uint) as libc::c_int
              }
              (*ptr_to_globals).cmdcnt -= 1;
              if (*ptr_to_globals).cmdcnt > 0 {
                do_cmd('+' as i32);
              }
              dot_skip_over_ws();
              current_block = 15129665204879337069;
            }
            17973101765331640574 => {
              c1 = get_one_char();
              if c1 != 'g' as i32 {
                buf[0] = 'g' as i32 as libc::c_char;
                buf[1] = if c1 >= 0 { c1 } else { '*' as i32 } as libc::c_char;
                buf[2] = '\u{0}' as i32 as libc::c_char;
                not_implemented(buf.as_mut_ptr());
                current_block = 15129665204879337069;
              } else {
                if (*ptr_to_globals).cmdcnt == 0 {
                  (*ptr_to_globals).cmdcnt = 1i32
                }
                current_block = 11945623545738147997;
              }
            }
            16546625800574160972 => {
              save_dot = (*ptr_to_globals).dot;
              (*ptr_to_globals).dot = dollar_line((*ptr_to_globals).dot);
              (*ptr_to_globals).dot = yank_delete(
                save_dot,
                (*ptr_to_globals).dot,
                0,
                YANKDEL as libc::c_int,
                1i32,
              );
              if c == 'C' as i32 {
                current_block = 8629930936610358348;
              } else {
                if c == 'D' as i32 {
                  end_cmd_q();
                }
                current_block = 15129665204879337069;
              }
            }
            11937696639986586685 => {
              cnt = count_lines((*ptr_to_globals).text, (*ptr_to_globals).dot);
              c1 = get_one_char();
              find_range(&mut p, &mut q, c1 as libc::c_char);
              yank_delete(p, q, 1i32, YANKONLY as libc::c_int, 0);
              p = begin_line(p);
              q = end_line(q);
              i = count_lines(p, q);
              while i > 0 {
                if c == '<' as i32 {
                  if *p as libc::c_int == '\t' as i32 {
                    text_hole_delete(p, p, 0);
                  } else if *p as libc::c_int == ' ' as i32 {
                    j = 0;
                    while *p as libc::c_int == ' ' as i32 && j < (*ptr_to_globals).tabstop {
                      text_hole_delete(p, p, 0);
                      j += 1
                    }
                  }
                } else if c == '>' as i32 {
                  char_insert(p, '\t' as i32 as libc::c_char, 1i32);
                }
                i -= 1;
                p = next_line(p)
              }
              (*ptr_to_globals).dot = find_line(cnt);
              dot_skip_over_ws();
              end_cmd_q();
              current_block = 15129665204879337069;
            }
            17725350714912028156 => {
              p = get_input_line(b":\x00" as *const u8 as *const libc::c_char);
              colon(p);
              current_block = 15129665204879337069;
            }
            14526470074083880812 => {
              q = char_search(
                (*ptr_to_globals).dot,
                b"\n\n\x00" as *const u8 as *const libc::c_char,
                (FORWARD as libc::c_int) << 1i32 | FULL as libc::c_int,
              );
              if !q.is_null() {
                (*ptr_to_globals).dot = next_line(q)
              }
              current_block = 15129665204879337069;
            }
            8893187391306414141 => {
              q = char_search(
                (*ptr_to_globals).dot,
                b"\n\n\x00" as *const u8 as *const libc::c_char,
                ((BACK as libc::c_int as libc::c_uint) << 1i32
                  | FULL as libc::c_int as libc::c_uint) as libc::c_int,
              );
              if !q.is_null() {
                (*ptr_to_globals).dot = next_line(q)
              }
              current_block = 15129665204879337069;
            }
            7021673758293221412 => {
              dir = BACK as libc::c_int;
              p = (*ptr_to_globals).dot.offset(-1);
              if *(*ptr_to_globals).last_search_pattern.offset(0) as libc::c_int == '?' as i32 {
                dir = FORWARD as libc::c_int;
                p = (*ptr_to_globals).dot.offset(1)
              }
              current_block = 4166979493554389389;
            }
            18374191879090272823 => {
              buf[0] = c as libc::c_char;
              buf[1] = '\u{0}' as i32 as libc::c_char;
              q = get_input_line(buf.as_mut_ptr());
              if *q.offset(0) as libc::c_int != 0 && *q.offset(1) == 0 {
                if *(*ptr_to_globals).last_search_pattern.offset(0) != 0 {
                  *(*ptr_to_globals).last_search_pattern.offset(0) = c as libc::c_char
                }
                current_block = 7392824444931029276;
              } else if *q.offset(0) != 0 {
                free((*ptr_to_globals).last_search_pattern as *mut libc::c_void);
                (*ptr_to_globals).last_search_pattern = crate::libbb::xfuncs_printf::xstrdup(q);
                current_block = 7392824444931029276;
              } else {
                current_block = 15129665204879337069;
              }
            }
            16407828456666301883 => {
              if (*ptr_to_globals).last_forward_char == 0 {
                current_block = 15129665204879337069;
              } else {
                loop {
                  q = (*ptr_to_globals).dot.offset(-1);
                  while q >= (*ptr_to_globals).text
                    && *q as libc::c_int != '\n' as i32
                    && *q as libc::c_int != (*ptr_to_globals).last_forward_char
                  {
                    q = q.offset(-1)
                  }
                  if q >= (*ptr_to_globals).text
                    && *q as libc::c_int == (*ptr_to_globals).last_forward_char
                  {
                    (*ptr_to_globals).dot = q
                  }
                  (*ptr_to_globals).cmdcnt -= 1;
                  if !((*ptr_to_globals).cmdcnt > 0) {
                    break;
                  }
                }
                current_block = 15129665204879337069;
              }
            }
            9018432604062702004 => {
              q = (*ptr_to_globals).dot;
              while q < (*ptr_to_globals).end && *q as libc::c_int != '\n' as i32 {
                if !strchr(
                  b"()[]{}\x00" as *const u8 as *const libc::c_char,
                  *q as libc::c_int,
                )
                .is_null()
                {
                  p = find_pair(q, *q);
                  if p.is_null() {
                    indicate_error();
                  } else {
                    (*ptr_to_globals).dot = p
                  }
                  break;
                } else {
                  q = q.offset(1)
                }
              }
              if *q as libc::c_int == '\n' as i32 {
                indicate_error();
              }
              current_block = 15129665204879337069;
            }
            10247103787464459848 => {
              p = (*ptr_to_globals).reg[(*ptr_to_globals).YDreg as usize];
              if p.is_null() {
                status_line_bold(
                  b"Nothing in register %c\x00" as *const u8 as *const libc::c_char,
                  what_reg() as libc::c_int,
                );
              } else {
                if !strchr(p, '\n' as i32).is_null() {
                  if c == 'P' as i32 {
                    dot_begin();
                  }
                  if c == 'p' as i32 {
                    if end_line((*ptr_to_globals).dot) == (*ptr_to_globals).end.offset(-1) {
                      (*ptr_to_globals).dot = (*ptr_to_globals).end
                    } else {
                      dot_next();
                    }
                  }
                } else if c == 'p' as i32 {
                  dot_right();
                }
                string_insert((*ptr_to_globals).dot, p, 1i32);
                end_cmd_q();
              }
              current_block = 15129665204879337069;
            }
            15260732871948875843 => {
              c1 = (get_one_char() | 0x20i32) - 'a' as i32;
              if c1 as libc::c_uint <= 25i32 as libc::c_uint {
                (*ptr_to_globals).mark[c1 as usize] = (*ptr_to_globals).dot
              } else {
                indicate_error();
              }
              current_block = 15129665204879337069;
            }
            12738322036487086035 => {
              c1 = get_one_char() | 0x20i32;
              if (c1 - 'a' as i32) as libc::c_uint <= 25i32 as libc::c_uint {
                c1 = c1 - 'a' as i32;
                q = (*ptr_to_globals).mark[c1 as usize];
                if (*ptr_to_globals).text <= q && q < (*ptr_to_globals).end {
                  (*ptr_to_globals).dot = q;
                  dot_begin();
                  dot_skip_over_ws();
                }
              } else if c1 == '\'' as i32 {
                (*ptr_to_globals).dot = swap_context((*ptr_to_globals).dot);
                dot_begin();
                dot_skip_over_ws();
              } else {
                indicate_error();
              }
              current_block = 15129665204879337069;
            }
            13255096073384561358 => {
              c1 = (get_one_char() | 0x20i32) - 'a' as i32;
              if c1 as libc::c_uint <= 25i32 as libc::c_uint {
                (*ptr_to_globals).YDreg = c1 as smalluint
              } else {
                indicate_error();
              }
              current_block = 15129665204879337069;
            }
            10258711639984089377 => {
              if (*ptr_to_globals).cmd_mode as libc::c_int == 0 {
                indicate_error();
              }
              (*ptr_to_globals).cmd_mode = 0 as smallint;
              undo_queue_commit();
              end_cmd_q();
              (*ptr_to_globals).last_status_cksum = 0;
              current_block = 15129665204879337069;
            }
            11439127087547047736 => {
              buf[0] = c as libc::c_char;
              buf[1] = '\u{0}' as i32 as libc::c_char;
              not_implemented(buf.as_mut_ptr());
              end_cmd_q();
              current_block = 17440971994642376514;
            }
            7961798899781870241 => {
              dot_scroll(
                (*ptr_to_globals).rows.wrapping_sub(2i32 as libc::c_uint) as libc::c_int,
                -1i32,
              );
              current_block = 15129665204879337069;
            }
            9426343755402444879 => {
              dot_scroll(
                (*ptr_to_globals)
                  .rows
                  .wrapping_sub(2i32 as libc::c_uint)
                  .wrapping_div(2i32 as libc::c_uint) as libc::c_int,
                1i32,
              );
              current_block = 15129665204879337069;
            }
            13352459794680105913 => {
              dot_scroll(1i32, 1i32);
              current_block = 15129665204879337069;
            }
            14142272253464333006 => {
              dot_scroll(
                (*ptr_to_globals).rows.wrapping_sub(2i32 as libc::c_uint) as libc::c_int,
                1i32,
              );
              current_block = 15129665204879337069;
            }
            10758177197742640066 => {
              (*ptr_to_globals).last_status_cksum = 0;
              current_block = 15129665204879337069;
            }
            6152256259730122749 => {
              current_block = 7534742345255184552;
            }
            12883932598258173301 => {
              current_block = 8800996768013373992;
            }
            11242998110520238401 => {
              redraw(1i32);
              current_block = 15129665204879337069;
            }
            13619733043935729992 => {
              loop {
                dot_next();
                dot_skip_over_ws();
                (*ptr_to_globals).cmdcnt -= 1;
                if !((*ptr_to_globals).cmdcnt > 0) {
                  break;
                }
              }
              current_block = 15129665204879337069;
            }
            9339065157412720613 => {
              dot_scroll(
                (*ptr_to_globals)
                  .rows
                  .wrapping_sub(2i32 as libc::c_uint)
                  .wrapping_div(2i32 as libc::c_uint) as libc::c_int,
                -1i32,
              );
              current_block = 15129665204879337069;
            }
            11447082683497798022 => {
              dot_scroll(1i32, -1i32);
              current_block = 15129665204879337069;
            }
            5182000506326660482 => {
              current_block = 13993698454868426881;
            }
            1105010766850597332 => {
              if !(*ptr_to_globals).reg[27].is_null() {
                p = begin_line((*ptr_to_globals).dot);
                q = end_line((*ptr_to_globals).dot);
                p = text_hole_delete(p, q, 1i32);
                p = p.offset(string_insert(p, (*ptr_to_globals).reg[27], 2i32) as isize);
                (*ptr_to_globals).dot = p;
                dot_skip_over_ws();
              }
              current_block = 15129665204879337069;
            }
            8616046655533110204 => {
              undo_pop();
              current_block = 15129665204879337069;
            }
            5127767458142431603 => {
              loop {
                (*ptr_to_globals).dot = end_line((*ptr_to_globals).dot);
                (*ptr_to_globals).cmdcnt -= 1;
                if (*ptr_to_globals).cmdcnt <= 0 {
                  break;
                }
                dot_next();
              }
              current_block = 15129665204879337069;
            }
            222014967776118151 => {
              (*ptr_to_globals).last_forward_char = get_one_char();
              current_block = 7856905509180742666;
            }
            11209792479411604110 => {
              loop {
                dot_prev();
                dot_skip_over_ws();
                (*ptr_to_globals).cmdcnt -= 1;
                if !((*ptr_to_globals).cmdcnt > 0) {
                  break;
                }
              }
              current_block = 15129665204879337069;
            }
            3364823792826654116 => {
              if (*ptr_to_globals).lmc_len != 0 {
                (*ptr_to_globals).ioq_start = crate::libbb::xfuncs_printf::xstrndup(
                  (*ptr_to_globals).last_modifying_cmd.as_mut_ptr(),
                  (*ptr_to_globals).lmc_len,
                );
                (*ptr_to_globals).ioq = (*ptr_to_globals).ioq_start
              }
              current_block = 15129665204879337069;
            }
            18096603330221575131 => {
              current_block = 17498168302144015873;
            }
            16891123271837848903 => {
              dot_end();
              current_block = 1752638907092016026;
            }
            8517235759107662071 => {
              current_block = 5847749760081351726;
            }
            12525254419223051704 => {
              if (*ptr_to_globals).dot < (*ptr_to_globals).end.offset(-1) {
                (*ptr_to_globals).dot = yank_delete(
                  (*ptr_to_globals).dot,
                  (*ptr_to_globals).dot,
                  1i32,
                  YANKDEL as libc::c_int,
                  1i32,
                )
              }
              current_block = 15129665204879337069;
            }
            15232911949322867522 => {
              current_block = 17251831742223396249;
            }
            10863374208794025069 => {
              current_block = 1895262434596074581;
            }
            451126677064669119 => {
              loop {
                dot_prev();
                (*ptr_to_globals).dot = move_to_col(
                  (*ptr_to_globals).dot,
                  (*ptr_to_globals).ccol + (*ptr_to_globals).offset,
                );
                (*ptr_to_globals).cmdcnt -= 1;
                if !((*ptr_to_globals).cmdcnt > 0) {
                  break;
                }
              }
              current_block = 15129665204879337069;
            }
            4611735929166613116 => {
              loop {
                if bb_ascii_isalnum(*(*ptr_to_globals).dot as libc::c_uchar) != 0
                  || *(*ptr_to_globals).dot as libc::c_int == '_' as i32
                {
                  (*ptr_to_globals).dot = skip_thing(
                    (*ptr_to_globals).dot,
                    1i32,
                    FORWARD as libc::c_int,
                    S_END_ALNUM as libc::c_int,
                  )
                } else if *strchrnul(
                  b"!\"#$%&\'()*+,-./:;<=>?@[\\]^_`{|}~\x00" as *const u8 as *const libc::c_char,
                  *(*ptr_to_globals).dot as libc::c_int,
                )
                .offset(0)
                  != 0
                {
                  (*ptr_to_globals).dot = skip_thing(
                    (*ptr_to_globals).dot,
                    1i32,
                    FORWARD as libc::c_int,
                    S_END_PUNCT as libc::c_int,
                  )
                }
                if (*ptr_to_globals).dot < (*ptr_to_globals).end.offset(-1) {
                  (*ptr_to_globals).dot = (*ptr_to_globals).dot.offset(1)
                }
                if ({
                  let mut bb__isspace: libc::c_uchar =
                    (*(*ptr_to_globals).dot as libc::c_int - 9i32) as libc::c_uchar;
                  (bb__isspace as libc::c_int == ' ' as i32 - 9i32
                    || bb__isspace as libc::c_int <= 13i32 - 9i32) as libc::c_int
                }) != 0
                {
                  (*ptr_to_globals).dot = skip_thing(
                    (*ptr_to_globals).dot,
                    2i32,
                    FORWARD as libc::c_int,
                    S_OVER_WS as libc::c_int,
                  )
                }
                (*ptr_to_globals).cmdcnt -= 1;
                if !((*ptr_to_globals).cmdcnt > 0) {
                  break;
                }
              }
              current_block = 15129665204879337069;
            }
            4386451087681909888 => {
              (*ptr_to_globals).dot =
                move_to_col((*ptr_to_globals).dot, (*ptr_to_globals).cmdcnt - 1i32);
              current_block = 15129665204879337069;
            }
            1296397779060594135 => {
              dot_begin();
              current_block = 15129665204879337069;
            }
            _ => {}
          }
          match current_block {
            15129665204879337069 => {}
            8629930936610358348 => {}
            _ => {
              match current_block {
                17251831742223396249 => {
                  dir = 0;
                  if c == 'X' as i32 {
                    dir = -1i32
                  }
                  loop {
                    if *(*ptr_to_globals).dot.offset(dir as isize) as libc::c_int != '\n' as i32 {
                      if c == 'X' as i32 {
                        (*ptr_to_globals).dot = (*ptr_to_globals).dot.offset(-1)
                      }
                      (*ptr_to_globals).dot = yank_delete(
                        (*ptr_to_globals).dot,
                        (*ptr_to_globals).dot,
                        0,
                        YANKDEL as libc::c_int,
                        1i32,
                      )
                    }
                    (*ptr_to_globals).cmdcnt -= 1;
                    if !((*ptr_to_globals).cmdcnt > 0) {
                      break;
                    }
                  }
                  end_cmd_q();
                  if c == 's' as i32 {
                    current_block = 8629930936610358348;
                  } else {
                    current_block = 15129665204879337069;
                  }
                }
                2087484904894455135 => {
                  dot_end();
                  (*ptr_to_globals).dot =
                    char_insert((*ptr_to_globals).dot, '\n' as i32 as libc::c_char, 1i32);
                  current_block = 8629930936610358348;
                }
                11945623545738147997 => {
                  (*ptr_to_globals).dot = (*ptr_to_globals).end.offset(-1);
                  if (*ptr_to_globals).cmdcnt > 0 {
                    (*ptr_to_globals).dot = find_line((*ptr_to_globals).cmdcnt)
                  }
                  dot_skip_over_ws();
                  current_block = 15129665204879337069;
                }
                5847749760081351726 => {
                  dir = FORWARD as libc::c_int;
                  if c == 'B' as i32 {
                    dir = BACK as libc::c_int
                  }
                  loop {
                    if c == 'W' as i32
                      || ({
                        let mut bb__isspace: libc::c_uchar =
                          (*(*ptr_to_globals).dot.offset(dir as isize) as libc::c_int - 9i32)
                            as libc::c_uchar;
                        (bb__isspace as libc::c_int == ' ' as i32 - 9i32
                          || bb__isspace as libc::c_int <= 13i32 - 9i32)
                          as libc::c_int
                      }) != 0
                    {
                      (*ptr_to_globals).dot =
                        skip_thing((*ptr_to_globals).dot, 1i32, dir, S_TO_WS as libc::c_int);
                      (*ptr_to_globals).dot =
                        skip_thing((*ptr_to_globals).dot, 2i32, dir, S_OVER_WS as libc::c_int)
                    }
                    if c != 'W' as i32 {
                      (*ptr_to_globals).dot =
                        skip_thing((*ptr_to_globals).dot, 1i32, dir, S_BEFORE_WS as libc::c_int)
                    }
                    (*ptr_to_globals).cmdcnt -= 1;
                    if !((*ptr_to_globals).cmdcnt > 0) {
                      break;
                    }
                  }
                  current_block = 15129665204879337069;
                }
                17440971994642376514 => {
                  current_block = 15129665204879337069;
                }
                7534742345255184552 => {
                  current_block = 17247297260531395789;
                }
                8800996768013373992 => {
                  loop {
                    dot_next();
                    (*ptr_to_globals).dot = move_to_col(
                      (*ptr_to_globals).dot,
                      (*ptr_to_globals).ccol + (*ptr_to_globals).offset,
                    );
                    (*ptr_to_globals).cmdcnt -= 1;
                    if !((*ptr_to_globals).cmdcnt > 0) {
                      break;
                    }
                  }
                  current_block = 15129665204879337069;
                }
                13993698454868426881 => {
                  loop {
                    dot_right();
                    (*ptr_to_globals).cmdcnt -= 1;
                    if !((*ptr_to_globals).cmdcnt > 0) {
                      break;
                    }
                  }
                  current_block = 15129665204879337069;
                }
                7856905509180742666 => {
                  while !((*ptr_to_globals).last_forward_char == 0) {
                    q = (*ptr_to_globals).dot.offset(1);
                    while q < (*ptr_to_globals).end.offset(-1)
                      && *q as libc::c_int != '\n' as i32
                      && *q as libc::c_int != (*ptr_to_globals).last_forward_char
                    {
                      q = q.offset(1)
                    }
                    if *q as libc::c_int == (*ptr_to_globals).last_forward_char {
                      (*ptr_to_globals).dot = q
                    }
                    (*ptr_to_globals).cmdcnt -= 1;
                    if !((*ptr_to_globals).cmdcnt > 0) {
                      break;
                    }
                  }
                  current_block = 15129665204879337069;
                }
                17498168302144015873 => {
                  current_block = 8681395796513813967;
                }
                1752638907092016026 => {
                  if *(*ptr_to_globals).dot as libc::c_int != '\n' as i32 {
                    (*ptr_to_globals).dot = (*ptr_to_globals).dot.offset(1)
                  }
                  current_block = 8629930936610358348;
                }
                3268579060917229304 => {
                  current_block = 8629930936610358348;
                }
                1895262434596074581 => {
                  current_block = 8908416993177701018;
                }
                _ => {}
              }
              match current_block {
                8629930936610358348 => {}
                15129665204879337069 => {}
                _ => {
                  match current_block {
                    17247297260531395789 => {
                      loop {
                        dot_left();
                        (*ptr_to_globals).cmdcnt -= 1;
                        if !((*ptr_to_globals).cmdcnt > 0) {
                          break;
                        }
                      }
                      current_block = 15129665204879337069;
                    }
                    8681395796513813967 => {
                      current_block = 5591548203144509315;
                    }
                    8908416993177701018 => {
                      current_block = 16124761010012532485;
                    }
                    _ => {}
                  }
                  match current_block {
                    15129665204879337069 => {}
                    _ => {
                      match current_block {
                        16124761010012532485 => {
                          let mut yf: libc::c_int = 0;
                          let mut ml: libc::c_int = 0;
                          let mut whole: libc::c_int = 0;
                          yf = YANKDEL as libc::c_int;
                          if c == 'y' as i32 || c == 'Y' as i32 {
                            yf = YANKONLY as libc::c_int
                          }
                          c1 = 'y' as i32;
                          if c != 'Y' as i32 {
                            c1 = get_one_char()
                          }
                          ml = find_range(&mut p, &mut q, c1 as libc::c_char);
                          place_cursor(0i32, 0);
                          if c1 == 27i32 {
                            c1 = 27i32;
                            c = c1
                          } else if !strchr(b"wW\x00" as *const u8 as *const libc::c_char, c1)
                            .is_null()
                          {
                            ml = 0;
                            if c == 'c' as i32 {
                              while ({
                                let mut bb__isspace: libc::c_uchar =
                                  (*q as libc::c_int - 9i32) as libc::c_uchar;
                                (bb__isspace as libc::c_int == ' ' as i32 - 9i32
                                  || bb__isspace as libc::c_int <= 13i32 - 9i32)
                                  as libc::c_int
                              }) != 0
                                && q > p
                              {
                                q = q.offset(-1)
                              }
                            }
                            (*ptr_to_globals).dot = yank_delete(p, q, ml, yf, 1i32)
                          } else if !strchr(
                            b"^0bBeEft%$ lh\x08\x7f\x00" as *const u8 as *const libc::c_char,
                            c1,
                          )
                          .is_null()
                          {
                            (*ptr_to_globals).dot = yank_delete(p, q, ml, yf, 1i32)
                          } else if !strchr(
                            b"cdykjGHL+-{}\r\n\x00" as *const u8 as *const libc::c_char,
                            c1,
                          )
                          .is_null()
                          {
                            (*ptr_to_globals).dot = yank_delete(p, q, ml, yf, 1i32);
                            whole = 1i32
                          } else {
                            c1 = 27i32;
                            c = c1;
                            ml = 0;
                            indicate_error();
                          }
                          if ml != 0 && whole != 0 {
                            if c == 'c' as i32 {
                              (*ptr_to_globals).dot = char_insert(
                                (*ptr_to_globals).dot,
                                '\n' as i32 as libc::c_char,
                                2i32,
                              );
                              if whole != 0
                                && (*ptr_to_globals).dot != (*ptr_to_globals).end.offset(-1)
                              {
                                dot_prev();
                              }
                            } else if c == 'd' as i32 {
                              dot_begin();
                              dot_skip_over_ws();
                            }
                          }
                          if c1 != 27i32 {
                            if c == 'c' as i32 {
                              strcpy(
                                buf.as_mut_ptr(),
                                b"Change\x00" as *const u8 as *const libc::c_char,
                              );
                              current_block = 8629930936610358348;
                            } else {
                              if c == 'd' as i32 {
                                strcpy(
                                  buf.as_mut_ptr(),
                                  b"Delete\x00" as *const u8 as *const libc::c_char,
                                );
                              }
                              if c == 'y' as i32 || c == 'Y' as i32 {
                                strcpy(
                                  buf.as_mut_ptr(),
                                  b"Yank\x00" as *const u8 as *const libc::c_char,
                                );
                              }
                              p = (*ptr_to_globals).reg[(*ptr_to_globals).YDreg as usize];
                              q = p.offset(strlen(p) as isize);
                              cnt = 0;
                              while p <= q {
                                if *p as libc::c_int == '\n' as i32 {
                                  cnt += 1
                                }
                                p = p.offset(1)
                              }
                              status_line(
                                b"%s %u lines (%u chars) using [%c]\x00" as *const u8
                                  as *const libc::c_char,
                                buf.as_mut_ptr(),
                                cnt,
                                strlen((*ptr_to_globals).reg[(*ptr_to_globals).YDreg as usize])
                                  as libc::c_uint,
                                what_reg() as libc::c_int,
                              );
                              end_cmd_q();
                              current_block = 15129665204879337069;
                            }
                          } else {
                            current_block = 15129665204879337069;
                          }
                        }
                        5591548203144509315 => {
                          current_block = 2636677179867529885;
                        }
                        _ => {}
                      }
                      match current_block {
                        15129665204879337069 => {}
                        8629930936610358348 => {}
                        _ => {
                          match current_block {
                            2636677179867529885 => {
                              current_block = 12309206730560524281;
                            }
                            _ => {}
                          }
                          match current_block {
                            12309206730560524281 => {
                              current_block = 3325768110057758661;
                            }
                            _ => {}
                          }
                          match current_block {
                            3325768110057758661 => {
                              current_block = 14815832896553429982;
                            }
                            _ => {}
                          }
                          match current_block {
                            14815832896553429982 => {
                              current_block = 10731695520297161438;
                            }
                            _ => {}
                          }
                          match current_block {
                            10731695520297161438 => {
                              if c == '0' as i32 && (*ptr_to_globals).cmdcnt < 1i32 {
                                dot_begin();
                              } else {
                                (*ptr_to_globals).cmdcnt =
                                  (*ptr_to_globals).cmdcnt * 10i32 + (c - '0' as i32)
                              }
                              current_block = 15129665204879337069;
                            }
                            _ => {}
                          }
                          match current_block {
                            15129665204879337069 => {}
                            _ => {
                              loop {
                                match current_block {
                                  16813369756331276724 => {
                                    msg = std::ptr::null();
                                    current_block = 7392824444931029276;
                                  }
                                  7392824444931029276 => {
                                    dir = FORWARD as libc::c_int;
                                    p = (*ptr_to_globals).dot.offset(1);
                                    if *(*ptr_to_globals).last_search_pattern.offset(0)
                                      as libc::c_int
                                      == '?' as i32
                                    {
                                      dir = BACK as libc::c_int;
                                      p = (*ptr_to_globals).dot.offset(-1)
                                    }
                                    current_block = 4166979493554389389;
                                  }
                                  _ => {
                                    q = char_search(
                                      p,
                                      (*ptr_to_globals).last_search_pattern.offset(1),
                                      dir << 1i32 | FULL as libc::c_int,
                                    );
                                    if !q.is_null() {
                                      (*ptr_to_globals).dot = q;
                                      msg = std::ptr::null()
                                    } else {
                                      p = (*ptr_to_globals).text;
                                      if dir == BACK as libc::c_int {
                                        p = (*ptr_to_globals).end.offset(-1)
                                      }
                                      q = char_search(
                                        p,
                                        (*ptr_to_globals).last_search_pattern.offset(1),
                                        dir << 1i32 | FULL as libc::c_int,
                                      );
                                      if !q.is_null() {
                                        (*ptr_to_globals).dot = q;
                                        msg = b"search hit BOTTOM, continuing at TOP\x00"
                                          as *const u8
                                          as *const libc::c_char;
                                        if dir == BACK as libc::c_int {
                                          msg = b"search hit TOP, continuing at BOTTOM\x00"
                                            as *const u8
                                            as *const libc::c_char
                                        }
                                      } else {
                                        msg = b"Pattern not found\x00" as *const u8
                                          as *const libc::c_char
                                      }
                                    }
                                    if !msg.is_null() {
                                      status_line_bold(
                                        b"%s\x00" as *const u8 as *const libc::c_char,
                                        msg,
                                      );
                                    }
                                    (*ptr_to_globals).cmdcnt -= 1;
                                    if (*ptr_to_globals).cmdcnt > 0 {
                                      current_block = 16813369756331276724;
                                    } else {
                                      break;
                                    }
                                  }
                                }
                              }
                              current_block = 15129665204879337069;
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
        123 => {
          current_block = 8893187391306414141;
          match current_block {
            16992905640583886232 => {
              loop {
                if (*(*ptr_to_globals).dot as libc::c_int - 'a' as i32) as libc::c_uchar
                  as libc::c_int
                  <= 'z' as i32 - 'a' as i32
                {
                  undo_push(
                    (*ptr_to_globals).dot,
                    1i32 as libc::c_uint,
                    1i32 as libc::c_uchar,
                  );
                  *(*ptr_to_globals).dot =
                    bb_ascii_toupper(*(*ptr_to_globals).dot as libc::c_uchar) as libc::c_char;
                  undo_push(
                    (*ptr_to_globals).dot,
                    1i32 as libc::c_uint,
                    2i32 as libc::c_uchar,
                  );
                } else if (*(*ptr_to_globals).dot as libc::c_int - 'A' as i32) as libc::c_uchar
                  as libc::c_int
                  <= 'Z' as i32 - 'A' as i32
                {
                  undo_push(
                    (*ptr_to_globals).dot,
                    1i32 as libc::c_uint,
                    1i32 as libc::c_uchar,
                  );
                  *(*ptr_to_globals).dot =
                    bb_ascii_tolower(*(*ptr_to_globals).dot as libc::c_uchar) as libc::c_char;
                  undo_push(
                    (*ptr_to_globals).dot,
                    1i32 as libc::c_uint,
                    2i32 as libc::c_uchar,
                  );
                }
                dot_right();
                (*ptr_to_globals).cmdcnt -= 1;
                if !((*ptr_to_globals).cmdcnt > 0) {
                  break;
                }
              }
              end_cmd_q();
              current_block = 15129665204879337069;
            }
            8729655159604064397 => {
              c1 = get_one_char();
              cnt = 0;
              if c1 == '.' as i32 {
                cnt = (*ptr_to_globals)
                  .rows
                  .wrapping_sub(2i32 as libc::c_uint)
                  .wrapping_div(2i32 as libc::c_uint) as libc::c_int
              }
              if c1 == '-' as i32 {
                cnt = (*ptr_to_globals).rows.wrapping_sub(2i32 as libc::c_uint) as libc::c_int
              }
              (*ptr_to_globals).screenbegin = begin_line((*ptr_to_globals).dot);
              dot_scroll(cnt, -1i32);
              current_block = 15129665204879337069;
            }
            15899500648299942075 => {
              (*ptr_to_globals).last_forward_char = get_one_char();
              do_cmd(';' as i32);
              if *(*ptr_to_globals).dot as libc::c_int == (*ptr_to_globals).last_forward_char {
                dot_left();
              }
              (*ptr_to_globals).last_forward_char = 0;
              current_block = 15129665204879337069;
            }
            9051390181078481641 => {
              c1 = get_one_char();
              if *(*ptr_to_globals).dot as libc::c_int != '\n' as i32 {
                (*ptr_to_globals).dot =
                  text_hole_delete((*ptr_to_globals).dot, (*ptr_to_globals).dot, 1i32);
                (*ptr_to_globals).dot =
                  char_insert((*ptr_to_globals).dot, c1 as libc::c_char, 2i32);
                dot_left();
              }
              end_cmd_q();
              current_block = 15129665204879337069;
            }
            877115918601926659 => {
              dir = FORWARD as libc::c_int;
              if c == 'b' as i32 {
                dir = BACK as libc::c_int
              }
              while !((*ptr_to_globals).dot.offset(dir as isize) < (*ptr_to_globals).text
                || (*ptr_to_globals).dot.offset(dir as isize) > (*ptr_to_globals).end.offset(-1))
              {
                (*ptr_to_globals).dot = (*ptr_to_globals).dot.offset(dir as isize);
                if ({
                  let mut bb__isspace: libc::c_uchar =
                    (*(*ptr_to_globals).dot as libc::c_int - 9i32) as libc::c_uchar;
                  (bb__isspace as libc::c_int == ' ' as i32 - 9i32
                    || bb__isspace as libc::c_int <= 13i32 - 9i32) as libc::c_int
                }) != 0
                {
                  (*ptr_to_globals).dot = skip_thing(
                    (*ptr_to_globals).dot,
                    if c == 'e' as i32 { 2i32 } else { 1i32 },
                    dir,
                    S_OVER_WS as libc::c_int,
                  )
                }
                if bb_ascii_isalnum(*(*ptr_to_globals).dot as libc::c_uchar) != 0
                  || *(*ptr_to_globals).dot as libc::c_int == '_' as i32
                {
                  (*ptr_to_globals).dot =
                    skip_thing((*ptr_to_globals).dot, 1i32, dir, S_END_ALNUM as libc::c_int)
                } else if *strchrnul(
                  b"!\"#$%&\'()*+,-./:;<=>?@[\\]^_`{|}~\x00" as *const u8 as *const libc::c_char,
                  *(*ptr_to_globals).dot as libc::c_int,
                )
                .offset(0)
                  != 0
                {
                  (*ptr_to_globals).dot =
                    skip_thing((*ptr_to_globals).dot, 1i32, dir, S_END_PUNCT as libc::c_int)
                }
                (*ptr_to_globals).cmdcnt -= 1;
                if !((*ptr_to_globals).cmdcnt > 0) {
                  break;
                }
              }
              current_block = 15129665204879337069;
            }
            1085022737867179637 => {
              dot_begin();
              dot_skip_over_ws();
              current_block = 15129665204879337069;
            }
            3113147720494587438 => {
              c1 = get_one_char();
              if c1 != 'Z' as i32 {
                indicate_error();
              } else if (*ptr_to_globals).modified_count != 0 {
                if 1i32 != 0 && (*ptr_to_globals).readonly_mode as libc::c_int != 0 {
                  status_line_bold(
                    b"\'%s\' is read only\x00" as *const u8 as *const libc::c_char,
                    (*ptr_to_globals).current_filename,
                  );
                } else {
                  cnt = file_write(
                    (*ptr_to_globals).current_filename,
                    (*ptr_to_globals).text,
                    (*ptr_to_globals).end.offset(-1),
                  );
                  if cnt < 0 {
                    if cnt == -1i32 {
                      status_line_bold(b"Write error: %m\x00" as *const u8 as *const libc::c_char);
                    }
                  } else if cnt as libc::c_long
                    == (*ptr_to_globals)
                      .end
                      .offset(-1)
                      .wrapping_offset_from((*ptr_to_globals).text)
                      as libc::c_long
                      + 1
                  {
                    (*ptr_to_globals).editing = 0 as smallint
                  }
                }
              } else {
                (*ptr_to_globals).editing = 0 as smallint
              }
              current_block = 15129665204879337069;
            }
            12960118908218882441 => {
              p = begin_line((*ptr_to_globals).dot);
              if *p.offset(-1i32 as isize) as libc::c_int == '\n' as i32 {
                dot_prev();
                current_block = 2087484904894455135;
              } else {
                dot_begin();
                (*ptr_to_globals).dot =
                  char_insert((*ptr_to_globals).dot, '\n' as i32 as libc::c_char, 1i32);
                dot_prev();
                current_block = 8629930936610358348;
              }
            }
            8720450212473544924 => {
              (*ptr_to_globals).dot = (*ptr_to_globals).screenbegin;
              cnt = 0;
              while (cnt as libc::c_uint)
                < (*ptr_to_globals)
                  .rows
                  .wrapping_sub(1i32 as libc::c_uint)
                  .wrapping_div(2i32 as libc::c_uint)
              {
                (*ptr_to_globals).dot = next_line((*ptr_to_globals).dot);
                cnt += 1
              }
              current_block = 15129665204879337069;
            }
            13015277209715431090 => {
              (*ptr_to_globals).dot = end_screen();
              if (*ptr_to_globals).cmdcnt as libc::c_uint
                > (*ptr_to_globals).rows.wrapping_sub(1i32 as libc::c_uint)
              {
                (*ptr_to_globals).cmdcnt =
                  (*ptr_to_globals).rows.wrapping_sub(1i32 as libc::c_uint) as libc::c_int
              }
              (*ptr_to_globals).cmdcnt -= 1;
              if (*ptr_to_globals).cmdcnt > 0 {
                do_cmd('-' as i32);
              }
              dot_begin();
              dot_skip_over_ws();
              current_block = 15129665204879337069;
            }
            9800435767766781385 => {
              loop {
                dot_end();
                if (*ptr_to_globals).dot < (*ptr_to_globals).end.offset(-1) {
                  undo_push(
                    (*ptr_to_globals).dot,
                    1i32 as libc::c_uint,
                    1i32 as libc::c_uchar,
                  );
                  let fresh15 = (*ptr_to_globals).dot;
                  (*ptr_to_globals).dot = (*ptr_to_globals).dot.offset(1);
                  *fresh15 = ' ' as i32 as libc::c_char;
                  undo_push(
                    (*ptr_to_globals).dot.offset(-1),
                    1i32 as libc::c_uint,
                    2i32 as libc::c_uchar,
                  );
                  while ({
                    let mut bb__isblank: libc::c_uchar = *(*ptr_to_globals).dot as libc::c_uchar;
                    (bb__isblank as libc::c_int == ' ' as i32
                      || bb__isblank as libc::c_int == '\t' as i32)
                      as libc::c_int
                  }) != 0
                  {
                    text_hole_delete((*ptr_to_globals).dot, (*ptr_to_globals).dot, 2i32);
                  }
                }
                (*ptr_to_globals).cmdcnt -= 1;
                if !((*ptr_to_globals).cmdcnt > 0) {
                  break;
                }
              }
              end_cmd_q();
              current_block = 15129665204879337069;
            }
            3432363526595694666 => {
              dot_begin();
              dot_skip_over_ws();
              current_block = 3268579060917229304;
            }
            3494829253343353619 => {
              (*ptr_to_globals).dot = (*ptr_to_globals).screenbegin;
              if (*ptr_to_globals).cmdcnt as libc::c_uint
                > (*ptr_to_globals).rows.wrapping_sub(1i32 as libc::c_uint)
              {
                (*ptr_to_globals).cmdcnt =
                  (*ptr_to_globals).rows.wrapping_sub(1i32 as libc::c_uint) as libc::c_int
              }
              (*ptr_to_globals).cmdcnt -= 1;
              if (*ptr_to_globals).cmdcnt > 0 {
                do_cmd('+' as i32);
              }
              dot_skip_over_ws();
              current_block = 15129665204879337069;
            }
            17973101765331640574 => {
              c1 = get_one_char();
              if c1 != 'g' as i32 {
                buf[0] = 'g' as i32 as libc::c_char;
                buf[1] = if c1 >= 0 { c1 } else { '*' as i32 } as libc::c_char;
                buf[2] = '\u{0}' as i32 as libc::c_char;
                not_implemented(buf.as_mut_ptr());
                current_block = 15129665204879337069;
              } else {
                if (*ptr_to_globals).cmdcnt == 0 {
                  (*ptr_to_globals).cmdcnt = 1i32
                }
                current_block = 11945623545738147997;
              }
            }
            16546625800574160972 => {
              save_dot = (*ptr_to_globals).dot;
              (*ptr_to_globals).dot = dollar_line((*ptr_to_globals).dot);
              (*ptr_to_globals).dot = yank_delete(
                save_dot,
                (*ptr_to_globals).dot,
                0,
                YANKDEL as libc::c_int,
                1i32,
              );
              if c == 'C' as i32 {
                current_block = 8629930936610358348;
              } else {
                if c == 'D' as i32 {
                  end_cmd_q();
                }
                current_block = 15129665204879337069;
              }
            }
            11937696639986586685 => {
              cnt = count_lines((*ptr_to_globals).text, (*ptr_to_globals).dot);
              c1 = get_one_char();
              find_range(&mut p, &mut q, c1 as libc::c_char);
              yank_delete(p, q, 1i32, YANKONLY as libc::c_int, 0);
              p = begin_line(p);
              q = end_line(q);
              i = count_lines(p, q);
              while i > 0 {
                if c == '<' as i32 {
                  if *p as libc::c_int == '\t' as i32 {
                    text_hole_delete(p, p, 0);
                  } else if *p as libc::c_int == ' ' as i32 {
                    j = 0;
                    while *p as libc::c_int == ' ' as i32 && j < (*ptr_to_globals).tabstop {
                      text_hole_delete(p, p, 0);
                      j += 1
                    }
                  }
                } else if c == '>' as i32 {
                  char_insert(p, '\t' as i32 as libc::c_char, 1i32);
                }
                i -= 1;
                p = next_line(p)
              }
              (*ptr_to_globals).dot = find_line(cnt);
              dot_skip_over_ws();
              end_cmd_q();
              current_block = 15129665204879337069;
            }
            17725350714912028156 => {
              p = get_input_line(b":\x00" as *const u8 as *const libc::c_char);
              colon(p);
              current_block = 15129665204879337069;
            }
            14526470074083880812 => {
              q = char_search(
                (*ptr_to_globals).dot,
                b"\n\n\x00" as *const u8 as *const libc::c_char,
                (FORWARD as libc::c_int) << 1i32 | FULL as libc::c_int,
              );
              if !q.is_null() {
                (*ptr_to_globals).dot = next_line(q)
              }
              current_block = 15129665204879337069;
            }
            8893187391306414141 => {
              q = char_search(
                (*ptr_to_globals).dot,
                b"\n\n\x00" as *const u8 as *const libc::c_char,
                ((BACK as libc::c_int as libc::c_uint) << 1i32
                  | FULL as libc::c_int as libc::c_uint) as libc::c_int,
              );
              if !q.is_null() {
                (*ptr_to_globals).dot = next_line(q)
              }
              current_block = 15129665204879337069;
            }
            7021673758293221412 => {
              dir = BACK as libc::c_int;
              p = (*ptr_to_globals).dot.offset(-1);
              if *(*ptr_to_globals).last_search_pattern.offset(0) as libc::c_int == '?' as i32 {
                dir = FORWARD as libc::c_int;
                p = (*ptr_to_globals).dot.offset(1)
              }
              current_block = 4166979493554389389;
            }
            18374191879090272823 => {
              buf[0] = c as libc::c_char;
              buf[1] = '\u{0}' as i32 as libc::c_char;
              q = get_input_line(buf.as_mut_ptr());
              if *q.offset(0) as libc::c_int != 0 && *q.offset(1) == 0 {
                if *(*ptr_to_globals).last_search_pattern.offset(0) != 0 {
                  *(*ptr_to_globals).last_search_pattern.offset(0) = c as libc::c_char
                }
                current_block = 7392824444931029276;
              } else if *q.offset(0) != 0 {
                free((*ptr_to_globals).last_search_pattern as *mut libc::c_void);
                (*ptr_to_globals).last_search_pattern = crate::libbb::xfuncs_printf::xstrdup(q);
                current_block = 7392824444931029276;
              } else {
                current_block = 15129665204879337069;
              }
            }
            16407828456666301883 => {
              if (*ptr_to_globals).last_forward_char == 0 {
                current_block = 15129665204879337069;
              } else {
                loop {
                  q = (*ptr_to_globals).dot.offset(-1);
                  while q >= (*ptr_to_globals).text
                    && *q as libc::c_int != '\n' as i32
                    && *q as libc::c_int != (*ptr_to_globals).last_forward_char
                  {
                    q = q.offset(-1)
                  }
                  if q >= (*ptr_to_globals).text
                    && *q as libc::c_int == (*ptr_to_globals).last_forward_char
                  {
                    (*ptr_to_globals).dot = q
                  }
                  (*ptr_to_globals).cmdcnt -= 1;
                  if !((*ptr_to_globals).cmdcnt > 0) {
                    break;
                  }
                }
                current_block = 15129665204879337069;
              }
            }
            9018432604062702004 => {
              q = (*ptr_to_globals).dot;
              while q < (*ptr_to_globals).end && *q as libc::c_int != '\n' as i32 {
                if !strchr(
                  b"()[]{}\x00" as *const u8 as *const libc::c_char,
                  *q as libc::c_int,
                )
                .is_null()
                {
                  p = find_pair(q, *q);
                  if p.is_null() {
                    indicate_error();
                  } else {
                    (*ptr_to_globals).dot = p
                  }
                  break;
                } else {
                  q = q.offset(1)
                }
              }
              if *q as libc::c_int == '\n' as i32 {
                indicate_error();
              }
              current_block = 15129665204879337069;
            }
            10247103787464459848 => {
              p = (*ptr_to_globals).reg[(*ptr_to_globals).YDreg as usize];
              if p.is_null() {
                status_line_bold(
                  b"Nothing in register %c\x00" as *const u8 as *const libc::c_char,
                  what_reg() as libc::c_int,
                );
              } else {
                if !strchr(p, '\n' as i32).is_null() {
                  if c == 'P' as i32 {
                    dot_begin();
                  }
                  if c == 'p' as i32 {
                    if end_line((*ptr_to_globals).dot) == (*ptr_to_globals).end.offset(-1) {
                      (*ptr_to_globals).dot = (*ptr_to_globals).end
                    } else {
                      dot_next();
                    }
                  }
                } else if c == 'p' as i32 {
                  dot_right();
                }
                string_insert((*ptr_to_globals).dot, p, 1i32);
                end_cmd_q();
              }
              current_block = 15129665204879337069;
            }
            15260732871948875843 => {
              c1 = (get_one_char() | 0x20i32) - 'a' as i32;
              if c1 as libc::c_uint <= 25i32 as libc::c_uint {
                (*ptr_to_globals).mark[c1 as usize] = (*ptr_to_globals).dot
              } else {
                indicate_error();
              }
              current_block = 15129665204879337069;
            }
            12738322036487086035 => {
              c1 = get_one_char() | 0x20i32;
              if (c1 - 'a' as i32) as libc::c_uint <= 25i32 as libc::c_uint {
                c1 = c1 - 'a' as i32;
                q = (*ptr_to_globals).mark[c1 as usize];
                if (*ptr_to_globals).text <= q && q < (*ptr_to_globals).end {
                  (*ptr_to_globals).dot = q;
                  dot_begin();
                  dot_skip_over_ws();
                }
              } else if c1 == '\'' as i32 {
                (*ptr_to_globals).dot = swap_context((*ptr_to_globals).dot);
                dot_begin();
                dot_skip_over_ws();
              } else {
                indicate_error();
              }
              current_block = 15129665204879337069;
            }
            13255096073384561358 => {
              c1 = (get_one_char() | 0x20i32) - 'a' as i32;
              if c1 as libc::c_uint <= 25i32 as libc::c_uint {
                (*ptr_to_globals).YDreg = c1 as smalluint
              } else {
                indicate_error();
              }
              current_block = 15129665204879337069;
            }
            10258711639984089377 => {
              if (*ptr_to_globals).cmd_mode as libc::c_int == 0 {
                indicate_error();
              }
              (*ptr_to_globals).cmd_mode = 0 as smallint;
              undo_queue_commit();
              end_cmd_q();
              (*ptr_to_globals).last_status_cksum = 0;
              current_block = 15129665204879337069;
            }
            11439127087547047736 => {
              buf[0] = c as libc::c_char;
              buf[1] = '\u{0}' as i32 as libc::c_char;
              not_implemented(buf.as_mut_ptr());
              end_cmd_q();
              current_block = 17440971994642376514;
            }
            7961798899781870241 => {
              dot_scroll(
                (*ptr_to_globals).rows.wrapping_sub(2i32 as libc::c_uint) as libc::c_int,
                -1i32,
              );
              current_block = 15129665204879337069;
            }
            9426343755402444879 => {
              dot_scroll(
                (*ptr_to_globals)
                  .rows
                  .wrapping_sub(2i32 as libc::c_uint)
                  .wrapping_div(2i32 as libc::c_uint) as libc::c_int,
                1i32,
              );
              current_block = 15129665204879337069;
            }
            13352459794680105913 => {
              dot_scroll(1i32, 1i32);
              current_block = 15129665204879337069;
            }
            14142272253464333006 => {
              dot_scroll(
                (*ptr_to_globals).rows.wrapping_sub(2i32 as libc::c_uint) as libc::c_int,
                1i32,
              );
              current_block = 15129665204879337069;
            }
            10758177197742640066 => {
              (*ptr_to_globals).last_status_cksum = 0;
              current_block = 15129665204879337069;
            }
            6152256259730122749 => {
              current_block = 7534742345255184552;
            }
            12883932598258173301 => {
              current_block = 8800996768013373992;
            }
            11242998110520238401 => {
              redraw(1i32);
              current_block = 15129665204879337069;
            }
            13619733043935729992 => {
              loop {
                dot_next();
                dot_skip_over_ws();
                (*ptr_to_globals).cmdcnt -= 1;
                if !((*ptr_to_globals).cmdcnt > 0) {
                  break;
                }
              }
              current_block = 15129665204879337069;
            }
            9339065157412720613 => {
              dot_scroll(
                (*ptr_to_globals)
                  .rows
                  .wrapping_sub(2i32 as libc::c_uint)
                  .wrapping_div(2i32 as libc::c_uint) as libc::c_int,
                -1i32,
              );
              current_block = 15129665204879337069;
            }
            11447082683497798022 => {
              dot_scroll(1i32, -1i32);
              current_block = 15129665204879337069;
            }
            5182000506326660482 => {
              current_block = 13993698454868426881;
            }
            1105010766850597332 => {
              if !(*ptr_to_globals).reg[27].is_null() {
                p = begin_line((*ptr_to_globals).dot);
                q = end_line((*ptr_to_globals).dot);
                p = text_hole_delete(p, q, 1i32);
                p = p.offset(string_insert(p, (*ptr_to_globals).reg[27], 2i32) as isize);
                (*ptr_to_globals).dot = p;
                dot_skip_over_ws();
              }
              current_block = 15129665204879337069;
            }
            8616046655533110204 => {
              undo_pop();
              current_block = 15129665204879337069;
            }
            5127767458142431603 => {
              loop {
                (*ptr_to_globals).dot = end_line((*ptr_to_globals).dot);
                (*ptr_to_globals).cmdcnt -= 1;
                if (*ptr_to_globals).cmdcnt <= 0 {
                  break;
                }
                dot_next();
              }
              current_block = 15129665204879337069;
            }
            222014967776118151 => {
              (*ptr_to_globals).last_forward_char = get_one_char();
              current_block = 7856905509180742666;
            }
            11209792479411604110 => {
              loop {
                dot_prev();
                dot_skip_over_ws();
                (*ptr_to_globals).cmdcnt -= 1;
                if !((*ptr_to_globals).cmdcnt > 0) {
                  break;
                }
              }
              current_block = 15129665204879337069;
            }
            3364823792826654116 => {
              if (*ptr_to_globals).lmc_len != 0 {
                (*ptr_to_globals).ioq_start = crate::libbb::xfuncs_printf::xstrndup(
                  (*ptr_to_globals).last_modifying_cmd.as_mut_ptr(),
                  (*ptr_to_globals).lmc_len,
                );
                (*ptr_to_globals).ioq = (*ptr_to_globals).ioq_start
              }
              current_block = 15129665204879337069;
            }
            18096603330221575131 => {
              current_block = 17498168302144015873;
            }
            16891123271837848903 => {
              dot_end();
              current_block = 1752638907092016026;
            }
            8517235759107662071 => {
              current_block = 5847749760081351726;
            }
            12525254419223051704 => {
              if (*ptr_to_globals).dot < (*ptr_to_globals).end.offset(-1) {
                (*ptr_to_globals).dot = yank_delete(
                  (*ptr_to_globals).dot,
                  (*ptr_to_globals).dot,
                  1i32,
                  YANKDEL as libc::c_int,
                  1i32,
                )
              }
              current_block = 15129665204879337069;
            }
            15232911949322867522 => {
              current_block = 17251831742223396249;
            }
            10863374208794025069 => {
              current_block = 1895262434596074581;
            }
            451126677064669119 => {
              loop {
                dot_prev();
                (*ptr_to_globals).dot = move_to_col(
                  (*ptr_to_globals).dot,
                  (*ptr_to_globals).ccol + (*ptr_to_globals).offset,
                );
                (*ptr_to_globals).cmdcnt -= 1;
                if !((*ptr_to_globals).cmdcnt > 0) {
                  break;
                }
              }
              current_block = 15129665204879337069;
            }
            4611735929166613116 => {
              loop {
                if bb_ascii_isalnum(*(*ptr_to_globals).dot as libc::c_uchar) != 0
                  || *(*ptr_to_globals).dot as libc::c_int == '_' as i32
                {
                  (*ptr_to_globals).dot = skip_thing(
                    (*ptr_to_globals).dot,
                    1i32,
                    FORWARD as libc::c_int,
                    S_END_ALNUM as libc::c_int,
                  )
                } else if *strchrnul(
                  b"!\"#$%&\'()*+,-./:;<=>?@[\\]^_`{|}~\x00" as *const u8 as *const libc::c_char,
                  *(*ptr_to_globals).dot as libc::c_int,
                )
                .offset(0)
                  != 0
                {
                  (*ptr_to_globals).dot = skip_thing(
                    (*ptr_to_globals).dot,
                    1i32,
                    FORWARD as libc::c_int,
                    S_END_PUNCT as libc::c_int,
                  )
                }
                if (*ptr_to_globals).dot < (*ptr_to_globals).end.offset(-1) {
                  (*ptr_to_globals).dot = (*ptr_to_globals).dot.offset(1)
                }
                if ({
                  let mut bb__isspace: libc::c_uchar =
                    (*(*ptr_to_globals).dot as libc::c_int - 9i32) as libc::c_uchar;
                  (bb__isspace as libc::c_int == ' ' as i32 - 9i32
                    || bb__isspace as libc::c_int <= 13i32 - 9i32) as libc::c_int
                }) != 0
                {
                  (*ptr_to_globals).dot = skip_thing(
                    (*ptr_to_globals).dot,
                    2i32,
                    FORWARD as libc::c_int,
                    S_OVER_WS as libc::c_int,
                  )
                }
                (*ptr_to_globals).cmdcnt -= 1;
                if !((*ptr_to_globals).cmdcnt > 0) {
                  break;
                }
              }
              current_block = 15129665204879337069;
            }
            4386451087681909888 => {
              (*ptr_to_globals).dot =
                move_to_col((*ptr_to_globals).dot, (*ptr_to_globals).cmdcnt - 1i32);
              current_block = 15129665204879337069;
            }
            1296397779060594135 => {
              dot_begin();
              current_block = 15129665204879337069;
            }
            _ => {}
          }
          match current_block {
            15129665204879337069 => {}
            8629930936610358348 => {}
            _ => {
              match current_block {
                17251831742223396249 => {
                  dir = 0;
                  if c == 'X' as i32 {
                    dir = -1i32
                  }
                  loop {
                    if *(*ptr_to_globals).dot.offset(dir as isize) as libc::c_int != '\n' as i32 {
                      if c == 'X' as i32 {
                        (*ptr_to_globals).dot = (*ptr_to_globals).dot.offset(-1)
                      }
                      (*ptr_to_globals).dot = yank_delete(
                        (*ptr_to_globals).dot,
                        (*ptr_to_globals).dot,
                        0,
                        YANKDEL as libc::c_int,
                        1i32,
                      )
                    }
                    (*ptr_to_globals).cmdcnt -= 1;
                    if !((*ptr_to_globals).cmdcnt > 0) {
                      break;
                    }
                  }
                  end_cmd_q();
                  if c == 's' as i32 {
                    current_block = 8629930936610358348;
                  } else {
                    current_block = 15129665204879337069;
                  }
                }
                2087484904894455135 => {
                  dot_end();
                  (*ptr_to_globals).dot =
                    char_insert((*ptr_to_globals).dot, '\n' as i32 as libc::c_char, 1i32);
                  current_block = 8629930936610358348;
                }
                11945623545738147997 => {
                  (*ptr_to_globals).dot = (*ptr_to_globals).end.offset(-1);
                  if (*ptr_to_globals).cmdcnt > 0 {
                    (*ptr_to_globals).dot = find_line((*ptr_to_globals).cmdcnt)
                  }
                  dot_skip_over_ws();
                  current_block = 15129665204879337069;
                }
                5847749760081351726 => {
                  dir = FORWARD as libc::c_int;
                  if c == 'B' as i32 {
                    dir = BACK as libc::c_int
                  }
                  loop {
                    if c == 'W' as i32
                      || ({
                        let mut bb__isspace: libc::c_uchar =
                          (*(*ptr_to_globals).dot.offset(dir as isize) as libc::c_int - 9i32)
                            as libc::c_uchar;
                        (bb__isspace as libc::c_int == ' ' as i32 - 9i32
                          || bb__isspace as libc::c_int <= 13i32 - 9i32)
                          as libc::c_int
                      }) != 0
                    {
                      (*ptr_to_globals).dot =
                        skip_thing((*ptr_to_globals).dot, 1i32, dir, S_TO_WS as libc::c_int);
                      (*ptr_to_globals).dot =
                        skip_thing((*ptr_to_globals).dot, 2i32, dir, S_OVER_WS as libc::c_int)
                    }
                    if c != 'W' as i32 {
                      (*ptr_to_globals).dot =
                        skip_thing((*ptr_to_globals).dot, 1i32, dir, S_BEFORE_WS as libc::c_int)
                    }
                    (*ptr_to_globals).cmdcnt -= 1;
                    if !((*ptr_to_globals).cmdcnt > 0) {
                      break;
                    }
                  }
                  current_block = 15129665204879337069;
                }
                17440971994642376514 => {
                  current_block = 15129665204879337069;
                }
                7534742345255184552 => {
                  current_block = 17247297260531395789;
                }
                8800996768013373992 => {
                  loop {
                    dot_next();
                    (*ptr_to_globals).dot = move_to_col(
                      (*ptr_to_globals).dot,
                      (*ptr_to_globals).ccol + (*ptr_to_globals).offset,
                    );
                    (*ptr_to_globals).cmdcnt -= 1;
                    if !((*ptr_to_globals).cmdcnt > 0) {
                      break;
                    }
                  }
                  current_block = 15129665204879337069;
                }
                13993698454868426881 => {
                  loop {
                    dot_right();
                    (*ptr_to_globals).cmdcnt -= 1;
                    if !((*ptr_to_globals).cmdcnt > 0) {
                      break;
                    }
                  }
                  current_block = 15129665204879337069;
                }
                7856905509180742666 => {
                  while !((*ptr_to_globals).last_forward_char == 0) {
                    q = (*ptr_to_globals).dot.offset(1);
                    while q < (*ptr_to_globals).end.offset(-1)
                      && *q as libc::c_int != '\n' as i32
                      && *q as libc::c_int != (*ptr_to_globals).last_forward_char
                    {
                      q = q.offset(1)
                    }
                    if *q as libc::c_int == (*ptr_to_globals).last_forward_char {
                      (*ptr_to_globals).dot = q
                    }
                    (*ptr_to_globals).cmdcnt -= 1;
                    if !((*ptr_to_globals).cmdcnt > 0) {
                      break;
                    }
                  }
                  current_block = 15129665204879337069;
                }
                17498168302144015873 => {
                  current_block = 8681395796513813967;
                }
                1752638907092016026 => {
                  if *(*ptr_to_globals).dot as libc::c_int != '\n' as i32 {
                    (*ptr_to_globals).dot = (*ptr_to_globals).dot.offset(1)
                  }
                  current_block = 8629930936610358348;
                }
                3268579060917229304 => {
                  current_block = 8629930936610358348;
                }
                1895262434596074581 => {
                  current_block = 8908416993177701018;
                }
                _ => {}
              }
              match current_block {
                8629930936610358348 => {}
                15129665204879337069 => {}
                _ => {
                  match current_block {
                    17247297260531395789 => {
                      loop {
                        dot_left();
                        (*ptr_to_globals).cmdcnt -= 1;
                        if !((*ptr_to_globals).cmdcnt > 0) {
                          break;
                        }
                      }
                      current_block = 15129665204879337069;
                    }
                    8681395796513813967 => {
                      current_block = 5591548203144509315;
                    }
                    8908416993177701018 => {
                      current_block = 16124761010012532485;
                    }
                    _ => {}
                  }
                  match current_block {
                    15129665204879337069 => {}
                    _ => {
                      match current_block {
                        16124761010012532485 => {
                          let mut yf: libc::c_int = 0;
                          let mut ml: libc::c_int = 0;
                          let mut whole: libc::c_int = 0;
                          yf = YANKDEL as libc::c_int;
                          if c == 'y' as i32 || c == 'Y' as i32 {
                            yf = YANKONLY as libc::c_int
                          }
                          c1 = 'y' as i32;
                          if c != 'Y' as i32 {
                            c1 = get_one_char()
                          }
                          ml = find_range(&mut p, &mut q, c1 as libc::c_char);
                          place_cursor(0i32, 0);
                          if c1 == 27i32 {
                            c1 = 27i32;
                            c = c1
                          } else if !strchr(b"wW\x00" as *const u8 as *const libc::c_char, c1)
                            .is_null()
                          {
                            ml = 0;
                            if c == 'c' as i32 {
                              while ({
                                let mut bb__isspace: libc::c_uchar =
                                  (*q as libc::c_int - 9i32) as libc::c_uchar;
                                (bb__isspace as libc::c_int == ' ' as i32 - 9i32
                                  || bb__isspace as libc::c_int <= 13i32 - 9i32)
                                  as libc::c_int
                              }) != 0
                                && q > p
                              {
                                q = q.offset(-1)
                              }
                            }
                            (*ptr_to_globals).dot = yank_delete(p, q, ml, yf, 1i32)
                          } else if !strchr(
                            b"^0bBeEft%$ lh\x08\x7f\x00" as *const u8 as *const libc::c_char,
                            c1,
                          )
                          .is_null()
                          {
                            (*ptr_to_globals).dot = yank_delete(p, q, ml, yf, 1i32)
                          } else if !strchr(
                            b"cdykjGHL+-{}\r\n\x00" as *const u8 as *const libc::c_char,
                            c1,
                          )
                          .is_null()
                          {
                            (*ptr_to_globals).dot = yank_delete(p, q, ml, yf, 1i32);
                            whole = 1i32
                          } else {
                            c1 = 27i32;
                            c = c1;
                            ml = 0;
                            indicate_error();
                          }
                          if ml != 0 && whole != 0 {
                            if c == 'c' as i32 {
                              (*ptr_to_globals).dot = char_insert(
                                (*ptr_to_globals).dot,
                                '\n' as i32 as libc::c_char,
                                2i32,
                              );
                              if whole != 0
                                && (*ptr_to_globals).dot != (*ptr_to_globals).end.offset(-1)
                              {
                                dot_prev();
                              }
                            } else if c == 'd' as i32 {
                              dot_begin();
                              dot_skip_over_ws();
                            }
                          }
                          if c1 != 27i32 {
                            if c == 'c' as i32 {
                              strcpy(
                                buf.as_mut_ptr(),
                                b"Change\x00" as *const u8 as *const libc::c_char,
                              );
                              current_block = 8629930936610358348;
                            } else {
                              if c == 'd' as i32 {
                                strcpy(
                                  buf.as_mut_ptr(),
                                  b"Delete\x00" as *const u8 as *const libc::c_char,
                                );
                              }
                              if c == 'y' as i32 || c == 'Y' as i32 {
                                strcpy(
                                  buf.as_mut_ptr(),
                                  b"Yank\x00" as *const u8 as *const libc::c_char,
                                );
                              }
                              p = (*ptr_to_globals).reg[(*ptr_to_globals).YDreg as usize];
                              q = p.offset(strlen(p) as isize);
                              cnt = 0;
                              while p <= q {
                                if *p as libc::c_int == '\n' as i32 {
                                  cnt += 1
                                }
                                p = p.offset(1)
                              }
                              status_line(
                                b"%s %u lines (%u chars) using [%c]\x00" as *const u8
                                  as *const libc::c_char,
                                buf.as_mut_ptr(),
                                cnt,
                                strlen((*ptr_to_globals).reg[(*ptr_to_globals).YDreg as usize])
                                  as libc::c_uint,
                                what_reg() as libc::c_int,
                              );
                              end_cmd_q();
                              current_block = 15129665204879337069;
                            }
                          } else {
                            current_block = 15129665204879337069;
                          }
                        }
                        5591548203144509315 => {
                          current_block = 2636677179867529885;
                        }
                        _ => {}
                      }
                      match current_block {
                        15129665204879337069 => {}
                        8629930936610358348 => {}
                        _ => {
                          match current_block {
                            2636677179867529885 => {
                              current_block = 12309206730560524281;
                            }
                            _ => {}
                          }
                          match current_block {
                            12309206730560524281 => {
                              current_block = 3325768110057758661;
                            }
                            _ => {}
                          }
                          match current_block {
                            3325768110057758661 => {
                              current_block = 14815832896553429982;
                            }
                            _ => {}
                          }
                          match current_block {
                            14815832896553429982 => {
                              current_block = 10731695520297161438;
                            }
                            _ => {}
                          }
                          match current_block {
                            10731695520297161438 => {
                              if c == '0' as i32 && (*ptr_to_globals).cmdcnt < 1i32 {
                                dot_begin();
                              } else {
                                (*ptr_to_globals).cmdcnt =
                                  (*ptr_to_globals).cmdcnt * 10i32 + (c - '0' as i32)
                              }
                              current_block = 15129665204879337069;
                            }
                            _ => {}
                          }
                          match current_block {
                            15129665204879337069 => {}
                            _ => {
                              loop {
                                match current_block {
                                  16813369756331276724 => {
                                    msg = std::ptr::null();
                                    current_block = 7392824444931029276;
                                  }
                                  7392824444931029276 => {
                                    dir = FORWARD as libc::c_int;
                                    p = (*ptr_to_globals).dot.offset(1);
                                    if *(*ptr_to_globals).last_search_pattern.offset(0)
                                      as libc::c_int
                                      == '?' as i32
                                    {
                                      dir = BACK as libc::c_int;
                                      p = (*ptr_to_globals).dot.offset(-1)
                                    }
                                    current_block = 4166979493554389389;
                                  }
                                  _ => {
                                    q = char_search(
                                      p,
                                      (*ptr_to_globals).last_search_pattern.offset(1),
                                      dir << 1i32 | FULL as libc::c_int,
                                    );
                                    if !q.is_null() {
                                      (*ptr_to_globals).dot = q;
                                      msg = std::ptr::null()
                                    } else {
                                      p = (*ptr_to_globals).text;
                                      if dir == BACK as libc::c_int {
                                        p = (*ptr_to_globals).end.offset(-1)
                                      }
                                      q = char_search(
                                        p,
                                        (*ptr_to_globals).last_search_pattern.offset(1),
                                        dir << 1i32 | FULL as libc::c_int,
                                      );
                                      if !q.is_null() {
                                        (*ptr_to_globals).dot = q;
                                        msg = b"search hit BOTTOM, continuing at TOP\x00"
                                          as *const u8
                                          as *const libc::c_char;
                                        if dir == BACK as libc::c_int {
                                          msg = b"search hit TOP, continuing at BOTTOM\x00"
                                            as *const u8
                                            as *const libc::c_char
                                        }
                                      } else {
                                        msg = b"Pattern not found\x00" as *const u8
                                          as *const libc::c_char
                                      }
                                    }
                                    if !msg.is_null() {
                                      status_line_bold(
                                        b"%s\x00" as *const u8 as *const libc::c_char,
                                        msg,
                                      );
                                    }
                                    (*ptr_to_globals).cmdcnt -= 1;
                                    if (*ptr_to_globals).cmdcnt > 0 {
                                      current_block = 16813369756331276724;
                                    } else {
                                      break;
                                    }
                                  }
                                }
                              }
                              current_block = 15129665204879337069;
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
        125 => {
          current_block = 14526470074083880812;
          match current_block {
            16992905640583886232 => {
              loop {
                if (*(*ptr_to_globals).dot as libc::c_int - 'a' as i32) as libc::c_uchar
                  as libc::c_int
                  <= 'z' as i32 - 'a' as i32
                {
                  undo_push(
                    (*ptr_to_globals).dot,
                    1i32 as libc::c_uint,
                    1i32 as libc::c_uchar,
                  );
                  *(*ptr_to_globals).dot =
                    bb_ascii_toupper(*(*ptr_to_globals).dot as libc::c_uchar) as libc::c_char;
                  undo_push(
                    (*ptr_to_globals).dot,
                    1i32 as libc::c_uint,
                    2i32 as libc::c_uchar,
                  );
                } else if (*(*ptr_to_globals).dot as libc::c_int - 'A' as i32) as libc::c_uchar
                  as libc::c_int
                  <= 'Z' as i32 - 'A' as i32
                {
                  undo_push(
                    (*ptr_to_globals).dot,
                    1i32 as libc::c_uint,
                    1i32 as libc::c_uchar,
                  );
                  *(*ptr_to_globals).dot =
                    bb_ascii_tolower(*(*ptr_to_globals).dot as libc::c_uchar) as libc::c_char;
                  undo_push(
                    (*ptr_to_globals).dot,
                    1i32 as libc::c_uint,
                    2i32 as libc::c_uchar,
                  );
                }
                dot_right();
                (*ptr_to_globals).cmdcnt -= 1;
                if !((*ptr_to_globals).cmdcnt > 0) {
                  break;
                }
              }
              end_cmd_q();
              current_block = 15129665204879337069;
            }
            8729655159604064397 => {
              c1 = get_one_char();
              cnt = 0;
              if c1 == '.' as i32 {
                cnt = (*ptr_to_globals)
                  .rows
                  .wrapping_sub(2i32 as libc::c_uint)
                  .wrapping_div(2i32 as libc::c_uint) as libc::c_int
              }
              if c1 == '-' as i32 {
                cnt = (*ptr_to_globals).rows.wrapping_sub(2i32 as libc::c_uint) as libc::c_int
              }
              (*ptr_to_globals).screenbegin = begin_line((*ptr_to_globals).dot);
              dot_scroll(cnt, -1i32);
              current_block = 15129665204879337069;
            }
            15899500648299942075 => {
              (*ptr_to_globals).last_forward_char = get_one_char();
              do_cmd(';' as i32);
              if *(*ptr_to_globals).dot as libc::c_int == (*ptr_to_globals).last_forward_char {
                dot_left();
              }
              (*ptr_to_globals).last_forward_char = 0;
              current_block = 15129665204879337069;
            }
            9051390181078481641 => {
              c1 = get_one_char();
              if *(*ptr_to_globals).dot as libc::c_int != '\n' as i32 {
                (*ptr_to_globals).dot =
                  text_hole_delete((*ptr_to_globals).dot, (*ptr_to_globals).dot, 1i32);
                (*ptr_to_globals).dot =
                  char_insert((*ptr_to_globals).dot, c1 as libc::c_char, 2i32);
                dot_left();
              }
              end_cmd_q();
              current_block = 15129665204879337069;
            }
            877115918601926659 => {
              dir = FORWARD as libc::c_int;
              if c == 'b' as i32 {
                dir = BACK as libc::c_int
              }
              while !((*ptr_to_globals).dot.offset(dir as isize) < (*ptr_to_globals).text
                || (*ptr_to_globals).dot.offset(dir as isize) > (*ptr_to_globals).end.offset(-1))
              {
                (*ptr_to_globals).dot = (*ptr_to_globals).dot.offset(dir as isize);
                if ({
                  let mut bb__isspace: libc::c_uchar =
                    (*(*ptr_to_globals).dot as libc::c_int - 9i32) as libc::c_uchar;
                  (bb__isspace as libc::c_int == ' ' as i32 - 9i32
                    || bb__isspace as libc::c_int <= 13i32 - 9i32) as libc::c_int
                }) != 0
                {
                  (*ptr_to_globals).dot = skip_thing(
                    (*ptr_to_globals).dot,
                    if c == 'e' as i32 { 2i32 } else { 1i32 },
                    dir,
                    S_OVER_WS as libc::c_int,
                  )
                }
                if bb_ascii_isalnum(*(*ptr_to_globals).dot as libc::c_uchar) != 0
                  || *(*ptr_to_globals).dot as libc::c_int == '_' as i32
                {
                  (*ptr_to_globals).dot =
                    skip_thing((*ptr_to_globals).dot, 1i32, dir, S_END_ALNUM as libc::c_int)
                } else if *strchrnul(
                  b"!\"#$%&\'()*+,-./:;<=>?@[\\]^_`{|}~\x00" as *const u8 as *const libc::c_char,
                  *(*ptr_to_globals).dot as libc::c_int,
                )
                .offset(0)
                  != 0
                {
                  (*ptr_to_globals).dot =
                    skip_thing((*ptr_to_globals).dot, 1i32, dir, S_END_PUNCT as libc::c_int)
                }
                (*ptr_to_globals).cmdcnt -= 1;
                if !((*ptr_to_globals).cmdcnt > 0) {
                  break;
                }
              }
              current_block = 15129665204879337069;
            }
            1085022737867179637 => {
              dot_begin();
              dot_skip_over_ws();
              current_block = 15129665204879337069;
            }
            3113147720494587438 => {
              c1 = get_one_char();
              if c1 != 'Z' as i32 {
                indicate_error();
              } else if (*ptr_to_globals).modified_count != 0 {
                if 1i32 != 0 && (*ptr_to_globals).readonly_mode as libc::c_int != 0 {
                  status_line_bold(
                    b"\'%s\' is read only\x00" as *const u8 as *const libc::c_char,
                    (*ptr_to_globals).current_filename,
                  );
                } else {
                  cnt = file_write(
                    (*ptr_to_globals).current_filename,
                    (*ptr_to_globals).text,
                    (*ptr_to_globals).end.offset(-1),
                  );
                  if cnt < 0 {
                    if cnt == -1i32 {
                      status_line_bold(b"Write error: %m\x00" as *const u8 as *const libc::c_char);
                    }
                  } else if cnt as libc::c_long
                    == (*ptr_to_globals)
                      .end
                      .offset(-1)
                      .wrapping_offset_from((*ptr_to_globals).text)
                      as libc::c_long
                      + 1
                  {
                    (*ptr_to_globals).editing = 0 as smallint
                  }
                }
              } else {
                (*ptr_to_globals).editing = 0 as smallint
              }
              current_block = 15129665204879337069;
            }
            12960118908218882441 => {
              p = begin_line((*ptr_to_globals).dot);
              if *p.offset(-1i32 as isize) as libc::c_int == '\n' as i32 {
                dot_prev();
                current_block = 2087484904894455135;
              } else {
                dot_begin();
                (*ptr_to_globals).dot =
                  char_insert((*ptr_to_globals).dot, '\n' as i32 as libc::c_char, 1i32);
                dot_prev();
                current_block = 8629930936610358348;
              }
            }
            8720450212473544924 => {
              (*ptr_to_globals).dot = (*ptr_to_globals).screenbegin;
              cnt = 0;
              while (cnt as libc::c_uint)
                < (*ptr_to_globals)
                  .rows
                  .wrapping_sub(1i32 as libc::c_uint)
                  .wrapping_div(2i32 as libc::c_uint)
              {
                (*ptr_to_globals).dot = next_line((*ptr_to_globals).dot);
                cnt += 1
              }
              current_block = 15129665204879337069;
            }
            13015277209715431090 => {
              (*ptr_to_globals).dot = end_screen();
              if (*ptr_to_globals).cmdcnt as libc::c_uint
                > (*ptr_to_globals).rows.wrapping_sub(1i32 as libc::c_uint)
              {
                (*ptr_to_globals).cmdcnt =
                  (*ptr_to_globals).rows.wrapping_sub(1i32 as libc::c_uint) as libc::c_int
              }
              (*ptr_to_globals).cmdcnt -= 1;
              if (*ptr_to_globals).cmdcnt > 0 {
                do_cmd('-' as i32);
              }
              dot_begin();
              dot_skip_over_ws();
              current_block = 15129665204879337069;
            }
            9800435767766781385 => {
              loop {
                dot_end();
                if (*ptr_to_globals).dot < (*ptr_to_globals).end.offset(-1) {
                  undo_push(
                    (*ptr_to_globals).dot,
                    1i32 as libc::c_uint,
                    1i32 as libc::c_uchar,
                  );
                  let fresh15 = (*ptr_to_globals).dot;
                  (*ptr_to_globals).dot = (*ptr_to_globals).dot.offset(1);
                  *fresh15 = ' ' as i32 as libc::c_char;
                  undo_push(
                    (*ptr_to_globals).dot.offset(-1),
                    1i32 as libc::c_uint,
                    2i32 as libc::c_uchar,
                  );
                  while ({
                    let mut bb__isblank: libc::c_uchar = *(*ptr_to_globals).dot as libc::c_uchar;
                    (bb__isblank as libc::c_int == ' ' as i32
                      || bb__isblank as libc::c_int == '\t' as i32)
                      as libc::c_int
                  }) != 0
                  {
                    text_hole_delete((*ptr_to_globals).dot, (*ptr_to_globals).dot, 2i32);
                  }
                }
                (*ptr_to_globals).cmdcnt -= 1;
                if !((*ptr_to_globals).cmdcnt > 0) {
                  break;
                }
              }
              end_cmd_q();
              current_block = 15129665204879337069;
            }
            3432363526595694666 => {
              dot_begin();
              dot_skip_over_ws();
              current_block = 3268579060917229304;
            }
            3494829253343353619 => {
              (*ptr_to_globals).dot = (*ptr_to_globals).screenbegin;
              if (*ptr_to_globals).cmdcnt as libc::c_uint
                > (*ptr_to_globals).rows.wrapping_sub(1i32 as libc::c_uint)
              {
                (*ptr_to_globals).cmdcnt =
                  (*ptr_to_globals).rows.wrapping_sub(1i32 as libc::c_uint) as libc::c_int
              }
              (*ptr_to_globals).cmdcnt -= 1;
              if (*ptr_to_globals).cmdcnt > 0 {
                do_cmd('+' as i32);
              }
              dot_skip_over_ws();
              current_block = 15129665204879337069;
            }
            17973101765331640574 => {
              c1 = get_one_char();
              if c1 != 'g' as i32 {
                buf[0] = 'g' as i32 as libc::c_char;
                buf[1] = if c1 >= 0 { c1 } else { '*' as i32 } as libc::c_char;
                buf[2] = '\u{0}' as i32 as libc::c_char;
                not_implemented(buf.as_mut_ptr());
                current_block = 15129665204879337069;
              } else {
                if (*ptr_to_globals).cmdcnt == 0 {
                  (*ptr_to_globals).cmdcnt = 1i32
                }
                current_block = 11945623545738147997;
              }
            }
            16546625800574160972 => {
              save_dot = (*ptr_to_globals).dot;
              (*ptr_to_globals).dot = dollar_line((*ptr_to_globals).dot);
              (*ptr_to_globals).dot = yank_delete(
                save_dot,
                (*ptr_to_globals).dot,
                0,
                YANKDEL as libc::c_int,
                1i32,
              );
              if c == 'C' as i32 {
                current_block = 8629930936610358348;
              } else {
                if c == 'D' as i32 {
                  end_cmd_q();
                }
                current_block = 15129665204879337069;
              }
            }
            11937696639986586685 => {
              cnt = count_lines((*ptr_to_globals).text, (*ptr_to_globals).dot);
              c1 = get_one_char();
              find_range(&mut p, &mut q, c1 as libc::c_char);
              yank_delete(p, q, 1i32, YANKONLY as libc::c_int, 0);
              p = begin_line(p);
              q = end_line(q);
              i = count_lines(p, q);
              while i > 0 {
                if c == '<' as i32 {
                  if *p as libc::c_int == '\t' as i32 {
                    text_hole_delete(p, p, 0);
                  } else if *p as libc::c_int == ' ' as i32 {
                    j = 0;
                    while *p as libc::c_int == ' ' as i32 && j < (*ptr_to_globals).tabstop {
                      text_hole_delete(p, p, 0);
                      j += 1
                    }
                  }
                } else if c == '>' as i32 {
                  char_insert(p, '\t' as i32 as libc::c_char, 1i32);
                }
                i -= 1;
                p = next_line(p)
              }
              (*ptr_to_globals).dot = find_line(cnt);
              dot_skip_over_ws();
              end_cmd_q();
              current_block = 15129665204879337069;
            }
            17725350714912028156 => {
              p = get_input_line(b":\x00" as *const u8 as *const libc::c_char);
              colon(p);
              current_block = 15129665204879337069;
            }
            14526470074083880812 => {
              q = char_search(
                (*ptr_to_globals).dot,
                b"\n\n\x00" as *const u8 as *const libc::c_char,
                (FORWARD as libc::c_int) << 1i32 | FULL as libc::c_int,
              );
              if !q.is_null() {
                (*ptr_to_globals).dot = next_line(q)
              }
              current_block = 15129665204879337069;
            }
            8893187391306414141 => {
              q = char_search(
                (*ptr_to_globals).dot,
                b"\n\n\x00" as *const u8 as *const libc::c_char,
                ((BACK as libc::c_int as libc::c_uint) << 1i32
                  | FULL as libc::c_int as libc::c_uint) as libc::c_int,
              );
              if !q.is_null() {
                (*ptr_to_globals).dot = next_line(q)
              }
              current_block = 15129665204879337069;
            }
            7021673758293221412 => {
              dir = BACK as libc::c_int;
              p = (*ptr_to_globals).dot.offset(-1);
              if *(*ptr_to_globals).last_search_pattern.offset(0) as libc::c_int == '?' as i32 {
                dir = FORWARD as libc::c_int;
                p = (*ptr_to_globals).dot.offset(1)
              }
              current_block = 4166979493554389389;
            }
            18374191879090272823 => {
              buf[0] = c as libc::c_char;
              buf[1] = '\u{0}' as i32 as libc::c_char;
              q = get_input_line(buf.as_mut_ptr());
              if *q.offset(0) as libc::c_int != 0 && *q.offset(1) == 0 {
                if *(*ptr_to_globals).last_search_pattern.offset(0) != 0 {
                  *(*ptr_to_globals).last_search_pattern.offset(0) = c as libc::c_char
                }
                current_block = 7392824444931029276;
              } else if *q.offset(0) != 0 {
                free((*ptr_to_globals).last_search_pattern as *mut libc::c_void);
                (*ptr_to_globals).last_search_pattern = crate::libbb::xfuncs_printf::xstrdup(q);
                current_block = 7392824444931029276;
              } else {
                current_block = 15129665204879337069;
              }
            }
            16407828456666301883 => {
              if (*ptr_to_globals).last_forward_char == 0 {
                current_block = 15129665204879337069;
              } else {
                loop {
                  q = (*ptr_to_globals).dot.offset(-1);
                  while q >= (*ptr_to_globals).text
                    && *q as libc::c_int != '\n' as i32
                    && *q as libc::c_int != (*ptr_to_globals).last_forward_char
                  {
                    q = q.offset(-1)
                  }
                  if q >= (*ptr_to_globals).text
                    && *q as libc::c_int == (*ptr_to_globals).last_forward_char
                  {
                    (*ptr_to_globals).dot = q
                  }
                  (*ptr_to_globals).cmdcnt -= 1;
                  if !((*ptr_to_globals).cmdcnt > 0) {
                    break;
                  }
                }
                current_block = 15129665204879337069;
              }
            }
            9018432604062702004 => {
              q = (*ptr_to_globals).dot;
              while q < (*ptr_to_globals).end && *q as libc::c_int != '\n' as i32 {
                if !strchr(
                  b"()[]{}\x00" as *const u8 as *const libc::c_char,
                  *q as libc::c_int,
                )
                .is_null()
                {
                  p = find_pair(q, *q);
                  if p.is_null() {
                    indicate_error();
                  } else {
                    (*ptr_to_globals).dot = p
                  }
                  break;
                } else {
                  q = q.offset(1)
                }
              }
              if *q as libc::c_int == '\n' as i32 {
                indicate_error();
              }
              current_block = 15129665204879337069;
            }
            10247103787464459848 => {
              p = (*ptr_to_globals).reg[(*ptr_to_globals).YDreg as usize];
              if p.is_null() {
                status_line_bold(
                  b"Nothing in register %c\x00" as *const u8 as *const libc::c_char,
                  what_reg() as libc::c_int,
                );
              } else {
                if !strchr(p, '\n' as i32).is_null() {
                  if c == 'P' as i32 {
                    dot_begin();
                  }
                  if c == 'p' as i32 {
                    if end_line((*ptr_to_globals).dot) == (*ptr_to_globals).end.offset(-1) {
                      (*ptr_to_globals).dot = (*ptr_to_globals).end
                    } else {
                      dot_next();
                    }
                  }
                } else if c == 'p' as i32 {
                  dot_right();
                }
                string_insert((*ptr_to_globals).dot, p, 1i32);
                end_cmd_q();
              }
              current_block = 15129665204879337069;
            }
            15260732871948875843 => {
              c1 = (get_one_char() | 0x20i32) - 'a' as i32;
              if c1 as libc::c_uint <= 25i32 as libc::c_uint {
                (*ptr_to_globals).mark[c1 as usize] = (*ptr_to_globals).dot
              } else {
                indicate_error();
              }
              current_block = 15129665204879337069;
            }
            12738322036487086035 => {
              c1 = get_one_char() | 0x20i32;
              if (c1 - 'a' as i32) as libc::c_uint <= 25i32 as libc::c_uint {
                c1 = c1 - 'a' as i32;
                q = (*ptr_to_globals).mark[c1 as usize];
                if (*ptr_to_globals).text <= q && q < (*ptr_to_globals).end {
                  (*ptr_to_globals).dot = q;
                  dot_begin();
                  dot_skip_over_ws();
                }
              } else if c1 == '\'' as i32 {
                (*ptr_to_globals).dot = swap_context((*ptr_to_globals).dot);
                dot_begin();
                dot_skip_over_ws();
              } else {
                indicate_error();
              }
              current_block = 15129665204879337069;
            }
            13255096073384561358 => {
              c1 = (get_one_char() | 0x20i32) - 'a' as i32;
              if c1 as libc::c_uint <= 25i32 as libc::c_uint {
                (*ptr_to_globals).YDreg = c1 as smalluint
              } else {
                indicate_error();
              }
              current_block = 15129665204879337069;
            }
            10258711639984089377 => {
              if (*ptr_to_globals).cmd_mode as libc::c_int == 0 {
                indicate_error();
              }
              (*ptr_to_globals).cmd_mode = 0 as smallint;
              undo_queue_commit();
              end_cmd_q();
              (*ptr_to_globals).last_status_cksum = 0;
              current_block = 15129665204879337069;
            }
            11439127087547047736 => {
              buf[0] = c as libc::c_char;
              buf[1] = '\u{0}' as i32 as libc::c_char;
              not_implemented(buf.as_mut_ptr());
              end_cmd_q();
              current_block = 17440971994642376514;
            }
            7961798899781870241 => {
              dot_scroll(
                (*ptr_to_globals).rows.wrapping_sub(2i32 as libc::c_uint) as libc::c_int,
                -1i32,
              );
              current_block = 15129665204879337069;
            }
            9426343755402444879 => {
              dot_scroll(
                (*ptr_to_globals)
                  .rows
                  .wrapping_sub(2i32 as libc::c_uint)
                  .wrapping_div(2i32 as libc::c_uint) as libc::c_int,
                1i32,
              );
              current_block = 15129665204879337069;
            }
            13352459794680105913 => {
              dot_scroll(1i32, 1i32);
              current_block = 15129665204879337069;
            }
            14142272253464333006 => {
              dot_scroll(
                (*ptr_to_globals).rows.wrapping_sub(2i32 as libc::c_uint) as libc::c_int,
                1i32,
              );
              current_block = 15129665204879337069;
            }
            10758177197742640066 => {
              (*ptr_to_globals).last_status_cksum = 0;
              current_block = 15129665204879337069;
            }
            6152256259730122749 => {
              current_block = 7534742345255184552;
            }
            12883932598258173301 => {
              current_block = 8800996768013373992;
            }
            11242998110520238401 => {
              redraw(1i32);
              current_block = 15129665204879337069;
            }
            13619733043935729992 => {
              loop {
                dot_next();
                dot_skip_over_ws();
                (*ptr_to_globals).cmdcnt -= 1;
                if !((*ptr_to_globals).cmdcnt > 0) {
                  break;
                }
              }
              current_block = 15129665204879337069;
            }
            9339065157412720613 => {
              dot_scroll(
                (*ptr_to_globals)
                  .rows
                  .wrapping_sub(2i32 as libc::c_uint)
                  .wrapping_div(2i32 as libc::c_uint) as libc::c_int,
                -1i32,
              );
              current_block = 15129665204879337069;
            }
            11447082683497798022 => {
              dot_scroll(1i32, -1i32);
              current_block = 15129665204879337069;
            }
            5182000506326660482 => {
              current_block = 13993698454868426881;
            }
            1105010766850597332 => {
              if !(*ptr_to_globals).reg[27].is_null() {
                p = begin_line((*ptr_to_globals).dot);
                q = end_line((*ptr_to_globals).dot);
                p = text_hole_delete(p, q, 1i32);
                p = p.offset(string_insert(p, (*ptr_to_globals).reg[27], 2i32) as isize);
                (*ptr_to_globals).dot = p;
                dot_skip_over_ws();
              }
              current_block = 15129665204879337069;
            }
            8616046655533110204 => {
              undo_pop();
              current_block = 15129665204879337069;
            }
            5127767458142431603 => {
              loop {
                (*ptr_to_globals).dot = end_line((*ptr_to_globals).dot);
                (*ptr_to_globals).cmdcnt -= 1;
                if (*ptr_to_globals).cmdcnt <= 0 {
                  break;
                }
                dot_next();
              }
              current_block = 15129665204879337069;
            }
            222014967776118151 => {
              (*ptr_to_globals).last_forward_char = get_one_char();
              current_block = 7856905509180742666;
            }
            11209792479411604110 => {
              loop {
                dot_prev();
                dot_skip_over_ws();
                (*ptr_to_globals).cmdcnt -= 1;
                if !((*ptr_to_globals).cmdcnt > 0) {
                  break;
                }
              }
              current_block = 15129665204879337069;
            }
            3364823792826654116 => {
              if (*ptr_to_globals).lmc_len != 0 {
                (*ptr_to_globals).ioq_start = crate::libbb::xfuncs_printf::xstrndup(
                  (*ptr_to_globals).last_modifying_cmd.as_mut_ptr(),
                  (*ptr_to_globals).lmc_len,
                );
                (*ptr_to_globals).ioq = (*ptr_to_globals).ioq_start
              }
              current_block = 15129665204879337069;
            }
            18096603330221575131 => {
              current_block = 17498168302144015873;
            }
            16891123271837848903 => {
              dot_end();
              current_block = 1752638907092016026;
            }
            8517235759107662071 => {
              current_block = 5847749760081351726;
            }
            12525254419223051704 => {
              if (*ptr_to_globals).dot < (*ptr_to_globals).end.offset(-1) {
                (*ptr_to_globals).dot = yank_delete(
                  (*ptr_to_globals).dot,
                  (*ptr_to_globals).dot,
                  1i32,
                  YANKDEL as libc::c_int,
                  1i32,
                )
              }
              current_block = 15129665204879337069;
            }
            15232911949322867522 => {
              current_block = 17251831742223396249;
            }
            10863374208794025069 => {
              current_block = 1895262434596074581;
            }
            451126677064669119 => {
              loop {
                dot_prev();
                (*ptr_to_globals).dot = move_to_col(
                  (*ptr_to_globals).dot,
                  (*ptr_to_globals).ccol + (*ptr_to_globals).offset,
                );
                (*ptr_to_globals).cmdcnt -= 1;
                if !((*ptr_to_globals).cmdcnt > 0) {
                  break;
                }
              }
              current_block = 15129665204879337069;
            }
            4611735929166613116 => {
              loop {
                if bb_ascii_isalnum(*(*ptr_to_globals).dot as libc::c_uchar) != 0
                  || *(*ptr_to_globals).dot as libc::c_int == '_' as i32
                {
                  (*ptr_to_globals).dot = skip_thing(
                    (*ptr_to_globals).dot,
                    1i32,
                    FORWARD as libc::c_int,
                    S_END_ALNUM as libc::c_int,
                  )
                } else if *strchrnul(
                  b"!\"#$%&\'()*+,-./:;<=>?@[\\]^_`{|}~\x00" as *const u8 as *const libc::c_char,
                  *(*ptr_to_globals).dot as libc::c_int,
                )
                .offset(0)
                  != 0
                {
                  (*ptr_to_globals).dot = skip_thing(
                    (*ptr_to_globals).dot,
                    1i32,
                    FORWARD as libc::c_int,
                    S_END_PUNCT as libc::c_int,
                  )
                }
                if (*ptr_to_globals).dot < (*ptr_to_globals).end.offset(-1) {
                  (*ptr_to_globals).dot = (*ptr_to_globals).dot.offset(1)
                }
                if ({
                  let mut bb__isspace: libc::c_uchar =
                    (*(*ptr_to_globals).dot as libc::c_int - 9i32) as libc::c_uchar;
                  (bb__isspace as libc::c_int == ' ' as i32 - 9i32
                    || bb__isspace as libc::c_int <= 13i32 - 9i32) as libc::c_int
                }) != 0
                {
                  (*ptr_to_globals).dot = skip_thing(
                    (*ptr_to_globals).dot,
                    2i32,
                    FORWARD as libc::c_int,
                    S_OVER_WS as libc::c_int,
                  )
                }
                (*ptr_to_globals).cmdcnt -= 1;
                if !((*ptr_to_globals).cmdcnt > 0) {
                  break;
                }
              }
              current_block = 15129665204879337069;
            }
            4386451087681909888 => {
              (*ptr_to_globals).dot =
                move_to_col((*ptr_to_globals).dot, (*ptr_to_globals).cmdcnt - 1i32);
              current_block = 15129665204879337069;
            }
            1296397779060594135 => {
              dot_begin();
              current_block = 15129665204879337069;
            }
            _ => {}
          }
          match current_block {
            15129665204879337069 => {}
            8629930936610358348 => {}
            _ => {
              match current_block {
                17251831742223396249 => {
                  dir = 0;
                  if c == 'X' as i32 {
                    dir = -1i32
                  }
                  loop {
                    if *(*ptr_to_globals).dot.offset(dir as isize) as libc::c_int != '\n' as i32 {
                      if c == 'X' as i32 {
                        (*ptr_to_globals).dot = (*ptr_to_globals).dot.offset(-1)
                      }
                      (*ptr_to_globals).dot = yank_delete(
                        (*ptr_to_globals).dot,
                        (*ptr_to_globals).dot,
                        0,
                        YANKDEL as libc::c_int,
                        1i32,
                      )
                    }
                    (*ptr_to_globals).cmdcnt -= 1;
                    if !((*ptr_to_globals).cmdcnt > 0) {
                      break;
                    }
                  }
                  end_cmd_q();
                  if c == 's' as i32 {
                    current_block = 8629930936610358348;
                  } else {
                    current_block = 15129665204879337069;
                  }
                }
                2087484904894455135 => {
                  dot_end();
                  (*ptr_to_globals).dot =
                    char_insert((*ptr_to_globals).dot, '\n' as i32 as libc::c_char, 1i32);
                  current_block = 8629930936610358348;
                }
                11945623545738147997 => {
                  (*ptr_to_globals).dot = (*ptr_to_globals).end.offset(-1);
                  if (*ptr_to_globals).cmdcnt > 0 {
                    (*ptr_to_globals).dot = find_line((*ptr_to_globals).cmdcnt)
                  }
                  dot_skip_over_ws();
                  current_block = 15129665204879337069;
                }
                5847749760081351726 => {
                  dir = FORWARD as libc::c_int;
                  if c == 'B' as i32 {
                    dir = BACK as libc::c_int
                  }
                  loop {
                    if c == 'W' as i32
                      || ({
                        let mut bb__isspace: libc::c_uchar =
                          (*(*ptr_to_globals).dot.offset(dir as isize) as libc::c_int - 9i32)
                            as libc::c_uchar;
                        (bb__isspace as libc::c_int == ' ' as i32 - 9i32
                          || bb__isspace as libc::c_int <= 13i32 - 9i32)
                          as libc::c_int
                      }) != 0
                    {
                      (*ptr_to_globals).dot =
                        skip_thing((*ptr_to_globals).dot, 1i32, dir, S_TO_WS as libc::c_int);
                      (*ptr_to_globals).dot =
                        skip_thing((*ptr_to_globals).dot, 2i32, dir, S_OVER_WS as libc::c_int)
                    }
                    if c != 'W' as i32 {
                      (*ptr_to_globals).dot =
                        skip_thing((*ptr_to_globals).dot, 1i32, dir, S_BEFORE_WS as libc::c_int)
                    }
                    (*ptr_to_globals).cmdcnt -= 1;
                    if !((*ptr_to_globals).cmdcnt > 0) {
                      break;
                    }
                  }
                  current_block = 15129665204879337069;
                }
                17440971994642376514 => {
                  current_block = 15129665204879337069;
                }
                7534742345255184552 => {
                  current_block = 17247297260531395789;
                }
                8800996768013373992 => {
                  loop {
                    dot_next();
                    (*ptr_to_globals).dot = move_to_col(
                      (*ptr_to_globals).dot,
                      (*ptr_to_globals).ccol + (*ptr_to_globals).offset,
                    );
                    (*ptr_to_globals).cmdcnt -= 1;
                    if !((*ptr_to_globals).cmdcnt > 0) {
                      break;
                    }
                  }
                  current_block = 15129665204879337069;
                }
                13993698454868426881 => {
                  loop {
                    dot_right();
                    (*ptr_to_globals).cmdcnt -= 1;
                    if !((*ptr_to_globals).cmdcnt > 0) {
                      break;
                    }
                  }
                  current_block = 15129665204879337069;
                }
                7856905509180742666 => {
                  while !((*ptr_to_globals).last_forward_char == 0) {
                    q = (*ptr_to_globals).dot.offset(1);
                    while q < (*ptr_to_globals).end.offset(-1)
                      && *q as libc::c_int != '\n' as i32
                      && *q as libc::c_int != (*ptr_to_globals).last_forward_char
                    {
                      q = q.offset(1)
                    }
                    if *q as libc::c_int == (*ptr_to_globals).last_forward_char {
                      (*ptr_to_globals).dot = q
                    }
                    (*ptr_to_globals).cmdcnt -= 1;
                    if !((*ptr_to_globals).cmdcnt > 0) {
                      break;
                    }
                  }
                  current_block = 15129665204879337069;
                }
                17498168302144015873 => {
                  current_block = 8681395796513813967;
                }
                1752638907092016026 => {
                  if *(*ptr_to_globals).dot as libc::c_int != '\n' as i32 {
                    (*ptr_to_globals).dot = (*ptr_to_globals).dot.offset(1)
                  }
                  current_block = 8629930936610358348;
                }
                3268579060917229304 => {
                  current_block = 8629930936610358348;
                }
                1895262434596074581 => {
                  current_block = 8908416993177701018;
                }
                _ => {}
              }
              match current_block {
                8629930936610358348 => {}
                15129665204879337069 => {}
                _ => {
                  match current_block {
                    17247297260531395789 => {
                      loop {
                        dot_left();
                        (*ptr_to_globals).cmdcnt -= 1;
                        if !((*ptr_to_globals).cmdcnt > 0) {
                          break;
                        }
                      }
                      current_block = 15129665204879337069;
                    }
                    8681395796513813967 => {
                      current_block = 5591548203144509315;
                    }
                    8908416993177701018 => {
                      current_block = 16124761010012532485;
                    }
                    _ => {}
                  }
                  match current_block {
                    15129665204879337069 => {}
                    _ => {
                      match current_block {
                        16124761010012532485 => {
                          let mut yf: libc::c_int = 0;
                          let mut ml: libc::c_int = 0;
                          let mut whole: libc::c_int = 0;
                          yf = YANKDEL as libc::c_int;
                          if c == 'y' as i32 || c == 'Y' as i32 {
                            yf = YANKONLY as libc::c_int
                          }
                          c1 = 'y' as i32;
                          if c != 'Y' as i32 {
                            c1 = get_one_char()
                          }
                          ml = find_range(&mut p, &mut q, c1 as libc::c_char);
                          place_cursor(0i32, 0);
                          if c1 == 27i32 {
                            c1 = 27i32;
                            c = c1
                          } else if !strchr(b"wW\x00" as *const u8 as *const libc::c_char, c1)
                            .is_null()
                          {
                            ml = 0;
                            if c == 'c' as i32 {
                              while ({
                                let mut bb__isspace: libc::c_uchar =
                                  (*q as libc::c_int - 9i32) as libc::c_uchar;
                                (bb__isspace as libc::c_int == ' ' as i32 - 9i32
                                  || bb__isspace as libc::c_int <= 13i32 - 9i32)
                                  as libc::c_int
                              }) != 0
                                && q > p
                              {
                                q = q.offset(-1)
                              }
                            }
                            (*ptr_to_globals).dot = yank_delete(p, q, ml, yf, 1i32)
                          } else if !strchr(
                            b"^0bBeEft%$ lh\x08\x7f\x00" as *const u8 as *const libc::c_char,
                            c1,
                          )
                          .is_null()
                          {
                            (*ptr_to_globals).dot = yank_delete(p, q, ml, yf, 1i32)
                          } else if !strchr(
                            b"cdykjGHL+-{}\r\n\x00" as *const u8 as *const libc::c_char,
                            c1,
                          )
                          .is_null()
                          {
                            (*ptr_to_globals).dot = yank_delete(p, q, ml, yf, 1i32);
                            whole = 1i32
                          } else {
                            c1 = 27i32;
                            c = c1;
                            ml = 0;
                            indicate_error();
                          }
                          if ml != 0 && whole != 0 {
                            if c == 'c' as i32 {
                              (*ptr_to_globals).dot = char_insert(
                                (*ptr_to_globals).dot,
                                '\n' as i32 as libc::c_char,
                                2i32,
                              );
                              if whole != 0
                                && (*ptr_to_globals).dot != (*ptr_to_globals).end.offset(-1)
                              {
                                dot_prev();
                              }
                            } else if c == 'd' as i32 {
                              dot_begin();
                              dot_skip_over_ws();
                            }
                          }
                          if c1 != 27i32 {
                            if c == 'c' as i32 {
                              strcpy(
                                buf.as_mut_ptr(),
                                b"Change\x00" as *const u8 as *const libc::c_char,
                              );
                              current_block = 8629930936610358348;
                            } else {
                              if c == 'd' as i32 {
                                strcpy(
                                  buf.as_mut_ptr(),
                                  b"Delete\x00" as *const u8 as *const libc::c_char,
                                );
                              }
                              if c == 'y' as i32 || c == 'Y' as i32 {
                                strcpy(
                                  buf.as_mut_ptr(),
                                  b"Yank\x00" as *const u8 as *const libc::c_char,
                                );
                              }
                              p = (*ptr_to_globals).reg[(*ptr_to_globals).YDreg as usize];
                              q = p.offset(strlen(p) as isize);
                              cnt = 0;
                              while p <= q {
                                if *p as libc::c_int == '\n' as i32 {
                                  cnt += 1
                                }
                                p = p.offset(1)
                              }
                              status_line(
                                b"%s %u lines (%u chars) using [%c]\x00" as *const u8
                                  as *const libc::c_char,
                                buf.as_mut_ptr(),
                                cnt,
                                strlen((*ptr_to_globals).reg[(*ptr_to_globals).YDreg as usize])
                                  as libc::c_uint,
                                what_reg() as libc::c_int,
                              );
                              end_cmd_q();
                              current_block = 15129665204879337069;
                            }
                          } else {
                            current_block = 15129665204879337069;
                          }
                        }
                        5591548203144509315 => {
                          current_block = 2636677179867529885;
                        }
                        _ => {}
                      }
                      match current_block {
                        15129665204879337069 => {}
                        8629930936610358348 => {}
                        _ => {
                          match current_block {
                            2636677179867529885 => {
                              current_block = 12309206730560524281;
                            }
                            _ => {}
                          }
                          match current_block {
                            12309206730560524281 => {
                              current_block = 3325768110057758661;
                            }
                            _ => {}
                          }
                          match current_block {
                            3325768110057758661 => {
                              current_block = 14815832896553429982;
                            }
                            _ => {}
                          }
                          match current_block {
                            14815832896553429982 => {
                              current_block = 10731695520297161438;
                            }
                            _ => {}
                          }
                          match current_block {
                            10731695520297161438 => {
                              if c == '0' as i32 && (*ptr_to_globals).cmdcnt < 1i32 {
                                dot_begin();
                              } else {
                                (*ptr_to_globals).cmdcnt =
                                  (*ptr_to_globals).cmdcnt * 10i32 + (c - '0' as i32)
                              }
                              current_block = 15129665204879337069;
                            }
                            _ => {}
                          }
                          match current_block {
                            15129665204879337069 => {}
                            _ => {
                              loop {
                                match current_block {
                                  16813369756331276724 => {
                                    msg = std::ptr::null();
                                    current_block = 7392824444931029276;
                                  }
                                  7392824444931029276 => {
                                    dir = FORWARD as libc::c_int;
                                    p = (*ptr_to_globals).dot.offset(1);
                                    if *(*ptr_to_globals).last_search_pattern.offset(0)
                                      as libc::c_int
                                      == '?' as i32
                                    {
                                      dir = BACK as libc::c_int;
                                      p = (*ptr_to_globals).dot.offset(-1)
                                    }
                                    current_block = 4166979493554389389;
                                  }
                                  _ => {
                                    q = char_search(
                                      p,
                                      (*ptr_to_globals).last_search_pattern.offset(1),
                                      dir << 1i32 | FULL as libc::c_int,
                                    );
                                    if !q.is_null() {
                                      (*ptr_to_globals).dot = q;
                                      msg = std::ptr::null()
                                    } else {
                                      p = (*ptr_to_globals).text;
                                      if dir == BACK as libc::c_int {
                                        p = (*ptr_to_globals).end.offset(-1)
                                      }
                                      q = char_search(
                                        p,
                                        (*ptr_to_globals).last_search_pattern.offset(1),
                                        dir << 1i32 | FULL as libc::c_int,
                                      );
                                      if !q.is_null() {
                                        (*ptr_to_globals).dot = q;
                                        msg = b"search hit BOTTOM, continuing at TOP\x00"
                                          as *const u8
                                          as *const libc::c_char;
                                        if dir == BACK as libc::c_int {
                                          msg = b"search hit TOP, continuing at BOTTOM\x00"
                                            as *const u8
                                            as *const libc::c_char
                                        }
                                      } else {
                                        msg = b"Pattern not found\x00" as *const u8
                                          as *const libc::c_char
                                      }
                                    }
                                    if !msg.is_null() {
                                      status_line_bold(
                                        b"%s\x00" as *const u8 as *const libc::c_char,
                                        msg,
                                      );
                                    }
                                    (*ptr_to_globals).cmdcnt -= 1;
                                    if (*ptr_to_globals).cmdcnt > 0 {
                                      current_block = 16813369756331276724;
                                    } else {
                                      break;
                                    }
                                  }
                                }
                              }
                              current_block = 15129665204879337069;
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
        48 => {
          current_block = 18096603330221575131;
          match current_block {
            16992905640583886232 => {
              loop {
                if (*(*ptr_to_globals).dot as libc::c_int - 'a' as i32) as libc::c_uchar
                  as libc::c_int
                  <= 'z' as i32 - 'a' as i32
                {
                  undo_push(
                    (*ptr_to_globals).dot,
                    1i32 as libc::c_uint,
                    1i32 as libc::c_uchar,
                  );
                  *(*ptr_to_globals).dot =
                    bb_ascii_toupper(*(*ptr_to_globals).dot as libc::c_uchar) as libc::c_char;
                  undo_push(
                    (*ptr_to_globals).dot,
                    1i32 as libc::c_uint,
                    2i32 as libc::c_uchar,
                  );
                } else if (*(*ptr_to_globals).dot as libc::c_int - 'A' as i32) as libc::c_uchar
                  as libc::c_int
                  <= 'Z' as i32 - 'A' as i32
                {
                  undo_push(
                    (*ptr_to_globals).dot,
                    1i32 as libc::c_uint,
                    1i32 as libc::c_uchar,
                  );
                  *(*ptr_to_globals).dot =
                    bb_ascii_tolower(*(*ptr_to_globals).dot as libc::c_uchar) as libc::c_char;
                  undo_push(
                    (*ptr_to_globals).dot,
                    1i32 as libc::c_uint,
                    2i32 as libc::c_uchar,
                  );
                }
                dot_right();
                (*ptr_to_globals).cmdcnt -= 1;
                if !((*ptr_to_globals).cmdcnt > 0) {
                  break;
                }
              }
              end_cmd_q();
              current_block = 15129665204879337069;
            }
            8729655159604064397 => {
              c1 = get_one_char();
              cnt = 0;
              if c1 == '.' as i32 {
                cnt = (*ptr_to_globals)
                  .rows
                  .wrapping_sub(2i32 as libc::c_uint)
                  .wrapping_div(2i32 as libc::c_uint) as libc::c_int
              }
              if c1 == '-' as i32 {
                cnt = (*ptr_to_globals).rows.wrapping_sub(2i32 as libc::c_uint) as libc::c_int
              }
              (*ptr_to_globals).screenbegin = begin_line((*ptr_to_globals).dot);
              dot_scroll(cnt, -1i32);
              current_block = 15129665204879337069;
            }
            15899500648299942075 => {
              (*ptr_to_globals).last_forward_char = get_one_char();
              do_cmd(';' as i32);
              if *(*ptr_to_globals).dot as libc::c_int == (*ptr_to_globals).last_forward_char {
                dot_left();
              }
              (*ptr_to_globals).last_forward_char = 0;
              current_block = 15129665204879337069;
            }
            9051390181078481641 => {
              c1 = get_one_char();
              if *(*ptr_to_globals).dot as libc::c_int != '\n' as i32 {
                (*ptr_to_globals).dot =
                  text_hole_delete((*ptr_to_globals).dot, (*ptr_to_globals).dot, 1i32);
                (*ptr_to_globals).dot =
                  char_insert((*ptr_to_globals).dot, c1 as libc::c_char, 2i32);
                dot_left();
              }
              end_cmd_q();
              current_block = 15129665204879337069;
            }
            877115918601926659 => {
              dir = FORWARD as libc::c_int;
              if c == 'b' as i32 {
                dir = BACK as libc::c_int
              }
              while !((*ptr_to_globals).dot.offset(dir as isize) < (*ptr_to_globals).text
                || (*ptr_to_globals).dot.offset(dir as isize) > (*ptr_to_globals).end.offset(-1))
              {
                (*ptr_to_globals).dot = (*ptr_to_globals).dot.offset(dir as isize);
                if ({
                  let mut bb__isspace: libc::c_uchar =
                    (*(*ptr_to_globals).dot as libc::c_int - 9i32) as libc::c_uchar;
                  (bb__isspace as libc::c_int == ' ' as i32 - 9i32
                    || bb__isspace as libc::c_int <= 13i32 - 9i32) as libc::c_int
                }) != 0
                {
                  (*ptr_to_globals).dot = skip_thing(
                    (*ptr_to_globals).dot,
                    if c == 'e' as i32 { 2i32 } else { 1i32 },
                    dir,
                    S_OVER_WS as libc::c_int,
                  )
                }
                if bb_ascii_isalnum(*(*ptr_to_globals).dot as libc::c_uchar) != 0
                  || *(*ptr_to_globals).dot as libc::c_int == '_' as i32
                {
                  (*ptr_to_globals).dot =
                    skip_thing((*ptr_to_globals).dot, 1i32, dir, S_END_ALNUM as libc::c_int)
                } else if *strchrnul(
                  b"!\"#$%&\'()*+,-./:;<=>?@[\\]^_`{|}~\x00" as *const u8 as *const libc::c_char,
                  *(*ptr_to_globals).dot as libc::c_int,
                )
                .offset(0)
                  != 0
                {
                  (*ptr_to_globals).dot =
                    skip_thing((*ptr_to_globals).dot, 1i32, dir, S_END_PUNCT as libc::c_int)
                }
                (*ptr_to_globals).cmdcnt -= 1;
                if !((*ptr_to_globals).cmdcnt > 0) {
                  break;
                }
              }
              current_block = 15129665204879337069;
            }
            1085022737867179637 => {
              dot_begin();
              dot_skip_over_ws();
              current_block = 15129665204879337069;
            }
            3113147720494587438 => {
              c1 = get_one_char();
              if c1 != 'Z' as i32 {
                indicate_error();
              } else if (*ptr_to_globals).modified_count != 0 {
                if 1i32 != 0 && (*ptr_to_globals).readonly_mode as libc::c_int != 0 {
                  status_line_bold(
                    b"\'%s\' is read only\x00" as *const u8 as *const libc::c_char,
                    (*ptr_to_globals).current_filename,
                  );
                } else {
                  cnt = file_write(
                    (*ptr_to_globals).current_filename,
                    (*ptr_to_globals).text,
                    (*ptr_to_globals).end.offset(-1),
                  );
                  if cnt < 0 {
                    if cnt == -1i32 {
                      status_line_bold(b"Write error: %m\x00" as *const u8 as *const libc::c_char);
                    }
                  } else if cnt as libc::c_long
                    == (*ptr_to_globals)
                      .end
                      .offset(-1)
                      .wrapping_offset_from((*ptr_to_globals).text)
                      as libc::c_long
                      + 1
                  {
                    (*ptr_to_globals).editing = 0 as smallint
                  }
                }
              } else {
                (*ptr_to_globals).editing = 0 as smallint
              }
              current_block = 15129665204879337069;
            }
            12960118908218882441 => {
              p = begin_line((*ptr_to_globals).dot);
              if *p.offset(-1i32 as isize) as libc::c_int == '\n' as i32 {
                dot_prev();
                current_block = 2087484904894455135;
              } else {
                dot_begin();
                (*ptr_to_globals).dot =
                  char_insert((*ptr_to_globals).dot, '\n' as i32 as libc::c_char, 1i32);
                dot_prev();
                current_block = 8629930936610358348;
              }
            }
            8720450212473544924 => {
              (*ptr_to_globals).dot = (*ptr_to_globals).screenbegin;
              cnt = 0;
              while (cnt as libc::c_uint)
                < (*ptr_to_globals)
                  .rows
                  .wrapping_sub(1i32 as libc::c_uint)
                  .wrapping_div(2i32 as libc::c_uint)
              {
                (*ptr_to_globals).dot = next_line((*ptr_to_globals).dot);
                cnt += 1
              }
              current_block = 15129665204879337069;
            }
            13015277209715431090 => {
              (*ptr_to_globals).dot = end_screen();
              if (*ptr_to_globals).cmdcnt as libc::c_uint
                > (*ptr_to_globals).rows.wrapping_sub(1i32 as libc::c_uint)
              {
                (*ptr_to_globals).cmdcnt =
                  (*ptr_to_globals).rows.wrapping_sub(1i32 as libc::c_uint) as libc::c_int
              }
              (*ptr_to_globals).cmdcnt -= 1;
              if (*ptr_to_globals).cmdcnt > 0 {
                do_cmd('-' as i32);
              }
              dot_begin();
              dot_skip_over_ws();
              current_block = 15129665204879337069;
            }
            9800435767766781385 => {
              loop {
                dot_end();
                if (*ptr_to_globals).dot < (*ptr_to_globals).end.offset(-1) {
                  undo_push(
                    (*ptr_to_globals).dot,
                    1i32 as libc::c_uint,
                    1i32 as libc::c_uchar,
                  );
                  let fresh15 = (*ptr_to_globals).dot;
                  (*ptr_to_globals).dot = (*ptr_to_globals).dot.offset(1);
                  *fresh15 = ' ' as i32 as libc::c_char;
                  undo_push(
                    (*ptr_to_globals).dot.offset(-1),
                    1i32 as libc::c_uint,
                    2i32 as libc::c_uchar,
                  );
                  while ({
                    let mut bb__isblank: libc::c_uchar = *(*ptr_to_globals).dot as libc::c_uchar;
                    (bb__isblank as libc::c_int == ' ' as i32
                      || bb__isblank as libc::c_int == '\t' as i32)
                      as libc::c_int
                  }) != 0
                  {
                    text_hole_delete((*ptr_to_globals).dot, (*ptr_to_globals).dot, 2i32);
                  }
                }
                (*ptr_to_globals).cmdcnt -= 1;
                if !((*ptr_to_globals).cmdcnt > 0) {
                  break;
                }
              }
              end_cmd_q();
              current_block = 15129665204879337069;
            }
            3432363526595694666 => {
              dot_begin();
              dot_skip_over_ws();
              current_block = 3268579060917229304;
            }
            3494829253343353619 => {
              (*ptr_to_globals).dot = (*ptr_to_globals).screenbegin;
              if (*ptr_to_globals).cmdcnt as libc::c_uint
                > (*ptr_to_globals).rows.wrapping_sub(1i32 as libc::c_uint)
              {
                (*ptr_to_globals).cmdcnt =
                  (*ptr_to_globals).rows.wrapping_sub(1i32 as libc::c_uint) as libc::c_int
              }
              (*ptr_to_globals).cmdcnt -= 1;
              if (*ptr_to_globals).cmdcnt > 0 {
                do_cmd('+' as i32);
              }
              dot_skip_over_ws();
              current_block = 15129665204879337069;
            }
            17973101765331640574 => {
              c1 = get_one_char();
              if c1 != 'g' as i32 {
                buf[0] = 'g' as i32 as libc::c_char;
                buf[1] = if c1 >= 0 { c1 } else { '*' as i32 } as libc::c_char;
                buf[2] = '\u{0}' as i32 as libc::c_char;
                not_implemented(buf.as_mut_ptr());
                current_block = 15129665204879337069;
              } else {
                if (*ptr_to_globals).cmdcnt == 0 {
                  (*ptr_to_globals).cmdcnt = 1i32
                }
                current_block = 11945623545738147997;
              }
            }
            16546625800574160972 => {
              save_dot = (*ptr_to_globals).dot;
              (*ptr_to_globals).dot = dollar_line((*ptr_to_globals).dot);
              (*ptr_to_globals).dot = yank_delete(
                save_dot,
                (*ptr_to_globals).dot,
                0,
                YANKDEL as libc::c_int,
                1i32,
              );
              if c == 'C' as i32 {
                current_block = 8629930936610358348;
              } else {
                if c == 'D' as i32 {
                  end_cmd_q();
                }
                current_block = 15129665204879337069;
              }
            }
            11937696639986586685 => {
              cnt = count_lines((*ptr_to_globals).text, (*ptr_to_globals).dot);
              c1 = get_one_char();
              find_range(&mut p, &mut q, c1 as libc::c_char);
              yank_delete(p, q, 1i32, YANKONLY as libc::c_int, 0);
              p = begin_line(p);
              q = end_line(q);
              i = count_lines(p, q);
              while i > 0 {
                if c == '<' as i32 {
                  if *p as libc::c_int == '\t' as i32 {
                    text_hole_delete(p, p, 0);
                  } else if *p as libc::c_int == ' ' as i32 {
                    j = 0;
                    while *p as libc::c_int == ' ' as i32 && j < (*ptr_to_globals).tabstop {
                      text_hole_delete(p, p, 0);
                      j += 1
                    }
                  }
                } else if c == '>' as i32 {
                  char_insert(p, '\t' as i32 as libc::c_char, 1i32);
                }
                i -= 1;
                p = next_line(p)
              }
              (*ptr_to_globals).dot = find_line(cnt);
              dot_skip_over_ws();
              end_cmd_q();
              current_block = 15129665204879337069;
            }
            17725350714912028156 => {
              p = get_input_line(b":\x00" as *const u8 as *const libc::c_char);
              colon(p);
              current_block = 15129665204879337069;
            }
            14526470074083880812 => {
              q = char_search(
                (*ptr_to_globals).dot,
                b"\n\n\x00" as *const u8 as *const libc::c_char,
                (FORWARD as libc::c_int) << 1i32 | FULL as libc::c_int,
              );
              if !q.is_null() {
                (*ptr_to_globals).dot = next_line(q)
              }
              current_block = 15129665204879337069;
            }
            8893187391306414141 => {
              q = char_search(
                (*ptr_to_globals).dot,
                b"\n\n\x00" as *const u8 as *const libc::c_char,
                ((BACK as libc::c_int as libc::c_uint) << 1i32
                  | FULL as libc::c_int as libc::c_uint) as libc::c_int,
              );
              if !q.is_null() {
                (*ptr_to_globals).dot = next_line(q)
              }
              current_block = 15129665204879337069;
            }
            7021673758293221412 => {
              dir = BACK as libc::c_int;
              p = (*ptr_to_globals).dot.offset(-1);
              if *(*ptr_to_globals).last_search_pattern.offset(0) as libc::c_int == '?' as i32 {
                dir = FORWARD as libc::c_int;
                p = (*ptr_to_globals).dot.offset(1)
              }
              current_block = 4166979493554389389;
            }
            18374191879090272823 => {
              buf[0] = c as libc::c_char;
              buf[1] = '\u{0}' as i32 as libc::c_char;
              q = get_input_line(buf.as_mut_ptr());
              if *q.offset(0) as libc::c_int != 0 && *q.offset(1) == 0 {
                if *(*ptr_to_globals).last_search_pattern.offset(0) != 0 {
                  *(*ptr_to_globals).last_search_pattern.offset(0) = c as libc::c_char
                }
                current_block = 7392824444931029276;
              } else if *q.offset(0) != 0 {
                free((*ptr_to_globals).last_search_pattern as *mut libc::c_void);
                (*ptr_to_globals).last_search_pattern = crate::libbb::xfuncs_printf::xstrdup(q);
                current_block = 7392824444931029276;
              } else {
                current_block = 15129665204879337069;
              }
            }
            16407828456666301883 => {
              if (*ptr_to_globals).last_forward_char == 0 {
                current_block = 15129665204879337069;
              } else {
                loop {
                  q = (*ptr_to_globals).dot.offset(-1);
                  while q >= (*ptr_to_globals).text
                    && *q as libc::c_int != '\n' as i32
                    && *q as libc::c_int != (*ptr_to_globals).last_forward_char
                  {
                    q = q.offset(-1)
                  }
                  if q >= (*ptr_to_globals).text
                    && *q as libc::c_int == (*ptr_to_globals).last_forward_char
                  {
                    (*ptr_to_globals).dot = q
                  }
                  (*ptr_to_globals).cmdcnt -= 1;
                  if !((*ptr_to_globals).cmdcnt > 0) {
                    break;
                  }
                }
                current_block = 15129665204879337069;
              }
            }
            9018432604062702004 => {
              q = (*ptr_to_globals).dot;
              while q < (*ptr_to_globals).end && *q as libc::c_int != '\n' as i32 {
                if !strchr(
                  b"()[]{}\x00" as *const u8 as *const libc::c_char,
                  *q as libc::c_int,
                )
                .is_null()
                {
                  p = find_pair(q, *q);
                  if p.is_null() {
                    indicate_error();
                  } else {
                    (*ptr_to_globals).dot = p
                  }
                  break;
                } else {
                  q = q.offset(1)
                }
              }
              if *q as libc::c_int == '\n' as i32 {
                indicate_error();
              }
              current_block = 15129665204879337069;
            }
            10247103787464459848 => {
              p = (*ptr_to_globals).reg[(*ptr_to_globals).YDreg as usize];
              if p.is_null() {
                status_line_bold(
                  b"Nothing in register %c\x00" as *const u8 as *const libc::c_char,
                  what_reg() as libc::c_int,
                );
              } else {
                if !strchr(p, '\n' as i32).is_null() {
                  if c == 'P' as i32 {
                    dot_begin();
                  }
                  if c == 'p' as i32 {
                    if end_line((*ptr_to_globals).dot) == (*ptr_to_globals).end.offset(-1) {
                      (*ptr_to_globals).dot = (*ptr_to_globals).end
                    } else {
                      dot_next();
                    }
                  }
                } else if c == 'p' as i32 {
                  dot_right();
                }
                string_insert((*ptr_to_globals).dot, p, 1i32);
                end_cmd_q();
              }
              current_block = 15129665204879337069;
            }
            15260732871948875843 => {
              c1 = (get_one_char() | 0x20i32) - 'a' as i32;
              if c1 as libc::c_uint <= 25i32 as libc::c_uint {
                (*ptr_to_globals).mark[c1 as usize] = (*ptr_to_globals).dot
              } else {
                indicate_error();
              }
              current_block = 15129665204879337069;
            }
            12738322036487086035 => {
              c1 = get_one_char() | 0x20i32;
              if (c1 - 'a' as i32) as libc::c_uint <= 25i32 as libc::c_uint {
                c1 = c1 - 'a' as i32;
                q = (*ptr_to_globals).mark[c1 as usize];
                if (*ptr_to_globals).text <= q && q < (*ptr_to_globals).end {
                  (*ptr_to_globals).dot = q;
                  dot_begin();
                  dot_skip_over_ws();
                }
              } else if c1 == '\'' as i32 {
                (*ptr_to_globals).dot = swap_context((*ptr_to_globals).dot);
                dot_begin();
                dot_skip_over_ws();
              } else {
                indicate_error();
              }
              current_block = 15129665204879337069;
            }
            13255096073384561358 => {
              c1 = (get_one_char() | 0x20i32) - 'a' as i32;
              if c1 as libc::c_uint <= 25i32 as libc::c_uint {
                (*ptr_to_globals).YDreg = c1 as smalluint
              } else {
                indicate_error();
              }
              current_block = 15129665204879337069;
            }
            10258711639984089377 => {
              if (*ptr_to_globals).cmd_mode as libc::c_int == 0 {
                indicate_error();
              }
              (*ptr_to_globals).cmd_mode = 0 as smallint;
              undo_queue_commit();
              end_cmd_q();
              (*ptr_to_globals).last_status_cksum = 0;
              current_block = 15129665204879337069;
            }
            11439127087547047736 => {
              buf[0] = c as libc::c_char;
              buf[1] = '\u{0}' as i32 as libc::c_char;
              not_implemented(buf.as_mut_ptr());
              end_cmd_q();
              current_block = 17440971994642376514;
            }
            7961798899781870241 => {
              dot_scroll(
                (*ptr_to_globals).rows.wrapping_sub(2i32 as libc::c_uint) as libc::c_int,
                -1i32,
              );
              current_block = 15129665204879337069;
            }
            9426343755402444879 => {
              dot_scroll(
                (*ptr_to_globals)
                  .rows
                  .wrapping_sub(2i32 as libc::c_uint)
                  .wrapping_div(2i32 as libc::c_uint) as libc::c_int,
                1i32,
              );
              current_block = 15129665204879337069;
            }
            13352459794680105913 => {
              dot_scroll(1i32, 1i32);
              current_block = 15129665204879337069;
            }
            14142272253464333006 => {
              dot_scroll(
                (*ptr_to_globals).rows.wrapping_sub(2i32 as libc::c_uint) as libc::c_int,
                1i32,
              );
              current_block = 15129665204879337069;
            }
            10758177197742640066 => {
              (*ptr_to_globals).last_status_cksum = 0;
              current_block = 15129665204879337069;
            }
            6152256259730122749 => {
              current_block = 7534742345255184552;
            }
            12883932598258173301 => {
              current_block = 8800996768013373992;
            }
            11242998110520238401 => {
              redraw(1i32);
              current_block = 15129665204879337069;
            }
            13619733043935729992 => {
              loop {
                dot_next();
                dot_skip_over_ws();
                (*ptr_to_globals).cmdcnt -= 1;
                if !((*ptr_to_globals).cmdcnt > 0) {
                  break;
                }
              }
              current_block = 15129665204879337069;
            }
            9339065157412720613 => {
              dot_scroll(
                (*ptr_to_globals)
                  .rows
                  .wrapping_sub(2i32 as libc::c_uint)
                  .wrapping_div(2i32 as libc::c_uint) as libc::c_int,
                -1i32,
              );
              current_block = 15129665204879337069;
            }
            11447082683497798022 => {
              dot_scroll(1i32, -1i32);
              current_block = 15129665204879337069;
            }
            5182000506326660482 => {
              current_block = 13993698454868426881;
            }
            1105010766850597332 => {
              if !(*ptr_to_globals).reg[27].is_null() {
                p = begin_line((*ptr_to_globals).dot);
                q = end_line((*ptr_to_globals).dot);
                p = text_hole_delete(p, q, 1i32);
                p = p.offset(string_insert(p, (*ptr_to_globals).reg[27], 2i32) as isize);
                (*ptr_to_globals).dot = p;
                dot_skip_over_ws();
              }
              current_block = 15129665204879337069;
            }
            8616046655533110204 => {
              undo_pop();
              current_block = 15129665204879337069;
            }
            5127767458142431603 => {
              loop {
                (*ptr_to_globals).dot = end_line((*ptr_to_globals).dot);
                (*ptr_to_globals).cmdcnt -= 1;
                if (*ptr_to_globals).cmdcnt <= 0 {
                  break;
                }
                dot_next();
              }
              current_block = 15129665204879337069;
            }
            222014967776118151 => {
              (*ptr_to_globals).last_forward_char = get_one_char();
              current_block = 7856905509180742666;
            }
            11209792479411604110 => {
              loop {
                dot_prev();
                dot_skip_over_ws();
                (*ptr_to_globals).cmdcnt -= 1;
                if !((*ptr_to_globals).cmdcnt > 0) {
                  break;
                }
              }
              current_block = 15129665204879337069;
            }
            3364823792826654116 => {
              if (*ptr_to_globals).lmc_len != 0 {
                (*ptr_to_globals).ioq_start = crate::libbb::xfuncs_printf::xstrndup(
                  (*ptr_to_globals).last_modifying_cmd.as_mut_ptr(),
                  (*ptr_to_globals).lmc_len,
                );
                (*ptr_to_globals).ioq = (*ptr_to_globals).ioq_start
              }
              current_block = 15129665204879337069;
            }
            18096603330221575131 => {
              current_block = 17498168302144015873;
            }
            16891123271837848903 => {
              dot_end();
              current_block = 1752638907092016026;
            }
            8517235759107662071 => {
              current_block = 5847749760081351726;
            }
            12525254419223051704 => {
              if (*ptr_to_globals).dot < (*ptr_to_globals).end.offset(-1) {
                (*ptr_to_globals).dot = yank_delete(
                  (*ptr_to_globals).dot,
                  (*ptr_to_globals).dot,
                  1i32,
                  YANKDEL as libc::c_int,
                  1i32,
                )
              }
              current_block = 15129665204879337069;
            }
            15232911949322867522 => {
              current_block = 17251831742223396249;
            }
            10863374208794025069 => {
              current_block = 1895262434596074581;
            }
            451126677064669119 => {
              loop {
                dot_prev();
                (*ptr_to_globals).dot = move_to_col(
                  (*ptr_to_globals).dot,
                  (*ptr_to_globals).ccol + (*ptr_to_globals).offset,
                );
                (*ptr_to_globals).cmdcnt -= 1;
                if !((*ptr_to_globals).cmdcnt > 0) {
                  break;
                }
              }
              current_block = 15129665204879337069;
            }
            4611735929166613116 => {
              loop {
                if bb_ascii_isalnum(*(*ptr_to_globals).dot as libc::c_uchar) != 0
                  || *(*ptr_to_globals).dot as libc::c_int == '_' as i32
                {
                  (*ptr_to_globals).dot = skip_thing(
                    (*ptr_to_globals).dot,
                    1i32,
                    FORWARD as libc::c_int,
                    S_END_ALNUM as libc::c_int,
                  )
                } else if *strchrnul(
                  b"!\"#$%&\'()*+,-./:;<=>?@[\\]^_`{|}~\x00" as *const u8 as *const libc::c_char,
                  *(*ptr_to_globals).dot as libc::c_int,
                )
                .offset(0)
                  != 0
                {
                  (*ptr_to_globals).dot = skip_thing(
                    (*ptr_to_globals).dot,
                    1i32,
                    FORWARD as libc::c_int,
                    S_END_PUNCT as libc::c_int,
                  )
                }
                if (*ptr_to_globals).dot < (*ptr_to_globals).end.offset(-1) {
                  (*ptr_to_globals).dot = (*ptr_to_globals).dot.offset(1)
                }
                if ({
                  let mut bb__isspace: libc::c_uchar =
                    (*(*ptr_to_globals).dot as libc::c_int - 9i32) as libc::c_uchar;
                  (bb__isspace as libc::c_int == ' ' as i32 - 9i32
                    || bb__isspace as libc::c_int <= 13i32 - 9i32) as libc::c_int
                }) != 0
                {
                  (*ptr_to_globals).dot = skip_thing(
                    (*ptr_to_globals).dot,
                    2i32,
                    FORWARD as libc::c_int,
                    S_OVER_WS as libc::c_int,
                  )
                }
                (*ptr_to_globals).cmdcnt -= 1;
                if !((*ptr_to_globals).cmdcnt > 0) {
                  break;
                }
              }
              current_block = 15129665204879337069;
            }
            4386451087681909888 => {
              (*ptr_to_globals).dot =
                move_to_col((*ptr_to_globals).dot, (*ptr_to_globals).cmdcnt - 1i32);
              current_block = 15129665204879337069;
            }
            1296397779060594135 => {
              dot_begin();
              current_block = 15129665204879337069;
            }
            _ => {}
          }
          match current_block {
            15129665204879337069 => {}
            8629930936610358348 => {}
            _ => {
              match current_block {
                17251831742223396249 => {
                  dir = 0;
                  if c == 'X' as i32 {
                    dir = -1i32
                  }
                  loop {
                    if *(*ptr_to_globals).dot.offset(dir as isize) as libc::c_int != '\n' as i32 {
                      if c == 'X' as i32 {
                        (*ptr_to_globals).dot = (*ptr_to_globals).dot.offset(-1)
                      }
                      (*ptr_to_globals).dot = yank_delete(
                        (*ptr_to_globals).dot,
                        (*ptr_to_globals).dot,
                        0,
                        YANKDEL as libc::c_int,
                        1i32,
                      )
                    }
                    (*ptr_to_globals).cmdcnt -= 1;
                    if !((*ptr_to_globals).cmdcnt > 0) {
                      break;
                    }
                  }
                  end_cmd_q();
                  if c == 's' as i32 {
                    current_block = 8629930936610358348;
                  } else {
                    current_block = 15129665204879337069;
                  }
                }
                2087484904894455135 => {
                  dot_end();
                  (*ptr_to_globals).dot =
                    char_insert((*ptr_to_globals).dot, '\n' as i32 as libc::c_char, 1i32);
                  current_block = 8629930936610358348;
                }
                11945623545738147997 => {
                  (*ptr_to_globals).dot = (*ptr_to_globals).end.offset(-1);
                  if (*ptr_to_globals).cmdcnt > 0 {
                    (*ptr_to_globals).dot = find_line((*ptr_to_globals).cmdcnt)
                  }
                  dot_skip_over_ws();
                  current_block = 15129665204879337069;
                }
                5847749760081351726 => {
                  dir = FORWARD as libc::c_int;
                  if c == 'B' as i32 {
                    dir = BACK as libc::c_int
                  }
                  loop {
                    if c == 'W' as i32
                      || ({
                        let mut bb__isspace: libc::c_uchar =
                          (*(*ptr_to_globals).dot.offset(dir as isize) as libc::c_int - 9i32)
                            as libc::c_uchar;
                        (bb__isspace as libc::c_int == ' ' as i32 - 9i32
                          || bb__isspace as libc::c_int <= 13i32 - 9i32)
                          as libc::c_int
                      }) != 0
                    {
                      (*ptr_to_globals).dot =
                        skip_thing((*ptr_to_globals).dot, 1i32, dir, S_TO_WS as libc::c_int);
                      (*ptr_to_globals).dot =
                        skip_thing((*ptr_to_globals).dot, 2i32, dir, S_OVER_WS as libc::c_int)
                    }
                    if c != 'W' as i32 {
                      (*ptr_to_globals).dot =
                        skip_thing((*ptr_to_globals).dot, 1i32, dir, S_BEFORE_WS as libc::c_int)
                    }
                    (*ptr_to_globals).cmdcnt -= 1;
                    if !((*ptr_to_globals).cmdcnt > 0) {
                      break;
                    }
                  }
                  current_block = 15129665204879337069;
                }
                17440971994642376514 => {
                  current_block = 15129665204879337069;
                }
                7534742345255184552 => {
                  current_block = 17247297260531395789;
                }
                8800996768013373992 => {
                  loop {
                    dot_next();
                    (*ptr_to_globals).dot = move_to_col(
                      (*ptr_to_globals).dot,
                      (*ptr_to_globals).ccol + (*ptr_to_globals).offset,
                    );
                    (*ptr_to_globals).cmdcnt -= 1;
                    if !((*ptr_to_globals).cmdcnt > 0) {
                      break;
                    }
                  }
                  current_block = 15129665204879337069;
                }
                13993698454868426881 => {
                  loop {
                    dot_right();
                    (*ptr_to_globals).cmdcnt -= 1;
                    if !((*ptr_to_globals).cmdcnt > 0) {
                      break;
                    }
                  }
                  current_block = 15129665204879337069;
                }
                7856905509180742666 => {
                  while !((*ptr_to_globals).last_forward_char == 0) {
                    q = (*ptr_to_globals).dot.offset(1);
                    while q < (*ptr_to_globals).end.offset(-1)
                      && *q as libc::c_int != '\n' as i32
                      && *q as libc::c_int != (*ptr_to_globals).last_forward_char
                    {
                      q = q.offset(1)
                    }
                    if *q as libc::c_int == (*ptr_to_globals).last_forward_char {
                      (*ptr_to_globals).dot = q
                    }
                    (*ptr_to_globals).cmdcnt -= 1;
                    if !((*ptr_to_globals).cmdcnt > 0) {
                      break;
                    }
                  }
                  current_block = 15129665204879337069;
                }
                17498168302144015873 => {
                  current_block = 8681395796513813967;
                }
                1752638907092016026 => {
                  if *(*ptr_to_globals).dot as libc::c_int != '\n' as i32 {
                    (*ptr_to_globals).dot = (*ptr_to_globals).dot.offset(1)
                  }
                  current_block = 8629930936610358348;
                }
                3268579060917229304 => {
                  current_block = 8629930936610358348;
                }
                1895262434596074581 => {
                  current_block = 8908416993177701018;
                }
                _ => {}
              }
              match current_block {
                8629930936610358348 => {}
                15129665204879337069 => {}
                _ => {
                  match current_block {
                    17247297260531395789 => {
                      loop {
                        dot_left();
                        (*ptr_to_globals).cmdcnt -= 1;
                        if !((*ptr_to_globals).cmdcnt > 0) {
                          break;
                        }
                      }
                      current_block = 15129665204879337069;
                    }
                    8681395796513813967 => {
                      current_block = 5591548203144509315;
                    }
                    8908416993177701018 => {
                      current_block = 16124761010012532485;
                    }
                    _ => {}
                  }
                  match current_block {
                    15129665204879337069 => {}
                    _ => {
                      match current_block {
                        16124761010012532485 => {
                          let mut yf: libc::c_int = 0;
                          let mut ml: libc::c_int = 0;
                          let mut whole: libc::c_int = 0;
                          yf = YANKDEL as libc::c_int;
                          if c == 'y' as i32 || c == 'Y' as i32 {
                            yf = YANKONLY as libc::c_int
                          }
                          c1 = 'y' as i32;
                          if c != 'Y' as i32 {
                            c1 = get_one_char()
                          }
                          ml = find_range(&mut p, &mut q, c1 as libc::c_char);
                          place_cursor(0i32, 0);
                          if c1 == 27i32 {
                            c1 = 27i32;
                            c = c1
                          } else if !strchr(b"wW\x00" as *const u8 as *const libc::c_char, c1)
                            .is_null()
                          {
                            ml = 0;
                            if c == 'c' as i32 {
                              while ({
                                let mut bb__isspace: libc::c_uchar =
                                  (*q as libc::c_int - 9i32) as libc::c_uchar;
                                (bb__isspace as libc::c_int == ' ' as i32 - 9i32
                                  || bb__isspace as libc::c_int <= 13i32 - 9i32)
                                  as libc::c_int
                              }) != 0
                                && q > p
                              {
                                q = q.offset(-1)
                              }
                            }
                            (*ptr_to_globals).dot = yank_delete(p, q, ml, yf, 1i32)
                          } else if !strchr(
                            b"^0bBeEft%$ lh\x08\x7f\x00" as *const u8 as *const libc::c_char,
                            c1,
                          )
                          .is_null()
                          {
                            (*ptr_to_globals).dot = yank_delete(p, q, ml, yf, 1i32)
                          } else if !strchr(
                            b"cdykjGHL+-{}\r\n\x00" as *const u8 as *const libc::c_char,
                            c1,
                          )
                          .is_null()
                          {
                            (*ptr_to_globals).dot = yank_delete(p, q, ml, yf, 1i32);
                            whole = 1i32
                          } else {
                            c1 = 27i32;
                            c = c1;
                            ml = 0;
                            indicate_error();
                          }
                          if ml != 0 && whole != 0 {
                            if c == 'c' as i32 {
                              (*ptr_to_globals).dot = char_insert(
                                (*ptr_to_globals).dot,
                                '\n' as i32 as libc::c_char,
                                2i32,
                              );
                              if whole != 0
                                && (*ptr_to_globals).dot != (*ptr_to_globals).end.offset(-1)
                              {
                                dot_prev();
                              }
                            } else if c == 'd' as i32 {
                              dot_begin();
                              dot_skip_over_ws();
                            }
                          }
                          if c1 != 27i32 {
                            if c == 'c' as i32 {
                              strcpy(
                                buf.as_mut_ptr(),
                                b"Change\x00" as *const u8 as *const libc::c_char,
                              );
                              current_block = 8629930936610358348;
                            } else {
                              if c == 'd' as i32 {
                                strcpy(
                                  buf.as_mut_ptr(),
                                  b"Delete\x00" as *const u8 as *const libc::c_char,
                                );
                              }
                              if c == 'y' as i32 || c == 'Y' as i32 {
                                strcpy(
                                  buf.as_mut_ptr(),
                                  b"Yank\x00" as *const u8 as *const libc::c_char,
                                );
                              }
                              p = (*ptr_to_globals).reg[(*ptr_to_globals).YDreg as usize];
                              q = p.offset(strlen(p) as isize);
                              cnt = 0;
                              while p <= q {
                                if *p as libc::c_int == '\n' as i32 {
                                  cnt += 1
                                }
                                p = p.offset(1)
                              }
                              status_line(
                                b"%s %u lines (%u chars) using [%c]\x00" as *const u8
                                  as *const libc::c_char,
                                buf.as_mut_ptr(),
                                cnt,
                                strlen((*ptr_to_globals).reg[(*ptr_to_globals).YDreg as usize])
                                  as libc::c_uint,
                                what_reg() as libc::c_int,
                              );
                              end_cmd_q();
                              current_block = 15129665204879337069;
                            }
                          } else {
                            current_block = 15129665204879337069;
                          }
                        }
                        5591548203144509315 => {
                          current_block = 2636677179867529885;
                        }
                        _ => {}
                      }
                      match current_block {
                        15129665204879337069 => {}
                        8629930936610358348 => {}
                        _ => {
                          match current_block {
                            2636677179867529885 => {
                              current_block = 12309206730560524281;
                            }
                            _ => {}
                          }
                          match current_block {
                            12309206730560524281 => {
                              current_block = 3325768110057758661;
                            }
                            _ => {}
                          }
                          match current_block {
                            3325768110057758661 => {
                              current_block = 14815832896553429982;
                            }
                            _ => {}
                          }
                          match current_block {
                            14815832896553429982 => {
                              current_block = 10731695520297161438;
                            }
                            _ => {}
                          }
                          match current_block {
                            10731695520297161438 => {
                              if c == '0' as i32 && (*ptr_to_globals).cmdcnt < 1i32 {
                                dot_begin();
                              } else {
                                (*ptr_to_globals).cmdcnt =
                                  (*ptr_to_globals).cmdcnt * 10i32 + (c - '0' as i32)
                              }
                              current_block = 15129665204879337069;
                            }
                            _ => {}
                          }
                          match current_block {
                            15129665204879337069 => {}
                            _ => {
                              loop {
                                match current_block {
                                  16813369756331276724 => {
                                    msg = std::ptr::null();
                                    current_block = 7392824444931029276;
                                  }
                                  7392824444931029276 => {
                                    dir = FORWARD as libc::c_int;
                                    p = (*ptr_to_globals).dot.offset(1);
                                    if *(*ptr_to_globals).last_search_pattern.offset(0)
                                      as libc::c_int
                                      == '?' as i32
                                    {
                                      dir = BACK as libc::c_int;
                                      p = (*ptr_to_globals).dot.offset(-1)
                                    }
                                    current_block = 4166979493554389389;
                                  }
                                  _ => {
                                    q = char_search(
                                      p,
                                      (*ptr_to_globals).last_search_pattern.offset(1),
                                      dir << 1i32 | FULL as libc::c_int,
                                    );
                                    if !q.is_null() {
                                      (*ptr_to_globals).dot = q;
                                      msg = std::ptr::null()
                                    } else {
                                      p = (*ptr_to_globals).text;
                                      if dir == BACK as libc::c_int {
                                        p = (*ptr_to_globals).end.offset(-1)
                                      }
                                      q = char_search(
                                        p,
                                        (*ptr_to_globals).last_search_pattern.offset(1),
                                        dir << 1i32 | FULL as libc::c_int,
                                      );
                                      if !q.is_null() {
                                        (*ptr_to_globals).dot = q;
                                        msg = b"search hit BOTTOM, continuing at TOP\x00"
                                          as *const u8
                                          as *const libc::c_char;
                                        if dir == BACK as libc::c_int {
                                          msg = b"search hit TOP, continuing at BOTTOM\x00"
                                            as *const u8
                                            as *const libc::c_char
                                        }
                                      } else {
                                        msg = b"Pattern not found\x00" as *const u8
                                          as *const libc::c_char
                                      }
                                    }
                                    if !msg.is_null() {
                                      status_line_bold(
                                        b"%s\x00" as *const u8 as *const libc::c_char,
                                        msg,
                                      );
                                    }
                                    (*ptr_to_globals).cmdcnt -= 1;
                                    if (*ptr_to_globals).cmdcnt > 0 {
                                      current_block = 16813369756331276724;
                                    } else {
                                      break;
                                    }
                                  }
                                }
                              }
                              current_block = 15129665204879337069;
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
        49 => {
          current_block = 17498168302144015873;
          match current_block {
            16992905640583886232 => {
              loop {
                if (*(*ptr_to_globals).dot as libc::c_int - 'a' as i32) as libc::c_uchar
                  as libc::c_int
                  <= 'z' as i32 - 'a' as i32
                {
                  undo_push(
                    (*ptr_to_globals).dot,
                    1i32 as libc::c_uint,
                    1i32 as libc::c_uchar,
                  );
                  *(*ptr_to_globals).dot =
                    bb_ascii_toupper(*(*ptr_to_globals).dot as libc::c_uchar) as libc::c_char;
                  undo_push(
                    (*ptr_to_globals).dot,
                    1i32 as libc::c_uint,
                    2i32 as libc::c_uchar,
                  );
                } else if (*(*ptr_to_globals).dot as libc::c_int - 'A' as i32) as libc::c_uchar
                  as libc::c_int
                  <= 'Z' as i32 - 'A' as i32
                {
                  undo_push(
                    (*ptr_to_globals).dot,
                    1i32 as libc::c_uint,
                    1i32 as libc::c_uchar,
                  );
                  *(*ptr_to_globals).dot =
                    bb_ascii_tolower(*(*ptr_to_globals).dot as libc::c_uchar) as libc::c_char;
                  undo_push(
                    (*ptr_to_globals).dot,
                    1i32 as libc::c_uint,
                    2i32 as libc::c_uchar,
                  );
                }
                dot_right();
                (*ptr_to_globals).cmdcnt -= 1;
                if !((*ptr_to_globals).cmdcnt > 0) {
                  break;
                }
              }
              end_cmd_q();
              current_block = 15129665204879337069;
            }
            8729655159604064397 => {
              c1 = get_one_char();
              cnt = 0;
              if c1 == '.' as i32 {
                cnt = (*ptr_to_globals)
                  .rows
                  .wrapping_sub(2i32 as libc::c_uint)
                  .wrapping_div(2i32 as libc::c_uint) as libc::c_int
              }
              if c1 == '-' as i32 {
                cnt = (*ptr_to_globals).rows.wrapping_sub(2i32 as libc::c_uint) as libc::c_int
              }
              (*ptr_to_globals).screenbegin = begin_line((*ptr_to_globals).dot);
              dot_scroll(cnt, -1i32);
              current_block = 15129665204879337069;
            }
            15899500648299942075 => {
              (*ptr_to_globals).last_forward_char = get_one_char();
              do_cmd(';' as i32);
              if *(*ptr_to_globals).dot as libc::c_int == (*ptr_to_globals).last_forward_char {
                dot_left();
              }
              (*ptr_to_globals).last_forward_char = 0;
              current_block = 15129665204879337069;
            }
            9051390181078481641 => {
              c1 = get_one_char();
              if *(*ptr_to_globals).dot as libc::c_int != '\n' as i32 {
                (*ptr_to_globals).dot =
                  text_hole_delete((*ptr_to_globals).dot, (*ptr_to_globals).dot, 1i32);
                (*ptr_to_globals).dot =
                  char_insert((*ptr_to_globals).dot, c1 as libc::c_char, 2i32);
                dot_left();
              }
              end_cmd_q();
              current_block = 15129665204879337069;
            }
            877115918601926659 => {
              dir = FORWARD as libc::c_int;
              if c == 'b' as i32 {
                dir = BACK as libc::c_int
              }
              while !((*ptr_to_globals).dot.offset(dir as isize) < (*ptr_to_globals).text
                || (*ptr_to_globals).dot.offset(dir as isize) > (*ptr_to_globals).end.offset(-1))
              {
                (*ptr_to_globals).dot = (*ptr_to_globals).dot.offset(dir as isize);
                if ({
                  let mut bb__isspace: libc::c_uchar =
                    (*(*ptr_to_globals).dot as libc::c_int - 9i32) as libc::c_uchar;
                  (bb__isspace as libc::c_int == ' ' as i32 - 9i32
                    || bb__isspace as libc::c_int <= 13i32 - 9i32) as libc::c_int
                }) != 0
                {
                  (*ptr_to_globals).dot = skip_thing(
                    (*ptr_to_globals).dot,
                    if c == 'e' as i32 { 2i32 } else { 1i32 },
                    dir,
                    S_OVER_WS as libc::c_int,
                  )
                }
                if bb_ascii_isalnum(*(*ptr_to_globals).dot as libc::c_uchar) != 0
                  || *(*ptr_to_globals).dot as libc::c_int == '_' as i32
                {
                  (*ptr_to_globals).dot =
                    skip_thing((*ptr_to_globals).dot, 1i32, dir, S_END_ALNUM as libc::c_int)
                } else if *strchrnul(
                  b"!\"#$%&\'()*+,-./:;<=>?@[\\]^_`{|}~\x00" as *const u8 as *const libc::c_char,
                  *(*ptr_to_globals).dot as libc::c_int,
                )
                .offset(0)
                  != 0
                {
                  (*ptr_to_globals).dot =
                    skip_thing((*ptr_to_globals).dot, 1i32, dir, S_END_PUNCT as libc::c_int)
                }
                (*ptr_to_globals).cmdcnt -= 1;
                if !((*ptr_to_globals).cmdcnt > 0) {
                  break;
                }
              }
              current_block = 15129665204879337069;
            }
            1085022737867179637 => {
              dot_begin();
              dot_skip_over_ws();
              current_block = 15129665204879337069;
            }
            3113147720494587438 => {
              c1 = get_one_char();
              if c1 != 'Z' as i32 {
                indicate_error();
              } else if (*ptr_to_globals).modified_count != 0 {
                if 1i32 != 0 && (*ptr_to_globals).readonly_mode as libc::c_int != 0 {
                  status_line_bold(
                    b"\'%s\' is read only\x00" as *const u8 as *const libc::c_char,
                    (*ptr_to_globals).current_filename,
                  );
                } else {
                  cnt = file_write(
                    (*ptr_to_globals).current_filename,
                    (*ptr_to_globals).text,
                    (*ptr_to_globals).end.offset(-1),
                  );
                  if cnt < 0 {
                    if cnt == -1i32 {
                      status_line_bold(b"Write error: %m\x00" as *const u8 as *const libc::c_char);
                    }
                  } else if cnt as libc::c_long
                    == (*ptr_to_globals)
                      .end
                      .offset(-1)
                      .wrapping_offset_from((*ptr_to_globals).text)
                      as libc::c_long
                      + 1
                  {
                    (*ptr_to_globals).editing = 0 as smallint
                  }
                }
              } else {
                (*ptr_to_globals).editing = 0 as smallint
              }
              current_block = 15129665204879337069;
            }
            12960118908218882441 => {
              p = begin_line((*ptr_to_globals).dot);
              if *p.offset(-1i32 as isize) as libc::c_int == '\n' as i32 {
                dot_prev();
                current_block = 2087484904894455135;
              } else {
                dot_begin();
                (*ptr_to_globals).dot =
                  char_insert((*ptr_to_globals).dot, '\n' as i32 as libc::c_char, 1i32);
                dot_prev();
                current_block = 8629930936610358348;
              }
            }
            8720450212473544924 => {
              (*ptr_to_globals).dot = (*ptr_to_globals).screenbegin;
              cnt = 0;
              while (cnt as libc::c_uint)
                < (*ptr_to_globals)
                  .rows
                  .wrapping_sub(1i32 as libc::c_uint)
                  .wrapping_div(2i32 as libc::c_uint)
              {
                (*ptr_to_globals).dot = next_line((*ptr_to_globals).dot);
                cnt += 1
              }
              current_block = 15129665204879337069;
            }
            13015277209715431090 => {
              (*ptr_to_globals).dot = end_screen();
              if (*ptr_to_globals).cmdcnt as libc::c_uint
                > (*ptr_to_globals).rows.wrapping_sub(1i32 as libc::c_uint)
              {
                (*ptr_to_globals).cmdcnt =
                  (*ptr_to_globals).rows.wrapping_sub(1i32 as libc::c_uint) as libc::c_int
              }
              (*ptr_to_globals).cmdcnt -= 1;
              if (*ptr_to_globals).cmdcnt > 0 {
                do_cmd('-' as i32);
              }
              dot_begin();
              dot_skip_over_ws();
              current_block = 15129665204879337069;
            }
            9800435767766781385 => {
              loop {
                dot_end();
                if (*ptr_to_globals).dot < (*ptr_to_globals).end.offset(-1) {
                  undo_push(
                    (*ptr_to_globals).dot,
                    1i32 as libc::c_uint,
                    1i32 as libc::c_uchar,
                  );
                  let fresh15 = (*ptr_to_globals).dot;
                  (*ptr_to_globals).dot = (*ptr_to_globals).dot.offset(1);
                  *fresh15 = ' ' as i32 as libc::c_char;
                  undo_push(
                    (*ptr_to_globals).dot.offset(-1),
                    1i32 as libc::c_uint,
                    2i32 as libc::c_uchar,
                  );
                  while ({
                    let mut bb__isblank: libc::c_uchar = *(*ptr_to_globals).dot as libc::c_uchar;
                    (bb__isblank as libc::c_int == ' ' as i32
                      || bb__isblank as libc::c_int == '\t' as i32)
                      as libc::c_int
                  }) != 0
                  {
                    text_hole_delete((*ptr_to_globals).dot, (*ptr_to_globals).dot, 2i32);
                  }
                }
                (*ptr_to_globals).cmdcnt -= 1;
                if !((*ptr_to_globals).cmdcnt > 0) {
                  break;
                }
              }
              end_cmd_q();
              current_block = 15129665204879337069;
            }
            3432363526595694666 => {
              dot_begin();
              dot_skip_over_ws();
              current_block = 3268579060917229304;
            }
            3494829253343353619 => {
              (*ptr_to_globals).dot = (*ptr_to_globals).screenbegin;
              if (*ptr_to_globals).cmdcnt as libc::c_uint
                > (*ptr_to_globals).rows.wrapping_sub(1i32 as libc::c_uint)
              {
                (*ptr_to_globals).cmdcnt =
                  (*ptr_to_globals).rows.wrapping_sub(1i32 as libc::c_uint) as libc::c_int
              }
              (*ptr_to_globals).cmdcnt -= 1;
              if (*ptr_to_globals).cmdcnt > 0 {
                do_cmd('+' as i32);
              }
              dot_skip_over_ws();
              current_block = 15129665204879337069;
            }
            17973101765331640574 => {
              c1 = get_one_char();
              if c1 != 'g' as i32 {
                buf[0] = 'g' as i32 as libc::c_char;
                buf[1] = if c1 >= 0 { c1 } else { '*' as i32 } as libc::c_char;
                buf[2] = '\u{0}' as i32 as libc::c_char;
                not_implemented(buf.as_mut_ptr());
                current_block = 15129665204879337069;
              } else {
                if (*ptr_to_globals).cmdcnt == 0 {
                  (*ptr_to_globals).cmdcnt = 1i32
                }
                current_block = 11945623545738147997;
              }
            }
            16546625800574160972 => {
              save_dot = (*ptr_to_globals).dot;
              (*ptr_to_globals).dot = dollar_line((*ptr_to_globals).dot);
              (*ptr_to_globals).dot = yank_delete(
                save_dot,
                (*ptr_to_globals).dot,
                0,
                YANKDEL as libc::c_int,
                1i32,
              );
              if c == 'C' as i32 {
                current_block = 8629930936610358348;
              } else {
                if c == 'D' as i32 {
                  end_cmd_q();
                }
                current_block = 15129665204879337069;
              }
            }
            11937696639986586685 => {
              cnt = count_lines((*ptr_to_globals).text, (*ptr_to_globals).dot);
              c1 = get_one_char();
              find_range(&mut p, &mut q, c1 as libc::c_char);
              yank_delete(p, q, 1i32, YANKONLY as libc::c_int, 0);
              p = begin_line(p);
              q = end_line(q);
              i = count_lines(p, q);
              while i > 0 {
                if c == '<' as i32 {
                  if *p as libc::c_int == '\t' as i32 {
                    text_hole_delete(p, p, 0);
                  } else if *p as libc::c_int == ' ' as i32 {
                    j = 0;
                    while *p as libc::c_int == ' ' as i32 && j < (*ptr_to_globals).tabstop {
                      text_hole_delete(p, p, 0);
                      j += 1
                    }
                  }
                } else if c == '>' as i32 {
                  char_insert(p, '\t' as i32 as libc::c_char, 1i32);
                }
                i -= 1;
                p = next_line(p)
              }
              (*ptr_to_globals).dot = find_line(cnt);
              dot_skip_over_ws();
              end_cmd_q();
              current_block = 15129665204879337069;
            }
            17725350714912028156 => {
              p = get_input_line(b":\x00" as *const u8 as *const libc::c_char);
              colon(p);
              current_block = 15129665204879337069;
            }
            14526470074083880812 => {
              q = char_search(
                (*ptr_to_globals).dot,
                b"\n\n\x00" as *const u8 as *const libc::c_char,
                (FORWARD as libc::c_int) << 1i32 | FULL as libc::c_int,
              );
              if !q.is_null() {
                (*ptr_to_globals).dot = next_line(q)
              }
              current_block = 15129665204879337069;
            }
            8893187391306414141 => {
              q = char_search(
                (*ptr_to_globals).dot,
                b"\n\n\x00" as *const u8 as *const libc::c_char,
                ((BACK as libc::c_int as libc::c_uint) << 1i32
                  | FULL as libc::c_int as libc::c_uint) as libc::c_int,
              );
              if !q.is_null() {
                (*ptr_to_globals).dot = next_line(q)
              }
              current_block = 15129665204879337069;
            }
            7021673758293221412 => {
              dir = BACK as libc::c_int;
              p = (*ptr_to_globals).dot.offset(-1);
              if *(*ptr_to_globals).last_search_pattern.offset(0) as libc::c_int == '?' as i32 {
                dir = FORWARD as libc::c_int;
                p = (*ptr_to_globals).dot.offset(1)
              }
              current_block = 4166979493554389389;
            }
            18374191879090272823 => {
              buf[0] = c as libc::c_char;
              buf[1] = '\u{0}' as i32 as libc::c_char;
              q = get_input_line(buf.as_mut_ptr());
              if *q.offset(0) as libc::c_int != 0 && *q.offset(1) == 0 {
                if *(*ptr_to_globals).last_search_pattern.offset(0) != 0 {
                  *(*ptr_to_globals).last_search_pattern.offset(0) = c as libc::c_char
                }
                current_block = 7392824444931029276;
              } else if *q.offset(0) != 0 {
                free((*ptr_to_globals).last_search_pattern as *mut libc::c_void);
                (*ptr_to_globals).last_search_pattern = crate::libbb::xfuncs_printf::xstrdup(q);
                current_block = 7392824444931029276;
              } else {
                current_block = 15129665204879337069;
              }
            }
            16407828456666301883 => {
              if (*ptr_to_globals).last_forward_char == 0 {
                current_block = 15129665204879337069;
              } else {
                loop {
                  q = (*ptr_to_globals).dot.offset(-1);
                  while q >= (*ptr_to_globals).text
                    && *q as libc::c_int != '\n' as i32
                    && *q as libc::c_int != (*ptr_to_globals).last_forward_char
                  {
                    q = q.offset(-1)
                  }
                  if q >= (*ptr_to_globals).text
                    && *q as libc::c_int == (*ptr_to_globals).last_forward_char
                  {
                    (*ptr_to_globals).dot = q
                  }
                  (*ptr_to_globals).cmdcnt -= 1;
                  if !((*ptr_to_globals).cmdcnt > 0) {
                    break;
                  }
                }
                current_block = 15129665204879337069;
              }
            }
            9018432604062702004 => {
              q = (*ptr_to_globals).dot;
              while q < (*ptr_to_globals).end && *q as libc::c_int != '\n' as i32 {
                if !strchr(
                  b"()[]{}\x00" as *const u8 as *const libc::c_char,
                  *q as libc::c_int,
                )
                .is_null()
                {
                  p = find_pair(q, *q);
                  if p.is_null() {
                    indicate_error();
                  } else {
                    (*ptr_to_globals).dot = p
                  }
                  break;
                } else {
                  q = q.offset(1)
                }
              }
              if *q as libc::c_int == '\n' as i32 {
                indicate_error();
              }
              current_block = 15129665204879337069;
            }
            10247103787464459848 => {
              p = (*ptr_to_globals).reg[(*ptr_to_globals).YDreg as usize];
              if p.is_null() {
                status_line_bold(
                  b"Nothing in register %c\x00" as *const u8 as *const libc::c_char,
                  what_reg() as libc::c_int,
                );
              } else {
                if !strchr(p, '\n' as i32).is_null() {
                  if c == 'P' as i32 {
                    dot_begin();
                  }
                  if c == 'p' as i32 {
                    if end_line((*ptr_to_globals).dot) == (*ptr_to_globals).end.offset(-1) {
                      (*ptr_to_globals).dot = (*ptr_to_globals).end
                    } else {
                      dot_next();
                    }
                  }
                } else if c == 'p' as i32 {
                  dot_right();
                }
                string_insert((*ptr_to_globals).dot, p, 1i32);
                end_cmd_q();
              }
              current_block = 15129665204879337069;
            }
            15260732871948875843 => {
              c1 = (get_one_char() | 0x20i32) - 'a' as i32;
              if c1 as libc::c_uint <= 25i32 as libc::c_uint {
                (*ptr_to_globals).mark[c1 as usize] = (*ptr_to_globals).dot
              } else {
                indicate_error();
              }
              current_block = 15129665204879337069;
            }
            12738322036487086035 => {
              c1 = get_one_char() | 0x20i32;
              if (c1 - 'a' as i32) as libc::c_uint <= 25i32 as libc::c_uint {
                c1 = c1 - 'a' as i32;
                q = (*ptr_to_globals).mark[c1 as usize];
                if (*ptr_to_globals).text <= q && q < (*ptr_to_globals).end {
                  (*ptr_to_globals).dot = q;
                  dot_begin();
                  dot_skip_over_ws();
                }
              } else if c1 == '\'' as i32 {
                (*ptr_to_globals).dot = swap_context((*ptr_to_globals).dot);
                dot_begin();
                dot_skip_over_ws();
              } else {
                indicate_error();
              }
              current_block = 15129665204879337069;
            }
            13255096073384561358 => {
              c1 = (get_one_char() | 0x20i32) - 'a' as i32;
              if c1 as libc::c_uint <= 25i32 as libc::c_uint {
                (*ptr_to_globals).YDreg = c1 as smalluint
              } else {
                indicate_error();
              }
              current_block = 15129665204879337069;
            }
            10258711639984089377 => {
              if (*ptr_to_globals).cmd_mode as libc::c_int == 0 {
                indicate_error();
              }
              (*ptr_to_globals).cmd_mode = 0 as smallint;
              undo_queue_commit();
              end_cmd_q();
              (*ptr_to_globals).last_status_cksum = 0;
              current_block = 15129665204879337069;
            }
            11439127087547047736 => {
              buf[0] = c as libc::c_char;
              buf[1] = '\u{0}' as i32 as libc::c_char;
              not_implemented(buf.as_mut_ptr());
              end_cmd_q();
              current_block = 17440971994642376514;
            }
            7961798899781870241 => {
              dot_scroll(
                (*ptr_to_globals).rows.wrapping_sub(2i32 as libc::c_uint) as libc::c_int,
                -1i32,
              );
              current_block = 15129665204879337069;
            }
            9426343755402444879 => {
              dot_scroll(
                (*ptr_to_globals)
                  .rows
                  .wrapping_sub(2i32 as libc::c_uint)
                  .wrapping_div(2i32 as libc::c_uint) as libc::c_int,
                1i32,
              );
              current_block = 15129665204879337069;
            }
            13352459794680105913 => {
              dot_scroll(1i32, 1i32);
              current_block = 15129665204879337069;
            }
            14142272253464333006 => {
              dot_scroll(
                (*ptr_to_globals).rows.wrapping_sub(2i32 as libc::c_uint) as libc::c_int,
                1i32,
              );
              current_block = 15129665204879337069;
            }
            10758177197742640066 => {
              (*ptr_to_globals).last_status_cksum = 0;
              current_block = 15129665204879337069;
            }
            6152256259730122749 => {
              current_block = 7534742345255184552;
            }
            12883932598258173301 => {
              current_block = 8800996768013373992;
            }
            11242998110520238401 => {
              redraw(1i32);
              current_block = 15129665204879337069;
            }
            13619733043935729992 => {
              loop {
                dot_next();
                dot_skip_over_ws();
                (*ptr_to_globals).cmdcnt -= 1;
                if !((*ptr_to_globals).cmdcnt > 0) {
                  break;
                }
              }
              current_block = 15129665204879337069;
            }
            9339065157412720613 => {
              dot_scroll(
                (*ptr_to_globals)
                  .rows
                  .wrapping_sub(2i32 as libc::c_uint)
                  .wrapping_div(2i32 as libc::c_uint) as libc::c_int,
                -1i32,
              );
              current_block = 15129665204879337069;
            }
            11447082683497798022 => {
              dot_scroll(1i32, -1i32);
              current_block = 15129665204879337069;
            }
            5182000506326660482 => {
              current_block = 13993698454868426881;
            }
            1105010766850597332 => {
              if !(*ptr_to_globals).reg[27].is_null() {
                p = begin_line((*ptr_to_globals).dot);
                q = end_line((*ptr_to_globals).dot);
                p = text_hole_delete(p, q, 1i32);
                p = p.offset(string_insert(p, (*ptr_to_globals).reg[27], 2i32) as isize);
                (*ptr_to_globals).dot = p;
                dot_skip_over_ws();
              }
              current_block = 15129665204879337069;
            }
            8616046655533110204 => {
              undo_pop();
              current_block = 15129665204879337069;
            }
            5127767458142431603 => {
              loop {
                (*ptr_to_globals).dot = end_line((*ptr_to_globals).dot);
                (*ptr_to_globals).cmdcnt -= 1;
                if (*ptr_to_globals).cmdcnt <= 0 {
                  break;
                }
                dot_next();
              }
              current_block = 15129665204879337069;
            }
            222014967776118151 => {
              (*ptr_to_globals).last_forward_char = get_one_char();
              current_block = 7856905509180742666;
            }
            11209792479411604110 => {
              loop {
                dot_prev();
                dot_skip_over_ws();
                (*ptr_to_globals).cmdcnt -= 1;
                if !((*ptr_to_globals).cmdcnt > 0) {
                  break;
                }
              }
              current_block = 15129665204879337069;
            }
            3364823792826654116 => {
              if (*ptr_to_globals).lmc_len != 0 {
                (*ptr_to_globals).ioq_start = crate::libbb::xfuncs_printf::xstrndup(
                  (*ptr_to_globals).last_modifying_cmd.as_mut_ptr(),
                  (*ptr_to_globals).lmc_len,
                );
                (*ptr_to_globals).ioq = (*ptr_to_globals).ioq_start
              }
              current_block = 15129665204879337069;
            }
            18096603330221575131 => {
              current_block = 17498168302144015873;
            }
            16891123271837848903 => {
              dot_end();
              current_block = 1752638907092016026;
            }
            8517235759107662071 => {
              current_block = 5847749760081351726;
            }
            12525254419223051704 => {
              if (*ptr_to_globals).dot < (*ptr_to_globals).end.offset(-1) {
                (*ptr_to_globals).dot = yank_delete(
                  (*ptr_to_globals).dot,
                  (*ptr_to_globals).dot,
                  1i32,
                  YANKDEL as libc::c_int,
                  1i32,
                )
              }
              current_block = 15129665204879337069;
            }
            15232911949322867522 => {
              current_block = 17251831742223396249;
            }
            10863374208794025069 => {
              current_block = 1895262434596074581;
            }
            451126677064669119 => {
              loop {
                dot_prev();
                (*ptr_to_globals).dot = move_to_col(
                  (*ptr_to_globals).dot,
                  (*ptr_to_globals).ccol + (*ptr_to_globals).offset,
                );
                (*ptr_to_globals).cmdcnt -= 1;
                if !((*ptr_to_globals).cmdcnt > 0) {
                  break;
                }
              }
              current_block = 15129665204879337069;
            }
            4611735929166613116 => {
              loop {
                if bb_ascii_isalnum(*(*ptr_to_globals).dot as libc::c_uchar) != 0
                  || *(*ptr_to_globals).dot as libc::c_int == '_' as i32
                {
                  (*ptr_to_globals).dot = skip_thing(
                    (*ptr_to_globals).dot,
                    1i32,
                    FORWARD as libc::c_int,
                    S_END_ALNUM as libc::c_int,
                  )
                } else if *strchrnul(
                  b"!\"#$%&\'()*+,-./:;<=>?@[\\]^_`{|}~\x00" as *const u8 as *const libc::c_char,
                  *(*ptr_to_globals).dot as libc::c_int,
                )
                .offset(0)
                  != 0
                {
                  (*ptr_to_globals).dot = skip_thing(
                    (*ptr_to_globals).dot,
                    1i32,
                    FORWARD as libc::c_int,
                    S_END_PUNCT as libc::c_int,
                  )
                }
                if (*ptr_to_globals).dot < (*ptr_to_globals).end.offset(-1) {
                  (*ptr_to_globals).dot = (*ptr_to_globals).dot.offset(1)
                }
                if ({
                  let mut bb__isspace: libc::c_uchar =
                    (*(*ptr_to_globals).dot as libc::c_int - 9i32) as libc::c_uchar;
                  (bb__isspace as libc::c_int == ' ' as i32 - 9i32
                    || bb__isspace as libc::c_int <= 13i32 - 9i32) as libc::c_int
                }) != 0
                {
                  (*ptr_to_globals).dot = skip_thing(
                    (*ptr_to_globals).dot,
                    2i32,
                    FORWARD as libc::c_int,
                    S_OVER_WS as libc::c_int,
                  )
                }
                (*ptr_to_globals).cmdcnt -= 1;
                if !((*ptr_to_globals).cmdcnt > 0) {
                  break;
                }
              }
              current_block = 15129665204879337069;
            }
            4386451087681909888 => {
              (*ptr_to_globals).dot =
                move_to_col((*ptr_to_globals).dot, (*ptr_to_globals).cmdcnt - 1i32);
              current_block = 15129665204879337069;
            }
            1296397779060594135 => {
              dot_begin();
              current_block = 15129665204879337069;
            }
            _ => {}
          }
          match current_block {
            15129665204879337069 => {}
            8629930936610358348 => {}
            _ => {
              match current_block {
                17251831742223396249 => {
                  dir = 0;
                  if c == 'X' as i32 {
                    dir = -1i32
                  }
                  loop {
                    if *(*ptr_to_globals).dot.offset(dir as isize) as libc::c_int != '\n' as i32 {
                      if c == 'X' as i32 {
                        (*ptr_to_globals).dot = (*ptr_to_globals).dot.offset(-1)
                      }
                      (*ptr_to_globals).dot = yank_delete(
                        (*ptr_to_globals).dot,
                        (*ptr_to_globals).dot,
                        0,
                        YANKDEL as libc::c_int,
                        1i32,
                      )
                    }
                    (*ptr_to_globals).cmdcnt -= 1;
                    if !((*ptr_to_globals).cmdcnt > 0) {
                      break;
                    }
                  }
                  end_cmd_q();
                  if c == 's' as i32 {
                    current_block = 8629930936610358348;
                  } else {
                    current_block = 15129665204879337069;
                  }
                }
                2087484904894455135 => {
                  dot_end();
                  (*ptr_to_globals).dot =
                    char_insert((*ptr_to_globals).dot, '\n' as i32 as libc::c_char, 1i32);
                  current_block = 8629930936610358348;
                }
                11945623545738147997 => {
                  (*ptr_to_globals).dot = (*ptr_to_globals).end.offset(-1);
                  if (*ptr_to_globals).cmdcnt > 0 {
                    (*ptr_to_globals).dot = find_line((*ptr_to_globals).cmdcnt)
                  }
                  dot_skip_over_ws();
                  current_block = 15129665204879337069;
                }
                5847749760081351726 => {
                  dir = FORWARD as libc::c_int;
                  if c == 'B' as i32 {
                    dir = BACK as libc::c_int
                  }
                  loop {
                    if c == 'W' as i32
                      || ({
                        let mut bb__isspace: libc::c_uchar =
                          (*(*ptr_to_globals).dot.offset(dir as isize) as libc::c_int - 9i32)
                            as libc::c_uchar;
                        (bb__isspace as libc::c_int == ' ' as i32 - 9i32
                          || bb__isspace as libc::c_int <= 13i32 - 9i32)
                          as libc::c_int
                      }) != 0
                    {
                      (*ptr_to_globals).dot =
                        skip_thing((*ptr_to_globals).dot, 1i32, dir, S_TO_WS as libc::c_int);
                      (*ptr_to_globals).dot =
                        skip_thing((*ptr_to_globals).dot, 2i32, dir, S_OVER_WS as libc::c_int)
                    }
                    if c != 'W' as i32 {
                      (*ptr_to_globals).dot =
                        skip_thing((*ptr_to_globals).dot, 1i32, dir, S_BEFORE_WS as libc::c_int)
                    }
                    (*ptr_to_globals).cmdcnt -= 1;
                    if !((*ptr_to_globals).cmdcnt > 0) {
                      break;
                    }
                  }
                  current_block = 15129665204879337069;
                }
                17440971994642376514 => {
                  current_block = 15129665204879337069;
                }
                7534742345255184552 => {
                  current_block = 17247297260531395789;
                }
                8800996768013373992 => {
                  loop {
                    dot_next();
                    (*ptr_to_globals).dot = move_to_col(
                      (*ptr_to_globals).dot,
                      (*ptr_to_globals).ccol + (*ptr_to_globals).offset,
                    );
                    (*ptr_to_globals).cmdcnt -= 1;
                    if !((*ptr_to_globals).cmdcnt > 0) {
                      break;
                    }
                  }
                  current_block = 15129665204879337069;
                }
                13993698454868426881 => {
                  loop {
                    dot_right();
                    (*ptr_to_globals).cmdcnt -= 1;
                    if !((*ptr_to_globals).cmdcnt > 0) {
                      break;
                    }
                  }
                  current_block = 15129665204879337069;
                }
                7856905509180742666 => {
                  while !((*ptr_to_globals).last_forward_char == 0) {
                    q = (*ptr_to_globals).dot.offset(1);
                    while q < (*ptr_to_globals).end.offset(-1)
                      && *q as libc::c_int != '\n' as i32
                      && *q as libc::c_int != (*ptr_to_globals).last_forward_char
                    {
                      q = q.offset(1)
                    }
                    if *q as libc::c_int == (*ptr_to_globals).last_forward_char {
                      (*ptr_to_globals).dot = q
                    }
                    (*ptr_to_globals).cmdcnt -= 1;
                    if !((*ptr_to_globals).cmdcnt > 0) {
                      break;
                    }
                  }
                  current_block = 15129665204879337069;
                }
                17498168302144015873 => {
                  current_block = 8681395796513813967;
                }
                1752638907092016026 => {
                  if *(*ptr_to_globals).dot as libc::c_int != '\n' as i32 {
                    (*ptr_to_globals).dot = (*ptr_to_globals).dot.offset(1)
                  }
                  current_block = 8629930936610358348;
                }
                3268579060917229304 => {
                  current_block = 8629930936610358348;
                }
                1895262434596074581 => {
                  current_block = 8908416993177701018;
                }
                _ => {}
              }
              match current_block {
                8629930936610358348 => {}
                15129665204879337069 => {}
                _ => {
                  match current_block {
                    17247297260531395789 => {
                      loop {
                        dot_left();
                        (*ptr_to_globals).cmdcnt -= 1;
                        if !((*ptr_to_globals).cmdcnt > 0) {
                          break;
                        }
                      }
                      current_block = 15129665204879337069;
                    }
                    8681395796513813967 => {
                      current_block = 5591548203144509315;
                    }
                    8908416993177701018 => {
                      current_block = 16124761010012532485;
                    }
                    _ => {}
                  }
                  match current_block {
                    15129665204879337069 => {}
                    _ => {
                      match current_block {
                        16124761010012532485 => {
                          let mut yf: libc::c_int = 0;
                          let mut ml: libc::c_int = 0;
                          let mut whole: libc::c_int = 0;
                          yf = YANKDEL as libc::c_int;
                          if c == 'y' as i32 || c == 'Y' as i32 {
                            yf = YANKONLY as libc::c_int
                          }
                          c1 = 'y' as i32;
                          if c != 'Y' as i32 {
                            c1 = get_one_char()
                          }
                          ml = find_range(&mut p, &mut q, c1 as libc::c_char);
                          place_cursor(0i32, 0);
                          if c1 == 27i32 {
                            c1 = 27i32;
                            c = c1
                          } else if !strchr(b"wW\x00" as *const u8 as *const libc::c_char, c1)
                            .is_null()
                          {
                            ml = 0;
                            if c == 'c' as i32 {
                              while ({
                                let mut bb__isspace: libc::c_uchar =
                                  (*q as libc::c_int - 9i32) as libc::c_uchar;
                                (bb__isspace as libc::c_int == ' ' as i32 - 9i32
                                  || bb__isspace as libc::c_int <= 13i32 - 9i32)
                                  as libc::c_int
                              }) != 0
                                && q > p
                              {
                                q = q.offset(-1)
                              }
                            }
                            (*ptr_to_globals).dot = yank_delete(p, q, ml, yf, 1i32)
                          } else if !strchr(
                            b"^0bBeEft%$ lh\x08\x7f\x00" as *const u8 as *const libc::c_char,
                            c1,
                          )
                          .is_null()
                          {
                            (*ptr_to_globals).dot = yank_delete(p, q, ml, yf, 1i32)
                          } else if !strchr(
                            b"cdykjGHL+-{}\r\n\x00" as *const u8 as *const libc::c_char,
                            c1,
                          )
                          .is_null()
                          {
                            (*ptr_to_globals).dot = yank_delete(p, q, ml, yf, 1i32);
                            whole = 1i32
                          } else {
                            c1 = 27i32;
                            c = c1;
                            ml = 0;
                            indicate_error();
                          }
                          if ml != 0 && whole != 0 {
                            if c == 'c' as i32 {
                              (*ptr_to_globals).dot = char_insert(
                                (*ptr_to_globals).dot,
                                '\n' as i32 as libc::c_char,
                                2i32,
                              );
                              if whole != 0
                                && (*ptr_to_globals).dot != (*ptr_to_globals).end.offset(-1)
                              {
                                dot_prev();
                              }
                            } else if c == 'd' as i32 {
                              dot_begin();
                              dot_skip_over_ws();
                            }
                          }
                          if c1 != 27i32 {
                            if c == 'c' as i32 {
                              strcpy(
                                buf.as_mut_ptr(),
                                b"Change\x00" as *const u8 as *const libc::c_char,
                              );
                              current_block = 8629930936610358348;
                            } else {
                              if c == 'd' as i32 {
                                strcpy(
                                  buf.as_mut_ptr(),
                                  b"Delete\x00" as *const u8 as *const libc::c_char,
                                );
                              }
                              if c == 'y' as i32 || c == 'Y' as i32 {
                                strcpy(
                                  buf.as_mut_ptr(),
                                  b"Yank\x00" as *const u8 as *const libc::c_char,
                                );
                              }
                              p = (*ptr_to_globals).reg[(*ptr_to_globals).YDreg as usize];
                              q = p.offset(strlen(p) as isize);
                              cnt = 0;
                              while p <= q {
                                if *p as libc::c_int == '\n' as i32 {
                                  cnt += 1
                                }
                                p = p.offset(1)
                              }
                              status_line(
                                b"%s %u lines (%u chars) using [%c]\x00" as *const u8
                                  as *const libc::c_char,
                                buf.as_mut_ptr(),
                                cnt,
                                strlen((*ptr_to_globals).reg[(*ptr_to_globals).YDreg as usize])
                                  as libc::c_uint,
                                what_reg() as libc::c_int,
                              );
                              end_cmd_q();
                              current_block = 15129665204879337069;
                            }
                          } else {
                            current_block = 15129665204879337069;
                          }
                        }
                        5591548203144509315 => {
                          current_block = 2636677179867529885;
                        }
                        _ => {}
                      }
                      match current_block {
                        15129665204879337069 => {}
                        8629930936610358348 => {}
                        _ => {
                          match current_block {
                            2636677179867529885 => {
                              current_block = 12309206730560524281;
                            }
                            _ => {}
                          }
                          match current_block {
                            12309206730560524281 => {
                              current_block = 3325768110057758661;
                            }
                            _ => {}
                          }
                          match current_block {
                            3325768110057758661 => {
                              current_block = 14815832896553429982;
                            }
                            _ => {}
                          }
                          match current_block {
                            14815832896553429982 => {
                              current_block = 10731695520297161438;
                            }
                            _ => {}
                          }
                          match current_block {
                            10731695520297161438 => {
                              if c == '0' as i32 && (*ptr_to_globals).cmdcnt < 1i32 {
                                dot_begin();
                              } else {
                                (*ptr_to_globals).cmdcnt =
                                  (*ptr_to_globals).cmdcnt * 10i32 + (c - '0' as i32)
                              }
                              current_block = 15129665204879337069;
                            }
                            _ => {}
                          }
                          match current_block {
                            15129665204879337069 => {}
                            _ => {
                              loop {
                                match current_block {
                                  16813369756331276724 => {
                                    msg = std::ptr::null();
                                    current_block = 7392824444931029276;
                                  }
                                  7392824444931029276 => {
                                    dir = FORWARD as libc::c_int;
                                    p = (*ptr_to_globals).dot.offset(1);
                                    if *(*ptr_to_globals).last_search_pattern.offset(0)
                                      as libc::c_int
                                      == '?' as i32
                                    {
                                      dir = BACK as libc::c_int;
                                      p = (*ptr_to_globals).dot.offset(-1)
                                    }
                                    current_block = 4166979493554389389;
                                  }
                                  _ => {
                                    q = char_search(
                                      p,
                                      (*ptr_to_globals).last_search_pattern.offset(1),
                                      dir << 1i32 | FULL as libc::c_int,
                                    );
                                    if !q.is_null() {
                                      (*ptr_to_globals).dot = q;
                                      msg = std::ptr::null()
                                    } else {
                                      p = (*ptr_to_globals).text;
                                      if dir == BACK as libc::c_int {
                                        p = (*ptr_to_globals).end.offset(-1)
                                      }
                                      q = char_search(
                                        p,
                                        (*ptr_to_globals).last_search_pattern.offset(1),
                                        dir << 1i32 | FULL as libc::c_int,
                                      );
                                      if !q.is_null() {
                                        (*ptr_to_globals).dot = q;
                                        msg = b"search hit BOTTOM, continuing at TOP\x00"
                                          as *const u8
                                          as *const libc::c_char;
                                        if dir == BACK as libc::c_int {
                                          msg = b"search hit TOP, continuing at BOTTOM\x00"
                                            as *const u8
                                            as *const libc::c_char
                                        }
                                      } else {
                                        msg = b"Pattern not found\x00" as *const u8
                                          as *const libc::c_char
                                      }
                                    }
                                    if !msg.is_null() {
                                      status_line_bold(
                                        b"%s\x00" as *const u8 as *const libc::c_char,
                                        msg,
                                      );
                                    }
                                    (*ptr_to_globals).cmdcnt -= 1;
                                    if (*ptr_to_globals).cmdcnt > 0 {
                                      current_block = 16813369756331276724;
                                    } else {
                                      break;
                                    }
                                  }
                                }
                              }
                              current_block = 15129665204879337069;
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
        50 => {
          current_block = 8681395796513813967;
          match current_block {
            16992905640583886232 => {
              loop {
                if (*(*ptr_to_globals).dot as libc::c_int - 'a' as i32) as libc::c_uchar
                  as libc::c_int
                  <= 'z' as i32 - 'a' as i32
                {
                  undo_push(
                    (*ptr_to_globals).dot,
                    1i32 as libc::c_uint,
                    1i32 as libc::c_uchar,
                  );
                  *(*ptr_to_globals).dot =
                    bb_ascii_toupper(*(*ptr_to_globals).dot as libc::c_uchar) as libc::c_char;
                  undo_push(
                    (*ptr_to_globals).dot,
                    1i32 as libc::c_uint,
                    2i32 as libc::c_uchar,
                  );
                } else if (*(*ptr_to_globals).dot as libc::c_int - 'A' as i32) as libc::c_uchar
                  as libc::c_int
                  <= 'Z' as i32 - 'A' as i32
                {
                  undo_push(
                    (*ptr_to_globals).dot,
                    1i32 as libc::c_uint,
                    1i32 as libc::c_uchar,
                  );
                  *(*ptr_to_globals).dot =
                    bb_ascii_tolower(*(*ptr_to_globals).dot as libc::c_uchar) as libc::c_char;
                  undo_push(
                    (*ptr_to_globals).dot,
                    1i32 as libc::c_uint,
                    2i32 as libc::c_uchar,
                  );
                }
                dot_right();
                (*ptr_to_globals).cmdcnt -= 1;
                if !((*ptr_to_globals).cmdcnt > 0) {
                  break;
                }
              }
              end_cmd_q();
              current_block = 15129665204879337069;
            }
            8729655159604064397 => {
              c1 = get_one_char();
              cnt = 0;
              if c1 == '.' as i32 {
                cnt = (*ptr_to_globals)
                  .rows
                  .wrapping_sub(2i32 as libc::c_uint)
                  .wrapping_div(2i32 as libc::c_uint) as libc::c_int
              }
              if c1 == '-' as i32 {
                cnt = (*ptr_to_globals).rows.wrapping_sub(2i32 as libc::c_uint) as libc::c_int
              }
              (*ptr_to_globals).screenbegin = begin_line((*ptr_to_globals).dot);
              dot_scroll(cnt, -1i32);
              current_block = 15129665204879337069;
            }
            15899500648299942075 => {
              (*ptr_to_globals).last_forward_char = get_one_char();
              do_cmd(';' as i32);
              if *(*ptr_to_globals).dot as libc::c_int == (*ptr_to_globals).last_forward_char {
                dot_left();
              }
              (*ptr_to_globals).last_forward_char = 0;
              current_block = 15129665204879337069;
            }
            9051390181078481641 => {
              c1 = get_one_char();
              if *(*ptr_to_globals).dot as libc::c_int != '\n' as i32 {
                (*ptr_to_globals).dot =
                  text_hole_delete((*ptr_to_globals).dot, (*ptr_to_globals).dot, 1i32);
                (*ptr_to_globals).dot =
                  char_insert((*ptr_to_globals).dot, c1 as libc::c_char, 2i32);
                dot_left();
              }
              end_cmd_q();
              current_block = 15129665204879337069;
            }
            877115918601926659 => {
              dir = FORWARD as libc::c_int;
              if c == 'b' as i32 {
                dir = BACK as libc::c_int
              }
              while !((*ptr_to_globals).dot.offset(dir as isize) < (*ptr_to_globals).text
                || (*ptr_to_globals).dot.offset(dir as isize) > (*ptr_to_globals).end.offset(-1))
              {
                (*ptr_to_globals).dot = (*ptr_to_globals).dot.offset(dir as isize);
                if ({
                  let mut bb__isspace: libc::c_uchar =
                    (*(*ptr_to_globals).dot as libc::c_int - 9i32) as libc::c_uchar;
                  (bb__isspace as libc::c_int == ' ' as i32 - 9i32
                    || bb__isspace as libc::c_int <= 13i32 - 9i32) as libc::c_int
                }) != 0
                {
                  (*ptr_to_globals).dot = skip_thing(
                    (*ptr_to_globals).dot,
                    if c == 'e' as i32 { 2i32 } else { 1i32 },
                    dir,
                    S_OVER_WS as libc::c_int,
                  )
                }
                if bb_ascii_isalnum(*(*ptr_to_globals).dot as libc::c_uchar) != 0
                  || *(*ptr_to_globals).dot as libc::c_int == '_' as i32
                {
                  (*ptr_to_globals).dot =
                    skip_thing((*ptr_to_globals).dot, 1i32, dir, S_END_ALNUM as libc::c_int)
                } else if *strchrnul(
                  b"!\"#$%&\'()*+,-./:;<=>?@[\\]^_`{|}~\x00" as *const u8 as *const libc::c_char,
                  *(*ptr_to_globals).dot as libc::c_int,
                )
                .offset(0)
                  != 0
                {
                  (*ptr_to_globals).dot =
                    skip_thing((*ptr_to_globals).dot, 1i32, dir, S_END_PUNCT as libc::c_int)
                }
                (*ptr_to_globals).cmdcnt -= 1;
                if !((*ptr_to_globals).cmdcnt > 0) {
                  break;
                }
              }
              current_block = 15129665204879337069;
            }
            1085022737867179637 => {
              dot_begin();
              dot_skip_over_ws();
              current_block = 15129665204879337069;
            }
            3113147720494587438 => {
              c1 = get_one_char();
              if c1 != 'Z' as i32 {
                indicate_error();
              } else if (*ptr_to_globals).modified_count != 0 {
                if 1i32 != 0 && (*ptr_to_globals).readonly_mode as libc::c_int != 0 {
                  status_line_bold(
                    b"\'%s\' is read only\x00" as *const u8 as *const libc::c_char,
                    (*ptr_to_globals).current_filename,
                  );
                } else {
                  cnt = file_write(
                    (*ptr_to_globals).current_filename,
                    (*ptr_to_globals).text,
                    (*ptr_to_globals).end.offset(-1),
                  );
                  if cnt < 0 {
                    if cnt == -1i32 {
                      status_line_bold(b"Write error: %m\x00" as *const u8 as *const libc::c_char);
                    }
                  } else if cnt as libc::c_long
                    == (*ptr_to_globals)
                      .end
                      .offset(-1)
                      .wrapping_offset_from((*ptr_to_globals).text)
                      as libc::c_long
                      + 1
                  {
                    (*ptr_to_globals).editing = 0 as smallint
                  }
                }
              } else {
                (*ptr_to_globals).editing = 0 as smallint
              }
              current_block = 15129665204879337069;
            }
            12960118908218882441 => {
              p = begin_line((*ptr_to_globals).dot);
              if *p.offset(-1i32 as isize) as libc::c_int == '\n' as i32 {
                dot_prev();
                current_block = 2087484904894455135;
              } else {
                dot_begin();
                (*ptr_to_globals).dot =
                  char_insert((*ptr_to_globals).dot, '\n' as i32 as libc::c_char, 1i32);
                dot_prev();
                current_block = 8629930936610358348;
              }
            }
            8720450212473544924 => {
              (*ptr_to_globals).dot = (*ptr_to_globals).screenbegin;
              cnt = 0;
              while (cnt as libc::c_uint)
                < (*ptr_to_globals)
                  .rows
                  .wrapping_sub(1i32 as libc::c_uint)
                  .wrapping_div(2i32 as libc::c_uint)
              {
                (*ptr_to_globals).dot = next_line((*ptr_to_globals).dot);
                cnt += 1
              }
              current_block = 15129665204879337069;
            }
            13015277209715431090 => {
              (*ptr_to_globals).dot = end_screen();
              if (*ptr_to_globals).cmdcnt as libc::c_uint
                > (*ptr_to_globals).rows.wrapping_sub(1i32 as libc::c_uint)
              {
                (*ptr_to_globals).cmdcnt =
                  (*ptr_to_globals).rows.wrapping_sub(1i32 as libc::c_uint) as libc::c_int
              }
              (*ptr_to_globals).cmdcnt -= 1;
              if (*ptr_to_globals).cmdcnt > 0 {
                do_cmd('-' as i32);
              }
              dot_begin();
              dot_skip_over_ws();
              current_block = 15129665204879337069;
            }
            9800435767766781385 => {
              loop {
                dot_end();
                if (*ptr_to_globals).dot < (*ptr_to_globals).end.offset(-1) {
                  undo_push(
                    (*ptr_to_globals).dot,
                    1i32 as libc::c_uint,
                    1i32 as libc::c_uchar,
                  );
                  let fresh15 = (*ptr_to_globals).dot;
                  (*ptr_to_globals).dot = (*ptr_to_globals).dot.offset(1);
                  *fresh15 = ' ' as i32 as libc::c_char;
                  undo_push(
                    (*ptr_to_globals).dot.offset(-1),
                    1i32 as libc::c_uint,
                    2i32 as libc::c_uchar,
                  );
                  while ({
                    let mut bb__isblank: libc::c_uchar = *(*ptr_to_globals).dot as libc::c_uchar;
                    (bb__isblank as libc::c_int == ' ' as i32
                      || bb__isblank as libc::c_int == '\t' as i32)
                      as libc::c_int
                  }) != 0
                  {
                    text_hole_delete((*ptr_to_globals).dot, (*ptr_to_globals).dot, 2i32);
                  }
                }
                (*ptr_to_globals).cmdcnt -= 1;
                if !((*ptr_to_globals).cmdcnt > 0) {
                  break;
                }
              }
              end_cmd_q();
              current_block = 15129665204879337069;
            }
            3432363526595694666 => {
              dot_begin();
              dot_skip_over_ws();
              current_block = 3268579060917229304;
            }
            3494829253343353619 => {
              (*ptr_to_globals).dot = (*ptr_to_globals).screenbegin;
              if (*ptr_to_globals).cmdcnt as libc::c_uint
                > (*ptr_to_globals).rows.wrapping_sub(1i32 as libc::c_uint)
              {
                (*ptr_to_globals).cmdcnt =
                  (*ptr_to_globals).rows.wrapping_sub(1i32 as libc::c_uint) as libc::c_int
              }
              (*ptr_to_globals).cmdcnt -= 1;
              if (*ptr_to_globals).cmdcnt > 0 {
                do_cmd('+' as i32);
              }
              dot_skip_over_ws();
              current_block = 15129665204879337069;
            }
            17973101765331640574 => {
              c1 = get_one_char();
              if c1 != 'g' as i32 {
                buf[0] = 'g' as i32 as libc::c_char;
                buf[1] = if c1 >= 0 { c1 } else { '*' as i32 } as libc::c_char;
                buf[2] = '\u{0}' as i32 as libc::c_char;
                not_implemented(buf.as_mut_ptr());
                current_block = 15129665204879337069;
              } else {
                if (*ptr_to_globals).cmdcnt == 0 {
                  (*ptr_to_globals).cmdcnt = 1i32
                }
                current_block = 11945623545738147997;
              }
            }
            16546625800574160972 => {
              save_dot = (*ptr_to_globals).dot;
              (*ptr_to_globals).dot = dollar_line((*ptr_to_globals).dot);
              (*ptr_to_globals).dot = yank_delete(
                save_dot,
                (*ptr_to_globals).dot,
                0,
                YANKDEL as libc::c_int,
                1i32,
              );
              if c == 'C' as i32 {
                current_block = 8629930936610358348;
              } else {
                if c == 'D' as i32 {
                  end_cmd_q();
                }
                current_block = 15129665204879337069;
              }
            }
            11937696639986586685 => {
              cnt = count_lines((*ptr_to_globals).text, (*ptr_to_globals).dot);
              c1 = get_one_char();
              find_range(&mut p, &mut q, c1 as libc::c_char);
              yank_delete(p, q, 1i32, YANKONLY as libc::c_int, 0);
              p = begin_line(p);
              q = end_line(q);
              i = count_lines(p, q);
              while i > 0 {
                if c == '<' as i32 {
                  if *p as libc::c_int == '\t' as i32 {
                    text_hole_delete(p, p, 0);
                  } else if *p as libc::c_int == ' ' as i32 {
                    j = 0;
                    while *p as libc::c_int == ' ' as i32 && j < (*ptr_to_globals).tabstop {
                      text_hole_delete(p, p, 0);
                      j += 1
                    }
                  }
                } else if c == '>' as i32 {
                  char_insert(p, '\t' as i32 as libc::c_char, 1i32);
                }
                i -= 1;
                p = next_line(p)
              }
              (*ptr_to_globals).dot = find_line(cnt);
              dot_skip_over_ws();
              end_cmd_q();
              current_block = 15129665204879337069;
            }
            17725350714912028156 => {
              p = get_input_line(b":\x00" as *const u8 as *const libc::c_char);
              colon(p);
              current_block = 15129665204879337069;
            }
            14526470074083880812 => {
              q = char_search(
                (*ptr_to_globals).dot,
                b"\n\n\x00" as *const u8 as *const libc::c_char,
                (FORWARD as libc::c_int) << 1i32 | FULL as libc::c_int,
              );
              if !q.is_null() {
                (*ptr_to_globals).dot = next_line(q)
              }
              current_block = 15129665204879337069;
            }
            8893187391306414141 => {
              q = char_search(
                (*ptr_to_globals).dot,
                b"\n\n\x00" as *const u8 as *const libc::c_char,
                ((BACK as libc::c_int as libc::c_uint) << 1i32
                  | FULL as libc::c_int as libc::c_uint) as libc::c_int,
              );
              if !q.is_null() {
                (*ptr_to_globals).dot = next_line(q)
              }
              current_block = 15129665204879337069;
            }
            7021673758293221412 => {
              dir = BACK as libc::c_int;
              p = (*ptr_to_globals).dot.offset(-1);
              if *(*ptr_to_globals).last_search_pattern.offset(0) as libc::c_int == '?' as i32 {
                dir = FORWARD as libc::c_int;
                p = (*ptr_to_globals).dot.offset(1)
              }
              current_block = 4166979493554389389;
            }
            18374191879090272823 => {
              buf[0] = c as libc::c_char;
              buf[1] = '\u{0}' as i32 as libc::c_char;
              q = get_input_line(buf.as_mut_ptr());
              if *q.offset(0) as libc::c_int != 0 && *q.offset(1) == 0 {
                if *(*ptr_to_globals).last_search_pattern.offset(0) != 0 {
                  *(*ptr_to_globals).last_search_pattern.offset(0) = c as libc::c_char
                }
                current_block = 7392824444931029276;
              } else if *q.offset(0) != 0 {
                free((*ptr_to_globals).last_search_pattern as *mut libc::c_void);
                (*ptr_to_globals).last_search_pattern = crate::libbb::xfuncs_printf::xstrdup(q);
                current_block = 7392824444931029276;
              } else {
                current_block = 15129665204879337069;
              }
            }
            16407828456666301883 => {
              if (*ptr_to_globals).last_forward_char == 0 {
                current_block = 15129665204879337069;
              } else {
                loop {
                  q = (*ptr_to_globals).dot.offset(-1);
                  while q >= (*ptr_to_globals).text
                    && *q as libc::c_int != '\n' as i32
                    && *q as libc::c_int != (*ptr_to_globals).last_forward_char
                  {
                    q = q.offset(-1)
                  }
                  if q >= (*ptr_to_globals).text
                    && *q as libc::c_int == (*ptr_to_globals).last_forward_char
                  {
                    (*ptr_to_globals).dot = q
                  }
                  (*ptr_to_globals).cmdcnt -= 1;
                  if !((*ptr_to_globals).cmdcnt > 0) {
                    break;
                  }
                }
                current_block = 15129665204879337069;
              }
            }
            9018432604062702004 => {
              q = (*ptr_to_globals).dot;
              while q < (*ptr_to_globals).end && *q as libc::c_int != '\n' as i32 {
                if !strchr(
                  b"()[]{}\x00" as *const u8 as *const libc::c_char,
                  *q as libc::c_int,
                )
                .is_null()
                {
                  p = find_pair(q, *q);
                  if p.is_null() {
                    indicate_error();
                  } else {
                    (*ptr_to_globals).dot = p
                  }
                  break;
                } else {
                  q = q.offset(1)
                }
              }
              if *q as libc::c_int == '\n' as i32 {
                indicate_error();
              }
              current_block = 15129665204879337069;
            }
            10247103787464459848 => {
              p = (*ptr_to_globals).reg[(*ptr_to_globals).YDreg as usize];
              if p.is_null() {
                status_line_bold(
                  b"Nothing in register %c\x00" as *const u8 as *const libc::c_char,
                  what_reg() as libc::c_int,
                );
              } else {
                if !strchr(p, '\n' as i32).is_null() {
                  if c == 'P' as i32 {
                    dot_begin();
                  }
                  if c == 'p' as i32 {
                    if end_line((*ptr_to_globals).dot) == (*ptr_to_globals).end.offset(-1) {
                      (*ptr_to_globals).dot = (*ptr_to_globals).end
                    } else {
                      dot_next();
                    }
                  }
                } else if c == 'p' as i32 {
                  dot_right();
                }
                string_insert((*ptr_to_globals).dot, p, 1i32);
                end_cmd_q();
              }
              current_block = 15129665204879337069;
            }
            15260732871948875843 => {
              c1 = (get_one_char() | 0x20i32) - 'a' as i32;
              if c1 as libc::c_uint <= 25i32 as libc::c_uint {
                (*ptr_to_globals).mark[c1 as usize] = (*ptr_to_globals).dot
              } else {
                indicate_error();
              }
              current_block = 15129665204879337069;
            }
            12738322036487086035 => {
              c1 = get_one_char() | 0x20i32;
              if (c1 - 'a' as i32) as libc::c_uint <= 25i32 as libc::c_uint {
                c1 = c1 - 'a' as i32;
                q = (*ptr_to_globals).mark[c1 as usize];
                if (*ptr_to_globals).text <= q && q < (*ptr_to_globals).end {
                  (*ptr_to_globals).dot = q;
                  dot_begin();
                  dot_skip_over_ws();
                }
              } else if c1 == '\'' as i32 {
                (*ptr_to_globals).dot = swap_context((*ptr_to_globals).dot);
                dot_begin();
                dot_skip_over_ws();
              } else {
                indicate_error();
              }
              current_block = 15129665204879337069;
            }
            13255096073384561358 => {
              c1 = (get_one_char() | 0x20i32) - 'a' as i32;
              if c1 as libc::c_uint <= 25i32 as libc::c_uint {
                (*ptr_to_globals).YDreg = c1 as smalluint
              } else {
                indicate_error();
              }
              current_block = 15129665204879337069;
            }
            10258711639984089377 => {
              if (*ptr_to_globals).cmd_mode as libc::c_int == 0 {
                indicate_error();
              }
              (*ptr_to_globals).cmd_mode = 0 as smallint;
              undo_queue_commit();
              end_cmd_q();
              (*ptr_to_globals).last_status_cksum = 0;
              current_block = 15129665204879337069;
            }
            11439127087547047736 => {
              buf[0] = c as libc::c_char;
              buf[1] = '\u{0}' as i32 as libc::c_char;
              not_implemented(buf.as_mut_ptr());
              end_cmd_q();
              current_block = 17440971994642376514;
            }
            7961798899781870241 => {
              dot_scroll(
                (*ptr_to_globals).rows.wrapping_sub(2i32 as libc::c_uint) as libc::c_int,
                -1i32,
              );
              current_block = 15129665204879337069;
            }
            9426343755402444879 => {
              dot_scroll(
                (*ptr_to_globals)
                  .rows
                  .wrapping_sub(2i32 as libc::c_uint)
                  .wrapping_div(2i32 as libc::c_uint) as libc::c_int,
                1i32,
              );
              current_block = 15129665204879337069;
            }
            13352459794680105913 => {
              dot_scroll(1i32, 1i32);
              current_block = 15129665204879337069;
            }
            14142272253464333006 => {
              dot_scroll(
                (*ptr_to_globals).rows.wrapping_sub(2i32 as libc::c_uint) as libc::c_int,
                1i32,
              );
              current_block = 15129665204879337069;
            }
            10758177197742640066 => {
              (*ptr_to_globals).last_status_cksum = 0;
              current_block = 15129665204879337069;
            }
            6152256259730122749 => {
              current_block = 7534742345255184552;
            }
            12883932598258173301 => {
              current_block = 8800996768013373992;
            }
            11242998110520238401 => {
              redraw(1i32);
              current_block = 15129665204879337069;
            }
            13619733043935729992 => {
              loop {
                dot_next();
                dot_skip_over_ws();
                (*ptr_to_globals).cmdcnt -= 1;
                if !((*ptr_to_globals).cmdcnt > 0) {
                  break;
                }
              }
              current_block = 15129665204879337069;
            }
            9339065157412720613 => {
              dot_scroll(
                (*ptr_to_globals)
                  .rows
                  .wrapping_sub(2i32 as libc::c_uint)
                  .wrapping_div(2i32 as libc::c_uint) as libc::c_int,
                -1i32,
              );
              current_block = 15129665204879337069;
            }
            11447082683497798022 => {
              dot_scroll(1i32, -1i32);
              current_block = 15129665204879337069;
            }
            5182000506326660482 => {
              current_block = 13993698454868426881;
            }
            1105010766850597332 => {
              if !(*ptr_to_globals).reg[27].is_null() {
                p = begin_line((*ptr_to_globals).dot);
                q = end_line((*ptr_to_globals).dot);
                p = text_hole_delete(p, q, 1i32);
                p = p.offset(string_insert(p, (*ptr_to_globals).reg[27], 2i32) as isize);
                (*ptr_to_globals).dot = p;
                dot_skip_over_ws();
              }
              current_block = 15129665204879337069;
            }
            8616046655533110204 => {
              undo_pop();
              current_block = 15129665204879337069;
            }
            5127767458142431603 => {
              loop {
                (*ptr_to_globals).dot = end_line((*ptr_to_globals).dot);
                (*ptr_to_globals).cmdcnt -= 1;
                if (*ptr_to_globals).cmdcnt <= 0 {
                  break;
                }
                dot_next();
              }
              current_block = 15129665204879337069;
            }
            222014967776118151 => {
              (*ptr_to_globals).last_forward_char = get_one_char();
              current_block = 7856905509180742666;
            }
            11209792479411604110 => {
              loop {
                dot_prev();
                dot_skip_over_ws();
                (*ptr_to_globals).cmdcnt -= 1;
                if !((*ptr_to_globals).cmdcnt > 0) {
                  break;
                }
              }
              current_block = 15129665204879337069;
            }
            3364823792826654116 => {
              if (*ptr_to_globals).lmc_len != 0 {
                (*ptr_to_globals).ioq_start = crate::libbb::xfuncs_printf::xstrndup(
                  (*ptr_to_globals).last_modifying_cmd.as_mut_ptr(),
                  (*ptr_to_globals).lmc_len,
                );
                (*ptr_to_globals).ioq = (*ptr_to_globals).ioq_start
              }
              current_block = 15129665204879337069;
            }
            18096603330221575131 => {
              current_block = 17498168302144015873;
            }
            16891123271837848903 => {
              dot_end();
              current_block = 1752638907092016026;
            }
            8517235759107662071 => {
              current_block = 5847749760081351726;
            }
            12525254419223051704 => {
              if (*ptr_to_globals).dot < (*ptr_to_globals).end.offset(-1) {
                (*ptr_to_globals).dot = yank_delete(
                  (*ptr_to_globals).dot,
                  (*ptr_to_globals).dot,
                  1i32,
                  YANKDEL as libc::c_int,
                  1i32,
                )
              }
              current_block = 15129665204879337069;
            }
            15232911949322867522 => {
              current_block = 17251831742223396249;
            }
            10863374208794025069 => {
              current_block = 1895262434596074581;
            }
            451126677064669119 => {
              loop {
                dot_prev();
                (*ptr_to_globals).dot = move_to_col(
                  (*ptr_to_globals).dot,
                  (*ptr_to_globals).ccol + (*ptr_to_globals).offset,
                );
                (*ptr_to_globals).cmdcnt -= 1;
                if !((*ptr_to_globals).cmdcnt > 0) {
                  break;
                }
              }
              current_block = 15129665204879337069;
            }
            4611735929166613116 => {
              loop {
                if bb_ascii_isalnum(*(*ptr_to_globals).dot as libc::c_uchar) != 0
                  || *(*ptr_to_globals).dot as libc::c_int == '_' as i32
                {
                  (*ptr_to_globals).dot = skip_thing(
                    (*ptr_to_globals).dot,
                    1i32,
                    FORWARD as libc::c_int,
                    S_END_ALNUM as libc::c_int,
                  )
                } else if *strchrnul(
                  b"!\"#$%&\'()*+,-./:;<=>?@[\\]^_`{|}~\x00" as *const u8 as *const libc::c_char,
                  *(*ptr_to_globals).dot as libc::c_int,
                )
                .offset(0)
                  != 0
                {
                  (*ptr_to_globals).dot = skip_thing(
                    (*ptr_to_globals).dot,
                    1i32,
                    FORWARD as libc::c_int,
                    S_END_PUNCT as libc::c_int,
                  )
                }
                if (*ptr_to_globals).dot < (*ptr_to_globals).end.offset(-1) {
                  (*ptr_to_globals).dot = (*ptr_to_globals).dot.offset(1)
                }
                if ({
                  let mut bb__isspace: libc::c_uchar =
                    (*(*ptr_to_globals).dot as libc::c_int - 9i32) as libc::c_uchar;
                  (bb__isspace as libc::c_int == ' ' as i32 - 9i32
                    || bb__isspace as libc::c_int <= 13i32 - 9i32) as libc::c_int
                }) != 0
                {
                  (*ptr_to_globals).dot = skip_thing(
                    (*ptr_to_globals).dot,
                    2i32,
                    FORWARD as libc::c_int,
                    S_OVER_WS as libc::c_int,
                  )
                }
                (*ptr_to_globals).cmdcnt -= 1;
                if !((*ptr_to_globals).cmdcnt > 0) {
                  break;
                }
              }
              current_block = 15129665204879337069;
            }
            4386451087681909888 => {
              (*ptr_to_globals).dot =
                move_to_col((*ptr_to_globals).dot, (*ptr_to_globals).cmdcnt - 1i32);
              current_block = 15129665204879337069;
            }
            1296397779060594135 => {
              dot_begin();
              current_block = 15129665204879337069;
            }
            _ => {}
          }
          match current_block {
            15129665204879337069 => {}
            8629930936610358348 => {}
            _ => {
              match current_block {
                17251831742223396249 => {
                  dir = 0;
                  if c == 'X' as i32 {
                    dir = -1i32
                  }
                  loop {
                    if *(*ptr_to_globals).dot.offset(dir as isize) as libc::c_int != '\n' as i32 {
                      if c == 'X' as i32 {
                        (*ptr_to_globals).dot = (*ptr_to_globals).dot.offset(-1)
                      }
                      (*ptr_to_globals).dot = yank_delete(
                        (*ptr_to_globals).dot,
                        (*ptr_to_globals).dot,
                        0,
                        YANKDEL as libc::c_int,
                        1i32,
                      )
                    }
                    (*ptr_to_globals).cmdcnt -= 1;
                    if !((*ptr_to_globals).cmdcnt > 0) {
                      break;
                    }
                  }
                  end_cmd_q();
                  if c == 's' as i32 {
                    current_block = 8629930936610358348;
                  } else {
                    current_block = 15129665204879337069;
                  }
                }
                2087484904894455135 => {
                  dot_end();
                  (*ptr_to_globals).dot =
                    char_insert((*ptr_to_globals).dot, '\n' as i32 as libc::c_char, 1i32);
                  current_block = 8629930936610358348;
                }
                11945623545738147997 => {
                  (*ptr_to_globals).dot = (*ptr_to_globals).end.offset(-1);
                  if (*ptr_to_globals).cmdcnt > 0 {
                    (*ptr_to_globals).dot = find_line((*ptr_to_globals).cmdcnt)
                  }
                  dot_skip_over_ws();
                  current_block = 15129665204879337069;
                }
                5847749760081351726 => {
                  dir = FORWARD as libc::c_int;
                  if c == 'B' as i32 {
                    dir = BACK as libc::c_int
                  }
                  loop {
                    if c == 'W' as i32
                      || ({
                        let mut bb__isspace: libc::c_uchar =
                          (*(*ptr_to_globals).dot.offset(dir as isize) as libc::c_int - 9i32)
                            as libc::c_uchar;
                        (bb__isspace as libc::c_int == ' ' as i32 - 9i32
                          || bb__isspace as libc::c_int <= 13i32 - 9i32)
                          as libc::c_int
                      }) != 0
                    {
                      (*ptr_to_globals).dot =
                        skip_thing((*ptr_to_globals).dot, 1i32, dir, S_TO_WS as libc::c_int);
                      (*ptr_to_globals).dot =
                        skip_thing((*ptr_to_globals).dot, 2i32, dir, S_OVER_WS as libc::c_int)
                    }
                    if c != 'W' as i32 {
                      (*ptr_to_globals).dot =
                        skip_thing((*ptr_to_globals).dot, 1i32, dir, S_BEFORE_WS as libc::c_int)
                    }
                    (*ptr_to_globals).cmdcnt -= 1;
                    if !((*ptr_to_globals).cmdcnt > 0) {
                      break;
                    }
                  }
                  current_block = 15129665204879337069;
                }
                17440971994642376514 => {
                  current_block = 15129665204879337069;
                }
                7534742345255184552 => {
                  current_block = 17247297260531395789;
                }
                8800996768013373992 => {
                  loop {
                    dot_next();
                    (*ptr_to_globals).dot = move_to_col(
                      (*ptr_to_globals).dot,
                      (*ptr_to_globals).ccol + (*ptr_to_globals).offset,
                    );
                    (*ptr_to_globals).cmdcnt -= 1;
                    if !((*ptr_to_globals).cmdcnt > 0) {
                      break;
                    }
                  }
                  current_block = 15129665204879337069;
                }
                13993698454868426881 => {
                  loop {
                    dot_right();
                    (*ptr_to_globals).cmdcnt -= 1;
                    if !((*ptr_to_globals).cmdcnt > 0) {
                      break;
                    }
                  }
                  current_block = 15129665204879337069;
                }
                7856905509180742666 => {
                  while !((*ptr_to_globals).last_forward_char == 0) {
                    q = (*ptr_to_globals).dot.offset(1);
                    while q < (*ptr_to_globals).end.offset(-1)
                      && *q as libc::c_int != '\n' as i32
                      && *q as libc::c_int != (*ptr_to_globals).last_forward_char
                    {
                      q = q.offset(1)
                    }
                    if *q as libc::c_int == (*ptr_to_globals).last_forward_char {
                      (*ptr_to_globals).dot = q
                    }
                    (*ptr_to_globals).cmdcnt -= 1;
                    if !((*ptr_to_globals).cmdcnt > 0) {
                      break;
                    }
                  }
                  current_block = 15129665204879337069;
                }
                17498168302144015873 => {
                  current_block = 8681395796513813967;
                }
                1752638907092016026 => {
                  if *(*ptr_to_globals).dot as libc::c_int != '\n' as i32 {
                    (*ptr_to_globals).dot = (*ptr_to_globals).dot.offset(1)
                  }
                  current_block = 8629930936610358348;
                }
                3268579060917229304 => {
                  current_block = 8629930936610358348;
                }
                1895262434596074581 => {
                  current_block = 8908416993177701018;
                }
                _ => {}
              }
              match current_block {
                8629930936610358348 => {}
                15129665204879337069 => {}
                _ => {
                  match current_block {
                    17247297260531395789 => {
                      loop {
                        dot_left();
                        (*ptr_to_globals).cmdcnt -= 1;
                        if !((*ptr_to_globals).cmdcnt > 0) {
                          break;
                        }
                      }
                      current_block = 15129665204879337069;
                    }
                    8681395796513813967 => {
                      current_block = 5591548203144509315;
                    }
                    8908416993177701018 => {
                      current_block = 16124761010012532485;
                    }
                    _ => {}
                  }
                  match current_block {
                    15129665204879337069 => {}
                    _ => {
                      match current_block {
                        16124761010012532485 => {
                          let mut yf: libc::c_int = 0;
                          let mut ml: libc::c_int = 0;
                          let mut whole: libc::c_int = 0;
                          yf = YANKDEL as libc::c_int;
                          if c == 'y' as i32 || c == 'Y' as i32 {
                            yf = YANKONLY as libc::c_int
                          }
                          c1 = 'y' as i32;
                          if c != 'Y' as i32 {
                            c1 = get_one_char()
                          }
                          ml = find_range(&mut p, &mut q, c1 as libc::c_char);
                          place_cursor(0i32, 0);
                          if c1 == 27i32 {
                            c1 = 27i32;
                            c = c1
                          } else if !strchr(b"wW\x00" as *const u8 as *const libc::c_char, c1)
                            .is_null()
                          {
                            ml = 0;
                            if c == 'c' as i32 {
                              while ({
                                let mut bb__isspace: libc::c_uchar =
                                  (*q as libc::c_int - 9i32) as libc::c_uchar;
                                (bb__isspace as libc::c_int == ' ' as i32 - 9i32
                                  || bb__isspace as libc::c_int <= 13i32 - 9i32)
                                  as libc::c_int
                              }) != 0
                                && q > p
                              {
                                q = q.offset(-1)
                              }
                            }
                            (*ptr_to_globals).dot = yank_delete(p, q, ml, yf, 1i32)
                          } else if !strchr(
                            b"^0bBeEft%$ lh\x08\x7f\x00" as *const u8 as *const libc::c_char,
                            c1,
                          )
                          .is_null()
                          {
                            (*ptr_to_globals).dot = yank_delete(p, q, ml, yf, 1i32)
                          } else if !strchr(
                            b"cdykjGHL+-{}\r\n\x00" as *const u8 as *const libc::c_char,
                            c1,
                          )
                          .is_null()
                          {
                            (*ptr_to_globals).dot = yank_delete(p, q, ml, yf, 1i32);
                            whole = 1i32
                          } else {
                            c1 = 27i32;
                            c = c1;
                            ml = 0;
                            indicate_error();
                          }
                          if ml != 0 && whole != 0 {
                            if c == 'c' as i32 {
                              (*ptr_to_globals).dot = char_insert(
                                (*ptr_to_globals).dot,
                                '\n' as i32 as libc::c_char,
                                2i32,
                              );
                              if whole != 0
                                && (*ptr_to_globals).dot != (*ptr_to_globals).end.offset(-1)
                              {
                                dot_prev();
                              }
                            } else if c == 'd' as i32 {
                              dot_begin();
                              dot_skip_over_ws();
                            }
                          }
                          if c1 != 27i32 {
                            if c == 'c' as i32 {
                              strcpy(
                                buf.as_mut_ptr(),
                                b"Change\x00" as *const u8 as *const libc::c_char,
                              );
                              current_block = 8629930936610358348;
                            } else {
                              if c == 'd' as i32 {
                                strcpy(
                                  buf.as_mut_ptr(),
                                  b"Delete\x00" as *const u8 as *const libc::c_char,
                                );
                              }
                              if c == 'y' as i32 || c == 'Y' as i32 {
                                strcpy(
                                  buf.as_mut_ptr(),
                                  b"Yank\x00" as *const u8 as *const libc::c_char,
                                );
                              }
                              p = (*ptr_to_globals).reg[(*ptr_to_globals).YDreg as usize];
                              q = p.offset(strlen(p) as isize);
                              cnt = 0;
                              while p <= q {
                                if *p as libc::c_int == '\n' as i32 {
                                  cnt += 1
                                }
                                p = p.offset(1)
                              }
                              status_line(
                                b"%s %u lines (%u chars) using [%c]\x00" as *const u8
                                  as *const libc::c_char,
                                buf.as_mut_ptr(),
                                cnt,
                                strlen((*ptr_to_globals).reg[(*ptr_to_globals).YDreg as usize])
                                  as libc::c_uint,
                                what_reg() as libc::c_int,
                              );
                              end_cmd_q();
                              current_block = 15129665204879337069;
                            }
                          } else {
                            current_block = 15129665204879337069;
                          }
                        }
                        5591548203144509315 => {
                          current_block = 2636677179867529885;
                        }
                        _ => {}
                      }
                      match current_block {
                        15129665204879337069 => {}
                        8629930936610358348 => {}
                        _ => {
                          match current_block {
                            2636677179867529885 => {
                              current_block = 12309206730560524281;
                            }
                            _ => {}
                          }
                          match current_block {
                            12309206730560524281 => {
                              current_block = 3325768110057758661;
                            }
                            _ => {}
                          }
                          match current_block {
                            3325768110057758661 => {
                              current_block = 14815832896553429982;
                            }
                            _ => {}
                          }
                          match current_block {
                            14815832896553429982 => {
                              current_block = 10731695520297161438;
                            }
                            _ => {}
                          }
                          match current_block {
                            10731695520297161438 => {
                              if c == '0' as i32 && (*ptr_to_globals).cmdcnt < 1i32 {
                                dot_begin();
                              } else {
                                (*ptr_to_globals).cmdcnt =
                                  (*ptr_to_globals).cmdcnt * 10i32 + (c - '0' as i32)
                              }
                              current_block = 15129665204879337069;
                            }
                            _ => {}
                          }
                          match current_block {
                            15129665204879337069 => {}
                            _ => {
                              loop {
                                match current_block {
                                  16813369756331276724 => {
                                    msg = std::ptr::null();
                                    current_block = 7392824444931029276;
                                  }
                                  7392824444931029276 => {
                                    dir = FORWARD as libc::c_int;
                                    p = (*ptr_to_globals).dot.offset(1);
                                    if *(*ptr_to_globals).last_search_pattern.offset(0)
                                      as libc::c_int
                                      == '?' as i32
                                    {
                                      dir = BACK as libc::c_int;
                                      p = (*ptr_to_globals).dot.offset(-1)
                                    }
                                    current_block = 4166979493554389389;
                                  }
                                  _ => {
                                    q = char_search(
                                      p,
                                      (*ptr_to_globals).last_search_pattern.offset(1),
                                      dir << 1i32 | FULL as libc::c_int,
                                    );
                                    if !q.is_null() {
                                      (*ptr_to_globals).dot = q;
                                      msg = std::ptr::null()
                                    } else {
                                      p = (*ptr_to_globals).text;
                                      if dir == BACK as libc::c_int {
                                        p = (*ptr_to_globals).end.offset(-1)
                                      }
                                      q = char_search(
                                        p,
                                        (*ptr_to_globals).last_search_pattern.offset(1),
                                        dir << 1i32 | FULL as libc::c_int,
                                      );
                                      if !q.is_null() {
                                        (*ptr_to_globals).dot = q;
                                        msg = b"search hit BOTTOM, continuing at TOP\x00"
                                          as *const u8
                                          as *const libc::c_char;
                                        if dir == BACK as libc::c_int {
                                          msg = b"search hit TOP, continuing at BOTTOM\x00"
                                            as *const u8
                                            as *const libc::c_char
                                        }
                                      } else {
                                        msg = b"Pattern not found\x00" as *const u8
                                          as *const libc::c_char
                                      }
                                    }
                                    if !msg.is_null() {
                                      status_line_bold(
                                        b"%s\x00" as *const u8 as *const libc::c_char,
                                        msg,
                                      );
                                    }
                                    (*ptr_to_globals).cmdcnt -= 1;
                                    if (*ptr_to_globals).cmdcnt > 0 {
                                      current_block = 16813369756331276724;
                                    } else {
                                      break;
                                    }
                                  }
                                }
                              }
                              current_block = 15129665204879337069;
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
        51 => {
          current_block = 5591548203144509315;
          match current_block {
            16992905640583886232 => {
              loop {
                if (*(*ptr_to_globals).dot as libc::c_int - 'a' as i32) as libc::c_uchar
                  as libc::c_int
                  <= 'z' as i32 - 'a' as i32
                {
                  undo_push(
                    (*ptr_to_globals).dot,
                    1i32 as libc::c_uint,
                    1i32 as libc::c_uchar,
                  );
                  *(*ptr_to_globals).dot =
                    bb_ascii_toupper(*(*ptr_to_globals).dot as libc::c_uchar) as libc::c_char;
                  undo_push(
                    (*ptr_to_globals).dot,
                    1i32 as libc::c_uint,
                    2i32 as libc::c_uchar,
                  );
                } else if (*(*ptr_to_globals).dot as libc::c_int - 'A' as i32) as libc::c_uchar
                  as libc::c_int
                  <= 'Z' as i32 - 'A' as i32
                {
                  undo_push(
                    (*ptr_to_globals).dot,
                    1i32 as libc::c_uint,
                    1i32 as libc::c_uchar,
                  );
                  *(*ptr_to_globals).dot =
                    bb_ascii_tolower(*(*ptr_to_globals).dot as libc::c_uchar) as libc::c_char;
                  undo_push(
                    (*ptr_to_globals).dot,
                    1i32 as libc::c_uint,
                    2i32 as libc::c_uchar,
                  );
                }
                dot_right();
                (*ptr_to_globals).cmdcnt -= 1;
                if !((*ptr_to_globals).cmdcnt > 0) {
                  break;
                }
              }
              end_cmd_q();
              current_block = 15129665204879337069;
            }
            8729655159604064397 => {
              c1 = get_one_char();
              cnt = 0;
              if c1 == '.' as i32 {
                cnt = (*ptr_to_globals)
                  .rows
                  .wrapping_sub(2i32 as libc::c_uint)
                  .wrapping_div(2i32 as libc::c_uint) as libc::c_int
              }
              if c1 == '-' as i32 {
                cnt = (*ptr_to_globals).rows.wrapping_sub(2i32 as libc::c_uint) as libc::c_int
              }
              (*ptr_to_globals).screenbegin = begin_line((*ptr_to_globals).dot);
              dot_scroll(cnt, -1i32);
              current_block = 15129665204879337069;
            }
            15899500648299942075 => {
              (*ptr_to_globals).last_forward_char = get_one_char();
              do_cmd(';' as i32);
              if *(*ptr_to_globals).dot as libc::c_int == (*ptr_to_globals).last_forward_char {
                dot_left();
              }
              (*ptr_to_globals).last_forward_char = 0;
              current_block = 15129665204879337069;
            }
            9051390181078481641 => {
              c1 = get_one_char();
              if *(*ptr_to_globals).dot as libc::c_int != '\n' as i32 {
                (*ptr_to_globals).dot =
                  text_hole_delete((*ptr_to_globals).dot, (*ptr_to_globals).dot, 1i32);
                (*ptr_to_globals).dot =
                  char_insert((*ptr_to_globals).dot, c1 as libc::c_char, 2i32);
                dot_left();
              }
              end_cmd_q();
              current_block = 15129665204879337069;
            }
            877115918601926659 => {
              dir = FORWARD as libc::c_int;
              if c == 'b' as i32 {
                dir = BACK as libc::c_int
              }
              while !((*ptr_to_globals).dot.offset(dir as isize) < (*ptr_to_globals).text
                || (*ptr_to_globals).dot.offset(dir as isize) > (*ptr_to_globals).end.offset(-1))
              {
                (*ptr_to_globals).dot = (*ptr_to_globals).dot.offset(dir as isize);
                if ({
                  let mut bb__isspace: libc::c_uchar =
                    (*(*ptr_to_globals).dot as libc::c_int - 9i32) as libc::c_uchar;
                  (bb__isspace as libc::c_int == ' ' as i32 - 9i32
                    || bb__isspace as libc::c_int <= 13i32 - 9i32) as libc::c_int
                }) != 0
                {
                  (*ptr_to_globals).dot = skip_thing(
                    (*ptr_to_globals).dot,
                    if c == 'e' as i32 { 2i32 } else { 1i32 },
                    dir,
                    S_OVER_WS as libc::c_int,
                  )
                }
                if bb_ascii_isalnum(*(*ptr_to_globals).dot as libc::c_uchar) != 0
                  || *(*ptr_to_globals).dot as libc::c_int == '_' as i32
                {
                  (*ptr_to_globals).dot =
                    skip_thing((*ptr_to_globals).dot, 1i32, dir, S_END_ALNUM as libc::c_int)
                } else if *strchrnul(
                  b"!\"#$%&\'()*+,-./:;<=>?@[\\]^_`{|}~\x00" as *const u8 as *const libc::c_char,
                  *(*ptr_to_globals).dot as libc::c_int,
                )
                .offset(0)
                  != 0
                {
                  (*ptr_to_globals).dot =
                    skip_thing((*ptr_to_globals).dot, 1i32, dir, S_END_PUNCT as libc::c_int)
                }
                (*ptr_to_globals).cmdcnt -= 1;
                if !((*ptr_to_globals).cmdcnt > 0) {
                  break;
                }
              }
              current_block = 15129665204879337069;
            }
            1085022737867179637 => {
              dot_begin();
              dot_skip_over_ws();
              current_block = 15129665204879337069;
            }
            3113147720494587438 => {
              c1 = get_one_char();
              if c1 != 'Z' as i32 {
                indicate_error();
              } else if (*ptr_to_globals).modified_count != 0 {
                if 1i32 != 0 && (*ptr_to_globals).readonly_mode as libc::c_int != 0 {
                  status_line_bold(
                    b"\'%s\' is read only\x00" as *const u8 as *const libc::c_char,
                    (*ptr_to_globals).current_filename,
                  );
                } else {
                  cnt = file_write(
                    (*ptr_to_globals).current_filename,
                    (*ptr_to_globals).text,
                    (*ptr_to_globals).end.offset(-1),
                  );
                  if cnt < 0 {
                    if cnt == -1i32 {
                      status_line_bold(b"Write error: %m\x00" as *const u8 as *const libc::c_char);
                    }
                  } else if cnt as libc::c_long
                    == (*ptr_to_globals)
                      .end
                      .offset(-1)
                      .wrapping_offset_from((*ptr_to_globals).text)
                      as libc::c_long
                      + 1
                  {
                    (*ptr_to_globals).editing = 0 as smallint
                  }
                }
              } else {
                (*ptr_to_globals).editing = 0 as smallint
              }
              current_block = 15129665204879337069;
            }
            12960118908218882441 => {
              p = begin_line((*ptr_to_globals).dot);
              if *p.offset(-1i32 as isize) as libc::c_int == '\n' as i32 {
                dot_prev();
                current_block = 2087484904894455135;
              } else {
                dot_begin();
                (*ptr_to_globals).dot =
                  char_insert((*ptr_to_globals).dot, '\n' as i32 as libc::c_char, 1i32);
                dot_prev();
                current_block = 8629930936610358348;
              }
            }
            8720450212473544924 => {
              (*ptr_to_globals).dot = (*ptr_to_globals).screenbegin;
              cnt = 0;
              while (cnt as libc::c_uint)
                < (*ptr_to_globals)
                  .rows
                  .wrapping_sub(1i32 as libc::c_uint)
                  .wrapping_div(2i32 as libc::c_uint)
              {
                (*ptr_to_globals).dot = next_line((*ptr_to_globals).dot);
                cnt += 1
              }
              current_block = 15129665204879337069;
            }
            13015277209715431090 => {
              (*ptr_to_globals).dot = end_screen();
              if (*ptr_to_globals).cmdcnt as libc::c_uint
                > (*ptr_to_globals).rows.wrapping_sub(1i32 as libc::c_uint)
              {
                (*ptr_to_globals).cmdcnt =
                  (*ptr_to_globals).rows.wrapping_sub(1i32 as libc::c_uint) as libc::c_int
              }
              (*ptr_to_globals).cmdcnt -= 1;
              if (*ptr_to_globals).cmdcnt > 0 {
                do_cmd('-' as i32);
              }
              dot_begin();
              dot_skip_over_ws();
              current_block = 15129665204879337069;
            }
            9800435767766781385 => {
              loop {
                dot_end();
                if (*ptr_to_globals).dot < (*ptr_to_globals).end.offset(-1) {
                  undo_push(
                    (*ptr_to_globals).dot,
                    1i32 as libc::c_uint,
                    1i32 as libc::c_uchar,
                  );
                  let fresh15 = (*ptr_to_globals).dot;
                  (*ptr_to_globals).dot = (*ptr_to_globals).dot.offset(1);
                  *fresh15 = ' ' as i32 as libc::c_char;
                  undo_push(
                    (*ptr_to_globals).dot.offset(-1),
                    1i32 as libc::c_uint,
                    2i32 as libc::c_uchar,
                  );
                  while ({
                    let mut bb__isblank: libc::c_uchar = *(*ptr_to_globals).dot as libc::c_uchar;
                    (bb__isblank as libc::c_int == ' ' as i32
                      || bb__isblank as libc::c_int == '\t' as i32)
                      as libc::c_int
                  }) != 0
                  {
                    text_hole_delete((*ptr_to_globals).dot, (*ptr_to_globals).dot, 2i32);
                  }
                }
                (*ptr_to_globals).cmdcnt -= 1;
                if !((*ptr_to_globals).cmdcnt > 0) {
                  break;
                }
              }
              end_cmd_q();
              current_block = 15129665204879337069;
            }
            3432363526595694666 => {
              dot_begin();
              dot_skip_over_ws();
              current_block = 3268579060917229304;
            }
            3494829253343353619 => {
              (*ptr_to_globals).dot = (*ptr_to_globals).screenbegin;
              if (*ptr_to_globals).cmdcnt as libc::c_uint
                > (*ptr_to_globals).rows.wrapping_sub(1i32 as libc::c_uint)
              {
                (*ptr_to_globals).cmdcnt =
                  (*ptr_to_globals).rows.wrapping_sub(1i32 as libc::c_uint) as libc::c_int
              }
              (*ptr_to_globals).cmdcnt -= 1;
              if (*ptr_to_globals).cmdcnt > 0 {
                do_cmd('+' as i32);
              }
              dot_skip_over_ws();
              current_block = 15129665204879337069;
            }
            17973101765331640574 => {
              c1 = get_one_char();
              if c1 != 'g' as i32 {
                buf[0] = 'g' as i32 as libc::c_char;
                buf[1] = if c1 >= 0 { c1 } else { '*' as i32 } as libc::c_char;
                buf[2] = '\u{0}' as i32 as libc::c_char;
                not_implemented(buf.as_mut_ptr());
                current_block = 15129665204879337069;
              } else {
                if (*ptr_to_globals).cmdcnt == 0 {
                  (*ptr_to_globals).cmdcnt = 1i32
                }
                current_block = 11945623545738147997;
              }
            }
            16546625800574160972 => {
              save_dot = (*ptr_to_globals).dot;
              (*ptr_to_globals).dot = dollar_line((*ptr_to_globals).dot);
              (*ptr_to_globals).dot = yank_delete(
                save_dot,
                (*ptr_to_globals).dot,
                0,
                YANKDEL as libc::c_int,
                1i32,
              );
              if c == 'C' as i32 {
                current_block = 8629930936610358348;
              } else {
                if c == 'D' as i32 {
                  end_cmd_q();
                }
                current_block = 15129665204879337069;
              }
            }
            11937696639986586685 => {
              cnt = count_lines((*ptr_to_globals).text, (*ptr_to_globals).dot);
              c1 = get_one_char();
              find_range(&mut p, &mut q, c1 as libc::c_char);
              yank_delete(p, q, 1i32, YANKONLY as libc::c_int, 0);
              p = begin_line(p);
              q = end_line(q);
              i = count_lines(p, q);
              while i > 0 {
                if c == '<' as i32 {
                  if *p as libc::c_int == '\t' as i32 {
                    text_hole_delete(p, p, 0);
                  } else if *p as libc::c_int == ' ' as i32 {
                    j = 0;
                    while *p as libc::c_int == ' ' as i32 && j < (*ptr_to_globals).tabstop {
                      text_hole_delete(p, p, 0);
                      j += 1
                    }
                  }
                } else if c == '>' as i32 {
                  char_insert(p, '\t' as i32 as libc::c_char, 1i32);
                }
                i -= 1;
                p = next_line(p)
              }
              (*ptr_to_globals).dot = find_line(cnt);
              dot_skip_over_ws();
              end_cmd_q();
              current_block = 15129665204879337069;
            }
            17725350714912028156 => {
              p = get_input_line(b":\x00" as *const u8 as *const libc::c_char);
              colon(p);
              current_block = 15129665204879337069;
            }
            14526470074083880812 => {
              q = char_search(
                (*ptr_to_globals).dot,
                b"\n\n\x00" as *const u8 as *const libc::c_char,
                (FORWARD as libc::c_int) << 1i32 | FULL as libc::c_int,
              );
              if !q.is_null() {
                (*ptr_to_globals).dot = next_line(q)
              }
              current_block = 15129665204879337069;
            }
            8893187391306414141 => {
              q = char_search(
                (*ptr_to_globals).dot,
                b"\n\n\x00" as *const u8 as *const libc::c_char,
                ((BACK as libc::c_int as libc::c_uint) << 1i32
                  | FULL as libc::c_int as libc::c_uint) as libc::c_int,
              );
              if !q.is_null() {
                (*ptr_to_globals).dot = next_line(q)
              }
              current_block = 15129665204879337069;
            }
            7021673758293221412 => {
              dir = BACK as libc::c_int;
              p = (*ptr_to_globals).dot.offset(-1);
              if *(*ptr_to_globals).last_search_pattern.offset(0) as libc::c_int == '?' as i32 {
                dir = FORWARD as libc::c_int;
                p = (*ptr_to_globals).dot.offset(1)
              }
              current_block = 4166979493554389389;
            }
            18374191879090272823 => {
              buf[0] = c as libc::c_char;
              buf[1] = '\u{0}' as i32 as libc::c_char;
              q = get_input_line(buf.as_mut_ptr());
              if *q.offset(0) as libc::c_int != 0 && *q.offset(1) == 0 {
                if *(*ptr_to_globals).last_search_pattern.offset(0) != 0 {
                  *(*ptr_to_globals).last_search_pattern.offset(0) = c as libc::c_char
                }
                current_block = 7392824444931029276;
              } else if *q.offset(0) != 0 {
                free((*ptr_to_globals).last_search_pattern as *mut libc::c_void);
                (*ptr_to_globals).last_search_pattern = crate::libbb::xfuncs_printf::xstrdup(q);
                current_block = 7392824444931029276;
              } else {
                current_block = 15129665204879337069;
              }
            }
            16407828456666301883 => {
              if (*ptr_to_globals).last_forward_char == 0 {
                current_block = 15129665204879337069;
              } else {
                loop {
                  q = (*ptr_to_globals).dot.offset(-1);
                  while q >= (*ptr_to_globals).text
                    && *q as libc::c_int != '\n' as i32
                    && *q as libc::c_int != (*ptr_to_globals).last_forward_char
                  {
                    q = q.offset(-1)
                  }
                  if q >= (*ptr_to_globals).text
                    && *q as libc::c_int == (*ptr_to_globals).last_forward_char
                  {
                    (*ptr_to_globals).dot = q
                  }
                  (*ptr_to_globals).cmdcnt -= 1;
                  if !((*ptr_to_globals).cmdcnt > 0) {
                    break;
                  }
                }
                current_block = 15129665204879337069;
              }
            }
            9018432604062702004 => {
              q = (*ptr_to_globals).dot;
              while q < (*ptr_to_globals).end && *q as libc::c_int != '\n' as i32 {
                if !strchr(
                  b"()[]{}\x00" as *const u8 as *const libc::c_char,
                  *q as libc::c_int,
                )
                .is_null()
                {
                  p = find_pair(q, *q);
                  if p.is_null() {
                    indicate_error();
                  } else {
                    (*ptr_to_globals).dot = p
                  }
                  break;
                } else {
                  q = q.offset(1)
                }
              }
              if *q as libc::c_int == '\n' as i32 {
                indicate_error();
              }
              current_block = 15129665204879337069;
            }
            10247103787464459848 => {
              p = (*ptr_to_globals).reg[(*ptr_to_globals).YDreg as usize];
              if p.is_null() {
                status_line_bold(
                  b"Nothing in register %c\x00" as *const u8 as *const libc::c_char,
                  what_reg() as libc::c_int,
                );
              } else {
                if !strchr(p, '\n' as i32).is_null() {
                  if c == 'P' as i32 {
                    dot_begin();
                  }
                  if c == 'p' as i32 {
                    if end_line((*ptr_to_globals).dot) == (*ptr_to_globals).end.offset(-1) {
                      (*ptr_to_globals).dot = (*ptr_to_globals).end
                    } else {
                      dot_next();
                    }
                  }
                } else if c == 'p' as i32 {
                  dot_right();
                }
                string_insert((*ptr_to_globals).dot, p, 1i32);
                end_cmd_q();
              }
              current_block = 15129665204879337069;
            }
            15260732871948875843 => {
              c1 = (get_one_char() | 0x20i32) - 'a' as i32;
              if c1 as libc::c_uint <= 25i32 as libc::c_uint {
                (*ptr_to_globals).mark[c1 as usize] = (*ptr_to_globals).dot
              } else {
                indicate_error();
              }
              current_block = 15129665204879337069;
            }
            12738322036487086035 => {
              c1 = get_one_char() | 0x20i32;
              if (c1 - 'a' as i32) as libc::c_uint <= 25i32 as libc::c_uint {
                c1 = c1 - 'a' as i32;
                q = (*ptr_to_globals).mark[c1 as usize];
                if (*ptr_to_globals).text <= q && q < (*ptr_to_globals).end {
                  (*ptr_to_globals).dot = q;
                  dot_begin();
                  dot_skip_over_ws();
                }
              } else if c1 == '\'' as i32 {
                (*ptr_to_globals).dot = swap_context((*ptr_to_globals).dot);
                dot_begin();
                dot_skip_over_ws();
              } else {
                indicate_error();
              }
              current_block = 15129665204879337069;
            }
            13255096073384561358 => {
              c1 = (get_one_char() | 0x20i32) - 'a' as i32;
              if c1 as libc::c_uint <= 25i32 as libc::c_uint {
                (*ptr_to_globals).YDreg = c1 as smalluint
              } else {
                indicate_error();
              }
              current_block = 15129665204879337069;
            }
            10258711639984089377 => {
              if (*ptr_to_globals).cmd_mode as libc::c_int == 0 {
                indicate_error();
              }
              (*ptr_to_globals).cmd_mode = 0 as smallint;
              undo_queue_commit();
              end_cmd_q();
              (*ptr_to_globals).last_status_cksum = 0;
              current_block = 15129665204879337069;
            }
            11439127087547047736 => {
              buf[0] = c as libc::c_char;
              buf[1] = '\u{0}' as i32 as libc::c_char;
              not_implemented(buf.as_mut_ptr());
              end_cmd_q();
              current_block = 17440971994642376514;
            }
            7961798899781870241 => {
              dot_scroll(
                (*ptr_to_globals).rows.wrapping_sub(2i32 as libc::c_uint) as libc::c_int,
                -1i32,
              );
              current_block = 15129665204879337069;
            }
            9426343755402444879 => {
              dot_scroll(
                (*ptr_to_globals)
                  .rows
                  .wrapping_sub(2i32 as libc::c_uint)
                  .wrapping_div(2i32 as libc::c_uint) as libc::c_int,
                1i32,
              );
              current_block = 15129665204879337069;
            }
            13352459794680105913 => {
              dot_scroll(1i32, 1i32);
              current_block = 15129665204879337069;
            }
            14142272253464333006 => {
              dot_scroll(
                (*ptr_to_globals).rows.wrapping_sub(2i32 as libc::c_uint) as libc::c_int,
                1i32,
              );
              current_block = 15129665204879337069;
            }
            10758177197742640066 => {
              (*ptr_to_globals).last_status_cksum = 0;
              current_block = 15129665204879337069;
            }
            6152256259730122749 => {
              current_block = 7534742345255184552;
            }
            12883932598258173301 => {
              current_block = 8800996768013373992;
            }
            11242998110520238401 => {
              redraw(1i32);
              current_block = 15129665204879337069;
            }
            13619733043935729992 => {
              loop {
                dot_next();
                dot_skip_over_ws();
                (*ptr_to_globals).cmdcnt -= 1;
                if !((*ptr_to_globals).cmdcnt > 0) {
                  break;
                }
              }
              current_block = 15129665204879337069;
            }
            9339065157412720613 => {
              dot_scroll(
                (*ptr_to_globals)
                  .rows
                  .wrapping_sub(2i32 as libc::c_uint)
                  .wrapping_div(2i32 as libc::c_uint) as libc::c_int,
                -1i32,
              );
              current_block = 15129665204879337069;
            }
            11447082683497798022 => {
              dot_scroll(1i32, -1i32);
              current_block = 15129665204879337069;
            }
            5182000506326660482 => {
              current_block = 13993698454868426881;
            }
            1105010766850597332 => {
              if !(*ptr_to_globals).reg[27].is_null() {
                p = begin_line((*ptr_to_globals).dot);
                q = end_line((*ptr_to_globals).dot);
                p = text_hole_delete(p, q, 1i32);
                p = p.offset(string_insert(p, (*ptr_to_globals).reg[27], 2i32) as isize);
                (*ptr_to_globals).dot = p;
                dot_skip_over_ws();
              }
              current_block = 15129665204879337069;
            }
            8616046655533110204 => {
              undo_pop();
              current_block = 15129665204879337069;
            }
            5127767458142431603 => {
              loop {
                (*ptr_to_globals).dot = end_line((*ptr_to_globals).dot);
                (*ptr_to_globals).cmdcnt -= 1;
                if (*ptr_to_globals).cmdcnt <= 0 {
                  break;
                }
                dot_next();
              }
              current_block = 15129665204879337069;
            }
            222014967776118151 => {
              (*ptr_to_globals).last_forward_char = get_one_char();
              current_block = 7856905509180742666;
            }
            11209792479411604110 => {
              loop {
                dot_prev();
                dot_skip_over_ws();
                (*ptr_to_globals).cmdcnt -= 1;
                if !((*ptr_to_globals).cmdcnt > 0) {
                  break;
                }
              }
              current_block = 15129665204879337069;
            }
            3364823792826654116 => {
              if (*ptr_to_globals).lmc_len != 0 {
                (*ptr_to_globals).ioq_start = crate::libbb::xfuncs_printf::xstrndup(
                  (*ptr_to_globals).last_modifying_cmd.as_mut_ptr(),
                  (*ptr_to_globals).lmc_len,
                );
                (*ptr_to_globals).ioq = (*ptr_to_globals).ioq_start
              }
              current_block = 15129665204879337069;
            }
            18096603330221575131 => {
              current_block = 17498168302144015873;
            }
            16891123271837848903 => {
              dot_end();
              current_block = 1752638907092016026;
            }
            8517235759107662071 => {
              current_block = 5847749760081351726;
            }
            12525254419223051704 => {
              if (*ptr_to_globals).dot < (*ptr_to_globals).end.offset(-1) {
                (*ptr_to_globals).dot = yank_delete(
                  (*ptr_to_globals).dot,
                  (*ptr_to_globals).dot,
                  1i32,
                  YANKDEL as libc::c_int,
                  1i32,
                )
              }
              current_block = 15129665204879337069;
            }
            15232911949322867522 => {
              current_block = 17251831742223396249;
            }
            10863374208794025069 => {
              current_block = 1895262434596074581;
            }
            451126677064669119 => {
              loop {
                dot_prev();
                (*ptr_to_globals).dot = move_to_col(
                  (*ptr_to_globals).dot,
                  (*ptr_to_globals).ccol + (*ptr_to_globals).offset,
                );
                (*ptr_to_globals).cmdcnt -= 1;
                if !((*ptr_to_globals).cmdcnt > 0) {
                  break;
                }
              }
              current_block = 15129665204879337069;
            }
            4611735929166613116 => {
              loop {
                if bb_ascii_isalnum(*(*ptr_to_globals).dot as libc::c_uchar) != 0
                  || *(*ptr_to_globals).dot as libc::c_int == '_' as i32
                {
                  (*ptr_to_globals).dot = skip_thing(
                    (*ptr_to_globals).dot,
                    1i32,
                    FORWARD as libc::c_int,
                    S_END_ALNUM as libc::c_int,
                  )
                } else if *strchrnul(
                  b"!\"#$%&\'()*+,-./:;<=>?@[\\]^_`{|}~\x00" as *const u8 as *const libc::c_char,
                  *(*ptr_to_globals).dot as libc::c_int,
                )
                .offset(0)
                  != 0
                {
                  (*ptr_to_globals).dot = skip_thing(
                    (*ptr_to_globals).dot,
                    1i32,
                    FORWARD as libc::c_int,
                    S_END_PUNCT as libc::c_int,
                  )
                }
                if (*ptr_to_globals).dot < (*ptr_to_globals).end.offset(-1) {
                  (*ptr_to_globals).dot = (*ptr_to_globals).dot.offset(1)
                }
                if ({
                  let mut bb__isspace: libc::c_uchar =
                    (*(*ptr_to_globals).dot as libc::c_int - 9i32) as libc::c_uchar;
                  (bb__isspace as libc::c_int == ' ' as i32 - 9i32
                    || bb__isspace as libc::c_int <= 13i32 - 9i32) as libc::c_int
                }) != 0
                {
                  (*ptr_to_globals).dot = skip_thing(
                    (*ptr_to_globals).dot,
                    2i32,
                    FORWARD as libc::c_int,
                    S_OVER_WS as libc::c_int,
                  )
                }
                (*ptr_to_globals).cmdcnt -= 1;
                if !((*ptr_to_globals).cmdcnt > 0) {
                  break;
                }
              }
              current_block = 15129665204879337069;
            }
            4386451087681909888 => {
              (*ptr_to_globals).dot =
                move_to_col((*ptr_to_globals).dot, (*ptr_to_globals).cmdcnt - 1i32);
              current_block = 15129665204879337069;
            }
            1296397779060594135 => {
              dot_begin();
              current_block = 15129665204879337069;
            }
            _ => {}
          }
          match current_block {
            15129665204879337069 => {}
            8629930936610358348 => {}
            _ => {
              match current_block {
                17251831742223396249 => {
                  dir = 0;
                  if c == 'X' as i32 {
                    dir = -1i32
                  }
                  loop {
                    if *(*ptr_to_globals).dot.offset(dir as isize) as libc::c_int != '\n' as i32 {
                      if c == 'X' as i32 {
                        (*ptr_to_globals).dot = (*ptr_to_globals).dot.offset(-1)
                      }
                      (*ptr_to_globals).dot = yank_delete(
                        (*ptr_to_globals).dot,
                        (*ptr_to_globals).dot,
                        0,
                        YANKDEL as libc::c_int,
                        1i32,
                      )
                    }
                    (*ptr_to_globals).cmdcnt -= 1;
                    if !((*ptr_to_globals).cmdcnt > 0) {
                      break;
                    }
                  }
                  end_cmd_q();
                  if c == 's' as i32 {
                    current_block = 8629930936610358348;
                  } else {
                    current_block = 15129665204879337069;
                  }
                }
                2087484904894455135 => {
                  dot_end();
                  (*ptr_to_globals).dot =
                    char_insert((*ptr_to_globals).dot, '\n' as i32 as libc::c_char, 1i32);
                  current_block = 8629930936610358348;
                }
                11945623545738147997 => {
                  (*ptr_to_globals).dot = (*ptr_to_globals).end.offset(-1);
                  if (*ptr_to_globals).cmdcnt > 0 {
                    (*ptr_to_globals).dot = find_line((*ptr_to_globals).cmdcnt)
                  }
                  dot_skip_over_ws();
                  current_block = 15129665204879337069;
                }
                5847749760081351726 => {
                  dir = FORWARD as libc::c_int;
                  if c == 'B' as i32 {
                    dir = BACK as libc::c_int
                  }
                  loop {
                    if c == 'W' as i32
                      || ({
                        let mut bb__isspace: libc::c_uchar =
                          (*(*ptr_to_globals).dot.offset(dir as isize) as libc::c_int - 9i32)
                            as libc::c_uchar;
                        (bb__isspace as libc::c_int == ' ' as i32 - 9i32
                          || bb__isspace as libc::c_int <= 13i32 - 9i32)
                          as libc::c_int
                      }) != 0
                    {
                      (*ptr_to_globals).dot =
                        skip_thing((*ptr_to_globals).dot, 1i32, dir, S_TO_WS as libc::c_int);
                      (*ptr_to_globals).dot =
                        skip_thing((*ptr_to_globals).dot, 2i32, dir, S_OVER_WS as libc::c_int)
                    }
                    if c != 'W' as i32 {
                      (*ptr_to_globals).dot =
                        skip_thing((*ptr_to_globals).dot, 1i32, dir, S_BEFORE_WS as libc::c_int)
                    }
                    (*ptr_to_globals).cmdcnt -= 1;
                    if !((*ptr_to_globals).cmdcnt > 0) {
                      break;
                    }
                  }
                  current_block = 15129665204879337069;
                }
                17440971994642376514 => {
                  current_block = 15129665204879337069;
                }
                7534742345255184552 => {
                  current_block = 17247297260531395789;
                }
                8800996768013373992 => {
                  loop {
                    dot_next();
                    (*ptr_to_globals).dot = move_to_col(
                      (*ptr_to_globals).dot,
                      (*ptr_to_globals).ccol + (*ptr_to_globals).offset,
                    );
                    (*ptr_to_globals).cmdcnt -= 1;
                    if !((*ptr_to_globals).cmdcnt > 0) {
                      break;
                    }
                  }
                  current_block = 15129665204879337069;
                }
                13993698454868426881 => {
                  loop {
                    dot_right();
                    (*ptr_to_globals).cmdcnt -= 1;
                    if !((*ptr_to_globals).cmdcnt > 0) {
                      break;
                    }
                  }
                  current_block = 15129665204879337069;
                }
                7856905509180742666 => {
                  while !((*ptr_to_globals).last_forward_char == 0) {
                    q = (*ptr_to_globals).dot.offset(1);
                    while q < (*ptr_to_globals).end.offset(-1)
                      && *q as libc::c_int != '\n' as i32
                      && *q as libc::c_int != (*ptr_to_globals).last_forward_char
                    {
                      q = q.offset(1)
                    }
                    if *q as libc::c_int == (*ptr_to_globals).last_forward_char {
                      (*ptr_to_globals).dot = q
                    }
                    (*ptr_to_globals).cmdcnt -= 1;
                    if !((*ptr_to_globals).cmdcnt > 0) {
                      break;
                    }
                  }
                  current_block = 15129665204879337069;
                }
                17498168302144015873 => {
                  current_block = 8681395796513813967;
                }
                1752638907092016026 => {
                  if *(*ptr_to_globals).dot as libc::c_int != '\n' as i32 {
                    (*ptr_to_globals).dot = (*ptr_to_globals).dot.offset(1)
                  }
                  current_block = 8629930936610358348;
                }
                3268579060917229304 => {
                  current_block = 8629930936610358348;
                }
                1895262434596074581 => {
                  current_block = 8908416993177701018;
                }
                _ => {}
              }
              match current_block {
                8629930936610358348 => {}
                15129665204879337069 => {}
                _ => {
                  match current_block {
                    17247297260531395789 => {
                      loop {
                        dot_left();
                        (*ptr_to_globals).cmdcnt -= 1;
                        if !((*ptr_to_globals).cmdcnt > 0) {
                          break;
                        }
                      }
                      current_block = 15129665204879337069;
                    }
                    8681395796513813967 => {
                      current_block = 5591548203144509315;
                    }
                    8908416993177701018 => {
                      current_block = 16124761010012532485;
                    }
                    _ => {}
                  }
                  match current_block {
                    15129665204879337069 => {}
                    _ => {
                      match current_block {
                        16124761010012532485 => {
                          let mut yf: libc::c_int = 0;
                          let mut ml: libc::c_int = 0;
                          let mut whole: libc::c_int = 0;
                          yf = YANKDEL as libc::c_int;
                          if c == 'y' as i32 || c == 'Y' as i32 {
                            yf = YANKONLY as libc::c_int
                          }
                          c1 = 'y' as i32;
                          if c != 'Y' as i32 {
                            c1 = get_one_char()
                          }
                          ml = find_range(&mut p, &mut q, c1 as libc::c_char);
                          place_cursor(0i32, 0);
                          if c1 == 27i32 {
                            c1 = 27i32;
                            c = c1
                          } else if !strchr(b"wW\x00" as *const u8 as *const libc::c_char, c1)
                            .is_null()
                          {
                            ml = 0;
                            if c == 'c' as i32 {
                              while ({
                                let mut bb__isspace: libc::c_uchar =
                                  (*q as libc::c_int - 9i32) as libc::c_uchar;
                                (bb__isspace as libc::c_int == ' ' as i32 - 9i32
                                  || bb__isspace as libc::c_int <= 13i32 - 9i32)
                                  as libc::c_int
                              }) != 0
                                && q > p
                              {
                                q = q.offset(-1)
                              }
                            }
                            (*ptr_to_globals).dot = yank_delete(p, q, ml, yf, 1i32)
                          } else if !strchr(
                            b"^0bBeEft%$ lh\x08\x7f\x00" as *const u8 as *const libc::c_char,
                            c1,
                          )
                          .is_null()
                          {
                            (*ptr_to_globals).dot = yank_delete(p, q, ml, yf, 1i32)
                          } else if !strchr(
                            b"cdykjGHL+-{}\r\n\x00" as *const u8 as *const libc::c_char,
                            c1,
                          )
                          .is_null()
                          {
                            (*ptr_to_globals).dot = yank_delete(p, q, ml, yf, 1i32);
                            whole = 1i32
                          } else {
                            c1 = 27i32;
                            c = c1;
                            ml = 0;
                            indicate_error();
                          }
                          if ml != 0 && whole != 0 {
                            if c == 'c' as i32 {
                              (*ptr_to_globals).dot = char_insert(
                                (*ptr_to_globals).dot,
                                '\n' as i32 as libc::c_char,
                                2i32,
                              );
                              if whole != 0
                                && (*ptr_to_globals).dot != (*ptr_to_globals).end.offset(-1)
                              {
                                dot_prev();
                              }
                            } else if c == 'd' as i32 {
                              dot_begin();
                              dot_skip_over_ws();
                            }
                          }
                          if c1 != 27i32 {
                            if c == 'c' as i32 {
                              strcpy(
                                buf.as_mut_ptr(),
                                b"Change\x00" as *const u8 as *const libc::c_char,
                              );
                              current_block = 8629930936610358348;
                            } else {
                              if c == 'd' as i32 {
                                strcpy(
                                  buf.as_mut_ptr(),
                                  b"Delete\x00" as *const u8 as *const libc::c_char,
                                );
                              }
                              if c == 'y' as i32 || c == 'Y' as i32 {
                                strcpy(
                                  buf.as_mut_ptr(),
                                  b"Yank\x00" as *const u8 as *const libc::c_char,
                                );
                              }
                              p = (*ptr_to_globals).reg[(*ptr_to_globals).YDreg as usize];
                              q = p.offset(strlen(p) as isize);
                              cnt = 0;
                              while p <= q {
                                if *p as libc::c_int == '\n' as i32 {
                                  cnt += 1
                                }
                                p = p.offset(1)
                              }
                              status_line(
                                b"%s %u lines (%u chars) using [%c]\x00" as *const u8
                                  as *const libc::c_char,
                                buf.as_mut_ptr(),
                                cnt,
                                strlen((*ptr_to_globals).reg[(*ptr_to_globals).YDreg as usize])
                                  as libc::c_uint,
                                what_reg() as libc::c_int,
                              );
                              end_cmd_q();
                              current_block = 15129665204879337069;
                            }
                          } else {
                            current_block = 15129665204879337069;
                          }
                        }
                        5591548203144509315 => {
                          current_block = 2636677179867529885;
                        }
                        _ => {}
                      }
                      match current_block {
                        15129665204879337069 => {}
                        8629930936610358348 => {}
                        _ => {
                          match current_block {
                            2636677179867529885 => {
                              current_block = 12309206730560524281;
                            }
                            _ => {}
                          }
                          match current_block {
                            12309206730560524281 => {
                              current_block = 3325768110057758661;
                            }
                            _ => {}
                          }
                          match current_block {
                            3325768110057758661 => {
                              current_block = 14815832896553429982;
                            }
                            _ => {}
                          }
                          match current_block {
                            14815832896553429982 => {
                              current_block = 10731695520297161438;
                            }
                            _ => {}
                          }
                          match current_block {
                            10731695520297161438 => {
                              if c == '0' as i32 && (*ptr_to_globals).cmdcnt < 1i32 {
                                dot_begin();
                              } else {
                                (*ptr_to_globals).cmdcnt =
                                  (*ptr_to_globals).cmdcnt * 10i32 + (c - '0' as i32)
                              }
                              current_block = 15129665204879337069;
                            }
                            _ => {}
                          }
                          match current_block {
                            15129665204879337069 => {}
                            _ => {
                              loop {
                                match current_block {
                                  16813369756331276724 => {
                                    msg = std::ptr::null();
                                    current_block = 7392824444931029276;
                                  }
                                  7392824444931029276 => {
                                    dir = FORWARD as libc::c_int;
                                    p = (*ptr_to_globals).dot.offset(1);
                                    if *(*ptr_to_globals).last_search_pattern.offset(0)
                                      as libc::c_int
                                      == '?' as i32
                                    {
                                      dir = BACK as libc::c_int;
                                      p = (*ptr_to_globals).dot.offset(-1)
                                    }
                                    current_block = 4166979493554389389;
                                  }
                                  _ => {
                                    q = char_search(
                                      p,
                                      (*ptr_to_globals).last_search_pattern.offset(1),
                                      dir << 1i32 | FULL as libc::c_int,
                                    );
                                    if !q.is_null() {
                                      (*ptr_to_globals).dot = q;
                                      msg = std::ptr::null()
                                    } else {
                                      p = (*ptr_to_globals).text;
                                      if dir == BACK as libc::c_int {
                                        p = (*ptr_to_globals).end.offset(-1)
                                      }
                                      q = char_search(
                                        p,
                                        (*ptr_to_globals).last_search_pattern.offset(1),
                                        dir << 1i32 | FULL as libc::c_int,
                                      );
                                      if !q.is_null() {
                                        (*ptr_to_globals).dot = q;
                                        msg = b"search hit BOTTOM, continuing at TOP\x00"
                                          as *const u8
                                          as *const libc::c_char;
                                        if dir == BACK as libc::c_int {
                                          msg = b"search hit TOP, continuing at BOTTOM\x00"
                                            as *const u8
                                            as *const libc::c_char
                                        }
                                      } else {
                                        msg = b"Pattern not found\x00" as *const u8
                                          as *const libc::c_char
                                      }
                                    }
                                    if !msg.is_null() {
                                      status_line_bold(
                                        b"%s\x00" as *const u8 as *const libc::c_char,
                                        msg,
                                      );
                                    }
                                    (*ptr_to_globals).cmdcnt -= 1;
                                    if (*ptr_to_globals).cmdcnt > 0 {
                                      current_block = 16813369756331276724;
                                    } else {
                                      break;
                                    }
                                  }
                                }
                              }
                              current_block = 15129665204879337069;
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
        52 => {
          current_block = 2636677179867529885;
          match current_block {
            16992905640583886232 => {
              loop {
                if (*(*ptr_to_globals).dot as libc::c_int - 'a' as i32) as libc::c_uchar
                  as libc::c_int
                  <= 'z' as i32 - 'a' as i32
                {
                  undo_push(
                    (*ptr_to_globals).dot,
                    1i32 as libc::c_uint,
                    1i32 as libc::c_uchar,
                  );
                  *(*ptr_to_globals).dot =
                    bb_ascii_toupper(*(*ptr_to_globals).dot as libc::c_uchar) as libc::c_char;
                  undo_push(
                    (*ptr_to_globals).dot,
                    1i32 as libc::c_uint,
                    2i32 as libc::c_uchar,
                  );
                } else if (*(*ptr_to_globals).dot as libc::c_int - 'A' as i32) as libc::c_uchar
                  as libc::c_int
                  <= 'Z' as i32 - 'A' as i32
                {
                  undo_push(
                    (*ptr_to_globals).dot,
                    1i32 as libc::c_uint,
                    1i32 as libc::c_uchar,
                  );
                  *(*ptr_to_globals).dot =
                    bb_ascii_tolower(*(*ptr_to_globals).dot as libc::c_uchar) as libc::c_char;
                  undo_push(
                    (*ptr_to_globals).dot,
                    1i32 as libc::c_uint,
                    2i32 as libc::c_uchar,
                  );
                }
                dot_right();
                (*ptr_to_globals).cmdcnt -= 1;
                if !((*ptr_to_globals).cmdcnt > 0) {
                  break;
                }
              }
              end_cmd_q();
              current_block = 15129665204879337069;
            }
            8729655159604064397 => {
              c1 = get_one_char();
              cnt = 0;
              if c1 == '.' as i32 {
                cnt = (*ptr_to_globals)
                  .rows
                  .wrapping_sub(2i32 as libc::c_uint)
                  .wrapping_div(2i32 as libc::c_uint) as libc::c_int
              }
              if c1 == '-' as i32 {
                cnt = (*ptr_to_globals).rows.wrapping_sub(2i32 as libc::c_uint) as libc::c_int
              }
              (*ptr_to_globals).screenbegin = begin_line((*ptr_to_globals).dot);
              dot_scroll(cnt, -1i32);
              current_block = 15129665204879337069;
            }
            15899500648299942075 => {
              (*ptr_to_globals).last_forward_char = get_one_char();
              do_cmd(';' as i32);
              if *(*ptr_to_globals).dot as libc::c_int == (*ptr_to_globals).last_forward_char {
                dot_left();
              }
              (*ptr_to_globals).last_forward_char = 0;
              current_block = 15129665204879337069;
            }
            9051390181078481641 => {
              c1 = get_one_char();
              if *(*ptr_to_globals).dot as libc::c_int != '\n' as i32 {
                (*ptr_to_globals).dot =
                  text_hole_delete((*ptr_to_globals).dot, (*ptr_to_globals).dot, 1i32);
                (*ptr_to_globals).dot =
                  char_insert((*ptr_to_globals).dot, c1 as libc::c_char, 2i32);
                dot_left();
              }
              end_cmd_q();
              current_block = 15129665204879337069;
            }
            877115918601926659 => {
              dir = FORWARD as libc::c_int;
              if c == 'b' as i32 {
                dir = BACK as libc::c_int
              }
              while !((*ptr_to_globals).dot.offset(dir as isize) < (*ptr_to_globals).text
                || (*ptr_to_globals).dot.offset(dir as isize) > (*ptr_to_globals).end.offset(-1))
              {
                (*ptr_to_globals).dot = (*ptr_to_globals).dot.offset(dir as isize);
                if ({
                  let mut bb__isspace: libc::c_uchar =
                    (*(*ptr_to_globals).dot as libc::c_int - 9i32) as libc::c_uchar;
                  (bb__isspace as libc::c_int == ' ' as i32 - 9i32
                    || bb__isspace as libc::c_int <= 13i32 - 9i32) as libc::c_int
                }) != 0
                {
                  (*ptr_to_globals).dot = skip_thing(
                    (*ptr_to_globals).dot,
                    if c == 'e' as i32 { 2i32 } else { 1i32 },
                    dir,
                    S_OVER_WS as libc::c_int,
                  )
                }
                if bb_ascii_isalnum(*(*ptr_to_globals).dot as libc::c_uchar) != 0
                  || *(*ptr_to_globals).dot as libc::c_int == '_' as i32
                {
                  (*ptr_to_globals).dot =
                    skip_thing((*ptr_to_globals).dot, 1i32, dir, S_END_ALNUM as libc::c_int)
                } else if *strchrnul(
                  b"!\"#$%&\'()*+,-./:;<=>?@[\\]^_`{|}~\x00" as *const u8 as *const libc::c_char,
                  *(*ptr_to_globals).dot as libc::c_int,
                )
                .offset(0)
                  != 0
                {
                  (*ptr_to_globals).dot =
                    skip_thing((*ptr_to_globals).dot, 1i32, dir, S_END_PUNCT as libc::c_int)
                }
                (*ptr_to_globals).cmdcnt -= 1;
                if !((*ptr_to_globals).cmdcnt > 0) {
                  break;
                }
              }
              current_block = 15129665204879337069;
            }
            1085022737867179637 => {
              dot_begin();
              dot_skip_over_ws();
              current_block = 15129665204879337069;
            }
            3113147720494587438 => {
              c1 = get_one_char();
              if c1 != 'Z' as i32 {
                indicate_error();
              } else if (*ptr_to_globals).modified_count != 0 {
                if 1i32 != 0 && (*ptr_to_globals).readonly_mode as libc::c_int != 0 {
                  status_line_bold(
                    b"\'%s\' is read only\x00" as *const u8 as *const libc::c_char,
                    (*ptr_to_globals).current_filename,
                  );
                } else {
                  cnt = file_write(
                    (*ptr_to_globals).current_filename,
                    (*ptr_to_globals).text,
                    (*ptr_to_globals).end.offset(-1),
                  );
                  if cnt < 0 {
                    if cnt == -1i32 {
                      status_line_bold(b"Write error: %m\x00" as *const u8 as *const libc::c_char);
                    }
                  } else if cnt as libc::c_long
                    == (*ptr_to_globals)
                      .end
                      .offset(-1)
                      .wrapping_offset_from((*ptr_to_globals).text)
                      as libc::c_long
                      + 1
                  {
                    (*ptr_to_globals).editing = 0 as smallint
                  }
                }
              } else {
                (*ptr_to_globals).editing = 0 as smallint
              }
              current_block = 15129665204879337069;
            }
            12960118908218882441 => {
              p = begin_line((*ptr_to_globals).dot);
              if *p.offset(-1i32 as isize) as libc::c_int == '\n' as i32 {
                dot_prev();
                current_block = 2087484904894455135;
              } else {
                dot_begin();
                (*ptr_to_globals).dot =
                  char_insert((*ptr_to_globals).dot, '\n' as i32 as libc::c_char, 1i32);
                dot_prev();
                current_block = 8629930936610358348;
              }
            }
            8720450212473544924 => {
              (*ptr_to_globals).dot = (*ptr_to_globals).screenbegin;
              cnt = 0;
              while (cnt as libc::c_uint)
                < (*ptr_to_globals)
                  .rows
                  .wrapping_sub(1i32 as libc::c_uint)
                  .wrapping_div(2i32 as libc::c_uint)
              {
                (*ptr_to_globals).dot = next_line((*ptr_to_globals).dot);
                cnt += 1
              }
              current_block = 15129665204879337069;
            }
            13015277209715431090 => {
              (*ptr_to_globals).dot = end_screen();
              if (*ptr_to_globals).cmdcnt as libc::c_uint
                > (*ptr_to_globals).rows.wrapping_sub(1i32 as libc::c_uint)
              {
                (*ptr_to_globals).cmdcnt =
                  (*ptr_to_globals).rows.wrapping_sub(1i32 as libc::c_uint) as libc::c_int
              }
              (*ptr_to_globals).cmdcnt -= 1;
              if (*ptr_to_globals).cmdcnt > 0 {
                do_cmd('-' as i32);
              }
              dot_begin();
              dot_skip_over_ws();
              current_block = 15129665204879337069;
            }
            9800435767766781385 => {
              loop {
                dot_end();
                if (*ptr_to_globals).dot < (*ptr_to_globals).end.offset(-1) {
                  undo_push(
                    (*ptr_to_globals).dot,
                    1i32 as libc::c_uint,
                    1i32 as libc::c_uchar,
                  );
                  let fresh15 = (*ptr_to_globals).dot;
                  (*ptr_to_globals).dot = (*ptr_to_globals).dot.offset(1);
                  *fresh15 = ' ' as i32 as libc::c_char;
                  undo_push(
                    (*ptr_to_globals).dot.offset(-1),
                    1i32 as libc::c_uint,
                    2i32 as libc::c_uchar,
                  );
                  while ({
                    let mut bb__isblank: libc::c_uchar = *(*ptr_to_globals).dot as libc::c_uchar;
                    (bb__isblank as libc::c_int == ' ' as i32
                      || bb__isblank as libc::c_int == '\t' as i32)
                      as libc::c_int
                  }) != 0
                  {
                    text_hole_delete((*ptr_to_globals).dot, (*ptr_to_globals).dot, 2i32);
                  }
                }
                (*ptr_to_globals).cmdcnt -= 1;
                if !((*ptr_to_globals).cmdcnt > 0) {
                  break;
                }
              }
              end_cmd_q();
              current_block = 15129665204879337069;
            }
            3432363526595694666 => {
              dot_begin();
              dot_skip_over_ws();
              current_block = 3268579060917229304;
            }
            3494829253343353619 => {
              (*ptr_to_globals).dot = (*ptr_to_globals).screenbegin;
              if (*ptr_to_globals).cmdcnt as libc::c_uint
                > (*ptr_to_globals).rows.wrapping_sub(1i32 as libc::c_uint)
              {
                (*ptr_to_globals).cmdcnt =
                  (*ptr_to_globals).rows.wrapping_sub(1i32 as libc::c_uint) as libc::c_int
              }
              (*ptr_to_globals).cmdcnt -= 1;
              if (*ptr_to_globals).cmdcnt > 0 {
                do_cmd('+' as i32);
              }
              dot_skip_over_ws();
              current_block = 15129665204879337069;
            }
            17973101765331640574 => {
              c1 = get_one_char();
              if c1 != 'g' as i32 {
                buf[0] = 'g' as i32 as libc::c_char;
                buf[1] = if c1 >= 0 { c1 } else { '*' as i32 } as libc::c_char;
                buf[2] = '\u{0}' as i32 as libc::c_char;
                not_implemented(buf.as_mut_ptr());
                current_block = 15129665204879337069;
              } else {
                if (*ptr_to_globals).cmdcnt == 0 {
                  (*ptr_to_globals).cmdcnt = 1i32
                }
                current_block = 11945623545738147997;
              }
            }
            16546625800574160972 => {
              save_dot = (*ptr_to_globals).dot;
              (*ptr_to_globals).dot = dollar_line((*ptr_to_globals).dot);
              (*ptr_to_globals).dot = yank_delete(
                save_dot,
                (*ptr_to_globals).dot,
                0,
                YANKDEL as libc::c_int,
                1i32,
              );
              if c == 'C' as i32 {
                current_block = 8629930936610358348;
              } else {
                if c == 'D' as i32 {
                  end_cmd_q();
                }
                current_block = 15129665204879337069;
              }
            }
            11937696639986586685 => {
              cnt = count_lines((*ptr_to_globals).text, (*ptr_to_globals).dot);
              c1 = get_one_char();
              find_range(&mut p, &mut q, c1 as libc::c_char);
              yank_delete(p, q, 1i32, YANKONLY as libc::c_int, 0);
              p = begin_line(p);
              q = end_line(q);
              i = count_lines(p, q);
              while i > 0 {
                if c == '<' as i32 {
                  if *p as libc::c_int == '\t' as i32 {
                    text_hole_delete(p, p, 0);
                  } else if *p as libc::c_int == ' ' as i32 {
                    j = 0;
                    while *p as libc::c_int == ' ' as i32 && j < (*ptr_to_globals).tabstop {
                      text_hole_delete(p, p, 0);
                      j += 1
                    }
                  }
                } else if c == '>' as i32 {
                  char_insert(p, '\t' as i32 as libc::c_char, 1i32);
                }
                i -= 1;
                p = next_line(p)
              }
              (*ptr_to_globals).dot = find_line(cnt);
              dot_skip_over_ws();
              end_cmd_q();
              current_block = 15129665204879337069;
            }
            17725350714912028156 => {
              p = get_input_line(b":\x00" as *const u8 as *const libc::c_char);
              colon(p);
              current_block = 15129665204879337069;
            }
            14526470074083880812 => {
              q = char_search(
                (*ptr_to_globals).dot,
                b"\n\n\x00" as *const u8 as *const libc::c_char,
                (FORWARD as libc::c_int) << 1i32 | FULL as libc::c_int,
              );
              if !q.is_null() {
                (*ptr_to_globals).dot = next_line(q)
              }
              current_block = 15129665204879337069;
            }
            8893187391306414141 => {
              q = char_search(
                (*ptr_to_globals).dot,
                b"\n\n\x00" as *const u8 as *const libc::c_char,
                ((BACK as libc::c_int as libc::c_uint) << 1i32
                  | FULL as libc::c_int as libc::c_uint) as libc::c_int,
              );
              if !q.is_null() {
                (*ptr_to_globals).dot = next_line(q)
              }
              current_block = 15129665204879337069;
            }
            7021673758293221412 => {
              dir = BACK as libc::c_int;
              p = (*ptr_to_globals).dot.offset(-1);
              if *(*ptr_to_globals).last_search_pattern.offset(0) as libc::c_int == '?' as i32 {
                dir = FORWARD as libc::c_int;
                p = (*ptr_to_globals).dot.offset(1)
              }
              current_block = 4166979493554389389;
            }
            18374191879090272823 => {
              buf[0] = c as libc::c_char;
              buf[1] = '\u{0}' as i32 as libc::c_char;
              q = get_input_line(buf.as_mut_ptr());
              if *q.offset(0) as libc::c_int != 0 && *q.offset(1) == 0 {
                if *(*ptr_to_globals).last_search_pattern.offset(0) != 0 {
                  *(*ptr_to_globals).last_search_pattern.offset(0) = c as libc::c_char
                }
                current_block = 7392824444931029276;
              } else if *q.offset(0) != 0 {
                free((*ptr_to_globals).last_search_pattern as *mut libc::c_void);
                (*ptr_to_globals).last_search_pattern = crate::libbb::xfuncs_printf::xstrdup(q);
                current_block = 7392824444931029276;
              } else {
                current_block = 15129665204879337069;
              }
            }
            16407828456666301883 => {
              if (*ptr_to_globals).last_forward_char == 0 {
                current_block = 15129665204879337069;
              } else {
                loop {
                  q = (*ptr_to_globals).dot.offset(-1);
                  while q >= (*ptr_to_globals).text
                    && *q as libc::c_int != '\n' as i32
                    && *q as libc::c_int != (*ptr_to_globals).last_forward_char
                  {
                    q = q.offset(-1)
                  }
                  if q >= (*ptr_to_globals).text
                    && *q as libc::c_int == (*ptr_to_globals).last_forward_char
                  {
                    (*ptr_to_globals).dot = q
                  }
                  (*ptr_to_globals).cmdcnt -= 1;
                  if !((*ptr_to_globals).cmdcnt > 0) {
                    break;
                  }
                }
                current_block = 15129665204879337069;
              }
            }
            9018432604062702004 => {
              q = (*ptr_to_globals).dot;
              while q < (*ptr_to_globals).end && *q as libc::c_int != '\n' as i32 {
                if !strchr(
                  b"()[]{}\x00" as *const u8 as *const libc::c_char,
                  *q as libc::c_int,
                )
                .is_null()
                {
                  p = find_pair(q, *q);
                  if p.is_null() {
                    indicate_error();
                  } else {
                    (*ptr_to_globals).dot = p
                  }
                  break;
                } else {
                  q = q.offset(1)
                }
              }
              if *q as libc::c_int == '\n' as i32 {
                indicate_error();
              }
              current_block = 15129665204879337069;
            }
            10247103787464459848 => {
              p = (*ptr_to_globals).reg[(*ptr_to_globals).YDreg as usize];
              if p.is_null() {
                status_line_bold(
                  b"Nothing in register %c\x00" as *const u8 as *const libc::c_char,
                  what_reg() as libc::c_int,
                );
              } else {
                if !strchr(p, '\n' as i32).is_null() {
                  if c == 'P' as i32 {
                    dot_begin();
                  }
                  if c == 'p' as i32 {
                    if end_line((*ptr_to_globals).dot) == (*ptr_to_globals).end.offset(-1) {
                      (*ptr_to_globals).dot = (*ptr_to_globals).end
                    } else {
                      dot_next();
                    }
                  }
                } else if c == 'p' as i32 {
                  dot_right();
                }
                string_insert((*ptr_to_globals).dot, p, 1i32);
                end_cmd_q();
              }
              current_block = 15129665204879337069;
            }
            15260732871948875843 => {
              c1 = (get_one_char() | 0x20i32) - 'a' as i32;
              if c1 as libc::c_uint <= 25i32 as libc::c_uint {
                (*ptr_to_globals).mark[c1 as usize] = (*ptr_to_globals).dot
              } else {
                indicate_error();
              }
              current_block = 15129665204879337069;
            }
            12738322036487086035 => {
              c1 = get_one_char() | 0x20i32;
              if (c1 - 'a' as i32) as libc::c_uint <= 25i32 as libc::c_uint {
                c1 = c1 - 'a' as i32;
                q = (*ptr_to_globals).mark[c1 as usize];
                if (*ptr_to_globals).text <= q && q < (*ptr_to_globals).end {
                  (*ptr_to_globals).dot = q;
                  dot_begin();
                  dot_skip_over_ws();
                }
              } else if c1 == '\'' as i32 {
                (*ptr_to_globals).dot = swap_context((*ptr_to_globals).dot);
                dot_begin();
                dot_skip_over_ws();
              } else {
                indicate_error();
              }
              current_block = 15129665204879337069;
            }
            13255096073384561358 => {
              c1 = (get_one_char() | 0x20i32) - 'a' as i32;
              if c1 as libc::c_uint <= 25i32 as libc::c_uint {
                (*ptr_to_globals).YDreg = c1 as smalluint
              } else {
                indicate_error();
              }
              current_block = 15129665204879337069;
            }
            10258711639984089377 => {
              if (*ptr_to_globals).cmd_mode as libc::c_int == 0 {
                indicate_error();
              }
              (*ptr_to_globals).cmd_mode = 0 as smallint;
              undo_queue_commit();
              end_cmd_q();
              (*ptr_to_globals).last_status_cksum = 0;
              current_block = 15129665204879337069;
            }
            11439127087547047736 => {
              buf[0] = c as libc::c_char;
              buf[1] = '\u{0}' as i32 as libc::c_char;
              not_implemented(buf.as_mut_ptr());
              end_cmd_q();
              current_block = 17440971994642376514;
            }
            7961798899781870241 => {
              dot_scroll(
                (*ptr_to_globals).rows.wrapping_sub(2i32 as libc::c_uint) as libc::c_int,
                -1i32,
              );
              current_block = 15129665204879337069;
            }
            9426343755402444879 => {
              dot_scroll(
                (*ptr_to_globals)
                  .rows
                  .wrapping_sub(2i32 as libc::c_uint)
                  .wrapping_div(2i32 as libc::c_uint) as libc::c_int,
                1i32,
              );
              current_block = 15129665204879337069;
            }
            13352459794680105913 => {
              dot_scroll(1i32, 1i32);
              current_block = 15129665204879337069;
            }
            14142272253464333006 => {
              dot_scroll(
                (*ptr_to_globals).rows.wrapping_sub(2i32 as libc::c_uint) as libc::c_int,
                1i32,
              );
              current_block = 15129665204879337069;
            }
            10758177197742640066 => {
              (*ptr_to_globals).last_status_cksum = 0;
              current_block = 15129665204879337069;
            }
            6152256259730122749 => {
              current_block = 7534742345255184552;
            }
            12883932598258173301 => {
              current_block = 8800996768013373992;
            }
            11242998110520238401 => {
              redraw(1i32);
              current_block = 15129665204879337069;
            }
            13619733043935729992 => {
              loop {
                dot_next();
                dot_skip_over_ws();
                (*ptr_to_globals).cmdcnt -= 1;
                if !((*ptr_to_globals).cmdcnt > 0) {
                  break;
                }
              }
              current_block = 15129665204879337069;
            }
            9339065157412720613 => {
              dot_scroll(
                (*ptr_to_globals)
                  .rows
                  .wrapping_sub(2i32 as libc::c_uint)
                  .wrapping_div(2i32 as libc::c_uint) as libc::c_int,
                -1i32,
              );
              current_block = 15129665204879337069;
            }
            11447082683497798022 => {
              dot_scroll(1i32, -1i32);
              current_block = 15129665204879337069;
            }
            5182000506326660482 => {
              current_block = 13993698454868426881;
            }
            1105010766850597332 => {
              if !(*ptr_to_globals).reg[27].is_null() {
                p = begin_line((*ptr_to_globals).dot);
                q = end_line((*ptr_to_globals).dot);
                p = text_hole_delete(p, q, 1i32);
                p = p.offset(string_insert(p, (*ptr_to_globals).reg[27], 2i32) as isize);
                (*ptr_to_globals).dot = p;
                dot_skip_over_ws();
              }
              current_block = 15129665204879337069;
            }
            8616046655533110204 => {
              undo_pop();
              current_block = 15129665204879337069;
            }
            5127767458142431603 => {
              loop {
                (*ptr_to_globals).dot = end_line((*ptr_to_globals).dot);
                (*ptr_to_globals).cmdcnt -= 1;
                if (*ptr_to_globals).cmdcnt <= 0 {
                  break;
                }
                dot_next();
              }
              current_block = 15129665204879337069;
            }
            222014967776118151 => {
              (*ptr_to_globals).last_forward_char = get_one_char();
              current_block = 7856905509180742666;
            }
            11209792479411604110 => {
              loop {
                dot_prev();
                dot_skip_over_ws();
                (*ptr_to_globals).cmdcnt -= 1;
                if !((*ptr_to_globals).cmdcnt > 0) {
                  break;
                }
              }
              current_block = 15129665204879337069;
            }
            3364823792826654116 => {
              if (*ptr_to_globals).lmc_len != 0 {
                (*ptr_to_globals).ioq_start = crate::libbb::xfuncs_printf::xstrndup(
                  (*ptr_to_globals).last_modifying_cmd.as_mut_ptr(),
                  (*ptr_to_globals).lmc_len,
                );
                (*ptr_to_globals).ioq = (*ptr_to_globals).ioq_start
              }
              current_block = 15129665204879337069;
            }
            18096603330221575131 => {
              current_block = 17498168302144015873;
            }
            16891123271837848903 => {
              dot_end();
              current_block = 1752638907092016026;
            }
            8517235759107662071 => {
              current_block = 5847749760081351726;
            }
            12525254419223051704 => {
              if (*ptr_to_globals).dot < (*ptr_to_globals).end.offset(-1) {
                (*ptr_to_globals).dot = yank_delete(
                  (*ptr_to_globals).dot,
                  (*ptr_to_globals).dot,
                  1i32,
                  YANKDEL as libc::c_int,
                  1i32,
                )
              }
              current_block = 15129665204879337069;
            }
            15232911949322867522 => {
              current_block = 17251831742223396249;
            }
            10863374208794025069 => {
              current_block = 1895262434596074581;
            }
            451126677064669119 => {
              loop {
                dot_prev();
                (*ptr_to_globals).dot = move_to_col(
                  (*ptr_to_globals).dot,
                  (*ptr_to_globals).ccol + (*ptr_to_globals).offset,
                );
                (*ptr_to_globals).cmdcnt -= 1;
                if !((*ptr_to_globals).cmdcnt > 0) {
                  break;
                }
              }
              current_block = 15129665204879337069;
            }
            4611735929166613116 => {
              loop {
                if bb_ascii_isalnum(*(*ptr_to_globals).dot as libc::c_uchar) != 0
                  || *(*ptr_to_globals).dot as libc::c_int == '_' as i32
                {
                  (*ptr_to_globals).dot = skip_thing(
                    (*ptr_to_globals).dot,
                    1i32,
                    FORWARD as libc::c_int,
                    S_END_ALNUM as libc::c_int,
                  )
                } else if *strchrnul(
                  b"!\"#$%&\'()*+,-./:;<=>?@[\\]^_`{|}~\x00" as *const u8 as *const libc::c_char,
                  *(*ptr_to_globals).dot as libc::c_int,
                )
                .offset(0)
                  != 0
                {
                  (*ptr_to_globals).dot = skip_thing(
                    (*ptr_to_globals).dot,
                    1i32,
                    FORWARD as libc::c_int,
                    S_END_PUNCT as libc::c_int,
                  )
                }
                if (*ptr_to_globals).dot < (*ptr_to_globals).end.offset(-1) {
                  (*ptr_to_globals).dot = (*ptr_to_globals).dot.offset(1)
                }
                if ({
                  let mut bb__isspace: libc::c_uchar =
                    (*(*ptr_to_globals).dot as libc::c_int - 9i32) as libc::c_uchar;
                  (bb__isspace as libc::c_int == ' ' as i32 - 9i32
                    || bb__isspace as libc::c_int <= 13i32 - 9i32) as libc::c_int
                }) != 0
                {
                  (*ptr_to_globals).dot = skip_thing(
                    (*ptr_to_globals).dot,
                    2i32,
                    FORWARD as libc::c_int,
                    S_OVER_WS as libc::c_int,
                  )
                }
                (*ptr_to_globals).cmdcnt -= 1;
                if !((*ptr_to_globals).cmdcnt > 0) {
                  break;
                }
              }
              current_block = 15129665204879337069;
            }
            4386451087681909888 => {
              (*ptr_to_globals).dot =
                move_to_col((*ptr_to_globals).dot, (*ptr_to_globals).cmdcnt - 1i32);
              current_block = 15129665204879337069;
            }
            1296397779060594135 => {
              dot_begin();
              current_block = 15129665204879337069;
            }
            _ => {}
          }
          match current_block {
            15129665204879337069 => {}
            8629930936610358348 => {}
            _ => {
              match current_block {
                17251831742223396249 => {
                  dir = 0;
                  if c == 'X' as i32 {
                    dir = -1i32
                  }
                  loop {
                    if *(*ptr_to_globals).dot.offset(dir as isize) as libc::c_int != '\n' as i32 {
                      if c == 'X' as i32 {
                        (*ptr_to_globals).dot = (*ptr_to_globals).dot.offset(-1)
                      }
                      (*ptr_to_globals).dot = yank_delete(
                        (*ptr_to_globals).dot,
                        (*ptr_to_globals).dot,
                        0,
                        YANKDEL as libc::c_int,
                        1i32,
                      )
                    }
                    (*ptr_to_globals).cmdcnt -= 1;
                    if !((*ptr_to_globals).cmdcnt > 0) {
                      break;
                    }
                  }
                  end_cmd_q();
                  if c == 's' as i32 {
                    current_block = 8629930936610358348;
                  } else {
                    current_block = 15129665204879337069;
                  }
                }
                2087484904894455135 => {
                  dot_end();
                  (*ptr_to_globals).dot =
                    char_insert((*ptr_to_globals).dot, '\n' as i32 as libc::c_char, 1i32);
                  current_block = 8629930936610358348;
                }
                11945623545738147997 => {
                  (*ptr_to_globals).dot = (*ptr_to_globals).end.offset(-1);
                  if (*ptr_to_globals).cmdcnt > 0 {
                    (*ptr_to_globals).dot = find_line((*ptr_to_globals).cmdcnt)
                  }
                  dot_skip_over_ws();
                  current_block = 15129665204879337069;
                }
                5847749760081351726 => {
                  dir = FORWARD as libc::c_int;
                  if c == 'B' as i32 {
                    dir = BACK as libc::c_int
                  }
                  loop {
                    if c == 'W' as i32
                      || ({
                        let mut bb__isspace: libc::c_uchar =
                          (*(*ptr_to_globals).dot.offset(dir as isize) as libc::c_int - 9i32)
                            as libc::c_uchar;
                        (bb__isspace as libc::c_int == ' ' as i32 - 9i32
                          || bb__isspace as libc::c_int <= 13i32 - 9i32)
                          as libc::c_int
                      }) != 0
                    {
                      (*ptr_to_globals).dot =
                        skip_thing((*ptr_to_globals).dot, 1i32, dir, S_TO_WS as libc::c_int);
                      (*ptr_to_globals).dot =
                        skip_thing((*ptr_to_globals).dot, 2i32, dir, S_OVER_WS as libc::c_int)
                    }
                    if c != 'W' as i32 {
                      (*ptr_to_globals).dot =
                        skip_thing((*ptr_to_globals).dot, 1i32, dir, S_BEFORE_WS as libc::c_int)
                    }
                    (*ptr_to_globals).cmdcnt -= 1;
                    if !((*ptr_to_globals).cmdcnt > 0) {
                      break;
                    }
                  }
                  current_block = 15129665204879337069;
                }
                17440971994642376514 => {
                  current_block = 15129665204879337069;
                }
                7534742345255184552 => {
                  current_block = 17247297260531395789;
                }
                8800996768013373992 => {
                  loop {
                    dot_next();
                    (*ptr_to_globals).dot = move_to_col(
                      (*ptr_to_globals).dot,
                      (*ptr_to_globals).ccol + (*ptr_to_globals).offset,
                    );
                    (*ptr_to_globals).cmdcnt -= 1;
                    if !((*ptr_to_globals).cmdcnt > 0) {
                      break;
                    }
                  }
                  current_block = 15129665204879337069;
                }
                13993698454868426881 => {
                  loop {
                    dot_right();
                    (*ptr_to_globals).cmdcnt -= 1;
                    if !((*ptr_to_globals).cmdcnt > 0) {
                      break;
                    }
                  }
                  current_block = 15129665204879337069;
                }
                7856905509180742666 => {
                  while !((*ptr_to_globals).last_forward_char == 0) {
                    q = (*ptr_to_globals).dot.offset(1);
                    while q < (*ptr_to_globals).end.offset(-1)
                      && *q as libc::c_int != '\n' as i32
                      && *q as libc::c_int != (*ptr_to_globals).last_forward_char
                    {
                      q = q.offset(1)
                    }
                    if *q as libc::c_int == (*ptr_to_globals).last_forward_char {
                      (*ptr_to_globals).dot = q
                    }
                    (*ptr_to_globals).cmdcnt -= 1;
                    if !((*ptr_to_globals).cmdcnt > 0) {
                      break;
                    }
                  }
                  current_block = 15129665204879337069;
                }
                17498168302144015873 => {
                  current_block = 8681395796513813967;
                }
                1752638907092016026 => {
                  if *(*ptr_to_globals).dot as libc::c_int != '\n' as i32 {
                    (*ptr_to_globals).dot = (*ptr_to_globals).dot.offset(1)
                  }
                  current_block = 8629930936610358348;
                }
                3268579060917229304 => {
                  current_block = 8629930936610358348;
                }
                1895262434596074581 => {
                  current_block = 8908416993177701018;
                }
                _ => {}
              }
              match current_block {
                8629930936610358348 => {}
                15129665204879337069 => {}
                _ => {
                  match current_block {
                    17247297260531395789 => {
                      loop {
                        dot_left();
                        (*ptr_to_globals).cmdcnt -= 1;
                        if !((*ptr_to_globals).cmdcnt > 0) {
                          break;
                        }
                      }
                      current_block = 15129665204879337069;
                    }
                    8681395796513813967 => {
                      current_block = 5591548203144509315;
                    }
                    8908416993177701018 => {
                      current_block = 16124761010012532485;
                    }
                    _ => {}
                  }
                  match current_block {
                    15129665204879337069 => {}
                    _ => {
                      match current_block {
                        16124761010012532485 => {
                          let mut yf: libc::c_int = 0;
                          let mut ml: libc::c_int = 0;
                          let mut whole: libc::c_int = 0;
                          yf = YANKDEL as libc::c_int;
                          if c == 'y' as i32 || c == 'Y' as i32 {
                            yf = YANKONLY as libc::c_int
                          }
                          c1 = 'y' as i32;
                          if c != 'Y' as i32 {
                            c1 = get_one_char()
                          }
                          ml = find_range(&mut p, &mut q, c1 as libc::c_char);
                          place_cursor(0i32, 0);
                          if c1 == 27i32 {
                            c1 = 27i32;
                            c = c1
                          } else if !strchr(b"wW\x00" as *const u8 as *const libc::c_char, c1)
                            .is_null()
                          {
                            ml = 0;
                            if c == 'c' as i32 {
                              while ({
                                let mut bb__isspace: libc::c_uchar =
                                  (*q as libc::c_int - 9i32) as libc::c_uchar;
                                (bb__isspace as libc::c_int == ' ' as i32 - 9i32
                                  || bb__isspace as libc::c_int <= 13i32 - 9i32)
                                  as libc::c_int
                              }) != 0
                                && q > p
                              {
                                q = q.offset(-1)
                              }
                            }
                            (*ptr_to_globals).dot = yank_delete(p, q, ml, yf, 1i32)
                          } else if !strchr(
                            b"^0bBeEft%$ lh\x08\x7f\x00" as *const u8 as *const libc::c_char,
                            c1,
                          )
                          .is_null()
                          {
                            (*ptr_to_globals).dot = yank_delete(p, q, ml, yf, 1i32)
                          } else if !strchr(
                            b"cdykjGHL+-{}\r\n\x00" as *const u8 as *const libc::c_char,
                            c1,
                          )
                          .is_null()
                          {
                            (*ptr_to_globals).dot = yank_delete(p, q, ml, yf, 1i32);
                            whole = 1i32
                          } else {
                            c1 = 27i32;
                            c = c1;
                            ml = 0;
                            indicate_error();
                          }
                          if ml != 0 && whole != 0 {
                            if c == 'c' as i32 {
                              (*ptr_to_globals).dot = char_insert(
                                (*ptr_to_globals).dot,
                                '\n' as i32 as libc::c_char,
                                2i32,
                              );
                              if whole != 0
                                && (*ptr_to_globals).dot != (*ptr_to_globals).end.offset(-1)
                              {
                                dot_prev();
                              }
                            } else if c == 'd' as i32 {
                              dot_begin();
                              dot_skip_over_ws();
                            }
                          }
                          if c1 != 27i32 {
                            if c == 'c' as i32 {
                              strcpy(
                                buf.as_mut_ptr(),
                                b"Change\x00" as *const u8 as *const libc::c_char,
                              );
                              current_block = 8629930936610358348;
                            } else {
                              if c == 'd' as i32 {
                                strcpy(
                                  buf.as_mut_ptr(),
                                  b"Delete\x00" as *const u8 as *const libc::c_char,
                                );
                              }
                              if c == 'y' as i32 || c == 'Y' as i32 {
                                strcpy(
                                  buf.as_mut_ptr(),
                                  b"Yank\x00" as *const u8 as *const libc::c_char,
                                );
                              }
                              p = (*ptr_to_globals).reg[(*ptr_to_globals).YDreg as usize];
                              q = p.offset(strlen(p) as isize);
                              cnt = 0;
                              while p <= q {
                                if *p as libc::c_int == '\n' as i32 {
                                  cnt += 1
                                }
                                p = p.offset(1)
                              }
                              status_line(
                                b"%s %u lines (%u chars) using [%c]\x00" as *const u8
                                  as *const libc::c_char,
                                buf.as_mut_ptr(),
                                cnt,
                                strlen((*ptr_to_globals).reg[(*ptr_to_globals).YDreg as usize])
                                  as libc::c_uint,
                                what_reg() as libc::c_int,
                              );
                              end_cmd_q();
                              current_block = 15129665204879337069;
                            }
                          } else {
                            current_block = 15129665204879337069;
                          }
                        }
                        5591548203144509315 => {
                          current_block = 2636677179867529885;
                        }
                        _ => {}
                      }
                      match current_block {
                        15129665204879337069 => {}
                        8629930936610358348 => {}
                        _ => {
                          match current_block {
                            2636677179867529885 => {
                              current_block = 12309206730560524281;
                            }
                            _ => {}
                          }
                          match current_block {
                            12309206730560524281 => {
                              current_block = 3325768110057758661;
                            }
                            _ => {}
                          }
                          match current_block {
                            3325768110057758661 => {
                              current_block = 14815832896553429982;
                            }
                            _ => {}
                          }
                          match current_block {
                            14815832896553429982 => {
                              current_block = 10731695520297161438;
                            }
                            _ => {}
                          }
                          match current_block {
                            10731695520297161438 => {
                              if c == '0' as i32 && (*ptr_to_globals).cmdcnt < 1i32 {
                                dot_begin();
                              } else {
                                (*ptr_to_globals).cmdcnt =
                                  (*ptr_to_globals).cmdcnt * 10i32 + (c - '0' as i32)
                              }
                              current_block = 15129665204879337069;
                            }
                            _ => {}
                          }
                          match current_block {
                            15129665204879337069 => {}
                            _ => {
                              loop {
                                match current_block {
                                  16813369756331276724 => {
                                    msg = std::ptr::null();
                                    current_block = 7392824444931029276;
                                  }
                                  7392824444931029276 => {
                                    dir = FORWARD as libc::c_int;
                                    p = (*ptr_to_globals).dot.offset(1);
                                    if *(*ptr_to_globals).last_search_pattern.offset(0)
                                      as libc::c_int
                                      == '?' as i32
                                    {
                                      dir = BACK as libc::c_int;
                                      p = (*ptr_to_globals).dot.offset(-1)
                                    }
                                    current_block = 4166979493554389389;
                                  }
                                  _ => {
                                    q = char_search(
                                      p,
                                      (*ptr_to_globals).last_search_pattern.offset(1),
                                      dir << 1i32 | FULL as libc::c_int,
                                    );
                                    if !q.is_null() {
                                      (*ptr_to_globals).dot = q;
                                      msg = std::ptr::null()
                                    } else {
                                      p = (*ptr_to_globals).text;
                                      if dir == BACK as libc::c_int {
                                        p = (*ptr_to_globals).end.offset(-1)
                                      }
                                      q = char_search(
                                        p,
                                        (*ptr_to_globals).last_search_pattern.offset(1),
                                        dir << 1i32 | FULL as libc::c_int,
                                      );
                                      if !q.is_null() {
                                        (*ptr_to_globals).dot = q;
                                        msg = b"search hit BOTTOM, continuing at TOP\x00"
                                          as *const u8
                                          as *const libc::c_char;
                                        if dir == BACK as libc::c_int {
                                          msg = b"search hit TOP, continuing at BOTTOM\x00"
                                            as *const u8
                                            as *const libc::c_char
                                        }
                                      } else {
                                        msg = b"Pattern not found\x00" as *const u8
                                          as *const libc::c_char
                                      }
                                    }
                                    if !msg.is_null() {
                                      status_line_bold(
                                        b"%s\x00" as *const u8 as *const libc::c_char,
                                        msg,
                                      );
                                    }
                                    (*ptr_to_globals).cmdcnt -= 1;
                                    if (*ptr_to_globals).cmdcnt > 0 {
                                      current_block = 16813369756331276724;
                                    } else {
                                      break;
                                    }
                                  }
                                }
                              }
                              current_block = 15129665204879337069;
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
        53 => {
          current_block = 12309206730560524281;
          match current_block {
            16992905640583886232 => {
              loop {
                if (*(*ptr_to_globals).dot as libc::c_int - 'a' as i32) as libc::c_uchar
                  as libc::c_int
                  <= 'z' as i32 - 'a' as i32
                {
                  undo_push(
                    (*ptr_to_globals).dot,
                    1i32 as libc::c_uint,
                    1i32 as libc::c_uchar,
                  );
                  *(*ptr_to_globals).dot =
                    bb_ascii_toupper(*(*ptr_to_globals).dot as libc::c_uchar) as libc::c_char;
                  undo_push(
                    (*ptr_to_globals).dot,
                    1i32 as libc::c_uint,
                    2i32 as libc::c_uchar,
                  );
                } else if (*(*ptr_to_globals).dot as libc::c_int - 'A' as i32) as libc::c_uchar
                  as libc::c_int
                  <= 'Z' as i32 - 'A' as i32
                {
                  undo_push(
                    (*ptr_to_globals).dot,
                    1i32 as libc::c_uint,
                    1i32 as libc::c_uchar,
                  );
                  *(*ptr_to_globals).dot =
                    bb_ascii_tolower(*(*ptr_to_globals).dot as libc::c_uchar) as libc::c_char;
                  undo_push(
                    (*ptr_to_globals).dot,
                    1i32 as libc::c_uint,
                    2i32 as libc::c_uchar,
                  );
                }
                dot_right();
                (*ptr_to_globals).cmdcnt -= 1;
                if !((*ptr_to_globals).cmdcnt > 0) {
                  break;
                }
              }
              end_cmd_q();
              current_block = 15129665204879337069;
            }
            8729655159604064397 => {
              c1 = get_one_char();
              cnt = 0;
              if c1 == '.' as i32 {
                cnt = (*ptr_to_globals)
                  .rows
                  .wrapping_sub(2i32 as libc::c_uint)
                  .wrapping_div(2i32 as libc::c_uint) as libc::c_int
              }
              if c1 == '-' as i32 {
                cnt = (*ptr_to_globals).rows.wrapping_sub(2i32 as libc::c_uint) as libc::c_int
              }
              (*ptr_to_globals).screenbegin = begin_line((*ptr_to_globals).dot);
              dot_scroll(cnt, -1i32);
              current_block = 15129665204879337069;
            }
            15899500648299942075 => {
              (*ptr_to_globals).last_forward_char = get_one_char();
              do_cmd(';' as i32);
              if *(*ptr_to_globals).dot as libc::c_int == (*ptr_to_globals).last_forward_char {
                dot_left();
              }
              (*ptr_to_globals).last_forward_char = 0;
              current_block = 15129665204879337069;
            }
            9051390181078481641 => {
              c1 = get_one_char();
              if *(*ptr_to_globals).dot as libc::c_int != '\n' as i32 {
                (*ptr_to_globals).dot =
                  text_hole_delete((*ptr_to_globals).dot, (*ptr_to_globals).dot, 1i32);
                (*ptr_to_globals).dot =
                  char_insert((*ptr_to_globals).dot, c1 as libc::c_char, 2i32);
                dot_left();
              }
              end_cmd_q();
              current_block = 15129665204879337069;
            }
            877115918601926659 => {
              dir = FORWARD as libc::c_int;
              if c == 'b' as i32 {
                dir = BACK as libc::c_int
              }
              while !((*ptr_to_globals).dot.offset(dir as isize) < (*ptr_to_globals).text
                || (*ptr_to_globals).dot.offset(dir as isize) > (*ptr_to_globals).end.offset(-1))
              {
                (*ptr_to_globals).dot = (*ptr_to_globals).dot.offset(dir as isize);
                if ({
                  let mut bb__isspace: libc::c_uchar =
                    (*(*ptr_to_globals).dot as libc::c_int - 9i32) as libc::c_uchar;
                  (bb__isspace as libc::c_int == ' ' as i32 - 9i32
                    || bb__isspace as libc::c_int <= 13i32 - 9i32) as libc::c_int
                }) != 0
                {
                  (*ptr_to_globals).dot = skip_thing(
                    (*ptr_to_globals).dot,
                    if c == 'e' as i32 { 2i32 } else { 1i32 },
                    dir,
                    S_OVER_WS as libc::c_int,
                  )
                }
                if bb_ascii_isalnum(*(*ptr_to_globals).dot as libc::c_uchar) != 0
                  || *(*ptr_to_globals).dot as libc::c_int == '_' as i32
                {
                  (*ptr_to_globals).dot =
                    skip_thing((*ptr_to_globals).dot, 1i32, dir, S_END_ALNUM as libc::c_int)
                } else if *strchrnul(
                  b"!\"#$%&\'()*+,-./:;<=>?@[\\]^_`{|}~\x00" as *const u8 as *const libc::c_char,
                  *(*ptr_to_globals).dot as libc::c_int,
                )
                .offset(0)
                  != 0
                {
                  (*ptr_to_globals).dot =
                    skip_thing((*ptr_to_globals).dot, 1i32, dir, S_END_PUNCT as libc::c_int)
                }
                (*ptr_to_globals).cmdcnt -= 1;
                if !((*ptr_to_globals).cmdcnt > 0) {
                  break;
                }
              }
              current_block = 15129665204879337069;
            }
            1085022737867179637 => {
              dot_begin();
              dot_skip_over_ws();
              current_block = 15129665204879337069;
            }
            3113147720494587438 => {
              c1 = get_one_char();
              if c1 != 'Z' as i32 {
                indicate_error();
              } else if (*ptr_to_globals).modified_count != 0 {
                if 1i32 != 0 && (*ptr_to_globals).readonly_mode as libc::c_int != 0 {
                  status_line_bold(
                    b"\'%s\' is read only\x00" as *const u8 as *const libc::c_char,
                    (*ptr_to_globals).current_filename,
                  );
                } else {
                  cnt = file_write(
                    (*ptr_to_globals).current_filename,
                    (*ptr_to_globals).text,
                    (*ptr_to_globals).end.offset(-1),
                  );
                  if cnt < 0 {
                    if cnt == -1i32 {
                      status_line_bold(b"Write error: %m\x00" as *const u8 as *const libc::c_char);
                    }
                  } else if cnt as libc::c_long
                    == (*ptr_to_globals)
                      .end
                      .offset(-1)
                      .wrapping_offset_from((*ptr_to_globals).text)
                      as libc::c_long
                      + 1
                  {
                    (*ptr_to_globals).editing = 0 as smallint
                  }
                }
              } else {
                (*ptr_to_globals).editing = 0 as smallint
              }
              current_block = 15129665204879337069;
            }
            12960118908218882441 => {
              p = begin_line((*ptr_to_globals).dot);
              if *p.offset(-1i32 as isize) as libc::c_int == '\n' as i32 {
                dot_prev();
                current_block = 2087484904894455135;
              } else {
                dot_begin();
                (*ptr_to_globals).dot =
                  char_insert((*ptr_to_globals).dot, '\n' as i32 as libc::c_char, 1i32);
                dot_prev();
                current_block = 8629930936610358348;
              }
            }
            8720450212473544924 => {
              (*ptr_to_globals).dot = (*ptr_to_globals).screenbegin;
              cnt = 0;
              while (cnt as libc::c_uint)
                < (*ptr_to_globals)
                  .rows
                  .wrapping_sub(1i32 as libc::c_uint)
                  .wrapping_div(2i32 as libc::c_uint)
              {
                (*ptr_to_globals).dot = next_line((*ptr_to_globals).dot);
                cnt += 1
              }
              current_block = 15129665204879337069;
            }
            13015277209715431090 => {
              (*ptr_to_globals).dot = end_screen();
              if (*ptr_to_globals).cmdcnt as libc::c_uint
                > (*ptr_to_globals).rows.wrapping_sub(1i32 as libc::c_uint)
              {
                (*ptr_to_globals).cmdcnt =
                  (*ptr_to_globals).rows.wrapping_sub(1i32 as libc::c_uint) as libc::c_int
              }
              (*ptr_to_globals).cmdcnt -= 1;
              if (*ptr_to_globals).cmdcnt > 0 {
                do_cmd('-' as i32);
              }
              dot_begin();
              dot_skip_over_ws();
              current_block = 15129665204879337069;
            }
            9800435767766781385 => {
              loop {
                dot_end();
                if (*ptr_to_globals).dot < (*ptr_to_globals).end.offset(-1) {
                  undo_push(
                    (*ptr_to_globals).dot,
                    1i32 as libc::c_uint,
                    1i32 as libc::c_uchar,
                  );
                  let fresh15 = (*ptr_to_globals).dot;
                  (*ptr_to_globals).dot = (*ptr_to_globals).dot.offset(1);
                  *fresh15 = ' ' as i32 as libc::c_char;
                  undo_push(
                    (*ptr_to_globals).dot.offset(-1),
                    1i32 as libc::c_uint,
                    2i32 as libc::c_uchar,
                  );
                  while ({
                    let mut bb__isblank: libc::c_uchar = *(*ptr_to_globals).dot as libc::c_uchar;
                    (bb__isblank as libc::c_int == ' ' as i32
                      || bb__isblank as libc::c_int == '\t' as i32)
                      as libc::c_int
                  }) != 0
                  {
                    text_hole_delete((*ptr_to_globals).dot, (*ptr_to_globals).dot, 2i32);
                  }
                }
                (*ptr_to_globals).cmdcnt -= 1;
                if !((*ptr_to_globals).cmdcnt > 0) {
                  break;
                }
              }
              end_cmd_q();
              current_block = 15129665204879337069;
            }
            3432363526595694666 => {
              dot_begin();
              dot_skip_over_ws();
              current_block = 3268579060917229304;
            }
            3494829253343353619 => {
              (*ptr_to_globals).dot = (*ptr_to_globals).screenbegin;
              if (*ptr_to_globals).cmdcnt as libc::c_uint
                > (*ptr_to_globals).rows.wrapping_sub(1i32 as libc::c_uint)
              {
                (*ptr_to_globals).cmdcnt =
                  (*ptr_to_globals).rows.wrapping_sub(1i32 as libc::c_uint) as libc::c_int
              }
              (*ptr_to_globals).cmdcnt -= 1;
              if (*ptr_to_globals).cmdcnt > 0 {
                do_cmd('+' as i32);
              }
              dot_skip_over_ws();
              current_block = 15129665204879337069;
            }
            17973101765331640574 => {
              c1 = get_one_char();
              if c1 != 'g' as i32 {
                buf[0] = 'g' as i32 as libc::c_char;
                buf[1] = if c1 >= 0 { c1 } else { '*' as i32 } as libc::c_char;
                buf[2] = '\u{0}' as i32 as libc::c_char;
                not_implemented(buf.as_mut_ptr());
                current_block = 15129665204879337069;
              } else {
                if (*ptr_to_globals).cmdcnt == 0 {
                  (*ptr_to_globals).cmdcnt = 1i32
                }
                current_block = 11945623545738147997;
              }
            }
            16546625800574160972 => {
              save_dot = (*ptr_to_globals).dot;
              (*ptr_to_globals).dot = dollar_line((*ptr_to_globals).dot);
              (*ptr_to_globals).dot = yank_delete(
                save_dot,
                (*ptr_to_globals).dot,
                0,
                YANKDEL as libc::c_int,
                1i32,
              );
              if c == 'C' as i32 {
                current_block = 8629930936610358348;
              } else {
                if c == 'D' as i32 {
                  end_cmd_q();
                }
                current_block = 15129665204879337069;
              }
            }
            11937696639986586685 => {
              cnt = count_lines((*ptr_to_globals).text, (*ptr_to_globals).dot);
              c1 = get_one_char();
              find_range(&mut p, &mut q, c1 as libc::c_char);
              yank_delete(p, q, 1i32, YANKONLY as libc::c_int, 0);
              p = begin_line(p);
              q = end_line(q);
              i = count_lines(p, q);
              while i > 0 {
                if c == '<' as i32 {
                  if *p as libc::c_int == '\t' as i32 {
                    text_hole_delete(p, p, 0);
                  } else if *p as libc::c_int == ' ' as i32 {
                    j = 0;
                    while *p as libc::c_int == ' ' as i32 && j < (*ptr_to_globals).tabstop {
                      text_hole_delete(p, p, 0);
                      j += 1
                    }
                  }
                } else if c == '>' as i32 {
                  char_insert(p, '\t' as i32 as libc::c_char, 1i32);
                }
                i -= 1;
                p = next_line(p)
              }
              (*ptr_to_globals).dot = find_line(cnt);
              dot_skip_over_ws();
              end_cmd_q();
              current_block = 15129665204879337069;
            }
            17725350714912028156 => {
              p = get_input_line(b":\x00" as *const u8 as *const libc::c_char);
              colon(p);
              current_block = 15129665204879337069;
            }
            14526470074083880812 => {
              q = char_search(
                (*ptr_to_globals).dot,
                b"\n\n\x00" as *const u8 as *const libc::c_char,
                (FORWARD as libc::c_int) << 1i32 | FULL as libc::c_int,
              );
              if !q.is_null() {
                (*ptr_to_globals).dot = next_line(q)
              }
              current_block = 15129665204879337069;
            }
            8893187391306414141 => {
              q = char_search(
                (*ptr_to_globals).dot,
                b"\n\n\x00" as *const u8 as *const libc::c_char,
                ((BACK as libc::c_int as libc::c_uint) << 1i32
                  | FULL as libc::c_int as libc::c_uint) as libc::c_int,
              );
              if !q.is_null() {
                (*ptr_to_globals).dot = next_line(q)
              }
              current_block = 15129665204879337069;
            }
            7021673758293221412 => {
              dir = BACK as libc::c_int;
              p = (*ptr_to_globals).dot.offset(-1);
              if *(*ptr_to_globals).last_search_pattern.offset(0) as libc::c_int == '?' as i32 {
                dir = FORWARD as libc::c_int;
                p = (*ptr_to_globals).dot.offset(1)
              }
              current_block = 4166979493554389389;
            }
            18374191879090272823 => {
              buf[0] = c as libc::c_char;
              buf[1] = '\u{0}' as i32 as libc::c_char;
              q = get_input_line(buf.as_mut_ptr());
              if *q.offset(0) as libc::c_int != 0 && *q.offset(1) == 0 {
                if *(*ptr_to_globals).last_search_pattern.offset(0) != 0 {
                  *(*ptr_to_globals).last_search_pattern.offset(0) = c as libc::c_char
                }
                current_block = 7392824444931029276;
              } else if *q.offset(0) != 0 {
                free((*ptr_to_globals).last_search_pattern as *mut libc::c_void);
                (*ptr_to_globals).last_search_pattern = crate::libbb::xfuncs_printf::xstrdup(q);
                current_block = 7392824444931029276;
              } else {
                current_block = 15129665204879337069;
              }
            }
            16407828456666301883 => {
              if (*ptr_to_globals).last_forward_char == 0 {
                current_block = 15129665204879337069;
              } else {
                loop {
                  q = (*ptr_to_globals).dot.offset(-1);
                  while q >= (*ptr_to_globals).text
                    && *q as libc::c_int != '\n' as i32
                    && *q as libc::c_int != (*ptr_to_globals).last_forward_char
                  {
                    q = q.offset(-1)
                  }
                  if q >= (*ptr_to_globals).text
                    && *q as libc::c_int == (*ptr_to_globals).last_forward_char
                  {
                    (*ptr_to_globals).dot = q
                  }
                  (*ptr_to_globals).cmdcnt -= 1;
                  if !((*ptr_to_globals).cmdcnt > 0) {
                    break;
                  }
                }
                current_block = 15129665204879337069;
              }
            }
            9018432604062702004 => {
              q = (*ptr_to_globals).dot;
              while q < (*ptr_to_globals).end && *q as libc::c_int != '\n' as i32 {
                if !strchr(
                  b"()[]{}\x00" as *const u8 as *const libc::c_char,
                  *q as libc::c_int,
                )
                .is_null()
                {
                  p = find_pair(q, *q);
                  if p.is_null() {
                    indicate_error();
                  } else {
                    (*ptr_to_globals).dot = p
                  }
                  break;
                } else {
                  q = q.offset(1)
                }
              }
              if *q as libc::c_int == '\n' as i32 {
                indicate_error();
              }
              current_block = 15129665204879337069;
            }
            10247103787464459848 => {
              p = (*ptr_to_globals).reg[(*ptr_to_globals).YDreg as usize];
              if p.is_null() {
                status_line_bold(
                  b"Nothing in register %c\x00" as *const u8 as *const libc::c_char,
                  what_reg() as libc::c_int,
                );
              } else {
                if !strchr(p, '\n' as i32).is_null() {
                  if c == 'P' as i32 {
                    dot_begin();
                  }
                  if c == 'p' as i32 {
                    if end_line((*ptr_to_globals).dot) == (*ptr_to_globals).end.offset(-1) {
                      (*ptr_to_globals).dot = (*ptr_to_globals).end
                    } else {
                      dot_next();
                    }
                  }
                } else if c == 'p' as i32 {
                  dot_right();
                }
                string_insert((*ptr_to_globals).dot, p, 1i32);
                end_cmd_q();
              }
              current_block = 15129665204879337069;
            }
            15260732871948875843 => {
              c1 = (get_one_char() | 0x20i32) - 'a' as i32;
              if c1 as libc::c_uint <= 25i32 as libc::c_uint {
                (*ptr_to_globals).mark[c1 as usize] = (*ptr_to_globals).dot
              } else {
                indicate_error();
              }
              current_block = 15129665204879337069;
            }
            12738322036487086035 => {
              c1 = get_one_char() | 0x20i32;
              if (c1 - 'a' as i32) as libc::c_uint <= 25i32 as libc::c_uint {
                c1 = c1 - 'a' as i32;
                q = (*ptr_to_globals).mark[c1 as usize];
                if (*ptr_to_globals).text <= q && q < (*ptr_to_globals).end {
                  (*ptr_to_globals).dot = q;
                  dot_begin();
                  dot_skip_over_ws();
                }
              } else if c1 == '\'' as i32 {
                (*ptr_to_globals).dot = swap_context((*ptr_to_globals).dot);
                dot_begin();
                dot_skip_over_ws();
              } else {
                indicate_error();
              }
              current_block = 15129665204879337069;
            }
            13255096073384561358 => {
              c1 = (get_one_char() | 0x20i32) - 'a' as i32;
              if c1 as libc::c_uint <= 25i32 as libc::c_uint {
                (*ptr_to_globals).YDreg = c1 as smalluint
              } else {
                indicate_error();
              }
              current_block = 15129665204879337069;
            }
            10258711639984089377 => {
              if (*ptr_to_globals).cmd_mode as libc::c_int == 0 {
                indicate_error();
              }
              (*ptr_to_globals).cmd_mode = 0 as smallint;
              undo_queue_commit();
              end_cmd_q();
              (*ptr_to_globals).last_status_cksum = 0;
              current_block = 15129665204879337069;
            }
            11439127087547047736 => {
              buf[0] = c as libc::c_char;
              buf[1] = '\u{0}' as i32 as libc::c_char;
              not_implemented(buf.as_mut_ptr());
              end_cmd_q();
              current_block = 17440971994642376514;
            }
            7961798899781870241 => {
              dot_scroll(
                (*ptr_to_globals).rows.wrapping_sub(2i32 as libc::c_uint) as libc::c_int,
                -1i32,
              );
              current_block = 15129665204879337069;
            }
            9426343755402444879 => {
              dot_scroll(
                (*ptr_to_globals)
                  .rows
                  .wrapping_sub(2i32 as libc::c_uint)
                  .wrapping_div(2i32 as libc::c_uint) as libc::c_int,
                1i32,
              );
              current_block = 15129665204879337069;
            }
            13352459794680105913 => {
              dot_scroll(1i32, 1i32);
              current_block = 15129665204879337069;
            }
            14142272253464333006 => {
              dot_scroll(
                (*ptr_to_globals).rows.wrapping_sub(2i32 as libc::c_uint) as libc::c_int,
                1i32,
              );
              current_block = 15129665204879337069;
            }
            10758177197742640066 => {
              (*ptr_to_globals).last_status_cksum = 0;
              current_block = 15129665204879337069;
            }
            6152256259730122749 => {
              current_block = 7534742345255184552;
            }
            12883932598258173301 => {
              current_block = 8800996768013373992;
            }
            11242998110520238401 => {
              redraw(1i32);
              current_block = 15129665204879337069;
            }
            13619733043935729992 => {
              loop {
                dot_next();
                dot_skip_over_ws();
                (*ptr_to_globals).cmdcnt -= 1;
                if !((*ptr_to_globals).cmdcnt > 0) {
                  break;
                }
              }
              current_block = 15129665204879337069;
            }
            9339065157412720613 => {
              dot_scroll(
                (*ptr_to_globals)
                  .rows
                  .wrapping_sub(2i32 as libc::c_uint)
                  .wrapping_div(2i32 as libc::c_uint) as libc::c_int,
                -1i32,
              );
              current_block = 15129665204879337069;
            }
            11447082683497798022 => {
              dot_scroll(1i32, -1i32);
              current_block = 15129665204879337069;
            }
            5182000506326660482 => {
              current_block = 13993698454868426881;
            }
            1105010766850597332 => {
              if !(*ptr_to_globals).reg[27].is_null() {
                p = begin_line((*ptr_to_globals).dot);
                q = end_line((*ptr_to_globals).dot);
                p = text_hole_delete(p, q, 1i32);
                p = p.offset(string_insert(p, (*ptr_to_globals).reg[27], 2i32) as isize);
                (*ptr_to_globals).dot = p;
                dot_skip_over_ws();
              }
              current_block = 15129665204879337069;
            }
            8616046655533110204 => {
              undo_pop();
              current_block = 15129665204879337069;
            }
            5127767458142431603 => {
              loop {
                (*ptr_to_globals).dot = end_line((*ptr_to_globals).dot);
                (*ptr_to_globals).cmdcnt -= 1;
                if (*ptr_to_globals).cmdcnt <= 0 {
                  break;
                }
                dot_next();
              }
              current_block = 15129665204879337069;
            }
            222014967776118151 => {
              (*ptr_to_globals).last_forward_char = get_one_char();
              current_block = 7856905509180742666;
            }
            11209792479411604110 => {
              loop {
                dot_prev();
                dot_skip_over_ws();
                (*ptr_to_globals).cmdcnt -= 1;
                if !((*ptr_to_globals).cmdcnt > 0) {
                  break;
                }
              }
              current_block = 15129665204879337069;
            }
            3364823792826654116 => {
              if (*ptr_to_globals).lmc_len != 0 {
                (*ptr_to_globals).ioq_start = crate::libbb::xfuncs_printf::xstrndup(
                  (*ptr_to_globals).last_modifying_cmd.as_mut_ptr(),
                  (*ptr_to_globals).lmc_len,
                );
                (*ptr_to_globals).ioq = (*ptr_to_globals).ioq_start
              }
              current_block = 15129665204879337069;
            }
            18096603330221575131 => {
              current_block = 17498168302144015873;
            }
            16891123271837848903 => {
              dot_end();
              current_block = 1752638907092016026;
            }
            8517235759107662071 => {
              current_block = 5847749760081351726;
            }
            12525254419223051704 => {
              if (*ptr_to_globals).dot < (*ptr_to_globals).end.offset(-1) {
                (*ptr_to_globals).dot = yank_delete(
                  (*ptr_to_globals).dot,
                  (*ptr_to_globals).dot,
                  1i32,
                  YANKDEL as libc::c_int,
                  1i32,
                )
              }
              current_block = 15129665204879337069;
            }
            15232911949322867522 => {
              current_block = 17251831742223396249;
            }
            10863374208794025069 => {
              current_block = 1895262434596074581;
            }
            451126677064669119 => {
              loop {
                dot_prev();
                (*ptr_to_globals).dot = move_to_col(
                  (*ptr_to_globals).dot,
                  (*ptr_to_globals).ccol + (*ptr_to_globals).offset,
                );
                (*ptr_to_globals).cmdcnt -= 1;
                if !((*ptr_to_globals).cmdcnt > 0) {
                  break;
                }
              }
              current_block = 15129665204879337069;
            }
            4611735929166613116 => {
              loop {
                if bb_ascii_isalnum(*(*ptr_to_globals).dot as libc::c_uchar) != 0
                  || *(*ptr_to_globals).dot as libc::c_int == '_' as i32
                {
                  (*ptr_to_globals).dot = skip_thing(
                    (*ptr_to_globals).dot,
                    1i32,
                    FORWARD as libc::c_int,
                    S_END_ALNUM as libc::c_int,
                  )
                } else if *strchrnul(
                  b"!\"#$%&\'()*+,-./:;<=>?@[\\]^_`{|}~\x00" as *const u8 as *const libc::c_char,
                  *(*ptr_to_globals).dot as libc::c_int,
                )
                .offset(0)
                  != 0
                {
                  (*ptr_to_globals).dot = skip_thing(
                    (*ptr_to_globals).dot,
                    1i32,
                    FORWARD as libc::c_int,
                    S_END_PUNCT as libc::c_int,
                  )
                }
                if (*ptr_to_globals).dot < (*ptr_to_globals).end.offset(-1) {
                  (*ptr_to_globals).dot = (*ptr_to_globals).dot.offset(1)
                }
                if ({
                  let mut bb__isspace: libc::c_uchar =
                    (*(*ptr_to_globals).dot as libc::c_int - 9i32) as libc::c_uchar;
                  (bb__isspace as libc::c_int == ' ' as i32 - 9i32
                    || bb__isspace as libc::c_int <= 13i32 - 9i32) as libc::c_int
                }) != 0
                {
                  (*ptr_to_globals).dot = skip_thing(
                    (*ptr_to_globals).dot,
                    2i32,
                    FORWARD as libc::c_int,
                    S_OVER_WS as libc::c_int,
                  )
                }
                (*ptr_to_globals).cmdcnt -= 1;
                if !((*ptr_to_globals).cmdcnt > 0) {
                  break;
                }
              }
              current_block = 15129665204879337069;
            }
            4386451087681909888 => {
              (*ptr_to_globals).dot =
                move_to_col((*ptr_to_globals).dot, (*ptr_to_globals).cmdcnt - 1i32);
              current_block = 15129665204879337069;
            }
            1296397779060594135 => {
              dot_begin();
              current_block = 15129665204879337069;
            }
            _ => {}
          }
          match current_block {
            15129665204879337069 => {}
            8629930936610358348 => {}
            _ => {
              match current_block {
                17251831742223396249 => {
                  dir = 0;
                  if c == 'X' as i32 {
                    dir = -1i32
                  }
                  loop {
                    if *(*ptr_to_globals).dot.offset(dir as isize) as libc::c_int != '\n' as i32 {
                      if c == 'X' as i32 {
                        (*ptr_to_globals).dot = (*ptr_to_globals).dot.offset(-1)
                      }
                      (*ptr_to_globals).dot = yank_delete(
                        (*ptr_to_globals).dot,
                        (*ptr_to_globals).dot,
                        0,
                        YANKDEL as libc::c_int,
                        1i32,
                      )
                    }
                    (*ptr_to_globals).cmdcnt -= 1;
                    if !((*ptr_to_globals).cmdcnt > 0) {
                      break;
                    }
                  }
                  end_cmd_q();
                  if c == 's' as i32 {
                    current_block = 8629930936610358348;
                  } else {
                    current_block = 15129665204879337069;
                  }
                }
                2087484904894455135 => {
                  dot_end();
                  (*ptr_to_globals).dot =
                    char_insert((*ptr_to_globals).dot, '\n' as i32 as libc::c_char, 1i32);
                  current_block = 8629930936610358348;
                }
                11945623545738147997 => {
                  (*ptr_to_globals).dot = (*ptr_to_globals).end.offset(-1);
                  if (*ptr_to_globals).cmdcnt > 0 {
                    (*ptr_to_globals).dot = find_line((*ptr_to_globals).cmdcnt)
                  }
                  dot_skip_over_ws();
                  current_block = 15129665204879337069;
                }
                5847749760081351726 => {
                  dir = FORWARD as libc::c_int;
                  if c == 'B' as i32 {
                    dir = BACK as libc::c_int
                  }
                  loop {
                    if c == 'W' as i32
                      || ({
                        let mut bb__isspace: libc::c_uchar =
                          (*(*ptr_to_globals).dot.offset(dir as isize) as libc::c_int - 9i32)
                            as libc::c_uchar;
                        (bb__isspace as libc::c_int == ' ' as i32 - 9i32
                          || bb__isspace as libc::c_int <= 13i32 - 9i32)
                          as libc::c_int
                      }) != 0
                    {
                      (*ptr_to_globals).dot =
                        skip_thing((*ptr_to_globals).dot, 1i32, dir, S_TO_WS as libc::c_int);
                      (*ptr_to_globals).dot =
                        skip_thing((*ptr_to_globals).dot, 2i32, dir, S_OVER_WS as libc::c_int)
                    }
                    if c != 'W' as i32 {
                      (*ptr_to_globals).dot =
                        skip_thing((*ptr_to_globals).dot, 1i32, dir, S_BEFORE_WS as libc::c_int)
                    }
                    (*ptr_to_globals).cmdcnt -= 1;
                    if !((*ptr_to_globals).cmdcnt > 0) {
                      break;
                    }
                  }
                  current_block = 15129665204879337069;
                }
                17440971994642376514 => {
                  current_block = 15129665204879337069;
                }
                7534742345255184552 => {
                  current_block = 17247297260531395789;
                }
                8800996768013373992 => {
                  loop {
                    dot_next();
                    (*ptr_to_globals).dot = move_to_col(
                      (*ptr_to_globals).dot,
                      (*ptr_to_globals).ccol + (*ptr_to_globals).offset,
                    );
                    (*ptr_to_globals).cmdcnt -= 1;
                    if !((*ptr_to_globals).cmdcnt > 0) {
                      break;
                    }
                  }
                  current_block = 15129665204879337069;
                }
                13993698454868426881 => {
                  loop {
                    dot_right();
                    (*ptr_to_globals).cmdcnt -= 1;
                    if !((*ptr_to_globals).cmdcnt > 0) {
                      break;
                    }
                  }
                  current_block = 15129665204879337069;
                }
                7856905509180742666 => {
                  while !((*ptr_to_globals).last_forward_char == 0) {
                    q = (*ptr_to_globals).dot.offset(1);
                    while q < (*ptr_to_globals).end.offset(-1)
                      && *q as libc::c_int != '\n' as i32
                      && *q as libc::c_int != (*ptr_to_globals).last_forward_char
                    {
                      q = q.offset(1)
                    }
                    if *q as libc::c_int == (*ptr_to_globals).last_forward_char {
                      (*ptr_to_globals).dot = q
                    }
                    (*ptr_to_globals).cmdcnt -= 1;
                    if !((*ptr_to_globals).cmdcnt > 0) {
                      break;
                    }
                  }
                  current_block = 15129665204879337069;
                }
                17498168302144015873 => {
                  current_block = 8681395796513813967;
                }
                1752638907092016026 => {
                  if *(*ptr_to_globals).dot as libc::c_int != '\n' as i32 {
                    (*ptr_to_globals).dot = (*ptr_to_globals).dot.offset(1)
                  }
                  current_block = 8629930936610358348;
                }
                3268579060917229304 => {
                  current_block = 8629930936610358348;
                }
                1895262434596074581 => {
                  current_block = 8908416993177701018;
                }
                _ => {}
              }
              match current_block {
                8629930936610358348 => {}
                15129665204879337069 => {}
                _ => {
                  match current_block {
                    17247297260531395789 => {
                      loop {
                        dot_left();
                        (*ptr_to_globals).cmdcnt -= 1;
                        if !((*ptr_to_globals).cmdcnt > 0) {
                          break;
                        }
                      }
                      current_block = 15129665204879337069;
                    }
                    8681395796513813967 => {
                      current_block = 5591548203144509315;
                    }
                    8908416993177701018 => {
                      current_block = 16124761010012532485;
                    }
                    _ => {}
                  }
                  match current_block {
                    15129665204879337069 => {}
                    _ => {
                      match current_block {
                        16124761010012532485 => {
                          let mut yf: libc::c_int = 0;
                          let mut ml: libc::c_int = 0;
                          let mut whole: libc::c_int = 0;
                          yf = YANKDEL as libc::c_int;
                          if c == 'y' as i32 || c == 'Y' as i32 {
                            yf = YANKONLY as libc::c_int
                          }
                          c1 = 'y' as i32;
                          if c != 'Y' as i32 {
                            c1 = get_one_char()
                          }
                          ml = find_range(&mut p, &mut q, c1 as libc::c_char);
                          place_cursor(0i32, 0);
                          if c1 == 27i32 {
                            c1 = 27i32;
                            c = c1
                          } else if !strchr(b"wW\x00" as *const u8 as *const libc::c_char, c1)
                            .is_null()
                          {
                            ml = 0;
                            if c == 'c' as i32 {
                              while ({
                                let mut bb__isspace: libc::c_uchar =
                                  (*q as libc::c_int - 9i32) as libc::c_uchar;
                                (bb__isspace as libc::c_int == ' ' as i32 - 9i32
                                  || bb__isspace as libc::c_int <= 13i32 - 9i32)
                                  as libc::c_int
                              }) != 0
                                && q > p
                              {
                                q = q.offset(-1)
                              }
                            }
                            (*ptr_to_globals).dot = yank_delete(p, q, ml, yf, 1i32)
                          } else if !strchr(
                            b"^0bBeEft%$ lh\x08\x7f\x00" as *const u8 as *const libc::c_char,
                            c1,
                          )
                          .is_null()
                          {
                            (*ptr_to_globals).dot = yank_delete(p, q, ml, yf, 1i32)
                          } else if !strchr(
                            b"cdykjGHL+-{}\r\n\x00" as *const u8 as *const libc::c_char,
                            c1,
                          )
                          .is_null()
                          {
                            (*ptr_to_globals).dot = yank_delete(p, q, ml, yf, 1i32);
                            whole = 1i32
                          } else {
                            c1 = 27i32;
                            c = c1;
                            ml = 0;
                            indicate_error();
                          }
                          if ml != 0 && whole != 0 {
                            if c == 'c' as i32 {
                              (*ptr_to_globals).dot = char_insert(
                                (*ptr_to_globals).dot,
                                '\n' as i32 as libc::c_char,
                                2i32,
                              );
                              if whole != 0
                                && (*ptr_to_globals).dot != (*ptr_to_globals).end.offset(-1)
                              {
                                dot_prev();
                              }
                            } else if c == 'd' as i32 {
                              dot_begin();
                              dot_skip_over_ws();
                            }
                          }
                          if c1 != 27i32 {
                            if c == 'c' as i32 {
                              strcpy(
                                buf.as_mut_ptr(),
                                b"Change\x00" as *const u8 as *const libc::c_char,
                              );
                              current_block = 8629930936610358348;
                            } else {
                              if c == 'd' as i32 {
                                strcpy(
                                  buf.as_mut_ptr(),
                                  b"Delete\x00" as *const u8 as *const libc::c_char,
                                );
                              }
                              if c == 'y' as i32 || c == 'Y' as i32 {
                                strcpy(
                                  buf.as_mut_ptr(),
                                  b"Yank\x00" as *const u8 as *const libc::c_char,
                                );
                              }
                              p = (*ptr_to_globals).reg[(*ptr_to_globals).YDreg as usize];
                              q = p.offset(strlen(p) as isize);
                              cnt = 0;
                              while p <= q {
                                if *p as libc::c_int == '\n' as i32 {
                                  cnt += 1
                                }
                                p = p.offset(1)
                              }
                              status_line(
                                b"%s %u lines (%u chars) using [%c]\x00" as *const u8
                                  as *const libc::c_char,
                                buf.as_mut_ptr(),
                                cnt,
                                strlen((*ptr_to_globals).reg[(*ptr_to_globals).YDreg as usize])
                                  as libc::c_uint,
                                what_reg() as libc::c_int,
                              );
                              end_cmd_q();
                              current_block = 15129665204879337069;
                            }
                          } else {
                            current_block = 15129665204879337069;
                          }
                        }
                        5591548203144509315 => {
                          current_block = 2636677179867529885;
                        }
                        _ => {}
                      }
                      match current_block {
                        15129665204879337069 => {}
                        8629930936610358348 => {}
                        _ => {
                          match current_block {
                            2636677179867529885 => {
                              current_block = 12309206730560524281;
                            }
                            _ => {}
                          }
                          match current_block {
                            12309206730560524281 => {
                              current_block = 3325768110057758661;
                            }
                            _ => {}
                          }
                          match current_block {
                            3325768110057758661 => {
                              current_block = 14815832896553429982;
                            }
                            _ => {}
                          }
                          match current_block {
                            14815832896553429982 => {
                              current_block = 10731695520297161438;
                            }
                            _ => {}
                          }
                          match current_block {
                            10731695520297161438 => {
                              if c == '0' as i32 && (*ptr_to_globals).cmdcnt < 1i32 {
                                dot_begin();
                              } else {
                                (*ptr_to_globals).cmdcnt =
                                  (*ptr_to_globals).cmdcnt * 10i32 + (c - '0' as i32)
                              }
                              current_block = 15129665204879337069;
                            }
                            _ => {}
                          }
                          match current_block {
                            15129665204879337069 => {}
                            _ => {
                              loop {
                                match current_block {
                                  16813369756331276724 => {
                                    msg = std::ptr::null();
                                    current_block = 7392824444931029276;
                                  }
                                  7392824444931029276 => {
                                    dir = FORWARD as libc::c_int;
                                    p = (*ptr_to_globals).dot.offset(1);
                                    if *(*ptr_to_globals).last_search_pattern.offset(0)
                                      as libc::c_int
                                      == '?' as i32
                                    {
                                      dir = BACK as libc::c_int;
                                      p = (*ptr_to_globals).dot.offset(-1)
                                    }
                                    current_block = 4166979493554389389;
                                  }
                                  _ => {
                                    q = char_search(
                                      p,
                                      (*ptr_to_globals).last_search_pattern.offset(1),
                                      dir << 1i32 | FULL as libc::c_int,
                                    );
                                    if !q.is_null() {
                                      (*ptr_to_globals).dot = q;
                                      msg = std::ptr::null()
                                    } else {
                                      p = (*ptr_to_globals).text;
                                      if dir == BACK as libc::c_int {
                                        p = (*ptr_to_globals).end.offset(-1)
                                      }
                                      q = char_search(
                                        p,
                                        (*ptr_to_globals).last_search_pattern.offset(1),
                                        dir << 1i32 | FULL as libc::c_int,
                                      );
                                      if !q.is_null() {
                                        (*ptr_to_globals).dot = q;
                                        msg = b"search hit BOTTOM, continuing at TOP\x00"
                                          as *const u8
                                          as *const libc::c_char;
                                        if dir == BACK as libc::c_int {
                                          msg = b"search hit TOP, continuing at BOTTOM\x00"
                                            as *const u8
                                            as *const libc::c_char
                                        }
                                      } else {
                                        msg = b"Pattern not found\x00" as *const u8
                                          as *const libc::c_char
                                      }
                                    }
                                    if !msg.is_null() {
                                      status_line_bold(
                                        b"%s\x00" as *const u8 as *const libc::c_char,
                                        msg,
                                      );
                                    }
                                    (*ptr_to_globals).cmdcnt -= 1;
                                    if (*ptr_to_globals).cmdcnt > 0 {
                                      current_block = 16813369756331276724;
                                    } else {
                                      break;
                                    }
                                  }
                                }
                              }
                              current_block = 15129665204879337069;
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
        54 => {
          current_block = 3325768110057758661;
          match current_block {
            16992905640583886232 => {
              loop {
                if (*(*ptr_to_globals).dot as libc::c_int - 'a' as i32) as libc::c_uchar
                  as libc::c_int
                  <= 'z' as i32 - 'a' as i32
                {
                  undo_push(
                    (*ptr_to_globals).dot,
                    1i32 as libc::c_uint,
                    1i32 as libc::c_uchar,
                  );
                  *(*ptr_to_globals).dot =
                    bb_ascii_toupper(*(*ptr_to_globals).dot as libc::c_uchar) as libc::c_char;
                  undo_push(
                    (*ptr_to_globals).dot,
                    1i32 as libc::c_uint,
                    2i32 as libc::c_uchar,
                  );
                } else if (*(*ptr_to_globals).dot as libc::c_int - 'A' as i32) as libc::c_uchar
                  as libc::c_int
                  <= 'Z' as i32 - 'A' as i32
                {
                  undo_push(
                    (*ptr_to_globals).dot,
                    1i32 as libc::c_uint,
                    1i32 as libc::c_uchar,
                  );
                  *(*ptr_to_globals).dot =
                    bb_ascii_tolower(*(*ptr_to_globals).dot as libc::c_uchar) as libc::c_char;
                  undo_push(
                    (*ptr_to_globals).dot,
                    1i32 as libc::c_uint,
                    2i32 as libc::c_uchar,
                  );
                }
                dot_right();
                (*ptr_to_globals).cmdcnt -= 1;
                if !((*ptr_to_globals).cmdcnt > 0) {
                  break;
                }
              }
              end_cmd_q();
              current_block = 15129665204879337069;
            }
            8729655159604064397 => {
              c1 = get_one_char();
              cnt = 0;
              if c1 == '.' as i32 {
                cnt = (*ptr_to_globals)
                  .rows
                  .wrapping_sub(2i32 as libc::c_uint)
                  .wrapping_div(2i32 as libc::c_uint) as libc::c_int
              }
              if c1 == '-' as i32 {
                cnt = (*ptr_to_globals).rows.wrapping_sub(2i32 as libc::c_uint) as libc::c_int
              }
              (*ptr_to_globals).screenbegin = begin_line((*ptr_to_globals).dot);
              dot_scroll(cnt, -1i32);
              current_block = 15129665204879337069;
            }
            15899500648299942075 => {
              (*ptr_to_globals).last_forward_char = get_one_char();
              do_cmd(';' as i32);
              if *(*ptr_to_globals).dot as libc::c_int == (*ptr_to_globals).last_forward_char {
                dot_left();
              }
              (*ptr_to_globals).last_forward_char = 0;
              current_block = 15129665204879337069;
            }
            9051390181078481641 => {
              c1 = get_one_char();
              if *(*ptr_to_globals).dot as libc::c_int != '\n' as i32 {
                (*ptr_to_globals).dot =
                  text_hole_delete((*ptr_to_globals).dot, (*ptr_to_globals).dot, 1i32);
                (*ptr_to_globals).dot =
                  char_insert((*ptr_to_globals).dot, c1 as libc::c_char, 2i32);
                dot_left();
              }
              end_cmd_q();
              current_block = 15129665204879337069;
            }
            877115918601926659 => {
              dir = FORWARD as libc::c_int;
              if c == 'b' as i32 {
                dir = BACK as libc::c_int
              }
              while !((*ptr_to_globals).dot.offset(dir as isize) < (*ptr_to_globals).text
                || (*ptr_to_globals).dot.offset(dir as isize) > (*ptr_to_globals).end.offset(-1))
              {
                (*ptr_to_globals).dot = (*ptr_to_globals).dot.offset(dir as isize);
                if ({
                  let mut bb__isspace: libc::c_uchar =
                    (*(*ptr_to_globals).dot as libc::c_int - 9i32) as libc::c_uchar;
                  (bb__isspace as libc::c_int == ' ' as i32 - 9i32
                    || bb__isspace as libc::c_int <= 13i32 - 9i32) as libc::c_int
                }) != 0
                {
                  (*ptr_to_globals).dot = skip_thing(
                    (*ptr_to_globals).dot,
                    if c == 'e' as i32 { 2i32 } else { 1i32 },
                    dir,
                    S_OVER_WS as libc::c_int,
                  )
                }
                if bb_ascii_isalnum(*(*ptr_to_globals).dot as libc::c_uchar) != 0
                  || *(*ptr_to_globals).dot as libc::c_int == '_' as i32
                {
                  (*ptr_to_globals).dot =
                    skip_thing((*ptr_to_globals).dot, 1i32, dir, S_END_ALNUM as libc::c_int)
                } else if *strchrnul(
                  b"!\"#$%&\'()*+,-./:;<=>?@[\\]^_`{|}~\x00" as *const u8 as *const libc::c_char,
                  *(*ptr_to_globals).dot as libc::c_int,
                )
                .offset(0)
                  != 0
                {
                  (*ptr_to_globals).dot =
                    skip_thing((*ptr_to_globals).dot, 1i32, dir, S_END_PUNCT as libc::c_int)
                }
                (*ptr_to_globals).cmdcnt -= 1;
                if !((*ptr_to_globals).cmdcnt > 0) {
                  break;
                }
              }
              current_block = 15129665204879337069;
            }
            1085022737867179637 => {
              dot_begin();
              dot_skip_over_ws();
              current_block = 15129665204879337069;
            }
            3113147720494587438 => {
              c1 = get_one_char();
              if c1 != 'Z' as i32 {
                indicate_error();
              } else if (*ptr_to_globals).modified_count != 0 {
                if 1i32 != 0 && (*ptr_to_globals).readonly_mode as libc::c_int != 0 {
                  status_line_bold(
                    b"\'%s\' is read only\x00" as *const u8 as *const libc::c_char,
                    (*ptr_to_globals).current_filename,
                  );
                } else {
                  cnt = file_write(
                    (*ptr_to_globals).current_filename,
                    (*ptr_to_globals).text,
                    (*ptr_to_globals).end.offset(-1),
                  );
                  if cnt < 0 {
                    if cnt == -1i32 {
                      status_line_bold(b"Write error: %m\x00" as *const u8 as *const libc::c_char);
                    }
                  } else if cnt as libc::c_long
                    == (*ptr_to_globals)
                      .end
                      .offset(-1)
                      .wrapping_offset_from((*ptr_to_globals).text)
                      as libc::c_long
                      + 1
                  {
                    (*ptr_to_globals).editing = 0 as smallint
                  }
                }
              } else {
                (*ptr_to_globals).editing = 0 as smallint
              }
              current_block = 15129665204879337069;
            }
            12960118908218882441 => {
              p = begin_line((*ptr_to_globals).dot);
              if *p.offset(-1i32 as isize) as libc::c_int == '\n' as i32 {
                dot_prev();
                current_block = 2087484904894455135;
              } else {
                dot_begin();
                (*ptr_to_globals).dot =
                  char_insert((*ptr_to_globals).dot, '\n' as i32 as libc::c_char, 1i32);
                dot_prev();
                current_block = 8629930936610358348;
              }
            }
            8720450212473544924 => {
              (*ptr_to_globals).dot = (*ptr_to_globals).screenbegin;
              cnt = 0;
              while (cnt as libc::c_uint)
                < (*ptr_to_globals)
                  .rows
                  .wrapping_sub(1i32 as libc::c_uint)
                  .wrapping_div(2i32 as libc::c_uint)
              {
                (*ptr_to_globals).dot = next_line((*ptr_to_globals).dot);
                cnt += 1
              }
              current_block = 15129665204879337069;
            }
            13015277209715431090 => {
              (*ptr_to_globals).dot = end_screen();
              if (*ptr_to_globals).cmdcnt as libc::c_uint
                > (*ptr_to_globals).rows.wrapping_sub(1i32 as libc::c_uint)
              {
                (*ptr_to_globals).cmdcnt =
                  (*ptr_to_globals).rows.wrapping_sub(1i32 as libc::c_uint) as libc::c_int
              }
              (*ptr_to_globals).cmdcnt -= 1;
              if (*ptr_to_globals).cmdcnt > 0 {
                do_cmd('-' as i32);
              }
              dot_begin();
              dot_skip_over_ws();
              current_block = 15129665204879337069;
            }
            9800435767766781385 => {
              loop {
                dot_end();
                if (*ptr_to_globals).dot < (*ptr_to_globals).end.offset(-1) {
                  undo_push(
                    (*ptr_to_globals).dot,
                    1i32 as libc::c_uint,
                    1i32 as libc::c_uchar,
                  );
                  let fresh15 = (*ptr_to_globals).dot;
                  (*ptr_to_globals).dot = (*ptr_to_globals).dot.offset(1);
                  *fresh15 = ' ' as i32 as libc::c_char;
                  undo_push(
                    (*ptr_to_globals).dot.offset(-1),
                    1i32 as libc::c_uint,
                    2i32 as libc::c_uchar,
                  );
                  while ({
                    let mut bb__isblank: libc::c_uchar = *(*ptr_to_globals).dot as libc::c_uchar;
                    (bb__isblank as libc::c_int == ' ' as i32
                      || bb__isblank as libc::c_int == '\t' as i32)
                      as libc::c_int
                  }) != 0
                  {
                    text_hole_delete((*ptr_to_globals).dot, (*ptr_to_globals).dot, 2i32);
                  }
                }
                (*ptr_to_globals).cmdcnt -= 1;
                if !((*ptr_to_globals).cmdcnt > 0) {
                  break;
                }
              }
              end_cmd_q();
              current_block = 15129665204879337069;
            }
            3432363526595694666 => {
              dot_begin();
              dot_skip_over_ws();
              current_block = 3268579060917229304;
            }
            3494829253343353619 => {
              (*ptr_to_globals).dot = (*ptr_to_globals).screenbegin;
              if (*ptr_to_globals).cmdcnt as libc::c_uint
                > (*ptr_to_globals).rows.wrapping_sub(1i32 as libc::c_uint)
              {
                (*ptr_to_globals).cmdcnt =
                  (*ptr_to_globals).rows.wrapping_sub(1i32 as libc::c_uint) as libc::c_int
              }
              (*ptr_to_globals).cmdcnt -= 1;
              if (*ptr_to_globals).cmdcnt > 0 {
                do_cmd('+' as i32);
              }
              dot_skip_over_ws();
              current_block = 15129665204879337069;
            }
            17973101765331640574 => {
              c1 = get_one_char();
              if c1 != 'g' as i32 {
                buf[0] = 'g' as i32 as libc::c_char;
                buf[1] = if c1 >= 0 { c1 } else { '*' as i32 } as libc::c_char;
                buf[2] = '\u{0}' as i32 as libc::c_char;
                not_implemented(buf.as_mut_ptr());
                current_block = 15129665204879337069;
              } else {
                if (*ptr_to_globals).cmdcnt == 0 {
                  (*ptr_to_globals).cmdcnt = 1i32
                }
                current_block = 11945623545738147997;
              }
            }
            16546625800574160972 => {
              save_dot = (*ptr_to_globals).dot;
              (*ptr_to_globals).dot = dollar_line((*ptr_to_globals).dot);
              (*ptr_to_globals).dot = yank_delete(
                save_dot,
                (*ptr_to_globals).dot,
                0,
                YANKDEL as libc::c_int,
                1i32,
              );
              if c == 'C' as i32 {
                current_block = 8629930936610358348;
              } else {
                if c == 'D' as i32 {
                  end_cmd_q();
                }
                current_block = 15129665204879337069;
              }
            }
            11937696639986586685 => {
              cnt = count_lines((*ptr_to_globals).text, (*ptr_to_globals).dot);
              c1 = get_one_char();
              find_range(&mut p, &mut q, c1 as libc::c_char);
              yank_delete(p, q, 1i32, YANKONLY as libc::c_int, 0);
              p = begin_line(p);
              q = end_line(q);
              i = count_lines(p, q);
              while i > 0 {
                if c == '<' as i32 {
                  if *p as libc::c_int == '\t' as i32 {
                    text_hole_delete(p, p, 0);
                  } else if *p as libc::c_int == ' ' as i32 {
                    j = 0;
                    while *p as libc::c_int == ' ' as i32 && j < (*ptr_to_globals).tabstop {
                      text_hole_delete(p, p, 0);
                      j += 1
                    }
                  }
                } else if c == '>' as i32 {
                  char_insert(p, '\t' as i32 as libc::c_char, 1i32);
                }
                i -= 1;
                p = next_line(p)
              }
              (*ptr_to_globals).dot = find_line(cnt);
              dot_skip_over_ws();
              end_cmd_q();
              current_block = 15129665204879337069;
            }
            17725350714912028156 => {
              p = get_input_line(b":\x00" as *const u8 as *const libc::c_char);
              colon(p);
              current_block = 15129665204879337069;
            }
            14526470074083880812 => {
              q = char_search(
                (*ptr_to_globals).dot,
                b"\n\n\x00" as *const u8 as *const libc::c_char,
                (FORWARD as libc::c_int) << 1i32 | FULL as libc::c_int,
              );
              if !q.is_null() {
                (*ptr_to_globals).dot = next_line(q)
              }
              current_block = 15129665204879337069;
            }
            8893187391306414141 => {
              q = char_search(
                (*ptr_to_globals).dot,
                b"\n\n\x00" as *const u8 as *const libc::c_char,
                ((BACK as libc::c_int as libc::c_uint) << 1i32
                  | FULL as libc::c_int as libc::c_uint) as libc::c_int,
              );
              if !q.is_null() {
                (*ptr_to_globals).dot = next_line(q)
              }
              current_block = 15129665204879337069;
            }
            7021673758293221412 => {
              dir = BACK as libc::c_int;
              p = (*ptr_to_globals).dot.offset(-1);
              if *(*ptr_to_globals).last_search_pattern.offset(0) as libc::c_int == '?' as i32 {
                dir = FORWARD as libc::c_int;
                p = (*ptr_to_globals).dot.offset(1)
              }
              current_block = 4166979493554389389;
            }
            18374191879090272823 => {
              buf[0] = c as libc::c_char;
              buf[1] = '\u{0}' as i32 as libc::c_char;
              q = get_input_line(buf.as_mut_ptr());
              if *q.offset(0) as libc::c_int != 0 && *q.offset(1) == 0 {
                if *(*ptr_to_globals).last_search_pattern.offset(0) != 0 {
                  *(*ptr_to_globals).last_search_pattern.offset(0) = c as libc::c_char
                }
                current_block = 7392824444931029276;
              } else if *q.offset(0) != 0 {
                free((*ptr_to_globals).last_search_pattern as *mut libc::c_void);
                (*ptr_to_globals).last_search_pattern = crate::libbb::xfuncs_printf::xstrdup(q);
                current_block = 7392824444931029276;
              } else {
                current_block = 15129665204879337069;
              }
            }
            16407828456666301883 => {
              if (*ptr_to_globals).last_forward_char == 0 {
                current_block = 15129665204879337069;
              } else {
                loop {
                  q = (*ptr_to_globals).dot.offset(-1);
                  while q >= (*ptr_to_globals).text
                    && *q as libc::c_int != '\n' as i32
                    && *q as libc::c_int != (*ptr_to_globals).last_forward_char
                  {
                    q = q.offset(-1)
                  }
                  if q >= (*ptr_to_globals).text
                    && *q as libc::c_int == (*ptr_to_globals).last_forward_char
                  {
                    (*ptr_to_globals).dot = q
                  }
                  (*ptr_to_globals).cmdcnt -= 1;
                  if !((*ptr_to_globals).cmdcnt > 0) {
                    break;
                  }
                }
                current_block = 15129665204879337069;
              }
            }
            9018432604062702004 => {
              q = (*ptr_to_globals).dot;
              while q < (*ptr_to_globals).end && *q as libc::c_int != '\n' as i32 {
                if !strchr(
                  b"()[]{}\x00" as *const u8 as *const libc::c_char,
                  *q as libc::c_int,
                )
                .is_null()
                {
                  p = find_pair(q, *q);
                  if p.is_null() {
                    indicate_error();
                  } else {
                    (*ptr_to_globals).dot = p
                  }
                  break;
                } else {
                  q = q.offset(1)
                }
              }
              if *q as libc::c_int == '\n' as i32 {
                indicate_error();
              }
              current_block = 15129665204879337069;
            }
            10247103787464459848 => {
              p = (*ptr_to_globals).reg[(*ptr_to_globals).YDreg as usize];
              if p.is_null() {
                status_line_bold(
                  b"Nothing in register %c\x00" as *const u8 as *const libc::c_char,
                  what_reg() as libc::c_int,
                );
              } else {
                if !strchr(p, '\n' as i32).is_null() {
                  if c == 'P' as i32 {
                    dot_begin();
                  }
                  if c == 'p' as i32 {
                    if end_line((*ptr_to_globals).dot) == (*ptr_to_globals).end.offset(-1) {
                      (*ptr_to_globals).dot = (*ptr_to_globals).end
                    } else {
                      dot_next();
                    }
                  }
                } else if c == 'p' as i32 {
                  dot_right();
                }
                string_insert((*ptr_to_globals).dot, p, 1i32);
                end_cmd_q();
              }
              current_block = 15129665204879337069;
            }
            15260732871948875843 => {
              c1 = (get_one_char() | 0x20i32) - 'a' as i32;
              if c1 as libc::c_uint <= 25i32 as libc::c_uint {
                (*ptr_to_globals).mark[c1 as usize] = (*ptr_to_globals).dot
              } else {
                indicate_error();
              }
              current_block = 15129665204879337069;
            }
            12738322036487086035 => {
              c1 = get_one_char() | 0x20i32;
              if (c1 - 'a' as i32) as libc::c_uint <= 25i32 as libc::c_uint {
                c1 = c1 - 'a' as i32;
                q = (*ptr_to_globals).mark[c1 as usize];
                if (*ptr_to_globals).text <= q && q < (*ptr_to_globals).end {
                  (*ptr_to_globals).dot = q;
                  dot_begin();
                  dot_skip_over_ws();
                }
              } else if c1 == '\'' as i32 {
                (*ptr_to_globals).dot = swap_context((*ptr_to_globals).dot);
                dot_begin();
                dot_skip_over_ws();
              } else {
                indicate_error();
              }
              current_block = 15129665204879337069;
            }
            13255096073384561358 => {
              c1 = (get_one_char() | 0x20i32) - 'a' as i32;
              if c1 as libc::c_uint <= 25i32 as libc::c_uint {
                (*ptr_to_globals).YDreg = c1 as smalluint
              } else {
                indicate_error();
              }
              current_block = 15129665204879337069;
            }
            10258711639984089377 => {
              if (*ptr_to_globals).cmd_mode as libc::c_int == 0 {
                indicate_error();
              }
              (*ptr_to_globals).cmd_mode = 0 as smallint;
              undo_queue_commit();
              end_cmd_q();
              (*ptr_to_globals).last_status_cksum = 0;
              current_block = 15129665204879337069;
            }
            11439127087547047736 => {
              buf[0] = c as libc::c_char;
              buf[1] = '\u{0}' as i32 as libc::c_char;
              not_implemented(buf.as_mut_ptr());
              end_cmd_q();
              current_block = 17440971994642376514;
            }
            7961798899781870241 => {
              dot_scroll(
                (*ptr_to_globals).rows.wrapping_sub(2i32 as libc::c_uint) as libc::c_int,
                -1i32,
              );
              current_block = 15129665204879337069;
            }
            9426343755402444879 => {
              dot_scroll(
                (*ptr_to_globals)
                  .rows
                  .wrapping_sub(2i32 as libc::c_uint)
                  .wrapping_div(2i32 as libc::c_uint) as libc::c_int,
                1i32,
              );
              current_block = 15129665204879337069;
            }
            13352459794680105913 => {
              dot_scroll(1i32, 1i32);
              current_block = 15129665204879337069;
            }
            14142272253464333006 => {
              dot_scroll(
                (*ptr_to_globals).rows.wrapping_sub(2i32 as libc::c_uint) as libc::c_int,
                1i32,
              );
              current_block = 15129665204879337069;
            }
            10758177197742640066 => {
              (*ptr_to_globals).last_status_cksum = 0;
              current_block = 15129665204879337069;
            }
            6152256259730122749 => {
              current_block = 7534742345255184552;
            }
            12883932598258173301 => {
              current_block = 8800996768013373992;
            }
            11242998110520238401 => {
              redraw(1i32);
              current_block = 15129665204879337069;
            }
            13619733043935729992 => {
              loop {
                dot_next();
                dot_skip_over_ws();
                (*ptr_to_globals).cmdcnt -= 1;
                if !((*ptr_to_globals).cmdcnt > 0) {
                  break;
                }
              }
              current_block = 15129665204879337069;
            }
            9339065157412720613 => {
              dot_scroll(
                (*ptr_to_globals)
                  .rows
                  .wrapping_sub(2i32 as libc::c_uint)
                  .wrapping_div(2i32 as libc::c_uint) as libc::c_int,
                -1i32,
              );
              current_block = 15129665204879337069;
            }
            11447082683497798022 => {
              dot_scroll(1i32, -1i32);
              current_block = 15129665204879337069;
            }
            5182000506326660482 => {
              current_block = 13993698454868426881;
            }
            1105010766850597332 => {
              if !(*ptr_to_globals).reg[27].is_null() {
                p = begin_line((*ptr_to_globals).dot);
                q = end_line((*ptr_to_globals).dot);
                p = text_hole_delete(p, q, 1i32);
                p = p.offset(string_insert(p, (*ptr_to_globals).reg[27], 2i32) as isize);
                (*ptr_to_globals).dot = p;
                dot_skip_over_ws();
              }
              current_block = 15129665204879337069;
            }
            8616046655533110204 => {
              undo_pop();
              current_block = 15129665204879337069;
            }
            5127767458142431603 => {
              loop {
                (*ptr_to_globals).dot = end_line((*ptr_to_globals).dot);
                (*ptr_to_globals).cmdcnt -= 1;
                if (*ptr_to_globals).cmdcnt <= 0 {
                  break;
                }
                dot_next();
              }
              current_block = 15129665204879337069;
            }
            222014967776118151 => {
              (*ptr_to_globals).last_forward_char = get_one_char();
              current_block = 7856905509180742666;
            }
            11209792479411604110 => {
              loop {
                dot_prev();
                dot_skip_over_ws();
                (*ptr_to_globals).cmdcnt -= 1;
                if !((*ptr_to_globals).cmdcnt > 0) {
                  break;
                }
              }
              current_block = 15129665204879337069;
            }
            3364823792826654116 => {
              if (*ptr_to_globals).lmc_len != 0 {
                (*ptr_to_globals).ioq_start = crate::libbb::xfuncs_printf::xstrndup(
                  (*ptr_to_globals).last_modifying_cmd.as_mut_ptr(),
                  (*ptr_to_globals).lmc_len,
                );
                (*ptr_to_globals).ioq = (*ptr_to_globals).ioq_start
              }
              current_block = 15129665204879337069;
            }
            18096603330221575131 => {
              current_block = 17498168302144015873;
            }
            16891123271837848903 => {
              dot_end();
              current_block = 1752638907092016026;
            }
            8517235759107662071 => {
              current_block = 5847749760081351726;
            }
            12525254419223051704 => {
              if (*ptr_to_globals).dot < (*ptr_to_globals).end.offset(-1) {
                (*ptr_to_globals).dot = yank_delete(
                  (*ptr_to_globals).dot,
                  (*ptr_to_globals).dot,
                  1i32,
                  YANKDEL as libc::c_int,
                  1i32,
                )
              }
              current_block = 15129665204879337069;
            }
            15232911949322867522 => {
              current_block = 17251831742223396249;
            }
            10863374208794025069 => {
              current_block = 1895262434596074581;
            }
            451126677064669119 => {
              loop {
                dot_prev();
                (*ptr_to_globals).dot = move_to_col(
                  (*ptr_to_globals).dot,
                  (*ptr_to_globals).ccol + (*ptr_to_globals).offset,
                );
                (*ptr_to_globals).cmdcnt -= 1;
                if !((*ptr_to_globals).cmdcnt > 0) {
                  break;
                }
              }
              current_block = 15129665204879337069;
            }
            4611735929166613116 => {
              loop {
                if bb_ascii_isalnum(*(*ptr_to_globals).dot as libc::c_uchar) != 0
                  || *(*ptr_to_globals).dot as libc::c_int == '_' as i32
                {
                  (*ptr_to_globals).dot = skip_thing(
                    (*ptr_to_globals).dot,
                    1i32,
                    FORWARD as libc::c_int,
                    S_END_ALNUM as libc::c_int,
                  )
                } else if *strchrnul(
                  b"!\"#$%&\'()*+,-./:;<=>?@[\\]^_`{|}~\x00" as *const u8 as *const libc::c_char,
                  *(*ptr_to_globals).dot as libc::c_int,
                )
                .offset(0)
                  != 0
                {
                  (*ptr_to_globals).dot = skip_thing(
                    (*ptr_to_globals).dot,
                    1i32,
                    FORWARD as libc::c_int,
                    S_END_PUNCT as libc::c_int,
                  )
                }
                if (*ptr_to_globals).dot < (*ptr_to_globals).end.offset(-1) {
                  (*ptr_to_globals).dot = (*ptr_to_globals).dot.offset(1)
                }
                if ({
                  let mut bb__isspace: libc::c_uchar =
                    (*(*ptr_to_globals).dot as libc::c_int - 9i32) as libc::c_uchar;
                  (bb__isspace as libc::c_int == ' ' as i32 - 9i32
                    || bb__isspace as libc::c_int <= 13i32 - 9i32) as libc::c_int
                }) != 0
                {
                  (*ptr_to_globals).dot = skip_thing(
                    (*ptr_to_globals).dot,
                    2i32,
                    FORWARD as libc::c_int,
                    S_OVER_WS as libc::c_int,
                  )
                }
                (*ptr_to_globals).cmdcnt -= 1;
                if !((*ptr_to_globals).cmdcnt > 0) {
                  break;
                }
              }
              current_block = 15129665204879337069;
            }
            4386451087681909888 => {
              (*ptr_to_globals).dot =
                move_to_col((*ptr_to_globals).dot, (*ptr_to_globals).cmdcnt - 1i32);
              current_block = 15129665204879337069;
            }
            1296397779060594135 => {
              dot_begin();
              current_block = 15129665204879337069;
            }
            _ => {}
          }
          match current_block {
            15129665204879337069 => {}
            8629930936610358348 => {}
            _ => {
              match current_block {
                17251831742223396249 => {
                  dir = 0;
                  if c == 'X' as i32 {
                    dir = -1i32
                  }
                  loop {
                    if *(*ptr_to_globals).dot.offset(dir as isize) as libc::c_int != '\n' as i32 {
                      if c == 'X' as i32 {
                        (*ptr_to_globals).dot = (*ptr_to_globals).dot.offset(-1)
                      }
                      (*ptr_to_globals).dot = yank_delete(
                        (*ptr_to_globals).dot,
                        (*ptr_to_globals).dot,
                        0,
                        YANKDEL as libc::c_int,
                        1i32,
                      )
                    }
                    (*ptr_to_globals).cmdcnt -= 1;
                    if !((*ptr_to_globals).cmdcnt > 0) {
                      break;
                    }
                  }
                  end_cmd_q();
                  if c == 's' as i32 {
                    current_block = 8629930936610358348;
                  } else {
                    current_block = 15129665204879337069;
                  }
                }
                2087484904894455135 => {
                  dot_end();
                  (*ptr_to_globals).dot =
                    char_insert((*ptr_to_globals).dot, '\n' as i32 as libc::c_char, 1i32);
                  current_block = 8629930936610358348;
                }
                11945623545738147997 => {
                  (*ptr_to_globals).dot = (*ptr_to_globals).end.offset(-1);
                  if (*ptr_to_globals).cmdcnt > 0 {
                    (*ptr_to_globals).dot = find_line((*ptr_to_globals).cmdcnt)
                  }
                  dot_skip_over_ws();
                  current_block = 15129665204879337069;
                }
                5847749760081351726 => {
                  dir = FORWARD as libc::c_int;
                  if c == 'B' as i32 {
                    dir = BACK as libc::c_int
                  }
                  loop {
                    if c == 'W' as i32
                      || ({
                        let mut bb__isspace: libc::c_uchar =
                          (*(*ptr_to_globals).dot.offset(dir as isize) as libc::c_int - 9i32)
                            as libc::c_uchar;
                        (bb__isspace as libc::c_int == ' ' as i32 - 9i32
                          || bb__isspace as libc::c_int <= 13i32 - 9i32)
                          as libc::c_int
                      }) != 0
                    {
                      (*ptr_to_globals).dot =
                        skip_thing((*ptr_to_globals).dot, 1i32, dir, S_TO_WS as libc::c_int);
                      (*ptr_to_globals).dot =
                        skip_thing((*ptr_to_globals).dot, 2i32, dir, S_OVER_WS as libc::c_int)
                    }
                    if c != 'W' as i32 {
                      (*ptr_to_globals).dot =
                        skip_thing((*ptr_to_globals).dot, 1i32, dir, S_BEFORE_WS as libc::c_int)
                    }
                    (*ptr_to_globals).cmdcnt -= 1;
                    if !((*ptr_to_globals).cmdcnt > 0) {
                      break;
                    }
                  }
                  current_block = 15129665204879337069;
                }
                17440971994642376514 => {
                  current_block = 15129665204879337069;
                }
                7534742345255184552 => {
                  current_block = 17247297260531395789;
                }
                8800996768013373992 => {
                  loop {
                    dot_next();
                    (*ptr_to_globals).dot = move_to_col(
                      (*ptr_to_globals).dot,
                      (*ptr_to_globals).ccol + (*ptr_to_globals).offset,
                    );
                    (*ptr_to_globals).cmdcnt -= 1;
                    if !((*ptr_to_globals).cmdcnt > 0) {
                      break;
                    }
                  }
                  current_block = 15129665204879337069;
                }
                13993698454868426881 => {
                  loop {
                    dot_right();
                    (*ptr_to_globals).cmdcnt -= 1;
                    if !((*ptr_to_globals).cmdcnt > 0) {
                      break;
                    }
                  }
                  current_block = 15129665204879337069;
                }
                7856905509180742666 => {
                  while !((*ptr_to_globals).last_forward_char == 0) {
                    q = (*ptr_to_globals).dot.offset(1);
                    while q < (*ptr_to_globals).end.offset(-1)
                      && *q as libc::c_int != '\n' as i32
                      && *q as libc::c_int != (*ptr_to_globals).last_forward_char
                    {
                      q = q.offset(1)
                    }
                    if *q as libc::c_int == (*ptr_to_globals).last_forward_char {
                      (*ptr_to_globals).dot = q
                    }
                    (*ptr_to_globals).cmdcnt -= 1;
                    if !((*ptr_to_globals).cmdcnt > 0) {
                      break;
                    }
                  }
                  current_block = 15129665204879337069;
                }
                17498168302144015873 => {
                  current_block = 8681395796513813967;
                }
                1752638907092016026 => {
                  if *(*ptr_to_globals).dot as libc::c_int != '\n' as i32 {
                    (*ptr_to_globals).dot = (*ptr_to_globals).dot.offset(1)
                  }
                  current_block = 8629930936610358348;
                }
                3268579060917229304 => {
                  current_block = 8629930936610358348;
                }
                1895262434596074581 => {
                  current_block = 8908416993177701018;
                }
                _ => {}
              }
              match current_block {
                8629930936610358348 => {}
                15129665204879337069 => {}
                _ => {
                  match current_block {
                    17247297260531395789 => {
                      loop {
                        dot_left();
                        (*ptr_to_globals).cmdcnt -= 1;
                        if !((*ptr_to_globals).cmdcnt > 0) {
                          break;
                        }
                      }
                      current_block = 15129665204879337069;
                    }
                    8681395796513813967 => {
                      current_block = 5591548203144509315;
                    }
                    8908416993177701018 => {
                      current_block = 16124761010012532485;
                    }
                    _ => {}
                  }
                  match current_block {
                    15129665204879337069 => {}
                    _ => {
                      match current_block {
                        16124761010012532485 => {
                          let mut yf: libc::c_int = 0;
                          let mut ml: libc::c_int = 0;
                          let mut whole: libc::c_int = 0;
                          yf = YANKDEL as libc::c_int;
                          if c == 'y' as i32 || c == 'Y' as i32 {
                            yf = YANKONLY as libc::c_int
                          }
                          c1 = 'y' as i32;
                          if c != 'Y' as i32 {
                            c1 = get_one_char()
                          }
                          ml = find_range(&mut p, &mut q, c1 as libc::c_char);
                          place_cursor(0i32, 0);
                          if c1 == 27i32 {
                            c1 = 27i32;
                            c = c1
                          } else if !strchr(b"wW\x00" as *const u8 as *const libc::c_char, c1)
                            .is_null()
                          {
                            ml = 0;
                            if c == 'c' as i32 {
                              while ({
                                let mut bb__isspace: libc::c_uchar =
                                  (*q as libc::c_int - 9i32) as libc::c_uchar;
                                (bb__isspace as libc::c_int == ' ' as i32 - 9i32
                                  || bb__isspace as libc::c_int <= 13i32 - 9i32)
                                  as libc::c_int
                              }) != 0
                                && q > p
                              {
                                q = q.offset(-1)
                              }
                            }
                            (*ptr_to_globals).dot = yank_delete(p, q, ml, yf, 1i32)
                          } else if !strchr(
                            b"^0bBeEft%$ lh\x08\x7f\x00" as *const u8 as *const libc::c_char,
                            c1,
                          )
                          .is_null()
                          {
                            (*ptr_to_globals).dot = yank_delete(p, q, ml, yf, 1i32)
                          } else if !strchr(
                            b"cdykjGHL+-{}\r\n\x00" as *const u8 as *const libc::c_char,
                            c1,
                          )
                          .is_null()
                          {
                            (*ptr_to_globals).dot = yank_delete(p, q, ml, yf, 1i32);
                            whole = 1i32
                          } else {
                            c1 = 27i32;
                            c = c1;
                            ml = 0;
                            indicate_error();
                          }
                          if ml != 0 && whole != 0 {
                            if c == 'c' as i32 {
                              (*ptr_to_globals).dot = char_insert(
                                (*ptr_to_globals).dot,
                                '\n' as i32 as libc::c_char,
                                2i32,
                              );
                              if whole != 0
                                && (*ptr_to_globals).dot != (*ptr_to_globals).end.offset(-1)
                              {
                                dot_prev();
                              }
                            } else if c == 'd' as i32 {
                              dot_begin();
                              dot_skip_over_ws();
                            }
                          }
                          if c1 != 27i32 {
                            if c == 'c' as i32 {
                              strcpy(
                                buf.as_mut_ptr(),
                                b"Change\x00" as *const u8 as *const libc::c_char,
                              );
                              current_block = 8629930936610358348;
                            } else {
                              if c == 'd' as i32 {
                                strcpy(
                                  buf.as_mut_ptr(),
                                  b"Delete\x00" as *const u8 as *const libc::c_char,
                                );
                              }
                              if c == 'y' as i32 || c == 'Y' as i32 {
                                strcpy(
                                  buf.as_mut_ptr(),
                                  b"Yank\x00" as *const u8 as *const libc::c_char,
                                );
                              }
                              p = (*ptr_to_globals).reg[(*ptr_to_globals).YDreg as usize];
                              q = p.offset(strlen(p) as isize);
                              cnt = 0;
                              while p <= q {
                                if *p as libc::c_int == '\n' as i32 {
                                  cnt += 1
                                }
                                p = p.offset(1)
                              }
                              status_line(
                                b"%s %u lines (%u chars) using [%c]\x00" as *const u8
                                  as *const libc::c_char,
                                buf.as_mut_ptr(),
                                cnt,
                                strlen((*ptr_to_globals).reg[(*ptr_to_globals).YDreg as usize])
                                  as libc::c_uint,
                                what_reg() as libc::c_int,
                              );
                              end_cmd_q();
                              current_block = 15129665204879337069;
                            }
                          } else {
                            current_block = 15129665204879337069;
                          }
                        }
                        5591548203144509315 => {
                          current_block = 2636677179867529885;
                        }
                        _ => {}
                      }
                      match current_block {
                        15129665204879337069 => {}
                        8629930936610358348 => {}
                        _ => {
                          match current_block {
                            2636677179867529885 => {
                              current_block = 12309206730560524281;
                            }
                            _ => {}
                          }
                          match current_block {
                            12309206730560524281 => {
                              current_block = 3325768110057758661;
                            }
                            _ => {}
                          }
                          match current_block {
                            3325768110057758661 => {
                              current_block = 14815832896553429982;
                            }
                            _ => {}
                          }
                          match current_block {
                            14815832896553429982 => {
                              current_block = 10731695520297161438;
                            }
                            _ => {}
                          }
                          match current_block {
                            10731695520297161438 => {
                              if c == '0' as i32 && (*ptr_to_globals).cmdcnt < 1i32 {
                                dot_begin();
                              } else {
                                (*ptr_to_globals).cmdcnt =
                                  (*ptr_to_globals).cmdcnt * 10i32 + (c - '0' as i32)
                              }
                              current_block = 15129665204879337069;
                            }
                            _ => {}
                          }
                          match current_block {
                            15129665204879337069 => {}
                            _ => {
                              loop {
                                match current_block {
                                  16813369756331276724 => {
                                    msg = std::ptr::null();
                                    current_block = 7392824444931029276;
                                  }
                                  7392824444931029276 => {
                                    dir = FORWARD as libc::c_int;
                                    p = (*ptr_to_globals).dot.offset(1);
                                    if *(*ptr_to_globals).last_search_pattern.offset(0)
                                      as libc::c_int
                                      == '?' as i32
                                    {
                                      dir = BACK as libc::c_int;
                                      p = (*ptr_to_globals).dot.offset(-1)
                                    }
                                    current_block = 4166979493554389389;
                                  }
                                  _ => {
                                    q = char_search(
                                      p,
                                      (*ptr_to_globals).last_search_pattern.offset(1),
                                      dir << 1i32 | FULL as libc::c_int,
                                    );
                                    if !q.is_null() {
                                      (*ptr_to_globals).dot = q;
                                      msg = std::ptr::null()
                                    } else {
                                      p = (*ptr_to_globals).text;
                                      if dir == BACK as libc::c_int {
                                        p = (*ptr_to_globals).end.offset(-1)
                                      }
                                      q = char_search(
                                        p,
                                        (*ptr_to_globals).last_search_pattern.offset(1),
                                        dir << 1i32 | FULL as libc::c_int,
                                      );
                                      if !q.is_null() {
                                        (*ptr_to_globals).dot = q;
                                        msg = b"search hit BOTTOM, continuing at TOP\x00"
                                          as *const u8
                                          as *const libc::c_char;
                                        if dir == BACK as libc::c_int {
                                          msg = b"search hit TOP, continuing at BOTTOM\x00"
                                            as *const u8
                                            as *const libc::c_char
                                        }
                                      } else {
                                        msg = b"Pattern not found\x00" as *const u8
                                          as *const libc::c_char
                                      }
                                    }
                                    if !msg.is_null() {
                                      status_line_bold(
                                        b"%s\x00" as *const u8 as *const libc::c_char,
                                        msg,
                                      );
                                    }
                                    (*ptr_to_globals).cmdcnt -= 1;
                                    if (*ptr_to_globals).cmdcnt > 0 {
                                      current_block = 16813369756331276724;
                                    } else {
                                      break;
                                    }
                                  }
                                }
                              }
                              current_block = 15129665204879337069;
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
        55 => {
          current_block = 14815832896553429982;
          match current_block {
            16992905640583886232 => {
              loop {
                if (*(*ptr_to_globals).dot as libc::c_int - 'a' as i32) as libc::c_uchar
                  as libc::c_int
                  <= 'z' as i32 - 'a' as i32
                {
                  undo_push(
                    (*ptr_to_globals).dot,
                    1i32 as libc::c_uint,
                    1i32 as libc::c_uchar,
                  );
                  *(*ptr_to_globals).dot =
                    bb_ascii_toupper(*(*ptr_to_globals).dot as libc::c_uchar) as libc::c_char;
                  undo_push(
                    (*ptr_to_globals).dot,
                    1i32 as libc::c_uint,
                    2i32 as libc::c_uchar,
                  );
                } else if (*(*ptr_to_globals).dot as libc::c_int - 'A' as i32) as libc::c_uchar
                  as libc::c_int
                  <= 'Z' as i32 - 'A' as i32
                {
                  undo_push(
                    (*ptr_to_globals).dot,
                    1i32 as libc::c_uint,
                    1i32 as libc::c_uchar,
                  );
                  *(*ptr_to_globals).dot =
                    bb_ascii_tolower(*(*ptr_to_globals).dot as libc::c_uchar) as libc::c_char;
                  undo_push(
                    (*ptr_to_globals).dot,
                    1i32 as libc::c_uint,
                    2i32 as libc::c_uchar,
                  );
                }
                dot_right();
                (*ptr_to_globals).cmdcnt -= 1;
                if !((*ptr_to_globals).cmdcnt > 0) {
                  break;
                }
              }
              end_cmd_q();
              current_block = 15129665204879337069;
            }
            8729655159604064397 => {
              c1 = get_one_char();
              cnt = 0;
              if c1 == '.' as i32 {
                cnt = (*ptr_to_globals)
                  .rows
                  .wrapping_sub(2i32 as libc::c_uint)
                  .wrapping_div(2i32 as libc::c_uint) as libc::c_int
              }
              if c1 == '-' as i32 {
                cnt = (*ptr_to_globals).rows.wrapping_sub(2i32 as libc::c_uint) as libc::c_int
              }
              (*ptr_to_globals).screenbegin = begin_line((*ptr_to_globals).dot);
              dot_scroll(cnt, -1i32);
              current_block = 15129665204879337069;
            }
            15899500648299942075 => {
              (*ptr_to_globals).last_forward_char = get_one_char();
              do_cmd(';' as i32);
              if *(*ptr_to_globals).dot as libc::c_int == (*ptr_to_globals).last_forward_char {
                dot_left();
              }
              (*ptr_to_globals).last_forward_char = 0;
              current_block = 15129665204879337069;
            }
            9051390181078481641 => {
              c1 = get_one_char();
              if *(*ptr_to_globals).dot as libc::c_int != '\n' as i32 {
                (*ptr_to_globals).dot =
                  text_hole_delete((*ptr_to_globals).dot, (*ptr_to_globals).dot, 1i32);
                (*ptr_to_globals).dot =
                  char_insert((*ptr_to_globals).dot, c1 as libc::c_char, 2i32);
                dot_left();
              }
              end_cmd_q();
              current_block = 15129665204879337069;
            }
            877115918601926659 => {
              dir = FORWARD as libc::c_int;
              if c == 'b' as i32 {
                dir = BACK as libc::c_int
              }
              while !((*ptr_to_globals).dot.offset(dir as isize) < (*ptr_to_globals).text
                || (*ptr_to_globals).dot.offset(dir as isize) > (*ptr_to_globals).end.offset(-1))
              {
                (*ptr_to_globals).dot = (*ptr_to_globals).dot.offset(dir as isize);
                if ({
                  let mut bb__isspace: libc::c_uchar =
                    (*(*ptr_to_globals).dot as libc::c_int - 9i32) as libc::c_uchar;
                  (bb__isspace as libc::c_int == ' ' as i32 - 9i32
                    || bb__isspace as libc::c_int <= 13i32 - 9i32) as libc::c_int
                }) != 0
                {
                  (*ptr_to_globals).dot = skip_thing(
                    (*ptr_to_globals).dot,
                    if c == 'e' as i32 { 2i32 } else { 1i32 },
                    dir,
                    S_OVER_WS as libc::c_int,
                  )
                }
                if bb_ascii_isalnum(*(*ptr_to_globals).dot as libc::c_uchar) != 0
                  || *(*ptr_to_globals).dot as libc::c_int == '_' as i32
                {
                  (*ptr_to_globals).dot =
                    skip_thing((*ptr_to_globals).dot, 1i32, dir, S_END_ALNUM as libc::c_int)
                } else if *strchrnul(
                  b"!\"#$%&\'()*+,-./:;<=>?@[\\]^_`{|}~\x00" as *const u8 as *const libc::c_char,
                  *(*ptr_to_globals).dot as libc::c_int,
                )
                .offset(0)
                  != 0
                {
                  (*ptr_to_globals).dot =
                    skip_thing((*ptr_to_globals).dot, 1i32, dir, S_END_PUNCT as libc::c_int)
                }
                (*ptr_to_globals).cmdcnt -= 1;
                if !((*ptr_to_globals).cmdcnt > 0) {
                  break;
                }
              }
              current_block = 15129665204879337069;
            }
            1085022737867179637 => {
              dot_begin();
              dot_skip_over_ws();
              current_block = 15129665204879337069;
            }
            3113147720494587438 => {
              c1 = get_one_char();
              if c1 != 'Z' as i32 {
                indicate_error();
              } else if (*ptr_to_globals).modified_count != 0 {
                if 1i32 != 0 && (*ptr_to_globals).readonly_mode as libc::c_int != 0 {
                  status_line_bold(
                    b"\'%s\' is read only\x00" as *const u8 as *const libc::c_char,
                    (*ptr_to_globals).current_filename,
                  );
                } else {
                  cnt = file_write(
                    (*ptr_to_globals).current_filename,
                    (*ptr_to_globals).text,
                    (*ptr_to_globals).end.offset(-1),
                  );
                  if cnt < 0 {
                    if cnt == -1i32 {
                      status_line_bold(b"Write error: %m\x00" as *const u8 as *const libc::c_char);
                    }
                  } else if cnt as libc::c_long
                    == (*ptr_to_globals)
                      .end
                      .offset(-1)
                      .wrapping_offset_from((*ptr_to_globals).text)
                      as libc::c_long
                      + 1
                  {
                    (*ptr_to_globals).editing = 0 as smallint
                  }
                }
              } else {
                (*ptr_to_globals).editing = 0 as smallint
              }
              current_block = 15129665204879337069;
            }
            12960118908218882441 => {
              p = begin_line((*ptr_to_globals).dot);
              if *p.offset(-1i32 as isize) as libc::c_int == '\n' as i32 {
                dot_prev();
                current_block = 2087484904894455135;
              } else {
                dot_begin();
                (*ptr_to_globals).dot =
                  char_insert((*ptr_to_globals).dot, '\n' as i32 as libc::c_char, 1i32);
                dot_prev();
                current_block = 8629930936610358348;
              }
            }
            8720450212473544924 => {
              (*ptr_to_globals).dot = (*ptr_to_globals).screenbegin;
              cnt = 0;
              while (cnt as libc::c_uint)
                < (*ptr_to_globals)
                  .rows
                  .wrapping_sub(1i32 as libc::c_uint)
                  .wrapping_div(2i32 as libc::c_uint)
              {
                (*ptr_to_globals).dot = next_line((*ptr_to_globals).dot);
                cnt += 1
              }
              current_block = 15129665204879337069;
            }
            13015277209715431090 => {
              (*ptr_to_globals).dot = end_screen();
              if (*ptr_to_globals).cmdcnt as libc::c_uint
                > (*ptr_to_globals).rows.wrapping_sub(1i32 as libc::c_uint)
              {
                (*ptr_to_globals).cmdcnt =
                  (*ptr_to_globals).rows.wrapping_sub(1i32 as libc::c_uint) as libc::c_int
              }
              (*ptr_to_globals).cmdcnt -= 1;
              if (*ptr_to_globals).cmdcnt > 0 {
                do_cmd('-' as i32);
              }
              dot_begin();
              dot_skip_over_ws();
              current_block = 15129665204879337069;
            }
            9800435767766781385 => {
              loop {
                dot_end();
                if (*ptr_to_globals).dot < (*ptr_to_globals).end.offset(-1) {
                  undo_push(
                    (*ptr_to_globals).dot,
                    1i32 as libc::c_uint,
                    1i32 as libc::c_uchar,
                  );
                  let fresh15 = (*ptr_to_globals).dot;
                  (*ptr_to_globals).dot = (*ptr_to_globals).dot.offset(1);
                  *fresh15 = ' ' as i32 as libc::c_char;
                  undo_push(
                    (*ptr_to_globals).dot.offset(-1),
                    1i32 as libc::c_uint,
                    2i32 as libc::c_uchar,
                  );
                  while ({
                    let mut bb__isblank: libc::c_uchar = *(*ptr_to_globals).dot as libc::c_uchar;
                    (bb__isblank as libc::c_int == ' ' as i32
                      || bb__isblank as libc::c_int == '\t' as i32)
                      as libc::c_int
                  }) != 0
                  {
                    text_hole_delete((*ptr_to_globals).dot, (*ptr_to_globals).dot, 2i32);
                  }
                }
                (*ptr_to_globals).cmdcnt -= 1;
                if !((*ptr_to_globals).cmdcnt > 0) {
                  break;
                }
              }
              end_cmd_q();
              current_block = 15129665204879337069;
            }
            3432363526595694666 => {
              dot_begin();
              dot_skip_over_ws();
              current_block = 3268579060917229304;
            }
            3494829253343353619 => {
              (*ptr_to_globals).dot = (*ptr_to_globals).screenbegin;
              if (*ptr_to_globals).cmdcnt as libc::c_uint
                > (*ptr_to_globals).rows.wrapping_sub(1i32 as libc::c_uint)
              {
                (*ptr_to_globals).cmdcnt =
                  (*ptr_to_globals).rows.wrapping_sub(1i32 as libc::c_uint) as libc::c_int
              }
              (*ptr_to_globals).cmdcnt -= 1;
              if (*ptr_to_globals).cmdcnt > 0 {
                do_cmd('+' as i32);
              }
              dot_skip_over_ws();
              current_block = 15129665204879337069;
            }
            17973101765331640574 => {
              c1 = get_one_char();
              if c1 != 'g' as i32 {
                buf[0] = 'g' as i32 as libc::c_char;
                buf[1] = if c1 >= 0 { c1 } else { '*' as i32 } as libc::c_char;
                buf[2] = '\u{0}' as i32 as libc::c_char;
                not_implemented(buf.as_mut_ptr());
                current_block = 15129665204879337069;
              } else {
                if (*ptr_to_globals).cmdcnt == 0 {
                  (*ptr_to_globals).cmdcnt = 1i32
                }
                current_block = 11945623545738147997;
              }
            }
            16546625800574160972 => {
              save_dot = (*ptr_to_globals).dot;
              (*ptr_to_globals).dot = dollar_line((*ptr_to_globals).dot);
              (*ptr_to_globals).dot = yank_delete(
                save_dot,
                (*ptr_to_globals).dot,
                0,
                YANKDEL as libc::c_int,
                1i32,
              );
              if c == 'C' as i32 {
                current_block = 8629930936610358348;
              } else {
                if c == 'D' as i32 {
                  end_cmd_q();
                }
                current_block = 15129665204879337069;
              }
            }
            11937696639986586685 => {
              cnt = count_lines((*ptr_to_globals).text, (*ptr_to_globals).dot);
              c1 = get_one_char();
              find_range(&mut p, &mut q, c1 as libc::c_char);
              yank_delete(p, q, 1i32, YANKONLY as libc::c_int, 0);
              p = begin_line(p);
              q = end_line(q);
              i = count_lines(p, q);
              while i > 0 {
                if c == '<' as i32 {
                  if *p as libc::c_int == '\t' as i32 {
                    text_hole_delete(p, p, 0);
                  } else if *p as libc::c_int == ' ' as i32 {
                    j = 0;
                    while *p as libc::c_int == ' ' as i32 && j < (*ptr_to_globals).tabstop {
                      text_hole_delete(p, p, 0);
                      j += 1
                    }
                  }
                } else if c == '>' as i32 {
                  char_insert(p, '\t' as i32 as libc::c_char, 1i32);
                }
                i -= 1;
                p = next_line(p)
              }
              (*ptr_to_globals).dot = find_line(cnt);
              dot_skip_over_ws();
              end_cmd_q();
              current_block = 15129665204879337069;
            }
            17725350714912028156 => {
              p = get_input_line(b":\x00" as *const u8 as *const libc::c_char);
              colon(p);
              current_block = 15129665204879337069;
            }
            14526470074083880812 => {
              q = char_search(
                (*ptr_to_globals).dot,
                b"\n\n\x00" as *const u8 as *const libc::c_char,
                (FORWARD as libc::c_int) << 1i32 | FULL as libc::c_int,
              );
              if !q.is_null() {
                (*ptr_to_globals).dot = next_line(q)
              }
              current_block = 15129665204879337069;
            }
            8893187391306414141 => {
              q = char_search(
                (*ptr_to_globals).dot,
                b"\n\n\x00" as *const u8 as *const libc::c_char,
                ((BACK as libc::c_int as libc::c_uint) << 1i32
                  | FULL as libc::c_int as libc::c_uint) as libc::c_int,
              );
              if !q.is_null() {
                (*ptr_to_globals).dot = next_line(q)
              }
              current_block = 15129665204879337069;
            }
            7021673758293221412 => {
              dir = BACK as libc::c_int;
              p = (*ptr_to_globals).dot.offset(-1);
              if *(*ptr_to_globals).last_search_pattern.offset(0) as libc::c_int == '?' as i32 {
                dir = FORWARD as libc::c_int;
                p = (*ptr_to_globals).dot.offset(1)
              }
              current_block = 4166979493554389389;
            }
            18374191879090272823 => {
              buf[0] = c as libc::c_char;
              buf[1] = '\u{0}' as i32 as libc::c_char;
              q = get_input_line(buf.as_mut_ptr());
              if *q.offset(0) as libc::c_int != 0 && *q.offset(1) == 0 {
                if *(*ptr_to_globals).last_search_pattern.offset(0) != 0 {
                  *(*ptr_to_globals).last_search_pattern.offset(0) = c as libc::c_char
                }
                current_block = 7392824444931029276;
              } else if *q.offset(0) != 0 {
                free((*ptr_to_globals).last_search_pattern as *mut libc::c_void);
                (*ptr_to_globals).last_search_pattern = crate::libbb::xfuncs_printf::xstrdup(q);
                current_block = 7392824444931029276;
              } else {
                current_block = 15129665204879337069;
              }
            }
            16407828456666301883 => {
              if (*ptr_to_globals).last_forward_char == 0 {
                current_block = 15129665204879337069;
              } else {
                loop {
                  q = (*ptr_to_globals).dot.offset(-1);
                  while q >= (*ptr_to_globals).text
                    && *q as libc::c_int != '\n' as i32
                    && *q as libc::c_int != (*ptr_to_globals).last_forward_char
                  {
                    q = q.offset(-1)
                  }
                  if q >= (*ptr_to_globals).text
                    && *q as libc::c_int == (*ptr_to_globals).last_forward_char
                  {
                    (*ptr_to_globals).dot = q
                  }
                  (*ptr_to_globals).cmdcnt -= 1;
                  if !((*ptr_to_globals).cmdcnt > 0) {
                    break;
                  }
                }
                current_block = 15129665204879337069;
              }
            }
            9018432604062702004 => {
              q = (*ptr_to_globals).dot;
              while q < (*ptr_to_globals).end && *q as libc::c_int != '\n' as i32 {
                if !strchr(
                  b"()[]{}\x00" as *const u8 as *const libc::c_char,
                  *q as libc::c_int,
                )
                .is_null()
                {
                  p = find_pair(q, *q);
                  if p.is_null() {
                    indicate_error();
                  } else {
                    (*ptr_to_globals).dot = p
                  }
                  break;
                } else {
                  q = q.offset(1)
                }
              }
              if *q as libc::c_int == '\n' as i32 {
                indicate_error();
              }
              current_block = 15129665204879337069;
            }
            10247103787464459848 => {
              p = (*ptr_to_globals).reg[(*ptr_to_globals).YDreg as usize];
              if p.is_null() {
                status_line_bold(
                  b"Nothing in register %c\x00" as *const u8 as *const libc::c_char,
                  what_reg() as libc::c_int,
                );
              } else {
                if !strchr(p, '\n' as i32).is_null() {
                  if c == 'P' as i32 {
                    dot_begin();
                  }
                  if c == 'p' as i32 {
                    if end_line((*ptr_to_globals).dot) == (*ptr_to_globals).end.offset(-1) {
                      (*ptr_to_globals).dot = (*ptr_to_globals).end
                    } else {
                      dot_next();
                    }
                  }
                } else if c == 'p' as i32 {
                  dot_right();
                }
                string_insert((*ptr_to_globals).dot, p, 1i32);
                end_cmd_q();
              }
              current_block = 15129665204879337069;
            }
            15260732871948875843 => {
              c1 = (get_one_char() | 0x20i32) - 'a' as i32;
              if c1 as libc::c_uint <= 25i32 as libc::c_uint {
                (*ptr_to_globals).mark[c1 as usize] = (*ptr_to_globals).dot
              } else {
                indicate_error();
              }
              current_block = 15129665204879337069;
            }
            12738322036487086035 => {
              c1 = get_one_char() | 0x20i32;
              if (c1 - 'a' as i32) as libc::c_uint <= 25i32 as libc::c_uint {
                c1 = c1 - 'a' as i32;
                q = (*ptr_to_globals).mark[c1 as usize];
                if (*ptr_to_globals).text <= q && q < (*ptr_to_globals).end {
                  (*ptr_to_globals).dot = q;
                  dot_begin();
                  dot_skip_over_ws();
                }
              } else if c1 == '\'' as i32 {
                (*ptr_to_globals).dot = swap_context((*ptr_to_globals).dot);
                dot_begin();
                dot_skip_over_ws();
              } else {
                indicate_error();
              }
              current_block = 15129665204879337069;
            }
            13255096073384561358 => {
              c1 = (get_one_char() | 0x20i32) - 'a' as i32;
              if c1 as libc::c_uint <= 25i32 as libc::c_uint {
                (*ptr_to_globals).YDreg = c1 as smalluint
              } else {
                indicate_error();
              }
              current_block = 15129665204879337069;
            }
            10258711639984089377 => {
              if (*ptr_to_globals).cmd_mode as libc::c_int == 0 {
                indicate_error();
              }
              (*ptr_to_globals).cmd_mode = 0 as smallint;
              undo_queue_commit();
              end_cmd_q();
              (*ptr_to_globals).last_status_cksum = 0;
              current_block = 15129665204879337069;
            }
            11439127087547047736 => {
              buf[0] = c as libc::c_char;
              buf[1] = '\u{0}' as i32 as libc::c_char;
              not_implemented(buf.as_mut_ptr());
              end_cmd_q();
              current_block = 17440971994642376514;
            }
            7961798899781870241 => {
              dot_scroll(
                (*ptr_to_globals).rows.wrapping_sub(2i32 as libc::c_uint) as libc::c_int,
                -1i32,
              );
              current_block = 15129665204879337069;
            }
            9426343755402444879 => {
              dot_scroll(
                (*ptr_to_globals)
                  .rows
                  .wrapping_sub(2i32 as libc::c_uint)
                  .wrapping_div(2i32 as libc::c_uint) as libc::c_int,
                1i32,
              );
              current_block = 15129665204879337069;
            }
            13352459794680105913 => {
              dot_scroll(1i32, 1i32);
              current_block = 15129665204879337069;
            }
            14142272253464333006 => {
              dot_scroll(
                (*ptr_to_globals).rows.wrapping_sub(2i32 as libc::c_uint) as libc::c_int,
                1i32,
              );
              current_block = 15129665204879337069;
            }
            10758177197742640066 => {
              (*ptr_to_globals).last_status_cksum = 0;
              current_block = 15129665204879337069;
            }
            6152256259730122749 => {
              current_block = 7534742345255184552;
            }
            12883932598258173301 => {
              current_block = 8800996768013373992;
            }
            11242998110520238401 => {
              redraw(1i32);
              current_block = 15129665204879337069;
            }
            13619733043935729992 => {
              loop {
                dot_next();
                dot_skip_over_ws();
                (*ptr_to_globals).cmdcnt -= 1;
                if !((*ptr_to_globals).cmdcnt > 0) {
                  break;
                }
              }
              current_block = 15129665204879337069;
            }
            9339065157412720613 => {
              dot_scroll(
                (*ptr_to_globals)
                  .rows
                  .wrapping_sub(2i32 as libc::c_uint)
                  .wrapping_div(2i32 as libc::c_uint) as libc::c_int,
                -1i32,
              );
              current_block = 15129665204879337069;
            }
            11447082683497798022 => {
              dot_scroll(1i32, -1i32);
              current_block = 15129665204879337069;
            }
            5182000506326660482 => {
              current_block = 13993698454868426881;
            }
            1105010766850597332 => {
              if !(*ptr_to_globals).reg[27].is_null() {
                p = begin_line((*ptr_to_globals).dot);
                q = end_line((*ptr_to_globals).dot);
                p = text_hole_delete(p, q, 1i32);
                p = p.offset(string_insert(p, (*ptr_to_globals).reg[27], 2i32) as isize);
                (*ptr_to_globals).dot = p;
                dot_skip_over_ws();
              }
              current_block = 15129665204879337069;
            }
            8616046655533110204 => {
              undo_pop();
              current_block = 15129665204879337069;
            }
            5127767458142431603 => {
              loop {
                (*ptr_to_globals).dot = end_line((*ptr_to_globals).dot);
                (*ptr_to_globals).cmdcnt -= 1;
                if (*ptr_to_globals).cmdcnt <= 0 {
                  break;
                }
                dot_next();
              }
              current_block = 15129665204879337069;
            }
            222014967776118151 => {
              (*ptr_to_globals).last_forward_char = get_one_char();
              current_block = 7856905509180742666;
            }
            11209792479411604110 => {
              loop {
                dot_prev();
                dot_skip_over_ws();
                (*ptr_to_globals).cmdcnt -= 1;
                if !((*ptr_to_globals).cmdcnt > 0) {
                  break;
                }
              }
              current_block = 15129665204879337069;
            }
            3364823792826654116 => {
              if (*ptr_to_globals).lmc_len != 0 {
                (*ptr_to_globals).ioq_start = crate::libbb::xfuncs_printf::xstrndup(
                  (*ptr_to_globals).last_modifying_cmd.as_mut_ptr(),
                  (*ptr_to_globals).lmc_len,
                );
                (*ptr_to_globals).ioq = (*ptr_to_globals).ioq_start
              }
              current_block = 15129665204879337069;
            }
            18096603330221575131 => {
              current_block = 17498168302144015873;
            }
            16891123271837848903 => {
              dot_end();
              current_block = 1752638907092016026;
            }
            8517235759107662071 => {
              current_block = 5847749760081351726;
            }
            12525254419223051704 => {
              if (*ptr_to_globals).dot < (*ptr_to_globals).end.offset(-1) {
                (*ptr_to_globals).dot = yank_delete(
                  (*ptr_to_globals).dot,
                  (*ptr_to_globals).dot,
                  1i32,
                  YANKDEL as libc::c_int,
                  1i32,
                )
              }
              current_block = 15129665204879337069;
            }
            15232911949322867522 => {
              current_block = 17251831742223396249;
            }
            10863374208794025069 => {
              current_block = 1895262434596074581;
            }
            451126677064669119 => {
              loop {
                dot_prev();
                (*ptr_to_globals).dot = move_to_col(
                  (*ptr_to_globals).dot,
                  (*ptr_to_globals).ccol + (*ptr_to_globals).offset,
                );
                (*ptr_to_globals).cmdcnt -= 1;
                if !((*ptr_to_globals).cmdcnt > 0) {
                  break;
                }
              }
              current_block = 15129665204879337069;
            }
            4611735929166613116 => {
              loop {
                if bb_ascii_isalnum(*(*ptr_to_globals).dot as libc::c_uchar) != 0
                  || *(*ptr_to_globals).dot as libc::c_int == '_' as i32
                {
                  (*ptr_to_globals).dot = skip_thing(
                    (*ptr_to_globals).dot,
                    1i32,
                    FORWARD as libc::c_int,
                    S_END_ALNUM as libc::c_int,
                  )
                } else if *strchrnul(
                  b"!\"#$%&\'()*+,-./:;<=>?@[\\]^_`{|}~\x00" as *const u8 as *const libc::c_char,
                  *(*ptr_to_globals).dot as libc::c_int,
                )
                .offset(0)
                  != 0
                {
                  (*ptr_to_globals).dot = skip_thing(
                    (*ptr_to_globals).dot,
                    1i32,
                    FORWARD as libc::c_int,
                    S_END_PUNCT as libc::c_int,
                  )
                }
                if (*ptr_to_globals).dot < (*ptr_to_globals).end.offset(-1) {
                  (*ptr_to_globals).dot = (*ptr_to_globals).dot.offset(1)
                }
                if ({
                  let mut bb__isspace: libc::c_uchar =
                    (*(*ptr_to_globals).dot as libc::c_int - 9i32) as libc::c_uchar;
                  (bb__isspace as libc::c_int == ' ' as i32 - 9i32
                    || bb__isspace as libc::c_int <= 13i32 - 9i32) as libc::c_int
                }) != 0
                {
                  (*ptr_to_globals).dot = skip_thing(
                    (*ptr_to_globals).dot,
                    2i32,
                    FORWARD as libc::c_int,
                    S_OVER_WS as libc::c_int,
                  )
                }
                (*ptr_to_globals).cmdcnt -= 1;
                if !((*ptr_to_globals).cmdcnt > 0) {
                  break;
                }
              }
              current_block = 15129665204879337069;
            }
            4386451087681909888 => {
              (*ptr_to_globals).dot =
                move_to_col((*ptr_to_globals).dot, (*ptr_to_globals).cmdcnt - 1i32);
              current_block = 15129665204879337069;
            }
            1296397779060594135 => {
              dot_begin();
              current_block = 15129665204879337069;
            }
            _ => {}
          }
          match current_block {
            15129665204879337069 => {}
            8629930936610358348 => {}
            _ => {
              match current_block {
                17251831742223396249 => {
                  dir = 0;
                  if c == 'X' as i32 {
                    dir = -1i32
                  }
                  loop {
                    if *(*ptr_to_globals).dot.offset(dir as isize) as libc::c_int != '\n' as i32 {
                      if c == 'X' as i32 {
                        (*ptr_to_globals).dot = (*ptr_to_globals).dot.offset(-1)
                      }
                      (*ptr_to_globals).dot = yank_delete(
                        (*ptr_to_globals).dot,
                        (*ptr_to_globals).dot,
                        0,
                        YANKDEL as libc::c_int,
                        1i32,
                      )
                    }
                    (*ptr_to_globals).cmdcnt -= 1;
                    if !((*ptr_to_globals).cmdcnt > 0) {
                      break;
                    }
                  }
                  end_cmd_q();
                  if c == 's' as i32 {
                    current_block = 8629930936610358348;
                  } else {
                    current_block = 15129665204879337069;
                  }
                }
                2087484904894455135 => {
                  dot_end();
                  (*ptr_to_globals).dot =
                    char_insert((*ptr_to_globals).dot, '\n' as i32 as libc::c_char, 1i32);
                  current_block = 8629930936610358348;
                }
                11945623545738147997 => {
                  (*ptr_to_globals).dot = (*ptr_to_globals).end.offset(-1);
                  if (*ptr_to_globals).cmdcnt > 0 {
                    (*ptr_to_globals).dot = find_line((*ptr_to_globals).cmdcnt)
                  }
                  dot_skip_over_ws();
                  current_block = 15129665204879337069;
                }
                5847749760081351726 => {
                  dir = FORWARD as libc::c_int;
                  if c == 'B' as i32 {
                    dir = BACK as libc::c_int
                  }
                  loop {
                    if c == 'W' as i32
                      || ({
                        let mut bb__isspace: libc::c_uchar =
                          (*(*ptr_to_globals).dot.offset(dir as isize) as libc::c_int - 9i32)
                            as libc::c_uchar;
                        (bb__isspace as libc::c_int == ' ' as i32 - 9i32
                          || bb__isspace as libc::c_int <= 13i32 - 9i32)
                          as libc::c_int
                      }) != 0
                    {
                      (*ptr_to_globals).dot =
                        skip_thing((*ptr_to_globals).dot, 1i32, dir, S_TO_WS as libc::c_int);
                      (*ptr_to_globals).dot =
                        skip_thing((*ptr_to_globals).dot, 2i32, dir, S_OVER_WS as libc::c_int)
                    }
                    if c != 'W' as i32 {
                      (*ptr_to_globals).dot =
                        skip_thing((*ptr_to_globals).dot, 1i32, dir, S_BEFORE_WS as libc::c_int)
                    }
                    (*ptr_to_globals).cmdcnt -= 1;
                    if !((*ptr_to_globals).cmdcnt > 0) {
                      break;
                    }
                  }
                  current_block = 15129665204879337069;
                }
                17440971994642376514 => {
                  current_block = 15129665204879337069;
                }
                7534742345255184552 => {
                  current_block = 17247297260531395789;
                }
                8800996768013373992 => {
                  loop {
                    dot_next();
                    (*ptr_to_globals).dot = move_to_col(
                      (*ptr_to_globals).dot,
                      (*ptr_to_globals).ccol + (*ptr_to_globals).offset,
                    );
                    (*ptr_to_globals).cmdcnt -= 1;
                    if !((*ptr_to_globals).cmdcnt > 0) {
                      break;
                    }
                  }
                  current_block = 15129665204879337069;
                }
                13993698454868426881 => {
                  loop {
                    dot_right();
                    (*ptr_to_globals).cmdcnt -= 1;
                    if !((*ptr_to_globals).cmdcnt > 0) {
                      break;
                    }
                  }
                  current_block = 15129665204879337069;
                }
                7856905509180742666 => {
                  while !((*ptr_to_globals).last_forward_char == 0) {
                    q = (*ptr_to_globals).dot.offset(1);
                    while q < (*ptr_to_globals).end.offset(-1)
                      && *q as libc::c_int != '\n' as i32
                      && *q as libc::c_int != (*ptr_to_globals).last_forward_char
                    {
                      q = q.offset(1)
                    }
                    if *q as libc::c_int == (*ptr_to_globals).last_forward_char {
                      (*ptr_to_globals).dot = q
                    }
                    (*ptr_to_globals).cmdcnt -= 1;
                    if !((*ptr_to_globals).cmdcnt > 0) {
                      break;
                    }
                  }
                  current_block = 15129665204879337069;
                }
                17498168302144015873 => {
                  current_block = 8681395796513813967;
                }
                1752638907092016026 => {
                  if *(*ptr_to_globals).dot as libc::c_int != '\n' as i32 {
                    (*ptr_to_globals).dot = (*ptr_to_globals).dot.offset(1)
                  }
                  current_block = 8629930936610358348;
                }
                3268579060917229304 => {
                  current_block = 8629930936610358348;
                }
                1895262434596074581 => {
                  current_block = 8908416993177701018;
                }
                _ => {}
              }
              match current_block {
                8629930936610358348 => {}
                15129665204879337069 => {}
                _ => {
                  match current_block {
                    17247297260531395789 => {
                      loop {
                        dot_left();
                        (*ptr_to_globals).cmdcnt -= 1;
                        if !((*ptr_to_globals).cmdcnt > 0) {
                          break;
                        }
                      }
                      current_block = 15129665204879337069;
                    }
                    8681395796513813967 => {
                      current_block = 5591548203144509315;
                    }
                    8908416993177701018 => {
                      current_block = 16124761010012532485;
                    }
                    _ => {}
                  }
                  match current_block {
                    15129665204879337069 => {}
                    _ => {
                      match current_block {
                        16124761010012532485 => {
                          let mut yf: libc::c_int = 0;
                          let mut ml: libc::c_int = 0;
                          let mut whole: libc::c_int = 0;
                          yf = YANKDEL as libc::c_int;
                          if c == 'y' as i32 || c == 'Y' as i32 {
                            yf = YANKONLY as libc::c_int
                          }
                          c1 = 'y' as i32;
                          if c != 'Y' as i32 {
                            c1 = get_one_char()
                          }
                          ml = find_range(&mut p, &mut q, c1 as libc::c_char);
                          place_cursor(0i32, 0);
                          if c1 == 27i32 {
                            c1 = 27i32;
                            c = c1
                          } else if !strchr(b"wW\x00" as *const u8 as *const libc::c_char, c1)
                            .is_null()
                          {
                            ml = 0;
                            if c == 'c' as i32 {
                              while ({
                                let mut bb__isspace: libc::c_uchar =
                                  (*q as libc::c_int - 9i32) as libc::c_uchar;
                                (bb__isspace as libc::c_int == ' ' as i32 - 9i32
                                  || bb__isspace as libc::c_int <= 13i32 - 9i32)
                                  as libc::c_int
                              }) != 0
                                && q > p
                              {
                                q = q.offset(-1)
                              }
                            }
                            (*ptr_to_globals).dot = yank_delete(p, q, ml, yf, 1i32)
                          } else if !strchr(
                            b"^0bBeEft%$ lh\x08\x7f\x00" as *const u8 as *const libc::c_char,
                            c1,
                          )
                          .is_null()
                          {
                            (*ptr_to_globals).dot = yank_delete(p, q, ml, yf, 1i32)
                          } else if !strchr(
                            b"cdykjGHL+-{}\r\n\x00" as *const u8 as *const libc::c_char,
                            c1,
                          )
                          .is_null()
                          {
                            (*ptr_to_globals).dot = yank_delete(p, q, ml, yf, 1i32);
                            whole = 1i32
                          } else {
                            c1 = 27i32;
                            c = c1;
                            ml = 0;
                            indicate_error();
                          }
                          if ml != 0 && whole != 0 {
                            if c == 'c' as i32 {
                              (*ptr_to_globals).dot = char_insert(
                                (*ptr_to_globals).dot,
                                '\n' as i32 as libc::c_char,
                                2i32,
                              );
                              if whole != 0
                                && (*ptr_to_globals).dot != (*ptr_to_globals).end.offset(-1)
                              {
                                dot_prev();
                              }
                            } else if c == 'd' as i32 {
                              dot_begin();
                              dot_skip_over_ws();
                            }
                          }
                          if c1 != 27i32 {
                            if c == 'c' as i32 {
                              strcpy(
                                buf.as_mut_ptr(),
                                b"Change\x00" as *const u8 as *const libc::c_char,
                              );
                              current_block = 8629930936610358348;
                            } else {
                              if c == 'd' as i32 {
                                strcpy(
                                  buf.as_mut_ptr(),
                                  b"Delete\x00" as *const u8 as *const libc::c_char,
                                );
                              }
                              if c == 'y' as i32 || c == 'Y' as i32 {
                                strcpy(
                                  buf.as_mut_ptr(),
                                  b"Yank\x00" as *const u8 as *const libc::c_char,
                                );
                              }
                              p = (*ptr_to_globals).reg[(*ptr_to_globals).YDreg as usize];
                              q = p.offset(strlen(p) as isize);
                              cnt = 0;
                              while p <= q {
                                if *p as libc::c_int == '\n' as i32 {
                                  cnt += 1
                                }
                                p = p.offset(1)
                              }
                              status_line(
                                b"%s %u lines (%u chars) using [%c]\x00" as *const u8
                                  as *const libc::c_char,
                                buf.as_mut_ptr(),
                                cnt,
                                strlen((*ptr_to_globals).reg[(*ptr_to_globals).YDreg as usize])
                                  as libc::c_uint,
                                what_reg() as libc::c_int,
                              );
                              end_cmd_q();
                              current_block = 15129665204879337069;
                            }
                          } else {
                            current_block = 15129665204879337069;
                          }
                        }
                        5591548203144509315 => {
                          current_block = 2636677179867529885;
                        }
                        _ => {}
                      }
                      match current_block {
                        15129665204879337069 => {}
                        8629930936610358348 => {}
                        _ => {
                          match current_block {
                            2636677179867529885 => {
                              current_block = 12309206730560524281;
                            }
                            _ => {}
                          }
                          match current_block {
                            12309206730560524281 => {
                              current_block = 3325768110057758661;
                            }
                            _ => {}
                          }
                          match current_block {
                            3325768110057758661 => {
                              current_block = 14815832896553429982;
                            }
                            _ => {}
                          }
                          match current_block {
                            14815832896553429982 => {
                              current_block = 10731695520297161438;
                            }
                            _ => {}
                          }
                          match current_block {
                            10731695520297161438 => {
                              if c == '0' as i32 && (*ptr_to_globals).cmdcnt < 1i32 {
                                dot_begin();
                              } else {
                                (*ptr_to_globals).cmdcnt =
                                  (*ptr_to_globals).cmdcnt * 10i32 + (c - '0' as i32)
                              }
                              current_block = 15129665204879337069;
                            }
                            _ => {}
                          }
                          match current_block {
                            15129665204879337069 => {}
                            _ => {
                              loop {
                                match current_block {
                                  16813369756331276724 => {
                                    msg = std::ptr::null();
                                    current_block = 7392824444931029276;
                                  }
                                  7392824444931029276 => {
                                    dir = FORWARD as libc::c_int;
                                    p = (*ptr_to_globals).dot.offset(1);
                                    if *(*ptr_to_globals).last_search_pattern.offset(0)
                                      as libc::c_int
                                      == '?' as i32
                                    {
                                      dir = BACK as libc::c_int;
                                      p = (*ptr_to_globals).dot.offset(-1)
                                    }
                                    current_block = 4166979493554389389;
                                  }
                                  _ => {
                                    q = char_search(
                                      p,
                                      (*ptr_to_globals).last_search_pattern.offset(1),
                                      dir << 1i32 | FULL as libc::c_int,
                                    );
                                    if !q.is_null() {
                                      (*ptr_to_globals).dot = q;
                                      msg = std::ptr::null()
                                    } else {
                                      p = (*ptr_to_globals).text;
                                      if dir == BACK as libc::c_int {
                                        p = (*ptr_to_globals).end.offset(-1)
                                      }
                                      q = char_search(
                                        p,
                                        (*ptr_to_globals).last_search_pattern.offset(1),
                                        dir << 1i32 | FULL as libc::c_int,
                                      );
                                      if !q.is_null() {
                                        (*ptr_to_globals).dot = q;
                                        msg = b"search hit BOTTOM, continuing at TOP\x00"
                                          as *const u8
                                          as *const libc::c_char;
                                        if dir == BACK as libc::c_int {
                                          msg = b"search hit TOP, continuing at BOTTOM\x00"
                                            as *const u8
                                            as *const libc::c_char
                                        }
                                      } else {
                                        msg = b"Pattern not found\x00" as *const u8
                                          as *const libc::c_char
                                      }
                                    }
                                    if !msg.is_null() {
                                      status_line_bold(
                                        b"%s\x00" as *const u8 as *const libc::c_char,
                                        msg,
                                      );
                                    }
                                    (*ptr_to_globals).cmdcnt -= 1;
                                    if (*ptr_to_globals).cmdcnt > 0 {
                                      current_block = 16813369756331276724;
                                    } else {
                                      break;
                                    }
                                  }
                                }
                              }
                              current_block = 15129665204879337069;
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
        56 | 57 => {
          current_block = 10731695520297161438;
          match current_block {
            16992905640583886232 => {
              loop {
                if (*(*ptr_to_globals).dot as libc::c_int - 'a' as i32) as libc::c_uchar
                  as libc::c_int
                  <= 'z' as i32 - 'a' as i32
                {
                  undo_push(
                    (*ptr_to_globals).dot,
                    1i32 as libc::c_uint,
                    1i32 as libc::c_uchar,
                  );
                  *(*ptr_to_globals).dot =
                    bb_ascii_toupper(*(*ptr_to_globals).dot as libc::c_uchar) as libc::c_char;
                  undo_push(
                    (*ptr_to_globals).dot,
                    1i32 as libc::c_uint,
                    2i32 as libc::c_uchar,
                  );
                } else if (*(*ptr_to_globals).dot as libc::c_int - 'A' as i32) as libc::c_uchar
                  as libc::c_int
                  <= 'Z' as i32 - 'A' as i32
                {
                  undo_push(
                    (*ptr_to_globals).dot,
                    1i32 as libc::c_uint,
                    1i32 as libc::c_uchar,
                  );
                  *(*ptr_to_globals).dot =
                    bb_ascii_tolower(*(*ptr_to_globals).dot as libc::c_uchar) as libc::c_char;
                  undo_push(
                    (*ptr_to_globals).dot,
                    1i32 as libc::c_uint,
                    2i32 as libc::c_uchar,
                  );
                }
                dot_right();
                (*ptr_to_globals).cmdcnt -= 1;
                if !((*ptr_to_globals).cmdcnt > 0) {
                  break;
                }
              }
              end_cmd_q();
              current_block = 15129665204879337069;
            }
            8729655159604064397 => {
              c1 = get_one_char();
              cnt = 0;
              if c1 == '.' as i32 {
                cnt = (*ptr_to_globals)
                  .rows
                  .wrapping_sub(2i32 as libc::c_uint)
                  .wrapping_div(2i32 as libc::c_uint) as libc::c_int
              }
              if c1 == '-' as i32 {
                cnt = (*ptr_to_globals).rows.wrapping_sub(2i32 as libc::c_uint) as libc::c_int
              }
              (*ptr_to_globals).screenbegin = begin_line((*ptr_to_globals).dot);
              dot_scroll(cnt, -1i32);
              current_block = 15129665204879337069;
            }
            15899500648299942075 => {
              (*ptr_to_globals).last_forward_char = get_one_char();
              do_cmd(';' as i32);
              if *(*ptr_to_globals).dot as libc::c_int == (*ptr_to_globals).last_forward_char {
                dot_left();
              }
              (*ptr_to_globals).last_forward_char = 0;
              current_block = 15129665204879337069;
            }
            9051390181078481641 => {
              c1 = get_one_char();
              if *(*ptr_to_globals).dot as libc::c_int != '\n' as i32 {
                (*ptr_to_globals).dot =
                  text_hole_delete((*ptr_to_globals).dot, (*ptr_to_globals).dot, 1i32);
                (*ptr_to_globals).dot =
                  char_insert((*ptr_to_globals).dot, c1 as libc::c_char, 2i32);
                dot_left();
              }
              end_cmd_q();
              current_block = 15129665204879337069;
            }
            877115918601926659 => {
              dir = FORWARD as libc::c_int;
              if c == 'b' as i32 {
                dir = BACK as libc::c_int
              }
              while !((*ptr_to_globals).dot.offset(dir as isize) < (*ptr_to_globals).text
                || (*ptr_to_globals).dot.offset(dir as isize) > (*ptr_to_globals).end.offset(-1))
              {
                (*ptr_to_globals).dot = (*ptr_to_globals).dot.offset(dir as isize);
                if ({
                  let mut bb__isspace: libc::c_uchar =
                    (*(*ptr_to_globals).dot as libc::c_int - 9i32) as libc::c_uchar;
                  (bb__isspace as libc::c_int == ' ' as i32 - 9i32
                    || bb__isspace as libc::c_int <= 13i32 - 9i32) as libc::c_int
                }) != 0
                {
                  (*ptr_to_globals).dot = skip_thing(
                    (*ptr_to_globals).dot,
                    if c == 'e' as i32 { 2i32 } else { 1i32 },
                    dir,
                    S_OVER_WS as libc::c_int,
                  )
                }
                if bb_ascii_isalnum(*(*ptr_to_globals).dot as libc::c_uchar) != 0
                  || *(*ptr_to_globals).dot as libc::c_int == '_' as i32
                {
                  (*ptr_to_globals).dot =
                    skip_thing((*ptr_to_globals).dot, 1i32, dir, S_END_ALNUM as libc::c_int)
                } else if *strchrnul(
                  b"!\"#$%&\'()*+,-./:;<=>?@[\\]^_`{|}~\x00" as *const u8 as *const libc::c_char,
                  *(*ptr_to_globals).dot as libc::c_int,
                )
                .offset(0)
                  != 0
                {
                  (*ptr_to_globals).dot =
                    skip_thing((*ptr_to_globals).dot, 1i32, dir, S_END_PUNCT as libc::c_int)
                }
                (*ptr_to_globals).cmdcnt -= 1;
                if !((*ptr_to_globals).cmdcnt > 0) {
                  break;
                }
              }
              current_block = 15129665204879337069;
            }
            1085022737867179637 => {
              dot_begin();
              dot_skip_over_ws();
              current_block = 15129665204879337069;
            }
            3113147720494587438 => {
              c1 = get_one_char();
              if c1 != 'Z' as i32 {
                indicate_error();
              } else if (*ptr_to_globals).modified_count != 0 {
                if 1i32 != 0 && (*ptr_to_globals).readonly_mode as libc::c_int != 0 {
                  status_line_bold(
                    b"\'%s\' is read only\x00" as *const u8 as *const libc::c_char,
                    (*ptr_to_globals).current_filename,
                  );
                } else {
                  cnt = file_write(
                    (*ptr_to_globals).current_filename,
                    (*ptr_to_globals).text,
                    (*ptr_to_globals).end.offset(-1),
                  );
                  if cnt < 0 {
                    if cnt == -1i32 {
                      status_line_bold(b"Write error: %m\x00" as *const u8 as *const libc::c_char);
                    }
                  } else if cnt as libc::c_long
                    == (*ptr_to_globals)
                      .end
                      .offset(-1)
                      .wrapping_offset_from((*ptr_to_globals).text)
                      as libc::c_long
                      + 1
                  {
                    (*ptr_to_globals).editing = 0 as smallint
                  }
                }
              } else {
                (*ptr_to_globals).editing = 0 as smallint
              }
              current_block = 15129665204879337069;
            }
            12960118908218882441 => {
              p = begin_line((*ptr_to_globals).dot);
              if *p.offset(-1i32 as isize) as libc::c_int == '\n' as i32 {
                dot_prev();
                current_block = 2087484904894455135;
              } else {
                dot_begin();
                (*ptr_to_globals).dot =
                  char_insert((*ptr_to_globals).dot, '\n' as i32 as libc::c_char, 1i32);
                dot_prev();
                current_block = 8629930936610358348;
              }
            }
            8720450212473544924 => {
              (*ptr_to_globals).dot = (*ptr_to_globals).screenbegin;
              cnt = 0;
              while (cnt as libc::c_uint)
                < (*ptr_to_globals)
                  .rows
                  .wrapping_sub(1i32 as libc::c_uint)
                  .wrapping_div(2i32 as libc::c_uint)
              {
                (*ptr_to_globals).dot = next_line((*ptr_to_globals).dot);
                cnt += 1
              }
              current_block = 15129665204879337069;
            }
            13015277209715431090 => {
              (*ptr_to_globals).dot = end_screen();
              if (*ptr_to_globals).cmdcnt as libc::c_uint
                > (*ptr_to_globals).rows.wrapping_sub(1i32 as libc::c_uint)
              {
                (*ptr_to_globals).cmdcnt =
                  (*ptr_to_globals).rows.wrapping_sub(1i32 as libc::c_uint) as libc::c_int
              }
              (*ptr_to_globals).cmdcnt -= 1;
              if (*ptr_to_globals).cmdcnt > 0 {
                do_cmd('-' as i32);
              }
              dot_begin();
              dot_skip_over_ws();
              current_block = 15129665204879337069;
            }
            9800435767766781385 => {
              loop {
                dot_end();
                if (*ptr_to_globals).dot < (*ptr_to_globals).end.offset(-1) {
                  undo_push(
                    (*ptr_to_globals).dot,
                    1i32 as libc::c_uint,
                    1i32 as libc::c_uchar,
                  );
                  let fresh15 = (*ptr_to_globals).dot;
                  (*ptr_to_globals).dot = (*ptr_to_globals).dot.offset(1);
                  *fresh15 = ' ' as i32 as libc::c_char;
                  undo_push(
                    (*ptr_to_globals).dot.offset(-1),
                    1i32 as libc::c_uint,
                    2i32 as libc::c_uchar,
                  );
                  while ({
                    let mut bb__isblank: libc::c_uchar = *(*ptr_to_globals).dot as libc::c_uchar;
                    (bb__isblank as libc::c_int == ' ' as i32
                      || bb__isblank as libc::c_int == '\t' as i32)
                      as libc::c_int
                  }) != 0
                  {
                    text_hole_delete((*ptr_to_globals).dot, (*ptr_to_globals).dot, 2i32);
                  }
                }
                (*ptr_to_globals).cmdcnt -= 1;
                if !((*ptr_to_globals).cmdcnt > 0) {
                  break;
                }
              }
              end_cmd_q();
              current_block = 15129665204879337069;
            }
            3432363526595694666 => {
              dot_begin();
              dot_skip_over_ws();
              current_block = 3268579060917229304;
            }
            3494829253343353619 => {
              (*ptr_to_globals).dot = (*ptr_to_globals).screenbegin;
              if (*ptr_to_globals).cmdcnt as libc::c_uint
                > (*ptr_to_globals).rows.wrapping_sub(1i32 as libc::c_uint)
              {
                (*ptr_to_globals).cmdcnt =
                  (*ptr_to_globals).rows.wrapping_sub(1i32 as libc::c_uint) as libc::c_int
              }
              (*ptr_to_globals).cmdcnt -= 1;
              if (*ptr_to_globals).cmdcnt > 0 {
                do_cmd('+' as i32);
              }
              dot_skip_over_ws();
              current_block = 15129665204879337069;
            }
            17973101765331640574 => {
              c1 = get_one_char();
              if c1 != 'g' as i32 {
                buf[0] = 'g' as i32 as libc::c_char;
                buf[1] = if c1 >= 0 { c1 } else { '*' as i32 } as libc::c_char;
                buf[2] = '\u{0}' as i32 as libc::c_char;
                not_implemented(buf.as_mut_ptr());
                current_block = 15129665204879337069;
              } else {
                if (*ptr_to_globals).cmdcnt == 0 {
                  (*ptr_to_globals).cmdcnt = 1i32
                }
                current_block = 11945623545738147997;
              }
            }
            16546625800574160972 => {
              save_dot = (*ptr_to_globals).dot;
              (*ptr_to_globals).dot = dollar_line((*ptr_to_globals).dot);
              (*ptr_to_globals).dot = yank_delete(
                save_dot,
                (*ptr_to_globals).dot,
                0,
                YANKDEL as libc::c_int,
                1i32,
              );
              if c == 'C' as i32 {
                current_block = 8629930936610358348;
              } else {
                if c == 'D' as i32 {
                  end_cmd_q();
                }
                current_block = 15129665204879337069;
              }
            }
            11937696639986586685 => {
              cnt = count_lines((*ptr_to_globals).text, (*ptr_to_globals).dot);
              c1 = get_one_char();
              find_range(&mut p, &mut q, c1 as libc::c_char);
              yank_delete(p, q, 1i32, YANKONLY as libc::c_int, 0);
              p = begin_line(p);
              q = end_line(q);
              i = count_lines(p, q);
              while i > 0 {
                if c == '<' as i32 {
                  if *p as libc::c_int == '\t' as i32 {
                    text_hole_delete(p, p, 0);
                  } else if *p as libc::c_int == ' ' as i32 {
                    j = 0;
                    while *p as libc::c_int == ' ' as i32 && j < (*ptr_to_globals).tabstop {
                      text_hole_delete(p, p, 0);
                      j += 1
                    }
                  }
                } else if c == '>' as i32 {
                  char_insert(p, '\t' as i32 as libc::c_char, 1i32);
                }
                i -= 1;
                p = next_line(p)
              }
              (*ptr_to_globals).dot = find_line(cnt);
              dot_skip_over_ws();
              end_cmd_q();
              current_block = 15129665204879337069;
            }
            17725350714912028156 => {
              p = get_input_line(b":\x00" as *const u8 as *const libc::c_char);
              colon(p);
              current_block = 15129665204879337069;
            }
            14526470074083880812 => {
              q = char_search(
                (*ptr_to_globals).dot,
                b"\n\n\x00" as *const u8 as *const libc::c_char,
                (FORWARD as libc::c_int) << 1i32 | FULL as libc::c_int,
              );
              if !q.is_null() {
                (*ptr_to_globals).dot = next_line(q)
              }
              current_block = 15129665204879337069;
            }
            8893187391306414141 => {
              q = char_search(
                (*ptr_to_globals).dot,
                b"\n\n\x00" as *const u8 as *const libc::c_char,
                ((BACK as libc::c_int as libc::c_uint) << 1i32
                  | FULL as libc::c_int as libc::c_uint) as libc::c_int,
              );
              if !q.is_null() {
                (*ptr_to_globals).dot = next_line(q)
              }
              current_block = 15129665204879337069;
            }
            7021673758293221412 => {
              dir = BACK as libc::c_int;
              p = (*ptr_to_globals).dot.offset(-1);
              if *(*ptr_to_globals).last_search_pattern.offset(0) as libc::c_int == '?' as i32 {
                dir = FORWARD as libc::c_int;
                p = (*ptr_to_globals).dot.offset(1)
              }
              current_block = 4166979493554389389;
            }
            18374191879090272823 => {
              buf[0] = c as libc::c_char;
              buf[1] = '\u{0}' as i32 as libc::c_char;
              q = get_input_line(buf.as_mut_ptr());
              if *q.offset(0) as libc::c_int != 0 && *q.offset(1) == 0 {
                if *(*ptr_to_globals).last_search_pattern.offset(0) != 0 {
                  *(*ptr_to_globals).last_search_pattern.offset(0) = c as libc::c_char
                }
                current_block = 7392824444931029276;
              } else if *q.offset(0) != 0 {
                free((*ptr_to_globals).last_search_pattern as *mut libc::c_void);
                (*ptr_to_globals).last_search_pattern = crate::libbb::xfuncs_printf::xstrdup(q);
                current_block = 7392824444931029276;
              } else {
                current_block = 15129665204879337069;
              }
            }
            16407828456666301883 => {
              if (*ptr_to_globals).last_forward_char == 0 {
                current_block = 15129665204879337069;
              } else {
                loop {
                  q = (*ptr_to_globals).dot.offset(-1);
                  while q >= (*ptr_to_globals).text
                    && *q as libc::c_int != '\n' as i32
                    && *q as libc::c_int != (*ptr_to_globals).last_forward_char
                  {
                    q = q.offset(-1)
                  }
                  if q >= (*ptr_to_globals).text
                    && *q as libc::c_int == (*ptr_to_globals).last_forward_char
                  {
                    (*ptr_to_globals).dot = q
                  }
                  (*ptr_to_globals).cmdcnt -= 1;
                  if !((*ptr_to_globals).cmdcnt > 0) {
                    break;
                  }
                }
                current_block = 15129665204879337069;
              }
            }
            9018432604062702004 => {
              q = (*ptr_to_globals).dot;
              while q < (*ptr_to_globals).end && *q as libc::c_int != '\n' as i32 {
                if !strchr(
                  b"()[]{}\x00" as *const u8 as *const libc::c_char,
                  *q as libc::c_int,
                )
                .is_null()
                {
                  p = find_pair(q, *q);
                  if p.is_null() {
                    indicate_error();
                  } else {
                    (*ptr_to_globals).dot = p
                  }
                  break;
                } else {
                  q = q.offset(1)
                }
              }
              if *q as libc::c_int == '\n' as i32 {
                indicate_error();
              }
              current_block = 15129665204879337069;
            }
            10247103787464459848 => {
              p = (*ptr_to_globals).reg[(*ptr_to_globals).YDreg as usize];
              if p.is_null() {
                status_line_bold(
                  b"Nothing in register %c\x00" as *const u8 as *const libc::c_char,
                  what_reg() as libc::c_int,
                );
              } else {
                if !strchr(p, '\n' as i32).is_null() {
                  if c == 'P' as i32 {
                    dot_begin();
                  }
                  if c == 'p' as i32 {
                    if end_line((*ptr_to_globals).dot) == (*ptr_to_globals).end.offset(-1) {
                      (*ptr_to_globals).dot = (*ptr_to_globals).end
                    } else {
                      dot_next();
                    }
                  }
                } else if c == 'p' as i32 {
                  dot_right();
                }
                string_insert((*ptr_to_globals).dot, p, 1i32);
                end_cmd_q();
              }
              current_block = 15129665204879337069;
            }
            15260732871948875843 => {
              c1 = (get_one_char() | 0x20i32) - 'a' as i32;
              if c1 as libc::c_uint <= 25i32 as libc::c_uint {
                (*ptr_to_globals).mark[c1 as usize] = (*ptr_to_globals).dot
              } else {
                indicate_error();
              }
              current_block = 15129665204879337069;
            }
            12738322036487086035 => {
              c1 = get_one_char() | 0x20i32;
              if (c1 - 'a' as i32) as libc::c_uint <= 25i32 as libc::c_uint {
                c1 = c1 - 'a' as i32;
                q = (*ptr_to_globals).mark[c1 as usize];
                if (*ptr_to_globals).text <= q && q < (*ptr_to_globals).end {
                  (*ptr_to_globals).dot = q;
                  dot_begin();
                  dot_skip_over_ws();
                }
              } else if c1 == '\'' as i32 {
                (*ptr_to_globals).dot = swap_context((*ptr_to_globals).dot);
                dot_begin();
                dot_skip_over_ws();
              } else {
                indicate_error();
              }
              current_block = 15129665204879337069;
            }
            13255096073384561358 => {
              c1 = (get_one_char() | 0x20i32) - 'a' as i32;
              if c1 as libc::c_uint <= 25i32 as libc::c_uint {
                (*ptr_to_globals).YDreg = c1 as smalluint
              } else {
                indicate_error();
              }
              current_block = 15129665204879337069;
            }
            10258711639984089377 => {
              if (*ptr_to_globals).cmd_mode as libc::c_int == 0 {
                indicate_error();
              }
              (*ptr_to_globals).cmd_mode = 0 as smallint;
              undo_queue_commit();
              end_cmd_q();
              (*ptr_to_globals).last_status_cksum = 0;
              current_block = 15129665204879337069;
            }
            11439127087547047736 => {
              buf[0] = c as libc::c_char;
              buf[1] = '\u{0}' as i32 as libc::c_char;
              not_implemented(buf.as_mut_ptr());
              end_cmd_q();
              current_block = 17440971994642376514;
            }
            7961798899781870241 => {
              dot_scroll(
                (*ptr_to_globals).rows.wrapping_sub(2i32 as libc::c_uint) as libc::c_int,
                -1i32,
              );
              current_block = 15129665204879337069;
            }
            9426343755402444879 => {
              dot_scroll(
                (*ptr_to_globals)
                  .rows
                  .wrapping_sub(2i32 as libc::c_uint)
                  .wrapping_div(2i32 as libc::c_uint) as libc::c_int,
                1i32,
              );
              current_block = 15129665204879337069;
            }
            13352459794680105913 => {
              dot_scroll(1i32, 1i32);
              current_block = 15129665204879337069;
            }
            14142272253464333006 => {
              dot_scroll(
                (*ptr_to_globals).rows.wrapping_sub(2i32 as libc::c_uint) as libc::c_int,
                1i32,
              );
              current_block = 15129665204879337069;
            }
            10758177197742640066 => {
              (*ptr_to_globals).last_status_cksum = 0;
              current_block = 15129665204879337069;
            }
            6152256259730122749 => {
              current_block = 7534742345255184552;
            }
            12883932598258173301 => {
              current_block = 8800996768013373992;
            }
            11242998110520238401 => {
              redraw(1i32);
              current_block = 15129665204879337069;
            }
            13619733043935729992 => {
              loop {
                dot_next();
                dot_skip_over_ws();
                (*ptr_to_globals).cmdcnt -= 1;
                if !((*ptr_to_globals).cmdcnt > 0) {
                  break;
                }
              }
              current_block = 15129665204879337069;
            }
            9339065157412720613 => {
              dot_scroll(
                (*ptr_to_globals)
                  .rows
                  .wrapping_sub(2i32 as libc::c_uint)
                  .wrapping_div(2i32 as libc::c_uint) as libc::c_int,
                -1i32,
              );
              current_block = 15129665204879337069;
            }
            11447082683497798022 => {
              dot_scroll(1i32, -1i32);
              current_block = 15129665204879337069;
            }
            5182000506326660482 => {
              current_block = 13993698454868426881;
            }
            1105010766850597332 => {
              if !(*ptr_to_globals).reg[27].is_null() {
                p = begin_line((*ptr_to_globals).dot);
                q = end_line((*ptr_to_globals).dot);
                p = text_hole_delete(p, q, 1i32);
                p = p.offset(string_insert(p, (*ptr_to_globals).reg[27], 2i32) as isize);
                (*ptr_to_globals).dot = p;
                dot_skip_over_ws();
              }
              current_block = 15129665204879337069;
            }
            8616046655533110204 => {
              undo_pop();
              current_block = 15129665204879337069;
            }
            5127767458142431603 => {
              loop {
                (*ptr_to_globals).dot = end_line((*ptr_to_globals).dot);
                (*ptr_to_globals).cmdcnt -= 1;
                if (*ptr_to_globals).cmdcnt <= 0 {
                  break;
                }
                dot_next();
              }
              current_block = 15129665204879337069;
            }
            222014967776118151 => {
              (*ptr_to_globals).last_forward_char = get_one_char();
              current_block = 7856905509180742666;
            }
            11209792479411604110 => {
              loop {
                dot_prev();
                dot_skip_over_ws();
                (*ptr_to_globals).cmdcnt -= 1;
                if !((*ptr_to_globals).cmdcnt > 0) {
                  break;
                }
              }
              current_block = 15129665204879337069;
            }
            3364823792826654116 => {
              if (*ptr_to_globals).lmc_len != 0 {
                (*ptr_to_globals).ioq_start = crate::libbb::xfuncs_printf::xstrndup(
                  (*ptr_to_globals).last_modifying_cmd.as_mut_ptr(),
                  (*ptr_to_globals).lmc_len,
                );
                (*ptr_to_globals).ioq = (*ptr_to_globals).ioq_start
              }
              current_block = 15129665204879337069;
            }
            18096603330221575131 => {
              current_block = 17498168302144015873;
            }
            16891123271837848903 => {
              dot_end();
              current_block = 1752638907092016026;
            }
            8517235759107662071 => {
              current_block = 5847749760081351726;
            }
            12525254419223051704 => {
              if (*ptr_to_globals).dot < (*ptr_to_globals).end.offset(-1) {
                (*ptr_to_globals).dot = yank_delete(
                  (*ptr_to_globals).dot,
                  (*ptr_to_globals).dot,
                  1i32,
                  YANKDEL as libc::c_int,
                  1i32,
                )
              }
              current_block = 15129665204879337069;
            }
            15232911949322867522 => {
              current_block = 17251831742223396249;
            }
            10863374208794025069 => {
              current_block = 1895262434596074581;
            }
            451126677064669119 => {
              loop {
                dot_prev();
                (*ptr_to_globals).dot = move_to_col(
                  (*ptr_to_globals).dot,
                  (*ptr_to_globals).ccol + (*ptr_to_globals).offset,
                );
                (*ptr_to_globals).cmdcnt -= 1;
                if !((*ptr_to_globals).cmdcnt > 0) {
                  break;
                }
              }
              current_block = 15129665204879337069;
            }
            4611735929166613116 => {
              loop {
                if bb_ascii_isalnum(*(*ptr_to_globals).dot as libc::c_uchar) != 0
                  || *(*ptr_to_globals).dot as libc::c_int == '_' as i32
                {
                  (*ptr_to_globals).dot = skip_thing(
                    (*ptr_to_globals).dot,
                    1i32,
                    FORWARD as libc::c_int,
                    S_END_ALNUM as libc::c_int,
                  )
                } else if *strchrnul(
                  b"!\"#$%&\'()*+,-./:;<=>?@[\\]^_`{|}~\x00" as *const u8 as *const libc::c_char,
                  *(*ptr_to_globals).dot as libc::c_int,
                )
                .offset(0)
                  != 0
                {
                  (*ptr_to_globals).dot = skip_thing(
                    (*ptr_to_globals).dot,
                    1i32,
                    FORWARD as libc::c_int,
                    S_END_PUNCT as libc::c_int,
                  )
                }
                if (*ptr_to_globals).dot < (*ptr_to_globals).end.offset(-1) {
                  (*ptr_to_globals).dot = (*ptr_to_globals).dot.offset(1)
                }
                if ({
                  let mut bb__isspace: libc::c_uchar =
                    (*(*ptr_to_globals).dot as libc::c_int - 9i32) as libc::c_uchar;
                  (bb__isspace as libc::c_int == ' ' as i32 - 9i32
                    || bb__isspace as libc::c_int <= 13i32 - 9i32) as libc::c_int
                }) != 0
                {
                  (*ptr_to_globals).dot = skip_thing(
                    (*ptr_to_globals).dot,
                    2i32,
                    FORWARD as libc::c_int,
                    S_OVER_WS as libc::c_int,
                  )
                }
                (*ptr_to_globals).cmdcnt -= 1;
                if !((*ptr_to_globals).cmdcnt > 0) {
                  break;
                }
              }
              current_block = 15129665204879337069;
            }
            4386451087681909888 => {
              (*ptr_to_globals).dot =
                move_to_col((*ptr_to_globals).dot, (*ptr_to_globals).cmdcnt - 1i32);
              current_block = 15129665204879337069;
            }
            1296397779060594135 => {
              dot_begin();
              current_block = 15129665204879337069;
            }
            _ => {}
          }
          match current_block {
            15129665204879337069 => {}
            8629930936610358348 => {}
            _ => {
              match current_block {
                17251831742223396249 => {
                  dir = 0;
                  if c == 'X' as i32 {
                    dir = -1i32
                  }
                  loop {
                    if *(*ptr_to_globals).dot.offset(dir as isize) as libc::c_int != '\n' as i32 {
                      if c == 'X' as i32 {
                        (*ptr_to_globals).dot = (*ptr_to_globals).dot.offset(-1)
                      }
                      (*ptr_to_globals).dot = yank_delete(
                        (*ptr_to_globals).dot,
                        (*ptr_to_globals).dot,
                        0,
                        YANKDEL as libc::c_int,
                        1i32,
                      )
                    }
                    (*ptr_to_globals).cmdcnt -= 1;
                    if !((*ptr_to_globals).cmdcnt > 0) {
                      break;
                    }
                  }
                  end_cmd_q();
                  if c == 's' as i32 {
                    current_block = 8629930936610358348;
                  } else {
                    current_block = 15129665204879337069;
                  }
                }
                2087484904894455135 => {
                  dot_end();
                  (*ptr_to_globals).dot =
                    char_insert((*ptr_to_globals).dot, '\n' as i32 as libc::c_char, 1i32);
                  current_block = 8629930936610358348;
                }
                11945623545738147997 => {
                  (*ptr_to_globals).dot = (*ptr_to_globals).end.offset(-1);
                  if (*ptr_to_globals).cmdcnt > 0 {
                    (*ptr_to_globals).dot = find_line((*ptr_to_globals).cmdcnt)
                  }
                  dot_skip_over_ws();
                  current_block = 15129665204879337069;
                }
                5847749760081351726 => {
                  dir = FORWARD as libc::c_int;
                  if c == 'B' as i32 {
                    dir = BACK as libc::c_int
                  }
                  loop {
                    if c == 'W' as i32
                      || ({
                        let mut bb__isspace: libc::c_uchar =
                          (*(*ptr_to_globals).dot.offset(dir as isize) as libc::c_int - 9i32)
                            as libc::c_uchar;
                        (bb__isspace as libc::c_int == ' ' as i32 - 9i32
                          || bb__isspace as libc::c_int <= 13i32 - 9i32)
                          as libc::c_int
                      }) != 0
                    {
                      (*ptr_to_globals).dot =
                        skip_thing((*ptr_to_globals).dot, 1i32, dir, S_TO_WS as libc::c_int);
                      (*ptr_to_globals).dot =
                        skip_thing((*ptr_to_globals).dot, 2i32, dir, S_OVER_WS as libc::c_int)
                    }
                    if c != 'W' as i32 {
                      (*ptr_to_globals).dot =
                        skip_thing((*ptr_to_globals).dot, 1i32, dir, S_BEFORE_WS as libc::c_int)
                    }
                    (*ptr_to_globals).cmdcnt -= 1;
                    if !((*ptr_to_globals).cmdcnt > 0) {
                      break;
                    }
                  }
                  current_block = 15129665204879337069;
                }
                17440971994642376514 => {
                  current_block = 15129665204879337069;
                }
                7534742345255184552 => {
                  current_block = 17247297260531395789;
                }
                8800996768013373992 => {
                  loop {
                    dot_next();
                    (*ptr_to_globals).dot = move_to_col(
                      (*ptr_to_globals).dot,
                      (*ptr_to_globals).ccol + (*ptr_to_globals).offset,
                    );
                    (*ptr_to_globals).cmdcnt -= 1;
                    if !((*ptr_to_globals).cmdcnt > 0) {
                      break;
                    }
                  }
                  current_block = 15129665204879337069;
                }
                13993698454868426881 => {
                  loop {
                    dot_right();
                    (*ptr_to_globals).cmdcnt -= 1;
                    if !((*ptr_to_globals).cmdcnt > 0) {
                      break;
                    }
                  }
                  current_block = 15129665204879337069;
                }
                7856905509180742666 => {
                  while !((*ptr_to_globals).last_forward_char == 0) {
                    q = (*ptr_to_globals).dot.offset(1);
                    while q < (*ptr_to_globals).end.offset(-1)
                      && *q as libc::c_int != '\n' as i32
                      && *q as libc::c_int != (*ptr_to_globals).last_forward_char
                    {
                      q = q.offset(1)
                    }
                    if *q as libc::c_int == (*ptr_to_globals).last_forward_char {
                      (*ptr_to_globals).dot = q
                    }
                    (*ptr_to_globals).cmdcnt -= 1;
                    if !((*ptr_to_globals).cmdcnt > 0) {
                      break;
                    }
                  }
                  current_block = 15129665204879337069;
                }
                17498168302144015873 => {
                  current_block = 8681395796513813967;
                }
                1752638907092016026 => {
                  if *(*ptr_to_globals).dot as libc::c_int != '\n' as i32 {
                    (*ptr_to_globals).dot = (*ptr_to_globals).dot.offset(1)
                  }
                  current_block = 8629930936610358348;
                }
                3268579060917229304 => {
                  current_block = 8629930936610358348;
                }
                1895262434596074581 => {
                  current_block = 8908416993177701018;
                }
                _ => {}
              }
              match current_block {
                8629930936610358348 => {}
                15129665204879337069 => {}
                _ => {
                  match current_block {
                    17247297260531395789 => {
                      loop {
                        dot_left();
                        (*ptr_to_globals).cmdcnt -= 1;
                        if !((*ptr_to_globals).cmdcnt > 0) {
                          break;
                        }
                      }
                      current_block = 15129665204879337069;
                    }
                    8681395796513813967 => {
                      current_block = 5591548203144509315;
                    }
                    8908416993177701018 => {
                      current_block = 16124761010012532485;
                    }
                    _ => {}
                  }
                  match current_block {
                    15129665204879337069 => {}
                    _ => {
                      match current_block {
                        16124761010012532485 => {
                          let mut yf: libc::c_int = 0;
                          let mut ml: libc::c_int = 0;
                          let mut whole: libc::c_int = 0;
                          yf = YANKDEL as libc::c_int;
                          if c == 'y' as i32 || c == 'Y' as i32 {
                            yf = YANKONLY as libc::c_int
                          }
                          c1 = 'y' as i32;
                          if c != 'Y' as i32 {
                            c1 = get_one_char()
                          }
                          ml = find_range(&mut p, &mut q, c1 as libc::c_char);
                          place_cursor(0i32, 0);
                          if c1 == 27i32 {
                            c1 = 27i32;
                            c = c1
                          } else if !strchr(b"wW\x00" as *const u8 as *const libc::c_char, c1)
                            .is_null()
                          {
                            ml = 0;
                            if c == 'c' as i32 {
                              while ({
                                let mut bb__isspace: libc::c_uchar =
                                  (*q as libc::c_int - 9i32) as libc::c_uchar;
                                (bb__isspace as libc::c_int == ' ' as i32 - 9i32
                                  || bb__isspace as libc::c_int <= 13i32 - 9i32)
                                  as libc::c_int
                              }) != 0
                                && q > p
                              {
                                q = q.offset(-1)
                              }
                            }
                            (*ptr_to_globals).dot = yank_delete(p, q, ml, yf, 1i32)
                          } else if !strchr(
                            b"^0bBeEft%$ lh\x08\x7f\x00" as *const u8 as *const libc::c_char,
                            c1,
                          )
                          .is_null()
                          {
                            (*ptr_to_globals).dot = yank_delete(p, q, ml, yf, 1i32)
                          } else if !strchr(
                            b"cdykjGHL+-{}\r\n\x00" as *const u8 as *const libc::c_char,
                            c1,
                          )
                          .is_null()
                          {
                            (*ptr_to_globals).dot = yank_delete(p, q, ml, yf, 1i32);
                            whole = 1i32
                          } else {
                            c1 = 27i32;
                            c = c1;
                            ml = 0;
                            indicate_error();
                          }
                          if ml != 0 && whole != 0 {
                            if c == 'c' as i32 {
                              (*ptr_to_globals).dot = char_insert(
                                (*ptr_to_globals).dot,
                                '\n' as i32 as libc::c_char,
                                2i32,
                              );
                              if whole != 0
                                && (*ptr_to_globals).dot != (*ptr_to_globals).end.offset(-1)
                              {
                                dot_prev();
                              }
                            } else if c == 'd' as i32 {
                              dot_begin();
                              dot_skip_over_ws();
                            }
                          }
                          if c1 != 27i32 {
                            if c == 'c' as i32 {
                              strcpy(
                                buf.as_mut_ptr(),
                                b"Change\x00" as *const u8 as *const libc::c_char,
                              );
                              current_block = 8629930936610358348;
                            } else {
                              if c == 'd' as i32 {
                                strcpy(
                                  buf.as_mut_ptr(),
                                  b"Delete\x00" as *const u8 as *const libc::c_char,
                                );
                              }
                              if c == 'y' as i32 || c == 'Y' as i32 {
                                strcpy(
                                  buf.as_mut_ptr(),
                                  b"Yank\x00" as *const u8 as *const libc::c_char,
                                );
                              }
                              p = (*ptr_to_globals).reg[(*ptr_to_globals).YDreg as usize];
                              q = p.offset(strlen(p) as isize);
                              cnt = 0;
                              while p <= q {
                                if *p as libc::c_int == '\n' as i32 {
                                  cnt += 1
                                }
                                p = p.offset(1)
                              }
                              status_line(
                                b"%s %u lines (%u chars) using [%c]\x00" as *const u8
                                  as *const libc::c_char,
                                buf.as_mut_ptr(),
                                cnt,
                                strlen((*ptr_to_globals).reg[(*ptr_to_globals).YDreg as usize])
                                  as libc::c_uint,
                                what_reg() as libc::c_int,
                              );
                              end_cmd_q();
                              current_block = 15129665204879337069;
                            }
                          } else {
                            current_block = 15129665204879337069;
                          }
                        }
                        5591548203144509315 => {
                          current_block = 2636677179867529885;
                        }
                        _ => {}
                      }
                      match current_block {
                        15129665204879337069 => {}
                        8629930936610358348 => {}
                        _ => {
                          match current_block {
                            2636677179867529885 => {
                              current_block = 12309206730560524281;
                            }
                            _ => {}
                          }
                          match current_block {
                            12309206730560524281 => {
                              current_block = 3325768110057758661;
                            }
                            _ => {}
                          }
                          match current_block {
                            3325768110057758661 => {
                              current_block = 14815832896553429982;
                            }
                            _ => {}
                          }
                          match current_block {
                            14815832896553429982 => {
                              current_block = 10731695520297161438;
                            }
                            _ => {}
                          }
                          match current_block {
                            10731695520297161438 => {
                              if c == '0' as i32 && (*ptr_to_globals).cmdcnt < 1i32 {
                                dot_begin();
                              } else {
                                (*ptr_to_globals).cmdcnt =
                                  (*ptr_to_globals).cmdcnt * 10i32 + (c - '0' as i32)
                              }
                              current_block = 15129665204879337069;
                            }
                            _ => {}
                          }
                          match current_block {
                            15129665204879337069 => {}
                            _ => {
                              loop {
                                match current_block {
                                  16813369756331276724 => {
                                    msg = std::ptr::null();
                                    current_block = 7392824444931029276;
                                  }
                                  7392824444931029276 => {
                                    dir = FORWARD as libc::c_int;
                                    p = (*ptr_to_globals).dot.offset(1);
                                    if *(*ptr_to_globals).last_search_pattern.offset(0)
                                      as libc::c_int
                                      == '?' as i32
                                    {
                                      dir = BACK as libc::c_int;
                                      p = (*ptr_to_globals).dot.offset(-1)
                                    }
                                    current_block = 4166979493554389389;
                                  }
                                  _ => {
                                    q = char_search(
                                      p,
                                      (*ptr_to_globals).last_search_pattern.offset(1),
                                      dir << 1i32 | FULL as libc::c_int,
                                    );
                                    if !q.is_null() {
                                      (*ptr_to_globals).dot = q;
                                      msg = std::ptr::null()
                                    } else {
                                      p = (*ptr_to_globals).text;
                                      if dir == BACK as libc::c_int {
                                        p = (*ptr_to_globals).end.offset(-1)
                                      }
                                      q = char_search(
                                        p,
                                        (*ptr_to_globals).last_search_pattern.offset(1),
                                        dir << 1i32 | FULL as libc::c_int,
                                      );
                                      if !q.is_null() {
                                        (*ptr_to_globals).dot = q;
                                        msg = b"search hit BOTTOM, continuing at TOP\x00"
                                          as *const u8
                                          as *const libc::c_char;
                                        if dir == BACK as libc::c_int {
                                          msg = b"search hit TOP, continuing at BOTTOM\x00"
                                            as *const u8
                                            as *const libc::c_char
                                        }
                                      } else {
                                        msg = b"Pattern not found\x00" as *const u8
                                          as *const libc::c_char
                                      }
                                    }
                                    if !msg.is_null() {
                                      status_line_bold(
                                        b"%s\x00" as *const u8 as *const libc::c_char,
                                        msg,
                                      );
                                    }
                                    (*ptr_to_globals).cmdcnt -= 1;
                                    if (*ptr_to_globals).cmdcnt > 0 {
                                      current_block = 16813369756331276724;
                                    } else {
                                      break;
                                    }
                                  }
                                }
                              }
                              current_block = 15129665204879337069;
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
        58 => {
          current_block = 17725350714912028156;
          match current_block {
            16992905640583886232 => {
              loop {
                if (*(*ptr_to_globals).dot as libc::c_int - 'a' as i32) as libc::c_uchar
                  as libc::c_int
                  <= 'z' as i32 - 'a' as i32
                {
                  undo_push(
                    (*ptr_to_globals).dot,
                    1i32 as libc::c_uint,
                    1i32 as libc::c_uchar,
                  );
                  *(*ptr_to_globals).dot =
                    bb_ascii_toupper(*(*ptr_to_globals).dot as libc::c_uchar) as libc::c_char;
                  undo_push(
                    (*ptr_to_globals).dot,
                    1i32 as libc::c_uint,
                    2i32 as libc::c_uchar,
                  );
                } else if (*(*ptr_to_globals).dot as libc::c_int - 'A' as i32) as libc::c_uchar
                  as libc::c_int
                  <= 'Z' as i32 - 'A' as i32
                {
                  undo_push(
                    (*ptr_to_globals).dot,
                    1i32 as libc::c_uint,
                    1i32 as libc::c_uchar,
                  );
                  *(*ptr_to_globals).dot =
                    bb_ascii_tolower(*(*ptr_to_globals).dot as libc::c_uchar) as libc::c_char;
                  undo_push(
                    (*ptr_to_globals).dot,
                    1i32 as libc::c_uint,
                    2i32 as libc::c_uchar,
                  );
                }
                dot_right();
                (*ptr_to_globals).cmdcnt -= 1;
                if !((*ptr_to_globals).cmdcnt > 0) {
                  break;
                }
              }
              end_cmd_q();
              current_block = 15129665204879337069;
            }
            8729655159604064397 => {
              c1 = get_one_char();
              cnt = 0;
              if c1 == '.' as i32 {
                cnt = (*ptr_to_globals)
                  .rows
                  .wrapping_sub(2i32 as libc::c_uint)
                  .wrapping_div(2i32 as libc::c_uint) as libc::c_int
              }
              if c1 == '-' as i32 {
                cnt = (*ptr_to_globals).rows.wrapping_sub(2i32 as libc::c_uint) as libc::c_int
              }
              (*ptr_to_globals).screenbegin = begin_line((*ptr_to_globals).dot);
              dot_scroll(cnt, -1i32);
              current_block = 15129665204879337069;
            }
            15899500648299942075 => {
              (*ptr_to_globals).last_forward_char = get_one_char();
              do_cmd(';' as i32);
              if *(*ptr_to_globals).dot as libc::c_int == (*ptr_to_globals).last_forward_char {
                dot_left();
              }
              (*ptr_to_globals).last_forward_char = 0;
              current_block = 15129665204879337069;
            }
            9051390181078481641 => {
              c1 = get_one_char();
              if *(*ptr_to_globals).dot as libc::c_int != '\n' as i32 {
                (*ptr_to_globals).dot =
                  text_hole_delete((*ptr_to_globals).dot, (*ptr_to_globals).dot, 1i32);
                (*ptr_to_globals).dot =
                  char_insert((*ptr_to_globals).dot, c1 as libc::c_char, 2i32);
                dot_left();
              }
              end_cmd_q();
              current_block = 15129665204879337069;
            }
            877115918601926659 => {
              dir = FORWARD as libc::c_int;
              if c == 'b' as i32 {
                dir = BACK as libc::c_int
              }
              while !((*ptr_to_globals).dot.offset(dir as isize) < (*ptr_to_globals).text
                || (*ptr_to_globals).dot.offset(dir as isize) > (*ptr_to_globals).end.offset(-1))
              {
                (*ptr_to_globals).dot = (*ptr_to_globals).dot.offset(dir as isize);
                if ({
                  let mut bb__isspace: libc::c_uchar =
                    (*(*ptr_to_globals).dot as libc::c_int - 9i32) as libc::c_uchar;
                  (bb__isspace as libc::c_int == ' ' as i32 - 9i32
                    || bb__isspace as libc::c_int <= 13i32 - 9i32) as libc::c_int
                }) != 0
                {
                  (*ptr_to_globals).dot = skip_thing(
                    (*ptr_to_globals).dot,
                    if c == 'e' as i32 { 2i32 } else { 1i32 },
                    dir,
                    S_OVER_WS as libc::c_int,
                  )
                }
                if bb_ascii_isalnum(*(*ptr_to_globals).dot as libc::c_uchar) != 0
                  || *(*ptr_to_globals).dot as libc::c_int == '_' as i32
                {
                  (*ptr_to_globals).dot =
                    skip_thing((*ptr_to_globals).dot, 1i32, dir, S_END_ALNUM as libc::c_int)
                } else if *strchrnul(
                  b"!\"#$%&\'()*+,-./:;<=>?@[\\]^_`{|}~\x00" as *const u8 as *const libc::c_char,
                  *(*ptr_to_globals).dot as libc::c_int,
                )
                .offset(0)
                  != 0
                {
                  (*ptr_to_globals).dot =
                    skip_thing((*ptr_to_globals).dot, 1i32, dir, S_END_PUNCT as libc::c_int)
                }
                (*ptr_to_globals).cmdcnt -= 1;
                if !((*ptr_to_globals).cmdcnt > 0) {
                  break;
                }
              }
              current_block = 15129665204879337069;
            }
            1085022737867179637 => {
              dot_begin();
              dot_skip_over_ws();
              current_block = 15129665204879337069;
            }
            3113147720494587438 => {
              c1 = get_one_char();
              if c1 != 'Z' as i32 {
                indicate_error();
              } else if (*ptr_to_globals).modified_count != 0 {
                if 1i32 != 0 && (*ptr_to_globals).readonly_mode as libc::c_int != 0 {
                  status_line_bold(
                    b"\'%s\' is read only\x00" as *const u8 as *const libc::c_char,
                    (*ptr_to_globals).current_filename,
                  );
                } else {
                  cnt = file_write(
                    (*ptr_to_globals).current_filename,
                    (*ptr_to_globals).text,
                    (*ptr_to_globals).end.offset(-1),
                  );
                  if cnt < 0 {
                    if cnt == -1i32 {
                      status_line_bold(b"Write error: %m\x00" as *const u8 as *const libc::c_char);
                    }
                  } else if cnt as libc::c_long
                    == (*ptr_to_globals)
                      .end
                      .offset(-1)
                      .wrapping_offset_from((*ptr_to_globals).text)
                      as libc::c_long
                      + 1
                  {
                    (*ptr_to_globals).editing = 0 as smallint
                  }
                }
              } else {
                (*ptr_to_globals).editing = 0 as smallint
              }
              current_block = 15129665204879337069;
            }
            12960118908218882441 => {
              p = begin_line((*ptr_to_globals).dot);
              if *p.offset(-1i32 as isize) as libc::c_int == '\n' as i32 {
                dot_prev();
                current_block = 2087484904894455135;
              } else {
                dot_begin();
                (*ptr_to_globals).dot =
                  char_insert((*ptr_to_globals).dot, '\n' as i32 as libc::c_char, 1i32);
                dot_prev();
                current_block = 8629930936610358348;
              }
            }
            8720450212473544924 => {
              (*ptr_to_globals).dot = (*ptr_to_globals).screenbegin;
              cnt = 0;
              while (cnt as libc::c_uint)
                < (*ptr_to_globals)
                  .rows
                  .wrapping_sub(1i32 as libc::c_uint)
                  .wrapping_div(2i32 as libc::c_uint)
              {
                (*ptr_to_globals).dot = next_line((*ptr_to_globals).dot);
                cnt += 1
              }
              current_block = 15129665204879337069;
            }
            13015277209715431090 => {
              (*ptr_to_globals).dot = end_screen();
              if (*ptr_to_globals).cmdcnt as libc::c_uint
                > (*ptr_to_globals).rows.wrapping_sub(1i32 as libc::c_uint)
              {
                (*ptr_to_globals).cmdcnt =
                  (*ptr_to_globals).rows.wrapping_sub(1i32 as libc::c_uint) as libc::c_int
              }
              (*ptr_to_globals).cmdcnt -= 1;
              if (*ptr_to_globals).cmdcnt > 0 {
                do_cmd('-' as i32);
              }
              dot_begin();
              dot_skip_over_ws();
              current_block = 15129665204879337069;
            }
            9800435767766781385 => {
              loop {
                dot_end();
                if (*ptr_to_globals).dot < (*ptr_to_globals).end.offset(-1) {
                  undo_push(
                    (*ptr_to_globals).dot,
                    1i32 as libc::c_uint,
                    1i32 as libc::c_uchar,
                  );
                  let fresh15 = (*ptr_to_globals).dot;
                  (*ptr_to_globals).dot = (*ptr_to_globals).dot.offset(1);
                  *fresh15 = ' ' as i32 as libc::c_char;
                  undo_push(
                    (*ptr_to_globals).dot.offset(-1),
                    1i32 as libc::c_uint,
                    2i32 as libc::c_uchar,
                  );
                  while ({
                    let mut bb__isblank: libc::c_uchar = *(*ptr_to_globals).dot as libc::c_uchar;
                    (bb__isblank as libc::c_int == ' ' as i32
                      || bb__isblank as libc::c_int == '\t' as i32)
                      as libc::c_int
                  }) != 0
                  {
                    text_hole_delete((*ptr_to_globals).dot, (*ptr_to_globals).dot, 2i32);
                  }
                }
                (*ptr_to_globals).cmdcnt -= 1;
                if !((*ptr_to_globals).cmdcnt > 0) {
                  break;
                }
              }
              end_cmd_q();
              current_block = 15129665204879337069;
            }
            3432363526595694666 => {
              dot_begin();
              dot_skip_over_ws();
              current_block = 3268579060917229304;
            }
            3494829253343353619 => {
              (*ptr_to_globals).dot = (*ptr_to_globals).screenbegin;
              if (*ptr_to_globals).cmdcnt as libc::c_uint
                > (*ptr_to_globals).rows.wrapping_sub(1i32 as libc::c_uint)
              {
                (*ptr_to_globals).cmdcnt =
                  (*ptr_to_globals).rows.wrapping_sub(1i32 as libc::c_uint) as libc::c_int
              }
              (*ptr_to_globals).cmdcnt -= 1;
              if (*ptr_to_globals).cmdcnt > 0 {
                do_cmd('+' as i32);
              }
              dot_skip_over_ws();
              current_block = 15129665204879337069;
            }
            17973101765331640574 => {
              c1 = get_one_char();
              if c1 != 'g' as i32 {
                buf[0] = 'g' as i32 as libc::c_char;
                buf[1] = if c1 >= 0 { c1 } else { '*' as i32 } as libc::c_char;
                buf[2] = '\u{0}' as i32 as libc::c_char;
                not_implemented(buf.as_mut_ptr());
                current_block = 15129665204879337069;
              } else {
                if (*ptr_to_globals).cmdcnt == 0 {
                  (*ptr_to_globals).cmdcnt = 1i32
                }
                current_block = 11945623545738147997;
              }
            }
            16546625800574160972 => {
              save_dot = (*ptr_to_globals).dot;
              (*ptr_to_globals).dot = dollar_line((*ptr_to_globals).dot);
              (*ptr_to_globals).dot = yank_delete(
                save_dot,
                (*ptr_to_globals).dot,
                0,
                YANKDEL as libc::c_int,
                1i32,
              );
              if c == 'C' as i32 {
                current_block = 8629930936610358348;
              } else {
                if c == 'D' as i32 {
                  end_cmd_q();
                }
                current_block = 15129665204879337069;
              }
            }
            11937696639986586685 => {
              cnt = count_lines((*ptr_to_globals).text, (*ptr_to_globals).dot);
              c1 = get_one_char();
              find_range(&mut p, &mut q, c1 as libc::c_char);
              yank_delete(p, q, 1i32, YANKONLY as libc::c_int, 0);
              p = begin_line(p);
              q = end_line(q);
              i = count_lines(p, q);
              while i > 0 {
                if c == '<' as i32 {
                  if *p as libc::c_int == '\t' as i32 {
                    text_hole_delete(p, p, 0);
                  } else if *p as libc::c_int == ' ' as i32 {
                    j = 0;
                    while *p as libc::c_int == ' ' as i32 && j < (*ptr_to_globals).tabstop {
                      text_hole_delete(p, p, 0);
                      j += 1
                    }
                  }
                } else if c == '>' as i32 {
                  char_insert(p, '\t' as i32 as libc::c_char, 1i32);
                }
                i -= 1;
                p = next_line(p)
              }
              (*ptr_to_globals).dot = find_line(cnt);
              dot_skip_over_ws();
              end_cmd_q();
              current_block = 15129665204879337069;
            }
            17725350714912028156 => {
              p = get_input_line(b":\x00" as *const u8 as *const libc::c_char);
              colon(p);
              current_block = 15129665204879337069;
            }
            14526470074083880812 => {
              q = char_search(
                (*ptr_to_globals).dot,
                b"\n\n\x00" as *const u8 as *const libc::c_char,
                (FORWARD as libc::c_int) << 1i32 | FULL as libc::c_int,
              );
              if !q.is_null() {
                (*ptr_to_globals).dot = next_line(q)
              }
              current_block = 15129665204879337069;
            }
            8893187391306414141 => {
              q = char_search(
                (*ptr_to_globals).dot,
                b"\n\n\x00" as *const u8 as *const libc::c_char,
                ((BACK as libc::c_int as libc::c_uint) << 1i32
                  | FULL as libc::c_int as libc::c_uint) as libc::c_int,
              );
              if !q.is_null() {
                (*ptr_to_globals).dot = next_line(q)
              }
              current_block = 15129665204879337069;
            }
            7021673758293221412 => {
              dir = BACK as libc::c_int;
              p = (*ptr_to_globals).dot.offset(-1);
              if *(*ptr_to_globals).last_search_pattern.offset(0) as libc::c_int == '?' as i32 {
                dir = FORWARD as libc::c_int;
                p = (*ptr_to_globals).dot.offset(1)
              }
              current_block = 4166979493554389389;
            }
            18374191879090272823 => {
              buf[0] = c as libc::c_char;
              buf[1] = '\u{0}' as i32 as libc::c_char;
              q = get_input_line(buf.as_mut_ptr());
              if *q.offset(0) as libc::c_int != 0 && *q.offset(1) == 0 {
                if *(*ptr_to_globals).last_search_pattern.offset(0) != 0 {
                  *(*ptr_to_globals).last_search_pattern.offset(0) = c as libc::c_char
                }
                current_block = 7392824444931029276;
              } else if *q.offset(0) != 0 {
                free((*ptr_to_globals).last_search_pattern as *mut libc::c_void);
                (*ptr_to_globals).last_search_pattern = crate::libbb::xfuncs_printf::xstrdup(q);
                current_block = 7392824444931029276;
              } else {
                current_block = 15129665204879337069;
              }
            }
            16407828456666301883 => {
              if (*ptr_to_globals).last_forward_char == 0 {
                current_block = 15129665204879337069;
              } else {
                loop {
                  q = (*ptr_to_globals).dot.offset(-1);
                  while q >= (*ptr_to_globals).text
                    && *q as libc::c_int != '\n' as i32
                    && *q as libc::c_int != (*ptr_to_globals).last_forward_char
                  {
                    q = q.offset(-1)
                  }
                  if q >= (*ptr_to_globals).text
                    && *q as libc::c_int == (*ptr_to_globals).last_forward_char
                  {
                    (*ptr_to_globals).dot = q
                  }
                  (*ptr_to_globals).cmdcnt -= 1;
                  if !((*ptr_to_globals).cmdcnt > 0) {
                    break;
                  }
                }
                current_block = 15129665204879337069;
              }
            }
            9018432604062702004 => {
              q = (*ptr_to_globals).dot;
              while q < (*ptr_to_globals).end && *q as libc::c_int != '\n' as i32 {
                if !strchr(
                  b"()[]{}\x00" as *const u8 as *const libc::c_char,
                  *q as libc::c_int,
                )
                .is_null()
                {
                  p = find_pair(q, *q);
                  if p.is_null() {
                    indicate_error();
                  } else {
                    (*ptr_to_globals).dot = p
                  }
                  break;
                } else {
                  q = q.offset(1)
                }
              }
              if *q as libc::c_int == '\n' as i32 {
                indicate_error();
              }
              current_block = 15129665204879337069;
            }
            10247103787464459848 => {
              p = (*ptr_to_globals).reg[(*ptr_to_globals).YDreg as usize];
              if p.is_null() {
                status_line_bold(
                  b"Nothing in register %c\x00" as *const u8 as *const libc::c_char,
                  what_reg() as libc::c_int,
                );
              } else {
                if !strchr(p, '\n' as i32).is_null() {
                  if c == 'P' as i32 {
                    dot_begin();
                  }
                  if c == 'p' as i32 {
                    if end_line((*ptr_to_globals).dot) == (*ptr_to_globals).end.offset(-1) {
                      (*ptr_to_globals).dot = (*ptr_to_globals).end
                    } else {
                      dot_next();
                    }
                  }
                } else if c == 'p' as i32 {
                  dot_right();
                }
                string_insert((*ptr_to_globals).dot, p, 1i32);
                end_cmd_q();
              }
              current_block = 15129665204879337069;
            }
            15260732871948875843 => {
              c1 = (get_one_char() | 0x20i32) - 'a' as i32;
              if c1 as libc::c_uint <= 25i32 as libc::c_uint {
                (*ptr_to_globals).mark[c1 as usize] = (*ptr_to_globals).dot
              } else {
                indicate_error();
              }
              current_block = 15129665204879337069;
            }
            12738322036487086035 => {
              c1 = get_one_char() | 0x20i32;
              if (c1 - 'a' as i32) as libc::c_uint <= 25i32 as libc::c_uint {
                c1 = c1 - 'a' as i32;
                q = (*ptr_to_globals).mark[c1 as usize];
                if (*ptr_to_globals).text <= q && q < (*ptr_to_globals).end {
                  (*ptr_to_globals).dot = q;
                  dot_begin();
                  dot_skip_over_ws();
                }
              } else if c1 == '\'' as i32 {
                (*ptr_to_globals).dot = swap_context((*ptr_to_globals).dot);
                dot_begin();
                dot_skip_over_ws();
              } else {
                indicate_error();
              }
              current_block = 15129665204879337069;
            }
            13255096073384561358 => {
              c1 = (get_one_char() | 0x20i32) - 'a' as i32;
              if c1 as libc::c_uint <= 25i32 as libc::c_uint {
                (*ptr_to_globals).YDreg = c1 as smalluint
              } else {
                indicate_error();
              }
              current_block = 15129665204879337069;
            }
            10258711639984089377 => {
              if (*ptr_to_globals).cmd_mode as libc::c_int == 0 {
                indicate_error();
              }
              (*ptr_to_globals).cmd_mode = 0 as smallint;
              undo_queue_commit();
              end_cmd_q();
              (*ptr_to_globals).last_status_cksum = 0;
              current_block = 15129665204879337069;
            }
            11439127087547047736 => {
              buf[0] = c as libc::c_char;
              buf[1] = '\u{0}' as i32 as libc::c_char;
              not_implemented(buf.as_mut_ptr());
              end_cmd_q();
              current_block = 17440971994642376514;
            }
            7961798899781870241 => {
              dot_scroll(
                (*ptr_to_globals).rows.wrapping_sub(2i32 as libc::c_uint) as libc::c_int,
                -1i32,
              );
              current_block = 15129665204879337069;
            }
            9426343755402444879 => {
              dot_scroll(
                (*ptr_to_globals)
                  .rows
                  .wrapping_sub(2i32 as libc::c_uint)
                  .wrapping_div(2i32 as libc::c_uint) as libc::c_int,
                1i32,
              );
              current_block = 15129665204879337069;
            }
            13352459794680105913 => {
              dot_scroll(1i32, 1i32);
              current_block = 15129665204879337069;
            }
            14142272253464333006 => {
              dot_scroll(
                (*ptr_to_globals).rows.wrapping_sub(2i32 as libc::c_uint) as libc::c_int,
                1i32,
              );
              current_block = 15129665204879337069;
            }
            10758177197742640066 => {
              (*ptr_to_globals).last_status_cksum = 0;
              current_block = 15129665204879337069;
            }
            6152256259730122749 => {
              current_block = 7534742345255184552;
            }
            12883932598258173301 => {
              current_block = 8800996768013373992;
            }
            11242998110520238401 => {
              redraw(1i32);
              current_block = 15129665204879337069;
            }
            13619733043935729992 => {
              loop {
                dot_next();
                dot_skip_over_ws();
                (*ptr_to_globals).cmdcnt -= 1;
                if !((*ptr_to_globals).cmdcnt > 0) {
                  break;
                }
              }
              current_block = 15129665204879337069;
            }
            9339065157412720613 => {
              dot_scroll(
                (*ptr_to_globals)
                  .rows
                  .wrapping_sub(2i32 as libc::c_uint)
                  .wrapping_div(2i32 as libc::c_uint) as libc::c_int,
                -1i32,
              );
              current_block = 15129665204879337069;
            }
            11447082683497798022 => {
              dot_scroll(1i32, -1i32);
              current_block = 15129665204879337069;
            }
            5182000506326660482 => {
              current_block = 13993698454868426881;
            }
            1105010766850597332 => {
              if !(*ptr_to_globals).reg[27].is_null() {
                p = begin_line((*ptr_to_globals).dot);
                q = end_line((*ptr_to_globals).dot);
                p = text_hole_delete(p, q, 1i32);
                p = p.offset(string_insert(p, (*ptr_to_globals).reg[27], 2i32) as isize);
                (*ptr_to_globals).dot = p;
                dot_skip_over_ws();
              }
              current_block = 15129665204879337069;
            }
            8616046655533110204 => {
              undo_pop();
              current_block = 15129665204879337069;
            }
            5127767458142431603 => {
              loop {
                (*ptr_to_globals).dot = end_line((*ptr_to_globals).dot);
                (*ptr_to_globals).cmdcnt -= 1;
                if (*ptr_to_globals).cmdcnt <= 0 {
                  break;
                }
                dot_next();
              }
              current_block = 15129665204879337069;
            }
            222014967776118151 => {
              (*ptr_to_globals).last_forward_char = get_one_char();
              current_block = 7856905509180742666;
            }
            11209792479411604110 => {
              loop {
                dot_prev();
                dot_skip_over_ws();
                (*ptr_to_globals).cmdcnt -= 1;
                if !((*ptr_to_globals).cmdcnt > 0) {
                  break;
                }
              }
              current_block = 15129665204879337069;
            }
            3364823792826654116 => {
              if (*ptr_to_globals).lmc_len != 0 {
                (*ptr_to_globals).ioq_start = crate::libbb::xfuncs_printf::xstrndup(
                  (*ptr_to_globals).last_modifying_cmd.as_mut_ptr(),
                  (*ptr_to_globals).lmc_len,
                );
                (*ptr_to_globals).ioq = (*ptr_to_globals).ioq_start
              }
              current_block = 15129665204879337069;
            }
            18096603330221575131 => {
              current_block = 17498168302144015873;
            }
            16891123271837848903 => {
              dot_end();
              current_block = 1752638907092016026;
            }
            8517235759107662071 => {
              current_block = 5847749760081351726;
            }
            12525254419223051704 => {
              if (*ptr_to_globals).dot < (*ptr_to_globals).end.offset(-1) {
                (*ptr_to_globals).dot = yank_delete(
                  (*ptr_to_globals).dot,
                  (*ptr_to_globals).dot,
                  1i32,
                  YANKDEL as libc::c_int,
                  1i32,
                )
              }
              current_block = 15129665204879337069;
            }
            15232911949322867522 => {
              current_block = 17251831742223396249;
            }
            10863374208794025069 => {
              current_block = 1895262434596074581;
            }
            451126677064669119 => {
              loop {
                dot_prev();
                (*ptr_to_globals).dot = move_to_col(
                  (*ptr_to_globals).dot,
                  (*ptr_to_globals).ccol + (*ptr_to_globals).offset,
                );
                (*ptr_to_globals).cmdcnt -= 1;
                if !((*ptr_to_globals).cmdcnt > 0) {
                  break;
                }
              }
              current_block = 15129665204879337069;
            }
            4611735929166613116 => {
              loop {
                if bb_ascii_isalnum(*(*ptr_to_globals).dot as libc::c_uchar) != 0
                  || *(*ptr_to_globals).dot as libc::c_int == '_' as i32
                {
                  (*ptr_to_globals).dot = skip_thing(
                    (*ptr_to_globals).dot,
                    1i32,
                    FORWARD as libc::c_int,
                    S_END_ALNUM as libc::c_int,
                  )
                } else if *strchrnul(
                  b"!\"#$%&\'()*+,-./:;<=>?@[\\]^_`{|}~\x00" as *const u8 as *const libc::c_char,
                  *(*ptr_to_globals).dot as libc::c_int,
                )
                .offset(0)
                  != 0
                {
                  (*ptr_to_globals).dot = skip_thing(
                    (*ptr_to_globals).dot,
                    1i32,
                    FORWARD as libc::c_int,
                    S_END_PUNCT as libc::c_int,
                  )
                }
                if (*ptr_to_globals).dot < (*ptr_to_globals).end.offset(-1) {
                  (*ptr_to_globals).dot = (*ptr_to_globals).dot.offset(1)
                }
                if ({
                  let mut bb__isspace: libc::c_uchar =
                    (*(*ptr_to_globals).dot as libc::c_int - 9i32) as libc::c_uchar;
                  (bb__isspace as libc::c_int == ' ' as i32 - 9i32
                    || bb__isspace as libc::c_int <= 13i32 - 9i32) as libc::c_int
                }) != 0
                {
                  (*ptr_to_globals).dot = skip_thing(
                    (*ptr_to_globals).dot,
                    2i32,
                    FORWARD as libc::c_int,
                    S_OVER_WS as libc::c_int,
                  )
                }
                (*ptr_to_globals).cmdcnt -= 1;
                if !((*ptr_to_globals).cmdcnt > 0) {
                  break;
                }
              }
              current_block = 15129665204879337069;
            }
            4386451087681909888 => {
              (*ptr_to_globals).dot =
                move_to_col((*ptr_to_globals).dot, (*ptr_to_globals).cmdcnt - 1i32);
              current_block = 15129665204879337069;
            }
            1296397779060594135 => {
              dot_begin();
              current_block = 15129665204879337069;
            }
            _ => {}
          }
          match current_block {
            15129665204879337069 => {}
            8629930936610358348 => {}
            _ => {
              match current_block {
                17251831742223396249 => {
                  dir = 0;
                  if c == 'X' as i32 {
                    dir = -1i32
                  }
                  loop {
                    if *(*ptr_to_globals).dot.offset(dir as isize) as libc::c_int != '\n' as i32 {
                      if c == 'X' as i32 {
                        (*ptr_to_globals).dot = (*ptr_to_globals).dot.offset(-1)
                      }
                      (*ptr_to_globals).dot = yank_delete(
                        (*ptr_to_globals).dot,
                        (*ptr_to_globals).dot,
                        0,
                        YANKDEL as libc::c_int,
                        1i32,
                      )
                    }
                    (*ptr_to_globals).cmdcnt -= 1;
                    if !((*ptr_to_globals).cmdcnt > 0) {
                      break;
                    }
                  }
                  end_cmd_q();
                  if c == 's' as i32 {
                    current_block = 8629930936610358348;
                  } else {
                    current_block = 15129665204879337069;
                  }
                }
                2087484904894455135 => {
                  dot_end();
                  (*ptr_to_globals).dot =
                    char_insert((*ptr_to_globals).dot, '\n' as i32 as libc::c_char, 1i32);
                  current_block = 8629930936610358348;
                }
                11945623545738147997 => {
                  (*ptr_to_globals).dot = (*ptr_to_globals).end.offset(-1);
                  if (*ptr_to_globals).cmdcnt > 0 {
                    (*ptr_to_globals).dot = find_line((*ptr_to_globals).cmdcnt)
                  }
                  dot_skip_over_ws();
                  current_block = 15129665204879337069;
                }
                5847749760081351726 => {
                  dir = FORWARD as libc::c_int;
                  if c == 'B' as i32 {
                    dir = BACK as libc::c_int
                  }
                  loop {
                    if c == 'W' as i32
                      || ({
                        let mut bb__isspace: libc::c_uchar =
                          (*(*ptr_to_globals).dot.offset(dir as isize) as libc::c_int - 9i32)
                            as libc::c_uchar;
                        (bb__isspace as libc::c_int == ' ' as i32 - 9i32
                          || bb__isspace as libc::c_int <= 13i32 - 9i32)
                          as libc::c_int
                      }) != 0
                    {
                      (*ptr_to_globals).dot =
                        skip_thing((*ptr_to_globals).dot, 1i32, dir, S_TO_WS as libc::c_int);
                      (*ptr_to_globals).dot =
                        skip_thing((*ptr_to_globals).dot, 2i32, dir, S_OVER_WS as libc::c_int)
                    }
                    if c != 'W' as i32 {
                      (*ptr_to_globals).dot =
                        skip_thing((*ptr_to_globals).dot, 1i32, dir, S_BEFORE_WS as libc::c_int)
                    }
                    (*ptr_to_globals).cmdcnt -= 1;
                    if !((*ptr_to_globals).cmdcnt > 0) {
                      break;
                    }
                  }
                  current_block = 15129665204879337069;
                }
                17440971994642376514 => {
                  current_block = 15129665204879337069;
                }
                7534742345255184552 => {
                  current_block = 17247297260531395789;
                }
                8800996768013373992 => {
                  loop {
                    dot_next();
                    (*ptr_to_globals).dot = move_to_col(
                      (*ptr_to_globals).dot,
                      (*ptr_to_globals).ccol + (*ptr_to_globals).offset,
                    );
                    (*ptr_to_globals).cmdcnt -= 1;
                    if !((*ptr_to_globals).cmdcnt > 0) {
                      break;
                    }
                  }
                  current_block = 15129665204879337069;
                }
                13993698454868426881 => {
                  loop {
                    dot_right();
                    (*ptr_to_globals).cmdcnt -= 1;
                    if !((*ptr_to_globals).cmdcnt > 0) {
                      break;
                    }
                  }
                  current_block = 15129665204879337069;
                }
                7856905509180742666 => {
                  while !((*ptr_to_globals).last_forward_char == 0) {
                    q = (*ptr_to_globals).dot.offset(1);
                    while q < (*ptr_to_globals).end.offset(-1)
                      && *q as libc::c_int != '\n' as i32
                      && *q as libc::c_int != (*ptr_to_globals).last_forward_char
                    {
                      q = q.offset(1)
                    }
                    if *q as libc::c_int == (*ptr_to_globals).last_forward_char {
                      (*ptr_to_globals).dot = q
                    }
                    (*ptr_to_globals).cmdcnt -= 1;
                    if !((*ptr_to_globals).cmdcnt > 0) {
                      break;
                    }
                  }
                  current_block = 15129665204879337069;
                }
                17498168302144015873 => {
                  current_block = 8681395796513813967;
                }
                1752638907092016026 => {
                  if *(*ptr_to_globals).dot as libc::c_int != '\n' as i32 {
                    (*ptr_to_globals).dot = (*ptr_to_globals).dot.offset(1)
                  }
                  current_block = 8629930936610358348;
                }
                3268579060917229304 => {
                  current_block = 8629930936610358348;
                }
                1895262434596074581 => {
                  current_block = 8908416993177701018;
                }
                _ => {}
              }
              match current_block {
                8629930936610358348 => {}
                15129665204879337069 => {}
                _ => {
                  match current_block {
                    17247297260531395789 => {
                      loop {
                        dot_left();
                        (*ptr_to_globals).cmdcnt -= 1;
                        if !((*ptr_to_globals).cmdcnt > 0) {
                          break;
                        }
                      }
                      current_block = 15129665204879337069;
                    }
                    8681395796513813967 => {
                      current_block = 5591548203144509315;
                    }
                    8908416993177701018 => {
                      current_block = 16124761010012532485;
                    }
                    _ => {}
                  }
                  match current_block {
                    15129665204879337069 => {}
                    _ => {
                      match current_block {
                        16124761010012532485 => {
                          let mut yf: libc::c_int = 0;
                          let mut ml: libc::c_int = 0;
                          let mut whole: libc::c_int = 0;
                          yf = YANKDEL as libc::c_int;
                          if c == 'y' as i32 || c == 'Y' as i32 {
                            yf = YANKONLY as libc::c_int
                          }
                          c1 = 'y' as i32;
                          if c != 'Y' as i32 {
                            c1 = get_one_char()
                          }
                          ml = find_range(&mut p, &mut q, c1 as libc::c_char);
                          place_cursor(0i32, 0);
                          if c1 == 27i32 {
                            c1 = 27i32;
                            c = c1
                          } else if !strchr(b"wW\x00" as *const u8 as *const libc::c_char, c1)
                            .is_null()
                          {
                            ml = 0;
                            if c == 'c' as i32 {
                              while ({
                                let mut bb__isspace: libc::c_uchar =
                                  (*q as libc::c_int - 9i32) as libc::c_uchar;
                                (bb__isspace as libc::c_int == ' ' as i32 - 9i32
                                  || bb__isspace as libc::c_int <= 13i32 - 9i32)
                                  as libc::c_int
                              }) != 0
                                && q > p
                              {
                                q = q.offset(-1)
                              }
                            }
                            (*ptr_to_globals).dot = yank_delete(p, q, ml, yf, 1i32)
                          } else if !strchr(
                            b"^0bBeEft%$ lh\x08\x7f\x00" as *const u8 as *const libc::c_char,
                            c1,
                          )
                          .is_null()
                          {
                            (*ptr_to_globals).dot = yank_delete(p, q, ml, yf, 1i32)
                          } else if !strchr(
                            b"cdykjGHL+-{}\r\n\x00" as *const u8 as *const libc::c_char,
                            c1,
                          )
                          .is_null()
                          {
                            (*ptr_to_globals).dot = yank_delete(p, q, ml, yf, 1i32);
                            whole = 1i32
                          } else {
                            c1 = 27i32;
                            c = c1;
                            ml = 0;
                            indicate_error();
                          }
                          if ml != 0 && whole != 0 {
                            if c == 'c' as i32 {
                              (*ptr_to_globals).dot = char_insert(
                                (*ptr_to_globals).dot,
                                '\n' as i32 as libc::c_char,
                                2i32,
                              );
                              if whole != 0
                                && (*ptr_to_globals).dot != (*ptr_to_globals).end.offset(-1)
                              {
                                dot_prev();
                              }
                            } else if c == 'd' as i32 {
                              dot_begin();
                              dot_skip_over_ws();
                            }
                          }
                          if c1 != 27i32 {
                            if c == 'c' as i32 {
                              strcpy(
                                buf.as_mut_ptr(),
                                b"Change\x00" as *const u8 as *const libc::c_char,
                              );
                              current_block = 8629930936610358348;
                            } else {
                              if c == 'd' as i32 {
                                strcpy(
                                  buf.as_mut_ptr(),
                                  b"Delete\x00" as *const u8 as *const libc::c_char,
                                );
                              }
                              if c == 'y' as i32 || c == 'Y' as i32 {
                                strcpy(
                                  buf.as_mut_ptr(),
                                  b"Yank\x00" as *const u8 as *const libc::c_char,
                                );
                              }
                              p = (*ptr_to_globals).reg[(*ptr_to_globals).YDreg as usize];
                              q = p.offset(strlen(p) as isize);
                              cnt = 0;
                              while p <= q {
                                if *p as libc::c_int == '\n' as i32 {
                                  cnt += 1
                                }
                                p = p.offset(1)
                              }
                              status_line(
                                b"%s %u lines (%u chars) using [%c]\x00" as *const u8
                                  as *const libc::c_char,
                                buf.as_mut_ptr(),
                                cnt,
                                strlen((*ptr_to_globals).reg[(*ptr_to_globals).YDreg as usize])
                                  as libc::c_uint,
                                what_reg() as libc::c_int,
                              );
                              end_cmd_q();
                              current_block = 15129665204879337069;
                            }
                          } else {
                            current_block = 15129665204879337069;
                          }
                        }
                        5591548203144509315 => {
                          current_block = 2636677179867529885;
                        }
                        _ => {}
                      }
                      match current_block {
                        15129665204879337069 => {}
                        8629930936610358348 => {}
                        _ => {
                          match current_block {
                            2636677179867529885 => {
                              current_block = 12309206730560524281;
                            }
                            _ => {}
                          }
                          match current_block {
                            12309206730560524281 => {
                              current_block = 3325768110057758661;
                            }
                            _ => {}
                          }
                          match current_block {
                            3325768110057758661 => {
                              current_block = 14815832896553429982;
                            }
                            _ => {}
                          }
                          match current_block {
                            14815832896553429982 => {
                              current_block = 10731695520297161438;
                            }
                            _ => {}
                          }
                          match current_block {
                            10731695520297161438 => {
                              if c == '0' as i32 && (*ptr_to_globals).cmdcnt < 1i32 {
                                dot_begin();
                              } else {
                                (*ptr_to_globals).cmdcnt =
                                  (*ptr_to_globals).cmdcnt * 10i32 + (c - '0' as i32)
                              }
                              current_block = 15129665204879337069;
                            }
                            _ => {}
                          }
                          match current_block {
                            15129665204879337069 => {}
                            _ => {
                              loop {
                                match current_block {
                                  16813369756331276724 => {
                                    msg = std::ptr::null();
                                    current_block = 7392824444931029276;
                                  }
                                  7392824444931029276 => {
                                    dir = FORWARD as libc::c_int;
                                    p = (*ptr_to_globals).dot.offset(1);
                                    if *(*ptr_to_globals).last_search_pattern.offset(0)
                                      as libc::c_int
                                      == '?' as i32
                                    {
                                      dir = BACK as libc::c_int;
                                      p = (*ptr_to_globals).dot.offset(-1)
                                    }
                                    current_block = 4166979493554389389;
                                  }
                                  _ => {
                                    q = char_search(
                                      p,
                                      (*ptr_to_globals).last_search_pattern.offset(1),
                                      dir << 1i32 | FULL as libc::c_int,
                                    );
                                    if !q.is_null() {
                                      (*ptr_to_globals).dot = q;
                                      msg = std::ptr::null()
                                    } else {
                                      p = (*ptr_to_globals).text;
                                      if dir == BACK as libc::c_int {
                                        p = (*ptr_to_globals).end.offset(-1)
                                      }
                                      q = char_search(
                                        p,
                                        (*ptr_to_globals).last_search_pattern.offset(1),
                                        dir << 1i32 | FULL as libc::c_int,
                                      );
                                      if !q.is_null() {
                                        (*ptr_to_globals).dot = q;
                                        msg = b"search hit BOTTOM, continuing at TOP\x00"
                                          as *const u8
                                          as *const libc::c_char;
                                        if dir == BACK as libc::c_int {
                                          msg = b"search hit TOP, continuing at BOTTOM\x00"
                                            as *const u8
                                            as *const libc::c_char
                                        }
                                      } else {
                                        msg = b"Pattern not found\x00" as *const u8
                                          as *const libc::c_char
                                      }
                                    }
                                    if !msg.is_null() {
                                      status_line_bold(
                                        b"%s\x00" as *const u8 as *const libc::c_char,
                                        msg,
                                      );
                                    }
                                    (*ptr_to_globals).cmdcnt -= 1;
                                    if (*ptr_to_globals).cmdcnt > 0 {
                                      current_block = 16813369756331276724;
                                    } else {
                                      break;
                                    }
                                  }
                                }
                              }
                              current_block = 15129665204879337069;
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
        60 | 62 => {
          current_block = 11937696639986586685;
          match current_block {
            16992905640583886232 => {
              loop {
                if (*(*ptr_to_globals).dot as libc::c_int - 'a' as i32) as libc::c_uchar
                  as libc::c_int
                  <= 'z' as i32 - 'a' as i32
                {
                  undo_push(
                    (*ptr_to_globals).dot,
                    1i32 as libc::c_uint,
                    1i32 as libc::c_uchar,
                  );
                  *(*ptr_to_globals).dot =
                    bb_ascii_toupper(*(*ptr_to_globals).dot as libc::c_uchar) as libc::c_char;
                  undo_push(
                    (*ptr_to_globals).dot,
                    1i32 as libc::c_uint,
                    2i32 as libc::c_uchar,
                  );
                } else if (*(*ptr_to_globals).dot as libc::c_int - 'A' as i32) as libc::c_uchar
                  as libc::c_int
                  <= 'Z' as i32 - 'A' as i32
                {
                  undo_push(
                    (*ptr_to_globals).dot,
                    1i32 as libc::c_uint,
                    1i32 as libc::c_uchar,
                  );
                  *(*ptr_to_globals).dot =
                    bb_ascii_tolower(*(*ptr_to_globals).dot as libc::c_uchar) as libc::c_char;
                  undo_push(
                    (*ptr_to_globals).dot,
                    1i32 as libc::c_uint,
                    2i32 as libc::c_uchar,
                  );
                }
                dot_right();
                (*ptr_to_globals).cmdcnt -= 1;
                if !((*ptr_to_globals).cmdcnt > 0) {
                  break;
                }
              }
              end_cmd_q();
              current_block = 15129665204879337069;
            }
            8729655159604064397 => {
              c1 = get_one_char();
              cnt = 0;
              if c1 == '.' as i32 {
                cnt = (*ptr_to_globals)
                  .rows
                  .wrapping_sub(2i32 as libc::c_uint)
                  .wrapping_div(2i32 as libc::c_uint) as libc::c_int
              }
              if c1 == '-' as i32 {
                cnt = (*ptr_to_globals).rows.wrapping_sub(2i32 as libc::c_uint) as libc::c_int
              }
              (*ptr_to_globals).screenbegin = begin_line((*ptr_to_globals).dot);
              dot_scroll(cnt, -1i32);
              current_block = 15129665204879337069;
            }
            15899500648299942075 => {
              (*ptr_to_globals).last_forward_char = get_one_char();
              do_cmd(';' as i32);
              if *(*ptr_to_globals).dot as libc::c_int == (*ptr_to_globals).last_forward_char {
                dot_left();
              }
              (*ptr_to_globals).last_forward_char = 0;
              current_block = 15129665204879337069;
            }
            9051390181078481641 => {
              c1 = get_one_char();
              if *(*ptr_to_globals).dot as libc::c_int != '\n' as i32 {
                (*ptr_to_globals).dot =
                  text_hole_delete((*ptr_to_globals).dot, (*ptr_to_globals).dot, 1i32);
                (*ptr_to_globals).dot =
                  char_insert((*ptr_to_globals).dot, c1 as libc::c_char, 2i32);
                dot_left();
              }
              end_cmd_q();
              current_block = 15129665204879337069;
            }
            877115918601926659 => {
              dir = FORWARD as libc::c_int;
              if c == 'b' as i32 {
                dir = BACK as libc::c_int
              }
              while !((*ptr_to_globals).dot.offset(dir as isize) < (*ptr_to_globals).text
                || (*ptr_to_globals).dot.offset(dir as isize) > (*ptr_to_globals).end.offset(-1))
              {
                (*ptr_to_globals).dot = (*ptr_to_globals).dot.offset(dir as isize);
                if ({
                  let mut bb__isspace: libc::c_uchar =
                    (*(*ptr_to_globals).dot as libc::c_int - 9i32) as libc::c_uchar;
                  (bb__isspace as libc::c_int == ' ' as i32 - 9i32
                    || bb__isspace as libc::c_int <= 13i32 - 9i32) as libc::c_int
                }) != 0
                {
                  (*ptr_to_globals).dot = skip_thing(
                    (*ptr_to_globals).dot,
                    if c == 'e' as i32 { 2i32 } else { 1i32 },
                    dir,
                    S_OVER_WS as libc::c_int,
                  )
                }
                if bb_ascii_isalnum(*(*ptr_to_globals).dot as libc::c_uchar) != 0
                  || *(*ptr_to_globals).dot as libc::c_int == '_' as i32
                {
                  (*ptr_to_globals).dot =
                    skip_thing((*ptr_to_globals).dot, 1i32, dir, S_END_ALNUM as libc::c_int)
                } else if *strchrnul(
                  b"!\"#$%&\'()*+,-./:;<=>?@[\\]^_`{|}~\x00" as *const u8 as *const libc::c_char,
                  *(*ptr_to_globals).dot as libc::c_int,
                )
                .offset(0)
                  != 0
                {
                  (*ptr_to_globals).dot =
                    skip_thing((*ptr_to_globals).dot, 1i32, dir, S_END_PUNCT as libc::c_int)
                }
                (*ptr_to_globals).cmdcnt -= 1;
                if !((*ptr_to_globals).cmdcnt > 0) {
                  break;
                }
              }
              current_block = 15129665204879337069;
            }
            1085022737867179637 => {
              dot_begin();
              dot_skip_over_ws();
              current_block = 15129665204879337069;
            }
            3113147720494587438 => {
              c1 = get_one_char();
              if c1 != 'Z' as i32 {
                indicate_error();
              } else if (*ptr_to_globals).modified_count != 0 {
                if 1i32 != 0 && (*ptr_to_globals).readonly_mode as libc::c_int != 0 {
                  status_line_bold(
                    b"\'%s\' is read only\x00" as *const u8 as *const libc::c_char,
                    (*ptr_to_globals).current_filename,
                  );
                } else {
                  cnt = file_write(
                    (*ptr_to_globals).current_filename,
                    (*ptr_to_globals).text,
                    (*ptr_to_globals).end.offset(-1),
                  );
                  if cnt < 0 {
                    if cnt == -1i32 {
                      status_line_bold(b"Write error: %m\x00" as *const u8 as *const libc::c_char);
                    }
                  } else if cnt as libc::c_long
                    == (*ptr_to_globals)
                      .end
                      .offset(-1)
                      .wrapping_offset_from((*ptr_to_globals).text)
                      as libc::c_long
                      + 1
                  {
                    (*ptr_to_globals).editing = 0 as smallint
                  }
                }
              } else {
                (*ptr_to_globals).editing = 0 as smallint
              }
              current_block = 15129665204879337069;
            }
            12960118908218882441 => {
              p = begin_line((*ptr_to_globals).dot);
              if *p.offset(-1i32 as isize) as libc::c_int == '\n' as i32 {
                dot_prev();
                current_block = 2087484904894455135;
              } else {
                dot_begin();
                (*ptr_to_globals).dot =
                  char_insert((*ptr_to_globals).dot, '\n' as i32 as libc::c_char, 1i32);
                dot_prev();
                current_block = 8629930936610358348;
              }
            }
            8720450212473544924 => {
              (*ptr_to_globals).dot = (*ptr_to_globals).screenbegin;
              cnt = 0;
              while (cnt as libc::c_uint)
                < (*ptr_to_globals)
                  .rows
                  .wrapping_sub(1i32 as libc::c_uint)
                  .wrapping_div(2i32 as libc::c_uint)
              {
                (*ptr_to_globals).dot = next_line((*ptr_to_globals).dot);
                cnt += 1
              }
              current_block = 15129665204879337069;
            }
            13015277209715431090 => {
              (*ptr_to_globals).dot = end_screen();
              if (*ptr_to_globals).cmdcnt as libc::c_uint
                > (*ptr_to_globals).rows.wrapping_sub(1i32 as libc::c_uint)
              {
                (*ptr_to_globals).cmdcnt =
                  (*ptr_to_globals).rows.wrapping_sub(1i32 as libc::c_uint) as libc::c_int
              }
              (*ptr_to_globals).cmdcnt -= 1;
              if (*ptr_to_globals).cmdcnt > 0 {
                do_cmd('-' as i32);
              }
              dot_begin();
              dot_skip_over_ws();
              current_block = 15129665204879337069;
            }
            9800435767766781385 => {
              loop {
                dot_end();
                if (*ptr_to_globals).dot < (*ptr_to_globals).end.offset(-1) {
                  undo_push(
                    (*ptr_to_globals).dot,
                    1i32 as libc::c_uint,
                    1i32 as libc::c_uchar,
                  );
                  let fresh15 = (*ptr_to_globals).dot;
                  (*ptr_to_globals).dot = (*ptr_to_globals).dot.offset(1);
                  *fresh15 = ' ' as i32 as libc::c_char;
                  undo_push(
                    (*ptr_to_globals).dot.offset(-1),
                    1i32 as libc::c_uint,
                    2i32 as libc::c_uchar,
                  );
                  while ({
                    let mut bb__isblank: libc::c_uchar = *(*ptr_to_globals).dot as libc::c_uchar;
                    (bb__isblank as libc::c_int == ' ' as i32
                      || bb__isblank as libc::c_int == '\t' as i32)
                      as libc::c_int
                  }) != 0
                  {
                    text_hole_delete((*ptr_to_globals).dot, (*ptr_to_globals).dot, 2i32);
                  }
                }
                (*ptr_to_globals).cmdcnt -= 1;
                if !((*ptr_to_globals).cmdcnt > 0) {
                  break;
                }
              }
              end_cmd_q();
              current_block = 15129665204879337069;
            }
            3432363526595694666 => {
              dot_begin();
              dot_skip_over_ws();
              current_block = 3268579060917229304;
            }
            3494829253343353619 => {
              (*ptr_to_globals).dot = (*ptr_to_globals).screenbegin;
              if (*ptr_to_globals).cmdcnt as libc::c_uint
                > (*ptr_to_globals).rows.wrapping_sub(1i32 as libc::c_uint)
              {
                (*ptr_to_globals).cmdcnt =
                  (*ptr_to_globals).rows.wrapping_sub(1i32 as libc::c_uint) as libc::c_int
              }
              (*ptr_to_globals).cmdcnt -= 1;
              if (*ptr_to_globals).cmdcnt > 0 {
                do_cmd('+' as i32);
              }
              dot_skip_over_ws();
              current_block = 15129665204879337069;
            }
            17973101765331640574 => {
              c1 = get_one_char();
              if c1 != 'g' as i32 {
                buf[0] = 'g' as i32 as libc::c_char;
                buf[1] = if c1 >= 0 { c1 } else { '*' as i32 } as libc::c_char;
                buf[2] = '\u{0}' as i32 as libc::c_char;
                not_implemented(buf.as_mut_ptr());
                current_block = 15129665204879337069;
              } else {
                if (*ptr_to_globals).cmdcnt == 0 {
                  (*ptr_to_globals).cmdcnt = 1i32
                }
                current_block = 11945623545738147997;
              }
            }
            16546625800574160972 => {
              save_dot = (*ptr_to_globals).dot;
              (*ptr_to_globals).dot = dollar_line((*ptr_to_globals).dot);
              (*ptr_to_globals).dot = yank_delete(
                save_dot,
                (*ptr_to_globals).dot,
                0,
                YANKDEL as libc::c_int,
                1i32,
              );
              if c == 'C' as i32 {
                current_block = 8629930936610358348;
              } else {
                if c == 'D' as i32 {
                  end_cmd_q();
                }
                current_block = 15129665204879337069;
              }
            }
            11937696639986586685 => {
              cnt = count_lines((*ptr_to_globals).text, (*ptr_to_globals).dot);
              c1 = get_one_char();
              find_range(&mut p, &mut q, c1 as libc::c_char);
              yank_delete(p, q, 1i32, YANKONLY as libc::c_int, 0);
              p = begin_line(p);
              q = end_line(q);
              i = count_lines(p, q);
              while i > 0 {
                if c == '<' as i32 {
                  if *p as libc::c_int == '\t' as i32 {
                    text_hole_delete(p, p, 0);
                  } else if *p as libc::c_int == ' ' as i32 {
                    j = 0;
                    while *p as libc::c_int == ' ' as i32 && j < (*ptr_to_globals).tabstop {
                      text_hole_delete(p, p, 0);
                      j += 1
                    }
                  }
                } else if c == '>' as i32 {
                  char_insert(p, '\t' as i32 as libc::c_char, 1i32);
                }
                i -= 1;
                p = next_line(p)
              }
              (*ptr_to_globals).dot = find_line(cnt);
              dot_skip_over_ws();
              end_cmd_q();
              current_block = 15129665204879337069;
            }
            17725350714912028156 => {
              p = get_input_line(b":\x00" as *const u8 as *const libc::c_char);
              colon(p);
              current_block = 15129665204879337069;
            }
            14526470074083880812 => {
              q = char_search(
                (*ptr_to_globals).dot,
                b"\n\n\x00" as *const u8 as *const libc::c_char,
                (FORWARD as libc::c_int) << 1i32 | FULL as libc::c_int,
              );
              if !q.is_null() {
                (*ptr_to_globals).dot = next_line(q)
              }
              current_block = 15129665204879337069;
            }
            8893187391306414141 => {
              q = char_search(
                (*ptr_to_globals).dot,
                b"\n\n\x00" as *const u8 as *const libc::c_char,
                ((BACK as libc::c_int as libc::c_uint) << 1i32
                  | FULL as libc::c_int as libc::c_uint) as libc::c_int,
              );
              if !q.is_null() {
                (*ptr_to_globals).dot = next_line(q)
              }
              current_block = 15129665204879337069;
            }
            7021673758293221412 => {
              dir = BACK as libc::c_int;
              p = (*ptr_to_globals).dot.offset(-1);
              if *(*ptr_to_globals).last_search_pattern.offset(0) as libc::c_int == '?' as i32 {
                dir = FORWARD as libc::c_int;
                p = (*ptr_to_globals).dot.offset(1)
              }
              current_block = 4166979493554389389;
            }
            18374191879090272823 => {
              buf[0] = c as libc::c_char;
              buf[1] = '\u{0}' as i32 as libc::c_char;
              q = get_input_line(buf.as_mut_ptr());
              if *q.offset(0) as libc::c_int != 0 && *q.offset(1) == 0 {
                if *(*ptr_to_globals).last_search_pattern.offset(0) != 0 {
                  *(*ptr_to_globals).last_search_pattern.offset(0) = c as libc::c_char
                }
                current_block = 7392824444931029276;
              } else if *q.offset(0) != 0 {
                free((*ptr_to_globals).last_search_pattern as *mut libc::c_void);
                (*ptr_to_globals).last_search_pattern = crate::libbb::xfuncs_printf::xstrdup(q);
                current_block = 7392824444931029276;
              } else {
                current_block = 15129665204879337069;
              }
            }
            16407828456666301883 => {
              if (*ptr_to_globals).last_forward_char == 0 {
                current_block = 15129665204879337069;
              } else {
                loop {
                  q = (*ptr_to_globals).dot.offset(-1);
                  while q >= (*ptr_to_globals).text
                    && *q as libc::c_int != '\n' as i32
                    && *q as libc::c_int != (*ptr_to_globals).last_forward_char
                  {
                    q = q.offset(-1)
                  }
                  if q >= (*ptr_to_globals).text
                    && *q as libc::c_int == (*ptr_to_globals).last_forward_char
                  {
                    (*ptr_to_globals).dot = q
                  }
                  (*ptr_to_globals).cmdcnt -= 1;
                  if !((*ptr_to_globals).cmdcnt > 0) {
                    break;
                  }
                }
                current_block = 15129665204879337069;
              }
            }
            9018432604062702004 => {
              q = (*ptr_to_globals).dot;
              while q < (*ptr_to_globals).end && *q as libc::c_int != '\n' as i32 {
                if !strchr(
                  b"()[]{}\x00" as *const u8 as *const libc::c_char,
                  *q as libc::c_int,
                )
                .is_null()
                {
                  p = find_pair(q, *q);
                  if p.is_null() {
                    indicate_error();
                  } else {
                    (*ptr_to_globals).dot = p
                  }
                  break;
                } else {
                  q = q.offset(1)
                }
              }
              if *q as libc::c_int == '\n' as i32 {
                indicate_error();
              }
              current_block = 15129665204879337069;
            }
            10247103787464459848 => {
              p = (*ptr_to_globals).reg[(*ptr_to_globals).YDreg as usize];
              if p.is_null() {
                status_line_bold(
                  b"Nothing in register %c\x00" as *const u8 as *const libc::c_char,
                  what_reg() as libc::c_int,
                );
              } else {
                if !strchr(p, '\n' as i32).is_null() {
                  if c == 'P' as i32 {
                    dot_begin();
                  }
                  if c == 'p' as i32 {
                    if end_line((*ptr_to_globals).dot) == (*ptr_to_globals).end.offset(-1) {
                      (*ptr_to_globals).dot = (*ptr_to_globals).end
                    } else {
                      dot_next();
                    }
                  }
                } else if c == 'p' as i32 {
                  dot_right();
                }
                string_insert((*ptr_to_globals).dot, p, 1i32);
                end_cmd_q();
              }
              current_block = 15129665204879337069;
            }
            15260732871948875843 => {
              c1 = (get_one_char() | 0x20i32) - 'a' as i32;
              if c1 as libc::c_uint <= 25i32 as libc::c_uint {
                (*ptr_to_globals).mark[c1 as usize] = (*ptr_to_globals).dot
              } else {
                indicate_error();
              }
              current_block = 15129665204879337069;
            }
            12738322036487086035 => {
              c1 = get_one_char() | 0x20i32;
              if (c1 - 'a' as i32) as libc::c_uint <= 25i32 as libc::c_uint {
                c1 = c1 - 'a' as i32;
                q = (*ptr_to_globals).mark[c1 as usize];
                if (*ptr_to_globals).text <= q && q < (*ptr_to_globals).end {
                  (*ptr_to_globals).dot = q;
                  dot_begin();
                  dot_skip_over_ws();
                }
              } else if c1 == '\'' as i32 {
                (*ptr_to_globals).dot = swap_context((*ptr_to_globals).dot);
                dot_begin();
                dot_skip_over_ws();
              } else {
                indicate_error();
              }
              current_block = 15129665204879337069;
            }
            13255096073384561358 => {
              c1 = (get_one_char() | 0x20i32) - 'a' as i32;
              if c1 as libc::c_uint <= 25i32 as libc::c_uint {
                (*ptr_to_globals).YDreg = c1 as smalluint
              } else {
                indicate_error();
              }
              current_block = 15129665204879337069;
            }
            10258711639984089377 => {
              if (*ptr_to_globals).cmd_mode as libc::c_int == 0 {
                indicate_error();
              }
              (*ptr_to_globals).cmd_mode = 0 as smallint;
              undo_queue_commit();
              end_cmd_q();
              (*ptr_to_globals).last_status_cksum = 0;
              current_block = 15129665204879337069;
            }
            11439127087547047736 => {
              buf[0] = c as libc::c_char;
              buf[1] = '\u{0}' as i32 as libc::c_char;
              not_implemented(buf.as_mut_ptr());
              end_cmd_q();
              current_block = 17440971994642376514;
            }
            7961798899781870241 => {
              dot_scroll(
                (*ptr_to_globals).rows.wrapping_sub(2i32 as libc::c_uint) as libc::c_int,
                -1i32,
              );
              current_block = 15129665204879337069;
            }
            9426343755402444879 => {
              dot_scroll(
                (*ptr_to_globals)
                  .rows
                  .wrapping_sub(2i32 as libc::c_uint)
                  .wrapping_div(2i32 as libc::c_uint) as libc::c_int,
                1i32,
              );
              current_block = 15129665204879337069;
            }
            13352459794680105913 => {
              dot_scroll(1i32, 1i32);
              current_block = 15129665204879337069;
            }
            14142272253464333006 => {
              dot_scroll(
                (*ptr_to_globals).rows.wrapping_sub(2i32 as libc::c_uint) as libc::c_int,
                1i32,
              );
              current_block = 15129665204879337069;
            }
            10758177197742640066 => {
              (*ptr_to_globals).last_status_cksum = 0;
              current_block = 15129665204879337069;
            }
            6152256259730122749 => {
              current_block = 7534742345255184552;
            }
            12883932598258173301 => {
              current_block = 8800996768013373992;
            }
            11242998110520238401 => {
              redraw(1i32);
              current_block = 15129665204879337069;
            }
            13619733043935729992 => {
              loop {
                dot_next();
                dot_skip_over_ws();
                (*ptr_to_globals).cmdcnt -= 1;
                if !((*ptr_to_globals).cmdcnt > 0) {
                  break;
                }
              }
              current_block = 15129665204879337069;
            }
            9339065157412720613 => {
              dot_scroll(
                (*ptr_to_globals)
                  .rows
                  .wrapping_sub(2i32 as libc::c_uint)
                  .wrapping_div(2i32 as libc::c_uint) as libc::c_int,
                -1i32,
              );
              current_block = 15129665204879337069;
            }
            11447082683497798022 => {
              dot_scroll(1i32, -1i32);
              current_block = 15129665204879337069;
            }
            5182000506326660482 => {
              current_block = 13993698454868426881;
            }
            1105010766850597332 => {
              if !(*ptr_to_globals).reg[27].is_null() {
                p = begin_line((*ptr_to_globals).dot);
                q = end_line((*ptr_to_globals).dot);
                p = text_hole_delete(p, q, 1i32);
                p = p.offset(string_insert(p, (*ptr_to_globals).reg[27], 2i32) as isize);
                (*ptr_to_globals).dot = p;
                dot_skip_over_ws();
              }
              current_block = 15129665204879337069;
            }
            8616046655533110204 => {
              undo_pop();
              current_block = 15129665204879337069;
            }
            5127767458142431603 => {
              loop {
                (*ptr_to_globals).dot = end_line((*ptr_to_globals).dot);
                (*ptr_to_globals).cmdcnt -= 1;
                if (*ptr_to_globals).cmdcnt <= 0 {
                  break;
                }
                dot_next();
              }
              current_block = 15129665204879337069;
            }
            222014967776118151 => {
              (*ptr_to_globals).last_forward_char = get_one_char();
              current_block = 7856905509180742666;
            }
            11209792479411604110 => {
              loop {
                dot_prev();
                dot_skip_over_ws();
                (*ptr_to_globals).cmdcnt -= 1;
                if !((*ptr_to_globals).cmdcnt > 0) {
                  break;
                }
              }
              current_block = 15129665204879337069;
            }
            3364823792826654116 => {
              if (*ptr_to_globals).lmc_len != 0 {
                (*ptr_to_globals).ioq_start = crate::libbb::xfuncs_printf::xstrndup(
                  (*ptr_to_globals).last_modifying_cmd.as_mut_ptr(),
                  (*ptr_to_globals).lmc_len,
                );
                (*ptr_to_globals).ioq = (*ptr_to_globals).ioq_start
              }
              current_block = 15129665204879337069;
            }
            18096603330221575131 => {
              current_block = 17498168302144015873;
            }
            16891123271837848903 => {
              dot_end();
              current_block = 1752638907092016026;
            }
            8517235759107662071 => {
              current_block = 5847749760081351726;
            }
            12525254419223051704 => {
              if (*ptr_to_globals).dot < (*ptr_to_globals).end.offset(-1) {
                (*ptr_to_globals).dot = yank_delete(
                  (*ptr_to_globals).dot,
                  (*ptr_to_globals).dot,
                  1i32,
                  YANKDEL as libc::c_int,
                  1i32,
                )
              }
              current_block = 15129665204879337069;
            }
            15232911949322867522 => {
              current_block = 17251831742223396249;
            }
            10863374208794025069 => {
              current_block = 1895262434596074581;
            }
            451126677064669119 => {
              loop {
                dot_prev();
                (*ptr_to_globals).dot = move_to_col(
                  (*ptr_to_globals).dot,
                  (*ptr_to_globals).ccol + (*ptr_to_globals).offset,
                );
                (*ptr_to_globals).cmdcnt -= 1;
                if !((*ptr_to_globals).cmdcnt > 0) {
                  break;
                }
              }
              current_block = 15129665204879337069;
            }
            4611735929166613116 => {
              loop {
                if bb_ascii_isalnum(*(*ptr_to_globals).dot as libc::c_uchar) != 0
                  || *(*ptr_to_globals).dot as libc::c_int == '_' as i32
                {
                  (*ptr_to_globals).dot = skip_thing(
                    (*ptr_to_globals).dot,
                    1i32,
                    FORWARD as libc::c_int,
                    S_END_ALNUM as libc::c_int,
                  )
                } else if *strchrnul(
                  b"!\"#$%&\'()*+,-./:;<=>?@[\\]^_`{|}~\x00" as *const u8 as *const libc::c_char,
                  *(*ptr_to_globals).dot as libc::c_int,
                )
                .offset(0)
                  != 0
                {
                  (*ptr_to_globals).dot = skip_thing(
                    (*ptr_to_globals).dot,
                    1i32,
                    FORWARD as libc::c_int,
                    S_END_PUNCT as libc::c_int,
                  )
                }
                if (*ptr_to_globals).dot < (*ptr_to_globals).end.offset(-1) {
                  (*ptr_to_globals).dot = (*ptr_to_globals).dot.offset(1)
                }
                if ({
                  let mut bb__isspace: libc::c_uchar =
                    (*(*ptr_to_globals).dot as libc::c_int - 9i32) as libc::c_uchar;
                  (bb__isspace as libc::c_int == ' ' as i32 - 9i32
                    || bb__isspace as libc::c_int <= 13i32 - 9i32) as libc::c_int
                }) != 0
                {
                  (*ptr_to_globals).dot = skip_thing(
                    (*ptr_to_globals).dot,
                    2i32,
                    FORWARD as libc::c_int,
                    S_OVER_WS as libc::c_int,
                  )
                }
                (*ptr_to_globals).cmdcnt -= 1;
                if !((*ptr_to_globals).cmdcnt > 0) {
                  break;
                }
              }
              current_block = 15129665204879337069;
            }
            4386451087681909888 => {
              (*ptr_to_globals).dot =
                move_to_col((*ptr_to_globals).dot, (*ptr_to_globals).cmdcnt - 1i32);
              current_block = 15129665204879337069;
            }
            1296397779060594135 => {
              dot_begin();
              current_block = 15129665204879337069;
            }
            _ => {}
          }
          match current_block {
            15129665204879337069 => {}
            8629930936610358348 => {}
            _ => {
              match current_block {
                17251831742223396249 => {
                  dir = 0;
                  if c == 'X' as i32 {
                    dir = -1i32
                  }
                  loop {
                    if *(*ptr_to_globals).dot.offset(dir as isize) as libc::c_int != '\n' as i32 {
                      if c == 'X' as i32 {
                        (*ptr_to_globals).dot = (*ptr_to_globals).dot.offset(-1)
                      }
                      (*ptr_to_globals).dot = yank_delete(
                        (*ptr_to_globals).dot,
                        (*ptr_to_globals).dot,
                        0,
                        YANKDEL as libc::c_int,
                        1i32,
                      )
                    }
                    (*ptr_to_globals).cmdcnt -= 1;
                    if !((*ptr_to_globals).cmdcnt > 0) {
                      break;
                    }
                  }
                  end_cmd_q();
                  if c == 's' as i32 {
                    current_block = 8629930936610358348;
                  } else {
                    current_block = 15129665204879337069;
                  }
                }
                2087484904894455135 => {
                  dot_end();
                  (*ptr_to_globals).dot =
                    char_insert((*ptr_to_globals).dot, '\n' as i32 as libc::c_char, 1i32);
                  current_block = 8629930936610358348;
                }
                11945623545738147997 => {
                  (*ptr_to_globals).dot = (*ptr_to_globals).end.offset(-1);
                  if (*ptr_to_globals).cmdcnt > 0 {
                    (*ptr_to_globals).dot = find_line((*ptr_to_globals).cmdcnt)
                  }
                  dot_skip_over_ws();
                  current_block = 15129665204879337069;
                }
                5847749760081351726 => {
                  dir = FORWARD as libc::c_int;
                  if c == 'B' as i32 {
                    dir = BACK as libc::c_int
                  }
                  loop {
                    if c == 'W' as i32
                      || ({
                        let mut bb__isspace: libc::c_uchar =
                          (*(*ptr_to_globals).dot.offset(dir as isize) as libc::c_int - 9i32)
                            as libc::c_uchar;
                        (bb__isspace as libc::c_int == ' ' as i32 - 9i32
                          || bb__isspace as libc::c_int <= 13i32 - 9i32)
                          as libc::c_int
                      }) != 0
                    {
                      (*ptr_to_globals).dot =
                        skip_thing((*ptr_to_globals).dot, 1i32, dir, S_TO_WS as libc::c_int);
                      (*ptr_to_globals).dot =
                        skip_thing((*ptr_to_globals).dot, 2i32, dir, S_OVER_WS as libc::c_int)
                    }
                    if c != 'W' as i32 {
                      (*ptr_to_globals).dot =
                        skip_thing((*ptr_to_globals).dot, 1i32, dir, S_BEFORE_WS as libc::c_int)
                    }
                    (*ptr_to_globals).cmdcnt -= 1;
                    if !((*ptr_to_globals).cmdcnt > 0) {
                      break;
                    }
                  }
                  current_block = 15129665204879337069;
                }
                17440971994642376514 => {
                  current_block = 15129665204879337069;
                }
                7534742345255184552 => {
                  current_block = 17247297260531395789;
                }
                8800996768013373992 => {
                  loop {
                    dot_next();
                    (*ptr_to_globals).dot = move_to_col(
                      (*ptr_to_globals).dot,
                      (*ptr_to_globals).ccol + (*ptr_to_globals).offset,
                    );
                    (*ptr_to_globals).cmdcnt -= 1;
                    if !((*ptr_to_globals).cmdcnt > 0) {
                      break;
                    }
                  }
                  current_block = 15129665204879337069;
                }
                13993698454868426881 => {
                  loop {
                    dot_right();
                    (*ptr_to_globals).cmdcnt -= 1;
                    if !((*ptr_to_globals).cmdcnt > 0) {
                      break;
                    }
                  }
                  current_block = 15129665204879337069;
                }
                7856905509180742666 => {
                  while !((*ptr_to_globals).last_forward_char == 0) {
                    q = (*ptr_to_globals).dot.offset(1);
                    while q < (*ptr_to_globals).end.offset(-1)
                      && *q as libc::c_int != '\n' as i32
                      && *q as libc::c_int != (*ptr_to_globals).last_forward_char
                    {
                      q = q.offset(1)
                    }
                    if *q as libc::c_int == (*ptr_to_globals).last_forward_char {
                      (*ptr_to_globals).dot = q
                    }
                    (*ptr_to_globals).cmdcnt -= 1;
                    if !((*ptr_to_globals).cmdcnt > 0) {
                      break;
                    }
                  }
                  current_block = 15129665204879337069;
                }
                17498168302144015873 => {
                  current_block = 8681395796513813967;
                }
                1752638907092016026 => {
                  if *(*ptr_to_globals).dot as libc::c_int != '\n' as i32 {
                    (*ptr_to_globals).dot = (*ptr_to_globals).dot.offset(1)
                  }
                  current_block = 8629930936610358348;
                }
                3268579060917229304 => {
                  current_block = 8629930936610358348;
                }
                1895262434596074581 => {
                  current_block = 8908416993177701018;
                }
                _ => {}
              }
              match current_block {
                8629930936610358348 => {}
                15129665204879337069 => {}
                _ => {
                  match current_block {
                    17247297260531395789 => {
                      loop {
                        dot_left();
                        (*ptr_to_globals).cmdcnt -= 1;
                        if !((*ptr_to_globals).cmdcnt > 0) {
                          break;
                        }
                      }
                      current_block = 15129665204879337069;
                    }
                    8681395796513813967 => {
                      current_block = 5591548203144509315;
                    }
                    8908416993177701018 => {
                      current_block = 16124761010012532485;
                    }
                    _ => {}
                  }
                  match current_block {
                    15129665204879337069 => {}
                    _ => {
                      match current_block {
                        16124761010012532485 => {
                          let mut yf: libc::c_int = 0;
                          let mut ml: libc::c_int = 0;
                          let mut whole: libc::c_int = 0;
                          yf = YANKDEL as libc::c_int;
                          if c == 'y' as i32 || c == 'Y' as i32 {
                            yf = YANKONLY as libc::c_int
                          }
                          c1 = 'y' as i32;
                          if c != 'Y' as i32 {
                            c1 = get_one_char()
                          }
                          ml = find_range(&mut p, &mut q, c1 as libc::c_char);
                          place_cursor(0i32, 0);
                          if c1 == 27i32 {
                            c1 = 27i32;
                            c = c1
                          } else if !strchr(b"wW\x00" as *const u8 as *const libc::c_char, c1)
                            .is_null()
                          {
                            ml = 0;
                            if c == 'c' as i32 {
                              while ({
                                let mut bb__isspace: libc::c_uchar =
                                  (*q as libc::c_int - 9i32) as libc::c_uchar;
                                (bb__isspace as libc::c_int == ' ' as i32 - 9i32
                                  || bb__isspace as libc::c_int <= 13i32 - 9i32)
                                  as libc::c_int
                              }) != 0
                                && q > p
                              {
                                q = q.offset(-1)
                              }
                            }
                            (*ptr_to_globals).dot = yank_delete(p, q, ml, yf, 1i32)
                          } else if !strchr(
                            b"^0bBeEft%$ lh\x08\x7f\x00" as *const u8 as *const libc::c_char,
                            c1,
                          )
                          .is_null()
                          {
                            (*ptr_to_globals).dot = yank_delete(p, q, ml, yf, 1i32)
                          } else if !strchr(
                            b"cdykjGHL+-{}\r\n\x00" as *const u8 as *const libc::c_char,
                            c1,
                          )
                          .is_null()
                          {
                            (*ptr_to_globals).dot = yank_delete(p, q, ml, yf, 1i32);
                            whole = 1i32
                          } else {
                            c1 = 27i32;
                            c = c1;
                            ml = 0;
                            indicate_error();
                          }
                          if ml != 0 && whole != 0 {
                            if c == 'c' as i32 {
                              (*ptr_to_globals).dot = char_insert(
                                (*ptr_to_globals).dot,
                                '\n' as i32 as libc::c_char,
                                2i32,
                              );
                              if whole != 0
                                && (*ptr_to_globals).dot != (*ptr_to_globals).end.offset(-1)
                              {
                                dot_prev();
                              }
                            } else if c == 'd' as i32 {
                              dot_begin();
                              dot_skip_over_ws();
                            }
                          }
                          if c1 != 27i32 {
                            if c == 'c' as i32 {
                              strcpy(
                                buf.as_mut_ptr(),
                                b"Change\x00" as *const u8 as *const libc::c_char,
                              );
                              current_block = 8629930936610358348;
                            } else {
                              if c == 'd' as i32 {
                                strcpy(
                                  buf.as_mut_ptr(),
                                  b"Delete\x00" as *const u8 as *const libc::c_char,
                                );
                              }
                              if c == 'y' as i32 || c == 'Y' as i32 {
                                strcpy(
                                  buf.as_mut_ptr(),
                                  b"Yank\x00" as *const u8 as *const libc::c_char,
                                );
                              }
                              p = (*ptr_to_globals).reg[(*ptr_to_globals).YDreg as usize];
                              q = p.offset(strlen(p) as isize);
                              cnt = 0;
                              while p <= q {
                                if *p as libc::c_int == '\n' as i32 {
                                  cnt += 1
                                }
                                p = p.offset(1)
                              }
                              status_line(
                                b"%s %u lines (%u chars) using [%c]\x00" as *const u8
                                  as *const libc::c_char,
                                buf.as_mut_ptr(),
                                cnt,
                                strlen((*ptr_to_globals).reg[(*ptr_to_globals).YDreg as usize])
                                  as libc::c_uint,
                                what_reg() as libc::c_int,
                              );
                              end_cmd_q();
                              current_block = 15129665204879337069;
                            }
                          } else {
                            current_block = 15129665204879337069;
                          }
                        }
                        5591548203144509315 => {
                          current_block = 2636677179867529885;
                        }
                        _ => {}
                      }
                      match current_block {
                        15129665204879337069 => {}
                        8629930936610358348 => {}
                        _ => {
                          match current_block {
                            2636677179867529885 => {
                              current_block = 12309206730560524281;
                            }
                            _ => {}
                          }
                          match current_block {
                            12309206730560524281 => {
                              current_block = 3325768110057758661;
                            }
                            _ => {}
                          }
                          match current_block {
                            3325768110057758661 => {
                              current_block = 14815832896553429982;
                            }
                            _ => {}
                          }
                          match current_block {
                            14815832896553429982 => {
                              current_block = 10731695520297161438;
                            }
                            _ => {}
                          }
                          match current_block {
                            10731695520297161438 => {
                              if c == '0' as i32 && (*ptr_to_globals).cmdcnt < 1i32 {
                                dot_begin();
                              } else {
                                (*ptr_to_globals).cmdcnt =
                                  (*ptr_to_globals).cmdcnt * 10i32 + (c - '0' as i32)
                              }
                              current_block = 15129665204879337069;
                            }
                            _ => {}
                          }
                          match current_block {
                            15129665204879337069 => {}
                            _ => {
                              loop {
                                match current_block {
                                  16813369756331276724 => {
                                    msg = std::ptr::null();
                                    current_block = 7392824444931029276;
                                  }
                                  7392824444931029276 => {
                                    dir = FORWARD as libc::c_int;
                                    p = (*ptr_to_globals).dot.offset(1);
                                    if *(*ptr_to_globals).last_search_pattern.offset(0)
                                      as libc::c_int
                                      == '?' as i32
                                    {
                                      dir = BACK as libc::c_int;
                                      p = (*ptr_to_globals).dot.offset(-1)
                                    }
                                    current_block = 4166979493554389389;
                                  }
                                  _ => {
                                    q = char_search(
                                      p,
                                      (*ptr_to_globals).last_search_pattern.offset(1),
                                      dir << 1i32 | FULL as libc::c_int,
                                    );
                                    if !q.is_null() {
                                      (*ptr_to_globals).dot = q;
                                      msg = std::ptr::null()
                                    } else {
                                      p = (*ptr_to_globals).text;
                                      if dir == BACK as libc::c_int {
                                        p = (*ptr_to_globals).end.offset(-1)
                                      }
                                      q = char_search(
                                        p,
                                        (*ptr_to_globals).last_search_pattern.offset(1),
                                        dir << 1i32 | FULL as libc::c_int,
                                      );
                                      if !q.is_null() {
                                        (*ptr_to_globals).dot = q;
                                        msg = b"search hit BOTTOM, continuing at TOP\x00"
                                          as *const u8
                                          as *const libc::c_char;
                                        if dir == BACK as libc::c_int {
                                          msg = b"search hit TOP, continuing at BOTTOM\x00"
                                            as *const u8
                                            as *const libc::c_char
                                        }
                                      } else {
                                        msg = b"Pattern not found\x00" as *const u8
                                          as *const libc::c_char
                                      }
                                    }
                                    if !msg.is_null() {
                                      status_line_bold(
                                        b"%s\x00" as *const u8 as *const libc::c_char,
                                        msg,
                                      );
                                    }
                                    (*ptr_to_globals).cmdcnt -= 1;
                                    if (*ptr_to_globals).cmdcnt > 0 {
                                      current_block = 16813369756331276724;
                                    } else {
                                      break;
                                    }
                                  }
                                }
                              }
                              current_block = 15129665204879337069;
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
        65 => {
          current_block = 16891123271837848903;
          match current_block {
            16992905640583886232 => {
              loop {
                if (*(*ptr_to_globals).dot as libc::c_int - 'a' as i32) as libc::c_uchar
                  as libc::c_int
                  <= 'z' as i32 - 'a' as i32
                {
                  undo_push(
                    (*ptr_to_globals).dot,
                    1i32 as libc::c_uint,
                    1i32 as libc::c_uchar,
                  );
                  *(*ptr_to_globals).dot =
                    bb_ascii_toupper(*(*ptr_to_globals).dot as libc::c_uchar) as libc::c_char;
                  undo_push(
                    (*ptr_to_globals).dot,
                    1i32 as libc::c_uint,
                    2i32 as libc::c_uchar,
                  );
                } else if (*(*ptr_to_globals).dot as libc::c_int - 'A' as i32) as libc::c_uchar
                  as libc::c_int
                  <= 'Z' as i32 - 'A' as i32
                {
                  undo_push(
                    (*ptr_to_globals).dot,
                    1i32 as libc::c_uint,
                    1i32 as libc::c_uchar,
                  );
                  *(*ptr_to_globals).dot =
                    bb_ascii_tolower(*(*ptr_to_globals).dot as libc::c_uchar) as libc::c_char;
                  undo_push(
                    (*ptr_to_globals).dot,
                    1i32 as libc::c_uint,
                    2i32 as libc::c_uchar,
                  );
                }
                dot_right();
                (*ptr_to_globals).cmdcnt -= 1;
                if !((*ptr_to_globals).cmdcnt > 0) {
                  break;
                }
              }
              end_cmd_q();
              current_block = 15129665204879337069;
            }
            8729655159604064397 => {
              c1 = get_one_char();
              cnt = 0;
              if c1 == '.' as i32 {
                cnt = (*ptr_to_globals)
                  .rows
                  .wrapping_sub(2i32 as libc::c_uint)
                  .wrapping_div(2i32 as libc::c_uint) as libc::c_int
              }
              if c1 == '-' as i32 {
                cnt = (*ptr_to_globals).rows.wrapping_sub(2i32 as libc::c_uint) as libc::c_int
              }
              (*ptr_to_globals).screenbegin = begin_line((*ptr_to_globals).dot);
              dot_scroll(cnt, -1i32);
              current_block = 15129665204879337069;
            }
            15899500648299942075 => {
              (*ptr_to_globals).last_forward_char = get_one_char();
              do_cmd(';' as i32);
              if *(*ptr_to_globals).dot as libc::c_int == (*ptr_to_globals).last_forward_char {
                dot_left();
              }
              (*ptr_to_globals).last_forward_char = 0;
              current_block = 15129665204879337069;
            }
            9051390181078481641 => {
              c1 = get_one_char();
              if *(*ptr_to_globals).dot as libc::c_int != '\n' as i32 {
                (*ptr_to_globals).dot =
                  text_hole_delete((*ptr_to_globals).dot, (*ptr_to_globals).dot, 1i32);
                (*ptr_to_globals).dot =
                  char_insert((*ptr_to_globals).dot, c1 as libc::c_char, 2i32);
                dot_left();
              }
              end_cmd_q();
              current_block = 15129665204879337069;
            }
            877115918601926659 => {
              dir = FORWARD as libc::c_int;
              if c == 'b' as i32 {
                dir = BACK as libc::c_int
              }
              while !((*ptr_to_globals).dot.offset(dir as isize) < (*ptr_to_globals).text
                || (*ptr_to_globals).dot.offset(dir as isize) > (*ptr_to_globals).end.offset(-1))
              {
                (*ptr_to_globals).dot = (*ptr_to_globals).dot.offset(dir as isize);
                if ({
                  let mut bb__isspace: libc::c_uchar =
                    (*(*ptr_to_globals).dot as libc::c_int - 9i32) as libc::c_uchar;
                  (bb__isspace as libc::c_int == ' ' as i32 - 9i32
                    || bb__isspace as libc::c_int <= 13i32 - 9i32) as libc::c_int
                }) != 0
                {
                  (*ptr_to_globals).dot = skip_thing(
                    (*ptr_to_globals).dot,
                    if c == 'e' as i32 { 2i32 } else { 1i32 },
                    dir,
                    S_OVER_WS as libc::c_int,
                  )
                }
                if bb_ascii_isalnum(*(*ptr_to_globals).dot as libc::c_uchar) != 0
                  || *(*ptr_to_globals).dot as libc::c_int == '_' as i32
                {
                  (*ptr_to_globals).dot =
                    skip_thing((*ptr_to_globals).dot, 1i32, dir, S_END_ALNUM as libc::c_int)
                } else if *strchrnul(
                  b"!\"#$%&\'()*+,-./:;<=>?@[\\]^_`{|}~\x00" as *const u8 as *const libc::c_char,
                  *(*ptr_to_globals).dot as libc::c_int,
                )
                .offset(0)
                  != 0
                {
                  (*ptr_to_globals).dot =
                    skip_thing((*ptr_to_globals).dot, 1i32, dir, S_END_PUNCT as libc::c_int)
                }
                (*ptr_to_globals).cmdcnt -= 1;
                if !((*ptr_to_globals).cmdcnt > 0) {
                  break;
                }
              }
              current_block = 15129665204879337069;
            }
            1085022737867179637 => {
              dot_begin();
              dot_skip_over_ws();
              current_block = 15129665204879337069;
            }
            3113147720494587438 => {
              c1 = get_one_char();
              if c1 != 'Z' as i32 {
                indicate_error();
              } else if (*ptr_to_globals).modified_count != 0 {
                if 1i32 != 0 && (*ptr_to_globals).readonly_mode as libc::c_int != 0 {
                  status_line_bold(
                    b"\'%s\' is read only\x00" as *const u8 as *const libc::c_char,
                    (*ptr_to_globals).current_filename,
                  );
                } else {
                  cnt = file_write(
                    (*ptr_to_globals).current_filename,
                    (*ptr_to_globals).text,
                    (*ptr_to_globals).end.offset(-1),
                  );
                  if cnt < 0 {
                    if cnt == -1i32 {
                      status_line_bold(b"Write error: %m\x00" as *const u8 as *const libc::c_char);
                    }
                  } else if cnt as libc::c_long
                    == (*ptr_to_globals)
                      .end
                      .offset(-1)
                      .wrapping_offset_from((*ptr_to_globals).text)
                      as libc::c_long
                      + 1
                  {
                    (*ptr_to_globals).editing = 0 as smallint
                  }
                }
              } else {
                (*ptr_to_globals).editing = 0 as smallint
              }
              current_block = 15129665204879337069;
            }
            12960118908218882441 => {
              p = begin_line((*ptr_to_globals).dot);
              if *p.offset(-1i32 as isize) as libc::c_int == '\n' as i32 {
                dot_prev();
                current_block = 2087484904894455135;
              } else {
                dot_begin();
                (*ptr_to_globals).dot =
                  char_insert((*ptr_to_globals).dot, '\n' as i32 as libc::c_char, 1i32);
                dot_prev();
                current_block = 8629930936610358348;
              }
            }
            8720450212473544924 => {
              (*ptr_to_globals).dot = (*ptr_to_globals).screenbegin;
              cnt = 0;
              while (cnt as libc::c_uint)
                < (*ptr_to_globals)
                  .rows
                  .wrapping_sub(1i32 as libc::c_uint)
                  .wrapping_div(2i32 as libc::c_uint)
              {
                (*ptr_to_globals).dot = next_line((*ptr_to_globals).dot);
                cnt += 1
              }
              current_block = 15129665204879337069;
            }
            13015277209715431090 => {
              (*ptr_to_globals).dot = end_screen();
              if (*ptr_to_globals).cmdcnt as libc::c_uint
                > (*ptr_to_globals).rows.wrapping_sub(1i32 as libc::c_uint)
              {
                (*ptr_to_globals).cmdcnt =
                  (*ptr_to_globals).rows.wrapping_sub(1i32 as libc::c_uint) as libc::c_int
              }
              (*ptr_to_globals).cmdcnt -= 1;
              if (*ptr_to_globals).cmdcnt > 0 {
                do_cmd('-' as i32);
              }
              dot_begin();
              dot_skip_over_ws();
              current_block = 15129665204879337069;
            }
            9800435767766781385 => {
              loop {
                dot_end();
                if (*ptr_to_globals).dot < (*ptr_to_globals).end.offset(-1) {
                  undo_push(
                    (*ptr_to_globals).dot,
                    1i32 as libc::c_uint,
                    1i32 as libc::c_uchar,
                  );
                  let fresh15 = (*ptr_to_globals).dot;
                  (*ptr_to_globals).dot = (*ptr_to_globals).dot.offset(1);
                  *fresh15 = ' ' as i32 as libc::c_char;
                  undo_push(
                    (*ptr_to_globals).dot.offset(-1),
                    1i32 as libc::c_uint,
                    2i32 as libc::c_uchar,
                  );
                  while ({
                    let mut bb__isblank: libc::c_uchar = *(*ptr_to_globals).dot as libc::c_uchar;
                    (bb__isblank as libc::c_int == ' ' as i32
                      || bb__isblank as libc::c_int == '\t' as i32)
                      as libc::c_int
                  }) != 0
                  {
                    text_hole_delete((*ptr_to_globals).dot, (*ptr_to_globals).dot, 2i32);
                  }
                }
                (*ptr_to_globals).cmdcnt -= 1;
                if !((*ptr_to_globals).cmdcnt > 0) {
                  break;
                }
              }
              end_cmd_q();
              current_block = 15129665204879337069;
            }
            3432363526595694666 => {
              dot_begin();
              dot_skip_over_ws();
              current_block = 3268579060917229304;
            }
            3494829253343353619 => {
              (*ptr_to_globals).dot = (*ptr_to_globals).screenbegin;
              if (*ptr_to_globals).cmdcnt as libc::c_uint
                > (*ptr_to_globals).rows.wrapping_sub(1i32 as libc::c_uint)
              {
                (*ptr_to_globals).cmdcnt =
                  (*ptr_to_globals).rows.wrapping_sub(1i32 as libc::c_uint) as libc::c_int
              }
              (*ptr_to_globals).cmdcnt -= 1;
              if (*ptr_to_globals).cmdcnt > 0 {
                do_cmd('+' as i32);
              }
              dot_skip_over_ws();
              current_block = 15129665204879337069;
            }
            17973101765331640574 => {
              c1 = get_one_char();
              if c1 != 'g' as i32 {
                buf[0] = 'g' as i32 as libc::c_char;
                buf[1] = if c1 >= 0 { c1 } else { '*' as i32 } as libc::c_char;
                buf[2] = '\u{0}' as i32 as libc::c_char;
                not_implemented(buf.as_mut_ptr());
                current_block = 15129665204879337069;
              } else {
                if (*ptr_to_globals).cmdcnt == 0 {
                  (*ptr_to_globals).cmdcnt = 1i32
                }
                current_block = 11945623545738147997;
              }
            }
            16546625800574160972 => {
              save_dot = (*ptr_to_globals).dot;
              (*ptr_to_globals).dot = dollar_line((*ptr_to_globals).dot);
              (*ptr_to_globals).dot = yank_delete(
                save_dot,
                (*ptr_to_globals).dot,
                0,
                YANKDEL as libc::c_int,
                1i32,
              );
              if c == 'C' as i32 {
                current_block = 8629930936610358348;
              } else {
                if c == 'D' as i32 {
                  end_cmd_q();
                }
                current_block = 15129665204879337069;
              }
            }
            11937696639986586685 => {
              cnt = count_lines((*ptr_to_globals).text, (*ptr_to_globals).dot);
              c1 = get_one_char();
              find_range(&mut p, &mut q, c1 as libc::c_char);
              yank_delete(p, q, 1i32, YANKONLY as libc::c_int, 0);
              p = begin_line(p);
              q = end_line(q);
              i = count_lines(p, q);
              while i > 0 {
                if c == '<' as i32 {
                  if *p as libc::c_int == '\t' as i32 {
                    text_hole_delete(p, p, 0);
                  } else if *p as libc::c_int == ' ' as i32 {
                    j = 0;
                    while *p as libc::c_int == ' ' as i32 && j < (*ptr_to_globals).tabstop {
                      text_hole_delete(p, p, 0);
                      j += 1
                    }
                  }
                } else if c == '>' as i32 {
                  char_insert(p, '\t' as i32 as libc::c_char, 1i32);
                }
                i -= 1;
                p = next_line(p)
              }
              (*ptr_to_globals).dot = find_line(cnt);
              dot_skip_over_ws();
              end_cmd_q();
              current_block = 15129665204879337069;
            }
            17725350714912028156 => {
              p = get_input_line(b":\x00" as *const u8 as *const libc::c_char);
              colon(p);
              current_block = 15129665204879337069;
            }
            14526470074083880812 => {
              q = char_search(
                (*ptr_to_globals).dot,
                b"\n\n\x00" as *const u8 as *const libc::c_char,
                (FORWARD as libc::c_int) << 1i32 | FULL as libc::c_int,
              );
              if !q.is_null() {
                (*ptr_to_globals).dot = next_line(q)
              }
              current_block = 15129665204879337069;
            }
            8893187391306414141 => {
              q = char_search(
                (*ptr_to_globals).dot,
                b"\n\n\x00" as *const u8 as *const libc::c_char,
                ((BACK as libc::c_int as libc::c_uint) << 1i32
                  | FULL as libc::c_int as libc::c_uint) as libc::c_int,
              );
              if !q.is_null() {
                (*ptr_to_globals).dot = next_line(q)
              }
              current_block = 15129665204879337069;
            }
            7021673758293221412 => {
              dir = BACK as libc::c_int;
              p = (*ptr_to_globals).dot.offset(-1);
              if *(*ptr_to_globals).last_search_pattern.offset(0) as libc::c_int == '?' as i32 {
                dir = FORWARD as libc::c_int;
                p = (*ptr_to_globals).dot.offset(1)
              }
              current_block = 4166979493554389389;
            }
            18374191879090272823 => {
              buf[0] = c as libc::c_char;
              buf[1] = '\u{0}' as i32 as libc::c_char;
              q = get_input_line(buf.as_mut_ptr());
              if *q.offset(0) as libc::c_int != 0 && *q.offset(1) == 0 {
                if *(*ptr_to_globals).last_search_pattern.offset(0) != 0 {
                  *(*ptr_to_globals).last_search_pattern.offset(0) = c as libc::c_char
                }
                current_block = 7392824444931029276;
              } else if *q.offset(0) != 0 {
                free((*ptr_to_globals).last_search_pattern as *mut libc::c_void);
                (*ptr_to_globals).last_search_pattern = crate::libbb::xfuncs_printf::xstrdup(q);
                current_block = 7392824444931029276;
              } else {
                current_block = 15129665204879337069;
              }
            }
            16407828456666301883 => {
              if (*ptr_to_globals).last_forward_char == 0 {
                current_block = 15129665204879337069;
              } else {
                loop {
                  q = (*ptr_to_globals).dot.offset(-1);
                  while q >= (*ptr_to_globals).text
                    && *q as libc::c_int != '\n' as i32
                    && *q as libc::c_int != (*ptr_to_globals).last_forward_char
                  {
                    q = q.offset(-1)
                  }
                  if q >= (*ptr_to_globals).text
                    && *q as libc::c_int == (*ptr_to_globals).last_forward_char
                  {
                    (*ptr_to_globals).dot = q
                  }
                  (*ptr_to_globals).cmdcnt -= 1;
                  if !((*ptr_to_globals).cmdcnt > 0) {
                    break;
                  }
                }
                current_block = 15129665204879337069;
              }
            }
            9018432604062702004 => {
              q = (*ptr_to_globals).dot;
              while q < (*ptr_to_globals).end && *q as libc::c_int != '\n' as i32 {
                if !strchr(
                  b"()[]{}\x00" as *const u8 as *const libc::c_char,
                  *q as libc::c_int,
                )
                .is_null()
                {
                  p = find_pair(q, *q);
                  if p.is_null() {
                    indicate_error();
                  } else {
                    (*ptr_to_globals).dot = p
                  }
                  break;
                } else {
                  q = q.offset(1)
                }
              }
              if *q as libc::c_int == '\n' as i32 {
                indicate_error();
              }
              current_block = 15129665204879337069;
            }
            10247103787464459848 => {
              p = (*ptr_to_globals).reg[(*ptr_to_globals).YDreg as usize];
              if p.is_null() {
                status_line_bold(
                  b"Nothing in register %c\x00" as *const u8 as *const libc::c_char,
                  what_reg() as libc::c_int,
                );
              } else {
                if !strchr(p, '\n' as i32).is_null() {
                  if c == 'P' as i32 {
                    dot_begin();
                  }
                  if c == 'p' as i32 {
                    if end_line((*ptr_to_globals).dot) == (*ptr_to_globals).end.offset(-1) {
                      (*ptr_to_globals).dot = (*ptr_to_globals).end
                    } else {
                      dot_next();
                    }
                  }
                } else if c == 'p' as i32 {
                  dot_right();
                }
                string_insert((*ptr_to_globals).dot, p, 1i32);
                end_cmd_q();
              }
              current_block = 15129665204879337069;
            }
            15260732871948875843 => {
              c1 = (get_one_char() | 0x20i32) - 'a' as i32;
              if c1 as libc::c_uint <= 25i32 as libc::c_uint {
                (*ptr_to_globals).mark[c1 as usize] = (*ptr_to_globals).dot
              } else {
                indicate_error();
              }
              current_block = 15129665204879337069;
            }
            12738322036487086035 => {
              c1 = get_one_char() | 0x20i32;
              if (c1 - 'a' as i32) as libc::c_uint <= 25i32 as libc::c_uint {
                c1 = c1 - 'a' as i32;
                q = (*ptr_to_globals).mark[c1 as usize];
                if (*ptr_to_globals).text <= q && q < (*ptr_to_globals).end {
                  (*ptr_to_globals).dot = q;
                  dot_begin();
                  dot_skip_over_ws();
                }
              } else if c1 == '\'' as i32 {
                (*ptr_to_globals).dot = swap_context((*ptr_to_globals).dot);
                dot_begin();
                dot_skip_over_ws();
              } else {
                indicate_error();
              }
              current_block = 15129665204879337069;
            }
            13255096073384561358 => {
              c1 = (get_one_char() | 0x20i32) - 'a' as i32;
              if c1 as libc::c_uint <= 25i32 as libc::c_uint {
                (*ptr_to_globals).YDreg = c1 as smalluint
              } else {
                indicate_error();
              }
              current_block = 15129665204879337069;
            }
            10258711639984089377 => {
              if (*ptr_to_globals).cmd_mode as libc::c_int == 0 {
                indicate_error();
              }
              (*ptr_to_globals).cmd_mode = 0 as smallint;
              undo_queue_commit();
              end_cmd_q();
              (*ptr_to_globals).last_status_cksum = 0;
              current_block = 15129665204879337069;
            }
            11439127087547047736 => {
              buf[0] = c as libc::c_char;
              buf[1] = '\u{0}' as i32 as libc::c_char;
              not_implemented(buf.as_mut_ptr());
              end_cmd_q();
              current_block = 17440971994642376514;
            }
            7961798899781870241 => {
              dot_scroll(
                (*ptr_to_globals).rows.wrapping_sub(2i32 as libc::c_uint) as libc::c_int,
                -1i32,
              );
              current_block = 15129665204879337069;
            }
            9426343755402444879 => {
              dot_scroll(
                (*ptr_to_globals)
                  .rows
                  .wrapping_sub(2i32 as libc::c_uint)
                  .wrapping_div(2i32 as libc::c_uint) as libc::c_int,
                1i32,
              );
              current_block = 15129665204879337069;
            }
            13352459794680105913 => {
              dot_scroll(1i32, 1i32);
              current_block = 15129665204879337069;
            }
            14142272253464333006 => {
              dot_scroll(
                (*ptr_to_globals).rows.wrapping_sub(2i32 as libc::c_uint) as libc::c_int,
                1i32,
              );
              current_block = 15129665204879337069;
            }
            10758177197742640066 => {
              (*ptr_to_globals).last_status_cksum = 0;
              current_block = 15129665204879337069;
            }
            6152256259730122749 => {
              current_block = 7534742345255184552;
            }
            12883932598258173301 => {
              current_block = 8800996768013373992;
            }
            11242998110520238401 => {
              redraw(1i32);
              current_block = 15129665204879337069;
            }
            13619733043935729992 => {
              loop {
                dot_next();
                dot_skip_over_ws();
                (*ptr_to_globals).cmdcnt -= 1;
                if !((*ptr_to_globals).cmdcnt > 0) {
                  break;
                }
              }
              current_block = 15129665204879337069;
            }
            9339065157412720613 => {
              dot_scroll(
                (*ptr_to_globals)
                  .rows
                  .wrapping_sub(2i32 as libc::c_uint)
                  .wrapping_div(2i32 as libc::c_uint) as libc::c_int,
                -1i32,
              );
              current_block = 15129665204879337069;
            }
            11447082683497798022 => {
              dot_scroll(1i32, -1i32);
              current_block = 15129665204879337069;
            }
            5182000506326660482 => {
              current_block = 13993698454868426881;
            }
            1105010766850597332 => {
              if !(*ptr_to_globals).reg[27].is_null() {
                p = begin_line((*ptr_to_globals).dot);
                q = end_line((*ptr_to_globals).dot);
                p = text_hole_delete(p, q, 1i32);
                p = p.offset(string_insert(p, (*ptr_to_globals).reg[27], 2i32) as isize);
                (*ptr_to_globals).dot = p;
                dot_skip_over_ws();
              }
              current_block = 15129665204879337069;
            }
            8616046655533110204 => {
              undo_pop();
              current_block = 15129665204879337069;
            }
            5127767458142431603 => {
              loop {
                (*ptr_to_globals).dot = end_line((*ptr_to_globals).dot);
                (*ptr_to_globals).cmdcnt -= 1;
                if (*ptr_to_globals).cmdcnt <= 0 {
                  break;
                }
                dot_next();
              }
              current_block = 15129665204879337069;
            }
            222014967776118151 => {
              (*ptr_to_globals).last_forward_char = get_one_char();
              current_block = 7856905509180742666;
            }
            11209792479411604110 => {
              loop {
                dot_prev();
                dot_skip_over_ws();
                (*ptr_to_globals).cmdcnt -= 1;
                if !((*ptr_to_globals).cmdcnt > 0) {
                  break;
                }
              }
              current_block = 15129665204879337069;
            }
            3364823792826654116 => {
              if (*ptr_to_globals).lmc_len != 0 {
                (*ptr_to_globals).ioq_start = crate::libbb::xfuncs_printf::xstrndup(
                  (*ptr_to_globals).last_modifying_cmd.as_mut_ptr(),
                  (*ptr_to_globals).lmc_len,
                );
                (*ptr_to_globals).ioq = (*ptr_to_globals).ioq_start
              }
              current_block = 15129665204879337069;
            }
            18096603330221575131 => {
              current_block = 17498168302144015873;
            }
            16891123271837848903 => {
              dot_end();
              current_block = 1752638907092016026;
            }
            8517235759107662071 => {
              current_block = 5847749760081351726;
            }
            12525254419223051704 => {
              if (*ptr_to_globals).dot < (*ptr_to_globals).end.offset(-1) {
                (*ptr_to_globals).dot = yank_delete(
                  (*ptr_to_globals).dot,
                  (*ptr_to_globals).dot,
                  1i32,
                  YANKDEL as libc::c_int,
                  1i32,
                )
              }
              current_block = 15129665204879337069;
            }
            15232911949322867522 => {
              current_block = 17251831742223396249;
            }
            10863374208794025069 => {
              current_block = 1895262434596074581;
            }
            451126677064669119 => {
              loop {
                dot_prev();
                (*ptr_to_globals).dot = move_to_col(
                  (*ptr_to_globals).dot,
                  (*ptr_to_globals).ccol + (*ptr_to_globals).offset,
                );
                (*ptr_to_globals).cmdcnt -= 1;
                if !((*ptr_to_globals).cmdcnt > 0) {
                  break;
                }
              }
              current_block = 15129665204879337069;
            }
            4611735929166613116 => {
              loop {
                if bb_ascii_isalnum(*(*ptr_to_globals).dot as libc::c_uchar) != 0
                  || *(*ptr_to_globals).dot as libc::c_int == '_' as i32
                {
                  (*ptr_to_globals).dot = skip_thing(
                    (*ptr_to_globals).dot,
                    1i32,
                    FORWARD as libc::c_int,
                    S_END_ALNUM as libc::c_int,
                  )
                } else if *strchrnul(
                  b"!\"#$%&\'()*+,-./:;<=>?@[\\]^_`{|}~\x00" as *const u8 as *const libc::c_char,
                  *(*ptr_to_globals).dot as libc::c_int,
                )
                .offset(0)
                  != 0
                {
                  (*ptr_to_globals).dot = skip_thing(
                    (*ptr_to_globals).dot,
                    1i32,
                    FORWARD as libc::c_int,
                    S_END_PUNCT as libc::c_int,
                  )
                }
                if (*ptr_to_globals).dot < (*ptr_to_globals).end.offset(-1) {
                  (*ptr_to_globals).dot = (*ptr_to_globals).dot.offset(1)
                }
                if ({
                  let mut bb__isspace: libc::c_uchar =
                    (*(*ptr_to_globals).dot as libc::c_int - 9i32) as libc::c_uchar;
                  (bb__isspace as libc::c_int == ' ' as i32 - 9i32
                    || bb__isspace as libc::c_int <= 13i32 - 9i32) as libc::c_int
                }) != 0
                {
                  (*ptr_to_globals).dot = skip_thing(
                    (*ptr_to_globals).dot,
                    2i32,
                    FORWARD as libc::c_int,
                    S_OVER_WS as libc::c_int,
                  )
                }
                (*ptr_to_globals).cmdcnt -= 1;
                if !((*ptr_to_globals).cmdcnt > 0) {
                  break;
                }
              }
              current_block = 15129665204879337069;
            }
            4386451087681909888 => {
              (*ptr_to_globals).dot =
                move_to_col((*ptr_to_globals).dot, (*ptr_to_globals).cmdcnt - 1i32);
              current_block = 15129665204879337069;
            }
            1296397779060594135 => {
              dot_begin();
              current_block = 15129665204879337069;
            }
            _ => {}
          }
          match current_block {
            15129665204879337069 => {}
            8629930936610358348 => {}
            _ => {
              match current_block {
                17251831742223396249 => {
                  dir = 0;
                  if c == 'X' as i32 {
                    dir = -1i32
                  }
                  loop {
                    if *(*ptr_to_globals).dot.offset(dir as isize) as libc::c_int != '\n' as i32 {
                      if c == 'X' as i32 {
                        (*ptr_to_globals).dot = (*ptr_to_globals).dot.offset(-1)
                      }
                      (*ptr_to_globals).dot = yank_delete(
                        (*ptr_to_globals).dot,
                        (*ptr_to_globals).dot,
                        0,
                        YANKDEL as libc::c_int,
                        1i32,
                      )
                    }
                    (*ptr_to_globals).cmdcnt -= 1;
                    if !((*ptr_to_globals).cmdcnt > 0) {
                      break;
                    }
                  }
                  end_cmd_q();
                  if c == 's' as i32 {
                    current_block = 8629930936610358348;
                  } else {
                    current_block = 15129665204879337069;
                  }
                }
                2087484904894455135 => {
                  dot_end();
                  (*ptr_to_globals).dot =
                    char_insert((*ptr_to_globals).dot, '\n' as i32 as libc::c_char, 1i32);
                  current_block = 8629930936610358348;
                }
                11945623545738147997 => {
                  (*ptr_to_globals).dot = (*ptr_to_globals).end.offset(-1);
                  if (*ptr_to_globals).cmdcnt > 0 {
                    (*ptr_to_globals).dot = find_line((*ptr_to_globals).cmdcnt)
                  }
                  dot_skip_over_ws();
                  current_block = 15129665204879337069;
                }
                5847749760081351726 => {
                  dir = FORWARD as libc::c_int;
                  if c == 'B' as i32 {
                    dir = BACK as libc::c_int
                  }
                  loop {
                    if c == 'W' as i32
                      || ({
                        let mut bb__isspace: libc::c_uchar =
                          (*(*ptr_to_globals).dot.offset(dir as isize) as libc::c_int - 9i32)
                            as libc::c_uchar;
                        (bb__isspace as libc::c_int == ' ' as i32 - 9i32
                          || bb__isspace as libc::c_int <= 13i32 - 9i32)
                          as libc::c_int
                      }) != 0
                    {
                      (*ptr_to_globals).dot =
                        skip_thing((*ptr_to_globals).dot, 1i32, dir, S_TO_WS as libc::c_int);
                      (*ptr_to_globals).dot =
                        skip_thing((*ptr_to_globals).dot, 2i32, dir, S_OVER_WS as libc::c_int)
                    }
                    if c != 'W' as i32 {
                      (*ptr_to_globals).dot =
                        skip_thing((*ptr_to_globals).dot, 1i32, dir, S_BEFORE_WS as libc::c_int)
                    }
                    (*ptr_to_globals).cmdcnt -= 1;
                    if !((*ptr_to_globals).cmdcnt > 0) {
                      break;
                    }
                  }
                  current_block = 15129665204879337069;
                }
                17440971994642376514 => {
                  current_block = 15129665204879337069;
                }
                7534742345255184552 => {
                  current_block = 17247297260531395789;
                }
                8800996768013373992 => {
                  loop {
                    dot_next();
                    (*ptr_to_globals).dot = move_to_col(
                      (*ptr_to_globals).dot,
                      (*ptr_to_globals).ccol + (*ptr_to_globals).offset,
                    );
                    (*ptr_to_globals).cmdcnt -= 1;
                    if !((*ptr_to_globals).cmdcnt > 0) {
                      break;
                    }
                  }
                  current_block = 15129665204879337069;
                }
                13993698454868426881 => {
                  loop {
                    dot_right();
                    (*ptr_to_globals).cmdcnt -= 1;
                    if !((*ptr_to_globals).cmdcnt > 0) {
                      break;
                    }
                  }
                  current_block = 15129665204879337069;
                }
                7856905509180742666 => {
                  while !((*ptr_to_globals).last_forward_char == 0) {
                    q = (*ptr_to_globals).dot.offset(1);
                    while q < (*ptr_to_globals).end.offset(-1)
                      && *q as libc::c_int != '\n' as i32
                      && *q as libc::c_int != (*ptr_to_globals).last_forward_char
                    {
                      q = q.offset(1)
                    }
                    if *q as libc::c_int == (*ptr_to_globals).last_forward_char {
                      (*ptr_to_globals).dot = q
                    }
                    (*ptr_to_globals).cmdcnt -= 1;
                    if !((*ptr_to_globals).cmdcnt > 0) {
                      break;
                    }
                  }
                  current_block = 15129665204879337069;
                }
                17498168302144015873 => {
                  current_block = 8681395796513813967;
                }
                1752638907092016026 => {
                  if *(*ptr_to_globals).dot as libc::c_int != '\n' as i32 {
                    (*ptr_to_globals).dot = (*ptr_to_globals).dot.offset(1)
                  }
                  current_block = 8629930936610358348;
                }
                3268579060917229304 => {
                  current_block = 8629930936610358348;
                }
                1895262434596074581 => {
                  current_block = 8908416993177701018;
                }
                _ => {}
              }
              match current_block {
                8629930936610358348 => {}
                15129665204879337069 => {}
                _ => {
                  match current_block {
                    17247297260531395789 => {
                      loop {
                        dot_left();
                        (*ptr_to_globals).cmdcnt -= 1;
                        if !((*ptr_to_globals).cmdcnt > 0) {
                          break;
                        }
                      }
                      current_block = 15129665204879337069;
                    }
                    8681395796513813967 => {
                      current_block = 5591548203144509315;
                    }
                    8908416993177701018 => {
                      current_block = 16124761010012532485;
                    }
                    _ => {}
                  }
                  match current_block {
                    15129665204879337069 => {}
                    _ => {
                      match current_block {
                        16124761010012532485 => {
                          let mut yf: libc::c_int = 0;
                          let mut ml: libc::c_int = 0;
                          let mut whole: libc::c_int = 0;
                          yf = YANKDEL as libc::c_int;
                          if c == 'y' as i32 || c == 'Y' as i32 {
                            yf = YANKONLY as libc::c_int
                          }
                          c1 = 'y' as i32;
                          if c != 'Y' as i32 {
                            c1 = get_one_char()
                          }
                          ml = find_range(&mut p, &mut q, c1 as libc::c_char);
                          place_cursor(0i32, 0);
                          if c1 == 27i32 {
                            c1 = 27i32;
                            c = c1
                          } else if !strchr(b"wW\x00" as *const u8 as *const libc::c_char, c1)
                            .is_null()
                          {
                            ml = 0;
                            if c == 'c' as i32 {
                              while ({
                                let mut bb__isspace: libc::c_uchar =
                                  (*q as libc::c_int - 9i32) as libc::c_uchar;
                                (bb__isspace as libc::c_int == ' ' as i32 - 9i32
                                  || bb__isspace as libc::c_int <= 13i32 - 9i32)
                                  as libc::c_int
                              }) != 0
                                && q > p
                              {
                                q = q.offset(-1)
                              }
                            }
                            (*ptr_to_globals).dot = yank_delete(p, q, ml, yf, 1i32)
                          } else if !strchr(
                            b"^0bBeEft%$ lh\x08\x7f\x00" as *const u8 as *const libc::c_char,
                            c1,
                          )
                          .is_null()
                          {
                            (*ptr_to_globals).dot = yank_delete(p, q, ml, yf, 1i32)
                          } else if !strchr(
                            b"cdykjGHL+-{}\r\n\x00" as *const u8 as *const libc::c_char,
                            c1,
                          )
                          .is_null()
                          {
                            (*ptr_to_globals).dot = yank_delete(p, q, ml, yf, 1i32);
                            whole = 1i32
                          } else {
                            c1 = 27i32;
                            c = c1;
                            ml = 0;
                            indicate_error();
                          }
                          if ml != 0 && whole != 0 {
                            if c == 'c' as i32 {
                              (*ptr_to_globals).dot = char_insert(
                                (*ptr_to_globals).dot,
                                '\n' as i32 as libc::c_char,
                                2i32,
                              );
                              if whole != 0
                                && (*ptr_to_globals).dot != (*ptr_to_globals).end.offset(-1)
                              {
                                dot_prev();
                              }
                            } else if c == 'd' as i32 {
                              dot_begin();
                              dot_skip_over_ws();
                            }
                          }
                          if c1 != 27i32 {
                            if c == 'c' as i32 {
                              strcpy(
                                buf.as_mut_ptr(),
                                b"Change\x00" as *const u8 as *const libc::c_char,
                              );
                              current_block = 8629930936610358348;
                            } else {
                              if c == 'd' as i32 {
                                strcpy(
                                  buf.as_mut_ptr(),
                                  b"Delete\x00" as *const u8 as *const libc::c_char,
                                );
                              }
                              if c == 'y' as i32 || c == 'Y' as i32 {
                                strcpy(
                                  buf.as_mut_ptr(),
                                  b"Yank\x00" as *const u8 as *const libc::c_char,
                                );
                              }
                              p = (*ptr_to_globals).reg[(*ptr_to_globals).YDreg as usize];
                              q = p.offset(strlen(p) as isize);
                              cnt = 0;
                              while p <= q {
                                if *p as libc::c_int == '\n' as i32 {
                                  cnt += 1
                                }
                                p = p.offset(1)
                              }
                              status_line(
                                b"%s %u lines (%u chars) using [%c]\x00" as *const u8
                                  as *const libc::c_char,
                                buf.as_mut_ptr(),
                                cnt,
                                strlen((*ptr_to_globals).reg[(*ptr_to_globals).YDreg as usize])
                                  as libc::c_uint,
                                what_reg() as libc::c_int,
                              );
                              end_cmd_q();
                              current_block = 15129665204879337069;
                            }
                          } else {
                            current_block = 15129665204879337069;
                          }
                        }
                        5591548203144509315 => {
                          current_block = 2636677179867529885;
                        }
                        _ => {}
                      }
                      match current_block {
                        15129665204879337069 => {}
                        8629930936610358348 => {}
                        _ => {
                          match current_block {
                            2636677179867529885 => {
                              current_block = 12309206730560524281;
                            }
                            _ => {}
                          }
                          match current_block {
                            12309206730560524281 => {
                              current_block = 3325768110057758661;
                            }
                            _ => {}
                          }
                          match current_block {
                            3325768110057758661 => {
                              current_block = 14815832896553429982;
                            }
                            _ => {}
                          }
                          match current_block {
                            14815832896553429982 => {
                              current_block = 10731695520297161438;
                            }
                            _ => {}
                          }
                          match current_block {
                            10731695520297161438 => {
                              if c == '0' as i32 && (*ptr_to_globals).cmdcnt < 1i32 {
                                dot_begin();
                              } else {
                                (*ptr_to_globals).cmdcnt =
                                  (*ptr_to_globals).cmdcnt * 10i32 + (c - '0' as i32)
                              }
                              current_block = 15129665204879337069;
                            }
                            _ => {}
                          }
                          match current_block {
                            15129665204879337069 => {}
                            _ => {
                              loop {
                                match current_block {
                                  16813369756331276724 => {
                                    msg = std::ptr::null();
                                    current_block = 7392824444931029276;
                                  }
                                  7392824444931029276 => {
                                    dir = FORWARD as libc::c_int;
                                    p = (*ptr_to_globals).dot.offset(1);
                                    if *(*ptr_to_globals).last_search_pattern.offset(0)
                                      as libc::c_int
                                      == '?' as i32
                                    {
                                      dir = BACK as libc::c_int;
                                      p = (*ptr_to_globals).dot.offset(-1)
                                    }
                                    current_block = 4166979493554389389;
                                  }
                                  _ => {
                                    q = char_search(
                                      p,
                                      (*ptr_to_globals).last_search_pattern.offset(1),
                                      dir << 1i32 | FULL as libc::c_int,
                                    );
                                    if !q.is_null() {
                                      (*ptr_to_globals).dot = q;
                                      msg = std::ptr::null()
                                    } else {
                                      p = (*ptr_to_globals).text;
                                      if dir == BACK as libc::c_int {
                                        p = (*ptr_to_globals).end.offset(-1)
                                      }
                                      q = char_search(
                                        p,
                                        (*ptr_to_globals).last_search_pattern.offset(1),
                                        dir << 1i32 | FULL as libc::c_int,
                                      );
                                      if !q.is_null() {
                                        (*ptr_to_globals).dot = q;
                                        msg = b"search hit BOTTOM, continuing at TOP\x00"
                                          as *const u8
                                          as *const libc::c_char;
                                        if dir == BACK as libc::c_int {
                                          msg = b"search hit TOP, continuing at BOTTOM\x00"
                                            as *const u8
                                            as *const libc::c_char
                                        }
                                      } else {
                                        msg = b"Pattern not found\x00" as *const u8
                                          as *const libc::c_char
                                      }
                                    }
                                    if !msg.is_null() {
                                      status_line_bold(
                                        b"%s\x00" as *const u8 as *const libc::c_char,
                                        msg,
                                      );
                                    }
                                    (*ptr_to_globals).cmdcnt -= 1;
                                    if (*ptr_to_globals).cmdcnt > 0 {
                                      current_block = 16813369756331276724;
                                    } else {
                                      break;
                                    }
                                  }
                                }
                              }
                              current_block = 15129665204879337069;
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
        97 => {
          current_block = 1752638907092016026;
          match current_block {
            16992905640583886232 => {
              loop {
                if (*(*ptr_to_globals).dot as libc::c_int - 'a' as i32) as libc::c_uchar
                  as libc::c_int
                  <= 'z' as i32 - 'a' as i32
                {
                  undo_push(
                    (*ptr_to_globals).dot,
                    1i32 as libc::c_uint,
                    1i32 as libc::c_uchar,
                  );
                  *(*ptr_to_globals).dot =
                    bb_ascii_toupper(*(*ptr_to_globals).dot as libc::c_uchar) as libc::c_char;
                  undo_push(
                    (*ptr_to_globals).dot,
                    1i32 as libc::c_uint,
                    2i32 as libc::c_uchar,
                  );
                } else if (*(*ptr_to_globals).dot as libc::c_int - 'A' as i32) as libc::c_uchar
                  as libc::c_int
                  <= 'Z' as i32 - 'A' as i32
                {
                  undo_push(
                    (*ptr_to_globals).dot,
                    1i32 as libc::c_uint,
                    1i32 as libc::c_uchar,
                  );
                  *(*ptr_to_globals).dot =
                    bb_ascii_tolower(*(*ptr_to_globals).dot as libc::c_uchar) as libc::c_char;
                  undo_push(
                    (*ptr_to_globals).dot,
                    1i32 as libc::c_uint,
                    2i32 as libc::c_uchar,
                  );
                }
                dot_right();
                (*ptr_to_globals).cmdcnt -= 1;
                if !((*ptr_to_globals).cmdcnt > 0) {
                  break;
                }
              }
              end_cmd_q();
              current_block = 15129665204879337069;
            }
            8729655159604064397 => {
              c1 = get_one_char();
              cnt = 0;
              if c1 == '.' as i32 {
                cnt = (*ptr_to_globals)
                  .rows
                  .wrapping_sub(2i32 as libc::c_uint)
                  .wrapping_div(2i32 as libc::c_uint) as libc::c_int
              }
              if c1 == '-' as i32 {
                cnt = (*ptr_to_globals).rows.wrapping_sub(2i32 as libc::c_uint) as libc::c_int
              }
              (*ptr_to_globals).screenbegin = begin_line((*ptr_to_globals).dot);
              dot_scroll(cnt, -1i32);
              current_block = 15129665204879337069;
            }
            15899500648299942075 => {
              (*ptr_to_globals).last_forward_char = get_one_char();
              do_cmd(';' as i32);
              if *(*ptr_to_globals).dot as libc::c_int == (*ptr_to_globals).last_forward_char {
                dot_left();
              }
              (*ptr_to_globals).last_forward_char = 0;
              current_block = 15129665204879337069;
            }
            9051390181078481641 => {
              c1 = get_one_char();
              if *(*ptr_to_globals).dot as libc::c_int != '\n' as i32 {
                (*ptr_to_globals).dot =
                  text_hole_delete((*ptr_to_globals).dot, (*ptr_to_globals).dot, 1i32);
                (*ptr_to_globals).dot =
                  char_insert((*ptr_to_globals).dot, c1 as libc::c_char, 2i32);
                dot_left();
              }
              end_cmd_q();
              current_block = 15129665204879337069;
            }
            877115918601926659 => {
              dir = FORWARD as libc::c_int;
              if c == 'b' as i32 {
                dir = BACK as libc::c_int
              }
              while !((*ptr_to_globals).dot.offset(dir as isize) < (*ptr_to_globals).text
                || (*ptr_to_globals).dot.offset(dir as isize) > (*ptr_to_globals).end.offset(-1))
              {
                (*ptr_to_globals).dot = (*ptr_to_globals).dot.offset(dir as isize);
                if ({
                  let mut bb__isspace: libc::c_uchar =
                    (*(*ptr_to_globals).dot as libc::c_int - 9i32) as libc::c_uchar;
                  (bb__isspace as libc::c_int == ' ' as i32 - 9i32
                    || bb__isspace as libc::c_int <= 13i32 - 9i32) as libc::c_int
                }) != 0
                {
                  (*ptr_to_globals).dot = skip_thing(
                    (*ptr_to_globals).dot,
                    if c == 'e' as i32 { 2i32 } else { 1i32 },
                    dir,
                    S_OVER_WS as libc::c_int,
                  )
                }
                if bb_ascii_isalnum(*(*ptr_to_globals).dot as libc::c_uchar) != 0
                  || *(*ptr_to_globals).dot as libc::c_int == '_' as i32
                {
                  (*ptr_to_globals).dot =
                    skip_thing((*ptr_to_globals).dot, 1i32, dir, S_END_ALNUM as libc::c_int)
                } else if *strchrnul(
                  b"!\"#$%&\'()*+,-./:;<=>?@[\\]^_`{|}~\x00" as *const u8 as *const libc::c_char,
                  *(*ptr_to_globals).dot as libc::c_int,
                )
                .offset(0)
                  != 0
                {
                  (*ptr_to_globals).dot =
                    skip_thing((*ptr_to_globals).dot, 1i32, dir, S_END_PUNCT as libc::c_int)
                }
                (*ptr_to_globals).cmdcnt -= 1;
                if !((*ptr_to_globals).cmdcnt > 0) {
                  break;
                }
              }
              current_block = 15129665204879337069;
            }
            1085022737867179637 => {
              dot_begin();
              dot_skip_over_ws();
              current_block = 15129665204879337069;
            }
            3113147720494587438 => {
              c1 = get_one_char();
              if c1 != 'Z' as i32 {
                indicate_error();
              } else if (*ptr_to_globals).modified_count != 0 {
                if 1i32 != 0 && (*ptr_to_globals).readonly_mode as libc::c_int != 0 {
                  status_line_bold(
                    b"\'%s\' is read only\x00" as *const u8 as *const libc::c_char,
                    (*ptr_to_globals).current_filename,
                  );
                } else {
                  cnt = file_write(
                    (*ptr_to_globals).current_filename,
                    (*ptr_to_globals).text,
                    (*ptr_to_globals).end.offset(-1),
                  );
                  if cnt < 0 {
                    if cnt == -1i32 {
                      status_line_bold(b"Write error: %m\x00" as *const u8 as *const libc::c_char);
                    }
                  } else if cnt as libc::c_long
                    == (*ptr_to_globals)
                      .end
                      .offset(-1)
                      .wrapping_offset_from((*ptr_to_globals).text)
                      as libc::c_long
                      + 1
                  {
                    (*ptr_to_globals).editing = 0 as smallint
                  }
                }
              } else {
                (*ptr_to_globals).editing = 0 as smallint
              }
              current_block = 15129665204879337069;
            }
            12960118908218882441 => {
              p = begin_line((*ptr_to_globals).dot);
              if *p.offset(-1i32 as isize) as libc::c_int == '\n' as i32 {
                dot_prev();
                current_block = 2087484904894455135;
              } else {
                dot_begin();
                (*ptr_to_globals).dot =
                  char_insert((*ptr_to_globals).dot, '\n' as i32 as libc::c_char, 1i32);
                dot_prev();
                current_block = 8629930936610358348;
              }
            }
            8720450212473544924 => {
              (*ptr_to_globals).dot = (*ptr_to_globals).screenbegin;
              cnt = 0;
              while (cnt as libc::c_uint)
                < (*ptr_to_globals)
                  .rows
                  .wrapping_sub(1i32 as libc::c_uint)
                  .wrapping_div(2i32 as libc::c_uint)
              {
                (*ptr_to_globals).dot = next_line((*ptr_to_globals).dot);
                cnt += 1
              }
              current_block = 15129665204879337069;
            }
            13015277209715431090 => {
              (*ptr_to_globals).dot = end_screen();
              if (*ptr_to_globals).cmdcnt as libc::c_uint
                > (*ptr_to_globals).rows.wrapping_sub(1i32 as libc::c_uint)
              {
                (*ptr_to_globals).cmdcnt =
                  (*ptr_to_globals).rows.wrapping_sub(1i32 as libc::c_uint) as libc::c_int
              }
              (*ptr_to_globals).cmdcnt -= 1;
              if (*ptr_to_globals).cmdcnt > 0 {
                do_cmd('-' as i32);
              }
              dot_begin();
              dot_skip_over_ws();
              current_block = 15129665204879337069;
            }
            9800435767766781385 => {
              loop {
                dot_end();
                if (*ptr_to_globals).dot < (*ptr_to_globals).end.offset(-1) {
                  undo_push(
                    (*ptr_to_globals).dot,
                    1i32 as libc::c_uint,
                    1i32 as libc::c_uchar,
                  );
                  let fresh15 = (*ptr_to_globals).dot;
                  (*ptr_to_globals).dot = (*ptr_to_globals).dot.offset(1);
                  *fresh15 = ' ' as i32 as libc::c_char;
                  undo_push(
                    (*ptr_to_globals).dot.offset(-1),
                    1i32 as libc::c_uint,
                    2i32 as libc::c_uchar,
                  );
                  while ({
                    let mut bb__isblank: libc::c_uchar = *(*ptr_to_globals).dot as libc::c_uchar;
                    (bb__isblank as libc::c_int == ' ' as i32
                      || bb__isblank as libc::c_int == '\t' as i32)
                      as libc::c_int
                  }) != 0
                  {
                    text_hole_delete((*ptr_to_globals).dot, (*ptr_to_globals).dot, 2i32);
                  }
                }
                (*ptr_to_globals).cmdcnt -= 1;
                if !((*ptr_to_globals).cmdcnt > 0) {
                  break;
                }
              }
              end_cmd_q();
              current_block = 15129665204879337069;
            }
            3432363526595694666 => {
              dot_begin();
              dot_skip_over_ws();
              current_block = 3268579060917229304;
            }
            3494829253343353619 => {
              (*ptr_to_globals).dot = (*ptr_to_globals).screenbegin;
              if (*ptr_to_globals).cmdcnt as libc::c_uint
                > (*ptr_to_globals).rows.wrapping_sub(1i32 as libc::c_uint)
              {
                (*ptr_to_globals).cmdcnt =
                  (*ptr_to_globals).rows.wrapping_sub(1i32 as libc::c_uint) as libc::c_int
              }
              (*ptr_to_globals).cmdcnt -= 1;
              if (*ptr_to_globals).cmdcnt > 0 {
                do_cmd('+' as i32);
              }
              dot_skip_over_ws();
              current_block = 15129665204879337069;
            }
            17973101765331640574 => {
              c1 = get_one_char();
              if c1 != 'g' as i32 {
                buf[0] = 'g' as i32 as libc::c_char;
                buf[1] = if c1 >= 0 { c1 } else { '*' as i32 } as libc::c_char;
                buf[2] = '\u{0}' as i32 as libc::c_char;
                not_implemented(buf.as_mut_ptr());
                current_block = 15129665204879337069;
              } else {
                if (*ptr_to_globals).cmdcnt == 0 {
                  (*ptr_to_globals).cmdcnt = 1i32
                }
                current_block = 11945623545738147997;
              }
            }
            16546625800574160972 => {
              save_dot = (*ptr_to_globals).dot;
              (*ptr_to_globals).dot = dollar_line((*ptr_to_globals).dot);
              (*ptr_to_globals).dot = yank_delete(
                save_dot,
                (*ptr_to_globals).dot,
                0,
                YANKDEL as libc::c_int,
                1i32,
              );
              if c == 'C' as i32 {
                current_block = 8629930936610358348;
              } else {
                if c == 'D' as i32 {
                  end_cmd_q();
                }
                current_block = 15129665204879337069;
              }
            }
            11937696639986586685 => {
              cnt = count_lines((*ptr_to_globals).text, (*ptr_to_globals).dot);
              c1 = get_one_char();
              find_range(&mut p, &mut q, c1 as libc::c_char);
              yank_delete(p, q, 1i32, YANKONLY as libc::c_int, 0);
              p = begin_line(p);
              q = end_line(q);
              i = count_lines(p, q);
              while i > 0 {
                if c == '<' as i32 {
                  if *p as libc::c_int == '\t' as i32 {
                    text_hole_delete(p, p, 0);
                  } else if *p as libc::c_int == ' ' as i32 {
                    j = 0;
                    while *p as libc::c_int == ' ' as i32 && j < (*ptr_to_globals).tabstop {
                      text_hole_delete(p, p, 0);
                      j += 1
                    }
                  }
                } else if c == '>' as i32 {
                  char_insert(p, '\t' as i32 as libc::c_char, 1i32);
                }
                i -= 1;
                p = next_line(p)
              }
              (*ptr_to_globals).dot = find_line(cnt);
              dot_skip_over_ws();
              end_cmd_q();
              current_block = 15129665204879337069;
            }
            17725350714912028156 => {
              p = get_input_line(b":\x00" as *const u8 as *const libc::c_char);
              colon(p);
              current_block = 15129665204879337069;
            }
            14526470074083880812 => {
              q = char_search(
                (*ptr_to_globals).dot,
                b"\n\n\x00" as *const u8 as *const libc::c_char,
                (FORWARD as libc::c_int) << 1i32 | FULL as libc::c_int,
              );
              if !q.is_null() {
                (*ptr_to_globals).dot = next_line(q)
              }
              current_block = 15129665204879337069;
            }
            8893187391306414141 => {
              q = char_search(
                (*ptr_to_globals).dot,
                b"\n\n\x00" as *const u8 as *const libc::c_char,
                ((BACK as libc::c_int as libc::c_uint) << 1i32
                  | FULL as libc::c_int as libc::c_uint) as libc::c_int,
              );
              if !q.is_null() {
                (*ptr_to_globals).dot = next_line(q)
              }
              current_block = 15129665204879337069;
            }
            7021673758293221412 => {
              dir = BACK as libc::c_int;
              p = (*ptr_to_globals).dot.offset(-1);
              if *(*ptr_to_globals).last_search_pattern.offset(0) as libc::c_int == '?' as i32 {
                dir = FORWARD as libc::c_int;
                p = (*ptr_to_globals).dot.offset(1)
              }
              current_block = 4166979493554389389;
            }
            18374191879090272823 => {
              buf[0] = c as libc::c_char;
              buf[1] = '\u{0}' as i32 as libc::c_char;
              q = get_input_line(buf.as_mut_ptr());
              if *q.offset(0) as libc::c_int != 0 && *q.offset(1) == 0 {
                if *(*ptr_to_globals).last_search_pattern.offset(0) != 0 {
                  *(*ptr_to_globals).last_search_pattern.offset(0) = c as libc::c_char
                }
                current_block = 7392824444931029276;
              } else if *q.offset(0) != 0 {
                free((*ptr_to_globals).last_search_pattern as *mut libc::c_void);
                (*ptr_to_globals).last_search_pattern = crate::libbb::xfuncs_printf::xstrdup(q);
                current_block = 7392824444931029276;
              } else {
                current_block = 15129665204879337069;
              }
            }
            16407828456666301883 => {
              if (*ptr_to_globals).last_forward_char == 0 {
                current_block = 15129665204879337069;
              } else {
                loop {
                  q = (*ptr_to_globals).dot.offset(-1);
                  while q >= (*ptr_to_globals).text
                    && *q as libc::c_int != '\n' as i32
                    && *q as libc::c_int != (*ptr_to_globals).last_forward_char
                  {
                    q = q.offset(-1)
                  }
                  if q >= (*ptr_to_globals).text
                    && *q as libc::c_int == (*ptr_to_globals).last_forward_char
                  {
                    (*ptr_to_globals).dot = q
                  }
                  (*ptr_to_globals).cmdcnt -= 1;
                  if !((*ptr_to_globals).cmdcnt > 0) {
                    break;
                  }
                }
                current_block = 15129665204879337069;
              }
            }
            9018432604062702004 => {
              q = (*ptr_to_globals).dot;
              while q < (*ptr_to_globals).end && *q as libc::c_int != '\n' as i32 {
                if !strchr(
                  b"()[]{}\x00" as *const u8 as *const libc::c_char,
                  *q as libc::c_int,
                )
                .is_null()
                {
                  p = find_pair(q, *q);
                  if p.is_null() {
                    indicate_error();
                  } else {
                    (*ptr_to_globals).dot = p
                  }
                  break;
                } else {
                  q = q.offset(1)
                }
              }
              if *q as libc::c_int == '\n' as i32 {
                indicate_error();
              }
              current_block = 15129665204879337069;
            }
            10247103787464459848 => {
              p = (*ptr_to_globals).reg[(*ptr_to_globals).YDreg as usize];
              if p.is_null() {
                status_line_bold(
                  b"Nothing in register %c\x00" as *const u8 as *const libc::c_char,
                  what_reg() as libc::c_int,
                );
              } else {
                if !strchr(p, '\n' as i32).is_null() {
                  if c == 'P' as i32 {
                    dot_begin();
                  }
                  if c == 'p' as i32 {
                    if end_line((*ptr_to_globals).dot) == (*ptr_to_globals).end.offset(-1) {
                      (*ptr_to_globals).dot = (*ptr_to_globals).end
                    } else {
                      dot_next();
                    }
                  }
                } else if c == 'p' as i32 {
                  dot_right();
                }
                string_insert((*ptr_to_globals).dot, p, 1i32);
                end_cmd_q();
              }
              current_block = 15129665204879337069;
            }
            15260732871948875843 => {
              c1 = (get_one_char() | 0x20i32) - 'a' as i32;
              if c1 as libc::c_uint <= 25i32 as libc::c_uint {
                (*ptr_to_globals).mark[c1 as usize] = (*ptr_to_globals).dot
              } else {
                indicate_error();
              }
              current_block = 15129665204879337069;
            }
            12738322036487086035 => {
              c1 = get_one_char() | 0x20i32;
              if (c1 - 'a' as i32) as libc::c_uint <= 25i32 as libc::c_uint {
                c1 = c1 - 'a' as i32;
                q = (*ptr_to_globals).mark[c1 as usize];
                if (*ptr_to_globals).text <= q && q < (*ptr_to_globals).end {
                  (*ptr_to_globals).dot = q;
                  dot_begin();
                  dot_skip_over_ws();
                }
              } else if c1 == '\'' as i32 {
                (*ptr_to_globals).dot = swap_context((*ptr_to_globals).dot);
                dot_begin();
                dot_skip_over_ws();
              } else {
                indicate_error();
              }
              current_block = 15129665204879337069;
            }
            13255096073384561358 => {
              c1 = (get_one_char() | 0x20i32) - 'a' as i32;
              if c1 as libc::c_uint <= 25i32 as libc::c_uint {
                (*ptr_to_globals).YDreg = c1 as smalluint
              } else {
                indicate_error();
              }
              current_block = 15129665204879337069;
            }
            10258711639984089377 => {
              if (*ptr_to_globals).cmd_mode as libc::c_int == 0 {
                indicate_error();
              }
              (*ptr_to_globals).cmd_mode = 0 as smallint;
              undo_queue_commit();
              end_cmd_q();
              (*ptr_to_globals).last_status_cksum = 0;
              current_block = 15129665204879337069;
            }
            11439127087547047736 => {
              buf[0] = c as libc::c_char;
              buf[1] = '\u{0}' as i32 as libc::c_char;
              not_implemented(buf.as_mut_ptr());
              end_cmd_q();
              current_block = 17440971994642376514;
            }
            7961798899781870241 => {
              dot_scroll(
                (*ptr_to_globals).rows.wrapping_sub(2i32 as libc::c_uint) as libc::c_int,
                -1i32,
              );
              current_block = 15129665204879337069;
            }
            9426343755402444879 => {
              dot_scroll(
                (*ptr_to_globals)
                  .rows
                  .wrapping_sub(2i32 as libc::c_uint)
                  .wrapping_div(2i32 as libc::c_uint) as libc::c_int,
                1i32,
              );
              current_block = 15129665204879337069;
            }
            13352459794680105913 => {
              dot_scroll(1i32, 1i32);
              current_block = 15129665204879337069;
            }
            14142272253464333006 => {
              dot_scroll(
                (*ptr_to_globals).rows.wrapping_sub(2i32 as libc::c_uint) as libc::c_int,
                1i32,
              );
              current_block = 15129665204879337069;
            }
            10758177197742640066 => {
              (*ptr_to_globals).last_status_cksum = 0;
              current_block = 15129665204879337069;
            }
            6152256259730122749 => {
              current_block = 7534742345255184552;
            }
            12883932598258173301 => {
              current_block = 8800996768013373992;
            }
            11242998110520238401 => {
              redraw(1i32);
              current_block = 15129665204879337069;
            }
            13619733043935729992 => {
              loop {
                dot_next();
                dot_skip_over_ws();
                (*ptr_to_globals).cmdcnt -= 1;
                if !((*ptr_to_globals).cmdcnt > 0) {
                  break;
                }
              }
              current_block = 15129665204879337069;
            }
            9339065157412720613 => {
              dot_scroll(
                (*ptr_to_globals)
                  .rows
                  .wrapping_sub(2i32 as libc::c_uint)
                  .wrapping_div(2i32 as libc::c_uint) as libc::c_int,
                -1i32,
              );
              current_block = 15129665204879337069;
            }
            11447082683497798022 => {
              dot_scroll(1i32, -1i32);
              current_block = 15129665204879337069;
            }
            5182000506326660482 => {
              current_block = 13993698454868426881;
            }
            1105010766850597332 => {
              if !(*ptr_to_globals).reg[27].is_null() {
                p = begin_line((*ptr_to_globals).dot);
                q = end_line((*ptr_to_globals).dot);
                p = text_hole_delete(p, q, 1i32);
                p = p.offset(string_insert(p, (*ptr_to_globals).reg[27], 2i32) as isize);
                (*ptr_to_globals).dot = p;
                dot_skip_over_ws();
              }
              current_block = 15129665204879337069;
            }
            8616046655533110204 => {
              undo_pop();
              current_block = 15129665204879337069;
            }
            5127767458142431603 => {
              loop {
                (*ptr_to_globals).dot = end_line((*ptr_to_globals).dot);
                (*ptr_to_globals).cmdcnt -= 1;
                if (*ptr_to_globals).cmdcnt <= 0 {
                  break;
                }
                dot_next();
              }
              current_block = 15129665204879337069;
            }
            222014967776118151 => {
              (*ptr_to_globals).last_forward_char = get_one_char();
              current_block = 7856905509180742666;
            }
            11209792479411604110 => {
              loop {
                dot_prev();
                dot_skip_over_ws();
                (*ptr_to_globals).cmdcnt -= 1;
                if !((*ptr_to_globals).cmdcnt > 0) {
                  break;
                }
              }
              current_block = 15129665204879337069;
            }
            3364823792826654116 => {
              if (*ptr_to_globals).lmc_len != 0 {
                (*ptr_to_globals).ioq_start = crate::libbb::xfuncs_printf::xstrndup(
                  (*ptr_to_globals).last_modifying_cmd.as_mut_ptr(),
                  (*ptr_to_globals).lmc_len,
                );
                (*ptr_to_globals).ioq = (*ptr_to_globals).ioq_start
              }
              current_block = 15129665204879337069;
            }
            18096603330221575131 => {
              current_block = 17498168302144015873;
            }
            16891123271837848903 => {
              dot_end();
              current_block = 1752638907092016026;
            }
            8517235759107662071 => {
              current_block = 5847749760081351726;
            }
            12525254419223051704 => {
              if (*ptr_to_globals).dot < (*ptr_to_globals).end.offset(-1) {
                (*ptr_to_globals).dot = yank_delete(
                  (*ptr_to_globals).dot,
                  (*ptr_to_globals).dot,
                  1i32,
                  YANKDEL as libc::c_int,
                  1i32,
                )
              }
              current_block = 15129665204879337069;
            }
            15232911949322867522 => {
              current_block = 17251831742223396249;
            }
            10863374208794025069 => {
              current_block = 1895262434596074581;
            }
            451126677064669119 => {
              loop {
                dot_prev();
                (*ptr_to_globals).dot = move_to_col(
                  (*ptr_to_globals).dot,
                  (*ptr_to_globals).ccol + (*ptr_to_globals).offset,
                );
                (*ptr_to_globals).cmdcnt -= 1;
                if !((*ptr_to_globals).cmdcnt > 0) {
                  break;
                }
              }
              current_block = 15129665204879337069;
            }
            4611735929166613116 => {
              loop {
                if bb_ascii_isalnum(*(*ptr_to_globals).dot as libc::c_uchar) != 0
                  || *(*ptr_to_globals).dot as libc::c_int == '_' as i32
                {
                  (*ptr_to_globals).dot = skip_thing(
                    (*ptr_to_globals).dot,
                    1i32,
                    FORWARD as libc::c_int,
                    S_END_ALNUM as libc::c_int,
                  )
                } else if *strchrnul(
                  b"!\"#$%&\'()*+,-./:;<=>?@[\\]^_`{|}~\x00" as *const u8 as *const libc::c_char,
                  *(*ptr_to_globals).dot as libc::c_int,
                )
                .offset(0)
                  != 0
                {
                  (*ptr_to_globals).dot = skip_thing(
                    (*ptr_to_globals).dot,
                    1i32,
                    FORWARD as libc::c_int,
                    S_END_PUNCT as libc::c_int,
                  )
                }
                if (*ptr_to_globals).dot < (*ptr_to_globals).end.offset(-1) {
                  (*ptr_to_globals).dot = (*ptr_to_globals).dot.offset(1)
                }
                if ({
                  let mut bb__isspace: libc::c_uchar =
                    (*(*ptr_to_globals).dot as libc::c_int - 9i32) as libc::c_uchar;
                  (bb__isspace as libc::c_int == ' ' as i32 - 9i32
                    || bb__isspace as libc::c_int <= 13i32 - 9i32) as libc::c_int
                }) != 0
                {
                  (*ptr_to_globals).dot = skip_thing(
                    (*ptr_to_globals).dot,
                    2i32,
                    FORWARD as libc::c_int,
                    S_OVER_WS as libc::c_int,
                  )
                }
                (*ptr_to_globals).cmdcnt -= 1;
                if !((*ptr_to_globals).cmdcnt > 0) {
                  break;
                }
              }
              current_block = 15129665204879337069;
            }
            4386451087681909888 => {
              (*ptr_to_globals).dot =
                move_to_col((*ptr_to_globals).dot, (*ptr_to_globals).cmdcnt - 1i32);
              current_block = 15129665204879337069;
            }
            1296397779060594135 => {
              dot_begin();
              current_block = 15129665204879337069;
            }
            _ => {}
          }
          match current_block {
            15129665204879337069 => {}
            8629930936610358348 => {}
            _ => {
              match current_block {
                17251831742223396249 => {
                  dir = 0;
                  if c == 'X' as i32 {
                    dir = -1i32
                  }
                  loop {
                    if *(*ptr_to_globals).dot.offset(dir as isize) as libc::c_int != '\n' as i32 {
                      if c == 'X' as i32 {
                        (*ptr_to_globals).dot = (*ptr_to_globals).dot.offset(-1)
                      }
                      (*ptr_to_globals).dot = yank_delete(
                        (*ptr_to_globals).dot,
                        (*ptr_to_globals).dot,
                        0,
                        YANKDEL as libc::c_int,
                        1i32,
                      )
                    }
                    (*ptr_to_globals).cmdcnt -= 1;
                    if !((*ptr_to_globals).cmdcnt > 0) {
                      break;
                    }
                  }
                  end_cmd_q();
                  if c == 's' as i32 {
                    current_block = 8629930936610358348;
                  } else {
                    current_block = 15129665204879337069;
                  }
                }
                2087484904894455135 => {
                  dot_end();
                  (*ptr_to_globals).dot =
                    char_insert((*ptr_to_globals).dot, '\n' as i32 as libc::c_char, 1i32);
                  current_block = 8629930936610358348;
                }
                11945623545738147997 => {
                  (*ptr_to_globals).dot = (*ptr_to_globals).end.offset(-1);
                  if (*ptr_to_globals).cmdcnt > 0 {
                    (*ptr_to_globals).dot = find_line((*ptr_to_globals).cmdcnt)
                  }
                  dot_skip_over_ws();
                  current_block = 15129665204879337069;
                }
                5847749760081351726 => {
                  dir = FORWARD as libc::c_int;
                  if c == 'B' as i32 {
                    dir = BACK as libc::c_int
                  }
                  loop {
                    if c == 'W' as i32
                      || ({
                        let mut bb__isspace: libc::c_uchar =
                          (*(*ptr_to_globals).dot.offset(dir as isize) as libc::c_int - 9i32)
                            as libc::c_uchar;
                        (bb__isspace as libc::c_int == ' ' as i32 - 9i32
                          || bb__isspace as libc::c_int <= 13i32 - 9i32)
                          as libc::c_int
                      }) != 0
                    {
                      (*ptr_to_globals).dot =
                        skip_thing((*ptr_to_globals).dot, 1i32, dir, S_TO_WS as libc::c_int);
                      (*ptr_to_globals).dot =
                        skip_thing((*ptr_to_globals).dot, 2i32, dir, S_OVER_WS as libc::c_int)
                    }
                    if c != 'W' as i32 {
                      (*ptr_to_globals).dot =
                        skip_thing((*ptr_to_globals).dot, 1i32, dir, S_BEFORE_WS as libc::c_int)
                    }
                    (*ptr_to_globals).cmdcnt -= 1;
                    if !((*ptr_to_globals).cmdcnt > 0) {
                      break;
                    }
                  }
                  current_block = 15129665204879337069;
                }
                17440971994642376514 => {
                  current_block = 15129665204879337069;
                }
                7534742345255184552 => {
                  current_block = 17247297260531395789;
                }
                8800996768013373992 => {
                  loop {
                    dot_next();
                    (*ptr_to_globals).dot = move_to_col(
                      (*ptr_to_globals).dot,
                      (*ptr_to_globals).ccol + (*ptr_to_globals).offset,
                    );
                    (*ptr_to_globals).cmdcnt -= 1;
                    if !((*ptr_to_globals).cmdcnt > 0) {
                      break;
                    }
                  }
                  current_block = 15129665204879337069;
                }
                13993698454868426881 => {
                  loop {
                    dot_right();
                    (*ptr_to_globals).cmdcnt -= 1;
                    if !((*ptr_to_globals).cmdcnt > 0) {
                      break;
                    }
                  }
                  current_block = 15129665204879337069;
                }
                7856905509180742666 => {
                  while !((*ptr_to_globals).last_forward_char == 0) {
                    q = (*ptr_to_globals).dot.offset(1);
                    while q < (*ptr_to_globals).end.offset(-1)
                      && *q as libc::c_int != '\n' as i32
                      && *q as libc::c_int != (*ptr_to_globals).last_forward_char
                    {
                      q = q.offset(1)
                    }
                    if *q as libc::c_int == (*ptr_to_globals).last_forward_char {
                      (*ptr_to_globals).dot = q
                    }
                    (*ptr_to_globals).cmdcnt -= 1;
                    if !((*ptr_to_globals).cmdcnt > 0) {
                      break;
                    }
                  }
                  current_block = 15129665204879337069;
                }
                17498168302144015873 => {
                  current_block = 8681395796513813967;
                }
                1752638907092016026 => {
                  if *(*ptr_to_globals).dot as libc::c_int != '\n' as i32 {
                    (*ptr_to_globals).dot = (*ptr_to_globals).dot.offset(1)
                  }
                  current_block = 8629930936610358348;
                }
                3268579060917229304 => {
                  current_block = 8629930936610358348;
                }
                1895262434596074581 => {
                  current_block = 8908416993177701018;
                }
                _ => {}
              }
              match current_block {
                8629930936610358348 => {}
                15129665204879337069 => {}
                _ => {
                  match current_block {
                    17247297260531395789 => {
                      loop {
                        dot_left();
                        (*ptr_to_globals).cmdcnt -= 1;
                        if !((*ptr_to_globals).cmdcnt > 0) {
                          break;
                        }
                      }
                      current_block = 15129665204879337069;
                    }
                    8681395796513813967 => {
                      current_block = 5591548203144509315;
                    }
                    8908416993177701018 => {
                      current_block = 16124761010012532485;
                    }
                    _ => {}
                  }
                  match current_block {
                    15129665204879337069 => {}
                    _ => {
                      match current_block {
                        16124761010012532485 => {
                          let mut yf: libc::c_int = 0;
                          let mut ml: libc::c_int = 0;
                          let mut whole: libc::c_int = 0;
                          yf = YANKDEL as libc::c_int;
                          if c == 'y' as i32 || c == 'Y' as i32 {
                            yf = YANKONLY as libc::c_int
                          }
                          c1 = 'y' as i32;
                          if c != 'Y' as i32 {
                            c1 = get_one_char()
                          }
                          ml = find_range(&mut p, &mut q, c1 as libc::c_char);
                          place_cursor(0i32, 0);
                          if c1 == 27i32 {
                            c1 = 27i32;
                            c = c1
                          } else if !strchr(b"wW\x00" as *const u8 as *const libc::c_char, c1)
                            .is_null()
                          {
                            ml = 0;
                            if c == 'c' as i32 {
                              while ({
                                let mut bb__isspace: libc::c_uchar =
                                  (*q as libc::c_int - 9i32) as libc::c_uchar;
                                (bb__isspace as libc::c_int == ' ' as i32 - 9i32
                                  || bb__isspace as libc::c_int <= 13i32 - 9i32)
                                  as libc::c_int
                              }) != 0
                                && q > p
                              {
                                q = q.offset(-1)
                              }
                            }
                            (*ptr_to_globals).dot = yank_delete(p, q, ml, yf, 1i32)
                          } else if !strchr(
                            b"^0bBeEft%$ lh\x08\x7f\x00" as *const u8 as *const libc::c_char,
                            c1,
                          )
                          .is_null()
                          {
                            (*ptr_to_globals).dot = yank_delete(p, q, ml, yf, 1i32)
                          } else if !strchr(
                            b"cdykjGHL+-{}\r\n\x00" as *const u8 as *const libc::c_char,
                            c1,
                          )
                          .is_null()
                          {
                            (*ptr_to_globals).dot = yank_delete(p, q, ml, yf, 1i32);
                            whole = 1i32
                          } else {
                            c1 = 27i32;
                            c = c1;
                            ml = 0;
                            indicate_error();
                          }
                          if ml != 0 && whole != 0 {
                            if c == 'c' as i32 {
                              (*ptr_to_globals).dot = char_insert(
                                (*ptr_to_globals).dot,
                                '\n' as i32 as libc::c_char,
                                2i32,
                              );
                              if whole != 0
                                && (*ptr_to_globals).dot != (*ptr_to_globals).end.offset(-1)
                              {
                                dot_prev();
                              }
                            } else if c == 'd' as i32 {
                              dot_begin();
                              dot_skip_over_ws();
                            }
                          }
                          if c1 != 27i32 {
                            if c == 'c' as i32 {
                              strcpy(
                                buf.as_mut_ptr(),
                                b"Change\x00" as *const u8 as *const libc::c_char,
                              );
                              current_block = 8629930936610358348;
                            } else {
                              if c == 'd' as i32 {
                                strcpy(
                                  buf.as_mut_ptr(),
                                  b"Delete\x00" as *const u8 as *const libc::c_char,
                                );
                              }
                              if c == 'y' as i32 || c == 'Y' as i32 {
                                strcpy(
                                  buf.as_mut_ptr(),
                                  b"Yank\x00" as *const u8 as *const libc::c_char,
                                );
                              }
                              p = (*ptr_to_globals).reg[(*ptr_to_globals).YDreg as usize];
                              q = p.offset(strlen(p) as isize);
                              cnt = 0;
                              while p <= q {
                                if *p as libc::c_int == '\n' as i32 {
                                  cnt += 1
                                }
                                p = p.offset(1)
                              }
                              status_line(
                                b"%s %u lines (%u chars) using [%c]\x00" as *const u8
                                  as *const libc::c_char,
                                buf.as_mut_ptr(),
                                cnt,
                                strlen((*ptr_to_globals).reg[(*ptr_to_globals).YDreg as usize])
                                  as libc::c_uint,
                                what_reg() as libc::c_int,
                              );
                              end_cmd_q();
                              current_block = 15129665204879337069;
                            }
                          } else {
                            current_block = 15129665204879337069;
                          }
                        }
                        5591548203144509315 => {
                          current_block = 2636677179867529885;
                        }
                        _ => {}
                      }
                      match current_block {
                        15129665204879337069 => {}
                        8629930936610358348 => {}
                        _ => {
                          match current_block {
                            2636677179867529885 => {
                              current_block = 12309206730560524281;
                            }
                            _ => {}
                          }
                          match current_block {
                            12309206730560524281 => {
                              current_block = 3325768110057758661;
                            }
                            _ => {}
                          }
                          match current_block {
                            3325768110057758661 => {
                              current_block = 14815832896553429982;
                            }
                            _ => {}
                          }
                          match current_block {
                            14815832896553429982 => {
                              current_block = 10731695520297161438;
                            }
                            _ => {}
                          }
                          match current_block {
                            10731695520297161438 => {
                              if c == '0' as i32 && (*ptr_to_globals).cmdcnt < 1i32 {
                                dot_begin();
                              } else {
                                (*ptr_to_globals).cmdcnt =
                                  (*ptr_to_globals).cmdcnt * 10i32 + (c - '0' as i32)
                              }
                              current_block = 15129665204879337069;
                            }
                            _ => {}
                          }
                          match current_block {
                            15129665204879337069 => {}
                            _ => {
                              loop {
                                match current_block {
                                  16813369756331276724 => {
                                    msg = std::ptr::null();
                                    current_block = 7392824444931029276;
                                  }
                                  7392824444931029276 => {
                                    dir = FORWARD as libc::c_int;
                                    p = (*ptr_to_globals).dot.offset(1);
                                    if *(*ptr_to_globals).last_search_pattern.offset(0)
                                      as libc::c_int
                                      == '?' as i32
                                    {
                                      dir = BACK as libc::c_int;
                                      p = (*ptr_to_globals).dot.offset(-1)
                                    }
                                    current_block = 4166979493554389389;
                                  }
                                  _ => {
                                    q = char_search(
                                      p,
                                      (*ptr_to_globals).last_search_pattern.offset(1),
                                      dir << 1i32 | FULL as libc::c_int,
                                    );
                                    if !q.is_null() {
                                      (*ptr_to_globals).dot = q;
                                      msg = std::ptr::null()
                                    } else {
                                      p = (*ptr_to_globals).text;
                                      if dir == BACK as libc::c_int {
                                        p = (*ptr_to_globals).end.offset(-1)
                                      }
                                      q = char_search(
                                        p,
                                        (*ptr_to_globals).last_search_pattern.offset(1),
                                        dir << 1i32 | FULL as libc::c_int,
                                      );
                                      if !q.is_null() {
                                        (*ptr_to_globals).dot = q;
                                        msg = b"search hit BOTTOM, continuing at TOP\x00"
                                          as *const u8
                                          as *const libc::c_char;
                                        if dir == BACK as libc::c_int {
                                          msg = b"search hit TOP, continuing at BOTTOM\x00"
                                            as *const u8
                                            as *const libc::c_char
                                        }
                                      } else {
                                        msg = b"Pattern not found\x00" as *const u8
                                          as *const libc::c_char
                                      }
                                    }
                                    if !msg.is_null() {
                                      status_line_bold(
                                        b"%s\x00" as *const u8 as *const libc::c_char,
                                        msg,
                                      );
                                    }
                                    (*ptr_to_globals).cmdcnt -= 1;
                                    if (*ptr_to_globals).cmdcnt > 0 {
                                      current_block = 16813369756331276724;
                                    } else {
                                      break;
                                    }
                                  }
                                }
                              }
                              current_block = 15129665204879337069;
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
        66 => {
          current_block = 8517235759107662071;
          match current_block {
            16992905640583886232 => {
              loop {
                if (*(*ptr_to_globals).dot as libc::c_int - 'a' as i32) as libc::c_uchar
                  as libc::c_int
                  <= 'z' as i32 - 'a' as i32
                {
                  undo_push(
                    (*ptr_to_globals).dot,
                    1i32 as libc::c_uint,
                    1i32 as libc::c_uchar,
                  );
                  *(*ptr_to_globals).dot =
                    bb_ascii_toupper(*(*ptr_to_globals).dot as libc::c_uchar) as libc::c_char;
                  undo_push(
                    (*ptr_to_globals).dot,
                    1i32 as libc::c_uint,
                    2i32 as libc::c_uchar,
                  );
                } else if (*(*ptr_to_globals).dot as libc::c_int - 'A' as i32) as libc::c_uchar
                  as libc::c_int
                  <= 'Z' as i32 - 'A' as i32
                {
                  undo_push(
                    (*ptr_to_globals).dot,
                    1i32 as libc::c_uint,
                    1i32 as libc::c_uchar,
                  );
                  *(*ptr_to_globals).dot =
                    bb_ascii_tolower(*(*ptr_to_globals).dot as libc::c_uchar) as libc::c_char;
                  undo_push(
                    (*ptr_to_globals).dot,
                    1i32 as libc::c_uint,
                    2i32 as libc::c_uchar,
                  );
                }
                dot_right();
                (*ptr_to_globals).cmdcnt -= 1;
                if !((*ptr_to_globals).cmdcnt > 0) {
                  break;
                }
              }
              end_cmd_q();
              current_block = 15129665204879337069;
            }
            8729655159604064397 => {
              c1 = get_one_char();
              cnt = 0;
              if c1 == '.' as i32 {
                cnt = (*ptr_to_globals)
                  .rows
                  .wrapping_sub(2i32 as libc::c_uint)
                  .wrapping_div(2i32 as libc::c_uint) as libc::c_int
              }
              if c1 == '-' as i32 {
                cnt = (*ptr_to_globals).rows.wrapping_sub(2i32 as libc::c_uint) as libc::c_int
              }
              (*ptr_to_globals).screenbegin = begin_line((*ptr_to_globals).dot);
              dot_scroll(cnt, -1i32);
              current_block = 15129665204879337069;
            }
            15899500648299942075 => {
              (*ptr_to_globals).last_forward_char = get_one_char();
              do_cmd(';' as i32);
              if *(*ptr_to_globals).dot as libc::c_int == (*ptr_to_globals).last_forward_char {
                dot_left();
              }
              (*ptr_to_globals).last_forward_char = 0;
              current_block = 15129665204879337069;
            }
            9051390181078481641 => {
              c1 = get_one_char();
              if *(*ptr_to_globals).dot as libc::c_int != '\n' as i32 {
                (*ptr_to_globals).dot =
                  text_hole_delete((*ptr_to_globals).dot, (*ptr_to_globals).dot, 1i32);
                (*ptr_to_globals).dot =
                  char_insert((*ptr_to_globals).dot, c1 as libc::c_char, 2i32);
                dot_left();
              }
              end_cmd_q();
              current_block = 15129665204879337069;
            }
            877115918601926659 => {
              dir = FORWARD as libc::c_int;
              if c == 'b' as i32 {
                dir = BACK as libc::c_int
              }
              while !((*ptr_to_globals).dot.offset(dir as isize) < (*ptr_to_globals).text
                || (*ptr_to_globals).dot.offset(dir as isize) > (*ptr_to_globals).end.offset(-1))
              {
                (*ptr_to_globals).dot = (*ptr_to_globals).dot.offset(dir as isize);
                if ({
                  let mut bb__isspace: libc::c_uchar =
                    (*(*ptr_to_globals).dot as libc::c_int - 9i32) as libc::c_uchar;
                  (bb__isspace as libc::c_int == ' ' as i32 - 9i32
                    || bb__isspace as libc::c_int <= 13i32 - 9i32) as libc::c_int
                }) != 0
                {
                  (*ptr_to_globals).dot = skip_thing(
                    (*ptr_to_globals).dot,
                    if c == 'e' as i32 { 2i32 } else { 1i32 },
                    dir,
                    S_OVER_WS as libc::c_int,
                  )
                }
                if bb_ascii_isalnum(*(*ptr_to_globals).dot as libc::c_uchar) != 0
                  || *(*ptr_to_globals).dot as libc::c_int == '_' as i32
                {
                  (*ptr_to_globals).dot =
                    skip_thing((*ptr_to_globals).dot, 1i32, dir, S_END_ALNUM as libc::c_int)
                } else if *strchrnul(
                  b"!\"#$%&\'()*+,-./:;<=>?@[\\]^_`{|}~\x00" as *const u8 as *const libc::c_char,
                  *(*ptr_to_globals).dot as libc::c_int,
                )
                .offset(0)
                  != 0
                {
                  (*ptr_to_globals).dot =
                    skip_thing((*ptr_to_globals).dot, 1i32, dir, S_END_PUNCT as libc::c_int)
                }
                (*ptr_to_globals).cmdcnt -= 1;
                if !((*ptr_to_globals).cmdcnt > 0) {
                  break;
                }
              }
              current_block = 15129665204879337069;
            }
            1085022737867179637 => {
              dot_begin();
              dot_skip_over_ws();
              current_block = 15129665204879337069;
            }
            3113147720494587438 => {
              c1 = get_one_char();
              if c1 != 'Z' as i32 {
                indicate_error();
              } else if (*ptr_to_globals).modified_count != 0 {
                if 1i32 != 0 && (*ptr_to_globals).readonly_mode as libc::c_int != 0 {
                  status_line_bold(
                    b"\'%s\' is read only\x00" as *const u8 as *const libc::c_char,
                    (*ptr_to_globals).current_filename,
                  );
                } else {
                  cnt = file_write(
                    (*ptr_to_globals).current_filename,
                    (*ptr_to_globals).text,
                    (*ptr_to_globals).end.offset(-1),
                  );
                  if cnt < 0 {
                    if cnt == -1i32 {
                      status_line_bold(b"Write error: %m\x00" as *const u8 as *const libc::c_char);
                    }
                  } else if cnt as libc::c_long
                    == (*ptr_to_globals)
                      .end
                      .offset(-1)
                      .wrapping_offset_from((*ptr_to_globals).text)
                      as libc::c_long
                      + 1
                  {
                    (*ptr_to_globals).editing = 0 as smallint
                  }
                }
              } else {
                (*ptr_to_globals).editing = 0 as smallint
              }
              current_block = 15129665204879337069;
            }
            12960118908218882441 => {
              p = begin_line((*ptr_to_globals).dot);
              if *p.offset(-1i32 as isize) as libc::c_int == '\n' as i32 {
                dot_prev();
                current_block = 2087484904894455135;
              } else {
                dot_begin();
                (*ptr_to_globals).dot =
                  char_insert((*ptr_to_globals).dot, '\n' as i32 as libc::c_char, 1i32);
                dot_prev();
                current_block = 8629930936610358348;
              }
            }
            8720450212473544924 => {
              (*ptr_to_globals).dot = (*ptr_to_globals).screenbegin;
              cnt = 0;
              while (cnt as libc::c_uint)
                < (*ptr_to_globals)
                  .rows
                  .wrapping_sub(1i32 as libc::c_uint)
                  .wrapping_div(2i32 as libc::c_uint)
              {
                (*ptr_to_globals).dot = next_line((*ptr_to_globals).dot);
                cnt += 1
              }
              current_block = 15129665204879337069;
            }
            13015277209715431090 => {
              (*ptr_to_globals).dot = end_screen();
              if (*ptr_to_globals).cmdcnt as libc::c_uint
                > (*ptr_to_globals).rows.wrapping_sub(1i32 as libc::c_uint)
              {
                (*ptr_to_globals).cmdcnt =
                  (*ptr_to_globals).rows.wrapping_sub(1i32 as libc::c_uint) as libc::c_int
              }
              (*ptr_to_globals).cmdcnt -= 1;
              if (*ptr_to_globals).cmdcnt > 0 {
                do_cmd('-' as i32);
              }
              dot_begin();
              dot_skip_over_ws();
              current_block = 15129665204879337069;
            }
            9800435767766781385 => {
              loop {
                dot_end();
                if (*ptr_to_globals).dot < (*ptr_to_globals).end.offset(-1) {
                  undo_push(
                    (*ptr_to_globals).dot,
                    1i32 as libc::c_uint,
                    1i32 as libc::c_uchar,
                  );
                  let fresh15 = (*ptr_to_globals).dot;
                  (*ptr_to_globals).dot = (*ptr_to_globals).dot.offset(1);
                  *fresh15 = ' ' as i32 as libc::c_char;
                  undo_push(
                    (*ptr_to_globals).dot.offset(-1),
                    1i32 as libc::c_uint,
                    2i32 as libc::c_uchar,
                  );
                  while ({
                    let mut bb__isblank: libc::c_uchar = *(*ptr_to_globals).dot as libc::c_uchar;
                    (bb__isblank as libc::c_int == ' ' as i32
                      || bb__isblank as libc::c_int == '\t' as i32)
                      as libc::c_int
                  }) != 0
                  {
                    text_hole_delete((*ptr_to_globals).dot, (*ptr_to_globals).dot, 2i32);
                  }
                }
                (*ptr_to_globals).cmdcnt -= 1;
                if !((*ptr_to_globals).cmdcnt > 0) {
                  break;
                }
              }
              end_cmd_q();
              current_block = 15129665204879337069;
            }
            3432363526595694666 => {
              dot_begin();
              dot_skip_over_ws();
              current_block = 3268579060917229304;
            }
            3494829253343353619 => {
              (*ptr_to_globals).dot = (*ptr_to_globals).screenbegin;
              if (*ptr_to_globals).cmdcnt as libc::c_uint
                > (*ptr_to_globals).rows.wrapping_sub(1i32 as libc::c_uint)
              {
                (*ptr_to_globals).cmdcnt =
                  (*ptr_to_globals).rows.wrapping_sub(1i32 as libc::c_uint) as libc::c_int
              }
              (*ptr_to_globals).cmdcnt -= 1;
              if (*ptr_to_globals).cmdcnt > 0 {
                do_cmd('+' as i32);
              }
              dot_skip_over_ws();
              current_block = 15129665204879337069;
            }
            17973101765331640574 => {
              c1 = get_one_char();
              if c1 != 'g' as i32 {
                buf[0] = 'g' as i32 as libc::c_char;
                buf[1] = if c1 >= 0 { c1 } else { '*' as i32 } as libc::c_char;
                buf[2] = '\u{0}' as i32 as libc::c_char;
                not_implemented(buf.as_mut_ptr());
                current_block = 15129665204879337069;
              } else {
                if (*ptr_to_globals).cmdcnt == 0 {
                  (*ptr_to_globals).cmdcnt = 1i32
                }
                current_block = 11945623545738147997;
              }
            }
            16546625800574160972 => {
              save_dot = (*ptr_to_globals).dot;
              (*ptr_to_globals).dot = dollar_line((*ptr_to_globals).dot);
              (*ptr_to_globals).dot = yank_delete(
                save_dot,
                (*ptr_to_globals).dot,
                0,
                YANKDEL as libc::c_int,
                1i32,
              );
              if c == 'C' as i32 {
                current_block = 8629930936610358348;
              } else {
                if c == 'D' as i32 {
                  end_cmd_q();
                }
                current_block = 15129665204879337069;
              }
            }
            11937696639986586685 => {
              cnt = count_lines((*ptr_to_globals).text, (*ptr_to_globals).dot);
              c1 = get_one_char();
              find_range(&mut p, &mut q, c1 as libc::c_char);
              yank_delete(p, q, 1i32, YANKONLY as libc::c_int, 0);
              p = begin_line(p);
              q = end_line(q);
              i = count_lines(p, q);
              while i > 0 {
                if c == '<' as i32 {
                  if *p as libc::c_int == '\t' as i32 {
                    text_hole_delete(p, p, 0);
                  } else if *p as libc::c_int == ' ' as i32 {
                    j = 0;
                    while *p as libc::c_int == ' ' as i32 && j < (*ptr_to_globals).tabstop {
                      text_hole_delete(p, p, 0);
                      j += 1
                    }
                  }
                } else if c == '>' as i32 {
                  char_insert(p, '\t' as i32 as libc::c_char, 1i32);
                }
                i -= 1;
                p = next_line(p)
              }
              (*ptr_to_globals).dot = find_line(cnt);
              dot_skip_over_ws();
              end_cmd_q();
              current_block = 15129665204879337069;
            }
            17725350714912028156 => {
              p = get_input_line(b":\x00" as *const u8 as *const libc::c_char);
              colon(p);
              current_block = 15129665204879337069;
            }
            14526470074083880812 => {
              q = char_search(
                (*ptr_to_globals).dot,
                b"\n\n\x00" as *const u8 as *const libc::c_char,
                (FORWARD as libc::c_int) << 1i32 | FULL as libc::c_int,
              );
              if !q.is_null() {
                (*ptr_to_globals).dot = next_line(q)
              }
              current_block = 15129665204879337069;
            }
            8893187391306414141 => {
              q = char_search(
                (*ptr_to_globals).dot,
                b"\n\n\x00" as *const u8 as *const libc::c_char,
                ((BACK as libc::c_int as libc::c_uint) << 1i32
                  | FULL as libc::c_int as libc::c_uint) as libc::c_int,
              );
              if !q.is_null() {
                (*ptr_to_globals).dot = next_line(q)
              }
              current_block = 15129665204879337069;
            }
            7021673758293221412 => {
              dir = BACK as libc::c_int;
              p = (*ptr_to_globals).dot.offset(-1);
              if *(*ptr_to_globals).last_search_pattern.offset(0) as libc::c_int == '?' as i32 {
                dir = FORWARD as libc::c_int;
                p = (*ptr_to_globals).dot.offset(1)
              }
              current_block = 4166979493554389389;
            }
            18374191879090272823 => {
              buf[0] = c as libc::c_char;
              buf[1] = '\u{0}' as i32 as libc::c_char;
              q = get_input_line(buf.as_mut_ptr());
              if *q.offset(0) as libc::c_int != 0 && *q.offset(1) == 0 {
                if *(*ptr_to_globals).last_search_pattern.offset(0) != 0 {
                  *(*ptr_to_globals).last_search_pattern.offset(0) = c as libc::c_char
                }
                current_block = 7392824444931029276;
              } else if *q.offset(0) != 0 {
                free((*ptr_to_globals).last_search_pattern as *mut libc::c_void);
                (*ptr_to_globals).last_search_pattern = crate::libbb::xfuncs_printf::xstrdup(q);
                current_block = 7392824444931029276;
              } else {
                current_block = 15129665204879337069;
              }
            }
            16407828456666301883 => {
              if (*ptr_to_globals).last_forward_char == 0 {
                current_block = 15129665204879337069;
              } else {
                loop {
                  q = (*ptr_to_globals).dot.offset(-1);
                  while q >= (*ptr_to_globals).text
                    && *q as libc::c_int != '\n' as i32
                    && *q as libc::c_int != (*ptr_to_globals).last_forward_char
                  {
                    q = q.offset(-1)
                  }
                  if q >= (*ptr_to_globals).text
                    && *q as libc::c_int == (*ptr_to_globals).last_forward_char
                  {
                    (*ptr_to_globals).dot = q
                  }
                  (*ptr_to_globals).cmdcnt -= 1;
                  if !((*ptr_to_globals).cmdcnt > 0) {
                    break;
                  }
                }
                current_block = 15129665204879337069;
              }
            }
            9018432604062702004 => {
              q = (*ptr_to_globals).dot;
              while q < (*ptr_to_globals).end && *q as libc::c_int != '\n' as i32 {
                if !strchr(
                  b"()[]{}\x00" as *const u8 as *const libc::c_char,
                  *q as libc::c_int,
                )
                .is_null()
                {
                  p = find_pair(q, *q);
                  if p.is_null() {
                    indicate_error();
                  } else {
                    (*ptr_to_globals).dot = p
                  }
                  break;
                } else {
                  q = q.offset(1)
                }
              }
              if *q as libc::c_int == '\n' as i32 {
                indicate_error();
              }
              current_block = 15129665204879337069;
            }
            10247103787464459848 => {
              p = (*ptr_to_globals).reg[(*ptr_to_globals).YDreg as usize];
              if p.is_null() {
                status_line_bold(
                  b"Nothing in register %c\x00" as *const u8 as *const libc::c_char,
                  what_reg() as libc::c_int,
                );
              } else {
                if !strchr(p, '\n' as i32).is_null() {
                  if c == 'P' as i32 {
                    dot_begin();
                  }
                  if c == 'p' as i32 {
                    if end_line((*ptr_to_globals).dot) == (*ptr_to_globals).end.offset(-1) {
                      (*ptr_to_globals).dot = (*ptr_to_globals).end
                    } else {
                      dot_next();
                    }
                  }
                } else if c == 'p' as i32 {
                  dot_right();
                }
                string_insert((*ptr_to_globals).dot, p, 1i32);
                end_cmd_q();
              }
              current_block = 15129665204879337069;
            }
            15260732871948875843 => {
              c1 = (get_one_char() | 0x20i32) - 'a' as i32;
              if c1 as libc::c_uint <= 25i32 as libc::c_uint {
                (*ptr_to_globals).mark[c1 as usize] = (*ptr_to_globals).dot
              } else {
                indicate_error();
              }
              current_block = 15129665204879337069;
            }
            12738322036487086035 => {
              c1 = get_one_char() | 0x20i32;
              if (c1 - 'a' as i32) as libc::c_uint <= 25i32 as libc::c_uint {
                c1 = c1 - 'a' as i32;
                q = (*ptr_to_globals).mark[c1 as usize];
                if (*ptr_to_globals).text <= q && q < (*ptr_to_globals).end {
                  (*ptr_to_globals).dot = q;
                  dot_begin();
                  dot_skip_over_ws();
                }
              } else if c1 == '\'' as i32 {
                (*ptr_to_globals).dot = swap_context((*ptr_to_globals).dot);
                dot_begin();
                dot_skip_over_ws();
              } else {
                indicate_error();
              }
              current_block = 15129665204879337069;
            }
            13255096073384561358 => {
              c1 = (get_one_char() | 0x20i32) - 'a' as i32;
              if c1 as libc::c_uint <= 25i32 as libc::c_uint {
                (*ptr_to_globals).YDreg = c1 as smalluint
              } else {
                indicate_error();
              }
              current_block = 15129665204879337069;
            }
            10258711639984089377 => {
              if (*ptr_to_globals).cmd_mode as libc::c_int == 0 {
                indicate_error();
              }
              (*ptr_to_globals).cmd_mode = 0 as smallint;
              undo_queue_commit();
              end_cmd_q();
              (*ptr_to_globals).last_status_cksum = 0;
              current_block = 15129665204879337069;
            }
            11439127087547047736 => {
              buf[0] = c as libc::c_char;
              buf[1] = '\u{0}' as i32 as libc::c_char;
              not_implemented(buf.as_mut_ptr());
              end_cmd_q();
              current_block = 17440971994642376514;
            }
            7961798899781870241 => {
              dot_scroll(
                (*ptr_to_globals).rows.wrapping_sub(2i32 as libc::c_uint) as libc::c_int,
                -1i32,
              );
              current_block = 15129665204879337069;
            }
            9426343755402444879 => {
              dot_scroll(
                (*ptr_to_globals)
                  .rows
                  .wrapping_sub(2i32 as libc::c_uint)
                  .wrapping_div(2i32 as libc::c_uint) as libc::c_int,
                1i32,
              );
              current_block = 15129665204879337069;
            }
            13352459794680105913 => {
              dot_scroll(1i32, 1i32);
              current_block = 15129665204879337069;
            }
            14142272253464333006 => {
              dot_scroll(
                (*ptr_to_globals).rows.wrapping_sub(2i32 as libc::c_uint) as libc::c_int,
                1i32,
              );
              current_block = 15129665204879337069;
            }
            10758177197742640066 => {
              (*ptr_to_globals).last_status_cksum = 0;
              current_block = 15129665204879337069;
            }
            6152256259730122749 => {
              current_block = 7534742345255184552;
            }
            12883932598258173301 => {
              current_block = 8800996768013373992;
            }
            11242998110520238401 => {
              redraw(1i32);
              current_block = 15129665204879337069;
            }
            13619733043935729992 => {
              loop {
                dot_next();
                dot_skip_over_ws();
                (*ptr_to_globals).cmdcnt -= 1;
                if !((*ptr_to_globals).cmdcnt > 0) {
                  break;
                }
              }
              current_block = 15129665204879337069;
            }
            9339065157412720613 => {
              dot_scroll(
                (*ptr_to_globals)
                  .rows
                  .wrapping_sub(2i32 as libc::c_uint)
                  .wrapping_div(2i32 as libc::c_uint) as libc::c_int,
                -1i32,
              );
              current_block = 15129665204879337069;
            }
            11447082683497798022 => {
              dot_scroll(1i32, -1i32);
              current_block = 15129665204879337069;
            }
            5182000506326660482 => {
              current_block = 13993698454868426881;
            }
            1105010766850597332 => {
              if !(*ptr_to_globals).reg[27].is_null() {
                p = begin_line((*ptr_to_globals).dot);
                q = end_line((*ptr_to_globals).dot);
                p = text_hole_delete(p, q, 1i32);
                p = p.offset(string_insert(p, (*ptr_to_globals).reg[27], 2i32) as isize);
                (*ptr_to_globals).dot = p;
                dot_skip_over_ws();
              }
              current_block = 15129665204879337069;
            }
            8616046655533110204 => {
              undo_pop();
              current_block = 15129665204879337069;
            }
            5127767458142431603 => {
              loop {
                (*ptr_to_globals).dot = end_line((*ptr_to_globals).dot);
                (*ptr_to_globals).cmdcnt -= 1;
                if (*ptr_to_globals).cmdcnt <= 0 {
                  break;
                }
                dot_next();
              }
              current_block = 15129665204879337069;
            }
            222014967776118151 => {
              (*ptr_to_globals).last_forward_char = get_one_char();
              current_block = 7856905509180742666;
            }
            11209792479411604110 => {
              loop {
                dot_prev();
                dot_skip_over_ws();
                (*ptr_to_globals).cmdcnt -= 1;
                if !((*ptr_to_globals).cmdcnt > 0) {
                  break;
                }
              }
              current_block = 15129665204879337069;
            }
            3364823792826654116 => {
              if (*ptr_to_globals).lmc_len != 0 {
                (*ptr_to_globals).ioq_start = crate::libbb::xfuncs_printf::xstrndup(
                  (*ptr_to_globals).last_modifying_cmd.as_mut_ptr(),
                  (*ptr_to_globals).lmc_len,
                );
                (*ptr_to_globals).ioq = (*ptr_to_globals).ioq_start
              }
              current_block = 15129665204879337069;
            }
            18096603330221575131 => {
              current_block = 17498168302144015873;
            }
            16891123271837848903 => {
              dot_end();
              current_block = 1752638907092016026;
            }
            8517235759107662071 => {
              current_block = 5847749760081351726;
            }
            12525254419223051704 => {
              if (*ptr_to_globals).dot < (*ptr_to_globals).end.offset(-1) {
                (*ptr_to_globals).dot = yank_delete(
                  (*ptr_to_globals).dot,
                  (*ptr_to_globals).dot,
                  1i32,
                  YANKDEL as libc::c_int,
                  1i32,
                )
              }
              current_block = 15129665204879337069;
            }
            15232911949322867522 => {
              current_block = 17251831742223396249;
            }
            10863374208794025069 => {
              current_block = 1895262434596074581;
            }
            451126677064669119 => {
              loop {
                dot_prev();
                (*ptr_to_globals).dot = move_to_col(
                  (*ptr_to_globals).dot,
                  (*ptr_to_globals).ccol + (*ptr_to_globals).offset,
                );
                (*ptr_to_globals).cmdcnt -= 1;
                if !((*ptr_to_globals).cmdcnt > 0) {
                  break;
                }
              }
              current_block = 15129665204879337069;
            }
            4611735929166613116 => {
              loop {
                if bb_ascii_isalnum(*(*ptr_to_globals).dot as libc::c_uchar) != 0
                  || *(*ptr_to_globals).dot as libc::c_int == '_' as i32
                {
                  (*ptr_to_globals).dot = skip_thing(
                    (*ptr_to_globals).dot,
                    1i32,
                    FORWARD as libc::c_int,
                    S_END_ALNUM as libc::c_int,
                  )
                } else if *strchrnul(
                  b"!\"#$%&\'()*+,-./:;<=>?@[\\]^_`{|}~\x00" as *const u8 as *const libc::c_char,
                  *(*ptr_to_globals).dot as libc::c_int,
                )
                .offset(0)
                  != 0
                {
                  (*ptr_to_globals).dot = skip_thing(
                    (*ptr_to_globals).dot,
                    1i32,
                    FORWARD as libc::c_int,
                    S_END_PUNCT as libc::c_int,
                  )
                }
                if (*ptr_to_globals).dot < (*ptr_to_globals).end.offset(-1) {
                  (*ptr_to_globals).dot = (*ptr_to_globals).dot.offset(1)
                }
                if ({
                  let mut bb__isspace: libc::c_uchar =
                    (*(*ptr_to_globals).dot as libc::c_int - 9i32) as libc::c_uchar;
                  (bb__isspace as libc::c_int == ' ' as i32 - 9i32
                    || bb__isspace as libc::c_int <= 13i32 - 9i32) as libc::c_int
                }) != 0
                {
                  (*ptr_to_globals).dot = skip_thing(
                    (*ptr_to_globals).dot,
                    2i32,
                    FORWARD as libc::c_int,
                    S_OVER_WS as libc::c_int,
                  )
                }
                (*ptr_to_globals).cmdcnt -= 1;
                if !((*ptr_to_globals).cmdcnt > 0) {
                  break;
                }
              }
              current_block = 15129665204879337069;
            }
            4386451087681909888 => {
              (*ptr_to_globals).dot =
                move_to_col((*ptr_to_globals).dot, (*ptr_to_globals).cmdcnt - 1i32);
              current_block = 15129665204879337069;
            }
            1296397779060594135 => {
              dot_begin();
              current_block = 15129665204879337069;
            }
            _ => {}
          }
          match current_block {
            15129665204879337069 => {}
            8629930936610358348 => {}
            _ => {
              match current_block {
                17251831742223396249 => {
                  dir = 0;
                  if c == 'X' as i32 {
                    dir = -1i32
                  }
                  loop {
                    if *(*ptr_to_globals).dot.offset(dir as isize) as libc::c_int != '\n' as i32 {
                      if c == 'X' as i32 {
                        (*ptr_to_globals).dot = (*ptr_to_globals).dot.offset(-1)
                      }
                      (*ptr_to_globals).dot = yank_delete(
                        (*ptr_to_globals).dot,
                        (*ptr_to_globals).dot,
                        0,
                        YANKDEL as libc::c_int,
                        1i32,
                      )
                    }
                    (*ptr_to_globals).cmdcnt -= 1;
                    if !((*ptr_to_globals).cmdcnt > 0) {
                      break;
                    }
                  }
                  end_cmd_q();
                  if c == 's' as i32 {
                    current_block = 8629930936610358348;
                  } else {
                    current_block = 15129665204879337069;
                  }
                }
                2087484904894455135 => {
                  dot_end();
                  (*ptr_to_globals).dot =
                    char_insert((*ptr_to_globals).dot, '\n' as i32 as libc::c_char, 1i32);
                  current_block = 8629930936610358348;
                }
                11945623545738147997 => {
                  (*ptr_to_globals).dot = (*ptr_to_globals).end.offset(-1);
                  if (*ptr_to_globals).cmdcnt > 0 {
                    (*ptr_to_globals).dot = find_line((*ptr_to_globals).cmdcnt)
                  }
                  dot_skip_over_ws();
                  current_block = 15129665204879337069;
                }
                5847749760081351726 => {
                  dir = FORWARD as libc::c_int;
                  if c == 'B' as i32 {
                    dir = BACK as libc::c_int
                  }
                  loop {
                    if c == 'W' as i32
                      || ({
                        let mut bb__isspace: libc::c_uchar =
                          (*(*ptr_to_globals).dot.offset(dir as isize) as libc::c_int - 9i32)
                            as libc::c_uchar;
                        (bb__isspace as libc::c_int == ' ' as i32 - 9i32
                          || bb__isspace as libc::c_int <= 13i32 - 9i32)
                          as libc::c_int
                      }) != 0
                    {
                      (*ptr_to_globals).dot =
                        skip_thing((*ptr_to_globals).dot, 1i32, dir, S_TO_WS as libc::c_int);
                      (*ptr_to_globals).dot =
                        skip_thing((*ptr_to_globals).dot, 2i32, dir, S_OVER_WS as libc::c_int)
                    }
                    if c != 'W' as i32 {
                      (*ptr_to_globals).dot =
                        skip_thing((*ptr_to_globals).dot, 1i32, dir, S_BEFORE_WS as libc::c_int)
                    }
                    (*ptr_to_globals).cmdcnt -= 1;
                    if !((*ptr_to_globals).cmdcnt > 0) {
                      break;
                    }
                  }
                  current_block = 15129665204879337069;
                }
                17440971994642376514 => {
                  current_block = 15129665204879337069;
                }
                7534742345255184552 => {
                  current_block = 17247297260531395789;
                }
                8800996768013373992 => {
                  loop {
                    dot_next();
                    (*ptr_to_globals).dot = move_to_col(
                      (*ptr_to_globals).dot,
                      (*ptr_to_globals).ccol + (*ptr_to_globals).offset,
                    );
                    (*ptr_to_globals).cmdcnt -= 1;
                    if !((*ptr_to_globals).cmdcnt > 0) {
                      break;
                    }
                  }
                  current_block = 15129665204879337069;
                }
                13993698454868426881 => {
                  loop {
                    dot_right();
                    (*ptr_to_globals).cmdcnt -= 1;
                    if !((*ptr_to_globals).cmdcnt > 0) {
                      break;
                    }
                  }
                  current_block = 15129665204879337069;
                }
                7856905509180742666 => {
                  while !((*ptr_to_globals).last_forward_char == 0) {
                    q = (*ptr_to_globals).dot.offset(1);
                    while q < (*ptr_to_globals).end.offset(-1)
                      && *q as libc::c_int != '\n' as i32
                      && *q as libc::c_int != (*ptr_to_globals).last_forward_char
                    {
                      q = q.offset(1)
                    }
                    if *q as libc::c_int == (*ptr_to_globals).last_forward_char {
                      (*ptr_to_globals).dot = q
                    }
                    (*ptr_to_globals).cmdcnt -= 1;
                    if !((*ptr_to_globals).cmdcnt > 0) {
                      break;
                    }
                  }
                  current_block = 15129665204879337069;
                }
                17498168302144015873 => {
                  current_block = 8681395796513813967;
                }
                1752638907092016026 => {
                  if *(*ptr_to_globals).dot as libc::c_int != '\n' as i32 {
                    (*ptr_to_globals).dot = (*ptr_to_globals).dot.offset(1)
                  }
                  current_block = 8629930936610358348;
                }
                3268579060917229304 => {
                  current_block = 8629930936610358348;
                }
                1895262434596074581 => {
                  current_block = 8908416993177701018;
                }
                _ => {}
              }
              match current_block {
                8629930936610358348 => {}
                15129665204879337069 => {}
                _ => {
                  match current_block {
                    17247297260531395789 => {
                      loop {
                        dot_left();
                        (*ptr_to_globals).cmdcnt -= 1;
                        if !((*ptr_to_globals).cmdcnt > 0) {
                          break;
                        }
                      }
                      current_block = 15129665204879337069;
                    }
                    8681395796513813967 => {
                      current_block = 5591548203144509315;
                    }
                    8908416993177701018 => {
                      current_block = 16124761010012532485;
                    }
                    _ => {}
                  }
                  match current_block {
                    15129665204879337069 => {}
                    _ => {
                      match current_block {
                        16124761010012532485 => {
                          let mut yf: libc::c_int = 0;
                          let mut ml: libc::c_int = 0;
                          let mut whole: libc::c_int = 0;
                          yf = YANKDEL as libc::c_int;
                          if c == 'y' as i32 || c == 'Y' as i32 {
                            yf = YANKONLY as libc::c_int
                          }
                          c1 = 'y' as i32;
                          if c != 'Y' as i32 {
                            c1 = get_one_char()
                          }
                          ml = find_range(&mut p, &mut q, c1 as libc::c_char);
                          place_cursor(0i32, 0);
                          if c1 == 27i32 {
                            c1 = 27i32;
                            c = c1
                          } else if !strchr(b"wW\x00" as *const u8 as *const libc::c_char, c1)
                            .is_null()
                          {
                            ml = 0;
                            if c == 'c' as i32 {
                              while ({
                                let mut bb__isspace: libc::c_uchar =
                                  (*q as libc::c_int - 9i32) as libc::c_uchar;
                                (bb__isspace as libc::c_int == ' ' as i32 - 9i32
                                  || bb__isspace as libc::c_int <= 13i32 - 9i32)
                                  as libc::c_int
                              }) != 0
                                && q > p
                              {
                                q = q.offset(-1)
                              }
                            }
                            (*ptr_to_globals).dot = yank_delete(p, q, ml, yf, 1i32)
                          } else if !strchr(
                            b"^0bBeEft%$ lh\x08\x7f\x00" as *const u8 as *const libc::c_char,
                            c1,
                          )
                          .is_null()
                          {
                            (*ptr_to_globals).dot = yank_delete(p, q, ml, yf, 1i32)
                          } else if !strchr(
                            b"cdykjGHL+-{}\r\n\x00" as *const u8 as *const libc::c_char,
                            c1,
                          )
                          .is_null()
                          {
                            (*ptr_to_globals).dot = yank_delete(p, q, ml, yf, 1i32);
                            whole = 1i32
                          } else {
                            c1 = 27i32;
                            c = c1;
                            ml = 0;
                            indicate_error();
                          }
                          if ml != 0 && whole != 0 {
                            if c == 'c' as i32 {
                              (*ptr_to_globals).dot = char_insert(
                                (*ptr_to_globals).dot,
                                '\n' as i32 as libc::c_char,
                                2i32,
                              );
                              if whole != 0
                                && (*ptr_to_globals).dot != (*ptr_to_globals).end.offset(-1)
                              {
                                dot_prev();
                              }
                            } else if c == 'd' as i32 {
                              dot_begin();
                              dot_skip_over_ws();
                            }
                          }
                          if c1 != 27i32 {
                            if c == 'c' as i32 {
                              strcpy(
                                buf.as_mut_ptr(),
                                b"Change\x00" as *const u8 as *const libc::c_char,
                              );
                              current_block = 8629930936610358348;
                            } else {
                              if c == 'd' as i32 {
                                strcpy(
                                  buf.as_mut_ptr(),
                                  b"Delete\x00" as *const u8 as *const libc::c_char,
                                );
                              }
                              if c == 'y' as i32 || c == 'Y' as i32 {
                                strcpy(
                                  buf.as_mut_ptr(),
                                  b"Yank\x00" as *const u8 as *const libc::c_char,
                                );
                              }
                              p = (*ptr_to_globals).reg[(*ptr_to_globals).YDreg as usize];
                              q = p.offset(strlen(p) as isize);
                              cnt = 0;
                              while p <= q {
                                if *p as libc::c_int == '\n' as i32 {
                                  cnt += 1
                                }
                                p = p.offset(1)
                              }
                              status_line(
                                b"%s %u lines (%u chars) using [%c]\x00" as *const u8
                                  as *const libc::c_char,
                                buf.as_mut_ptr(),
                                cnt,
                                strlen((*ptr_to_globals).reg[(*ptr_to_globals).YDreg as usize])
                                  as libc::c_uint,
                                what_reg() as libc::c_int,
                              );
                              end_cmd_q();
                              current_block = 15129665204879337069;
                            }
                          } else {
                            current_block = 15129665204879337069;
                          }
                        }
                        5591548203144509315 => {
                          current_block = 2636677179867529885;
                        }
                        _ => {}
                      }
                      match current_block {
                        15129665204879337069 => {}
                        8629930936610358348 => {}
                        _ => {
                          match current_block {
                            2636677179867529885 => {
                              current_block = 12309206730560524281;
                            }
                            _ => {}
                          }
                          match current_block {
                            12309206730560524281 => {
                              current_block = 3325768110057758661;
                            }
                            _ => {}
                          }
                          match current_block {
                            3325768110057758661 => {
                              current_block = 14815832896553429982;
                            }
                            _ => {}
                          }
                          match current_block {
                            14815832896553429982 => {
                              current_block = 10731695520297161438;
                            }
                            _ => {}
                          }
                          match current_block {
                            10731695520297161438 => {
                              if c == '0' as i32 && (*ptr_to_globals).cmdcnt < 1i32 {
                                dot_begin();
                              } else {
                                (*ptr_to_globals).cmdcnt =
                                  (*ptr_to_globals).cmdcnt * 10i32 + (c - '0' as i32)
                              }
                              current_block = 15129665204879337069;
                            }
                            _ => {}
                          }
                          match current_block {
                            15129665204879337069 => {}
                            _ => {
                              loop {
                                match current_block {
                                  16813369756331276724 => {
                                    msg = std::ptr::null();
                                    current_block = 7392824444931029276;
                                  }
                                  7392824444931029276 => {
                                    dir = FORWARD as libc::c_int;
                                    p = (*ptr_to_globals).dot.offset(1);
                                    if *(*ptr_to_globals).last_search_pattern.offset(0)
                                      as libc::c_int
                                      == '?' as i32
                                    {
                                      dir = BACK as libc::c_int;
                                      p = (*ptr_to_globals).dot.offset(-1)
                                    }
                                    current_block = 4166979493554389389;
                                  }
                                  _ => {
                                    q = char_search(
                                      p,
                                      (*ptr_to_globals).last_search_pattern.offset(1),
                                      dir << 1i32 | FULL as libc::c_int,
                                    );
                                    if !q.is_null() {
                                      (*ptr_to_globals).dot = q;
                                      msg = std::ptr::null()
                                    } else {
                                      p = (*ptr_to_globals).text;
                                      if dir == BACK as libc::c_int {
                                        p = (*ptr_to_globals).end.offset(-1)
                                      }
                                      q = char_search(
                                        p,
                                        (*ptr_to_globals).last_search_pattern.offset(1),
                                        dir << 1i32 | FULL as libc::c_int,
                                      );
                                      if !q.is_null() {
                                        (*ptr_to_globals).dot = q;
                                        msg = b"search hit BOTTOM, continuing at TOP\x00"
                                          as *const u8
                                          as *const libc::c_char;
                                        if dir == BACK as libc::c_int {
                                          msg = b"search hit TOP, continuing at BOTTOM\x00"
                                            as *const u8
                                            as *const libc::c_char
                                        }
                                      } else {
                                        msg = b"Pattern not found\x00" as *const u8
                                          as *const libc::c_char
                                      }
                                    }
                                    if !msg.is_null() {
                                      status_line_bold(
                                        b"%s\x00" as *const u8 as *const libc::c_char,
                                        msg,
                                      );
                                    }
                                    (*ptr_to_globals).cmdcnt -= 1;
                                    if (*ptr_to_globals).cmdcnt > 0 {
                                      current_block = 16813369756331276724;
                                    } else {
                                      break;
                                    }
                                  }
                                }
                              }
                              current_block = 15129665204879337069;
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
        69 | 87 => {
          current_block = 5847749760081351726;
          match current_block {
            16992905640583886232 => {
              loop {
                if (*(*ptr_to_globals).dot as libc::c_int - 'a' as i32) as libc::c_uchar
                  as libc::c_int
                  <= 'z' as i32 - 'a' as i32
                {
                  undo_push(
                    (*ptr_to_globals).dot,
                    1i32 as libc::c_uint,
                    1i32 as libc::c_uchar,
                  );
                  *(*ptr_to_globals).dot =
                    bb_ascii_toupper(*(*ptr_to_globals).dot as libc::c_uchar) as libc::c_char;
                  undo_push(
                    (*ptr_to_globals).dot,
                    1i32 as libc::c_uint,
                    2i32 as libc::c_uchar,
                  );
                } else if (*(*ptr_to_globals).dot as libc::c_int - 'A' as i32) as libc::c_uchar
                  as libc::c_int
                  <= 'Z' as i32 - 'A' as i32
                {
                  undo_push(
                    (*ptr_to_globals).dot,
                    1i32 as libc::c_uint,
                    1i32 as libc::c_uchar,
                  );
                  *(*ptr_to_globals).dot =
                    bb_ascii_tolower(*(*ptr_to_globals).dot as libc::c_uchar) as libc::c_char;
                  undo_push(
                    (*ptr_to_globals).dot,
                    1i32 as libc::c_uint,
                    2i32 as libc::c_uchar,
                  );
                }
                dot_right();
                (*ptr_to_globals).cmdcnt -= 1;
                if !((*ptr_to_globals).cmdcnt > 0) {
                  break;
                }
              }
              end_cmd_q();
              current_block = 15129665204879337069;
            }
            8729655159604064397 => {
              c1 = get_one_char();
              cnt = 0;
              if c1 == '.' as i32 {
                cnt = (*ptr_to_globals)
                  .rows
                  .wrapping_sub(2i32 as libc::c_uint)
                  .wrapping_div(2i32 as libc::c_uint) as libc::c_int
              }
              if c1 == '-' as i32 {
                cnt = (*ptr_to_globals).rows.wrapping_sub(2i32 as libc::c_uint) as libc::c_int
              }
              (*ptr_to_globals).screenbegin = begin_line((*ptr_to_globals).dot);
              dot_scroll(cnt, -1i32);
              current_block = 15129665204879337069;
            }
            15899500648299942075 => {
              (*ptr_to_globals).last_forward_char = get_one_char();
              do_cmd(';' as i32);
              if *(*ptr_to_globals).dot as libc::c_int == (*ptr_to_globals).last_forward_char {
                dot_left();
              }
              (*ptr_to_globals).last_forward_char = 0;
              current_block = 15129665204879337069;
            }
            9051390181078481641 => {
              c1 = get_one_char();
              if *(*ptr_to_globals).dot as libc::c_int != '\n' as i32 {
                (*ptr_to_globals).dot =
                  text_hole_delete((*ptr_to_globals).dot, (*ptr_to_globals).dot, 1i32);
                (*ptr_to_globals).dot =
                  char_insert((*ptr_to_globals).dot, c1 as libc::c_char, 2i32);
                dot_left();
              }
              end_cmd_q();
              current_block = 15129665204879337069;
            }
            877115918601926659 => {
              dir = FORWARD as libc::c_int;
              if c == 'b' as i32 {
                dir = BACK as libc::c_int
              }
              while !((*ptr_to_globals).dot.offset(dir as isize) < (*ptr_to_globals).text
                || (*ptr_to_globals).dot.offset(dir as isize) > (*ptr_to_globals).end.offset(-1))
              {
                (*ptr_to_globals).dot = (*ptr_to_globals).dot.offset(dir as isize);
                if ({
                  let mut bb__isspace: libc::c_uchar =
                    (*(*ptr_to_globals).dot as libc::c_int - 9i32) as libc::c_uchar;
                  (bb__isspace as libc::c_int == ' ' as i32 - 9i32
                    || bb__isspace as libc::c_int <= 13i32 - 9i32) as libc::c_int
                }) != 0
                {
                  (*ptr_to_globals).dot = skip_thing(
                    (*ptr_to_globals).dot,
                    if c == 'e' as i32 { 2i32 } else { 1i32 },
                    dir,
                    S_OVER_WS as libc::c_int,
                  )
                }
                if bb_ascii_isalnum(*(*ptr_to_globals).dot as libc::c_uchar) != 0
                  || *(*ptr_to_globals).dot as libc::c_int == '_' as i32
                {
                  (*ptr_to_globals).dot =
                    skip_thing((*ptr_to_globals).dot, 1i32, dir, S_END_ALNUM as libc::c_int)
                } else if *strchrnul(
                  b"!\"#$%&\'()*+,-./:;<=>?@[\\]^_`{|}~\x00" as *const u8 as *const libc::c_char,
                  *(*ptr_to_globals).dot as libc::c_int,
                )
                .offset(0)
                  != 0
                {
                  (*ptr_to_globals).dot =
                    skip_thing((*ptr_to_globals).dot, 1i32, dir, S_END_PUNCT as libc::c_int)
                }
                (*ptr_to_globals).cmdcnt -= 1;
                if !((*ptr_to_globals).cmdcnt > 0) {
                  break;
                }
              }
              current_block = 15129665204879337069;
            }
            1085022737867179637 => {
              dot_begin();
              dot_skip_over_ws();
              current_block = 15129665204879337069;
            }
            3113147720494587438 => {
              c1 = get_one_char();
              if c1 != 'Z' as i32 {
                indicate_error();
              } else if (*ptr_to_globals).modified_count != 0 {
                if 1i32 != 0 && (*ptr_to_globals).readonly_mode as libc::c_int != 0 {
                  status_line_bold(
                    b"\'%s\' is read only\x00" as *const u8 as *const libc::c_char,
                    (*ptr_to_globals).current_filename,
                  );
                } else {
                  cnt = file_write(
                    (*ptr_to_globals).current_filename,
                    (*ptr_to_globals).text,
                    (*ptr_to_globals).end.offset(-1),
                  );
                  if cnt < 0 {
                    if cnt == -1i32 {
                      status_line_bold(b"Write error: %m\x00" as *const u8 as *const libc::c_char);
                    }
                  } else if cnt as libc::c_long
                    == (*ptr_to_globals)
                      .end
                      .offset(-1)
                      .wrapping_offset_from((*ptr_to_globals).text)
                      as libc::c_long
                      + 1
                  {
                    (*ptr_to_globals).editing = 0 as smallint
                  }
                }
              } else {
                (*ptr_to_globals).editing = 0 as smallint
              }
              current_block = 15129665204879337069;
            }
            12960118908218882441 => {
              p = begin_line((*ptr_to_globals).dot);
              if *p.offset(-1i32 as isize) as libc::c_int == '\n' as i32 {
                dot_prev();
                current_block = 2087484904894455135;
              } else {
                dot_begin();
                (*ptr_to_globals).dot =
                  char_insert((*ptr_to_globals).dot, '\n' as i32 as libc::c_char, 1i32);
                dot_prev();
                current_block = 8629930936610358348;
              }
            }
            8720450212473544924 => {
              (*ptr_to_globals).dot = (*ptr_to_globals).screenbegin;
              cnt = 0;
              while (cnt as libc::c_uint)
                < (*ptr_to_globals)
                  .rows
                  .wrapping_sub(1i32 as libc::c_uint)
                  .wrapping_div(2i32 as libc::c_uint)
              {
                (*ptr_to_globals).dot = next_line((*ptr_to_globals).dot);
                cnt += 1
              }
              current_block = 15129665204879337069;
            }
            13015277209715431090 => {
              (*ptr_to_globals).dot = end_screen();
              if (*ptr_to_globals).cmdcnt as libc::c_uint
                > (*ptr_to_globals).rows.wrapping_sub(1i32 as libc::c_uint)
              {
                (*ptr_to_globals).cmdcnt =
                  (*ptr_to_globals).rows.wrapping_sub(1i32 as libc::c_uint) as libc::c_int
              }
              (*ptr_to_globals).cmdcnt -= 1;
              if (*ptr_to_globals).cmdcnt > 0 {
                do_cmd('-' as i32);
              }
              dot_begin();
              dot_skip_over_ws();
              current_block = 15129665204879337069;
            }
            9800435767766781385 => {
              loop {
                dot_end();
                if (*ptr_to_globals).dot < (*ptr_to_globals).end.offset(-1) {
                  undo_push(
                    (*ptr_to_globals).dot,
                    1i32 as libc::c_uint,
                    1i32 as libc::c_uchar,
                  );
                  let fresh15 = (*ptr_to_globals).dot;
                  (*ptr_to_globals).dot = (*ptr_to_globals).dot.offset(1);
                  *fresh15 = ' ' as i32 as libc::c_char;
                  undo_push(
                    (*ptr_to_globals).dot.offset(-1),
                    1i32 as libc::c_uint,
                    2i32 as libc::c_uchar,
                  );
                  while ({
                    let mut bb__isblank: libc::c_uchar = *(*ptr_to_globals).dot as libc::c_uchar;
                    (bb__isblank as libc::c_int == ' ' as i32
                      || bb__isblank as libc::c_int == '\t' as i32)
                      as libc::c_int
                  }) != 0
                  {
                    text_hole_delete((*ptr_to_globals).dot, (*ptr_to_globals).dot, 2i32);
                  }
                }
                (*ptr_to_globals).cmdcnt -= 1;
                if !((*ptr_to_globals).cmdcnt > 0) {
                  break;
                }
              }
              end_cmd_q();
              current_block = 15129665204879337069;
            }
            3432363526595694666 => {
              dot_begin();
              dot_skip_over_ws();
              current_block = 3268579060917229304;
            }
            3494829253343353619 => {
              (*ptr_to_globals).dot = (*ptr_to_globals).screenbegin;
              if (*ptr_to_globals).cmdcnt as libc::c_uint
                > (*ptr_to_globals).rows.wrapping_sub(1i32 as libc::c_uint)
              {
                (*ptr_to_globals).cmdcnt =
                  (*ptr_to_globals).rows.wrapping_sub(1i32 as libc::c_uint) as libc::c_int
              }
              (*ptr_to_globals).cmdcnt -= 1;
              if (*ptr_to_globals).cmdcnt > 0 {
                do_cmd('+' as i32);
              }
              dot_skip_over_ws();
              current_block = 15129665204879337069;
            }
            17973101765331640574 => {
              c1 = get_one_char();
              if c1 != 'g' as i32 {
                buf[0] = 'g' as i32 as libc::c_char;
                buf[1] = if c1 >= 0 { c1 } else { '*' as i32 } as libc::c_char;
                buf[2] = '\u{0}' as i32 as libc::c_char;
                not_implemented(buf.as_mut_ptr());
                current_block = 15129665204879337069;
              } else {
                if (*ptr_to_globals).cmdcnt == 0 {
                  (*ptr_to_globals).cmdcnt = 1i32
                }
                current_block = 11945623545738147997;
              }
            }
            16546625800574160972 => {
              save_dot = (*ptr_to_globals).dot;
              (*ptr_to_globals).dot = dollar_line((*ptr_to_globals).dot);
              (*ptr_to_globals).dot = yank_delete(
                save_dot,
                (*ptr_to_globals).dot,
                0,
                YANKDEL as libc::c_int,
                1i32,
              );
              if c == 'C' as i32 {
                current_block = 8629930936610358348;
              } else {
                if c == 'D' as i32 {
                  end_cmd_q();
                }
                current_block = 15129665204879337069;
              }
            }
            11937696639986586685 => {
              cnt = count_lines((*ptr_to_globals).text, (*ptr_to_globals).dot);
              c1 = get_one_char();
              find_range(&mut p, &mut q, c1 as libc::c_char);
              yank_delete(p, q, 1i32, YANKONLY as libc::c_int, 0);
              p = begin_line(p);
              q = end_line(q);
              i = count_lines(p, q);
              while i > 0 {
                if c == '<' as i32 {
                  if *p as libc::c_int == '\t' as i32 {
                    text_hole_delete(p, p, 0);
                  } else if *p as libc::c_int == ' ' as i32 {
                    j = 0;
                    while *p as libc::c_int == ' ' as i32 && j < (*ptr_to_globals).tabstop {
                      text_hole_delete(p, p, 0);
                      j += 1
                    }
                  }
                } else if c == '>' as i32 {
                  char_insert(p, '\t' as i32 as libc::c_char, 1i32);
                }
                i -= 1;
                p = next_line(p)
              }
              (*ptr_to_globals).dot = find_line(cnt);
              dot_skip_over_ws();
              end_cmd_q();
              current_block = 15129665204879337069;
            }
            17725350714912028156 => {
              p = get_input_line(b":\x00" as *const u8 as *const libc::c_char);
              colon(p);
              current_block = 15129665204879337069;
            }
            14526470074083880812 => {
              q = char_search(
                (*ptr_to_globals).dot,
                b"\n\n\x00" as *const u8 as *const libc::c_char,
                (FORWARD as libc::c_int) << 1i32 | FULL as libc::c_int,
              );
              if !q.is_null() {
                (*ptr_to_globals).dot = next_line(q)
              }
              current_block = 15129665204879337069;
            }
            8893187391306414141 => {
              q = char_search(
                (*ptr_to_globals).dot,
                b"\n\n\x00" as *const u8 as *const libc::c_char,
                ((BACK as libc::c_int as libc::c_uint) << 1i32
                  | FULL as libc::c_int as libc::c_uint) as libc::c_int,
              );
              if !q.is_null() {
                (*ptr_to_globals).dot = next_line(q)
              }
              current_block = 15129665204879337069;
            }
            7021673758293221412 => {
              dir = BACK as libc::c_int;
              p = (*ptr_to_globals).dot.offset(-1);
              if *(*ptr_to_globals).last_search_pattern.offset(0) as libc::c_int == '?' as i32 {
                dir = FORWARD as libc::c_int;
                p = (*ptr_to_globals).dot.offset(1)
              }
              current_block = 4166979493554389389;
            }
            18374191879090272823 => {
              buf[0] = c as libc::c_char;
              buf[1] = '\u{0}' as i32 as libc::c_char;
              q = get_input_line(buf.as_mut_ptr());
              if *q.offset(0) as libc::c_int != 0 && *q.offset(1) == 0 {
                if *(*ptr_to_globals).last_search_pattern.offset(0) != 0 {
                  *(*ptr_to_globals).last_search_pattern.offset(0) = c as libc::c_char
                }
                current_block = 7392824444931029276;
              } else if *q.offset(0) != 0 {
                free((*ptr_to_globals).last_search_pattern as *mut libc::c_void);
                (*ptr_to_globals).last_search_pattern = crate::libbb::xfuncs_printf::xstrdup(q);
                current_block = 7392824444931029276;
              } else {
                current_block = 15129665204879337069;
              }
            }
            16407828456666301883 => {
              if (*ptr_to_globals).last_forward_char == 0 {
                current_block = 15129665204879337069;
              } else {
                loop {
                  q = (*ptr_to_globals).dot.offset(-1);
                  while q >= (*ptr_to_globals).text
                    && *q as libc::c_int != '\n' as i32
                    && *q as libc::c_int != (*ptr_to_globals).last_forward_char
                  {
                    q = q.offset(-1)
                  }
                  if q >= (*ptr_to_globals).text
                    && *q as libc::c_int == (*ptr_to_globals).last_forward_char
                  {
                    (*ptr_to_globals).dot = q
                  }
                  (*ptr_to_globals).cmdcnt -= 1;
                  if !((*ptr_to_globals).cmdcnt > 0) {
                    break;
                  }
                }
                current_block = 15129665204879337069;
              }
            }
            9018432604062702004 => {
              q = (*ptr_to_globals).dot;
              while q < (*ptr_to_globals).end && *q as libc::c_int != '\n' as i32 {
                if !strchr(
                  b"()[]{}\x00" as *const u8 as *const libc::c_char,
                  *q as libc::c_int,
                )
                .is_null()
                {
                  p = find_pair(q, *q);
                  if p.is_null() {
                    indicate_error();
                  } else {
                    (*ptr_to_globals).dot = p
                  }
                  break;
                } else {
                  q = q.offset(1)
                }
              }
              if *q as libc::c_int == '\n' as i32 {
                indicate_error();
              }
              current_block = 15129665204879337069;
            }
            10247103787464459848 => {
              p = (*ptr_to_globals).reg[(*ptr_to_globals).YDreg as usize];
              if p.is_null() {
                status_line_bold(
                  b"Nothing in register %c\x00" as *const u8 as *const libc::c_char,
                  what_reg() as libc::c_int,
                );
              } else {
                if !strchr(p, '\n' as i32).is_null() {
                  if c == 'P' as i32 {
                    dot_begin();
                  }
                  if c == 'p' as i32 {
                    if end_line((*ptr_to_globals).dot) == (*ptr_to_globals).end.offset(-1) {
                      (*ptr_to_globals).dot = (*ptr_to_globals).end
                    } else {
                      dot_next();
                    }
                  }
                } else if c == 'p' as i32 {
                  dot_right();
                }
                string_insert((*ptr_to_globals).dot, p, 1i32);
                end_cmd_q();
              }
              current_block = 15129665204879337069;
            }
            15260732871948875843 => {
              c1 = (get_one_char() | 0x20i32) - 'a' as i32;
              if c1 as libc::c_uint <= 25i32 as libc::c_uint {
                (*ptr_to_globals).mark[c1 as usize] = (*ptr_to_globals).dot
              } else {
                indicate_error();
              }
              current_block = 15129665204879337069;
            }
            12738322036487086035 => {
              c1 = get_one_char() | 0x20i32;
              if (c1 - 'a' as i32) as libc::c_uint <= 25i32 as libc::c_uint {
                c1 = c1 - 'a' as i32;
                q = (*ptr_to_globals).mark[c1 as usize];
                if (*ptr_to_globals).text <= q && q < (*ptr_to_globals).end {
                  (*ptr_to_globals).dot = q;
                  dot_begin();
                  dot_skip_over_ws();
                }
              } else if c1 == '\'' as i32 {
                (*ptr_to_globals).dot = swap_context((*ptr_to_globals).dot);
                dot_begin();
                dot_skip_over_ws();
              } else {
                indicate_error();
              }
              current_block = 15129665204879337069;
            }
            13255096073384561358 => {
              c1 = (get_one_char() | 0x20i32) - 'a' as i32;
              if c1 as libc::c_uint <= 25i32 as libc::c_uint {
                (*ptr_to_globals).YDreg = c1 as smalluint
              } else {
                indicate_error();
              }
              current_block = 15129665204879337069;
            }
            10258711639984089377 => {
              if (*ptr_to_globals).cmd_mode as libc::c_int == 0 {
                indicate_error();
              }
              (*ptr_to_globals).cmd_mode = 0 as smallint;
              undo_queue_commit();
              end_cmd_q();
              (*ptr_to_globals).last_status_cksum = 0;
              current_block = 15129665204879337069;
            }
            11439127087547047736 => {
              buf[0] = c as libc::c_char;
              buf[1] = '\u{0}' as i32 as libc::c_char;
              not_implemented(buf.as_mut_ptr());
              end_cmd_q();
              current_block = 17440971994642376514;
            }
            7961798899781870241 => {
              dot_scroll(
                (*ptr_to_globals).rows.wrapping_sub(2i32 as libc::c_uint) as libc::c_int,
                -1i32,
              );
              current_block = 15129665204879337069;
            }
            9426343755402444879 => {
              dot_scroll(
                (*ptr_to_globals)
                  .rows
                  .wrapping_sub(2i32 as libc::c_uint)
                  .wrapping_div(2i32 as libc::c_uint) as libc::c_int,
                1i32,
              );
              current_block = 15129665204879337069;
            }
            13352459794680105913 => {
              dot_scroll(1i32, 1i32);
              current_block = 15129665204879337069;
            }
            14142272253464333006 => {
              dot_scroll(
                (*ptr_to_globals).rows.wrapping_sub(2i32 as libc::c_uint) as libc::c_int,
                1i32,
              );
              current_block = 15129665204879337069;
            }
            10758177197742640066 => {
              (*ptr_to_globals).last_status_cksum = 0;
              current_block = 15129665204879337069;
            }
            6152256259730122749 => {
              current_block = 7534742345255184552;
            }
            12883932598258173301 => {
              current_block = 8800996768013373992;
            }
            11242998110520238401 => {
              redraw(1i32);
              current_block = 15129665204879337069;
            }
            13619733043935729992 => {
              loop {
                dot_next();
                dot_skip_over_ws();
                (*ptr_to_globals).cmdcnt -= 1;
                if !((*ptr_to_globals).cmdcnt > 0) {
                  break;
                }
              }
              current_block = 15129665204879337069;
            }
            9339065157412720613 => {
              dot_scroll(
                (*ptr_to_globals)
                  .rows
                  .wrapping_sub(2i32 as libc::c_uint)
                  .wrapping_div(2i32 as libc::c_uint) as libc::c_int,
                -1i32,
              );
              current_block = 15129665204879337069;
            }
            11447082683497798022 => {
              dot_scroll(1i32, -1i32);
              current_block = 15129665204879337069;
            }
            5182000506326660482 => {
              current_block = 13993698454868426881;
            }
            1105010766850597332 => {
              if !(*ptr_to_globals).reg[27].is_null() {
                p = begin_line((*ptr_to_globals).dot);
                q = end_line((*ptr_to_globals).dot);
                p = text_hole_delete(p, q, 1i32);
                p = p.offset(string_insert(p, (*ptr_to_globals).reg[27], 2i32) as isize);
                (*ptr_to_globals).dot = p;
                dot_skip_over_ws();
              }
              current_block = 15129665204879337069;
            }
            8616046655533110204 => {
              undo_pop();
              current_block = 15129665204879337069;
            }
            5127767458142431603 => {
              loop {
                (*ptr_to_globals).dot = end_line((*ptr_to_globals).dot);
                (*ptr_to_globals).cmdcnt -= 1;
                if (*ptr_to_globals).cmdcnt <= 0 {
                  break;
                }
                dot_next();
              }
              current_block = 15129665204879337069;
            }
            222014967776118151 => {
              (*ptr_to_globals).last_forward_char = get_one_char();
              current_block = 7856905509180742666;
            }
            11209792479411604110 => {
              loop {
                dot_prev();
                dot_skip_over_ws();
                (*ptr_to_globals).cmdcnt -= 1;
                if !((*ptr_to_globals).cmdcnt > 0) {
                  break;
                }
              }
              current_block = 15129665204879337069;
            }
            3364823792826654116 => {
              if (*ptr_to_globals).lmc_len != 0 {
                (*ptr_to_globals).ioq_start = crate::libbb::xfuncs_printf::xstrndup(
                  (*ptr_to_globals).last_modifying_cmd.as_mut_ptr(),
                  (*ptr_to_globals).lmc_len,
                );
                (*ptr_to_globals).ioq = (*ptr_to_globals).ioq_start
              }
              current_block = 15129665204879337069;
            }
            18096603330221575131 => {
              current_block = 17498168302144015873;
            }
            16891123271837848903 => {
              dot_end();
              current_block = 1752638907092016026;
            }
            8517235759107662071 => {
              current_block = 5847749760081351726;
            }
            12525254419223051704 => {
              if (*ptr_to_globals).dot < (*ptr_to_globals).end.offset(-1) {
                (*ptr_to_globals).dot = yank_delete(
                  (*ptr_to_globals).dot,
                  (*ptr_to_globals).dot,
                  1i32,
                  YANKDEL as libc::c_int,
                  1i32,
                )
              }
              current_block = 15129665204879337069;
            }
            15232911949322867522 => {
              current_block = 17251831742223396249;
            }
            10863374208794025069 => {
              current_block = 1895262434596074581;
            }
            451126677064669119 => {
              loop {
                dot_prev();
                (*ptr_to_globals).dot = move_to_col(
                  (*ptr_to_globals).dot,
                  (*ptr_to_globals).ccol + (*ptr_to_globals).offset,
                );
                (*ptr_to_globals).cmdcnt -= 1;
                if !((*ptr_to_globals).cmdcnt > 0) {
                  break;
                }
              }
              current_block = 15129665204879337069;
            }
            4611735929166613116 => {
              loop {
                if bb_ascii_isalnum(*(*ptr_to_globals).dot as libc::c_uchar) != 0
                  || *(*ptr_to_globals).dot as libc::c_int == '_' as i32
                {
                  (*ptr_to_globals).dot = skip_thing(
                    (*ptr_to_globals).dot,
                    1i32,
                    FORWARD as libc::c_int,
                    S_END_ALNUM as libc::c_int,
                  )
                } else if *strchrnul(
                  b"!\"#$%&\'()*+,-./:;<=>?@[\\]^_`{|}~\x00" as *const u8 as *const libc::c_char,
                  *(*ptr_to_globals).dot as libc::c_int,
                )
                .offset(0)
                  != 0
                {
                  (*ptr_to_globals).dot = skip_thing(
                    (*ptr_to_globals).dot,
                    1i32,
                    FORWARD as libc::c_int,
                    S_END_PUNCT as libc::c_int,
                  )
                }
                if (*ptr_to_globals).dot < (*ptr_to_globals).end.offset(-1) {
                  (*ptr_to_globals).dot = (*ptr_to_globals).dot.offset(1)
                }
                if ({
                  let mut bb__isspace: libc::c_uchar =
                    (*(*ptr_to_globals).dot as libc::c_int - 9i32) as libc::c_uchar;
                  (bb__isspace as libc::c_int == ' ' as i32 - 9i32
                    || bb__isspace as libc::c_int <= 13i32 - 9i32) as libc::c_int
                }) != 0
                {
                  (*ptr_to_globals).dot = skip_thing(
                    (*ptr_to_globals).dot,
                    2i32,
                    FORWARD as libc::c_int,
                    S_OVER_WS as libc::c_int,
                  )
                }
                (*ptr_to_globals).cmdcnt -= 1;
                if !((*ptr_to_globals).cmdcnt > 0) {
                  break;
                }
              }
              current_block = 15129665204879337069;
            }
            4386451087681909888 => {
              (*ptr_to_globals).dot =
                move_to_col((*ptr_to_globals).dot, (*ptr_to_globals).cmdcnt - 1i32);
              current_block = 15129665204879337069;
            }
            1296397779060594135 => {
              dot_begin();
              current_block = 15129665204879337069;
            }
            _ => {}
          }
          match current_block {
            15129665204879337069 => {}
            8629930936610358348 => {}
            _ => {
              match current_block {
                17251831742223396249 => {
                  dir = 0;
                  if c == 'X' as i32 {
                    dir = -1i32
                  }
                  loop {
                    if *(*ptr_to_globals).dot.offset(dir as isize) as libc::c_int != '\n' as i32 {
                      if c == 'X' as i32 {
                        (*ptr_to_globals).dot = (*ptr_to_globals).dot.offset(-1)
                      }
                      (*ptr_to_globals).dot = yank_delete(
                        (*ptr_to_globals).dot,
                        (*ptr_to_globals).dot,
                        0,
                        YANKDEL as libc::c_int,
                        1i32,
                      )
                    }
                    (*ptr_to_globals).cmdcnt -= 1;
                    if !((*ptr_to_globals).cmdcnt > 0) {
                      break;
                    }
                  }
                  end_cmd_q();
                  if c == 's' as i32 {
                    current_block = 8629930936610358348;
                  } else {
                    current_block = 15129665204879337069;
                  }
                }
                2087484904894455135 => {
                  dot_end();
                  (*ptr_to_globals).dot =
                    char_insert((*ptr_to_globals).dot, '\n' as i32 as libc::c_char, 1i32);
                  current_block = 8629930936610358348;
                }
                11945623545738147997 => {
                  (*ptr_to_globals).dot = (*ptr_to_globals).end.offset(-1);
                  if (*ptr_to_globals).cmdcnt > 0 {
                    (*ptr_to_globals).dot = find_line((*ptr_to_globals).cmdcnt)
                  }
                  dot_skip_over_ws();
                  current_block = 15129665204879337069;
                }
                5847749760081351726 => {
                  dir = FORWARD as libc::c_int;
                  if c == 'B' as i32 {
                    dir = BACK as libc::c_int
                  }
                  loop {
                    if c == 'W' as i32
                      || ({
                        let mut bb__isspace: libc::c_uchar =
                          (*(*ptr_to_globals).dot.offset(dir as isize) as libc::c_int - 9i32)
                            as libc::c_uchar;
                        (bb__isspace as libc::c_int == ' ' as i32 - 9i32
                          || bb__isspace as libc::c_int <= 13i32 - 9i32)
                          as libc::c_int
                      }) != 0
                    {
                      (*ptr_to_globals).dot =
                        skip_thing((*ptr_to_globals).dot, 1i32, dir, S_TO_WS as libc::c_int);
                      (*ptr_to_globals).dot =
                        skip_thing((*ptr_to_globals).dot, 2i32, dir, S_OVER_WS as libc::c_int)
                    }
                    if c != 'W' as i32 {
                      (*ptr_to_globals).dot =
                        skip_thing((*ptr_to_globals).dot, 1i32, dir, S_BEFORE_WS as libc::c_int)
                    }
                    (*ptr_to_globals).cmdcnt -= 1;
                    if !((*ptr_to_globals).cmdcnt > 0) {
                      break;
                    }
                  }
                  current_block = 15129665204879337069;
                }
                17440971994642376514 => {
                  current_block = 15129665204879337069;
                }
                7534742345255184552 => {
                  current_block = 17247297260531395789;
                }
                8800996768013373992 => {
                  loop {
                    dot_next();
                    (*ptr_to_globals).dot = move_to_col(
                      (*ptr_to_globals).dot,
                      (*ptr_to_globals).ccol + (*ptr_to_globals).offset,
                    );
                    (*ptr_to_globals).cmdcnt -= 1;
                    if !((*ptr_to_globals).cmdcnt > 0) {
                      break;
                    }
                  }
                  current_block = 15129665204879337069;
                }
                13993698454868426881 => {
                  loop {
                    dot_right();
                    (*ptr_to_globals).cmdcnt -= 1;
                    if !((*ptr_to_globals).cmdcnt > 0) {
                      break;
                    }
                  }
                  current_block = 15129665204879337069;
                }
                7856905509180742666 => {
                  while !((*ptr_to_globals).last_forward_char == 0) {
                    q = (*ptr_to_globals).dot.offset(1);
                    while q < (*ptr_to_globals).end.offset(-1)
                      && *q as libc::c_int != '\n' as i32
                      && *q as libc::c_int != (*ptr_to_globals).last_forward_char
                    {
                      q = q.offset(1)
                    }
                    if *q as libc::c_int == (*ptr_to_globals).last_forward_char {
                      (*ptr_to_globals).dot = q
                    }
                    (*ptr_to_globals).cmdcnt -= 1;
                    if !((*ptr_to_globals).cmdcnt > 0) {
                      break;
                    }
                  }
                  current_block = 15129665204879337069;
                }
                17498168302144015873 => {
                  current_block = 8681395796513813967;
                }
                1752638907092016026 => {
                  if *(*ptr_to_globals).dot as libc::c_int != '\n' as i32 {
                    (*ptr_to_globals).dot = (*ptr_to_globals).dot.offset(1)
                  }
                  current_block = 8629930936610358348;
                }
                3268579060917229304 => {
                  current_block = 8629930936610358348;
                }
                1895262434596074581 => {
                  current_block = 8908416993177701018;
                }
                _ => {}
              }
              match current_block {
                8629930936610358348 => {}
                15129665204879337069 => {}
                _ => {
                  match current_block {
                    17247297260531395789 => {
                      loop {
                        dot_left();
                        (*ptr_to_globals).cmdcnt -= 1;
                        if !((*ptr_to_globals).cmdcnt > 0) {
                          break;
                        }
                      }
                      current_block = 15129665204879337069;
                    }
                    8681395796513813967 => {
                      current_block = 5591548203144509315;
                    }
                    8908416993177701018 => {
                      current_block = 16124761010012532485;
                    }
                    _ => {}
                  }
                  match current_block {
                    15129665204879337069 => {}
                    _ => {
                      match current_block {
                        16124761010012532485 => {
                          let mut yf: libc::c_int = 0;
                          let mut ml: libc::c_int = 0;
                          let mut whole: libc::c_int = 0;
                          yf = YANKDEL as libc::c_int;
                          if c == 'y' as i32 || c == 'Y' as i32 {
                            yf = YANKONLY as libc::c_int
                          }
                          c1 = 'y' as i32;
                          if c != 'Y' as i32 {
                            c1 = get_one_char()
                          }
                          ml = find_range(&mut p, &mut q, c1 as libc::c_char);
                          place_cursor(0i32, 0);
                          if c1 == 27i32 {
                            c1 = 27i32;
                            c = c1
                          } else if !strchr(b"wW\x00" as *const u8 as *const libc::c_char, c1)
                            .is_null()
                          {
                            ml = 0;
                            if c == 'c' as i32 {
                              while ({
                                let mut bb__isspace: libc::c_uchar =
                                  (*q as libc::c_int - 9i32) as libc::c_uchar;
                                (bb__isspace as libc::c_int == ' ' as i32 - 9i32
                                  || bb__isspace as libc::c_int <= 13i32 - 9i32)
                                  as libc::c_int
                              }) != 0
                                && q > p
                              {
                                q = q.offset(-1)
                              }
                            }
                            (*ptr_to_globals).dot = yank_delete(p, q, ml, yf, 1i32)
                          } else if !strchr(
                            b"^0bBeEft%$ lh\x08\x7f\x00" as *const u8 as *const libc::c_char,
                            c1,
                          )
                          .is_null()
                          {
                            (*ptr_to_globals).dot = yank_delete(p, q, ml, yf, 1i32)
                          } else if !strchr(
                            b"cdykjGHL+-{}\r\n\x00" as *const u8 as *const libc::c_char,
                            c1,
                          )
                          .is_null()
                          {
                            (*ptr_to_globals).dot = yank_delete(p, q, ml, yf, 1i32);
                            whole = 1i32
                          } else {
                            c1 = 27i32;
                            c = c1;
                            ml = 0;
                            indicate_error();
                          }
                          if ml != 0 && whole != 0 {
                            if c == 'c' as i32 {
                              (*ptr_to_globals).dot = char_insert(
                                (*ptr_to_globals).dot,
                                '\n' as i32 as libc::c_char,
                                2i32,
                              );
                              if whole != 0
                                && (*ptr_to_globals).dot != (*ptr_to_globals).end.offset(-1)
                              {
                                dot_prev();
                              }
                            } else if c == 'd' as i32 {
                              dot_begin();
                              dot_skip_over_ws();
                            }
                          }
                          if c1 != 27i32 {
                            if c == 'c' as i32 {
                              strcpy(
                                buf.as_mut_ptr(),
                                b"Change\x00" as *const u8 as *const libc::c_char,
                              );
                              current_block = 8629930936610358348;
                            } else {
                              if c == 'd' as i32 {
                                strcpy(
                                  buf.as_mut_ptr(),
                                  b"Delete\x00" as *const u8 as *const libc::c_char,
                                );
                              }
                              if c == 'y' as i32 || c == 'Y' as i32 {
                                strcpy(
                                  buf.as_mut_ptr(),
                                  b"Yank\x00" as *const u8 as *const libc::c_char,
                                );
                              }
                              p = (*ptr_to_globals).reg[(*ptr_to_globals).YDreg as usize];
                              q = p.offset(strlen(p) as isize);
                              cnt = 0;
                              while p <= q {
                                if *p as libc::c_int == '\n' as i32 {
                                  cnt += 1
                                }
                                p = p.offset(1)
                              }
                              status_line(
                                b"%s %u lines (%u chars) using [%c]\x00" as *const u8
                                  as *const libc::c_char,
                                buf.as_mut_ptr(),
                                cnt,
                                strlen((*ptr_to_globals).reg[(*ptr_to_globals).YDreg as usize])
                                  as libc::c_uint,
                                what_reg() as libc::c_int,
                              );
                              end_cmd_q();
                              current_block = 15129665204879337069;
                            }
                          } else {
                            current_block = 15129665204879337069;
                          }
                        }
                        5591548203144509315 => {
                          current_block = 2636677179867529885;
                        }
                        _ => {}
                      }
                      match current_block {
                        15129665204879337069 => {}
                        8629930936610358348 => {}
                        _ => {
                          match current_block {
                            2636677179867529885 => {
                              current_block = 12309206730560524281;
                            }
                            _ => {}
                          }
                          match current_block {
                            12309206730560524281 => {
                              current_block = 3325768110057758661;
                            }
                            _ => {}
                          }
                          match current_block {
                            3325768110057758661 => {
                              current_block = 14815832896553429982;
                            }
                            _ => {}
                          }
                          match current_block {
                            14815832896553429982 => {
                              current_block = 10731695520297161438;
                            }
                            _ => {}
                          }
                          match current_block {
                            10731695520297161438 => {
                              if c == '0' as i32 && (*ptr_to_globals).cmdcnt < 1i32 {
                                dot_begin();
                              } else {
                                (*ptr_to_globals).cmdcnt =
                                  (*ptr_to_globals).cmdcnt * 10i32 + (c - '0' as i32)
                              }
                              current_block = 15129665204879337069;
                            }
                            _ => {}
                          }
                          match current_block {
                            15129665204879337069 => {}
                            _ => {
                              loop {
                                match current_block {
                                  16813369756331276724 => {
                                    msg = std::ptr::null();
                                    current_block = 7392824444931029276;
                                  }
                                  7392824444931029276 => {
                                    dir = FORWARD as libc::c_int;
                                    p = (*ptr_to_globals).dot.offset(1);
                                    if *(*ptr_to_globals).last_search_pattern.offset(0)
                                      as libc::c_int
                                      == '?' as i32
                                    {
                                      dir = BACK as libc::c_int;
                                      p = (*ptr_to_globals).dot.offset(-1)
                                    }
                                    current_block = 4166979493554389389;
                                  }
                                  _ => {
                                    q = char_search(
                                      p,
                                      (*ptr_to_globals).last_search_pattern.offset(1),
                                      dir << 1i32 | FULL as libc::c_int,
                                    );
                                    if !q.is_null() {
                                      (*ptr_to_globals).dot = q;
                                      msg = std::ptr::null()
                                    } else {
                                      p = (*ptr_to_globals).text;
                                      if dir == BACK as libc::c_int {
                                        p = (*ptr_to_globals).end.offset(-1)
                                      }
                                      q = char_search(
                                        p,
                                        (*ptr_to_globals).last_search_pattern.offset(1),
                                        dir << 1i32 | FULL as libc::c_int,
                                      );
                                      if !q.is_null() {
                                        (*ptr_to_globals).dot = q;
                                        msg = b"search hit BOTTOM, continuing at TOP\x00"
                                          as *const u8
                                          as *const libc::c_char;
                                        if dir == BACK as libc::c_int {
                                          msg = b"search hit TOP, continuing at BOTTOM\x00"
                                            as *const u8
                                            as *const libc::c_char
                                        }
                                      } else {
                                        msg = b"Pattern not found\x00" as *const u8
                                          as *const libc::c_char
                                      }
                                    }
                                    if !msg.is_null() {
                                      status_line_bold(
                                        b"%s\x00" as *const u8 as *const libc::c_char,
                                        msg,
                                      );
                                    }
                                    (*ptr_to_globals).cmdcnt -= 1;
                                    if (*ptr_to_globals).cmdcnt > 0 {
                                      current_block = 16813369756331276724;
                                    } else {
                                      break;
                                    }
                                  }
                                }
                              }
                              current_block = 15129665204879337069;
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
        67 | 68 => {
          current_block = 16546625800574160972;
          match current_block {
            16992905640583886232 => {
              loop {
                if (*(*ptr_to_globals).dot as libc::c_int - 'a' as i32) as libc::c_uchar
                  as libc::c_int
                  <= 'z' as i32 - 'a' as i32
                {
                  undo_push(
                    (*ptr_to_globals).dot,
                    1i32 as libc::c_uint,
                    1i32 as libc::c_uchar,
                  );
                  *(*ptr_to_globals).dot =
                    bb_ascii_toupper(*(*ptr_to_globals).dot as libc::c_uchar) as libc::c_char;
                  undo_push(
                    (*ptr_to_globals).dot,
                    1i32 as libc::c_uint,
                    2i32 as libc::c_uchar,
                  );
                } else if (*(*ptr_to_globals).dot as libc::c_int - 'A' as i32) as libc::c_uchar
                  as libc::c_int
                  <= 'Z' as i32 - 'A' as i32
                {
                  undo_push(
                    (*ptr_to_globals).dot,
                    1i32 as libc::c_uint,
                    1i32 as libc::c_uchar,
                  );
                  *(*ptr_to_globals).dot =
                    bb_ascii_tolower(*(*ptr_to_globals).dot as libc::c_uchar) as libc::c_char;
                  undo_push(
                    (*ptr_to_globals).dot,
                    1i32 as libc::c_uint,
                    2i32 as libc::c_uchar,
                  );
                }
                dot_right();
                (*ptr_to_globals).cmdcnt -= 1;
                if !((*ptr_to_globals).cmdcnt > 0) {
                  break;
                }
              }
              end_cmd_q();
              current_block = 15129665204879337069;
            }
            8729655159604064397 => {
              c1 = get_one_char();
              cnt = 0;
              if c1 == '.' as i32 {
                cnt = (*ptr_to_globals)
                  .rows
                  .wrapping_sub(2i32 as libc::c_uint)
                  .wrapping_div(2i32 as libc::c_uint) as libc::c_int
              }
              if c1 == '-' as i32 {
                cnt = (*ptr_to_globals).rows.wrapping_sub(2i32 as libc::c_uint) as libc::c_int
              }
              (*ptr_to_globals).screenbegin = begin_line((*ptr_to_globals).dot);
              dot_scroll(cnt, -1i32);
              current_block = 15129665204879337069;
            }
            15899500648299942075 => {
              (*ptr_to_globals).last_forward_char = get_one_char();
              do_cmd(';' as i32);
              if *(*ptr_to_globals).dot as libc::c_int == (*ptr_to_globals).last_forward_char {
                dot_left();
              }
              (*ptr_to_globals).last_forward_char = 0;
              current_block = 15129665204879337069;
            }
            9051390181078481641 => {
              c1 = get_one_char();
              if *(*ptr_to_globals).dot as libc::c_int != '\n' as i32 {
                (*ptr_to_globals).dot =
                  text_hole_delete((*ptr_to_globals).dot, (*ptr_to_globals).dot, 1i32);
                (*ptr_to_globals).dot =
                  char_insert((*ptr_to_globals).dot, c1 as libc::c_char, 2i32);
                dot_left();
              }
              end_cmd_q();
              current_block = 15129665204879337069;
            }
            877115918601926659 => {
              dir = FORWARD as libc::c_int;
              if c == 'b' as i32 {
                dir = BACK as libc::c_int
              }
              while !((*ptr_to_globals).dot.offset(dir as isize) < (*ptr_to_globals).text
                || (*ptr_to_globals).dot.offset(dir as isize) > (*ptr_to_globals).end.offset(-1))
              {
                (*ptr_to_globals).dot = (*ptr_to_globals).dot.offset(dir as isize);
                if ({
                  let mut bb__isspace: libc::c_uchar =
                    (*(*ptr_to_globals).dot as libc::c_int - 9i32) as libc::c_uchar;
                  (bb__isspace as libc::c_int == ' ' as i32 - 9i32
                    || bb__isspace as libc::c_int <= 13i32 - 9i32) as libc::c_int
                }) != 0
                {
                  (*ptr_to_globals).dot = skip_thing(
                    (*ptr_to_globals).dot,
                    if c == 'e' as i32 { 2i32 } else { 1i32 },
                    dir,
                    S_OVER_WS as libc::c_int,
                  )
                }
                if bb_ascii_isalnum(*(*ptr_to_globals).dot as libc::c_uchar) != 0
                  || *(*ptr_to_globals).dot as libc::c_int == '_' as i32
                {
                  (*ptr_to_globals).dot =
                    skip_thing((*ptr_to_globals).dot, 1i32, dir, S_END_ALNUM as libc::c_int)
                } else if *strchrnul(
                  b"!\"#$%&\'()*+,-./:;<=>?@[\\]^_`{|}~\x00" as *const u8 as *const libc::c_char,
                  *(*ptr_to_globals).dot as libc::c_int,
                )
                .offset(0)
                  != 0
                {
                  (*ptr_to_globals).dot =
                    skip_thing((*ptr_to_globals).dot, 1i32, dir, S_END_PUNCT as libc::c_int)
                }
                (*ptr_to_globals).cmdcnt -= 1;
                if !((*ptr_to_globals).cmdcnt > 0) {
                  break;
                }
              }
              current_block = 15129665204879337069;
            }
            1085022737867179637 => {
              dot_begin();
              dot_skip_over_ws();
              current_block = 15129665204879337069;
            }
            3113147720494587438 => {
              c1 = get_one_char();
              if c1 != 'Z' as i32 {
                indicate_error();
              } else if (*ptr_to_globals).modified_count != 0 {
                if 1i32 != 0 && (*ptr_to_globals).readonly_mode as libc::c_int != 0 {
                  status_line_bold(
                    b"\'%s\' is read only\x00" as *const u8 as *const libc::c_char,
                    (*ptr_to_globals).current_filename,
                  );
                } else {
                  cnt = file_write(
                    (*ptr_to_globals).current_filename,
                    (*ptr_to_globals).text,
                    (*ptr_to_globals).end.offset(-1),
                  );
                  if cnt < 0 {
                    if cnt == -1i32 {
                      status_line_bold(b"Write error: %m\x00" as *const u8 as *const libc::c_char);
                    }
                  } else if cnt as libc::c_long
                    == (*ptr_to_globals)
                      .end
                      .offset(-1)
                      .wrapping_offset_from((*ptr_to_globals).text)
                      as libc::c_long
                      + 1
                  {
                    (*ptr_to_globals).editing = 0 as smallint
                  }
                }
              } else {
                (*ptr_to_globals).editing = 0 as smallint
              }
              current_block = 15129665204879337069;
            }
            12960118908218882441 => {
              p = begin_line((*ptr_to_globals).dot);
              if *p.offset(-1i32 as isize) as libc::c_int == '\n' as i32 {
                dot_prev();
                current_block = 2087484904894455135;
              } else {
                dot_begin();
                (*ptr_to_globals).dot =
                  char_insert((*ptr_to_globals).dot, '\n' as i32 as libc::c_char, 1i32);
                dot_prev();
                current_block = 8629930936610358348;
              }
            }
            8720450212473544924 => {
              (*ptr_to_globals).dot = (*ptr_to_globals).screenbegin;
              cnt = 0;
              while (cnt as libc::c_uint)
                < (*ptr_to_globals)
                  .rows
                  .wrapping_sub(1i32 as libc::c_uint)
                  .wrapping_div(2i32 as libc::c_uint)
              {
                (*ptr_to_globals).dot = next_line((*ptr_to_globals).dot);
                cnt += 1
              }
              current_block = 15129665204879337069;
            }
            13015277209715431090 => {
              (*ptr_to_globals).dot = end_screen();
              if (*ptr_to_globals).cmdcnt as libc::c_uint
                > (*ptr_to_globals).rows.wrapping_sub(1i32 as libc::c_uint)
              {
                (*ptr_to_globals).cmdcnt =
                  (*ptr_to_globals).rows.wrapping_sub(1i32 as libc::c_uint) as libc::c_int
              }
              (*ptr_to_globals).cmdcnt -= 1;
              if (*ptr_to_globals).cmdcnt > 0 {
                do_cmd('-' as i32);
              }
              dot_begin();
              dot_skip_over_ws();
              current_block = 15129665204879337069;
            }
            9800435767766781385 => {
              loop {
                dot_end();
                if (*ptr_to_globals).dot < (*ptr_to_globals).end.offset(-1) {
                  undo_push(
                    (*ptr_to_globals).dot,
                    1i32 as libc::c_uint,
                    1i32 as libc::c_uchar,
                  );
                  let fresh15 = (*ptr_to_globals).dot;
                  (*ptr_to_globals).dot = (*ptr_to_globals).dot.offset(1);
                  *fresh15 = ' ' as i32 as libc::c_char;
                  undo_push(
                    (*ptr_to_globals).dot.offset(-1),
                    1i32 as libc::c_uint,
                    2i32 as libc::c_uchar,
                  );
                  while ({
                    let mut bb__isblank: libc::c_uchar = *(*ptr_to_globals).dot as libc::c_uchar;
                    (bb__isblank as libc::c_int == ' ' as i32
                      || bb__isblank as libc::c_int == '\t' as i32)
                      as libc::c_int
                  }) != 0
                  {
                    text_hole_delete((*ptr_to_globals).dot, (*ptr_to_globals).dot, 2i32);
                  }
                }
                (*ptr_to_globals).cmdcnt -= 1;
                if !((*ptr_to_globals).cmdcnt > 0) {
                  break;
                }
              }
              end_cmd_q();
              current_block = 15129665204879337069;
            }
            3432363526595694666 => {
              dot_begin();
              dot_skip_over_ws();
              current_block = 3268579060917229304;
            }
            3494829253343353619 => {
              (*ptr_to_globals).dot = (*ptr_to_globals).screenbegin;
              if (*ptr_to_globals).cmdcnt as libc::c_uint
                > (*ptr_to_globals).rows.wrapping_sub(1i32 as libc::c_uint)
              {
                (*ptr_to_globals).cmdcnt =
                  (*ptr_to_globals).rows.wrapping_sub(1i32 as libc::c_uint) as libc::c_int
              }
              (*ptr_to_globals).cmdcnt -= 1;
              if (*ptr_to_globals).cmdcnt > 0 {
                do_cmd('+' as i32);
              }
              dot_skip_over_ws();
              current_block = 15129665204879337069;
            }
            17973101765331640574 => {
              c1 = get_one_char();
              if c1 != 'g' as i32 {
                buf[0] = 'g' as i32 as libc::c_char;
                buf[1] = if c1 >= 0 { c1 } else { '*' as i32 } as libc::c_char;
                buf[2] = '\u{0}' as i32 as libc::c_char;
                not_implemented(buf.as_mut_ptr());
                current_block = 15129665204879337069;
              } else {
                if (*ptr_to_globals).cmdcnt == 0 {
                  (*ptr_to_globals).cmdcnt = 1i32
                }
                current_block = 11945623545738147997;
              }
            }
            16546625800574160972 => {
              save_dot = (*ptr_to_globals).dot;
              (*ptr_to_globals).dot = dollar_line((*ptr_to_globals).dot);
              (*ptr_to_globals).dot = yank_delete(
                save_dot,
                (*ptr_to_globals).dot,
                0,
                YANKDEL as libc::c_int,
                1i32,
              );
              if c == 'C' as i32 {
                current_block = 8629930936610358348;
              } else {
                if c == 'D' as i32 {
                  end_cmd_q();
                }
                current_block = 15129665204879337069;
              }
            }
            11937696639986586685 => {
              cnt = count_lines((*ptr_to_globals).text, (*ptr_to_globals).dot);
              c1 = get_one_char();
              find_range(&mut p, &mut q, c1 as libc::c_char);
              yank_delete(p, q, 1i32, YANKONLY as libc::c_int, 0);
              p = begin_line(p);
              q = end_line(q);
              i = count_lines(p, q);
              while i > 0 {
                if c == '<' as i32 {
                  if *p as libc::c_int == '\t' as i32 {
                    text_hole_delete(p, p, 0);
                  } else if *p as libc::c_int == ' ' as i32 {
                    j = 0;
                    while *p as libc::c_int == ' ' as i32 && j < (*ptr_to_globals).tabstop {
                      text_hole_delete(p, p, 0);
                      j += 1
                    }
                  }
                } else if c == '>' as i32 {
                  char_insert(p, '\t' as i32 as libc::c_char, 1i32);
                }
                i -= 1;
                p = next_line(p)
              }
              (*ptr_to_globals).dot = find_line(cnt);
              dot_skip_over_ws();
              end_cmd_q();
              current_block = 15129665204879337069;
            }
            17725350714912028156 => {
              p = get_input_line(b":\x00" as *const u8 as *const libc::c_char);
              colon(p);
              current_block = 15129665204879337069;
            }
            14526470074083880812 => {
              q = char_search(
                (*ptr_to_globals).dot,
                b"\n\n\x00" as *const u8 as *const libc::c_char,
                (FORWARD as libc::c_int) << 1i32 | FULL as libc::c_int,
              );
              if !q.is_null() {
                (*ptr_to_globals).dot = next_line(q)
              }
              current_block = 15129665204879337069;
            }
            8893187391306414141 => {
              q = char_search(
                (*ptr_to_globals).dot,
                b"\n\n\x00" as *const u8 as *const libc::c_char,
                ((BACK as libc::c_int as libc::c_uint) << 1i32
                  | FULL as libc::c_int as libc::c_uint) as libc::c_int,
              );
              if !q.is_null() {
                (*ptr_to_globals).dot = next_line(q)
              }
              current_block = 15129665204879337069;
            }
            7021673758293221412 => {
              dir = BACK as libc::c_int;
              p = (*ptr_to_globals).dot.offset(-1);
              if *(*ptr_to_globals).last_search_pattern.offset(0) as libc::c_int == '?' as i32 {
                dir = FORWARD as libc::c_int;
                p = (*ptr_to_globals).dot.offset(1)
              }
              current_block = 4166979493554389389;
            }
            18374191879090272823 => {
              buf[0] = c as libc::c_char;
              buf[1] = '\u{0}' as i32 as libc::c_char;
              q = get_input_line(buf.as_mut_ptr());
              if *q.offset(0) as libc::c_int != 0 && *q.offset(1) == 0 {
                if *(*ptr_to_globals).last_search_pattern.offset(0) != 0 {
                  *(*ptr_to_globals).last_search_pattern.offset(0) = c as libc::c_char
                }
                current_block = 7392824444931029276;
              } else if *q.offset(0) != 0 {
                free((*ptr_to_globals).last_search_pattern as *mut libc::c_void);
                (*ptr_to_globals).last_search_pattern = crate::libbb::xfuncs_printf::xstrdup(q);
                current_block = 7392824444931029276;
              } else {
                current_block = 15129665204879337069;
              }
            }
            16407828456666301883 => {
              if (*ptr_to_globals).last_forward_char == 0 {
                current_block = 15129665204879337069;
              } else {
                loop {
                  q = (*ptr_to_globals).dot.offset(-1);
                  while q >= (*ptr_to_globals).text
                    && *q as libc::c_int != '\n' as i32
                    && *q as libc::c_int != (*ptr_to_globals).last_forward_char
                  {
                    q = q.offset(-1)
                  }
                  if q >= (*ptr_to_globals).text
                    && *q as libc::c_int == (*ptr_to_globals).last_forward_char
                  {
                    (*ptr_to_globals).dot = q
                  }
                  (*ptr_to_globals).cmdcnt -= 1;
                  if !((*ptr_to_globals).cmdcnt > 0) {
                    break;
                  }
                }
                current_block = 15129665204879337069;
              }
            }
            9018432604062702004 => {
              q = (*ptr_to_globals).dot;
              while q < (*ptr_to_globals).end && *q as libc::c_int != '\n' as i32 {
                if !strchr(
                  b"()[]{}\x00" as *const u8 as *const libc::c_char,
                  *q as libc::c_int,
                )
                .is_null()
                {
                  p = find_pair(q, *q);
                  if p.is_null() {
                    indicate_error();
                  } else {
                    (*ptr_to_globals).dot = p
                  }
                  break;
                } else {
                  q = q.offset(1)
                }
              }
              if *q as libc::c_int == '\n' as i32 {
                indicate_error();
              }
              current_block = 15129665204879337069;
            }
            10247103787464459848 => {
              p = (*ptr_to_globals).reg[(*ptr_to_globals).YDreg as usize];
              if p.is_null() {
                status_line_bold(
                  b"Nothing in register %c\x00" as *const u8 as *const libc::c_char,
                  what_reg() as libc::c_int,
                );
              } else {
                if !strchr(p, '\n' as i32).is_null() {
                  if c == 'P' as i32 {
                    dot_begin();
                  }
                  if c == 'p' as i32 {
                    if end_line((*ptr_to_globals).dot) == (*ptr_to_globals).end.offset(-1) {
                      (*ptr_to_globals).dot = (*ptr_to_globals).end
                    } else {
                      dot_next();
                    }
                  }
                } else if c == 'p' as i32 {
                  dot_right();
                }
                string_insert((*ptr_to_globals).dot, p, 1i32);
                end_cmd_q();
              }
              current_block = 15129665204879337069;
            }
            15260732871948875843 => {
              c1 = (get_one_char() | 0x20i32) - 'a' as i32;
              if c1 as libc::c_uint <= 25i32 as libc::c_uint {
                (*ptr_to_globals).mark[c1 as usize] = (*ptr_to_globals).dot
              } else {
                indicate_error();
              }
              current_block = 15129665204879337069;
            }
            12738322036487086035 => {
              c1 = get_one_char() | 0x20i32;
              if (c1 - 'a' as i32) as libc::c_uint <= 25i32 as libc::c_uint {
                c1 = c1 - 'a' as i32;
                q = (*ptr_to_globals).mark[c1 as usize];
                if (*ptr_to_globals).text <= q && q < (*ptr_to_globals).end {
                  (*ptr_to_globals).dot = q;
                  dot_begin();
                  dot_skip_over_ws();
                }
              } else if c1 == '\'' as i32 {
                (*ptr_to_globals).dot = swap_context((*ptr_to_globals).dot);
                dot_begin();
                dot_skip_over_ws();
              } else {
                indicate_error();
              }
              current_block = 15129665204879337069;
            }
            13255096073384561358 => {
              c1 = (get_one_char() | 0x20i32) - 'a' as i32;
              if c1 as libc::c_uint <= 25i32 as libc::c_uint {
                (*ptr_to_globals).YDreg = c1 as smalluint
              } else {
                indicate_error();
              }
              current_block = 15129665204879337069;
            }
            10258711639984089377 => {
              if (*ptr_to_globals).cmd_mode as libc::c_int == 0 {
                indicate_error();
              }
              (*ptr_to_globals).cmd_mode = 0 as smallint;
              undo_queue_commit();
              end_cmd_q();
              (*ptr_to_globals).last_status_cksum = 0;
              current_block = 15129665204879337069;
            }
            11439127087547047736 => {
              buf[0] = c as libc::c_char;
              buf[1] = '\u{0}' as i32 as libc::c_char;
              not_implemented(buf.as_mut_ptr());
              end_cmd_q();
              current_block = 17440971994642376514;
            }
            7961798899781870241 => {
              dot_scroll(
                (*ptr_to_globals).rows.wrapping_sub(2i32 as libc::c_uint) as libc::c_int,
                -1i32,
              );
              current_block = 15129665204879337069;
            }
            9426343755402444879 => {
              dot_scroll(
                (*ptr_to_globals)
                  .rows
                  .wrapping_sub(2i32 as libc::c_uint)
                  .wrapping_div(2i32 as libc::c_uint) as libc::c_int,
                1i32,
              );
              current_block = 15129665204879337069;
            }
            13352459794680105913 => {
              dot_scroll(1i32, 1i32);
              current_block = 15129665204879337069;
            }
            14142272253464333006 => {
              dot_scroll(
                (*ptr_to_globals).rows.wrapping_sub(2i32 as libc::c_uint) as libc::c_int,
                1i32,
              );
              current_block = 15129665204879337069;
            }
            10758177197742640066 => {
              (*ptr_to_globals).last_status_cksum = 0;
              current_block = 15129665204879337069;
            }
            6152256259730122749 => {
              current_block = 7534742345255184552;
            }
            12883932598258173301 => {
              current_block = 8800996768013373992;
            }
            11242998110520238401 => {
              redraw(1i32);
              current_block = 15129665204879337069;
            }
            13619733043935729992 => {
              loop {
                dot_next();
                dot_skip_over_ws();
                (*ptr_to_globals).cmdcnt -= 1;
                if !((*ptr_to_globals).cmdcnt > 0) {
                  break;
                }
              }
              current_block = 15129665204879337069;
            }
            9339065157412720613 => {
              dot_scroll(
                (*ptr_to_globals)
                  .rows
                  .wrapping_sub(2i32 as libc::c_uint)
                  .wrapping_div(2i32 as libc::c_uint) as libc::c_int,
                -1i32,
              );
              current_block = 15129665204879337069;
            }
            11447082683497798022 => {
              dot_scroll(1i32, -1i32);
              current_block = 15129665204879337069;
            }
            5182000506326660482 => {
              current_block = 13993698454868426881;
            }
            1105010766850597332 => {
              if !(*ptr_to_globals).reg[27].is_null() {
                p = begin_line((*ptr_to_globals).dot);
                q = end_line((*ptr_to_globals).dot);
                p = text_hole_delete(p, q, 1i32);
                p = p.offset(string_insert(p, (*ptr_to_globals).reg[27], 2i32) as isize);
                (*ptr_to_globals).dot = p;
                dot_skip_over_ws();
              }
              current_block = 15129665204879337069;
            }
            8616046655533110204 => {
              undo_pop();
              current_block = 15129665204879337069;
            }
            5127767458142431603 => {
              loop {
                (*ptr_to_globals).dot = end_line((*ptr_to_globals).dot);
                (*ptr_to_globals).cmdcnt -= 1;
                if (*ptr_to_globals).cmdcnt <= 0 {
                  break;
                }
                dot_next();
              }
              current_block = 15129665204879337069;
            }
            222014967776118151 => {
              (*ptr_to_globals).last_forward_char = get_one_char();
              current_block = 7856905509180742666;
            }
            11209792479411604110 => {
              loop {
                dot_prev();
                dot_skip_over_ws();
                (*ptr_to_globals).cmdcnt -= 1;
                if !((*ptr_to_globals).cmdcnt > 0) {
                  break;
                }
              }
              current_block = 15129665204879337069;
            }
            3364823792826654116 => {
              if (*ptr_to_globals).lmc_len != 0 {
                (*ptr_to_globals).ioq_start = crate::libbb::xfuncs_printf::xstrndup(
                  (*ptr_to_globals).last_modifying_cmd.as_mut_ptr(),
                  (*ptr_to_globals).lmc_len,
                );
                (*ptr_to_globals).ioq = (*ptr_to_globals).ioq_start
              }
              current_block = 15129665204879337069;
            }
            18096603330221575131 => {
              current_block = 17498168302144015873;
            }
            16891123271837848903 => {
              dot_end();
              current_block = 1752638907092016026;
            }
            8517235759107662071 => {
              current_block = 5847749760081351726;
            }
            12525254419223051704 => {
              if (*ptr_to_globals).dot < (*ptr_to_globals).end.offset(-1) {
                (*ptr_to_globals).dot = yank_delete(
                  (*ptr_to_globals).dot,
                  (*ptr_to_globals).dot,
                  1i32,
                  YANKDEL as libc::c_int,
                  1i32,
                )
              }
              current_block = 15129665204879337069;
            }
            15232911949322867522 => {
              current_block = 17251831742223396249;
            }
            10863374208794025069 => {
              current_block = 1895262434596074581;
            }
            451126677064669119 => {
              loop {
                dot_prev();
                (*ptr_to_globals).dot = move_to_col(
                  (*ptr_to_globals).dot,
                  (*ptr_to_globals).ccol + (*ptr_to_globals).offset,
                );
                (*ptr_to_globals).cmdcnt -= 1;
                if !((*ptr_to_globals).cmdcnt > 0) {
                  break;
                }
              }
              current_block = 15129665204879337069;
            }
            4611735929166613116 => {
              loop {
                if bb_ascii_isalnum(*(*ptr_to_globals).dot as libc::c_uchar) != 0
                  || *(*ptr_to_globals).dot as libc::c_int == '_' as i32
                {
                  (*ptr_to_globals).dot = skip_thing(
                    (*ptr_to_globals).dot,
                    1i32,
                    FORWARD as libc::c_int,
                    S_END_ALNUM as libc::c_int,
                  )
                } else if *strchrnul(
                  b"!\"#$%&\'()*+,-./:;<=>?@[\\]^_`{|}~\x00" as *const u8 as *const libc::c_char,
                  *(*ptr_to_globals).dot as libc::c_int,
                )
                .offset(0)
                  != 0
                {
                  (*ptr_to_globals).dot = skip_thing(
                    (*ptr_to_globals).dot,
                    1i32,
                    FORWARD as libc::c_int,
                    S_END_PUNCT as libc::c_int,
                  )
                }
                if (*ptr_to_globals).dot < (*ptr_to_globals).end.offset(-1) {
                  (*ptr_to_globals).dot = (*ptr_to_globals).dot.offset(1)
                }
                if ({
                  let mut bb__isspace: libc::c_uchar =
                    (*(*ptr_to_globals).dot as libc::c_int - 9i32) as libc::c_uchar;
                  (bb__isspace as libc::c_int == ' ' as i32 - 9i32
                    || bb__isspace as libc::c_int <= 13i32 - 9i32) as libc::c_int
                }) != 0
                {
                  (*ptr_to_globals).dot = skip_thing(
                    (*ptr_to_globals).dot,
                    2i32,
                    FORWARD as libc::c_int,
                    S_OVER_WS as libc::c_int,
                  )
                }
                (*ptr_to_globals).cmdcnt -= 1;
                if !((*ptr_to_globals).cmdcnt > 0) {
                  break;
                }
              }
              current_block = 15129665204879337069;
            }
            4386451087681909888 => {
              (*ptr_to_globals).dot =
                move_to_col((*ptr_to_globals).dot, (*ptr_to_globals).cmdcnt - 1i32);
              current_block = 15129665204879337069;
            }
            1296397779060594135 => {
              dot_begin();
              current_block = 15129665204879337069;
            }
            _ => {}
          }
          match current_block {
            15129665204879337069 => {}
            8629930936610358348 => {}
            _ => {
              match current_block {
                17251831742223396249 => {
                  dir = 0;
                  if c == 'X' as i32 {
                    dir = -1i32
                  }
                  loop {
                    if *(*ptr_to_globals).dot.offset(dir as isize) as libc::c_int != '\n' as i32 {
                      if c == 'X' as i32 {
                        (*ptr_to_globals).dot = (*ptr_to_globals).dot.offset(-1)
                      }
                      (*ptr_to_globals).dot = yank_delete(
                        (*ptr_to_globals).dot,
                        (*ptr_to_globals).dot,
                        0,
                        YANKDEL as libc::c_int,
                        1i32,
                      )
                    }
                    (*ptr_to_globals).cmdcnt -= 1;
                    if !((*ptr_to_globals).cmdcnt > 0) {
                      break;
                    }
                  }
                  end_cmd_q();
                  if c == 's' as i32 {
                    current_block = 8629930936610358348;
                  } else {
                    current_block = 15129665204879337069;
                  }
                }
                2087484904894455135 => {
                  dot_end();
                  (*ptr_to_globals).dot =
                    char_insert((*ptr_to_globals).dot, '\n' as i32 as libc::c_char, 1i32);
                  current_block = 8629930936610358348;
                }
                11945623545738147997 => {
                  (*ptr_to_globals).dot = (*ptr_to_globals).end.offset(-1);
                  if (*ptr_to_globals).cmdcnt > 0 {
                    (*ptr_to_globals).dot = find_line((*ptr_to_globals).cmdcnt)
                  }
                  dot_skip_over_ws();
                  current_block = 15129665204879337069;
                }
                5847749760081351726 => {
                  dir = FORWARD as libc::c_int;
                  if c == 'B' as i32 {
                    dir = BACK as libc::c_int
                  }
                  loop {
                    if c == 'W' as i32
                      || ({
                        let mut bb__isspace: libc::c_uchar =
                          (*(*ptr_to_globals).dot.offset(dir as isize) as libc::c_int - 9i32)
                            as libc::c_uchar;
                        (bb__isspace as libc::c_int == ' ' as i32 - 9i32
                          || bb__isspace as libc::c_int <= 13i32 - 9i32)
                          as libc::c_int
                      }) != 0
                    {
                      (*ptr_to_globals).dot =
                        skip_thing((*ptr_to_globals).dot, 1i32, dir, S_TO_WS as libc::c_int);
                      (*ptr_to_globals).dot =
                        skip_thing((*ptr_to_globals).dot, 2i32, dir, S_OVER_WS as libc::c_int)
                    }
                    if c != 'W' as i32 {
                      (*ptr_to_globals).dot =
                        skip_thing((*ptr_to_globals).dot, 1i32, dir, S_BEFORE_WS as libc::c_int)
                    }
                    (*ptr_to_globals).cmdcnt -= 1;
                    if !((*ptr_to_globals).cmdcnt > 0) {
                      break;
                    }
                  }
                  current_block = 15129665204879337069;
                }
                17440971994642376514 => {
                  current_block = 15129665204879337069;
                }
                7534742345255184552 => {
                  current_block = 17247297260531395789;
                }
                8800996768013373992 => {
                  loop {
                    dot_next();
                    (*ptr_to_globals).dot = move_to_col(
                      (*ptr_to_globals).dot,
                      (*ptr_to_globals).ccol + (*ptr_to_globals).offset,
                    );
                    (*ptr_to_globals).cmdcnt -= 1;
                    if !((*ptr_to_globals).cmdcnt > 0) {
                      break;
                    }
                  }
                  current_block = 15129665204879337069;
                }
                13993698454868426881 => {
                  loop {
                    dot_right();
                    (*ptr_to_globals).cmdcnt -= 1;
                    if !((*ptr_to_globals).cmdcnt > 0) {
                      break;
                    }
                  }
                  current_block = 15129665204879337069;
                }
                7856905509180742666 => {
                  while !((*ptr_to_globals).last_forward_char == 0) {
                    q = (*ptr_to_globals).dot.offset(1);
                    while q < (*ptr_to_globals).end.offset(-1)
                      && *q as libc::c_int != '\n' as i32
                      && *q as libc::c_int != (*ptr_to_globals).last_forward_char
                    {
                      q = q.offset(1)
                    }
                    if *q as libc::c_int == (*ptr_to_globals).last_forward_char {
                      (*ptr_to_globals).dot = q
                    }
                    (*ptr_to_globals).cmdcnt -= 1;
                    if !((*ptr_to_globals).cmdcnt > 0) {
                      break;
                    }
                  }
                  current_block = 15129665204879337069;
                }
                17498168302144015873 => {
                  current_block = 8681395796513813967;
                }
                1752638907092016026 => {
                  if *(*ptr_to_globals).dot as libc::c_int != '\n' as i32 {
                    (*ptr_to_globals).dot = (*ptr_to_globals).dot.offset(1)
                  }
                  current_block = 8629930936610358348;
                }
                3268579060917229304 => {
                  current_block = 8629930936610358348;
                }
                1895262434596074581 => {
                  current_block = 8908416993177701018;
                }
                _ => {}
              }
              match current_block {
                8629930936610358348 => {}
                15129665204879337069 => {}
                _ => {
                  match current_block {
                    17247297260531395789 => {
                      loop {
                        dot_left();
                        (*ptr_to_globals).cmdcnt -= 1;
                        if !((*ptr_to_globals).cmdcnt > 0) {
                          break;
                        }
                      }
                      current_block = 15129665204879337069;
                    }
                    8681395796513813967 => {
                      current_block = 5591548203144509315;
                    }
                    8908416993177701018 => {
                      current_block = 16124761010012532485;
                    }
                    _ => {}
                  }
                  match current_block {
                    15129665204879337069 => {}
                    _ => {
                      match current_block {
                        16124761010012532485 => {
                          let mut yf: libc::c_int = 0;
                          let mut ml: libc::c_int = 0;
                          let mut whole: libc::c_int = 0;
                          yf = YANKDEL as libc::c_int;
                          if c == 'y' as i32 || c == 'Y' as i32 {
                            yf = YANKONLY as libc::c_int
                          }
                          c1 = 'y' as i32;
                          if c != 'Y' as i32 {
                            c1 = get_one_char()
                          }
                          ml = find_range(&mut p, &mut q, c1 as libc::c_char);
                          place_cursor(0i32, 0);
                          if c1 == 27i32 {
                            c1 = 27i32;
                            c = c1
                          } else if !strchr(b"wW\x00" as *const u8 as *const libc::c_char, c1)
                            .is_null()
                          {
                            ml = 0;
                            if c == 'c' as i32 {
                              while ({
                                let mut bb__isspace: libc::c_uchar =
                                  (*q as libc::c_int - 9i32) as libc::c_uchar;
                                (bb__isspace as libc::c_int == ' ' as i32 - 9i32
                                  || bb__isspace as libc::c_int <= 13i32 - 9i32)
                                  as libc::c_int
                              }) != 0
                                && q > p
                              {
                                q = q.offset(-1)
                              }
                            }
                            (*ptr_to_globals).dot = yank_delete(p, q, ml, yf, 1i32)
                          } else if !strchr(
                            b"^0bBeEft%$ lh\x08\x7f\x00" as *const u8 as *const libc::c_char,
                            c1,
                          )
                          .is_null()
                          {
                            (*ptr_to_globals).dot = yank_delete(p, q, ml, yf, 1i32)
                          } else if !strchr(
                            b"cdykjGHL+-{}\r\n\x00" as *const u8 as *const libc::c_char,
                            c1,
                          )
                          .is_null()
                          {
                            (*ptr_to_globals).dot = yank_delete(p, q, ml, yf, 1i32);
                            whole = 1i32
                          } else {
                            c1 = 27i32;
                            c = c1;
                            ml = 0;
                            indicate_error();
                          }
                          if ml != 0 && whole != 0 {
                            if c == 'c' as i32 {
                              (*ptr_to_globals).dot = char_insert(
                                (*ptr_to_globals).dot,
                                '\n' as i32 as libc::c_char,
                                2i32,
                              );
                              if whole != 0
                                && (*ptr_to_globals).dot != (*ptr_to_globals).end.offset(-1)
                              {
                                dot_prev();
                              }
                            } else if c == 'd' as i32 {
                              dot_begin();
                              dot_skip_over_ws();
                            }
                          }
                          if c1 != 27i32 {
                            if c == 'c' as i32 {
                              strcpy(
                                buf.as_mut_ptr(),
                                b"Change\x00" as *const u8 as *const libc::c_char,
                              );
                              current_block = 8629930936610358348;
                            } else {
                              if c == 'd' as i32 {
                                strcpy(
                                  buf.as_mut_ptr(),
                                  b"Delete\x00" as *const u8 as *const libc::c_char,
                                );
                              }
                              if c == 'y' as i32 || c == 'Y' as i32 {
                                strcpy(
                                  buf.as_mut_ptr(),
                                  b"Yank\x00" as *const u8 as *const libc::c_char,
                                );
                              }
                              p = (*ptr_to_globals).reg[(*ptr_to_globals).YDreg as usize];
                              q = p.offset(strlen(p) as isize);
                              cnt = 0;
                              while p <= q {
                                if *p as libc::c_int == '\n' as i32 {
                                  cnt += 1
                                }
                                p = p.offset(1)
                              }
                              status_line(
                                b"%s %u lines (%u chars) using [%c]\x00" as *const u8
                                  as *const libc::c_char,
                                buf.as_mut_ptr(),
                                cnt,
                                strlen((*ptr_to_globals).reg[(*ptr_to_globals).YDreg as usize])
                                  as libc::c_uint,
                                what_reg() as libc::c_int,
                              );
                              end_cmd_q();
                              current_block = 15129665204879337069;
                            }
                          } else {
                            current_block = 15129665204879337069;
                          }
                        }
                        5591548203144509315 => {
                          current_block = 2636677179867529885;
                        }
                        _ => {}
                      }
                      match current_block {
                        15129665204879337069 => {}
                        8629930936610358348 => {}
                        _ => {
                          match current_block {
                            2636677179867529885 => {
                              current_block = 12309206730560524281;
                            }
                            _ => {}
                          }
                          match current_block {
                            12309206730560524281 => {
                              current_block = 3325768110057758661;
                            }
                            _ => {}
                          }
                          match current_block {
                            3325768110057758661 => {
                              current_block = 14815832896553429982;
                            }
                            _ => {}
                          }
                          match current_block {
                            14815832896553429982 => {
                              current_block = 10731695520297161438;
                            }
                            _ => {}
                          }
                          match current_block {
                            10731695520297161438 => {
                              if c == '0' as i32 && (*ptr_to_globals).cmdcnt < 1i32 {
                                dot_begin();
                              } else {
                                (*ptr_to_globals).cmdcnt =
                                  (*ptr_to_globals).cmdcnt * 10i32 + (c - '0' as i32)
                              }
                              current_block = 15129665204879337069;
                            }
                            _ => {}
                          }
                          match current_block {
                            15129665204879337069 => {}
                            _ => {
                              loop {
                                match current_block {
                                  16813369756331276724 => {
                                    msg = std::ptr::null();
                                    current_block = 7392824444931029276;
                                  }
                                  7392824444931029276 => {
                                    dir = FORWARD as libc::c_int;
                                    p = (*ptr_to_globals).dot.offset(1);
                                    if *(*ptr_to_globals).last_search_pattern.offset(0)
                                      as libc::c_int
                                      == '?' as i32
                                    {
                                      dir = BACK as libc::c_int;
                                      p = (*ptr_to_globals).dot.offset(-1)
                                    }
                                    current_block = 4166979493554389389;
                                  }
                                  _ => {
                                    q = char_search(
                                      p,
                                      (*ptr_to_globals).last_search_pattern.offset(1),
                                      dir << 1i32 | FULL as libc::c_int,
                                    );
                                    if !q.is_null() {
                                      (*ptr_to_globals).dot = q;
                                      msg = std::ptr::null()
                                    } else {
                                      p = (*ptr_to_globals).text;
                                      if dir == BACK as libc::c_int {
                                        p = (*ptr_to_globals).end.offset(-1)
                                      }
                                      q = char_search(
                                        p,
                                        (*ptr_to_globals).last_search_pattern.offset(1),
                                        dir << 1i32 | FULL as libc::c_int,
                                      );
                                      if !q.is_null() {
                                        (*ptr_to_globals).dot = q;
                                        msg = b"search hit BOTTOM, continuing at TOP\x00"
                                          as *const u8
                                          as *const libc::c_char;
                                        if dir == BACK as libc::c_int {
                                          msg = b"search hit TOP, continuing at BOTTOM\x00"
                                            as *const u8
                                            as *const libc::c_char
                                        }
                                      } else {
                                        msg = b"Pattern not found\x00" as *const u8
                                          as *const libc::c_char
                                      }
                                    }
                                    if !msg.is_null() {
                                      status_line_bold(
                                        b"%s\x00" as *const u8 as *const libc::c_char,
                                        msg,
                                      );
                                    }
                                    (*ptr_to_globals).cmdcnt -= 1;
                                    if (*ptr_to_globals).cmdcnt > 0 {
                                      current_block = 16813369756331276724;
                                    } else {
                                      break;
                                    }
                                  }
                                }
                              }
                              current_block = 15129665204879337069;
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
        103 => {
          current_block = 17973101765331640574;
          match current_block {
            16992905640583886232 => {
              loop {
                if (*(*ptr_to_globals).dot as libc::c_int - 'a' as i32) as libc::c_uchar
                  as libc::c_int
                  <= 'z' as i32 - 'a' as i32
                {
                  undo_push(
                    (*ptr_to_globals).dot,
                    1i32 as libc::c_uint,
                    1i32 as libc::c_uchar,
                  );
                  *(*ptr_to_globals).dot =
                    bb_ascii_toupper(*(*ptr_to_globals).dot as libc::c_uchar) as libc::c_char;
                  undo_push(
                    (*ptr_to_globals).dot,
                    1i32 as libc::c_uint,
                    2i32 as libc::c_uchar,
                  );
                } else if (*(*ptr_to_globals).dot as libc::c_int - 'A' as i32) as libc::c_uchar
                  as libc::c_int
                  <= 'Z' as i32 - 'A' as i32
                {
                  undo_push(
                    (*ptr_to_globals).dot,
                    1i32 as libc::c_uint,
                    1i32 as libc::c_uchar,
                  );
                  *(*ptr_to_globals).dot =
                    bb_ascii_tolower(*(*ptr_to_globals).dot as libc::c_uchar) as libc::c_char;
                  undo_push(
                    (*ptr_to_globals).dot,
                    1i32 as libc::c_uint,
                    2i32 as libc::c_uchar,
                  );
                }
                dot_right();
                (*ptr_to_globals).cmdcnt -= 1;
                if !((*ptr_to_globals).cmdcnt > 0) {
                  break;
                }
              }
              end_cmd_q();
              current_block = 15129665204879337069;
            }
            8729655159604064397 => {
              c1 = get_one_char();
              cnt = 0;
              if c1 == '.' as i32 {
                cnt = (*ptr_to_globals)
                  .rows
                  .wrapping_sub(2i32 as libc::c_uint)
                  .wrapping_div(2i32 as libc::c_uint) as libc::c_int
              }
              if c1 == '-' as i32 {
                cnt = (*ptr_to_globals).rows.wrapping_sub(2i32 as libc::c_uint) as libc::c_int
              }
              (*ptr_to_globals).screenbegin = begin_line((*ptr_to_globals).dot);
              dot_scroll(cnt, -1i32);
              current_block = 15129665204879337069;
            }
            15899500648299942075 => {
              (*ptr_to_globals).last_forward_char = get_one_char();
              do_cmd(';' as i32);
              if *(*ptr_to_globals).dot as libc::c_int == (*ptr_to_globals).last_forward_char {
                dot_left();
              }
              (*ptr_to_globals).last_forward_char = 0;
              current_block = 15129665204879337069;
            }
            9051390181078481641 => {
              c1 = get_one_char();
              if *(*ptr_to_globals).dot as libc::c_int != '\n' as i32 {
                (*ptr_to_globals).dot =
                  text_hole_delete((*ptr_to_globals).dot, (*ptr_to_globals).dot, 1i32);
                (*ptr_to_globals).dot =
                  char_insert((*ptr_to_globals).dot, c1 as libc::c_char, 2i32);
                dot_left();
              }
              end_cmd_q();
              current_block = 15129665204879337069;
            }
            877115918601926659 => {
              dir = FORWARD as libc::c_int;
              if c == 'b' as i32 {
                dir = BACK as libc::c_int
              }
              while !((*ptr_to_globals).dot.offset(dir as isize) < (*ptr_to_globals).text
                || (*ptr_to_globals).dot.offset(dir as isize) > (*ptr_to_globals).end.offset(-1))
              {
                (*ptr_to_globals).dot = (*ptr_to_globals).dot.offset(dir as isize);
                if ({
                  let mut bb__isspace: libc::c_uchar =
                    (*(*ptr_to_globals).dot as libc::c_int - 9i32) as libc::c_uchar;
                  (bb__isspace as libc::c_int == ' ' as i32 - 9i32
                    || bb__isspace as libc::c_int <= 13i32 - 9i32) as libc::c_int
                }) != 0
                {
                  (*ptr_to_globals).dot = skip_thing(
                    (*ptr_to_globals).dot,
                    if c == 'e' as i32 { 2i32 } else { 1i32 },
                    dir,
                    S_OVER_WS as libc::c_int,
                  )
                }
                if bb_ascii_isalnum(*(*ptr_to_globals).dot as libc::c_uchar) != 0
                  || *(*ptr_to_globals).dot as libc::c_int == '_' as i32
                {
                  (*ptr_to_globals).dot =
                    skip_thing((*ptr_to_globals).dot, 1i32, dir, S_END_ALNUM as libc::c_int)
                } else if *strchrnul(
                  b"!\"#$%&\'()*+,-./:;<=>?@[\\]^_`{|}~\x00" as *const u8 as *const libc::c_char,
                  *(*ptr_to_globals).dot as libc::c_int,
                )
                .offset(0)
                  != 0
                {
                  (*ptr_to_globals).dot =
                    skip_thing((*ptr_to_globals).dot, 1i32, dir, S_END_PUNCT as libc::c_int)
                }
                (*ptr_to_globals).cmdcnt -= 1;
                if !((*ptr_to_globals).cmdcnt > 0) {
                  break;
                }
              }
              current_block = 15129665204879337069;
            }
            1085022737867179637 => {
              dot_begin();
              dot_skip_over_ws();
              current_block = 15129665204879337069;
            }
            3113147720494587438 => {
              c1 = get_one_char();
              if c1 != 'Z' as i32 {
                indicate_error();
              } else if (*ptr_to_globals).modified_count != 0 {
                if 1i32 != 0 && (*ptr_to_globals).readonly_mode as libc::c_int != 0 {
                  status_line_bold(
                    b"\'%s\' is read only\x00" as *const u8 as *const libc::c_char,
                    (*ptr_to_globals).current_filename,
                  );
                } else {
                  cnt = file_write(
                    (*ptr_to_globals).current_filename,
                    (*ptr_to_globals).text,
                    (*ptr_to_globals).end.offset(-1),
                  );
                  if cnt < 0 {
                    if cnt == -1i32 {
                      status_line_bold(b"Write error: %m\x00" as *const u8 as *const libc::c_char);
                    }
                  } else if cnt as libc::c_long
                    == (*ptr_to_globals)
                      .end
                      .offset(-1)
                      .wrapping_offset_from((*ptr_to_globals).text)
                      as libc::c_long
                      + 1
                  {
                    (*ptr_to_globals).editing = 0 as smallint
                  }
                }
              } else {
                (*ptr_to_globals).editing = 0 as smallint
              }
              current_block = 15129665204879337069;
            }
            12960118908218882441 => {
              p = begin_line((*ptr_to_globals).dot);
              if *p.offset(-1i32 as isize) as libc::c_int == '\n' as i32 {
                dot_prev();
                current_block = 2087484904894455135;
              } else {
                dot_begin();
                (*ptr_to_globals).dot =
                  char_insert((*ptr_to_globals).dot, '\n' as i32 as libc::c_char, 1i32);
                dot_prev();
                current_block = 8629930936610358348;
              }
            }
            8720450212473544924 => {
              (*ptr_to_globals).dot = (*ptr_to_globals).screenbegin;
              cnt = 0;
              while (cnt as libc::c_uint)
                < (*ptr_to_globals)
                  .rows
                  .wrapping_sub(1i32 as libc::c_uint)
                  .wrapping_div(2i32 as libc::c_uint)
              {
                (*ptr_to_globals).dot = next_line((*ptr_to_globals).dot);
                cnt += 1
              }
              current_block = 15129665204879337069;
            }
            13015277209715431090 => {
              (*ptr_to_globals).dot = end_screen();
              if (*ptr_to_globals).cmdcnt as libc::c_uint
                > (*ptr_to_globals).rows.wrapping_sub(1i32 as libc::c_uint)
              {
                (*ptr_to_globals).cmdcnt =
                  (*ptr_to_globals).rows.wrapping_sub(1i32 as libc::c_uint) as libc::c_int
              }
              (*ptr_to_globals).cmdcnt -= 1;
              if (*ptr_to_globals).cmdcnt > 0 {
                do_cmd('-' as i32);
              }
              dot_begin();
              dot_skip_over_ws();
              current_block = 15129665204879337069;
            }
            9800435767766781385 => {
              loop {
                dot_end();
                if (*ptr_to_globals).dot < (*ptr_to_globals).end.offset(-1) {
                  undo_push(
                    (*ptr_to_globals).dot,
                    1i32 as libc::c_uint,
                    1i32 as libc::c_uchar,
                  );
                  let fresh15 = (*ptr_to_globals).dot;
                  (*ptr_to_globals).dot = (*ptr_to_globals).dot.offset(1);
                  *fresh15 = ' ' as i32 as libc::c_char;
                  undo_push(
                    (*ptr_to_globals).dot.offset(-1),
                    1i32 as libc::c_uint,
                    2i32 as libc::c_uchar,
                  );
                  while ({
                    let mut bb__isblank: libc::c_uchar = *(*ptr_to_globals).dot as libc::c_uchar;
                    (bb__isblank as libc::c_int == ' ' as i32
                      || bb__isblank as libc::c_int == '\t' as i32)
                      as libc::c_int
                  }) != 0
                  {
                    text_hole_delete((*ptr_to_globals).dot, (*ptr_to_globals).dot, 2i32);
                  }
                }
                (*ptr_to_globals).cmdcnt -= 1;
                if !((*ptr_to_globals).cmdcnt > 0) {
                  break;
                }
              }
              end_cmd_q();
              current_block = 15129665204879337069;
            }
            3432363526595694666 => {
              dot_begin();
              dot_skip_over_ws();
              current_block = 3268579060917229304;
            }
            3494829253343353619 => {
              (*ptr_to_globals).dot = (*ptr_to_globals).screenbegin;
              if (*ptr_to_globals).cmdcnt as libc::c_uint
                > (*ptr_to_globals).rows.wrapping_sub(1i32 as libc::c_uint)
              {
                (*ptr_to_globals).cmdcnt =
                  (*ptr_to_globals).rows.wrapping_sub(1i32 as libc::c_uint) as libc::c_int
              }
              (*ptr_to_globals).cmdcnt -= 1;
              if (*ptr_to_globals).cmdcnt > 0 {
                do_cmd('+' as i32);
              }
              dot_skip_over_ws();
              current_block = 15129665204879337069;
            }
            17973101765331640574 => {
              c1 = get_one_char();
              if c1 != 'g' as i32 {
                buf[0] = 'g' as i32 as libc::c_char;
                buf[1] = if c1 >= 0 { c1 } else { '*' as i32 } as libc::c_char;
                buf[2] = '\u{0}' as i32 as libc::c_char;
                not_implemented(buf.as_mut_ptr());
                current_block = 15129665204879337069;
              } else {
                if (*ptr_to_globals).cmdcnt == 0 {
                  (*ptr_to_globals).cmdcnt = 1i32
                }
                current_block = 11945623545738147997;
              }
            }
            16546625800574160972 => {
              save_dot = (*ptr_to_globals).dot;
              (*ptr_to_globals).dot = dollar_line((*ptr_to_globals).dot);
              (*ptr_to_globals).dot = yank_delete(
                save_dot,
                (*ptr_to_globals).dot,
                0,
                YANKDEL as libc::c_int,
                1i32,
              );
              if c == 'C' as i32 {
                current_block = 8629930936610358348;
              } else {
                if c == 'D' as i32 {
                  end_cmd_q();
                }
                current_block = 15129665204879337069;
              }
            }
            11937696639986586685 => {
              cnt = count_lines((*ptr_to_globals).text, (*ptr_to_globals).dot);
              c1 = get_one_char();
              find_range(&mut p, &mut q, c1 as libc::c_char);
              yank_delete(p, q, 1i32, YANKONLY as libc::c_int, 0);
              p = begin_line(p);
              q = end_line(q);
              i = count_lines(p, q);
              while i > 0 {
                if c == '<' as i32 {
                  if *p as libc::c_int == '\t' as i32 {
                    text_hole_delete(p, p, 0);
                  } else if *p as libc::c_int == ' ' as i32 {
                    j = 0;
                    while *p as libc::c_int == ' ' as i32 && j < (*ptr_to_globals).tabstop {
                      text_hole_delete(p, p, 0);
                      j += 1
                    }
                  }
                } else if c == '>' as i32 {
                  char_insert(p, '\t' as i32 as libc::c_char, 1i32);
                }
                i -= 1;
                p = next_line(p)
              }
              (*ptr_to_globals).dot = find_line(cnt);
              dot_skip_over_ws();
              end_cmd_q();
              current_block = 15129665204879337069;
            }
            17725350714912028156 => {
              p = get_input_line(b":\x00" as *const u8 as *const libc::c_char);
              colon(p);
              current_block = 15129665204879337069;
            }
            14526470074083880812 => {
              q = char_search(
                (*ptr_to_globals).dot,
                b"\n\n\x00" as *const u8 as *const libc::c_char,
                (FORWARD as libc::c_int) << 1i32 | FULL as libc::c_int,
              );
              if !q.is_null() {
                (*ptr_to_globals).dot = next_line(q)
              }
              current_block = 15129665204879337069;
            }
            8893187391306414141 => {
              q = char_search(
                (*ptr_to_globals).dot,
                b"\n\n\x00" as *const u8 as *const libc::c_char,
                ((BACK as libc::c_int as libc::c_uint) << 1i32
                  | FULL as libc::c_int as libc::c_uint) as libc::c_int,
              );
              if !q.is_null() {
                (*ptr_to_globals).dot = next_line(q)
              }
              current_block = 15129665204879337069;
            }
            7021673758293221412 => {
              dir = BACK as libc::c_int;
              p = (*ptr_to_globals).dot.offset(-1);
              if *(*ptr_to_globals).last_search_pattern.offset(0) as libc::c_int == '?' as i32 {
                dir = FORWARD as libc::c_int;
                p = (*ptr_to_globals).dot.offset(1)
              }
              current_block = 4166979493554389389;
            }
            18374191879090272823 => {
              buf[0] = c as libc::c_char;
              buf[1] = '\u{0}' as i32 as libc::c_char;
              q = get_input_line(buf.as_mut_ptr());
              if *q.offset(0) as libc::c_int != 0 && *q.offset(1) == 0 {
                if *(*ptr_to_globals).last_search_pattern.offset(0) != 0 {
                  *(*ptr_to_globals).last_search_pattern.offset(0) = c as libc::c_char
                }
                current_block = 7392824444931029276;
              } else if *q.offset(0) != 0 {
                free((*ptr_to_globals).last_search_pattern as *mut libc::c_void);
                (*ptr_to_globals).last_search_pattern = crate::libbb::xfuncs_printf::xstrdup(q);
                current_block = 7392824444931029276;
              } else {
                current_block = 15129665204879337069;
              }
            }
            16407828456666301883 => {
              if (*ptr_to_globals).last_forward_char == 0 {
                current_block = 15129665204879337069;
              } else {
                loop {
                  q = (*ptr_to_globals).dot.offset(-1);
                  while q >= (*ptr_to_globals).text
                    && *q as libc::c_int != '\n' as i32
                    && *q as libc::c_int != (*ptr_to_globals).last_forward_char
                  {
                    q = q.offset(-1)
                  }
                  if q >= (*ptr_to_globals).text
                    && *q as libc::c_int == (*ptr_to_globals).last_forward_char
                  {
                    (*ptr_to_globals).dot = q
                  }
                  (*ptr_to_globals).cmdcnt -= 1;
                  if !((*ptr_to_globals).cmdcnt > 0) {
                    break;
                  }
                }
                current_block = 15129665204879337069;
              }
            }
            9018432604062702004 => {
              q = (*ptr_to_globals).dot;
              while q < (*ptr_to_globals).end && *q as libc::c_int != '\n' as i32 {
                if !strchr(
                  b"()[]{}\x00" as *const u8 as *const libc::c_char,
                  *q as libc::c_int,
                )
                .is_null()
                {
                  p = find_pair(q, *q);
                  if p.is_null() {
                    indicate_error();
                  } else {
                    (*ptr_to_globals).dot = p
                  }
                  break;
                } else {
                  q = q.offset(1)
                }
              }
              if *q as libc::c_int == '\n' as i32 {
                indicate_error();
              }
              current_block = 15129665204879337069;
            }
            10247103787464459848 => {
              p = (*ptr_to_globals).reg[(*ptr_to_globals).YDreg as usize];
              if p.is_null() {
                status_line_bold(
                  b"Nothing in register %c\x00" as *const u8 as *const libc::c_char,
                  what_reg() as libc::c_int,
                );
              } else {
                if !strchr(p, '\n' as i32).is_null() {
                  if c == 'P' as i32 {
                    dot_begin();
                  }
                  if c == 'p' as i32 {
                    if end_line((*ptr_to_globals).dot) == (*ptr_to_globals).end.offset(-1) {
                      (*ptr_to_globals).dot = (*ptr_to_globals).end
                    } else {
                      dot_next();
                    }
                  }
                } else if c == 'p' as i32 {
                  dot_right();
                }
                string_insert((*ptr_to_globals).dot, p, 1i32);
                end_cmd_q();
              }
              current_block = 15129665204879337069;
            }
            15260732871948875843 => {
              c1 = (get_one_char() | 0x20i32) - 'a' as i32;
              if c1 as libc::c_uint <= 25i32 as libc::c_uint {
                (*ptr_to_globals).mark[c1 as usize] = (*ptr_to_globals).dot
              } else {
                indicate_error();
              }
              current_block = 15129665204879337069;
            }
            12738322036487086035 => {
              c1 = get_one_char() | 0x20i32;
              if (c1 - 'a' as i32) as libc::c_uint <= 25i32 as libc::c_uint {
                c1 = c1 - 'a' as i32;
                q = (*ptr_to_globals).mark[c1 as usize];
                if (*ptr_to_globals).text <= q && q < (*ptr_to_globals).end {
                  (*ptr_to_globals).dot = q;
                  dot_begin();
                  dot_skip_over_ws();
                }
              } else if c1 == '\'' as i32 {
                (*ptr_to_globals).dot = swap_context((*ptr_to_globals).dot);
                dot_begin();
                dot_skip_over_ws();
              } else {
                indicate_error();
              }
              current_block = 15129665204879337069;
            }
            13255096073384561358 => {
              c1 = (get_one_char() | 0x20i32) - 'a' as i32;
              if c1 as libc::c_uint <= 25i32 as libc::c_uint {
                (*ptr_to_globals).YDreg = c1 as smalluint
              } else {
                indicate_error();
              }
              current_block = 15129665204879337069;
            }
            10258711639984089377 => {
              if (*ptr_to_globals).cmd_mode as libc::c_int == 0 {
                indicate_error();
              }
              (*ptr_to_globals).cmd_mode = 0 as smallint;
              undo_queue_commit();
              end_cmd_q();
              (*ptr_to_globals).last_status_cksum = 0;
              current_block = 15129665204879337069;
            }
            11439127087547047736 => {
              buf[0] = c as libc::c_char;
              buf[1] = '\u{0}' as i32 as libc::c_char;
              not_implemented(buf.as_mut_ptr());
              end_cmd_q();
              current_block = 17440971994642376514;
            }
            7961798899781870241 => {
              dot_scroll(
                (*ptr_to_globals).rows.wrapping_sub(2i32 as libc::c_uint) as libc::c_int,
                -1i32,
              );
              current_block = 15129665204879337069;
            }
            9426343755402444879 => {
              dot_scroll(
                (*ptr_to_globals)
                  .rows
                  .wrapping_sub(2i32 as libc::c_uint)
                  .wrapping_div(2i32 as libc::c_uint) as libc::c_int,
                1i32,
              );
              current_block = 15129665204879337069;
            }
            13352459794680105913 => {
              dot_scroll(1i32, 1i32);
              current_block = 15129665204879337069;
            }
            14142272253464333006 => {
              dot_scroll(
                (*ptr_to_globals).rows.wrapping_sub(2i32 as libc::c_uint) as libc::c_int,
                1i32,
              );
              current_block = 15129665204879337069;
            }
            10758177197742640066 => {
              (*ptr_to_globals).last_status_cksum = 0;
              current_block = 15129665204879337069;
            }
            6152256259730122749 => {
              current_block = 7534742345255184552;
            }
            12883932598258173301 => {
              current_block = 8800996768013373992;
            }
            11242998110520238401 => {
              redraw(1i32);
              current_block = 15129665204879337069;
            }
            13619733043935729992 => {
              loop {
                dot_next();
                dot_skip_over_ws();
                (*ptr_to_globals).cmdcnt -= 1;
                if !((*ptr_to_globals).cmdcnt > 0) {
                  break;
                }
              }
              current_block = 15129665204879337069;
            }
            9339065157412720613 => {
              dot_scroll(
                (*ptr_to_globals)
                  .rows
                  .wrapping_sub(2i32 as libc::c_uint)
                  .wrapping_div(2i32 as libc::c_uint) as libc::c_int,
                -1i32,
              );
              current_block = 15129665204879337069;
            }
            11447082683497798022 => {
              dot_scroll(1i32, -1i32);
              current_block = 15129665204879337069;
            }
            5182000506326660482 => {
              current_block = 13993698454868426881;
            }
            1105010766850597332 => {
              if !(*ptr_to_globals).reg[27].is_null() {
                p = begin_line((*ptr_to_globals).dot);
                q = end_line((*ptr_to_globals).dot);
                p = text_hole_delete(p, q, 1i32);
                p = p.offset(string_insert(p, (*ptr_to_globals).reg[27], 2i32) as isize);
                (*ptr_to_globals).dot = p;
                dot_skip_over_ws();
              }
              current_block = 15129665204879337069;
            }
            8616046655533110204 => {
              undo_pop();
              current_block = 15129665204879337069;
            }
            5127767458142431603 => {
              loop {
                (*ptr_to_globals).dot = end_line((*ptr_to_globals).dot);
                (*ptr_to_globals).cmdcnt -= 1;
                if (*ptr_to_globals).cmdcnt <= 0 {
                  break;
                }
                dot_next();
              }
              current_block = 15129665204879337069;
            }
            222014967776118151 => {
              (*ptr_to_globals).last_forward_char = get_one_char();
              current_block = 7856905509180742666;
            }
            11209792479411604110 => {
              loop {
                dot_prev();
                dot_skip_over_ws();
                (*ptr_to_globals).cmdcnt -= 1;
                if !((*ptr_to_globals).cmdcnt > 0) {
                  break;
                }
              }
              current_block = 15129665204879337069;
            }
            3364823792826654116 => {
              if (*ptr_to_globals).lmc_len != 0 {
                (*ptr_to_globals).ioq_start = crate::libbb::xfuncs_printf::xstrndup(
                  (*ptr_to_globals).last_modifying_cmd.as_mut_ptr(),
                  (*ptr_to_globals).lmc_len,
                );
                (*ptr_to_globals).ioq = (*ptr_to_globals).ioq_start
              }
              current_block = 15129665204879337069;
            }
            18096603330221575131 => {
              current_block = 17498168302144015873;
            }
            16891123271837848903 => {
              dot_end();
              current_block = 1752638907092016026;
            }
            8517235759107662071 => {
              current_block = 5847749760081351726;
            }
            12525254419223051704 => {
              if (*ptr_to_globals).dot < (*ptr_to_globals).end.offset(-1) {
                (*ptr_to_globals).dot = yank_delete(
                  (*ptr_to_globals).dot,
                  (*ptr_to_globals).dot,
                  1i32,
                  YANKDEL as libc::c_int,
                  1i32,
                )
              }
              current_block = 15129665204879337069;
            }
            15232911949322867522 => {
              current_block = 17251831742223396249;
            }
            10863374208794025069 => {
              current_block = 1895262434596074581;
            }
            451126677064669119 => {
              loop {
                dot_prev();
                (*ptr_to_globals).dot = move_to_col(
                  (*ptr_to_globals).dot,
                  (*ptr_to_globals).ccol + (*ptr_to_globals).offset,
                );
                (*ptr_to_globals).cmdcnt -= 1;
                if !((*ptr_to_globals).cmdcnt > 0) {
                  break;
                }
              }
              current_block = 15129665204879337069;
            }
            4611735929166613116 => {
              loop {
                if bb_ascii_isalnum(*(*ptr_to_globals).dot as libc::c_uchar) != 0
                  || *(*ptr_to_globals).dot as libc::c_int == '_' as i32
                {
                  (*ptr_to_globals).dot = skip_thing(
                    (*ptr_to_globals).dot,
                    1i32,
                    FORWARD as libc::c_int,
                    S_END_ALNUM as libc::c_int,
                  )
                } else if *strchrnul(
                  b"!\"#$%&\'()*+,-./:;<=>?@[\\]^_`{|}~\x00" as *const u8 as *const libc::c_char,
                  *(*ptr_to_globals).dot as libc::c_int,
                )
                .offset(0)
                  != 0
                {
                  (*ptr_to_globals).dot = skip_thing(
                    (*ptr_to_globals).dot,
                    1i32,
                    FORWARD as libc::c_int,
                    S_END_PUNCT as libc::c_int,
                  )
                }
                if (*ptr_to_globals).dot < (*ptr_to_globals).end.offset(-1) {
                  (*ptr_to_globals).dot = (*ptr_to_globals).dot.offset(1)
                }
                if ({
                  let mut bb__isspace: libc::c_uchar =
                    (*(*ptr_to_globals).dot as libc::c_int - 9i32) as libc::c_uchar;
                  (bb__isspace as libc::c_int == ' ' as i32 - 9i32
                    || bb__isspace as libc::c_int <= 13i32 - 9i32) as libc::c_int
                }) != 0
                {
                  (*ptr_to_globals).dot = skip_thing(
                    (*ptr_to_globals).dot,
                    2i32,
                    FORWARD as libc::c_int,
                    S_OVER_WS as libc::c_int,
                  )
                }
                (*ptr_to_globals).cmdcnt -= 1;
                if !((*ptr_to_globals).cmdcnt > 0) {
                  break;
                }
              }
              current_block = 15129665204879337069;
            }
            4386451087681909888 => {
              (*ptr_to_globals).dot =
                move_to_col((*ptr_to_globals).dot, (*ptr_to_globals).cmdcnt - 1i32);
              current_block = 15129665204879337069;
            }
            1296397779060594135 => {
              dot_begin();
              current_block = 15129665204879337069;
            }
            _ => {}
          }
          match current_block {
            15129665204879337069 => {}
            8629930936610358348 => {}
            _ => {
              match current_block {
                17251831742223396249 => {
                  dir = 0;
                  if c == 'X' as i32 {
                    dir = -1i32
                  }
                  loop {
                    if *(*ptr_to_globals).dot.offset(dir as isize) as libc::c_int != '\n' as i32 {
                      if c == 'X' as i32 {
                        (*ptr_to_globals).dot = (*ptr_to_globals).dot.offset(-1)
                      }
                      (*ptr_to_globals).dot = yank_delete(
                        (*ptr_to_globals).dot,
                        (*ptr_to_globals).dot,
                        0,
                        YANKDEL as libc::c_int,
                        1i32,
                      )
                    }
                    (*ptr_to_globals).cmdcnt -= 1;
                    if !((*ptr_to_globals).cmdcnt > 0) {
                      break;
                    }
                  }
                  end_cmd_q();
                  if c == 's' as i32 {
                    current_block = 8629930936610358348;
                  } else {
                    current_block = 15129665204879337069;
                  }
                }
                2087484904894455135 => {
                  dot_end();
                  (*ptr_to_globals).dot =
                    char_insert((*ptr_to_globals).dot, '\n' as i32 as libc::c_char, 1i32);
                  current_block = 8629930936610358348;
                }
                11945623545738147997 => {
                  (*ptr_to_globals).dot = (*ptr_to_globals).end.offset(-1);
                  if (*ptr_to_globals).cmdcnt > 0 {
                    (*ptr_to_globals).dot = find_line((*ptr_to_globals).cmdcnt)
                  }
                  dot_skip_over_ws();
                  current_block = 15129665204879337069;
                }
                5847749760081351726 => {
                  dir = FORWARD as libc::c_int;
                  if c == 'B' as i32 {
                    dir = BACK as libc::c_int
                  }
                  loop {
                    if c == 'W' as i32
                      || ({
                        let mut bb__isspace: libc::c_uchar =
                          (*(*ptr_to_globals).dot.offset(dir as isize) as libc::c_int - 9i32)
                            as libc::c_uchar;
                        (bb__isspace as libc::c_int == ' ' as i32 - 9i32
                          || bb__isspace as libc::c_int <= 13i32 - 9i32)
                          as libc::c_int
                      }) != 0
                    {
                      (*ptr_to_globals).dot =
                        skip_thing((*ptr_to_globals).dot, 1i32, dir, S_TO_WS as libc::c_int);
                      (*ptr_to_globals).dot =
                        skip_thing((*ptr_to_globals).dot, 2i32, dir, S_OVER_WS as libc::c_int)
                    }
                    if c != 'W' as i32 {
                      (*ptr_to_globals).dot =
                        skip_thing((*ptr_to_globals).dot, 1i32, dir, S_BEFORE_WS as libc::c_int)
                    }
                    (*ptr_to_globals).cmdcnt -= 1;
                    if !((*ptr_to_globals).cmdcnt > 0) {
                      break;
                    }
                  }
                  current_block = 15129665204879337069;
                }
                17440971994642376514 => {
                  current_block = 15129665204879337069;
                }
                7534742345255184552 => {
                  current_block = 17247297260531395789;
                }
                8800996768013373992 => {
                  loop {
                    dot_next();
                    (*ptr_to_globals).dot = move_to_col(
                      (*ptr_to_globals).dot,
                      (*ptr_to_globals).ccol + (*ptr_to_globals).offset,
                    );
                    (*ptr_to_globals).cmdcnt -= 1;
                    if !((*ptr_to_globals).cmdcnt > 0) {
                      break;
                    }
                  }
                  current_block = 15129665204879337069;
                }
                13993698454868426881 => {
                  loop {
                    dot_right();
                    (*ptr_to_globals).cmdcnt -= 1;
                    if !((*ptr_to_globals).cmdcnt > 0) {
                      break;
                    }
                  }
                  current_block = 15129665204879337069;
                }
                7856905509180742666 => {
                  while !((*ptr_to_globals).last_forward_char == 0) {
                    q = (*ptr_to_globals).dot.offset(1);
                    while q < (*ptr_to_globals).end.offset(-1)
                      && *q as libc::c_int != '\n' as i32
                      && *q as libc::c_int != (*ptr_to_globals).last_forward_char
                    {
                      q = q.offset(1)
                    }
                    if *q as libc::c_int == (*ptr_to_globals).last_forward_char {
                      (*ptr_to_globals).dot = q
                    }
                    (*ptr_to_globals).cmdcnt -= 1;
                    if !((*ptr_to_globals).cmdcnt > 0) {
                      break;
                    }
                  }
                  current_block = 15129665204879337069;
                }
                17498168302144015873 => {
                  current_block = 8681395796513813967;
                }
                1752638907092016026 => {
                  if *(*ptr_to_globals).dot as libc::c_int != '\n' as i32 {
                    (*ptr_to_globals).dot = (*ptr_to_globals).dot.offset(1)
                  }
                  current_block = 8629930936610358348;
                }
                3268579060917229304 => {
                  current_block = 8629930936610358348;
                }
                1895262434596074581 => {
                  current_block = 8908416993177701018;
                }
                _ => {}
              }
              match current_block {
                8629930936610358348 => {}
                15129665204879337069 => {}
                _ => {
                  match current_block {
                    17247297260531395789 => {
                      loop {
                        dot_left();
                        (*ptr_to_globals).cmdcnt -= 1;
                        if !((*ptr_to_globals).cmdcnt > 0) {
                          break;
                        }
                      }
                      current_block = 15129665204879337069;
                    }
                    8681395796513813967 => {
                      current_block = 5591548203144509315;
                    }
                    8908416993177701018 => {
                      current_block = 16124761010012532485;
                    }
                    _ => {}
                  }
                  match current_block {
                    15129665204879337069 => {}
                    _ => {
                      match current_block {
                        16124761010012532485 => {
                          let mut yf: libc::c_int = 0;
                          let mut ml: libc::c_int = 0;
                          let mut whole: libc::c_int = 0;
                          yf = YANKDEL as libc::c_int;
                          if c == 'y' as i32 || c == 'Y' as i32 {
                            yf = YANKONLY as libc::c_int
                          }
                          c1 = 'y' as i32;
                          if c != 'Y' as i32 {
                            c1 = get_one_char()
                          }
                          ml = find_range(&mut p, &mut q, c1 as libc::c_char);
                          place_cursor(0i32, 0);
                          if c1 == 27i32 {
                            c1 = 27i32;
                            c = c1
                          } else if !strchr(b"wW\x00" as *const u8 as *const libc::c_char, c1)
                            .is_null()
                          {
                            ml = 0;
                            if c == 'c' as i32 {
                              while ({
                                let mut bb__isspace: libc::c_uchar =
                                  (*q as libc::c_int - 9i32) as libc::c_uchar;
                                (bb__isspace as libc::c_int == ' ' as i32 - 9i32
                                  || bb__isspace as libc::c_int <= 13i32 - 9i32)
                                  as libc::c_int
                              }) != 0
                                && q > p
                              {
                                q = q.offset(-1)
                              }
                            }
                            (*ptr_to_globals).dot = yank_delete(p, q, ml, yf, 1i32)
                          } else if !strchr(
                            b"^0bBeEft%$ lh\x08\x7f\x00" as *const u8 as *const libc::c_char,
                            c1,
                          )
                          .is_null()
                          {
                            (*ptr_to_globals).dot = yank_delete(p, q, ml, yf, 1i32)
                          } else if !strchr(
                            b"cdykjGHL+-{}\r\n\x00" as *const u8 as *const libc::c_char,
                            c1,
                          )
                          .is_null()
                          {
                            (*ptr_to_globals).dot = yank_delete(p, q, ml, yf, 1i32);
                            whole = 1i32
                          } else {
                            c1 = 27i32;
                            c = c1;
                            ml = 0;
                            indicate_error();
                          }
                          if ml != 0 && whole != 0 {
                            if c == 'c' as i32 {
                              (*ptr_to_globals).dot = char_insert(
                                (*ptr_to_globals).dot,
                                '\n' as i32 as libc::c_char,
                                2i32,
                              );
                              if whole != 0
                                && (*ptr_to_globals).dot != (*ptr_to_globals).end.offset(-1)
                              {
                                dot_prev();
                              }
                            } else if c == 'd' as i32 {
                              dot_begin();
                              dot_skip_over_ws();
                            }
                          }
                          if c1 != 27i32 {
                            if c == 'c' as i32 {
                              strcpy(
                                buf.as_mut_ptr(),
                                b"Change\x00" as *const u8 as *const libc::c_char,
                              );
                              current_block = 8629930936610358348;
                            } else {
                              if c == 'd' as i32 {
                                strcpy(
                                  buf.as_mut_ptr(),
                                  b"Delete\x00" as *const u8 as *const libc::c_char,
                                );
                              }
                              if c == 'y' as i32 || c == 'Y' as i32 {
                                strcpy(
                                  buf.as_mut_ptr(),
                                  b"Yank\x00" as *const u8 as *const libc::c_char,
                                );
                              }
                              p = (*ptr_to_globals).reg[(*ptr_to_globals).YDreg as usize];
                              q = p.offset(strlen(p) as isize);
                              cnt = 0;
                              while p <= q {
                                if *p as libc::c_int == '\n' as i32 {
                                  cnt += 1
                                }
                                p = p.offset(1)
                              }
                              status_line(
                                b"%s %u lines (%u chars) using [%c]\x00" as *const u8
                                  as *const libc::c_char,
                                buf.as_mut_ptr(),
                                cnt,
                                strlen((*ptr_to_globals).reg[(*ptr_to_globals).YDreg as usize])
                                  as libc::c_uint,
                                what_reg() as libc::c_int,
                              );
                              end_cmd_q();
                              current_block = 15129665204879337069;
                            }
                          } else {
                            current_block = 15129665204879337069;
                          }
                        }
                        5591548203144509315 => {
                          current_block = 2636677179867529885;
                        }
                        _ => {}
                      }
                      match current_block {
                        15129665204879337069 => {}
                        8629930936610358348 => {}
                        _ => {
                          match current_block {
                            2636677179867529885 => {
                              current_block = 12309206730560524281;
                            }
                            _ => {}
                          }
                          match current_block {
                            12309206730560524281 => {
                              current_block = 3325768110057758661;
                            }
                            _ => {}
                          }
                          match current_block {
                            3325768110057758661 => {
                              current_block = 14815832896553429982;
                            }
                            _ => {}
                          }
                          match current_block {
                            14815832896553429982 => {
                              current_block = 10731695520297161438;
                            }
                            _ => {}
                          }
                          match current_block {
                            10731695520297161438 => {
                              if c == '0' as i32 && (*ptr_to_globals).cmdcnt < 1i32 {
                                dot_begin();
                              } else {
                                (*ptr_to_globals).cmdcnt =
                                  (*ptr_to_globals).cmdcnt * 10i32 + (c - '0' as i32)
                              }
                              current_block = 15129665204879337069;
                            }
                            _ => {}
                          }
                          match current_block {
                            15129665204879337069 => {}
                            _ => {
                              loop {
                                match current_block {
                                  16813369756331276724 => {
                                    msg = std::ptr::null();
                                    current_block = 7392824444931029276;
                                  }
                                  7392824444931029276 => {
                                    dir = FORWARD as libc::c_int;
                                    p = (*ptr_to_globals).dot.offset(1);
                                    if *(*ptr_to_globals).last_search_pattern.offset(0)
                                      as libc::c_int
                                      == '?' as i32
                                    {
                                      dir = BACK as libc::c_int;
                                      p = (*ptr_to_globals).dot.offset(-1)
                                    }
                                    current_block = 4166979493554389389;
                                  }
                                  _ => {
                                    q = char_search(
                                      p,
                                      (*ptr_to_globals).last_search_pattern.offset(1),
                                      dir << 1i32 | FULL as libc::c_int,
                                    );
                                    if !q.is_null() {
                                      (*ptr_to_globals).dot = q;
                                      msg = std::ptr::null()
                                    } else {
                                      p = (*ptr_to_globals).text;
                                      if dir == BACK as libc::c_int {
                                        p = (*ptr_to_globals).end.offset(-1)
                                      }
                                      q = char_search(
                                        p,
                                        (*ptr_to_globals).last_search_pattern.offset(1),
                                        dir << 1i32 | FULL as libc::c_int,
                                      );
                                      if !q.is_null() {
                                        (*ptr_to_globals).dot = q;
                                        msg = b"search hit BOTTOM, continuing at TOP\x00"
                                          as *const u8
                                          as *const libc::c_char;
                                        if dir == BACK as libc::c_int {
                                          msg = b"search hit TOP, continuing at BOTTOM\x00"
                                            as *const u8
                                            as *const libc::c_char
                                        }
                                      } else {
                                        msg = b"Pattern not found\x00" as *const u8
                                          as *const libc::c_char
                                      }
                                    }
                                    if !msg.is_null() {
                                      status_line_bold(
                                        b"%s\x00" as *const u8 as *const libc::c_char,
                                        msg,
                                      );
                                    }
                                    (*ptr_to_globals).cmdcnt -= 1;
                                    if (*ptr_to_globals).cmdcnt > 0 {
                                      current_block = 16813369756331276724;
                                    } else {
                                      break;
                                    }
                                  }
                                }
                              }
                              current_block = 15129665204879337069;
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
        71 => {
          current_block = 11945623545738147997;
          match current_block {
            16992905640583886232 => {
              loop {
                if (*(*ptr_to_globals).dot as libc::c_int - 'a' as i32) as libc::c_uchar
                  as libc::c_int
                  <= 'z' as i32 - 'a' as i32
                {
                  undo_push(
                    (*ptr_to_globals).dot,
                    1i32 as libc::c_uint,
                    1i32 as libc::c_uchar,
                  );
                  *(*ptr_to_globals).dot =
                    bb_ascii_toupper(*(*ptr_to_globals).dot as libc::c_uchar) as libc::c_char;
                  undo_push(
                    (*ptr_to_globals).dot,
                    1i32 as libc::c_uint,
                    2i32 as libc::c_uchar,
                  );
                } else if (*(*ptr_to_globals).dot as libc::c_int - 'A' as i32) as libc::c_uchar
                  as libc::c_int
                  <= 'Z' as i32 - 'A' as i32
                {
                  undo_push(
                    (*ptr_to_globals).dot,
                    1i32 as libc::c_uint,
                    1i32 as libc::c_uchar,
                  );
                  *(*ptr_to_globals).dot =
                    bb_ascii_tolower(*(*ptr_to_globals).dot as libc::c_uchar) as libc::c_char;
                  undo_push(
                    (*ptr_to_globals).dot,
                    1i32 as libc::c_uint,
                    2i32 as libc::c_uchar,
                  );
                }
                dot_right();
                (*ptr_to_globals).cmdcnt -= 1;
                if !((*ptr_to_globals).cmdcnt > 0) {
                  break;
                }
              }
              end_cmd_q();
              current_block = 15129665204879337069;
            }
            8729655159604064397 => {
              c1 = get_one_char();
              cnt = 0;
              if c1 == '.' as i32 {
                cnt = (*ptr_to_globals)
                  .rows
                  .wrapping_sub(2i32 as libc::c_uint)
                  .wrapping_div(2i32 as libc::c_uint) as libc::c_int
              }
              if c1 == '-' as i32 {
                cnt = (*ptr_to_globals).rows.wrapping_sub(2i32 as libc::c_uint) as libc::c_int
              }
              (*ptr_to_globals).screenbegin = begin_line((*ptr_to_globals).dot);
              dot_scroll(cnt, -1i32);
              current_block = 15129665204879337069;
            }
            15899500648299942075 => {
              (*ptr_to_globals).last_forward_char = get_one_char();
              do_cmd(';' as i32);
              if *(*ptr_to_globals).dot as libc::c_int == (*ptr_to_globals).last_forward_char {
                dot_left();
              }
              (*ptr_to_globals).last_forward_char = 0;
              current_block = 15129665204879337069;
            }
            9051390181078481641 => {
              c1 = get_one_char();
              if *(*ptr_to_globals).dot as libc::c_int != '\n' as i32 {
                (*ptr_to_globals).dot =
                  text_hole_delete((*ptr_to_globals).dot, (*ptr_to_globals).dot, 1i32);
                (*ptr_to_globals).dot =
                  char_insert((*ptr_to_globals).dot, c1 as libc::c_char, 2i32);
                dot_left();
              }
              end_cmd_q();
              current_block = 15129665204879337069;
            }
            877115918601926659 => {
              dir = FORWARD as libc::c_int;
              if c == 'b' as i32 {
                dir = BACK as libc::c_int
              }
              while !((*ptr_to_globals).dot.offset(dir as isize) < (*ptr_to_globals).text
                || (*ptr_to_globals).dot.offset(dir as isize) > (*ptr_to_globals).end.offset(-1))
              {
                (*ptr_to_globals).dot = (*ptr_to_globals).dot.offset(dir as isize);
                if ({
                  let mut bb__isspace: libc::c_uchar =
                    (*(*ptr_to_globals).dot as libc::c_int - 9i32) as libc::c_uchar;
                  (bb__isspace as libc::c_int == ' ' as i32 - 9i32
                    || bb__isspace as libc::c_int <= 13i32 - 9i32) as libc::c_int
                }) != 0
                {
                  (*ptr_to_globals).dot = skip_thing(
                    (*ptr_to_globals).dot,
                    if c == 'e' as i32 { 2i32 } else { 1i32 },
                    dir,
                    S_OVER_WS as libc::c_int,
                  )
                }
                if bb_ascii_isalnum(*(*ptr_to_globals).dot as libc::c_uchar) != 0
                  || *(*ptr_to_globals).dot as libc::c_int == '_' as i32
                {
                  (*ptr_to_globals).dot =
                    skip_thing((*ptr_to_globals).dot, 1i32, dir, S_END_ALNUM as libc::c_int)
                } else if *strchrnul(
                  b"!\"#$%&\'()*+,-./:;<=>?@[\\]^_`{|}~\x00" as *const u8 as *const libc::c_char,
                  *(*ptr_to_globals).dot as libc::c_int,
                )
                .offset(0)
                  != 0
                {
                  (*ptr_to_globals).dot =
                    skip_thing((*ptr_to_globals).dot, 1i32, dir, S_END_PUNCT as libc::c_int)
                }
                (*ptr_to_globals).cmdcnt -= 1;
                if !((*ptr_to_globals).cmdcnt > 0) {
                  break;
                }
              }
              current_block = 15129665204879337069;
            }
            1085022737867179637 => {
              dot_begin();
              dot_skip_over_ws();
              current_block = 15129665204879337069;
            }
            3113147720494587438 => {
              c1 = get_one_char();
              if c1 != 'Z' as i32 {
                indicate_error();
              } else if (*ptr_to_globals).modified_count != 0 {
                if 1i32 != 0 && (*ptr_to_globals).readonly_mode as libc::c_int != 0 {
                  status_line_bold(
                    b"\'%s\' is read only\x00" as *const u8 as *const libc::c_char,
                    (*ptr_to_globals).current_filename,
                  );
                } else {
                  cnt = file_write(
                    (*ptr_to_globals).current_filename,
                    (*ptr_to_globals).text,
                    (*ptr_to_globals).end.offset(-1),
                  );
                  if cnt < 0 {
                    if cnt == -1i32 {
                      status_line_bold(b"Write error: %m\x00" as *const u8 as *const libc::c_char);
                    }
                  } else if cnt as libc::c_long
                    == (*ptr_to_globals)
                      .end
                      .offset(-1)
                      .wrapping_offset_from((*ptr_to_globals).text)
                      as libc::c_long
                      + 1
                  {
                    (*ptr_to_globals).editing = 0 as smallint
                  }
                }
              } else {
                (*ptr_to_globals).editing = 0 as smallint
              }
              current_block = 15129665204879337069;
            }
            12960118908218882441 => {
              p = begin_line((*ptr_to_globals).dot);
              if *p.offset(-1i32 as isize) as libc::c_int == '\n' as i32 {
                dot_prev();
                current_block = 2087484904894455135;
              } else {
                dot_begin();
                (*ptr_to_globals).dot =
                  char_insert((*ptr_to_globals).dot, '\n' as i32 as libc::c_char, 1i32);
                dot_prev();
                current_block = 8629930936610358348;
              }
            }
            8720450212473544924 => {
              (*ptr_to_globals).dot = (*ptr_to_globals).screenbegin;
              cnt = 0;
              while (cnt as libc::c_uint)
                < (*ptr_to_globals)
                  .rows
                  .wrapping_sub(1i32 as libc::c_uint)
                  .wrapping_div(2i32 as libc::c_uint)
              {
                (*ptr_to_globals).dot = next_line((*ptr_to_globals).dot);
                cnt += 1
              }
              current_block = 15129665204879337069;
            }
            13015277209715431090 => {
              (*ptr_to_globals).dot = end_screen();
              if (*ptr_to_globals).cmdcnt as libc::c_uint
                > (*ptr_to_globals).rows.wrapping_sub(1i32 as libc::c_uint)
              {
                (*ptr_to_globals).cmdcnt =
                  (*ptr_to_globals).rows.wrapping_sub(1i32 as libc::c_uint) as libc::c_int
              }
              (*ptr_to_globals).cmdcnt -= 1;
              if (*ptr_to_globals).cmdcnt > 0 {
                do_cmd('-' as i32);
              }
              dot_begin();
              dot_skip_over_ws();
              current_block = 15129665204879337069;
            }
            9800435767766781385 => {
              loop {
                dot_end();
                if (*ptr_to_globals).dot < (*ptr_to_globals).end.offset(-1) {
                  undo_push(
                    (*ptr_to_globals).dot,
                    1i32 as libc::c_uint,
                    1i32 as libc::c_uchar,
                  );
                  let fresh15 = (*ptr_to_globals).dot;
                  (*ptr_to_globals).dot = (*ptr_to_globals).dot.offset(1);
                  *fresh15 = ' ' as i32 as libc::c_char;
                  undo_push(
                    (*ptr_to_globals).dot.offset(-1),
                    1i32 as libc::c_uint,
                    2i32 as libc::c_uchar,
                  );
                  while ({
                    let mut bb__isblank: libc::c_uchar = *(*ptr_to_globals).dot as libc::c_uchar;
                    (bb__isblank as libc::c_int == ' ' as i32
                      || bb__isblank as libc::c_int == '\t' as i32)
                      as libc::c_int
                  }) != 0
                  {
                    text_hole_delete((*ptr_to_globals).dot, (*ptr_to_globals).dot, 2i32);
                  }
                }
                (*ptr_to_globals).cmdcnt -= 1;
                if !((*ptr_to_globals).cmdcnt > 0) {
                  break;
                }
              }
              end_cmd_q();
              current_block = 15129665204879337069;
            }
            3432363526595694666 => {
              dot_begin();
              dot_skip_over_ws();
              current_block = 3268579060917229304;
            }
            3494829253343353619 => {
              (*ptr_to_globals).dot = (*ptr_to_globals).screenbegin;
              if (*ptr_to_globals).cmdcnt as libc::c_uint
                > (*ptr_to_globals).rows.wrapping_sub(1i32 as libc::c_uint)
              {
                (*ptr_to_globals).cmdcnt =
                  (*ptr_to_globals).rows.wrapping_sub(1i32 as libc::c_uint) as libc::c_int
              }
              (*ptr_to_globals).cmdcnt -= 1;
              if (*ptr_to_globals).cmdcnt > 0 {
                do_cmd('+' as i32);
              }
              dot_skip_over_ws();
              current_block = 15129665204879337069;
            }
            17973101765331640574 => {
              c1 = get_one_char();
              if c1 != 'g' as i32 {
                buf[0] = 'g' as i32 as libc::c_char;
                buf[1] = if c1 >= 0 { c1 } else { '*' as i32 } as libc::c_char;
                buf[2] = '\u{0}' as i32 as libc::c_char;
                not_implemented(buf.as_mut_ptr());
                current_block = 15129665204879337069;
              } else {
                if (*ptr_to_globals).cmdcnt == 0 {
                  (*ptr_to_globals).cmdcnt = 1i32
                }
                current_block = 11945623545738147997;
              }
            }
            16546625800574160972 => {
              save_dot = (*ptr_to_globals).dot;
              (*ptr_to_globals).dot = dollar_line((*ptr_to_globals).dot);
              (*ptr_to_globals).dot = yank_delete(
                save_dot,
                (*ptr_to_globals).dot,
                0,
                YANKDEL as libc::c_int,
                1i32,
              );
              if c == 'C' as i32 {
                current_block = 8629930936610358348;
              } else {
                if c == 'D' as i32 {
                  end_cmd_q();
                }
                current_block = 15129665204879337069;
              }
            }
            11937696639986586685 => {
              cnt = count_lines((*ptr_to_globals).text, (*ptr_to_globals).dot);
              c1 = get_one_char();
              find_range(&mut p, &mut q, c1 as libc::c_char);
              yank_delete(p, q, 1i32, YANKONLY as libc::c_int, 0);
              p = begin_line(p);
              q = end_line(q);
              i = count_lines(p, q);
              while i > 0 {
                if c == '<' as i32 {
                  if *p as libc::c_int == '\t' as i32 {
                    text_hole_delete(p, p, 0);
                  } else if *p as libc::c_int == ' ' as i32 {
                    j = 0;
                    while *p as libc::c_int == ' ' as i32 && j < (*ptr_to_globals).tabstop {
                      text_hole_delete(p, p, 0);
                      j += 1
                    }
                  }
                } else if c == '>' as i32 {
                  char_insert(p, '\t' as i32 as libc::c_char, 1i32);
                }
                i -= 1;
                p = next_line(p)
              }
              (*ptr_to_globals).dot = find_line(cnt);
              dot_skip_over_ws();
              end_cmd_q();
              current_block = 15129665204879337069;
            }
            17725350714912028156 => {
              p = get_input_line(b":\x00" as *const u8 as *const libc::c_char);
              colon(p);
              current_block = 15129665204879337069;
            }
            14526470074083880812 => {
              q = char_search(
                (*ptr_to_globals).dot,
                b"\n\n\x00" as *const u8 as *const libc::c_char,
                (FORWARD as libc::c_int) << 1i32 | FULL as libc::c_int,
              );
              if !q.is_null() {
                (*ptr_to_globals).dot = next_line(q)
              }
              current_block = 15129665204879337069;
            }
            8893187391306414141 => {
              q = char_search(
                (*ptr_to_globals).dot,
                b"\n\n\x00" as *const u8 as *const libc::c_char,
                ((BACK as libc::c_int as libc::c_uint) << 1i32
                  | FULL as libc::c_int as libc::c_uint) as libc::c_int,
              );
              if !q.is_null() {
                (*ptr_to_globals).dot = next_line(q)
              }
              current_block = 15129665204879337069;
            }
            7021673758293221412 => {
              dir = BACK as libc::c_int;
              p = (*ptr_to_globals).dot.offset(-1);
              if *(*ptr_to_globals).last_search_pattern.offset(0) as libc::c_int == '?' as i32 {
                dir = FORWARD as libc::c_int;
                p = (*ptr_to_globals).dot.offset(1)
              }
              current_block = 4166979493554389389;
            }
            18374191879090272823 => {
              buf[0] = c as libc::c_char;
              buf[1] = '\u{0}' as i32 as libc::c_char;
              q = get_input_line(buf.as_mut_ptr());
              if *q.offset(0) as libc::c_int != 0 && *q.offset(1) == 0 {
                if *(*ptr_to_globals).last_search_pattern.offset(0) != 0 {
                  *(*ptr_to_globals).last_search_pattern.offset(0) = c as libc::c_char
                }
                current_block = 7392824444931029276;
              } else if *q.offset(0) != 0 {
                free((*ptr_to_globals).last_search_pattern as *mut libc::c_void);
                (*ptr_to_globals).last_search_pattern = crate::libbb::xfuncs_printf::xstrdup(q);
                current_block = 7392824444931029276;
              } else {
                current_block = 15129665204879337069;
              }
            }
            16407828456666301883 => {
              if (*ptr_to_globals).last_forward_char == 0 {
                current_block = 15129665204879337069;
              } else {
                loop {
                  q = (*ptr_to_globals).dot.offset(-1);
                  while q >= (*ptr_to_globals).text
                    && *q as libc::c_int != '\n' as i32
                    && *q as libc::c_int != (*ptr_to_globals).last_forward_char
                  {
                    q = q.offset(-1)
                  }
                  if q >= (*ptr_to_globals).text
                    && *q as libc::c_int == (*ptr_to_globals).last_forward_char
                  {
                    (*ptr_to_globals).dot = q
                  }
                  (*ptr_to_globals).cmdcnt -= 1;
                  if !((*ptr_to_globals).cmdcnt > 0) {
                    break;
                  }
                }
                current_block = 15129665204879337069;
              }
            }
            9018432604062702004 => {
              q = (*ptr_to_globals).dot;
              while q < (*ptr_to_globals).end && *q as libc::c_int != '\n' as i32 {
                if !strchr(
                  b"()[]{}\x00" as *const u8 as *const libc::c_char,
                  *q as libc::c_int,
                )
                .is_null()
                {
                  p = find_pair(q, *q);
                  if p.is_null() {
                    indicate_error();
                  } else {
                    (*ptr_to_globals).dot = p
                  }
                  break;
                } else {
                  q = q.offset(1)
                }
              }
              if *q as libc::c_int == '\n' as i32 {
                indicate_error();
              }
              current_block = 15129665204879337069;
            }
            10247103787464459848 => {
              p = (*ptr_to_globals).reg[(*ptr_to_globals).YDreg as usize];
              if p.is_null() {
                status_line_bold(
                  b"Nothing in register %c\x00" as *const u8 as *const libc::c_char,
                  what_reg() as libc::c_int,
                );
              } else {
                if !strchr(p, '\n' as i32).is_null() {
                  if c == 'P' as i32 {
                    dot_begin();
                  }
                  if c == 'p' as i32 {
                    if end_line((*ptr_to_globals).dot) == (*ptr_to_globals).end.offset(-1) {
                      (*ptr_to_globals).dot = (*ptr_to_globals).end
                    } else {
                      dot_next();
                    }
                  }
                } else if c == 'p' as i32 {
                  dot_right();
                }
                string_insert((*ptr_to_globals).dot, p, 1i32);
                end_cmd_q();
              }
              current_block = 15129665204879337069;
            }
            15260732871948875843 => {
              c1 = (get_one_char() | 0x20i32) - 'a' as i32;
              if c1 as libc::c_uint <= 25i32 as libc::c_uint {
                (*ptr_to_globals).mark[c1 as usize] = (*ptr_to_globals).dot
              } else {
                indicate_error();
              }
              current_block = 15129665204879337069;
            }
            12738322036487086035 => {
              c1 = get_one_char() | 0x20i32;
              if (c1 - 'a' as i32) as libc::c_uint <= 25i32 as libc::c_uint {
                c1 = c1 - 'a' as i32;
                q = (*ptr_to_globals).mark[c1 as usize];
                if (*ptr_to_globals).text <= q && q < (*ptr_to_globals).end {
                  (*ptr_to_globals).dot = q;
                  dot_begin();
                  dot_skip_over_ws();
                }
              } else if c1 == '\'' as i32 {
                (*ptr_to_globals).dot = swap_context((*ptr_to_globals).dot);
                dot_begin();
                dot_skip_over_ws();
              } else {
                indicate_error();
              }
              current_block = 15129665204879337069;
            }
            13255096073384561358 => {
              c1 = (get_one_char() | 0x20i32) - 'a' as i32;
              if c1 as libc::c_uint <= 25i32 as libc::c_uint {
                (*ptr_to_globals).YDreg = c1 as smalluint
              } else {
                indicate_error();
              }
              current_block = 15129665204879337069;
            }
            10258711639984089377 => {
              if (*ptr_to_globals).cmd_mode as libc::c_int == 0 {
                indicate_error();
              }
              (*ptr_to_globals).cmd_mode = 0 as smallint;
              undo_queue_commit();
              end_cmd_q();
              (*ptr_to_globals).last_status_cksum = 0;
              current_block = 15129665204879337069;
            }
            11439127087547047736 => {
              buf[0] = c as libc::c_char;
              buf[1] = '\u{0}' as i32 as libc::c_char;
              not_implemented(buf.as_mut_ptr());
              end_cmd_q();
              current_block = 17440971994642376514;
            }
            7961798899781870241 => {
              dot_scroll(
                (*ptr_to_globals).rows.wrapping_sub(2i32 as libc::c_uint) as libc::c_int,
                -1i32,
              );
              current_block = 15129665204879337069;
            }
            9426343755402444879 => {
              dot_scroll(
                (*ptr_to_globals)
                  .rows
                  .wrapping_sub(2i32 as libc::c_uint)
                  .wrapping_div(2i32 as libc::c_uint) as libc::c_int,
                1i32,
              );
              current_block = 15129665204879337069;
            }
            13352459794680105913 => {
              dot_scroll(1i32, 1i32);
              current_block = 15129665204879337069;
            }
            14142272253464333006 => {
              dot_scroll(
                (*ptr_to_globals).rows.wrapping_sub(2i32 as libc::c_uint) as libc::c_int,
                1i32,
              );
              current_block = 15129665204879337069;
            }
            10758177197742640066 => {
              (*ptr_to_globals).last_status_cksum = 0;
              current_block = 15129665204879337069;
            }
            6152256259730122749 => {
              current_block = 7534742345255184552;
            }
            12883932598258173301 => {
              current_block = 8800996768013373992;
            }
            11242998110520238401 => {
              redraw(1i32);
              current_block = 15129665204879337069;
            }
            13619733043935729992 => {
              loop {
                dot_next();
                dot_skip_over_ws();
                (*ptr_to_globals).cmdcnt -= 1;
                if !((*ptr_to_globals).cmdcnt > 0) {
                  break;
                }
              }
              current_block = 15129665204879337069;
            }
            9339065157412720613 => {
              dot_scroll(
                (*ptr_to_globals)
                  .rows
                  .wrapping_sub(2i32 as libc::c_uint)
                  .wrapping_div(2i32 as libc::c_uint) as libc::c_int,
                -1i32,
              );
              current_block = 15129665204879337069;
            }
            11447082683497798022 => {
              dot_scroll(1i32, -1i32);
              current_block = 15129665204879337069;
            }
            5182000506326660482 => {
              current_block = 13993698454868426881;
            }
            1105010766850597332 => {
              if !(*ptr_to_globals).reg[27].is_null() {
                p = begin_line((*ptr_to_globals).dot);
                q = end_line((*ptr_to_globals).dot);
                p = text_hole_delete(p, q, 1i32);
                p = p.offset(string_insert(p, (*ptr_to_globals).reg[27], 2i32) as isize);
                (*ptr_to_globals).dot = p;
                dot_skip_over_ws();
              }
              current_block = 15129665204879337069;
            }
            8616046655533110204 => {
              undo_pop();
              current_block = 15129665204879337069;
            }
            5127767458142431603 => {
              loop {
                (*ptr_to_globals).dot = end_line((*ptr_to_globals).dot);
                (*ptr_to_globals).cmdcnt -= 1;
                if (*ptr_to_globals).cmdcnt <= 0 {
                  break;
                }
                dot_next();
              }
              current_block = 15129665204879337069;
            }
            222014967776118151 => {
              (*ptr_to_globals).last_forward_char = get_one_char();
              current_block = 7856905509180742666;
            }
            11209792479411604110 => {
              loop {
                dot_prev();
                dot_skip_over_ws();
                (*ptr_to_globals).cmdcnt -= 1;
                if !((*ptr_to_globals).cmdcnt > 0) {
                  break;
                }
              }
              current_block = 15129665204879337069;
            }
            3364823792826654116 => {
              if (*ptr_to_globals).lmc_len != 0 {
                (*ptr_to_globals).ioq_start = crate::libbb::xfuncs_printf::xstrndup(
                  (*ptr_to_globals).last_modifying_cmd.as_mut_ptr(),
                  (*ptr_to_globals).lmc_len,
                );
                (*ptr_to_globals).ioq = (*ptr_to_globals).ioq_start
              }
              current_block = 15129665204879337069;
            }
            18096603330221575131 => {
              current_block = 17498168302144015873;
            }
            16891123271837848903 => {
              dot_end();
              current_block = 1752638907092016026;
            }
            8517235759107662071 => {
              current_block = 5847749760081351726;
            }
            12525254419223051704 => {
              if (*ptr_to_globals).dot < (*ptr_to_globals).end.offset(-1) {
                (*ptr_to_globals).dot = yank_delete(
                  (*ptr_to_globals).dot,
                  (*ptr_to_globals).dot,
                  1i32,
                  YANKDEL as libc::c_int,
                  1i32,
                )
              }
              current_block = 15129665204879337069;
            }
            15232911949322867522 => {
              current_block = 17251831742223396249;
            }
            10863374208794025069 => {
              current_block = 1895262434596074581;
            }
            451126677064669119 => {
              loop {
                dot_prev();
                (*ptr_to_globals).dot = move_to_col(
                  (*ptr_to_globals).dot,
                  (*ptr_to_globals).ccol + (*ptr_to_globals).offset,
                );
                (*ptr_to_globals).cmdcnt -= 1;
                if !((*ptr_to_globals).cmdcnt > 0) {
                  break;
                }
              }
              current_block = 15129665204879337069;
            }
            4611735929166613116 => {
              loop {
                if bb_ascii_isalnum(*(*ptr_to_globals).dot as libc::c_uchar) != 0
                  || *(*ptr_to_globals).dot as libc::c_int == '_' as i32
                {
                  (*ptr_to_globals).dot = skip_thing(
                    (*ptr_to_globals).dot,
                    1i32,
                    FORWARD as libc::c_int,
                    S_END_ALNUM as libc::c_int,
                  )
                } else if *strchrnul(
                  b"!\"#$%&\'()*+,-./:;<=>?@[\\]^_`{|}~\x00" as *const u8 as *const libc::c_char,
                  *(*ptr_to_globals).dot as libc::c_int,
                )
                .offset(0)
                  != 0
                {
                  (*ptr_to_globals).dot = skip_thing(
                    (*ptr_to_globals).dot,
                    1i32,
                    FORWARD as libc::c_int,
                    S_END_PUNCT as libc::c_int,
                  )
                }
                if (*ptr_to_globals).dot < (*ptr_to_globals).end.offset(-1) {
                  (*ptr_to_globals).dot = (*ptr_to_globals).dot.offset(1)
                }
                if ({
                  let mut bb__isspace: libc::c_uchar =
                    (*(*ptr_to_globals).dot as libc::c_int - 9i32) as libc::c_uchar;
                  (bb__isspace as libc::c_int == ' ' as i32 - 9i32
                    || bb__isspace as libc::c_int <= 13i32 - 9i32) as libc::c_int
                }) != 0
                {
                  (*ptr_to_globals).dot = skip_thing(
                    (*ptr_to_globals).dot,
                    2i32,
                    FORWARD as libc::c_int,
                    S_OVER_WS as libc::c_int,
                  )
                }
                (*ptr_to_globals).cmdcnt -= 1;
                if !((*ptr_to_globals).cmdcnt > 0) {
                  break;
                }
              }
              current_block = 15129665204879337069;
            }
            4386451087681909888 => {
              (*ptr_to_globals).dot =
                move_to_col((*ptr_to_globals).dot, (*ptr_to_globals).cmdcnt - 1i32);
              current_block = 15129665204879337069;
            }
            1296397779060594135 => {
              dot_begin();
              current_block = 15129665204879337069;
            }
            _ => {}
          }
          match current_block {
            15129665204879337069 => {}
            8629930936610358348 => {}
            _ => {
              match current_block {
                17251831742223396249 => {
                  dir = 0;
                  if c == 'X' as i32 {
                    dir = -1i32
                  }
                  loop {
                    if *(*ptr_to_globals).dot.offset(dir as isize) as libc::c_int != '\n' as i32 {
                      if c == 'X' as i32 {
                        (*ptr_to_globals).dot = (*ptr_to_globals).dot.offset(-1)
                      }
                      (*ptr_to_globals).dot = yank_delete(
                        (*ptr_to_globals).dot,
                        (*ptr_to_globals).dot,
                        0,
                        YANKDEL as libc::c_int,
                        1i32,
                      )
                    }
                    (*ptr_to_globals).cmdcnt -= 1;
                    if !((*ptr_to_globals).cmdcnt > 0) {
                      break;
                    }
                  }
                  end_cmd_q();
                  if c == 's' as i32 {
                    current_block = 8629930936610358348;
                  } else {
                    current_block = 15129665204879337069;
                  }
                }
                2087484904894455135 => {
                  dot_end();
                  (*ptr_to_globals).dot =
                    char_insert((*ptr_to_globals).dot, '\n' as i32 as libc::c_char, 1i32);
                  current_block = 8629930936610358348;
                }
                11945623545738147997 => {
                  (*ptr_to_globals).dot = (*ptr_to_globals).end.offset(-1);
                  if (*ptr_to_globals).cmdcnt > 0 {
                    (*ptr_to_globals).dot = find_line((*ptr_to_globals).cmdcnt)
                  }
                  dot_skip_over_ws();
                  current_block = 15129665204879337069;
                }
                5847749760081351726 => {
                  dir = FORWARD as libc::c_int;
                  if c == 'B' as i32 {
                    dir = BACK as libc::c_int
                  }
                  loop {
                    if c == 'W' as i32
                      || ({
                        let mut bb__isspace: libc::c_uchar =
                          (*(*ptr_to_globals).dot.offset(dir as isize) as libc::c_int - 9i32)
                            as libc::c_uchar;
                        (bb__isspace as libc::c_int == ' ' as i32 - 9i32
                          || bb__isspace as libc::c_int <= 13i32 - 9i32)
                          as libc::c_int
                      }) != 0
                    {
                      (*ptr_to_globals).dot =
                        skip_thing((*ptr_to_globals).dot, 1i32, dir, S_TO_WS as libc::c_int);
                      (*ptr_to_globals).dot =
                        skip_thing((*ptr_to_globals).dot, 2i32, dir, S_OVER_WS as libc::c_int)
                    }
                    if c != 'W' as i32 {
                      (*ptr_to_globals).dot =
                        skip_thing((*ptr_to_globals).dot, 1i32, dir, S_BEFORE_WS as libc::c_int)
                    }
                    (*ptr_to_globals).cmdcnt -= 1;
                    if !((*ptr_to_globals).cmdcnt > 0) {
                      break;
                    }
                  }
                  current_block = 15129665204879337069;
                }
                17440971994642376514 => {
                  current_block = 15129665204879337069;
                }
                7534742345255184552 => {
                  current_block = 17247297260531395789;
                }
                8800996768013373992 => {
                  loop {
                    dot_next();
                    (*ptr_to_globals).dot = move_to_col(
                      (*ptr_to_globals).dot,
                      (*ptr_to_globals).ccol + (*ptr_to_globals).offset,
                    );
                    (*ptr_to_globals).cmdcnt -= 1;
                    if !((*ptr_to_globals).cmdcnt > 0) {
                      break;
                    }
                  }
                  current_block = 15129665204879337069;
                }
                13993698454868426881 => {
                  loop {
                    dot_right();
                    (*ptr_to_globals).cmdcnt -= 1;
                    if !((*ptr_to_globals).cmdcnt > 0) {
                      break;
                    }
                  }
                  current_block = 15129665204879337069;
                }
                7856905509180742666 => {
                  while !((*ptr_to_globals).last_forward_char == 0) {
                    q = (*ptr_to_globals).dot.offset(1);
                    while q < (*ptr_to_globals).end.offset(-1)
                      && *q as libc::c_int != '\n' as i32
                      && *q as libc::c_int != (*ptr_to_globals).last_forward_char
                    {
                      q = q.offset(1)
                    }
                    if *q as libc::c_int == (*ptr_to_globals).last_forward_char {
                      (*ptr_to_globals).dot = q
                    }
                    (*ptr_to_globals).cmdcnt -= 1;
                    if !((*ptr_to_globals).cmdcnt > 0) {
                      break;
                    }
                  }
                  current_block = 15129665204879337069;
                }
                17498168302144015873 => {
                  current_block = 8681395796513813967;
                }
                1752638907092016026 => {
                  if *(*ptr_to_globals).dot as libc::c_int != '\n' as i32 {
                    (*ptr_to_globals).dot = (*ptr_to_globals).dot.offset(1)
                  }
                  current_block = 8629930936610358348;
                }
                3268579060917229304 => {
                  current_block = 8629930936610358348;
                }
                1895262434596074581 => {
                  current_block = 8908416993177701018;
                }
                _ => {}
              }
              match current_block {
                8629930936610358348 => {}
                15129665204879337069 => {}
                _ => {
                  match current_block {
                    17247297260531395789 => {
                      loop {
                        dot_left();
                        (*ptr_to_globals).cmdcnt -= 1;
                        if !((*ptr_to_globals).cmdcnt > 0) {
                          break;
                        }
                      }
                      current_block = 15129665204879337069;
                    }
                    8681395796513813967 => {
                      current_block = 5591548203144509315;
                    }
                    8908416993177701018 => {
                      current_block = 16124761010012532485;
                    }
                    _ => {}
                  }
                  match current_block {
                    15129665204879337069 => {}
                    _ => {
                      match current_block {
                        16124761010012532485 => {
                          let mut yf: libc::c_int = 0;
                          let mut ml: libc::c_int = 0;
                          let mut whole: libc::c_int = 0;
                          yf = YANKDEL as libc::c_int;
                          if c == 'y' as i32 || c == 'Y' as i32 {
                            yf = YANKONLY as libc::c_int
                          }
                          c1 = 'y' as i32;
                          if c != 'Y' as i32 {
                            c1 = get_one_char()
                          }
                          ml = find_range(&mut p, &mut q, c1 as libc::c_char);
                          place_cursor(0i32, 0);
                          if c1 == 27i32 {
                            c1 = 27i32;
                            c = c1
                          } else if !strchr(b"wW\x00" as *const u8 as *const libc::c_char, c1)
                            .is_null()
                          {
                            ml = 0;
                            if c == 'c' as i32 {
                              while ({
                                let mut bb__isspace: libc::c_uchar =
                                  (*q as libc::c_int - 9i32) as libc::c_uchar;
                                (bb__isspace as libc::c_int == ' ' as i32 - 9i32
                                  || bb__isspace as libc::c_int <= 13i32 - 9i32)
                                  as libc::c_int
                              }) != 0
                                && q > p
                              {
                                q = q.offset(-1)
                              }
                            }
                            (*ptr_to_globals).dot = yank_delete(p, q, ml, yf, 1i32)
                          } else if !strchr(
                            b"^0bBeEft%$ lh\x08\x7f\x00" as *const u8 as *const libc::c_char,
                            c1,
                          )
                          .is_null()
                          {
                            (*ptr_to_globals).dot = yank_delete(p, q, ml, yf, 1i32)
                          } else if !strchr(
                            b"cdykjGHL+-{}\r\n\x00" as *const u8 as *const libc::c_char,
                            c1,
                          )
                          .is_null()
                          {
                            (*ptr_to_globals).dot = yank_delete(p, q, ml, yf, 1i32);
                            whole = 1i32
                          } else {
                            c1 = 27i32;
                            c = c1;
                            ml = 0;
                            indicate_error();
                          }
                          if ml != 0 && whole != 0 {
                            if c == 'c' as i32 {
                              (*ptr_to_globals).dot = char_insert(
                                (*ptr_to_globals).dot,
                                '\n' as i32 as libc::c_char,
                                2i32,
                              );
                              if whole != 0
                                && (*ptr_to_globals).dot != (*ptr_to_globals).end.offset(-1)
                              {
                                dot_prev();
                              }
                            } else if c == 'd' as i32 {
                              dot_begin();
                              dot_skip_over_ws();
                            }
                          }
                          if c1 != 27i32 {
                            if c == 'c' as i32 {
                              strcpy(
                                buf.as_mut_ptr(),
                                b"Change\x00" as *const u8 as *const libc::c_char,
                              );
                              current_block = 8629930936610358348;
                            } else {
                              if c == 'd' as i32 {
                                strcpy(
                                  buf.as_mut_ptr(),
                                  b"Delete\x00" as *const u8 as *const libc::c_char,
                                );
                              }
                              if c == 'y' as i32 || c == 'Y' as i32 {
                                strcpy(
                                  buf.as_mut_ptr(),
                                  b"Yank\x00" as *const u8 as *const libc::c_char,
                                );
                              }
                              p = (*ptr_to_globals).reg[(*ptr_to_globals).YDreg as usize];
                              q = p.offset(strlen(p) as isize);
                              cnt = 0;
                              while p <= q {
                                if *p as libc::c_int == '\n' as i32 {
                                  cnt += 1
                                }
                                p = p.offset(1)
                              }
                              status_line(
                                b"%s %u lines (%u chars) using [%c]\x00" as *const u8
                                  as *const libc::c_char,
                                buf.as_mut_ptr(),
                                cnt,
                                strlen((*ptr_to_globals).reg[(*ptr_to_globals).YDreg as usize])
                                  as libc::c_uint,
                                what_reg() as libc::c_int,
                              );
                              end_cmd_q();
                              current_block = 15129665204879337069;
                            }
                          } else {
                            current_block = 15129665204879337069;
                          }
                        }
                        5591548203144509315 => {
                          current_block = 2636677179867529885;
                        }
                        _ => {}
                      }
                      match current_block {
                        15129665204879337069 => {}
                        8629930936610358348 => {}
                        _ => {
                          match current_block {
                            2636677179867529885 => {
                              current_block = 12309206730560524281;
                            }
                            _ => {}
                          }
                          match current_block {
                            12309206730560524281 => {
                              current_block = 3325768110057758661;
                            }
                            _ => {}
                          }
                          match current_block {
                            3325768110057758661 => {
                              current_block = 14815832896553429982;
                            }
                            _ => {}
                          }
                          match current_block {
                            14815832896553429982 => {
                              current_block = 10731695520297161438;
                            }
                            _ => {}
                          }
                          match current_block {
                            10731695520297161438 => {
                              if c == '0' as i32 && (*ptr_to_globals).cmdcnt < 1i32 {
                                dot_begin();
                              } else {
                                (*ptr_to_globals).cmdcnt =
                                  (*ptr_to_globals).cmdcnt * 10i32 + (c - '0' as i32)
                              }
                              current_block = 15129665204879337069;
                            }
                            _ => {}
                          }
                          match current_block {
                            15129665204879337069 => {}
                            _ => {
                              loop {
                                match current_block {
                                  16813369756331276724 => {
                                    msg = std::ptr::null();
                                    current_block = 7392824444931029276;
                                  }
                                  7392824444931029276 => {
                                    dir = FORWARD as libc::c_int;
                                    p = (*ptr_to_globals).dot.offset(1);
                                    if *(*ptr_to_globals).last_search_pattern.offset(0)
                                      as libc::c_int
                                      == '?' as i32
                                    {
                                      dir = BACK as libc::c_int;
                                      p = (*ptr_to_globals).dot.offset(-1)
                                    }
                                    current_block = 4166979493554389389;
                                  }
                                  _ => {
                                    q = char_search(
                                      p,
                                      (*ptr_to_globals).last_search_pattern.offset(1),
                                      dir << 1i32 | FULL as libc::c_int,
                                    );
                                    if !q.is_null() {
                                      (*ptr_to_globals).dot = q;
                                      msg = std::ptr::null()
                                    } else {
                                      p = (*ptr_to_globals).text;
                                      if dir == BACK as libc::c_int {
                                        p = (*ptr_to_globals).end.offset(-1)
                                      }
                                      q = char_search(
                                        p,
                                        (*ptr_to_globals).last_search_pattern.offset(1),
                                        dir << 1i32 | FULL as libc::c_int,
                                      );
                                      if !q.is_null() {
                                        (*ptr_to_globals).dot = q;
                                        msg = b"search hit BOTTOM, continuing at TOP\x00"
                                          as *const u8
                                          as *const libc::c_char;
                                        if dir == BACK as libc::c_int {
                                          msg = b"search hit TOP, continuing at BOTTOM\x00"
                                            as *const u8
                                            as *const libc::c_char
                                        }
                                      } else {
                                        msg = b"Pattern not found\x00" as *const u8
                                          as *const libc::c_char
                                      }
                                    }
                                    if !msg.is_null() {
                                      status_line_bold(
                                        b"%s\x00" as *const u8 as *const libc::c_char,
                                        msg,
                                      );
                                    }
                                    (*ptr_to_globals).cmdcnt -= 1;
                                    if (*ptr_to_globals).cmdcnt > 0 {
                                      current_block = 16813369756331276724;
                                    } else {
                                      break;
                                    }
                                  }
                                }
                              }
                              current_block = 15129665204879337069;
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
        72 => {
          current_block = 3494829253343353619;
          match current_block {
            16992905640583886232 => {
              loop {
                if (*(*ptr_to_globals).dot as libc::c_int - 'a' as i32) as libc::c_uchar
                  as libc::c_int
                  <= 'z' as i32 - 'a' as i32
                {
                  undo_push(
                    (*ptr_to_globals).dot,
                    1i32 as libc::c_uint,
                    1i32 as libc::c_uchar,
                  );
                  *(*ptr_to_globals).dot =
                    bb_ascii_toupper(*(*ptr_to_globals).dot as libc::c_uchar) as libc::c_char;
                  undo_push(
                    (*ptr_to_globals).dot,
                    1i32 as libc::c_uint,
                    2i32 as libc::c_uchar,
                  );
                } else if (*(*ptr_to_globals).dot as libc::c_int - 'A' as i32) as libc::c_uchar
                  as libc::c_int
                  <= 'Z' as i32 - 'A' as i32
                {
                  undo_push(
                    (*ptr_to_globals).dot,
                    1i32 as libc::c_uint,
                    1i32 as libc::c_uchar,
                  );
                  *(*ptr_to_globals).dot =
                    bb_ascii_tolower(*(*ptr_to_globals).dot as libc::c_uchar) as libc::c_char;
                  undo_push(
                    (*ptr_to_globals).dot,
                    1i32 as libc::c_uint,
                    2i32 as libc::c_uchar,
                  );
                }
                dot_right();
                (*ptr_to_globals).cmdcnt -= 1;
                if !((*ptr_to_globals).cmdcnt > 0) {
                  break;
                }
              }
              end_cmd_q();
              current_block = 15129665204879337069;
            }
            8729655159604064397 => {
              c1 = get_one_char();
              cnt = 0;
              if c1 == '.' as i32 {
                cnt = (*ptr_to_globals)
                  .rows
                  .wrapping_sub(2i32 as libc::c_uint)
                  .wrapping_div(2i32 as libc::c_uint) as libc::c_int
              }
              if c1 == '-' as i32 {
                cnt = (*ptr_to_globals).rows.wrapping_sub(2i32 as libc::c_uint) as libc::c_int
              }
              (*ptr_to_globals).screenbegin = begin_line((*ptr_to_globals).dot);
              dot_scroll(cnt, -1i32);
              current_block = 15129665204879337069;
            }
            15899500648299942075 => {
              (*ptr_to_globals).last_forward_char = get_one_char();
              do_cmd(';' as i32);
              if *(*ptr_to_globals).dot as libc::c_int == (*ptr_to_globals).last_forward_char {
                dot_left();
              }
              (*ptr_to_globals).last_forward_char = 0;
              current_block = 15129665204879337069;
            }
            9051390181078481641 => {
              c1 = get_one_char();
              if *(*ptr_to_globals).dot as libc::c_int != '\n' as i32 {
                (*ptr_to_globals).dot =
                  text_hole_delete((*ptr_to_globals).dot, (*ptr_to_globals).dot, 1i32);
                (*ptr_to_globals).dot =
                  char_insert((*ptr_to_globals).dot, c1 as libc::c_char, 2i32);
                dot_left();
              }
              end_cmd_q();
              current_block = 15129665204879337069;
            }
            877115918601926659 => {
              dir = FORWARD as libc::c_int;
              if c == 'b' as i32 {
                dir = BACK as libc::c_int
              }
              while !((*ptr_to_globals).dot.offset(dir as isize) < (*ptr_to_globals).text
                || (*ptr_to_globals).dot.offset(dir as isize) > (*ptr_to_globals).end.offset(-1))
              {
                (*ptr_to_globals).dot = (*ptr_to_globals).dot.offset(dir as isize);
                if ({
                  let mut bb__isspace: libc::c_uchar =
                    (*(*ptr_to_globals).dot as libc::c_int - 9i32) as libc::c_uchar;
                  (bb__isspace as libc::c_int == ' ' as i32 - 9i32
                    || bb__isspace as libc::c_int <= 13i32 - 9i32) as libc::c_int
                }) != 0
                {
                  (*ptr_to_globals).dot = skip_thing(
                    (*ptr_to_globals).dot,
                    if c == 'e' as i32 { 2i32 } else { 1i32 },
                    dir,
                    S_OVER_WS as libc::c_int,
                  )
                }
                if bb_ascii_isalnum(*(*ptr_to_globals).dot as libc::c_uchar) != 0
                  || *(*ptr_to_globals).dot as libc::c_int == '_' as i32
                {
                  (*ptr_to_globals).dot =
                    skip_thing((*ptr_to_globals).dot, 1i32, dir, S_END_ALNUM as libc::c_int)
                } else if *strchrnul(
                  b"!\"#$%&\'()*+,-./:;<=>?@[\\]^_`{|}~\x00" as *const u8 as *const libc::c_char,
                  *(*ptr_to_globals).dot as libc::c_int,
                )
                .offset(0)
                  != 0
                {
                  (*ptr_to_globals).dot =
                    skip_thing((*ptr_to_globals).dot, 1i32, dir, S_END_PUNCT as libc::c_int)
                }
                (*ptr_to_globals).cmdcnt -= 1;
                if !((*ptr_to_globals).cmdcnt > 0) {
                  break;
                }
              }
              current_block = 15129665204879337069;
            }
            1085022737867179637 => {
              dot_begin();
              dot_skip_over_ws();
              current_block = 15129665204879337069;
            }
            3113147720494587438 => {
              c1 = get_one_char();
              if c1 != 'Z' as i32 {
                indicate_error();
              } else if (*ptr_to_globals).modified_count != 0 {
                if 1i32 != 0 && (*ptr_to_globals).readonly_mode as libc::c_int != 0 {
                  status_line_bold(
                    b"\'%s\' is read only\x00" as *const u8 as *const libc::c_char,
                    (*ptr_to_globals).current_filename,
                  );
                } else {
                  cnt = file_write(
                    (*ptr_to_globals).current_filename,
                    (*ptr_to_globals).text,
                    (*ptr_to_globals).end.offset(-1),
                  );
                  if cnt < 0 {
                    if cnt == -1i32 {
                      status_line_bold(b"Write error: %m\x00" as *const u8 as *const libc::c_char);
                    }
                  } else if cnt as libc::c_long
                    == (*ptr_to_globals)
                      .end
                      .offset(-1)
                      .wrapping_offset_from((*ptr_to_globals).text)
                      as libc::c_long
                      + 1
                  {
                    (*ptr_to_globals).editing = 0 as smallint
                  }
                }
              } else {
                (*ptr_to_globals).editing = 0 as smallint
              }
              current_block = 15129665204879337069;
            }
            12960118908218882441 => {
              p = begin_line((*ptr_to_globals).dot);
              if *p.offset(-1i32 as isize) as libc::c_int == '\n' as i32 {
                dot_prev();
                current_block = 2087484904894455135;
              } else {
                dot_begin();
                (*ptr_to_globals).dot =
                  char_insert((*ptr_to_globals).dot, '\n' as i32 as libc::c_char, 1i32);
                dot_prev();
                current_block = 8629930936610358348;
              }
            }
            8720450212473544924 => {
              (*ptr_to_globals).dot = (*ptr_to_globals).screenbegin;
              cnt = 0;
              while (cnt as libc::c_uint)
                < (*ptr_to_globals)
                  .rows
                  .wrapping_sub(1i32 as libc::c_uint)
                  .wrapping_div(2i32 as libc::c_uint)
              {
                (*ptr_to_globals).dot = next_line((*ptr_to_globals).dot);
                cnt += 1
              }
              current_block = 15129665204879337069;
            }
            13015277209715431090 => {
              (*ptr_to_globals).dot = end_screen();
              if (*ptr_to_globals).cmdcnt as libc::c_uint
                > (*ptr_to_globals).rows.wrapping_sub(1i32 as libc::c_uint)
              {
                (*ptr_to_globals).cmdcnt =
                  (*ptr_to_globals).rows.wrapping_sub(1i32 as libc::c_uint) as libc::c_int
              }
              (*ptr_to_globals).cmdcnt -= 1;
              if (*ptr_to_globals).cmdcnt > 0 {
                do_cmd('-' as i32);
              }
              dot_begin();
              dot_skip_over_ws();
              current_block = 15129665204879337069;
            }
            9800435767766781385 => {
              loop {
                dot_end();
                if (*ptr_to_globals).dot < (*ptr_to_globals).end.offset(-1) {
                  undo_push(
                    (*ptr_to_globals).dot,
                    1i32 as libc::c_uint,
                    1i32 as libc::c_uchar,
                  );
                  let fresh15 = (*ptr_to_globals).dot;
                  (*ptr_to_globals).dot = (*ptr_to_globals).dot.offset(1);
                  *fresh15 = ' ' as i32 as libc::c_char;
                  undo_push(
                    (*ptr_to_globals).dot.offset(-1),
                    1i32 as libc::c_uint,
                    2i32 as libc::c_uchar,
                  );
                  while ({
                    let mut bb__isblank: libc::c_uchar = *(*ptr_to_globals).dot as libc::c_uchar;
                    (bb__isblank as libc::c_int == ' ' as i32
                      || bb__isblank as libc::c_int == '\t' as i32)
                      as libc::c_int
                  }) != 0
                  {
                    text_hole_delete((*ptr_to_globals).dot, (*ptr_to_globals).dot, 2i32);
                  }
                }
                (*ptr_to_globals).cmdcnt -= 1;
                if !((*ptr_to_globals).cmdcnt > 0) {
                  break;
                }
              }
              end_cmd_q();
              current_block = 15129665204879337069;
            }
            3432363526595694666 => {
              dot_begin();
              dot_skip_over_ws();
              current_block = 3268579060917229304;
            }
            3494829253343353619 => {
              (*ptr_to_globals).dot = (*ptr_to_globals).screenbegin;
              if (*ptr_to_globals).cmdcnt as libc::c_uint
                > (*ptr_to_globals).rows.wrapping_sub(1i32 as libc::c_uint)
              {
                (*ptr_to_globals).cmdcnt =
                  (*ptr_to_globals).rows.wrapping_sub(1i32 as libc::c_uint) as libc::c_int
              }
              (*ptr_to_globals).cmdcnt -= 1;
              if (*ptr_to_globals).cmdcnt > 0 {
                do_cmd('+' as i32);
              }
              dot_skip_over_ws();
              current_block = 15129665204879337069;
            }
            17973101765331640574 => {
              c1 = get_one_char();
              if c1 != 'g' as i32 {
                buf[0] = 'g' as i32 as libc::c_char;
                buf[1] = if c1 >= 0 { c1 } else { '*' as i32 } as libc::c_char;
                buf[2] = '\u{0}' as i32 as libc::c_char;
                not_implemented(buf.as_mut_ptr());
                current_block = 15129665204879337069;
              } else {
                if (*ptr_to_globals).cmdcnt == 0 {
                  (*ptr_to_globals).cmdcnt = 1i32
                }
                current_block = 11945623545738147997;
              }
            }
            16546625800574160972 => {
              save_dot = (*ptr_to_globals).dot;
              (*ptr_to_globals).dot = dollar_line((*ptr_to_globals).dot);
              (*ptr_to_globals).dot = yank_delete(
                save_dot,
                (*ptr_to_globals).dot,
                0,
                YANKDEL as libc::c_int,
                1i32,
              );
              if c == 'C' as i32 {
                current_block = 8629930936610358348;
              } else {
                if c == 'D' as i32 {
                  end_cmd_q();
                }
                current_block = 15129665204879337069;
              }
            }
            11937696639986586685 => {
              cnt = count_lines((*ptr_to_globals).text, (*ptr_to_globals).dot);
              c1 = get_one_char();
              find_range(&mut p, &mut q, c1 as libc::c_char);
              yank_delete(p, q, 1i32, YANKONLY as libc::c_int, 0);
              p = begin_line(p);
              q = end_line(q);
              i = count_lines(p, q);
              while i > 0 {
                if c == '<' as i32 {
                  if *p as libc::c_int == '\t' as i32 {
                    text_hole_delete(p, p, 0);
                  } else if *p as libc::c_int == ' ' as i32 {
                    j = 0;
                    while *p as libc::c_int == ' ' as i32 && j < (*ptr_to_globals).tabstop {
                      text_hole_delete(p, p, 0);
                      j += 1
                    }
                  }
                } else if c == '>' as i32 {
                  char_insert(p, '\t' as i32 as libc::c_char, 1i32);
                }
                i -= 1;
                p = next_line(p)
              }
              (*ptr_to_globals).dot = find_line(cnt);
              dot_skip_over_ws();
              end_cmd_q();
              current_block = 15129665204879337069;
            }
            17725350714912028156 => {
              p = get_input_line(b":\x00" as *const u8 as *const libc::c_char);
              colon(p);
              current_block = 15129665204879337069;
            }
            14526470074083880812 => {
              q = char_search(
                (*ptr_to_globals).dot,
                b"\n\n\x00" as *const u8 as *const libc::c_char,
                (FORWARD as libc::c_int) << 1i32 | FULL as libc::c_int,
              );
              if !q.is_null() {
                (*ptr_to_globals).dot = next_line(q)
              }
              current_block = 15129665204879337069;
            }
            8893187391306414141 => {
              q = char_search(
                (*ptr_to_globals).dot,
                b"\n\n\x00" as *const u8 as *const libc::c_char,
                ((BACK as libc::c_int as libc::c_uint) << 1i32
                  | FULL as libc::c_int as libc::c_uint) as libc::c_int,
              );
              if !q.is_null() {
                (*ptr_to_globals).dot = next_line(q)
              }
              current_block = 15129665204879337069;
            }
            7021673758293221412 => {
              dir = BACK as libc::c_int;
              p = (*ptr_to_globals).dot.offset(-1);
              if *(*ptr_to_globals).last_search_pattern.offset(0) as libc::c_int == '?' as i32 {
                dir = FORWARD as libc::c_int;
                p = (*ptr_to_globals).dot.offset(1)
              }
              current_block = 4166979493554389389;
            }
            18374191879090272823 => {
              buf[0] = c as libc::c_char;
              buf[1] = '\u{0}' as i32 as libc::c_char;
              q = get_input_line(buf.as_mut_ptr());
              if *q.offset(0) as libc::c_int != 0 && *q.offset(1) == 0 {
                if *(*ptr_to_globals).last_search_pattern.offset(0) != 0 {
                  *(*ptr_to_globals).last_search_pattern.offset(0) = c as libc::c_char
                }
                current_block = 7392824444931029276;
              } else if *q.offset(0) != 0 {
                free((*ptr_to_globals).last_search_pattern as *mut libc::c_void);
                (*ptr_to_globals).last_search_pattern = crate::libbb::xfuncs_printf::xstrdup(q);
                current_block = 7392824444931029276;
              } else {
                current_block = 15129665204879337069;
              }
            }
            16407828456666301883 => {
              if (*ptr_to_globals).last_forward_char == 0 {
                current_block = 15129665204879337069;
              } else {
                loop {
                  q = (*ptr_to_globals).dot.offset(-1);
                  while q >= (*ptr_to_globals).text
                    && *q as libc::c_int != '\n' as i32
                    && *q as libc::c_int != (*ptr_to_globals).last_forward_char
                  {
                    q = q.offset(-1)
                  }
                  if q >= (*ptr_to_globals).text
                    && *q as libc::c_int == (*ptr_to_globals).last_forward_char
                  {
                    (*ptr_to_globals).dot = q
                  }
                  (*ptr_to_globals).cmdcnt -= 1;
                  if !((*ptr_to_globals).cmdcnt > 0) {
                    break;
                  }
                }
                current_block = 15129665204879337069;
              }
            }
            9018432604062702004 => {
              q = (*ptr_to_globals).dot;
              while q < (*ptr_to_globals).end && *q as libc::c_int != '\n' as i32 {
                if !strchr(
                  b"()[]{}\x00" as *const u8 as *const libc::c_char,
                  *q as libc::c_int,
                )
                .is_null()
                {
                  p = find_pair(q, *q);
                  if p.is_null() {
                    indicate_error();
                  } else {
                    (*ptr_to_globals).dot = p
                  }
                  break;
                } else {
                  q = q.offset(1)
                }
              }
              if *q as libc::c_int == '\n' as i32 {
                indicate_error();
              }
              current_block = 15129665204879337069;
            }
            10247103787464459848 => {
              p = (*ptr_to_globals).reg[(*ptr_to_globals).YDreg as usize];
              if p.is_null() {
                status_line_bold(
                  b"Nothing in register %c\x00" as *const u8 as *const libc::c_char,
                  what_reg() as libc::c_int,
                );
              } else {
                if !strchr(p, '\n' as i32).is_null() {
                  if c == 'P' as i32 {
                    dot_begin();
                  }
                  if c == 'p' as i32 {
                    if end_line((*ptr_to_globals).dot) == (*ptr_to_globals).end.offset(-1) {
                      (*ptr_to_globals).dot = (*ptr_to_globals).end
                    } else {
                      dot_next();
                    }
                  }
                } else if c == 'p' as i32 {
                  dot_right();
                }
                string_insert((*ptr_to_globals).dot, p, 1i32);
                end_cmd_q();
              }
              current_block = 15129665204879337069;
            }
            15260732871948875843 => {
              c1 = (get_one_char() | 0x20i32) - 'a' as i32;
              if c1 as libc::c_uint <= 25i32 as libc::c_uint {
                (*ptr_to_globals).mark[c1 as usize] = (*ptr_to_globals).dot
              } else {
                indicate_error();
              }
              current_block = 15129665204879337069;
            }
            12738322036487086035 => {
              c1 = get_one_char() | 0x20i32;
              if (c1 - 'a' as i32) as libc::c_uint <= 25i32 as libc::c_uint {
                c1 = c1 - 'a' as i32;
                q = (*ptr_to_globals).mark[c1 as usize];
                if (*ptr_to_globals).text <= q && q < (*ptr_to_globals).end {
                  (*ptr_to_globals).dot = q;
                  dot_begin();
                  dot_skip_over_ws();
                }
              } else if c1 == '\'' as i32 {
                (*ptr_to_globals).dot = swap_context((*ptr_to_globals).dot);
                dot_begin();
                dot_skip_over_ws();
              } else {
                indicate_error();
              }
              current_block = 15129665204879337069;
            }
            13255096073384561358 => {
              c1 = (get_one_char() | 0x20i32) - 'a' as i32;
              if c1 as libc::c_uint <= 25i32 as libc::c_uint {
                (*ptr_to_globals).YDreg = c1 as smalluint
              } else {
                indicate_error();
              }
              current_block = 15129665204879337069;
            }
            10258711639984089377 => {
              if (*ptr_to_globals).cmd_mode as libc::c_int == 0 {
                indicate_error();
              }
              (*ptr_to_globals).cmd_mode = 0 as smallint;
              undo_queue_commit();
              end_cmd_q();
              (*ptr_to_globals).last_status_cksum = 0;
              current_block = 15129665204879337069;
            }
            11439127087547047736 => {
              buf[0] = c as libc::c_char;
              buf[1] = '\u{0}' as i32 as libc::c_char;
              not_implemented(buf.as_mut_ptr());
              end_cmd_q();
              current_block = 17440971994642376514;
            }
            7961798899781870241 => {
              dot_scroll(
                (*ptr_to_globals).rows.wrapping_sub(2i32 as libc::c_uint) as libc::c_int,
                -1i32,
              );
              current_block = 15129665204879337069;
            }
            9426343755402444879 => {
              dot_scroll(
                (*ptr_to_globals)
                  .rows
                  .wrapping_sub(2i32 as libc::c_uint)
                  .wrapping_div(2i32 as libc::c_uint) as libc::c_int,
                1i32,
              );
              current_block = 15129665204879337069;
            }
            13352459794680105913 => {
              dot_scroll(1i32, 1i32);
              current_block = 15129665204879337069;
            }
            14142272253464333006 => {
              dot_scroll(
                (*ptr_to_globals).rows.wrapping_sub(2i32 as libc::c_uint) as libc::c_int,
                1i32,
              );
              current_block = 15129665204879337069;
            }
            10758177197742640066 => {
              (*ptr_to_globals).last_status_cksum = 0;
              current_block = 15129665204879337069;
            }
            6152256259730122749 => {
              current_block = 7534742345255184552;
            }
            12883932598258173301 => {
              current_block = 8800996768013373992;
            }
            11242998110520238401 => {
              redraw(1i32);
              current_block = 15129665204879337069;
            }
            13619733043935729992 => {
              loop {
                dot_next();
                dot_skip_over_ws();
                (*ptr_to_globals).cmdcnt -= 1;
                if !((*ptr_to_globals).cmdcnt > 0) {
                  break;
                }
              }
              current_block = 15129665204879337069;
            }
            9339065157412720613 => {
              dot_scroll(
                (*ptr_to_globals)
                  .rows
                  .wrapping_sub(2i32 as libc::c_uint)
                  .wrapping_div(2i32 as libc::c_uint) as libc::c_int,
                -1i32,
              );
              current_block = 15129665204879337069;
            }
            11447082683497798022 => {
              dot_scroll(1i32, -1i32);
              current_block = 15129665204879337069;
            }
            5182000506326660482 => {
              current_block = 13993698454868426881;
            }
            1105010766850597332 => {
              if !(*ptr_to_globals).reg[27].is_null() {
                p = begin_line((*ptr_to_globals).dot);
                q = end_line((*ptr_to_globals).dot);
                p = text_hole_delete(p, q, 1i32);
                p = p.offset(string_insert(p, (*ptr_to_globals).reg[27], 2i32) as isize);
                (*ptr_to_globals).dot = p;
                dot_skip_over_ws();
              }
              current_block = 15129665204879337069;
            }
            8616046655533110204 => {
              undo_pop();
              current_block = 15129665204879337069;
            }
            5127767458142431603 => {
              loop {
                (*ptr_to_globals).dot = end_line((*ptr_to_globals).dot);
                (*ptr_to_globals).cmdcnt -= 1;
                if (*ptr_to_globals).cmdcnt <= 0 {
                  break;
                }
                dot_next();
              }
              current_block = 15129665204879337069;
            }
            222014967776118151 => {
              (*ptr_to_globals).last_forward_char = get_one_char();
              current_block = 7856905509180742666;
            }
            11209792479411604110 => {
              loop {
                dot_prev();
                dot_skip_over_ws();
                (*ptr_to_globals).cmdcnt -= 1;
                if !((*ptr_to_globals).cmdcnt > 0) {
                  break;
                }
              }
              current_block = 15129665204879337069;
            }
            3364823792826654116 => {
              if (*ptr_to_globals).lmc_len != 0 {
                (*ptr_to_globals).ioq_start = crate::libbb::xfuncs_printf::xstrndup(
                  (*ptr_to_globals).last_modifying_cmd.as_mut_ptr(),
                  (*ptr_to_globals).lmc_len,
                );
                (*ptr_to_globals).ioq = (*ptr_to_globals).ioq_start
              }
              current_block = 15129665204879337069;
            }
            18096603330221575131 => {
              current_block = 17498168302144015873;
            }
            16891123271837848903 => {
              dot_end();
              current_block = 1752638907092016026;
            }
            8517235759107662071 => {
              current_block = 5847749760081351726;
            }
            12525254419223051704 => {
              if (*ptr_to_globals).dot < (*ptr_to_globals).end.offset(-1) {
                (*ptr_to_globals).dot = yank_delete(
                  (*ptr_to_globals).dot,
                  (*ptr_to_globals).dot,
                  1i32,
                  YANKDEL as libc::c_int,
                  1i32,
                )
              }
              current_block = 15129665204879337069;
            }
            15232911949322867522 => {
              current_block = 17251831742223396249;
            }
            10863374208794025069 => {
              current_block = 1895262434596074581;
            }
            451126677064669119 => {
              loop {
                dot_prev();
                (*ptr_to_globals).dot = move_to_col(
                  (*ptr_to_globals).dot,
                  (*ptr_to_globals).ccol + (*ptr_to_globals).offset,
                );
                (*ptr_to_globals).cmdcnt -= 1;
                if !((*ptr_to_globals).cmdcnt > 0) {
                  break;
                }
              }
              current_block = 15129665204879337069;
            }
            4611735929166613116 => {
              loop {
                if bb_ascii_isalnum(*(*ptr_to_globals).dot as libc::c_uchar) != 0
                  || *(*ptr_to_globals).dot as libc::c_int == '_' as i32
                {
                  (*ptr_to_globals).dot = skip_thing(
                    (*ptr_to_globals).dot,
                    1i32,
                    FORWARD as libc::c_int,
                    S_END_ALNUM as libc::c_int,
                  )
                } else if *strchrnul(
                  b"!\"#$%&\'()*+,-./:;<=>?@[\\]^_`{|}~\x00" as *const u8 as *const libc::c_char,
                  *(*ptr_to_globals).dot as libc::c_int,
                )
                .offset(0)
                  != 0
                {
                  (*ptr_to_globals).dot = skip_thing(
                    (*ptr_to_globals).dot,
                    1i32,
                    FORWARD as libc::c_int,
                    S_END_PUNCT as libc::c_int,
                  )
                }
                if (*ptr_to_globals).dot < (*ptr_to_globals).end.offset(-1) {
                  (*ptr_to_globals).dot = (*ptr_to_globals).dot.offset(1)
                }
                if ({
                  let mut bb__isspace: libc::c_uchar =
                    (*(*ptr_to_globals).dot as libc::c_int - 9i32) as libc::c_uchar;
                  (bb__isspace as libc::c_int == ' ' as i32 - 9i32
                    || bb__isspace as libc::c_int <= 13i32 - 9i32) as libc::c_int
                }) != 0
                {
                  (*ptr_to_globals).dot = skip_thing(
                    (*ptr_to_globals).dot,
                    2i32,
                    FORWARD as libc::c_int,
                    S_OVER_WS as libc::c_int,
                  )
                }
                (*ptr_to_globals).cmdcnt -= 1;
                if !((*ptr_to_globals).cmdcnt > 0) {
                  break;
                }
              }
              current_block = 15129665204879337069;
            }
            4386451087681909888 => {
              (*ptr_to_globals).dot =
                move_to_col((*ptr_to_globals).dot, (*ptr_to_globals).cmdcnt - 1i32);
              current_block = 15129665204879337069;
            }
            1296397779060594135 => {
              dot_begin();
              current_block = 15129665204879337069;
            }
            _ => {}
          }
          match current_block {
            15129665204879337069 => {}
            8629930936610358348 => {}
            _ => {
              match current_block {
                17251831742223396249 => {
                  dir = 0;
                  if c == 'X' as i32 {
                    dir = -1i32
                  }
                  loop {
                    if *(*ptr_to_globals).dot.offset(dir as isize) as libc::c_int != '\n' as i32 {
                      if c == 'X' as i32 {
                        (*ptr_to_globals).dot = (*ptr_to_globals).dot.offset(-1)
                      }
                      (*ptr_to_globals).dot = yank_delete(
                        (*ptr_to_globals).dot,
                        (*ptr_to_globals).dot,
                        0,
                        YANKDEL as libc::c_int,
                        1i32,
                      )
                    }
                    (*ptr_to_globals).cmdcnt -= 1;
                    if !((*ptr_to_globals).cmdcnt > 0) {
                      break;
                    }
                  }
                  end_cmd_q();
                  if c == 's' as i32 {
                    current_block = 8629930936610358348;
                  } else {
                    current_block = 15129665204879337069;
                  }
                }
                2087484904894455135 => {
                  dot_end();
                  (*ptr_to_globals).dot =
                    char_insert((*ptr_to_globals).dot, '\n' as i32 as libc::c_char, 1i32);
                  current_block = 8629930936610358348;
                }
                11945623545738147997 => {
                  (*ptr_to_globals).dot = (*ptr_to_globals).end.offset(-1);
                  if (*ptr_to_globals).cmdcnt > 0 {
                    (*ptr_to_globals).dot = find_line((*ptr_to_globals).cmdcnt)
                  }
                  dot_skip_over_ws();
                  current_block = 15129665204879337069;
                }
                5847749760081351726 => {
                  dir = FORWARD as libc::c_int;
                  if c == 'B' as i32 {
                    dir = BACK as libc::c_int
                  }
                  loop {
                    if c == 'W' as i32
                      || ({
                        let mut bb__isspace: libc::c_uchar =
                          (*(*ptr_to_globals).dot.offset(dir as isize) as libc::c_int - 9i32)
                            as libc::c_uchar;
                        (bb__isspace as libc::c_int == ' ' as i32 - 9i32
                          || bb__isspace as libc::c_int <= 13i32 - 9i32)
                          as libc::c_int
                      }) != 0
                    {
                      (*ptr_to_globals).dot =
                        skip_thing((*ptr_to_globals).dot, 1i32, dir, S_TO_WS as libc::c_int);
                      (*ptr_to_globals).dot =
                        skip_thing((*ptr_to_globals).dot, 2i32, dir, S_OVER_WS as libc::c_int)
                    }
                    if c != 'W' as i32 {
                      (*ptr_to_globals).dot =
                        skip_thing((*ptr_to_globals).dot, 1i32, dir, S_BEFORE_WS as libc::c_int)
                    }
                    (*ptr_to_globals).cmdcnt -= 1;
                    if !((*ptr_to_globals).cmdcnt > 0) {
                      break;
                    }
                  }
                  current_block = 15129665204879337069;
                }
                17440971994642376514 => {
                  current_block = 15129665204879337069;
                }
                7534742345255184552 => {
                  current_block = 17247297260531395789;
                }
                8800996768013373992 => {
                  loop {
                    dot_next();
                    (*ptr_to_globals).dot = move_to_col(
                      (*ptr_to_globals).dot,
                      (*ptr_to_globals).ccol + (*ptr_to_globals).offset,
                    );
                    (*ptr_to_globals).cmdcnt -= 1;
                    if !((*ptr_to_globals).cmdcnt > 0) {
                      break;
                    }
                  }
                  current_block = 15129665204879337069;
                }
                13993698454868426881 => {
                  loop {
                    dot_right();
                    (*ptr_to_globals).cmdcnt -= 1;
                    if !((*ptr_to_globals).cmdcnt > 0) {
                      break;
                    }
                  }
                  current_block = 15129665204879337069;
                }
                7856905509180742666 => {
                  while !((*ptr_to_globals).last_forward_char == 0) {
                    q = (*ptr_to_globals).dot.offset(1);
                    while q < (*ptr_to_globals).end.offset(-1)
                      && *q as libc::c_int != '\n' as i32
                      && *q as libc::c_int != (*ptr_to_globals).last_forward_char
                    {
                      q = q.offset(1)
                    }
                    if *q as libc::c_int == (*ptr_to_globals).last_forward_char {
                      (*ptr_to_globals).dot = q
                    }
                    (*ptr_to_globals).cmdcnt -= 1;
                    if !((*ptr_to_globals).cmdcnt > 0) {
                      break;
                    }
                  }
                  current_block = 15129665204879337069;
                }
                17498168302144015873 => {
                  current_block = 8681395796513813967;
                }
                1752638907092016026 => {
                  if *(*ptr_to_globals).dot as libc::c_int != '\n' as i32 {
                    (*ptr_to_globals).dot = (*ptr_to_globals).dot.offset(1)
                  }
                  current_block = 8629930936610358348;
                }
                3268579060917229304 => {
                  current_block = 8629930936610358348;
                }
                1895262434596074581 => {
                  current_block = 8908416993177701018;
                }
                _ => {}
              }
              match current_block {
                8629930936610358348 => {}
                15129665204879337069 => {}
                _ => {
                  match current_block {
                    17247297260531395789 => {
                      loop {
                        dot_left();
                        (*ptr_to_globals).cmdcnt -= 1;
                        if !((*ptr_to_globals).cmdcnt > 0) {
                          break;
                        }
                      }
                      current_block = 15129665204879337069;
                    }
                    8681395796513813967 => {
                      current_block = 5591548203144509315;
                    }
                    8908416993177701018 => {
                      current_block = 16124761010012532485;
                    }
                    _ => {}
                  }
                  match current_block {
                    15129665204879337069 => {}
                    _ => {
                      match current_block {
                        16124761010012532485 => {
                          let mut yf: libc::c_int = 0;
                          let mut ml: libc::c_int = 0;
                          let mut whole: libc::c_int = 0;
                          yf = YANKDEL as libc::c_int;
                          if c == 'y' as i32 || c == 'Y' as i32 {
                            yf = YANKONLY as libc::c_int
                          }
                          c1 = 'y' as i32;
                          if c != 'Y' as i32 {
                            c1 = get_one_char()
                          }
                          ml = find_range(&mut p, &mut q, c1 as libc::c_char);
                          place_cursor(0i32, 0);
                          if c1 == 27i32 {
                            c1 = 27i32;
                            c = c1
                          } else if !strchr(b"wW\x00" as *const u8 as *const libc::c_char, c1)
                            .is_null()
                          {
                            ml = 0;
                            if c == 'c' as i32 {
                              while ({
                                let mut bb__isspace: libc::c_uchar =
                                  (*q as libc::c_int - 9i32) as libc::c_uchar;
                                (bb__isspace as libc::c_int == ' ' as i32 - 9i32
                                  || bb__isspace as libc::c_int <= 13i32 - 9i32)
                                  as libc::c_int
                              }) != 0
                                && q > p
                              {
                                q = q.offset(-1)
                              }
                            }
                            (*ptr_to_globals).dot = yank_delete(p, q, ml, yf, 1i32)
                          } else if !strchr(
                            b"^0bBeEft%$ lh\x08\x7f\x00" as *const u8 as *const libc::c_char,
                            c1,
                          )
                          .is_null()
                          {
                            (*ptr_to_globals).dot = yank_delete(p, q, ml, yf, 1i32)
                          } else if !strchr(
                            b"cdykjGHL+-{}\r\n\x00" as *const u8 as *const libc::c_char,
                            c1,
                          )
                          .is_null()
                          {
                            (*ptr_to_globals).dot = yank_delete(p, q, ml, yf, 1i32);
                            whole = 1i32
                          } else {
                            c1 = 27i32;
                            c = c1;
                            ml = 0;
                            indicate_error();
                          }
                          if ml != 0 && whole != 0 {
                            if c == 'c' as i32 {
                              (*ptr_to_globals).dot = char_insert(
                                (*ptr_to_globals).dot,
                                '\n' as i32 as libc::c_char,
                                2i32,
                              );
                              if whole != 0
                                && (*ptr_to_globals).dot != (*ptr_to_globals).end.offset(-1)
                              {
                                dot_prev();
                              }
                            } else if c == 'd' as i32 {
                              dot_begin();
                              dot_skip_over_ws();
                            }
                          }
                          if c1 != 27i32 {
                            if c == 'c' as i32 {
                              strcpy(
                                buf.as_mut_ptr(),
                                b"Change\x00" as *const u8 as *const libc::c_char,
                              );
                              current_block = 8629930936610358348;
                            } else {
                              if c == 'd' as i32 {
                                strcpy(
                                  buf.as_mut_ptr(),
                                  b"Delete\x00" as *const u8 as *const libc::c_char,
                                );
                              }
                              if c == 'y' as i32 || c == 'Y' as i32 {
                                strcpy(
                                  buf.as_mut_ptr(),
                                  b"Yank\x00" as *const u8 as *const libc::c_char,
                                );
                              }
                              p = (*ptr_to_globals).reg[(*ptr_to_globals).YDreg as usize];
                              q = p.offset(strlen(p) as isize);
                              cnt = 0;
                              while p <= q {
                                if *p as libc::c_int == '\n' as i32 {
                                  cnt += 1
                                }
                                p = p.offset(1)
                              }
                              status_line(
                                b"%s %u lines (%u chars) using [%c]\x00" as *const u8
                                  as *const libc::c_char,
                                buf.as_mut_ptr(),
                                cnt,
                                strlen((*ptr_to_globals).reg[(*ptr_to_globals).YDreg as usize])
                                  as libc::c_uint,
                                what_reg() as libc::c_int,
                              );
                              end_cmd_q();
                              current_block = 15129665204879337069;
                            }
                          } else {
                            current_block = 15129665204879337069;
                          }
                        }
                        5591548203144509315 => {
                          current_block = 2636677179867529885;
                        }
                        _ => {}
                      }
                      match current_block {
                        15129665204879337069 => {}
                        8629930936610358348 => {}
                        _ => {
                          match current_block {
                            2636677179867529885 => {
                              current_block = 12309206730560524281;
                            }
                            _ => {}
                          }
                          match current_block {
                            12309206730560524281 => {
                              current_block = 3325768110057758661;
                            }
                            _ => {}
                          }
                          match current_block {
                            3325768110057758661 => {
                              current_block = 14815832896553429982;
                            }
                            _ => {}
                          }
                          match current_block {
                            14815832896553429982 => {
                              current_block = 10731695520297161438;
                            }
                            _ => {}
                          }
                          match current_block {
                            10731695520297161438 => {
                              if c == '0' as i32 && (*ptr_to_globals).cmdcnt < 1i32 {
                                dot_begin();
                              } else {
                                (*ptr_to_globals).cmdcnt =
                                  (*ptr_to_globals).cmdcnt * 10i32 + (c - '0' as i32)
                              }
                              current_block = 15129665204879337069;
                            }
                            _ => {}
                          }
                          match current_block {
                            15129665204879337069 => {}
                            _ => {
                              loop {
                                match current_block {
                                  16813369756331276724 => {
                                    msg = std::ptr::null();
                                    current_block = 7392824444931029276;
                                  }
                                  7392824444931029276 => {
                                    dir = FORWARD as libc::c_int;
                                    p = (*ptr_to_globals).dot.offset(1);
                                    if *(*ptr_to_globals).last_search_pattern.offset(0)
                                      as libc::c_int
                                      == '?' as i32
                                    {
                                      dir = BACK as libc::c_int;
                                      p = (*ptr_to_globals).dot.offset(-1)
                                    }
                                    current_block = 4166979493554389389;
                                  }
                                  _ => {
                                    q = char_search(
                                      p,
                                      (*ptr_to_globals).last_search_pattern.offset(1),
                                      dir << 1i32 | FULL as libc::c_int,
                                    );
                                    if !q.is_null() {
                                      (*ptr_to_globals).dot = q;
                                      msg = std::ptr::null()
                                    } else {
                                      p = (*ptr_to_globals).text;
                                      if dir == BACK as libc::c_int {
                                        p = (*ptr_to_globals).end.offset(-1)
                                      }
                                      q = char_search(
                                        p,
                                        (*ptr_to_globals).last_search_pattern.offset(1),
                                        dir << 1i32 | FULL as libc::c_int,
                                      );
                                      if !q.is_null() {
                                        (*ptr_to_globals).dot = q;
                                        msg = b"search hit BOTTOM, continuing at TOP\x00"
                                          as *const u8
                                          as *const libc::c_char;
                                        if dir == BACK as libc::c_int {
                                          msg = b"search hit TOP, continuing at BOTTOM\x00"
                                            as *const u8
                                            as *const libc::c_char
                                        }
                                      } else {
                                        msg = b"Pattern not found\x00" as *const u8
                                          as *const libc::c_char
                                      }
                                    }
                                    if !msg.is_null() {
                                      status_line_bold(
                                        b"%s\x00" as *const u8 as *const libc::c_char,
                                        msg,
                                      );
                                    }
                                    (*ptr_to_globals).cmdcnt -= 1;
                                    if (*ptr_to_globals).cmdcnt > 0 {
                                      current_block = 16813369756331276724;
                                    } else {
                                      break;
                                    }
                                  }
                                }
                              }
                              current_block = 15129665204879337069;
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
        73 => {
          current_block = 3432363526595694666;
          match current_block {
            16992905640583886232 => {
              loop {
                if (*(*ptr_to_globals).dot as libc::c_int - 'a' as i32) as libc::c_uchar
                  as libc::c_int
                  <= 'z' as i32 - 'a' as i32
                {
                  undo_push(
                    (*ptr_to_globals).dot,
                    1i32 as libc::c_uint,
                    1i32 as libc::c_uchar,
                  );
                  *(*ptr_to_globals).dot =
                    bb_ascii_toupper(*(*ptr_to_globals).dot as libc::c_uchar) as libc::c_char;
                  undo_push(
                    (*ptr_to_globals).dot,
                    1i32 as libc::c_uint,
                    2i32 as libc::c_uchar,
                  );
                } else if (*(*ptr_to_globals).dot as libc::c_int - 'A' as i32) as libc::c_uchar
                  as libc::c_int
                  <= 'Z' as i32 - 'A' as i32
                {
                  undo_push(
                    (*ptr_to_globals).dot,
                    1i32 as libc::c_uint,
                    1i32 as libc::c_uchar,
                  );
                  *(*ptr_to_globals).dot =
                    bb_ascii_tolower(*(*ptr_to_globals).dot as libc::c_uchar) as libc::c_char;
                  undo_push(
                    (*ptr_to_globals).dot,
                    1i32 as libc::c_uint,
                    2i32 as libc::c_uchar,
                  );
                }
                dot_right();
                (*ptr_to_globals).cmdcnt -= 1;
                if !((*ptr_to_globals).cmdcnt > 0) {
                  break;
                }
              }
              end_cmd_q();
              current_block = 15129665204879337069;
            }
            8729655159604064397 => {
              c1 = get_one_char();
              cnt = 0;
              if c1 == '.' as i32 {
                cnt = (*ptr_to_globals)
                  .rows
                  .wrapping_sub(2i32 as libc::c_uint)
                  .wrapping_div(2i32 as libc::c_uint) as libc::c_int
              }
              if c1 == '-' as i32 {
                cnt = (*ptr_to_globals).rows.wrapping_sub(2i32 as libc::c_uint) as libc::c_int
              }
              (*ptr_to_globals).screenbegin = begin_line((*ptr_to_globals).dot);
              dot_scroll(cnt, -1i32);
              current_block = 15129665204879337069;
            }
            15899500648299942075 => {
              (*ptr_to_globals).last_forward_char = get_one_char();
              do_cmd(';' as i32);
              if *(*ptr_to_globals).dot as libc::c_int == (*ptr_to_globals).last_forward_char {
                dot_left();
              }
              (*ptr_to_globals).last_forward_char = 0;
              current_block = 15129665204879337069;
            }
            9051390181078481641 => {
              c1 = get_one_char();
              if *(*ptr_to_globals).dot as libc::c_int != '\n' as i32 {
                (*ptr_to_globals).dot =
                  text_hole_delete((*ptr_to_globals).dot, (*ptr_to_globals).dot, 1i32);
                (*ptr_to_globals).dot =
                  char_insert((*ptr_to_globals).dot, c1 as libc::c_char, 2i32);
                dot_left();
              }
              end_cmd_q();
              current_block = 15129665204879337069;
            }
            877115918601926659 => {
              dir = FORWARD as libc::c_int;
              if c == 'b' as i32 {
                dir = BACK as libc::c_int
              }
              while !((*ptr_to_globals).dot.offset(dir as isize) < (*ptr_to_globals).text
                || (*ptr_to_globals).dot.offset(dir as isize) > (*ptr_to_globals).end.offset(-1))
              {
                (*ptr_to_globals).dot = (*ptr_to_globals).dot.offset(dir as isize);
                if ({
                  let mut bb__isspace: libc::c_uchar =
                    (*(*ptr_to_globals).dot as libc::c_int - 9i32) as libc::c_uchar;
                  (bb__isspace as libc::c_int == ' ' as i32 - 9i32
                    || bb__isspace as libc::c_int <= 13i32 - 9i32) as libc::c_int
                }) != 0
                {
                  (*ptr_to_globals).dot = skip_thing(
                    (*ptr_to_globals).dot,
                    if c == 'e' as i32 { 2i32 } else { 1i32 },
                    dir,
                    S_OVER_WS as libc::c_int,
                  )
                }
                if bb_ascii_isalnum(*(*ptr_to_globals).dot as libc::c_uchar) != 0
                  || *(*ptr_to_globals).dot as libc::c_int == '_' as i32
                {
                  (*ptr_to_globals).dot =
                    skip_thing((*ptr_to_globals).dot, 1i32, dir, S_END_ALNUM as libc::c_int)
                } else if *strchrnul(
                  b"!\"#$%&\'()*+,-./:;<=>?@[\\]^_`{|}~\x00" as *const u8 as *const libc::c_char,
                  *(*ptr_to_globals).dot as libc::c_int,
                )
                .offset(0)
                  != 0
                {
                  (*ptr_to_globals).dot =
                    skip_thing((*ptr_to_globals).dot, 1i32, dir, S_END_PUNCT as libc::c_int)
                }
                (*ptr_to_globals).cmdcnt -= 1;
                if !((*ptr_to_globals).cmdcnt > 0) {
                  break;
                }
              }
              current_block = 15129665204879337069;
            }
            1085022737867179637 => {
              dot_begin();
              dot_skip_over_ws();
              current_block = 15129665204879337069;
            }
            3113147720494587438 => {
              c1 = get_one_char();
              if c1 != 'Z' as i32 {
                indicate_error();
              } else if (*ptr_to_globals).modified_count != 0 {
                if 1i32 != 0 && (*ptr_to_globals).readonly_mode as libc::c_int != 0 {
                  status_line_bold(
                    b"\'%s\' is read only\x00" as *const u8 as *const libc::c_char,
                    (*ptr_to_globals).current_filename,
                  );
                } else {
                  cnt = file_write(
                    (*ptr_to_globals).current_filename,
                    (*ptr_to_globals).text,
                    (*ptr_to_globals).end.offset(-1),
                  );
                  if cnt < 0 {
                    if cnt == -1i32 {
                      status_line_bold(b"Write error: %m\x00" as *const u8 as *const libc::c_char);
                    }
                  } else if cnt as libc::c_long
                    == (*ptr_to_globals)
                      .end
                      .offset(-1)
                      .wrapping_offset_from((*ptr_to_globals).text)
                      as libc::c_long
                      + 1
                  {
                    (*ptr_to_globals).editing = 0 as smallint
                  }
                }
              } else {
                (*ptr_to_globals).editing = 0 as smallint
              }
              current_block = 15129665204879337069;
            }
            12960118908218882441 => {
              p = begin_line((*ptr_to_globals).dot);
              if *p.offset(-1i32 as isize) as libc::c_int == '\n' as i32 {
                dot_prev();
                current_block = 2087484904894455135;
              } else {
                dot_begin();
                (*ptr_to_globals).dot =
                  char_insert((*ptr_to_globals).dot, '\n' as i32 as libc::c_char, 1i32);
                dot_prev();
                current_block = 8629930936610358348;
              }
            }
            8720450212473544924 => {
              (*ptr_to_globals).dot = (*ptr_to_globals).screenbegin;
              cnt = 0;
              while (cnt as libc::c_uint)
                < (*ptr_to_globals)
                  .rows
                  .wrapping_sub(1i32 as libc::c_uint)
                  .wrapping_div(2i32 as libc::c_uint)
              {
                (*ptr_to_globals).dot = next_line((*ptr_to_globals).dot);
                cnt += 1
              }
              current_block = 15129665204879337069;
            }
            13015277209715431090 => {
              (*ptr_to_globals).dot = end_screen();
              if (*ptr_to_globals).cmdcnt as libc::c_uint
                > (*ptr_to_globals).rows.wrapping_sub(1i32 as libc::c_uint)
              {
                (*ptr_to_globals).cmdcnt =
                  (*ptr_to_globals).rows.wrapping_sub(1i32 as libc::c_uint) as libc::c_int
              }
              (*ptr_to_globals).cmdcnt -= 1;
              if (*ptr_to_globals).cmdcnt > 0 {
                do_cmd('-' as i32);
              }
              dot_begin();
              dot_skip_over_ws();
              current_block = 15129665204879337069;
            }
            9800435767766781385 => {
              loop {
                dot_end();
                if (*ptr_to_globals).dot < (*ptr_to_globals).end.offset(-1) {
                  undo_push(
                    (*ptr_to_globals).dot,
                    1i32 as libc::c_uint,
                    1i32 as libc::c_uchar,
                  );
                  let fresh15 = (*ptr_to_globals).dot;
                  (*ptr_to_globals).dot = (*ptr_to_globals).dot.offset(1);
                  *fresh15 = ' ' as i32 as libc::c_char;
                  undo_push(
                    (*ptr_to_globals).dot.offset(-1),
                    1i32 as libc::c_uint,
                    2i32 as libc::c_uchar,
                  );
                  while ({
                    let mut bb__isblank: libc::c_uchar = *(*ptr_to_globals).dot as libc::c_uchar;
                    (bb__isblank as libc::c_int == ' ' as i32
                      || bb__isblank as libc::c_int == '\t' as i32)
                      as libc::c_int
                  }) != 0
                  {
                    text_hole_delete((*ptr_to_globals).dot, (*ptr_to_globals).dot, 2i32);
                  }
                }
                (*ptr_to_globals).cmdcnt -= 1;
                if !((*ptr_to_globals).cmdcnt > 0) {
                  break;
                }
              }
              end_cmd_q();
              current_block = 15129665204879337069;
            }
            3432363526595694666 => {
              dot_begin();
              dot_skip_over_ws();
              current_block = 3268579060917229304;
            }
            3494829253343353619 => {
              (*ptr_to_globals).dot = (*ptr_to_globals).screenbegin;
              if (*ptr_to_globals).cmdcnt as libc::c_uint
                > (*ptr_to_globals).rows.wrapping_sub(1i32 as libc::c_uint)
              {
                (*ptr_to_globals).cmdcnt =
                  (*ptr_to_globals).rows.wrapping_sub(1i32 as libc::c_uint) as libc::c_int
              }
              (*ptr_to_globals).cmdcnt -= 1;
              if (*ptr_to_globals).cmdcnt > 0 {
                do_cmd('+' as i32);
              }
              dot_skip_over_ws();
              current_block = 15129665204879337069;
            }
            17973101765331640574 => {
              c1 = get_one_char();
              if c1 != 'g' as i32 {
                buf[0] = 'g' as i32 as libc::c_char;
                buf[1] = if c1 >= 0 { c1 } else { '*' as i32 } as libc::c_char;
                buf[2] = '\u{0}' as i32 as libc::c_char;
                not_implemented(buf.as_mut_ptr());
                current_block = 15129665204879337069;
              } else {
                if (*ptr_to_globals).cmdcnt == 0 {
                  (*ptr_to_globals).cmdcnt = 1i32
                }
                current_block = 11945623545738147997;
              }
            }
            16546625800574160972 => {
              save_dot = (*ptr_to_globals).dot;
              (*ptr_to_globals).dot = dollar_line((*ptr_to_globals).dot);
              (*ptr_to_globals).dot = yank_delete(
                save_dot,
                (*ptr_to_globals).dot,
                0,
                YANKDEL as libc::c_int,
                1i32,
              );
              if c == 'C' as i32 {
                current_block = 8629930936610358348;
              } else {
                if c == 'D' as i32 {
                  end_cmd_q();
                }
                current_block = 15129665204879337069;
              }
            }
            11937696639986586685 => {
              cnt = count_lines((*ptr_to_globals).text, (*ptr_to_globals).dot);
              c1 = get_one_char();
              find_range(&mut p, &mut q, c1 as libc::c_char);
              yank_delete(p, q, 1i32, YANKONLY as libc::c_int, 0);
              p = begin_line(p);
              q = end_line(q);
              i = count_lines(p, q);
              while i > 0 {
                if c == '<' as i32 {
                  if *p as libc::c_int == '\t' as i32 {
                    text_hole_delete(p, p, 0);
                  } else if *p as libc::c_int == ' ' as i32 {
                    j = 0;
                    while *p as libc::c_int == ' ' as i32 && j < (*ptr_to_globals).tabstop {
                      text_hole_delete(p, p, 0);
                      j += 1
                    }
                  }
                } else if c == '>' as i32 {
                  char_insert(p, '\t' as i32 as libc::c_char, 1i32);
                }
                i -= 1;
                p = next_line(p)
              }
              (*ptr_to_globals).dot = find_line(cnt);
              dot_skip_over_ws();
              end_cmd_q();
              current_block = 15129665204879337069;
            }
            17725350714912028156 => {
              p = get_input_line(b":\x00" as *const u8 as *const libc::c_char);
              colon(p);
              current_block = 15129665204879337069;
            }
            14526470074083880812 => {
              q = char_search(
                (*ptr_to_globals).dot,
                b"\n\n\x00" as *const u8 as *const libc::c_char,
                (FORWARD as libc::c_int) << 1i32 | FULL as libc::c_int,
              );
              if !q.is_null() {
                (*ptr_to_globals).dot = next_line(q)
              }
              current_block = 15129665204879337069;
            }
            8893187391306414141 => {
              q = char_search(
                (*ptr_to_globals).dot,
                b"\n\n\x00" as *const u8 as *const libc::c_char,
                ((BACK as libc::c_int as libc::c_uint) << 1i32
                  | FULL as libc::c_int as libc::c_uint) as libc::c_int,
              );
              if !q.is_null() {
                (*ptr_to_globals).dot = next_line(q)
              }
              current_block = 15129665204879337069;
            }
            7021673758293221412 => {
              dir = BACK as libc::c_int;
              p = (*ptr_to_globals).dot.offset(-1);
              if *(*ptr_to_globals).last_search_pattern.offset(0) as libc::c_int == '?' as i32 {
                dir = FORWARD as libc::c_int;
                p = (*ptr_to_globals).dot.offset(1)
              }
              current_block = 4166979493554389389;
            }
            18374191879090272823 => {
              buf[0] = c as libc::c_char;
              buf[1] = '\u{0}' as i32 as libc::c_char;
              q = get_input_line(buf.as_mut_ptr());
              if *q.offset(0) as libc::c_int != 0 && *q.offset(1) == 0 {
                if *(*ptr_to_globals).last_search_pattern.offset(0) != 0 {
                  *(*ptr_to_globals).last_search_pattern.offset(0) = c as libc::c_char
                }
                current_block = 7392824444931029276;
              } else if *q.offset(0) != 0 {
                free((*ptr_to_globals).last_search_pattern as *mut libc::c_void);
                (*ptr_to_globals).last_search_pattern = crate::libbb::xfuncs_printf::xstrdup(q);
                current_block = 7392824444931029276;
              } else {
                current_block = 15129665204879337069;
              }
            }
            16407828456666301883 => {
              if (*ptr_to_globals).last_forward_char == 0 {
                current_block = 15129665204879337069;
              } else {
                loop {
                  q = (*ptr_to_globals).dot.offset(-1);
                  while q >= (*ptr_to_globals).text
                    && *q as libc::c_int != '\n' as i32
                    && *q as libc::c_int != (*ptr_to_globals).last_forward_char
                  {
                    q = q.offset(-1)
                  }
                  if q >= (*ptr_to_globals).text
                    && *q as libc::c_int == (*ptr_to_globals).last_forward_char
                  {
                    (*ptr_to_globals).dot = q
                  }
                  (*ptr_to_globals).cmdcnt -= 1;
                  if !((*ptr_to_globals).cmdcnt > 0) {
                    break;
                  }
                }
                current_block = 15129665204879337069;
              }
            }
            9018432604062702004 => {
              q = (*ptr_to_globals).dot;
              while q < (*ptr_to_globals).end && *q as libc::c_int != '\n' as i32 {
                if !strchr(
                  b"()[]{}\x00" as *const u8 as *const libc::c_char,
                  *q as libc::c_int,
                )
                .is_null()
                {
                  p = find_pair(q, *q);
                  if p.is_null() {
                    indicate_error();
                  } else {
                    (*ptr_to_globals).dot = p
                  }
                  break;
                } else {
                  q = q.offset(1)
                }
              }
              if *q as libc::c_int == '\n' as i32 {
                indicate_error();
              }
              current_block = 15129665204879337069;
            }
            10247103787464459848 => {
              p = (*ptr_to_globals).reg[(*ptr_to_globals).YDreg as usize];
              if p.is_null() {
                status_line_bold(
                  b"Nothing in register %c\x00" as *const u8 as *const libc::c_char,
                  what_reg() as libc::c_int,
                );
              } else {
                if !strchr(p, '\n' as i32).is_null() {
                  if c == 'P' as i32 {
                    dot_begin();
                  }
                  if c == 'p' as i32 {
                    if end_line((*ptr_to_globals).dot) == (*ptr_to_globals).end.offset(-1) {
                      (*ptr_to_globals).dot = (*ptr_to_globals).end
                    } else {
                      dot_next();
                    }
                  }
                } else if c == 'p' as i32 {
                  dot_right();
                }
                string_insert((*ptr_to_globals).dot, p, 1i32);
                end_cmd_q();
              }
              current_block = 15129665204879337069;
            }
            15260732871948875843 => {
              c1 = (get_one_char() | 0x20i32) - 'a' as i32;
              if c1 as libc::c_uint <= 25i32 as libc::c_uint {
                (*ptr_to_globals).mark[c1 as usize] = (*ptr_to_globals).dot
              } else {
                indicate_error();
              }
              current_block = 15129665204879337069;
            }
            12738322036487086035 => {
              c1 = get_one_char() | 0x20i32;
              if (c1 - 'a' as i32) as libc::c_uint <= 25i32 as libc::c_uint {
                c1 = c1 - 'a' as i32;
                q = (*ptr_to_globals).mark[c1 as usize];
                if (*ptr_to_globals).text <= q && q < (*ptr_to_globals).end {
                  (*ptr_to_globals).dot = q;
                  dot_begin();
                  dot_skip_over_ws();
                }
              } else if c1 == '\'' as i32 {
                (*ptr_to_globals).dot = swap_context((*ptr_to_globals).dot);
                dot_begin();
                dot_skip_over_ws();
              } else {
                indicate_error();
              }
              current_block = 15129665204879337069;
            }
            13255096073384561358 => {
              c1 = (get_one_char() | 0x20i32) - 'a' as i32;
              if c1 as libc::c_uint <= 25i32 as libc::c_uint {
                (*ptr_to_globals).YDreg = c1 as smalluint
              } else {
                indicate_error();
              }
              current_block = 15129665204879337069;
            }
            10258711639984089377 => {
              if (*ptr_to_globals).cmd_mode as libc::c_int == 0 {
                indicate_error();
              }
              (*ptr_to_globals).cmd_mode = 0 as smallint;
              undo_queue_commit();
              end_cmd_q();
              (*ptr_to_globals).last_status_cksum = 0;
              current_block = 15129665204879337069;
            }
            11439127087547047736 => {
              buf[0] = c as libc::c_char;
              buf[1] = '\u{0}' as i32 as libc::c_char;
              not_implemented(buf.as_mut_ptr());
              end_cmd_q();
              current_block = 17440971994642376514;
            }
            7961798899781870241 => {
              dot_scroll(
                (*ptr_to_globals).rows.wrapping_sub(2i32 as libc::c_uint) as libc::c_int,
                -1i32,
              );
              current_block = 15129665204879337069;
            }
            9426343755402444879 => {
              dot_scroll(
                (*ptr_to_globals)
                  .rows
                  .wrapping_sub(2i32 as libc::c_uint)
                  .wrapping_div(2i32 as libc::c_uint) as libc::c_int,
                1i32,
              );
              current_block = 15129665204879337069;
            }
            13352459794680105913 => {
              dot_scroll(1i32, 1i32);
              current_block = 15129665204879337069;
            }
            14142272253464333006 => {
              dot_scroll(
                (*ptr_to_globals).rows.wrapping_sub(2i32 as libc::c_uint) as libc::c_int,
                1i32,
              );
              current_block = 15129665204879337069;
            }
            10758177197742640066 => {
              (*ptr_to_globals).last_status_cksum = 0;
              current_block = 15129665204879337069;
            }
            6152256259730122749 => {
              current_block = 7534742345255184552;
            }
            12883932598258173301 => {
              current_block = 8800996768013373992;
            }
            11242998110520238401 => {
              redraw(1i32);
              current_block = 15129665204879337069;
            }
            13619733043935729992 => {
              loop {
                dot_next();
                dot_skip_over_ws();
                (*ptr_to_globals).cmdcnt -= 1;
                if !((*ptr_to_globals).cmdcnt > 0) {
                  break;
                }
              }
              current_block = 15129665204879337069;
            }
            9339065157412720613 => {
              dot_scroll(
                (*ptr_to_globals)
                  .rows
                  .wrapping_sub(2i32 as libc::c_uint)
                  .wrapping_div(2i32 as libc::c_uint) as libc::c_int,
                -1i32,
              );
              current_block = 15129665204879337069;
            }
            11447082683497798022 => {
              dot_scroll(1i32, -1i32);
              current_block = 15129665204879337069;
            }
            5182000506326660482 => {
              current_block = 13993698454868426881;
            }
            1105010766850597332 => {
              if !(*ptr_to_globals).reg[27].is_null() {
                p = begin_line((*ptr_to_globals).dot);
                q = end_line((*ptr_to_globals).dot);
                p = text_hole_delete(p, q, 1i32);
                p = p.offset(string_insert(p, (*ptr_to_globals).reg[27], 2i32) as isize);
                (*ptr_to_globals).dot = p;
                dot_skip_over_ws();
              }
              current_block = 15129665204879337069;
            }
            8616046655533110204 => {
              undo_pop();
              current_block = 15129665204879337069;
            }
            5127767458142431603 => {
              loop {
                (*ptr_to_globals).dot = end_line((*ptr_to_globals).dot);
                (*ptr_to_globals).cmdcnt -= 1;
                if (*ptr_to_globals).cmdcnt <= 0 {
                  break;
                }
                dot_next();
              }
              current_block = 15129665204879337069;
            }
            222014967776118151 => {
              (*ptr_to_globals).last_forward_char = get_one_char();
              current_block = 7856905509180742666;
            }
            11209792479411604110 => {
              loop {
                dot_prev();
                dot_skip_over_ws();
                (*ptr_to_globals).cmdcnt -= 1;
                if !((*ptr_to_globals).cmdcnt > 0) {
                  break;
                }
              }
              current_block = 15129665204879337069;
            }
            3364823792826654116 => {
              if (*ptr_to_globals).lmc_len != 0 {
                (*ptr_to_globals).ioq_start = crate::libbb::xfuncs_printf::xstrndup(
                  (*ptr_to_globals).last_modifying_cmd.as_mut_ptr(),
                  (*ptr_to_globals).lmc_len,
                );
                (*ptr_to_globals).ioq = (*ptr_to_globals).ioq_start
              }
              current_block = 15129665204879337069;
            }
            18096603330221575131 => {
              current_block = 17498168302144015873;
            }
            16891123271837848903 => {
              dot_end();
              current_block = 1752638907092016026;
            }
            8517235759107662071 => {
              current_block = 5847749760081351726;
            }
            12525254419223051704 => {
              if (*ptr_to_globals).dot < (*ptr_to_globals).end.offset(-1) {
                (*ptr_to_globals).dot = yank_delete(
                  (*ptr_to_globals).dot,
                  (*ptr_to_globals).dot,
                  1i32,
                  YANKDEL as libc::c_int,
                  1i32,
                )
              }
              current_block = 15129665204879337069;
            }
            15232911949322867522 => {
              current_block = 17251831742223396249;
            }
            10863374208794025069 => {
              current_block = 1895262434596074581;
            }
            451126677064669119 => {
              loop {
                dot_prev();
                (*ptr_to_globals).dot = move_to_col(
                  (*ptr_to_globals).dot,
                  (*ptr_to_globals).ccol + (*ptr_to_globals).offset,
                );
                (*ptr_to_globals).cmdcnt -= 1;
                if !((*ptr_to_globals).cmdcnt > 0) {
                  break;
                }
              }
              current_block = 15129665204879337069;
            }
            4611735929166613116 => {
              loop {
                if bb_ascii_isalnum(*(*ptr_to_globals).dot as libc::c_uchar) != 0
                  || *(*ptr_to_globals).dot as libc::c_int == '_' as i32
                {
                  (*ptr_to_globals).dot = skip_thing(
                    (*ptr_to_globals).dot,
                    1i32,
                    FORWARD as libc::c_int,
                    S_END_ALNUM as libc::c_int,
                  )
                } else if *strchrnul(
                  b"!\"#$%&\'()*+,-./:;<=>?@[\\]^_`{|}~\x00" as *const u8 as *const libc::c_char,
                  *(*ptr_to_globals).dot as libc::c_int,
                )
                .offset(0)
                  != 0
                {
                  (*ptr_to_globals).dot = skip_thing(
                    (*ptr_to_globals).dot,
                    1i32,
                    FORWARD as libc::c_int,
                    S_END_PUNCT as libc::c_int,
                  )
                }
                if (*ptr_to_globals).dot < (*ptr_to_globals).end.offset(-1) {
                  (*ptr_to_globals).dot = (*ptr_to_globals).dot.offset(1)
                }
                if ({
                  let mut bb__isspace: libc::c_uchar =
                    (*(*ptr_to_globals).dot as libc::c_int - 9i32) as libc::c_uchar;
                  (bb__isspace as libc::c_int == ' ' as i32 - 9i32
                    || bb__isspace as libc::c_int <= 13i32 - 9i32) as libc::c_int
                }) != 0
                {
                  (*ptr_to_globals).dot = skip_thing(
                    (*ptr_to_globals).dot,
                    2i32,
                    FORWARD as libc::c_int,
                    S_OVER_WS as libc::c_int,
                  )
                }
                (*ptr_to_globals).cmdcnt -= 1;
                if !((*ptr_to_globals).cmdcnt > 0) {
                  break;
                }
              }
              current_block = 15129665204879337069;
            }
            4386451087681909888 => {
              (*ptr_to_globals).dot =
                move_to_col((*ptr_to_globals).dot, (*ptr_to_globals).cmdcnt - 1i32);
              current_block = 15129665204879337069;
            }
            1296397779060594135 => {
              dot_begin();
              current_block = 15129665204879337069;
            }
            _ => {}
          }
          match current_block {
            15129665204879337069 => {}
            8629930936610358348 => {}
            _ => {
              match current_block {
                17251831742223396249 => {
                  dir = 0;
                  if c == 'X' as i32 {
                    dir = -1i32
                  }
                  loop {
                    if *(*ptr_to_globals).dot.offset(dir as isize) as libc::c_int != '\n' as i32 {
                      if c == 'X' as i32 {
                        (*ptr_to_globals).dot = (*ptr_to_globals).dot.offset(-1)
                      }
                      (*ptr_to_globals).dot = yank_delete(
                        (*ptr_to_globals).dot,
                        (*ptr_to_globals).dot,
                        0,
                        YANKDEL as libc::c_int,
                        1i32,
                      )
                    }
                    (*ptr_to_globals).cmdcnt -= 1;
                    if !((*ptr_to_globals).cmdcnt > 0) {
                      break;
                    }
                  }
                  end_cmd_q();
                  if c == 's' as i32 {
                    current_block = 8629930936610358348;
                  } else {
                    current_block = 15129665204879337069;
                  }
                }
                2087484904894455135 => {
                  dot_end();
                  (*ptr_to_globals).dot =
                    char_insert((*ptr_to_globals).dot, '\n' as i32 as libc::c_char, 1i32);
                  current_block = 8629930936610358348;
                }
                11945623545738147997 => {
                  (*ptr_to_globals).dot = (*ptr_to_globals).end.offset(-1);
                  if (*ptr_to_globals).cmdcnt > 0 {
                    (*ptr_to_globals).dot = find_line((*ptr_to_globals).cmdcnt)
                  }
                  dot_skip_over_ws();
                  current_block = 15129665204879337069;
                }
                5847749760081351726 => {
                  dir = FORWARD as libc::c_int;
                  if c == 'B' as i32 {
                    dir = BACK as libc::c_int
                  }
                  loop {
                    if c == 'W' as i32
                      || ({
                        let mut bb__isspace: libc::c_uchar =
                          (*(*ptr_to_globals).dot.offset(dir as isize) as libc::c_int - 9i32)
                            as libc::c_uchar;
                        (bb__isspace as libc::c_int == ' ' as i32 - 9i32
                          || bb__isspace as libc::c_int <= 13i32 - 9i32)
                          as libc::c_int
                      }) != 0
                    {
                      (*ptr_to_globals).dot =
                        skip_thing((*ptr_to_globals).dot, 1i32, dir, S_TO_WS as libc::c_int);
                      (*ptr_to_globals).dot =
                        skip_thing((*ptr_to_globals).dot, 2i32, dir, S_OVER_WS as libc::c_int)
                    }
                    if c != 'W' as i32 {
                      (*ptr_to_globals).dot =
                        skip_thing((*ptr_to_globals).dot, 1i32, dir, S_BEFORE_WS as libc::c_int)
                    }
                    (*ptr_to_globals).cmdcnt -= 1;
                    if !((*ptr_to_globals).cmdcnt > 0) {
                      break;
                    }
                  }
                  current_block = 15129665204879337069;
                }
                17440971994642376514 => {
                  current_block = 15129665204879337069;
                }
                7534742345255184552 => {
                  current_block = 17247297260531395789;
                }
                8800996768013373992 => {
                  loop {
                    dot_next();
                    (*ptr_to_globals).dot = move_to_col(
                      (*ptr_to_globals).dot,
                      (*ptr_to_globals).ccol + (*ptr_to_globals).offset,
                    );
                    (*ptr_to_globals).cmdcnt -= 1;
                    if !((*ptr_to_globals).cmdcnt > 0) {
                      break;
                    }
                  }
                  current_block = 15129665204879337069;
                }
                13993698454868426881 => {
                  loop {
                    dot_right();
                    (*ptr_to_globals).cmdcnt -= 1;
                    if !((*ptr_to_globals).cmdcnt > 0) {
                      break;
                    }
                  }
                  current_block = 15129665204879337069;
                }
                7856905509180742666 => {
                  while !((*ptr_to_globals).last_forward_char == 0) {
                    q = (*ptr_to_globals).dot.offset(1);
                    while q < (*ptr_to_globals).end.offset(-1)
                      && *q as libc::c_int != '\n' as i32
                      && *q as libc::c_int != (*ptr_to_globals).last_forward_char
                    {
                      q = q.offset(1)
                    }
                    if *q as libc::c_int == (*ptr_to_globals).last_forward_char {
                      (*ptr_to_globals).dot = q
                    }
                    (*ptr_to_globals).cmdcnt -= 1;
                    if !((*ptr_to_globals).cmdcnt > 0) {
                      break;
                    }
                  }
                  current_block = 15129665204879337069;
                }
                17498168302144015873 => {
                  current_block = 8681395796513813967;
                }
                1752638907092016026 => {
                  if *(*ptr_to_globals).dot as libc::c_int != '\n' as i32 {
                    (*ptr_to_globals).dot = (*ptr_to_globals).dot.offset(1)
                  }
                  current_block = 8629930936610358348;
                }
                3268579060917229304 => {
                  current_block = 8629930936610358348;
                }
                1895262434596074581 => {
                  current_block = 8908416993177701018;
                }
                _ => {}
              }
              match current_block {
                8629930936610358348 => {}
                15129665204879337069 => {}
                _ => {
                  match current_block {
                    17247297260531395789 => {
                      loop {
                        dot_left();
                        (*ptr_to_globals).cmdcnt -= 1;
                        if !((*ptr_to_globals).cmdcnt > 0) {
                          break;
                        }
                      }
                      current_block = 15129665204879337069;
                    }
                    8681395796513813967 => {
                      current_block = 5591548203144509315;
                    }
                    8908416993177701018 => {
                      current_block = 16124761010012532485;
                    }
                    _ => {}
                  }
                  match current_block {
                    15129665204879337069 => {}
                    _ => {
                      match current_block {
                        16124761010012532485 => {
                          let mut yf: libc::c_int = 0;
                          let mut ml: libc::c_int = 0;
                          let mut whole: libc::c_int = 0;
                          yf = YANKDEL as libc::c_int;
                          if c == 'y' as i32 || c == 'Y' as i32 {
                            yf = YANKONLY as libc::c_int
                          }
                          c1 = 'y' as i32;
                          if c != 'Y' as i32 {
                            c1 = get_one_char()
                          }
                          ml = find_range(&mut p, &mut q, c1 as libc::c_char);
                          place_cursor(0i32, 0);
                          if c1 == 27i32 {
                            c1 = 27i32;
                            c = c1
                          } else if !strchr(b"wW\x00" as *const u8 as *const libc::c_char, c1)
                            .is_null()
                          {
                            ml = 0;
                            if c == 'c' as i32 {
                              while ({
                                let mut bb__isspace: libc::c_uchar =
                                  (*q as libc::c_int - 9i32) as libc::c_uchar;
                                (bb__isspace as libc::c_int == ' ' as i32 - 9i32
                                  || bb__isspace as libc::c_int <= 13i32 - 9i32)
                                  as libc::c_int
                              }) != 0
                                && q > p
                              {
                                q = q.offset(-1)
                              }
                            }
                            (*ptr_to_globals).dot = yank_delete(p, q, ml, yf, 1i32)
                          } else if !strchr(
                            b"^0bBeEft%$ lh\x08\x7f\x00" as *const u8 as *const libc::c_char,
                            c1,
                          )
                          .is_null()
                          {
                            (*ptr_to_globals).dot = yank_delete(p, q, ml, yf, 1i32)
                          } else if !strchr(
                            b"cdykjGHL+-{}\r\n\x00" as *const u8 as *const libc::c_char,
                            c1,
                          )
                          .is_null()
                          {
                            (*ptr_to_globals).dot = yank_delete(p, q, ml, yf, 1i32);
                            whole = 1i32
                          } else {
                            c1 = 27i32;
                            c = c1;
                            ml = 0;
                            indicate_error();
                          }
                          if ml != 0 && whole != 0 {
                            if c == 'c' as i32 {
                              (*ptr_to_globals).dot = char_insert(
                                (*ptr_to_globals).dot,
                                '\n' as i32 as libc::c_char,
                                2i32,
                              );
                              if whole != 0
                                && (*ptr_to_globals).dot != (*ptr_to_globals).end.offset(-1)
                              {
                                dot_prev();
                              }
                            } else if c == 'd' as i32 {
                              dot_begin();
                              dot_skip_over_ws();
                            }
                          }
                          if c1 != 27i32 {
                            if c == 'c' as i32 {
                              strcpy(
                                buf.as_mut_ptr(),
                                b"Change\x00" as *const u8 as *const libc::c_char,
                              );
                              current_block = 8629930936610358348;
                            } else {
                              if c == 'd' as i32 {
                                strcpy(
                                  buf.as_mut_ptr(),
                                  b"Delete\x00" as *const u8 as *const libc::c_char,
                                );
                              }
                              if c == 'y' as i32 || c == 'Y' as i32 {
                                strcpy(
                                  buf.as_mut_ptr(),
                                  b"Yank\x00" as *const u8 as *const libc::c_char,
                                );
                              }
                              p = (*ptr_to_globals).reg[(*ptr_to_globals).YDreg as usize];
                              q = p.offset(strlen(p) as isize);
                              cnt = 0;
                              while p <= q {
                                if *p as libc::c_int == '\n' as i32 {
                                  cnt += 1
                                }
                                p = p.offset(1)
                              }
                              status_line(
                                b"%s %u lines (%u chars) using [%c]\x00" as *const u8
                                  as *const libc::c_char,
                                buf.as_mut_ptr(),
                                cnt,
                                strlen((*ptr_to_globals).reg[(*ptr_to_globals).YDreg as usize])
                                  as libc::c_uint,
                                what_reg() as libc::c_int,
                              );
                              end_cmd_q();
                              current_block = 15129665204879337069;
                            }
                          } else {
                            current_block = 15129665204879337069;
                          }
                        }
                        5591548203144509315 => {
                          current_block = 2636677179867529885;
                        }
                        _ => {}
                      }
                      match current_block {
                        15129665204879337069 => {}
                        8629930936610358348 => {}
                        _ => {
                          match current_block {
                            2636677179867529885 => {
                              current_block = 12309206730560524281;
                            }
                            _ => {}
                          }
                          match current_block {
                            12309206730560524281 => {
                              current_block = 3325768110057758661;
                            }
                            _ => {}
                          }
                          match current_block {
                            3325768110057758661 => {
                              current_block = 14815832896553429982;
                            }
                            _ => {}
                          }
                          match current_block {
                            14815832896553429982 => {
                              current_block = 10731695520297161438;
                            }
                            _ => {}
                          }
                          match current_block {
                            10731695520297161438 => {
                              if c == '0' as i32 && (*ptr_to_globals).cmdcnt < 1i32 {
                                dot_begin();
                              } else {
                                (*ptr_to_globals).cmdcnt =
                                  (*ptr_to_globals).cmdcnt * 10i32 + (c - '0' as i32)
                              }
                              current_block = 15129665204879337069;
                            }
                            _ => {}
                          }
                          match current_block {
                            15129665204879337069 => {}
                            _ => {
                              loop {
                                match current_block {
                                  16813369756331276724 => {
                                    msg = std::ptr::null();
                                    current_block = 7392824444931029276;
                                  }
                                  7392824444931029276 => {
                                    dir = FORWARD as libc::c_int;
                                    p = (*ptr_to_globals).dot.offset(1);
                                    if *(*ptr_to_globals).last_search_pattern.offset(0)
                                      as libc::c_int
                                      == '?' as i32
                                    {
                                      dir = BACK as libc::c_int;
                                      p = (*ptr_to_globals).dot.offset(-1)
                                    }
                                    current_block = 4166979493554389389;
                                  }
                                  _ => {
                                    q = char_search(
                                      p,
                                      (*ptr_to_globals).last_search_pattern.offset(1),
                                      dir << 1i32 | FULL as libc::c_int,
                                    );
                                    if !q.is_null() {
                                      (*ptr_to_globals).dot = q;
                                      msg = std::ptr::null()
                                    } else {
                                      p = (*ptr_to_globals).text;
                                      if dir == BACK as libc::c_int {
                                        p = (*ptr_to_globals).end.offset(-1)
                                      }
                                      q = char_search(
                                        p,
                                        (*ptr_to_globals).last_search_pattern.offset(1),
                                        dir << 1i32 | FULL as libc::c_int,
                                      );
                                      if !q.is_null() {
                                        (*ptr_to_globals).dot = q;
                                        msg = b"search hit BOTTOM, continuing at TOP\x00"
                                          as *const u8
                                          as *const libc::c_char;
                                        if dir == BACK as libc::c_int {
                                          msg = b"search hit TOP, continuing at BOTTOM\x00"
                                            as *const u8
                                            as *const libc::c_char
                                        }
                                      } else {
                                        msg = b"Pattern not found\x00" as *const u8
                                          as *const libc::c_char
                                      }
                                    }
                                    if !msg.is_null() {
                                      status_line_bold(
                                        b"%s\x00" as *const u8 as *const libc::c_char,
                                        msg,
                                      );
                                    }
                                    (*ptr_to_globals).cmdcnt -= 1;
                                    if (*ptr_to_globals).cmdcnt > 0 {
                                      current_block = 16813369756331276724;
                                    } else {
                                      break;
                                    }
                                  }
                                }
                              }
                              current_block = 15129665204879337069;
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
        105 => {
          current_block = 3268579060917229304;
          match current_block {
            16992905640583886232 => {
              loop {
                if (*(*ptr_to_globals).dot as libc::c_int - 'a' as i32) as libc::c_uchar
                  as libc::c_int
                  <= 'z' as i32 - 'a' as i32
                {
                  undo_push(
                    (*ptr_to_globals).dot,
                    1i32 as libc::c_uint,
                    1i32 as libc::c_uchar,
                  );
                  *(*ptr_to_globals).dot =
                    bb_ascii_toupper(*(*ptr_to_globals).dot as libc::c_uchar) as libc::c_char;
                  undo_push(
                    (*ptr_to_globals).dot,
                    1i32 as libc::c_uint,
                    2i32 as libc::c_uchar,
                  );
                } else if (*(*ptr_to_globals).dot as libc::c_int - 'A' as i32) as libc::c_uchar
                  as libc::c_int
                  <= 'Z' as i32 - 'A' as i32
                {
                  undo_push(
                    (*ptr_to_globals).dot,
                    1i32 as libc::c_uint,
                    1i32 as libc::c_uchar,
                  );
                  *(*ptr_to_globals).dot =
                    bb_ascii_tolower(*(*ptr_to_globals).dot as libc::c_uchar) as libc::c_char;
                  undo_push(
                    (*ptr_to_globals).dot,
                    1i32 as libc::c_uint,
                    2i32 as libc::c_uchar,
                  );
                }
                dot_right();
                (*ptr_to_globals).cmdcnt -= 1;
                if !((*ptr_to_globals).cmdcnt > 0) {
                  break;
                }
              }
              end_cmd_q();
              current_block = 15129665204879337069;
            }
            8729655159604064397 => {
              c1 = get_one_char();
              cnt = 0;
              if c1 == '.' as i32 {
                cnt = (*ptr_to_globals)
                  .rows
                  .wrapping_sub(2i32 as libc::c_uint)
                  .wrapping_div(2i32 as libc::c_uint) as libc::c_int
              }
              if c1 == '-' as i32 {
                cnt = (*ptr_to_globals).rows.wrapping_sub(2i32 as libc::c_uint) as libc::c_int
              }
              (*ptr_to_globals).screenbegin = begin_line((*ptr_to_globals).dot);
              dot_scroll(cnt, -1i32);
              current_block = 15129665204879337069;
            }
            15899500648299942075 => {
              (*ptr_to_globals).last_forward_char = get_one_char();
              do_cmd(';' as i32);
              if *(*ptr_to_globals).dot as libc::c_int == (*ptr_to_globals).last_forward_char {
                dot_left();
              }
              (*ptr_to_globals).last_forward_char = 0;
              current_block = 15129665204879337069;
            }
            9051390181078481641 => {
              c1 = get_one_char();
              if *(*ptr_to_globals).dot as libc::c_int != '\n' as i32 {
                (*ptr_to_globals).dot =
                  text_hole_delete((*ptr_to_globals).dot, (*ptr_to_globals).dot, 1i32);
                (*ptr_to_globals).dot =
                  char_insert((*ptr_to_globals).dot, c1 as libc::c_char, 2i32);
                dot_left();
              }
              end_cmd_q();
              current_block = 15129665204879337069;
            }
            877115918601926659 => {
              dir = FORWARD as libc::c_int;
              if c == 'b' as i32 {
                dir = BACK as libc::c_int
              }
              while !((*ptr_to_globals).dot.offset(dir as isize) < (*ptr_to_globals).text
                || (*ptr_to_globals).dot.offset(dir as isize) > (*ptr_to_globals).end.offset(-1))
              {
                (*ptr_to_globals).dot = (*ptr_to_globals).dot.offset(dir as isize);
                if ({
                  let mut bb__isspace: libc::c_uchar =
                    (*(*ptr_to_globals).dot as libc::c_int - 9i32) as libc::c_uchar;
                  (bb__isspace as libc::c_int == ' ' as i32 - 9i32
                    || bb__isspace as libc::c_int <= 13i32 - 9i32) as libc::c_int
                }) != 0
                {
                  (*ptr_to_globals).dot = skip_thing(
                    (*ptr_to_globals).dot,
                    if c == 'e' as i32 { 2i32 } else { 1i32 },
                    dir,
                    S_OVER_WS as libc::c_int,
                  )
                }
                if bb_ascii_isalnum(*(*ptr_to_globals).dot as libc::c_uchar) != 0
                  || *(*ptr_to_globals).dot as libc::c_int == '_' as i32
                {
                  (*ptr_to_globals).dot =
                    skip_thing((*ptr_to_globals).dot, 1i32, dir, S_END_ALNUM as libc::c_int)
                } else if *strchrnul(
                  b"!\"#$%&\'()*+,-./:;<=>?@[\\]^_`{|}~\x00" as *const u8 as *const libc::c_char,
                  *(*ptr_to_globals).dot as libc::c_int,
                )
                .offset(0)
                  != 0
                {
                  (*ptr_to_globals).dot =
                    skip_thing((*ptr_to_globals).dot, 1i32, dir, S_END_PUNCT as libc::c_int)
                }
                (*ptr_to_globals).cmdcnt -= 1;
                if !((*ptr_to_globals).cmdcnt > 0) {
                  break;
                }
              }
              current_block = 15129665204879337069;
            }
            1085022737867179637 => {
              dot_begin();
              dot_skip_over_ws();
              current_block = 15129665204879337069;
            }
            3113147720494587438 => {
              c1 = get_one_char();
              if c1 != 'Z' as i32 {
                indicate_error();
              } else if (*ptr_to_globals).modified_count != 0 {
                if 1i32 != 0 && (*ptr_to_globals).readonly_mode as libc::c_int != 0 {
                  status_line_bold(
                    b"\'%s\' is read only\x00" as *const u8 as *const libc::c_char,
                    (*ptr_to_globals).current_filename,
                  );
                } else {
                  cnt = file_write(
                    (*ptr_to_globals).current_filename,
                    (*ptr_to_globals).text,
                    (*ptr_to_globals).end.offset(-1),
                  );
                  if cnt < 0 {
                    if cnt == -1i32 {
                      status_line_bold(b"Write error: %m\x00" as *const u8 as *const libc::c_char);
                    }
                  } else if cnt as libc::c_long
                    == (*ptr_to_globals)
                      .end
                      .offset(-1)
                      .wrapping_offset_from((*ptr_to_globals).text)
                      as libc::c_long
                      + 1
                  {
                    (*ptr_to_globals).editing = 0 as smallint
                  }
                }
              } else {
                (*ptr_to_globals).editing = 0 as smallint
              }
              current_block = 15129665204879337069;
            }
            12960118908218882441 => {
              p = begin_line((*ptr_to_globals).dot);
              if *p.offset(-1i32 as isize) as libc::c_int == '\n' as i32 {
                dot_prev();
                current_block = 2087484904894455135;
              } else {
                dot_begin();
                (*ptr_to_globals).dot =
                  char_insert((*ptr_to_globals).dot, '\n' as i32 as libc::c_char, 1i32);
                dot_prev();
                current_block = 8629930936610358348;
              }
            }
            8720450212473544924 => {
              (*ptr_to_globals).dot = (*ptr_to_globals).screenbegin;
              cnt = 0;
              while (cnt as libc::c_uint)
                < (*ptr_to_globals)
                  .rows
                  .wrapping_sub(1i32 as libc::c_uint)
                  .wrapping_div(2i32 as libc::c_uint)
              {
                (*ptr_to_globals).dot = next_line((*ptr_to_globals).dot);
                cnt += 1
              }
              current_block = 15129665204879337069;
            }
            13015277209715431090 => {
              (*ptr_to_globals).dot = end_screen();
              if (*ptr_to_globals).cmdcnt as libc::c_uint
                > (*ptr_to_globals).rows.wrapping_sub(1i32 as libc::c_uint)
              {
                (*ptr_to_globals).cmdcnt =
                  (*ptr_to_globals).rows.wrapping_sub(1i32 as libc::c_uint) as libc::c_int
              }
              (*ptr_to_globals).cmdcnt -= 1;
              if (*ptr_to_globals).cmdcnt > 0 {
                do_cmd('-' as i32);
              }
              dot_begin();
              dot_skip_over_ws();
              current_block = 15129665204879337069;
            }
            9800435767766781385 => {
              loop {
                dot_end();
                if (*ptr_to_globals).dot < (*ptr_to_globals).end.offset(-1) {
                  undo_push(
                    (*ptr_to_globals).dot,
                    1i32 as libc::c_uint,
                    1i32 as libc::c_uchar,
                  );
                  let fresh15 = (*ptr_to_globals).dot;
                  (*ptr_to_globals).dot = (*ptr_to_globals).dot.offset(1);
                  *fresh15 = ' ' as i32 as libc::c_char;
                  undo_push(
                    (*ptr_to_globals).dot.offset(-1),
                    1i32 as libc::c_uint,
                    2i32 as libc::c_uchar,
                  );
                  while ({
                    let mut bb__isblank: libc::c_uchar = *(*ptr_to_globals).dot as libc::c_uchar;
                    (bb__isblank as libc::c_int == ' ' as i32
                      || bb__isblank as libc::c_int == '\t' as i32)
                      as libc::c_int
                  }) != 0
                  {
                    text_hole_delete((*ptr_to_globals).dot, (*ptr_to_globals).dot, 2i32);
                  }
                }
                (*ptr_to_globals).cmdcnt -= 1;
                if !((*ptr_to_globals).cmdcnt > 0) {
                  break;
                }
              }
              end_cmd_q();
              current_block = 15129665204879337069;
            }
            3432363526595694666 => {
              dot_begin();
              dot_skip_over_ws();
              current_block = 3268579060917229304;
            }
            3494829253343353619 => {
              (*ptr_to_globals).dot = (*ptr_to_globals).screenbegin;
              if (*ptr_to_globals).cmdcnt as libc::c_uint
                > (*ptr_to_globals).rows.wrapping_sub(1i32 as libc::c_uint)
              {
                (*ptr_to_globals).cmdcnt =
                  (*ptr_to_globals).rows.wrapping_sub(1i32 as libc::c_uint) as libc::c_int
              }
              (*ptr_to_globals).cmdcnt -= 1;
              if (*ptr_to_globals).cmdcnt > 0 {
                do_cmd('+' as i32);
              }
              dot_skip_over_ws();
              current_block = 15129665204879337069;
            }
            17973101765331640574 => {
              c1 = get_one_char();
              if c1 != 'g' as i32 {
                buf[0] = 'g' as i32 as libc::c_char;
                buf[1] = if c1 >= 0 { c1 } else { '*' as i32 } as libc::c_char;
                buf[2] = '\u{0}' as i32 as libc::c_char;
                not_implemented(buf.as_mut_ptr());
                current_block = 15129665204879337069;
              } else {
                if (*ptr_to_globals).cmdcnt == 0 {
                  (*ptr_to_globals).cmdcnt = 1i32
                }
                current_block = 11945623545738147997;
              }
            }
            16546625800574160972 => {
              save_dot = (*ptr_to_globals).dot;
              (*ptr_to_globals).dot = dollar_line((*ptr_to_globals).dot);
              (*ptr_to_globals).dot = yank_delete(
                save_dot,
                (*ptr_to_globals).dot,
                0,
                YANKDEL as libc::c_int,
                1i32,
              );
              if c == 'C' as i32 {
                current_block = 8629930936610358348;
              } else {
                if c == 'D' as i32 {
                  end_cmd_q();
                }
                current_block = 15129665204879337069;
              }
            }
            11937696639986586685 => {
              cnt = count_lines((*ptr_to_globals).text, (*ptr_to_globals).dot);
              c1 = get_one_char();
              find_range(&mut p, &mut q, c1 as libc::c_char);
              yank_delete(p, q, 1i32, YANKONLY as libc::c_int, 0);
              p = begin_line(p);
              q = end_line(q);
              i = count_lines(p, q);
              while i > 0 {
                if c == '<' as i32 {
                  if *p as libc::c_int == '\t' as i32 {
                    text_hole_delete(p, p, 0);
                  } else if *p as libc::c_int == ' ' as i32 {
                    j = 0;
                    while *p as libc::c_int == ' ' as i32 && j < (*ptr_to_globals).tabstop {
                      text_hole_delete(p, p, 0);
                      j += 1
                    }
                  }
                } else if c == '>' as i32 {
                  char_insert(p, '\t' as i32 as libc::c_char, 1i32);
                }
                i -= 1;
                p = next_line(p)
              }
              (*ptr_to_globals).dot = find_line(cnt);
              dot_skip_over_ws();
              end_cmd_q();
              current_block = 15129665204879337069;
            }
            17725350714912028156 => {
              p = get_input_line(b":\x00" as *const u8 as *const libc::c_char);
              colon(p);
              current_block = 15129665204879337069;
            }
            14526470074083880812 => {
              q = char_search(
                (*ptr_to_globals).dot,
                b"\n\n\x00" as *const u8 as *const libc::c_char,
                (FORWARD as libc::c_int) << 1i32 | FULL as libc::c_int,
              );
              if !q.is_null() {
                (*ptr_to_globals).dot = next_line(q)
              }
              current_block = 15129665204879337069;
            }
            8893187391306414141 => {
              q = char_search(
                (*ptr_to_globals).dot,
                b"\n\n\x00" as *const u8 as *const libc::c_char,
                ((BACK as libc::c_int as libc::c_uint) << 1i32
                  | FULL as libc::c_int as libc::c_uint) as libc::c_int,
              );
              if !q.is_null() {
                (*ptr_to_globals).dot = next_line(q)
              }
              current_block = 15129665204879337069;
            }
            7021673758293221412 => {
              dir = BACK as libc::c_int;
              p = (*ptr_to_globals).dot.offset(-1);
              if *(*ptr_to_globals).last_search_pattern.offset(0) as libc::c_int == '?' as i32 {
                dir = FORWARD as libc::c_int;
                p = (*ptr_to_globals).dot.offset(1)
              }
              current_block = 4166979493554389389;
            }
            18374191879090272823 => {
              buf[0] = c as libc::c_char;
              buf[1] = '\u{0}' as i32 as libc::c_char;
              q = get_input_line(buf.as_mut_ptr());
              if *q.offset(0) as libc::c_int != 0 && *q.offset(1) == 0 {
                if *(*ptr_to_globals).last_search_pattern.offset(0) != 0 {
                  *(*ptr_to_globals).last_search_pattern.offset(0) = c as libc::c_char
                }
                current_block = 7392824444931029276;
              } else if *q.offset(0) != 0 {
                free((*ptr_to_globals).last_search_pattern as *mut libc::c_void);
                (*ptr_to_globals).last_search_pattern = crate::libbb::xfuncs_printf::xstrdup(q);
                current_block = 7392824444931029276;
              } else {
                current_block = 15129665204879337069;
              }
            }
            16407828456666301883 => {
              if (*ptr_to_globals).last_forward_char == 0 {
                current_block = 15129665204879337069;
              } else {
                loop {
                  q = (*ptr_to_globals).dot.offset(-1);
                  while q >= (*ptr_to_globals).text
                    && *q as libc::c_int != '\n' as i32
                    && *q as libc::c_int != (*ptr_to_globals).last_forward_char
                  {
                    q = q.offset(-1)
                  }
                  if q >= (*ptr_to_globals).text
                    && *q as libc::c_int == (*ptr_to_globals).last_forward_char
                  {
                    (*ptr_to_globals).dot = q
                  }
                  (*ptr_to_globals).cmdcnt -= 1;
                  if !((*ptr_to_globals).cmdcnt > 0) {
                    break;
                  }
                }
                current_block = 15129665204879337069;
              }
            }
            9018432604062702004 => {
              q = (*ptr_to_globals).dot;
              while q < (*ptr_to_globals).end && *q as libc::c_int != '\n' as i32 {
                if !strchr(
                  b"()[]{}\x00" as *const u8 as *const libc::c_char,
                  *q as libc::c_int,
                )
                .is_null()
                {
                  p = find_pair(q, *q);
                  if p.is_null() {
                    indicate_error();
                  } else {
                    (*ptr_to_globals).dot = p
                  }
                  break;
                } else {
                  q = q.offset(1)
                }
              }
              if *q as libc::c_int == '\n' as i32 {
                indicate_error();
              }
              current_block = 15129665204879337069;
            }
            10247103787464459848 => {
              p = (*ptr_to_globals).reg[(*ptr_to_globals).YDreg as usize];
              if p.is_null() {
                status_line_bold(
                  b"Nothing in register %c\x00" as *const u8 as *const libc::c_char,
                  what_reg() as libc::c_int,
                );
              } else {
                if !strchr(p, '\n' as i32).is_null() {
                  if c == 'P' as i32 {
                    dot_begin();
                  }
                  if c == 'p' as i32 {
                    if end_line((*ptr_to_globals).dot) == (*ptr_to_globals).end.offset(-1) {
                      (*ptr_to_globals).dot = (*ptr_to_globals).end
                    } else {
                      dot_next();
                    }
                  }
                } else if c == 'p' as i32 {
                  dot_right();
                }
                string_insert((*ptr_to_globals).dot, p, 1i32);
                end_cmd_q();
              }
              current_block = 15129665204879337069;
            }
            15260732871948875843 => {
              c1 = (get_one_char() | 0x20i32) - 'a' as i32;
              if c1 as libc::c_uint <= 25i32 as libc::c_uint {
                (*ptr_to_globals).mark[c1 as usize] = (*ptr_to_globals).dot
              } else {
                indicate_error();
              }
              current_block = 15129665204879337069;
            }
            12738322036487086035 => {
              c1 = get_one_char() | 0x20i32;
              if (c1 - 'a' as i32) as libc::c_uint <= 25i32 as libc::c_uint {
                c1 = c1 - 'a' as i32;
                q = (*ptr_to_globals).mark[c1 as usize];
                if (*ptr_to_globals).text <= q && q < (*ptr_to_globals).end {
                  (*ptr_to_globals).dot = q;
                  dot_begin();
                  dot_skip_over_ws();
                }
              } else if c1 == '\'' as i32 {
                (*ptr_to_globals).dot = swap_context((*ptr_to_globals).dot);
                dot_begin();
                dot_skip_over_ws();
              } else {
                indicate_error();
              }
              current_block = 15129665204879337069;
            }
            13255096073384561358 => {
              c1 = (get_one_char() | 0x20i32) - 'a' as i32;
              if c1 as libc::c_uint <= 25i32 as libc::c_uint {
                (*ptr_to_globals).YDreg = c1 as smalluint
              } else {
                indicate_error();
              }
              current_block = 15129665204879337069;
            }
            10258711639984089377 => {
              if (*ptr_to_globals).cmd_mode as libc::c_int == 0 {
                indicate_error();
              }
              (*ptr_to_globals).cmd_mode = 0 as smallint;
              undo_queue_commit();
              end_cmd_q();
              (*ptr_to_globals).last_status_cksum = 0;
              current_block = 15129665204879337069;
            }
            11439127087547047736 => {
              buf[0] = c as libc::c_char;
              buf[1] = '\u{0}' as i32 as libc::c_char;
              not_implemented(buf.as_mut_ptr());
              end_cmd_q();
              current_block = 17440971994642376514;
            }
            7961798899781870241 => {
              dot_scroll(
                (*ptr_to_globals).rows.wrapping_sub(2i32 as libc::c_uint) as libc::c_int,
                -1i32,
              );
              current_block = 15129665204879337069;
            }
            9426343755402444879 => {
              dot_scroll(
                (*ptr_to_globals)
                  .rows
                  .wrapping_sub(2i32 as libc::c_uint)
                  .wrapping_div(2i32 as libc::c_uint) as libc::c_int,
                1i32,
              );
              current_block = 15129665204879337069;
            }
            13352459794680105913 => {
              dot_scroll(1i32, 1i32);
              current_block = 15129665204879337069;
            }
            14142272253464333006 => {
              dot_scroll(
                (*ptr_to_globals).rows.wrapping_sub(2i32 as libc::c_uint) as libc::c_int,
                1i32,
              );
              current_block = 15129665204879337069;
            }
            10758177197742640066 => {
              (*ptr_to_globals).last_status_cksum = 0;
              current_block = 15129665204879337069;
            }
            6152256259730122749 => {
              current_block = 7534742345255184552;
            }
            12883932598258173301 => {
              current_block = 8800996768013373992;
            }
            11242998110520238401 => {
              redraw(1i32);
              current_block = 15129665204879337069;
            }
            13619733043935729992 => {
              loop {
                dot_next();
                dot_skip_over_ws();
                (*ptr_to_globals).cmdcnt -= 1;
                if !((*ptr_to_globals).cmdcnt > 0) {
                  break;
                }
              }
              current_block = 15129665204879337069;
            }
            9339065157412720613 => {
              dot_scroll(
                (*ptr_to_globals)
                  .rows
                  .wrapping_sub(2i32 as libc::c_uint)
                  .wrapping_div(2i32 as libc::c_uint) as libc::c_int,
                -1i32,
              );
              current_block = 15129665204879337069;
            }
            11447082683497798022 => {
              dot_scroll(1i32, -1i32);
              current_block = 15129665204879337069;
            }
            5182000506326660482 => {
              current_block = 13993698454868426881;
            }
            1105010766850597332 => {
              if !(*ptr_to_globals).reg[27].is_null() {
                p = begin_line((*ptr_to_globals).dot);
                q = end_line((*ptr_to_globals).dot);
                p = text_hole_delete(p, q, 1i32);
                p = p.offset(string_insert(p, (*ptr_to_globals).reg[27], 2i32) as isize);
                (*ptr_to_globals).dot = p;
                dot_skip_over_ws();
              }
              current_block = 15129665204879337069;
            }
            8616046655533110204 => {
              undo_pop();
              current_block = 15129665204879337069;
            }
            5127767458142431603 => {
              loop {
                (*ptr_to_globals).dot = end_line((*ptr_to_globals).dot);
                (*ptr_to_globals).cmdcnt -= 1;
                if (*ptr_to_globals).cmdcnt <= 0 {
                  break;
                }
                dot_next();
              }
              current_block = 15129665204879337069;
            }
            222014967776118151 => {
              (*ptr_to_globals).last_forward_char = get_one_char();
              current_block = 7856905509180742666;
            }
            11209792479411604110 => {
              loop {
                dot_prev();
                dot_skip_over_ws();
                (*ptr_to_globals).cmdcnt -= 1;
                if !((*ptr_to_globals).cmdcnt > 0) {
                  break;
                }
              }
              current_block = 15129665204879337069;
            }
            3364823792826654116 => {
              if (*ptr_to_globals).lmc_len != 0 {
                (*ptr_to_globals).ioq_start = crate::libbb::xfuncs_printf::xstrndup(
                  (*ptr_to_globals).last_modifying_cmd.as_mut_ptr(),
                  (*ptr_to_globals).lmc_len,
                );
                (*ptr_to_globals).ioq = (*ptr_to_globals).ioq_start
              }
              current_block = 15129665204879337069;
            }
            18096603330221575131 => {
              current_block = 17498168302144015873;
            }
            16891123271837848903 => {
              dot_end();
              current_block = 1752638907092016026;
            }
            8517235759107662071 => {
              current_block = 5847749760081351726;
            }
            12525254419223051704 => {
              if (*ptr_to_globals).dot < (*ptr_to_globals).end.offset(-1) {
                (*ptr_to_globals).dot = yank_delete(
                  (*ptr_to_globals).dot,
                  (*ptr_to_globals).dot,
                  1i32,
                  YANKDEL as libc::c_int,
                  1i32,
                )
              }
              current_block = 15129665204879337069;
            }
            15232911949322867522 => {
              current_block = 17251831742223396249;
            }
            10863374208794025069 => {
              current_block = 1895262434596074581;
            }
            451126677064669119 => {
              loop {
                dot_prev();
                (*ptr_to_globals).dot = move_to_col(
                  (*ptr_to_globals).dot,
                  (*ptr_to_globals).ccol + (*ptr_to_globals).offset,
                );
                (*ptr_to_globals).cmdcnt -= 1;
                if !((*ptr_to_globals).cmdcnt > 0) {
                  break;
                }
              }
              current_block = 15129665204879337069;
            }
            4611735929166613116 => {
              loop {
                if bb_ascii_isalnum(*(*ptr_to_globals).dot as libc::c_uchar) != 0
                  || *(*ptr_to_globals).dot as libc::c_int == '_' as i32
                {
                  (*ptr_to_globals).dot = skip_thing(
                    (*ptr_to_globals).dot,
                    1i32,
                    FORWARD as libc::c_int,
                    S_END_ALNUM as libc::c_int,
                  )
                } else if *strchrnul(
                  b"!\"#$%&\'()*+,-./:;<=>?@[\\]^_`{|}~\x00" as *const u8 as *const libc::c_char,
                  *(*ptr_to_globals).dot as libc::c_int,
                )
                .offset(0)
                  != 0
                {
                  (*ptr_to_globals).dot = skip_thing(
                    (*ptr_to_globals).dot,
                    1i32,
                    FORWARD as libc::c_int,
                    S_END_PUNCT as libc::c_int,
                  )
                }
                if (*ptr_to_globals).dot < (*ptr_to_globals).end.offset(-1) {
                  (*ptr_to_globals).dot = (*ptr_to_globals).dot.offset(1)
                }
                if ({
                  let mut bb__isspace: libc::c_uchar =
                    (*(*ptr_to_globals).dot as libc::c_int - 9i32) as libc::c_uchar;
                  (bb__isspace as libc::c_int == ' ' as i32 - 9i32
                    || bb__isspace as libc::c_int <= 13i32 - 9i32) as libc::c_int
                }) != 0
                {
                  (*ptr_to_globals).dot = skip_thing(
                    (*ptr_to_globals).dot,
                    2i32,
                    FORWARD as libc::c_int,
                    S_OVER_WS as libc::c_int,
                  )
                }
                (*ptr_to_globals).cmdcnt -= 1;
                if !((*ptr_to_globals).cmdcnt > 0) {
                  break;
                }
              }
              current_block = 15129665204879337069;
            }
            4386451087681909888 => {
              (*ptr_to_globals).dot =
                move_to_col((*ptr_to_globals).dot, (*ptr_to_globals).cmdcnt - 1i32);
              current_block = 15129665204879337069;
            }
            1296397779060594135 => {
              dot_begin();
              current_block = 15129665204879337069;
            }
            _ => {}
          }
          match current_block {
            15129665204879337069 => {}
            8629930936610358348 => {}
            _ => {
              match current_block {
                17251831742223396249 => {
                  dir = 0;
                  if c == 'X' as i32 {
                    dir = -1i32
                  }
                  loop {
                    if *(*ptr_to_globals).dot.offset(dir as isize) as libc::c_int != '\n' as i32 {
                      if c == 'X' as i32 {
                        (*ptr_to_globals).dot = (*ptr_to_globals).dot.offset(-1)
                      }
                      (*ptr_to_globals).dot = yank_delete(
                        (*ptr_to_globals).dot,
                        (*ptr_to_globals).dot,
                        0,
                        YANKDEL as libc::c_int,
                        1i32,
                      )
                    }
                    (*ptr_to_globals).cmdcnt -= 1;
                    if !((*ptr_to_globals).cmdcnt > 0) {
                      break;
                    }
                  }
                  end_cmd_q();
                  if c == 's' as i32 {
                    current_block = 8629930936610358348;
                  } else {
                    current_block = 15129665204879337069;
                  }
                }
                2087484904894455135 => {
                  dot_end();
                  (*ptr_to_globals).dot =
                    char_insert((*ptr_to_globals).dot, '\n' as i32 as libc::c_char, 1i32);
                  current_block = 8629930936610358348;
                }
                11945623545738147997 => {
                  (*ptr_to_globals).dot = (*ptr_to_globals).end.offset(-1);
                  if (*ptr_to_globals).cmdcnt > 0 {
                    (*ptr_to_globals).dot = find_line((*ptr_to_globals).cmdcnt)
                  }
                  dot_skip_over_ws();
                  current_block = 15129665204879337069;
                }
                5847749760081351726 => {
                  dir = FORWARD as libc::c_int;
                  if c == 'B' as i32 {
                    dir = BACK as libc::c_int
                  }
                  loop {
                    if c == 'W' as i32
                      || ({
                        let mut bb__isspace: libc::c_uchar =
                          (*(*ptr_to_globals).dot.offset(dir as isize) as libc::c_int - 9i32)
                            as libc::c_uchar;
                        (bb__isspace as libc::c_int == ' ' as i32 - 9i32
                          || bb__isspace as libc::c_int <= 13i32 - 9i32)
                          as libc::c_int
                      }) != 0
                    {
                      (*ptr_to_globals).dot =
                        skip_thing((*ptr_to_globals).dot, 1i32, dir, S_TO_WS as libc::c_int);
                      (*ptr_to_globals).dot =
                        skip_thing((*ptr_to_globals).dot, 2i32, dir, S_OVER_WS as libc::c_int)
                    }
                    if c != 'W' as i32 {
                      (*ptr_to_globals).dot =
                        skip_thing((*ptr_to_globals).dot, 1i32, dir, S_BEFORE_WS as libc::c_int)
                    }
                    (*ptr_to_globals).cmdcnt -= 1;
                    if !((*ptr_to_globals).cmdcnt > 0) {
                      break;
                    }
                  }
                  current_block = 15129665204879337069;
                }
                17440971994642376514 => {
                  current_block = 15129665204879337069;
                }
                7534742345255184552 => {
                  current_block = 17247297260531395789;
                }
                8800996768013373992 => {
                  loop {
                    dot_next();
                    (*ptr_to_globals).dot = move_to_col(
                      (*ptr_to_globals).dot,
                      (*ptr_to_globals).ccol + (*ptr_to_globals).offset,
                    );
                    (*ptr_to_globals).cmdcnt -= 1;
                    if !((*ptr_to_globals).cmdcnt > 0) {
                      break;
                    }
                  }
                  current_block = 15129665204879337069;
                }
                13993698454868426881 => {
                  loop {
                    dot_right();
                    (*ptr_to_globals).cmdcnt -= 1;
                    if !((*ptr_to_globals).cmdcnt > 0) {
                      break;
                    }
                  }
                  current_block = 15129665204879337069;
                }
                7856905509180742666 => {
                  while !((*ptr_to_globals).last_forward_char == 0) {
                    q = (*ptr_to_globals).dot.offset(1);
                    while q < (*ptr_to_globals).end.offset(-1)
                      && *q as libc::c_int != '\n' as i32
                      && *q as libc::c_int != (*ptr_to_globals).last_forward_char
                    {
                      q = q.offset(1)
                    }
                    if *q as libc::c_int == (*ptr_to_globals).last_forward_char {
                      (*ptr_to_globals).dot = q
                    }
                    (*ptr_to_globals).cmdcnt -= 1;
                    if !((*ptr_to_globals).cmdcnt > 0) {
                      break;
                    }
                  }
                  current_block = 15129665204879337069;
                }
                17498168302144015873 => {
                  current_block = 8681395796513813967;
                }
                1752638907092016026 => {
                  if *(*ptr_to_globals).dot as libc::c_int != '\n' as i32 {
                    (*ptr_to_globals).dot = (*ptr_to_globals).dot.offset(1)
                  }
                  current_block = 8629930936610358348;
                }
                3268579060917229304 => {
                  current_block = 8629930936610358348;
                }
                1895262434596074581 => {
                  current_block = 8908416993177701018;
                }
                _ => {}
              }
              match current_block {
                8629930936610358348 => {}
                15129665204879337069 => {}
                _ => {
                  match current_block {
                    17247297260531395789 => {
                      loop {
                        dot_left();
                        (*ptr_to_globals).cmdcnt -= 1;
                        if !((*ptr_to_globals).cmdcnt > 0) {
                          break;
                        }
                      }
                      current_block = 15129665204879337069;
                    }
                    8681395796513813967 => {
                      current_block = 5591548203144509315;
                    }
                    8908416993177701018 => {
                      current_block = 16124761010012532485;
                    }
                    _ => {}
                  }
                  match current_block {
                    15129665204879337069 => {}
                    _ => {
                      match current_block {
                        16124761010012532485 => {
                          let mut yf: libc::c_int = 0;
                          let mut ml: libc::c_int = 0;
                          let mut whole: libc::c_int = 0;
                          yf = YANKDEL as libc::c_int;
                          if c == 'y' as i32 || c == 'Y' as i32 {
                            yf = YANKONLY as libc::c_int
                          }
                          c1 = 'y' as i32;
                          if c != 'Y' as i32 {
                            c1 = get_one_char()
                          }
                          ml = find_range(&mut p, &mut q, c1 as libc::c_char);
                          place_cursor(0i32, 0);
                          if c1 == 27i32 {
                            c1 = 27i32;
                            c = c1
                          } else if !strchr(b"wW\x00" as *const u8 as *const libc::c_char, c1)
                            .is_null()
                          {
                            ml = 0;
                            if c == 'c' as i32 {
                              while ({
                                let mut bb__isspace: libc::c_uchar =
                                  (*q as libc::c_int - 9i32) as libc::c_uchar;
                                (bb__isspace as libc::c_int == ' ' as i32 - 9i32
                                  || bb__isspace as libc::c_int <= 13i32 - 9i32)
                                  as libc::c_int
                              }) != 0
                                && q > p
                              {
                                q = q.offset(-1)
                              }
                            }
                            (*ptr_to_globals).dot = yank_delete(p, q, ml, yf, 1i32)
                          } else if !strchr(
                            b"^0bBeEft%$ lh\x08\x7f\x00" as *const u8 as *const libc::c_char,
                            c1,
                          )
                          .is_null()
                          {
                            (*ptr_to_globals).dot = yank_delete(p, q, ml, yf, 1i32)
                          } else if !strchr(
                            b"cdykjGHL+-{}\r\n\x00" as *const u8 as *const libc::c_char,
                            c1,
                          )
                          .is_null()
                          {
                            (*ptr_to_globals).dot = yank_delete(p, q, ml, yf, 1i32);
                            whole = 1i32
                          } else {
                            c1 = 27i32;
                            c = c1;
                            ml = 0;
                            indicate_error();
                          }
                          if ml != 0 && whole != 0 {
                            if c == 'c' as i32 {
                              (*ptr_to_globals).dot = char_insert(
                                (*ptr_to_globals).dot,
                                '\n' as i32 as libc::c_char,
                                2i32,
                              );
                              if whole != 0
                                && (*ptr_to_globals).dot != (*ptr_to_globals).end.offset(-1)
                              {
                                dot_prev();
                              }
                            } else if c == 'd' as i32 {
                              dot_begin();
                              dot_skip_over_ws();
                            }
                          }
                          if c1 != 27i32 {
                            if c == 'c' as i32 {
                              strcpy(
                                buf.as_mut_ptr(),
                                b"Change\x00" as *const u8 as *const libc::c_char,
                              );
                              current_block = 8629930936610358348;
                            } else {
                              if c == 'd' as i32 {
                                strcpy(
                                  buf.as_mut_ptr(),
                                  b"Delete\x00" as *const u8 as *const libc::c_char,
                                );
                              }
                              if c == 'y' as i32 || c == 'Y' as i32 {
                                strcpy(
                                  buf.as_mut_ptr(),
                                  b"Yank\x00" as *const u8 as *const libc::c_char,
                                );
                              }
                              p = (*ptr_to_globals).reg[(*ptr_to_globals).YDreg as usize];
                              q = p.offset(strlen(p) as isize);
                              cnt = 0;
                              while p <= q {
                                if *p as libc::c_int == '\n' as i32 {
                                  cnt += 1
                                }
                                p = p.offset(1)
                              }
                              status_line(
                                b"%s %u lines (%u chars) using [%c]\x00" as *const u8
                                  as *const libc::c_char,
                                buf.as_mut_ptr(),
                                cnt,
                                strlen((*ptr_to_globals).reg[(*ptr_to_globals).YDreg as usize])
                                  as libc::c_uint,
                                what_reg() as libc::c_int,
                              );
                              end_cmd_q();
                              current_block = 15129665204879337069;
                            }
                          } else {
                            current_block = 15129665204879337069;
                          }
                        }
                        5591548203144509315 => {
                          current_block = 2636677179867529885;
                        }
                        _ => {}
                      }
                      match current_block {
                        15129665204879337069 => {}
                        8629930936610358348 => {}
                        _ => {
                          match current_block {
                            2636677179867529885 => {
                              current_block = 12309206730560524281;
                            }
                            _ => {}
                          }
                          match current_block {
                            12309206730560524281 => {
                              current_block = 3325768110057758661;
                            }
                            _ => {}
                          }
                          match current_block {
                            3325768110057758661 => {
                              current_block = 14815832896553429982;
                            }
                            _ => {}
                          }
                          match current_block {
                            14815832896553429982 => {
                              current_block = 10731695520297161438;
                            }
                            _ => {}
                          }
                          match current_block {
                            10731695520297161438 => {
                              if c == '0' as i32 && (*ptr_to_globals).cmdcnt < 1i32 {
                                dot_begin();
                              } else {
                                (*ptr_to_globals).cmdcnt =
                                  (*ptr_to_globals).cmdcnt * 10i32 + (c - '0' as i32)
                              }
                              current_block = 15129665204879337069;
                            }
                            _ => {}
                          }
                          match current_block {
                            15129665204879337069 => {}
                            _ => {
                              loop {
                                match current_block {
                                  16813369756331276724 => {
                                    msg = std::ptr::null();
                                    current_block = 7392824444931029276;
                                  }
                                  7392824444931029276 => {
                                    dir = FORWARD as libc::c_int;
                                    p = (*ptr_to_globals).dot.offset(1);
                                    if *(*ptr_to_globals).last_search_pattern.offset(0)
                                      as libc::c_int
                                      == '?' as i32
                                    {
                                      dir = BACK as libc::c_int;
                                      p = (*ptr_to_globals).dot.offset(-1)
                                    }
                                    current_block = 4166979493554389389;
                                  }
                                  _ => {
                                    q = char_search(
                                      p,
                                      (*ptr_to_globals).last_search_pattern.offset(1),
                                      dir << 1i32 | FULL as libc::c_int,
                                    );
                                    if !q.is_null() {
                                      (*ptr_to_globals).dot = q;
                                      msg = std::ptr::null()
                                    } else {
                                      p = (*ptr_to_globals).text;
                                      if dir == BACK as libc::c_int {
                                        p = (*ptr_to_globals).end.offset(-1)
                                      }
                                      q = char_search(
                                        p,
                                        (*ptr_to_globals).last_search_pattern.offset(1),
                                        dir << 1i32 | FULL as libc::c_int,
                                      );
                                      if !q.is_null() {
                                        (*ptr_to_globals).dot = q;
                                        msg = b"search hit BOTTOM, continuing at TOP\x00"
                                          as *const u8
                                          as *const libc::c_char;
                                        if dir == BACK as libc::c_int {
                                          msg = b"search hit TOP, continuing at BOTTOM\x00"
                                            as *const u8
                                            as *const libc::c_char
                                        }
                                      } else {
                                        msg = b"Pattern not found\x00" as *const u8
                                          as *const libc::c_char
                                      }
                                    }
                                    if !msg.is_null() {
                                      status_line_bold(
                                        b"%s\x00" as *const u8 as *const libc::c_char,
                                        msg,
                                      );
                                    }
                                    (*ptr_to_globals).cmdcnt -= 1;
                                    if (*ptr_to_globals).cmdcnt > 0 {
                                      current_block = 16813369756331276724;
                                    } else {
                                      break;
                                    }
                                  }
                                }
                              }
                              current_block = 15129665204879337069;
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
        -8 => {
          current_block = 8629930936610358348;
        }
        74 => {
          current_block = 9800435767766781385;
          match current_block {
            16992905640583886232 => {
              loop {
                if (*(*ptr_to_globals).dot as libc::c_int - 'a' as i32) as libc::c_uchar
                  as libc::c_int
                  <= 'z' as i32 - 'a' as i32
                {
                  undo_push(
                    (*ptr_to_globals).dot,
                    1i32 as libc::c_uint,
                    1i32 as libc::c_uchar,
                  );
                  *(*ptr_to_globals).dot =
                    bb_ascii_toupper(*(*ptr_to_globals).dot as libc::c_uchar) as libc::c_char;
                  undo_push(
                    (*ptr_to_globals).dot,
                    1i32 as libc::c_uint,
                    2i32 as libc::c_uchar,
                  );
                } else if (*(*ptr_to_globals).dot as libc::c_int - 'A' as i32) as libc::c_uchar
                  as libc::c_int
                  <= 'Z' as i32 - 'A' as i32
                {
                  undo_push(
                    (*ptr_to_globals).dot,
                    1i32 as libc::c_uint,
                    1i32 as libc::c_uchar,
                  );
                  *(*ptr_to_globals).dot =
                    bb_ascii_tolower(*(*ptr_to_globals).dot as libc::c_uchar) as libc::c_char;
                  undo_push(
                    (*ptr_to_globals).dot,
                    1i32 as libc::c_uint,
                    2i32 as libc::c_uchar,
                  );
                }
                dot_right();
                (*ptr_to_globals).cmdcnt -= 1;
                if !((*ptr_to_globals).cmdcnt > 0) {
                  break;
                }
              }
              end_cmd_q();
              current_block = 15129665204879337069;
            }
            8729655159604064397 => {
              c1 = get_one_char();
              cnt = 0;
              if c1 == '.' as i32 {
                cnt = (*ptr_to_globals)
                  .rows
                  .wrapping_sub(2i32 as libc::c_uint)
                  .wrapping_div(2i32 as libc::c_uint) as libc::c_int
              }
              if c1 == '-' as i32 {
                cnt = (*ptr_to_globals).rows.wrapping_sub(2i32 as libc::c_uint) as libc::c_int
              }
              (*ptr_to_globals).screenbegin = begin_line((*ptr_to_globals).dot);
              dot_scroll(cnt, -1i32);
              current_block = 15129665204879337069;
            }
            15899500648299942075 => {
              (*ptr_to_globals).last_forward_char = get_one_char();
              do_cmd(';' as i32);
              if *(*ptr_to_globals).dot as libc::c_int == (*ptr_to_globals).last_forward_char {
                dot_left();
              }
              (*ptr_to_globals).last_forward_char = 0;
              current_block = 15129665204879337069;
            }
            9051390181078481641 => {
              c1 = get_one_char();
              if *(*ptr_to_globals).dot as libc::c_int != '\n' as i32 {
                (*ptr_to_globals).dot =
                  text_hole_delete((*ptr_to_globals).dot, (*ptr_to_globals).dot, 1i32);
                (*ptr_to_globals).dot =
                  char_insert((*ptr_to_globals).dot, c1 as libc::c_char, 2i32);
                dot_left();
              }
              end_cmd_q();
              current_block = 15129665204879337069;
            }
            877115918601926659 => {
              dir = FORWARD as libc::c_int;
              if c == 'b' as i32 {
                dir = BACK as libc::c_int
              }
              while !((*ptr_to_globals).dot.offset(dir as isize) < (*ptr_to_globals).text
                || (*ptr_to_globals).dot.offset(dir as isize) > (*ptr_to_globals).end.offset(-1))
              {
                (*ptr_to_globals).dot = (*ptr_to_globals).dot.offset(dir as isize);
                if ({
                  let mut bb__isspace: libc::c_uchar =
                    (*(*ptr_to_globals).dot as libc::c_int - 9i32) as libc::c_uchar;
                  (bb__isspace as libc::c_int == ' ' as i32 - 9i32
                    || bb__isspace as libc::c_int <= 13i32 - 9i32) as libc::c_int
                }) != 0
                {
                  (*ptr_to_globals).dot = skip_thing(
                    (*ptr_to_globals).dot,
                    if c == 'e' as i32 { 2i32 } else { 1i32 },
                    dir,
                    S_OVER_WS as libc::c_int,
                  )
                }
                if bb_ascii_isalnum(*(*ptr_to_globals).dot as libc::c_uchar) != 0
                  || *(*ptr_to_globals).dot as libc::c_int == '_' as i32
                {
                  (*ptr_to_globals).dot =
                    skip_thing((*ptr_to_globals).dot, 1i32, dir, S_END_ALNUM as libc::c_int)
                } else if *strchrnul(
                  b"!\"#$%&\'()*+,-./:;<=>?@[\\]^_`{|}~\x00" as *const u8 as *const libc::c_char,
                  *(*ptr_to_globals).dot as libc::c_int,
                )
                .offset(0)
                  != 0
                {
                  (*ptr_to_globals).dot =
                    skip_thing((*ptr_to_globals).dot, 1i32, dir, S_END_PUNCT as libc::c_int)
                }
                (*ptr_to_globals).cmdcnt -= 1;
                if !((*ptr_to_globals).cmdcnt > 0) {
                  break;
                }
              }
              current_block = 15129665204879337069;
            }
            1085022737867179637 => {
              dot_begin();
              dot_skip_over_ws();
              current_block = 15129665204879337069;
            }
            3113147720494587438 => {
              c1 = get_one_char();
              if c1 != 'Z' as i32 {
                indicate_error();
              } else if (*ptr_to_globals).modified_count != 0 {
                if 1i32 != 0 && (*ptr_to_globals).readonly_mode as libc::c_int != 0 {
                  status_line_bold(
                    b"\'%s\' is read only\x00" as *const u8 as *const libc::c_char,
                    (*ptr_to_globals).current_filename,
                  );
                } else {
                  cnt = file_write(
                    (*ptr_to_globals).current_filename,
                    (*ptr_to_globals).text,
                    (*ptr_to_globals).end.offset(-1),
                  );
                  if cnt < 0 {
                    if cnt == -1i32 {
                      status_line_bold(b"Write error: %m\x00" as *const u8 as *const libc::c_char);
                    }
                  } else if cnt as libc::c_long
                    == (*ptr_to_globals)
                      .end
                      .offset(-1)
                      .wrapping_offset_from((*ptr_to_globals).text)
                      as libc::c_long
                      + 1
                  {
                    (*ptr_to_globals).editing = 0 as smallint
                  }
                }
              } else {
                (*ptr_to_globals).editing = 0 as smallint
              }
              current_block = 15129665204879337069;
            }
            12960118908218882441 => {
              p = begin_line((*ptr_to_globals).dot);
              if *p.offset(-1i32 as isize) as libc::c_int == '\n' as i32 {
                dot_prev();
                current_block = 2087484904894455135;
              } else {
                dot_begin();
                (*ptr_to_globals).dot =
                  char_insert((*ptr_to_globals).dot, '\n' as i32 as libc::c_char, 1i32);
                dot_prev();
                current_block = 8629930936610358348;
              }
            }
            8720450212473544924 => {
              (*ptr_to_globals).dot = (*ptr_to_globals).screenbegin;
              cnt = 0;
              while (cnt as libc::c_uint)
                < (*ptr_to_globals)
                  .rows
                  .wrapping_sub(1i32 as libc::c_uint)
                  .wrapping_div(2i32 as libc::c_uint)
              {
                (*ptr_to_globals).dot = next_line((*ptr_to_globals).dot);
                cnt += 1
              }
              current_block = 15129665204879337069;
            }
            13015277209715431090 => {
              (*ptr_to_globals).dot = end_screen();
              if (*ptr_to_globals).cmdcnt as libc::c_uint
                > (*ptr_to_globals).rows.wrapping_sub(1i32 as libc::c_uint)
              {
                (*ptr_to_globals).cmdcnt =
                  (*ptr_to_globals).rows.wrapping_sub(1i32 as libc::c_uint) as libc::c_int
              }
              (*ptr_to_globals).cmdcnt -= 1;
              if (*ptr_to_globals).cmdcnt > 0 {
                do_cmd('-' as i32);
              }
              dot_begin();
              dot_skip_over_ws();
              current_block = 15129665204879337069;
            }
            9800435767766781385 => {
              loop {
                dot_end();
                if (*ptr_to_globals).dot < (*ptr_to_globals).end.offset(-1) {
                  undo_push(
                    (*ptr_to_globals).dot,
                    1i32 as libc::c_uint,
                    1i32 as libc::c_uchar,
                  );
                  let fresh15 = (*ptr_to_globals).dot;
                  (*ptr_to_globals).dot = (*ptr_to_globals).dot.offset(1);
                  *fresh15 = ' ' as i32 as libc::c_char;
                  undo_push(
                    (*ptr_to_globals).dot.offset(-1),
                    1i32 as libc::c_uint,
                    2i32 as libc::c_uchar,
                  );
                  while ({
                    let mut bb__isblank: libc::c_uchar = *(*ptr_to_globals).dot as libc::c_uchar;
                    (bb__isblank as libc::c_int == ' ' as i32
                      || bb__isblank as libc::c_int == '\t' as i32)
                      as libc::c_int
                  }) != 0
                  {
                    text_hole_delete((*ptr_to_globals).dot, (*ptr_to_globals).dot, 2i32);
                  }
                }
                (*ptr_to_globals).cmdcnt -= 1;
                if !((*ptr_to_globals).cmdcnt > 0) {
                  break;
                }
              }
              end_cmd_q();
              current_block = 15129665204879337069;
            }
            3432363526595694666 => {
              dot_begin();
              dot_skip_over_ws();
              current_block = 3268579060917229304;
            }
            3494829253343353619 => {
              (*ptr_to_globals).dot = (*ptr_to_globals).screenbegin;
              if (*ptr_to_globals).cmdcnt as libc::c_uint
                > (*ptr_to_globals).rows.wrapping_sub(1i32 as libc::c_uint)
              {
                (*ptr_to_globals).cmdcnt =
                  (*ptr_to_globals).rows.wrapping_sub(1i32 as libc::c_uint) as libc::c_int
              }
              (*ptr_to_globals).cmdcnt -= 1;
              if (*ptr_to_globals).cmdcnt > 0 {
                do_cmd('+' as i32);
              }
              dot_skip_over_ws();
              current_block = 15129665204879337069;
            }
            17973101765331640574 => {
              c1 = get_one_char();
              if c1 != 'g' as i32 {
                buf[0] = 'g' as i32 as libc::c_char;
                buf[1] = if c1 >= 0 { c1 } else { '*' as i32 } as libc::c_char;
                buf[2] = '\u{0}' as i32 as libc::c_char;
                not_implemented(buf.as_mut_ptr());
                current_block = 15129665204879337069;
              } else {
                if (*ptr_to_globals).cmdcnt == 0 {
                  (*ptr_to_globals).cmdcnt = 1i32
                }
                current_block = 11945623545738147997;
              }
            }
            16546625800574160972 => {
              save_dot = (*ptr_to_globals).dot;
              (*ptr_to_globals).dot = dollar_line((*ptr_to_globals).dot);
              (*ptr_to_globals).dot = yank_delete(
                save_dot,
                (*ptr_to_globals).dot,
                0,
                YANKDEL as libc::c_int,
                1i32,
              );
              if c == 'C' as i32 {
                current_block = 8629930936610358348;
              } else {
                if c == 'D' as i32 {
                  end_cmd_q();
                }
                current_block = 15129665204879337069;
              }
            }
            11937696639986586685 => {
              cnt = count_lines((*ptr_to_globals).text, (*ptr_to_globals).dot);
              c1 = get_one_char();
              find_range(&mut p, &mut q, c1 as libc::c_char);
              yank_delete(p, q, 1i32, YANKONLY as libc::c_int, 0);
              p = begin_line(p);
              q = end_line(q);
              i = count_lines(p, q);
              while i > 0 {
                if c == '<' as i32 {
                  if *p as libc::c_int == '\t' as i32 {
                    text_hole_delete(p, p, 0);
                  } else if *p as libc::c_int == ' ' as i32 {
                    j = 0;
                    while *p as libc::c_int == ' ' as i32 && j < (*ptr_to_globals).tabstop {
                      text_hole_delete(p, p, 0);
                      j += 1
                    }
                  }
                } else if c == '>' as i32 {
                  char_insert(p, '\t' as i32 as libc::c_char, 1i32);
                }
                i -= 1;
                p = next_line(p)
              }
              (*ptr_to_globals).dot = find_line(cnt);
              dot_skip_over_ws();
              end_cmd_q();
              current_block = 15129665204879337069;
            }
            17725350714912028156 => {
              p = get_input_line(b":\x00" as *const u8 as *const libc::c_char);
              colon(p);
              current_block = 15129665204879337069;
            }
            14526470074083880812 => {
              q = char_search(
                (*ptr_to_globals).dot,
                b"\n\n\x00" as *const u8 as *const libc::c_char,
                (FORWARD as libc::c_int) << 1i32 | FULL as libc::c_int,
              );
              if !q.is_null() {
                (*ptr_to_globals).dot = next_line(q)
              }
              current_block = 15129665204879337069;
            }
            8893187391306414141 => {
              q = char_search(
                (*ptr_to_globals).dot,
                b"\n\n\x00" as *const u8 as *const libc::c_char,
                ((BACK as libc::c_int as libc::c_uint) << 1i32
                  | FULL as libc::c_int as libc::c_uint) as libc::c_int,
              );
              if !q.is_null() {
                (*ptr_to_globals).dot = next_line(q)
              }
              current_block = 15129665204879337069;
            }
            7021673758293221412 => {
              dir = BACK as libc::c_int;
              p = (*ptr_to_globals).dot.offset(-1);
              if *(*ptr_to_globals).last_search_pattern.offset(0) as libc::c_int == '?' as i32 {
                dir = FORWARD as libc::c_int;
                p = (*ptr_to_globals).dot.offset(1)
              }
              current_block = 4166979493554389389;
            }
            18374191879090272823 => {
              buf[0] = c as libc::c_char;
              buf[1] = '\u{0}' as i32 as libc::c_char;
              q = get_input_line(buf.as_mut_ptr());
              if *q.offset(0) as libc::c_int != 0 && *q.offset(1) == 0 {
                if *(*ptr_to_globals).last_search_pattern.offset(0) != 0 {
                  *(*ptr_to_globals).last_search_pattern.offset(0) = c as libc::c_char
                }
                current_block = 7392824444931029276;
              } else if *q.offset(0) != 0 {
                free((*ptr_to_globals).last_search_pattern as *mut libc::c_void);
                (*ptr_to_globals).last_search_pattern = crate::libbb::xfuncs_printf::xstrdup(q);
                current_block = 7392824444931029276;
              } else {
                current_block = 15129665204879337069;
              }
            }
            16407828456666301883 => {
              if (*ptr_to_globals).last_forward_char == 0 {
                current_block = 15129665204879337069;
              } else {
                loop {
                  q = (*ptr_to_globals).dot.offset(-1);
                  while q >= (*ptr_to_globals).text
                    && *q as libc::c_int != '\n' as i32
                    && *q as libc::c_int != (*ptr_to_globals).last_forward_char
                  {
                    q = q.offset(-1)
                  }
                  if q >= (*ptr_to_globals).text
                    && *q as libc::c_int == (*ptr_to_globals).last_forward_char
                  {
                    (*ptr_to_globals).dot = q
                  }
                  (*ptr_to_globals).cmdcnt -= 1;
                  if !((*ptr_to_globals).cmdcnt > 0) {
                    break;
                  }
                }
                current_block = 15129665204879337069;
              }
            }
            9018432604062702004 => {
              q = (*ptr_to_globals).dot;
              while q < (*ptr_to_globals).end && *q as libc::c_int != '\n' as i32 {
                if !strchr(
                  b"()[]{}\x00" as *const u8 as *const libc::c_char,
                  *q as libc::c_int,
                )
                .is_null()
                {
                  p = find_pair(q, *q);
                  if p.is_null() {
                    indicate_error();
                  } else {
                    (*ptr_to_globals).dot = p
                  }
                  break;
                } else {
                  q = q.offset(1)
                }
              }
              if *q as libc::c_int == '\n' as i32 {
                indicate_error();
              }
              current_block = 15129665204879337069;
            }
            10247103787464459848 => {
              p = (*ptr_to_globals).reg[(*ptr_to_globals).YDreg as usize];
              if p.is_null() {
                status_line_bold(
                  b"Nothing in register %c\x00" as *const u8 as *const libc::c_char,
                  what_reg() as libc::c_int,
                );
              } else {
                if !strchr(p, '\n' as i32).is_null() {
                  if c == 'P' as i32 {
                    dot_begin();
                  }
                  if c == 'p' as i32 {
                    if end_line((*ptr_to_globals).dot) == (*ptr_to_globals).end.offset(-1) {
                      (*ptr_to_globals).dot = (*ptr_to_globals).end
                    } else {
                      dot_next();
                    }
                  }
                } else if c == 'p' as i32 {
                  dot_right();
                }
                string_insert((*ptr_to_globals).dot, p, 1i32);
                end_cmd_q();
              }
              current_block = 15129665204879337069;
            }
            15260732871948875843 => {
              c1 = (get_one_char() | 0x20i32) - 'a' as i32;
              if c1 as libc::c_uint <= 25i32 as libc::c_uint {
                (*ptr_to_globals).mark[c1 as usize] = (*ptr_to_globals).dot
              } else {
                indicate_error();
              }
              current_block = 15129665204879337069;
            }
            12738322036487086035 => {
              c1 = get_one_char() | 0x20i32;
              if (c1 - 'a' as i32) as libc::c_uint <= 25i32 as libc::c_uint {
                c1 = c1 - 'a' as i32;
                q = (*ptr_to_globals).mark[c1 as usize];
                if (*ptr_to_globals).text <= q && q < (*ptr_to_globals).end {
                  (*ptr_to_globals).dot = q;
                  dot_begin();
                  dot_skip_over_ws();
                }
              } else if c1 == '\'' as i32 {
                (*ptr_to_globals).dot = swap_context((*ptr_to_globals).dot);
                dot_begin();
                dot_skip_over_ws();
              } else {
                indicate_error();
              }
              current_block = 15129665204879337069;
            }
            13255096073384561358 => {
              c1 = (get_one_char() | 0x20i32) - 'a' as i32;
              if c1 as libc::c_uint <= 25i32 as libc::c_uint {
                (*ptr_to_globals).YDreg = c1 as smalluint
              } else {
                indicate_error();
              }
              current_block = 15129665204879337069;
            }
            10258711639984089377 => {
              if (*ptr_to_globals).cmd_mode as libc::c_int == 0 {
                indicate_error();
              }
              (*ptr_to_globals).cmd_mode = 0 as smallint;
              undo_queue_commit();
              end_cmd_q();
              (*ptr_to_globals).last_status_cksum = 0;
              current_block = 15129665204879337069;
            }
            11439127087547047736 => {
              buf[0] = c as libc::c_char;
              buf[1] = '\u{0}' as i32 as libc::c_char;
              not_implemented(buf.as_mut_ptr());
              end_cmd_q();
              current_block = 17440971994642376514;
            }
            7961798899781870241 => {
              dot_scroll(
                (*ptr_to_globals).rows.wrapping_sub(2i32 as libc::c_uint) as libc::c_int,
                -1i32,
              );
              current_block = 15129665204879337069;
            }
            9426343755402444879 => {
              dot_scroll(
                (*ptr_to_globals)
                  .rows
                  .wrapping_sub(2i32 as libc::c_uint)
                  .wrapping_div(2i32 as libc::c_uint) as libc::c_int,
                1i32,
              );
              current_block = 15129665204879337069;
            }
            13352459794680105913 => {
              dot_scroll(1i32, 1i32);
              current_block = 15129665204879337069;
            }
            14142272253464333006 => {
              dot_scroll(
                (*ptr_to_globals).rows.wrapping_sub(2i32 as libc::c_uint) as libc::c_int,
                1i32,
              );
              current_block = 15129665204879337069;
            }
            10758177197742640066 => {
              (*ptr_to_globals).last_status_cksum = 0;
              current_block = 15129665204879337069;
            }
            6152256259730122749 => {
              current_block = 7534742345255184552;
            }
            12883932598258173301 => {
              current_block = 8800996768013373992;
            }
            11242998110520238401 => {
              redraw(1i32);
              current_block = 15129665204879337069;
            }
            13619733043935729992 => {
              loop {
                dot_next();
                dot_skip_over_ws();
                (*ptr_to_globals).cmdcnt -= 1;
                if !((*ptr_to_globals).cmdcnt > 0) {
                  break;
                }
              }
              current_block = 15129665204879337069;
            }
            9339065157412720613 => {
              dot_scroll(
                (*ptr_to_globals)
                  .rows
                  .wrapping_sub(2i32 as libc::c_uint)
                  .wrapping_div(2i32 as libc::c_uint) as libc::c_int,
                -1i32,
              );
              current_block = 15129665204879337069;
            }
            11447082683497798022 => {
              dot_scroll(1i32, -1i32);
              current_block = 15129665204879337069;
            }
            5182000506326660482 => {
              current_block = 13993698454868426881;
            }
            1105010766850597332 => {
              if !(*ptr_to_globals).reg[27].is_null() {
                p = begin_line((*ptr_to_globals).dot);
                q = end_line((*ptr_to_globals).dot);
                p = text_hole_delete(p, q, 1i32);
                p = p.offset(string_insert(p, (*ptr_to_globals).reg[27], 2i32) as isize);
                (*ptr_to_globals).dot = p;
                dot_skip_over_ws();
              }
              current_block = 15129665204879337069;
            }
            8616046655533110204 => {
              undo_pop();
              current_block = 15129665204879337069;
            }
            5127767458142431603 => {
              loop {
                (*ptr_to_globals).dot = end_line((*ptr_to_globals).dot);
                (*ptr_to_globals).cmdcnt -= 1;
                if (*ptr_to_globals).cmdcnt <= 0 {
                  break;
                }
                dot_next();
              }
              current_block = 15129665204879337069;
            }
            222014967776118151 => {
              (*ptr_to_globals).last_forward_char = get_one_char();
              current_block = 7856905509180742666;
            }
            11209792479411604110 => {
              loop {
                dot_prev();
                dot_skip_over_ws();
                (*ptr_to_globals).cmdcnt -= 1;
                if !((*ptr_to_globals).cmdcnt > 0) {
                  break;
                }
              }
              current_block = 15129665204879337069;
            }
            3364823792826654116 => {
              if (*ptr_to_globals).lmc_len != 0 {
                (*ptr_to_globals).ioq_start = crate::libbb::xfuncs_printf::xstrndup(
                  (*ptr_to_globals).last_modifying_cmd.as_mut_ptr(),
                  (*ptr_to_globals).lmc_len,
                );
                (*ptr_to_globals).ioq = (*ptr_to_globals).ioq_start
              }
              current_block = 15129665204879337069;
            }
            18096603330221575131 => {
              current_block = 17498168302144015873;
            }
            16891123271837848903 => {
              dot_end();
              current_block = 1752638907092016026;
            }
            8517235759107662071 => {
              current_block = 5847749760081351726;
            }
            12525254419223051704 => {
              if (*ptr_to_globals).dot < (*ptr_to_globals).end.offset(-1) {
                (*ptr_to_globals).dot = yank_delete(
                  (*ptr_to_globals).dot,
                  (*ptr_to_globals).dot,
                  1i32,
                  YANKDEL as libc::c_int,
                  1i32,
                )
              }
              current_block = 15129665204879337069;
            }
            15232911949322867522 => {
              current_block = 17251831742223396249;
            }
            10863374208794025069 => {
              current_block = 1895262434596074581;
            }
            451126677064669119 => {
              loop {
                dot_prev();
                (*ptr_to_globals).dot = move_to_col(
                  (*ptr_to_globals).dot,
                  (*ptr_to_globals).ccol + (*ptr_to_globals).offset,
                );
                (*ptr_to_globals).cmdcnt -= 1;
                if !((*ptr_to_globals).cmdcnt > 0) {
                  break;
                }
              }
              current_block = 15129665204879337069;
            }
            4611735929166613116 => {
              loop {
                if bb_ascii_isalnum(*(*ptr_to_globals).dot as libc::c_uchar) != 0
                  || *(*ptr_to_globals).dot as libc::c_int == '_' as i32
                {
                  (*ptr_to_globals).dot = skip_thing(
                    (*ptr_to_globals).dot,
                    1i32,
                    FORWARD as libc::c_int,
                    S_END_ALNUM as libc::c_int,
                  )
                } else if *strchrnul(
                  b"!\"#$%&\'()*+,-./:;<=>?@[\\]^_`{|}~\x00" as *const u8 as *const libc::c_char,
                  *(*ptr_to_globals).dot as libc::c_int,
                )
                .offset(0)
                  != 0
                {
                  (*ptr_to_globals).dot = skip_thing(
                    (*ptr_to_globals).dot,
                    1i32,
                    FORWARD as libc::c_int,
                    S_END_PUNCT as libc::c_int,
                  )
                }
                if (*ptr_to_globals).dot < (*ptr_to_globals).end.offset(-1) {
                  (*ptr_to_globals).dot = (*ptr_to_globals).dot.offset(1)
                }
                if ({
                  let mut bb__isspace: libc::c_uchar =
                    (*(*ptr_to_globals).dot as libc::c_int - 9i32) as libc::c_uchar;
                  (bb__isspace as libc::c_int == ' ' as i32 - 9i32
                    || bb__isspace as libc::c_int <= 13i32 - 9i32) as libc::c_int
                }) != 0
                {
                  (*ptr_to_globals).dot = skip_thing(
                    (*ptr_to_globals).dot,
                    2i32,
                    FORWARD as libc::c_int,
                    S_OVER_WS as libc::c_int,
                  )
                }
                (*ptr_to_globals).cmdcnt -= 1;
                if !((*ptr_to_globals).cmdcnt > 0) {
                  break;
                }
              }
              current_block = 15129665204879337069;
            }
            4386451087681909888 => {
              (*ptr_to_globals).dot =
                move_to_col((*ptr_to_globals).dot, (*ptr_to_globals).cmdcnt - 1i32);
              current_block = 15129665204879337069;
            }
            1296397779060594135 => {
              dot_begin();
              current_block = 15129665204879337069;
            }
            _ => {}
          }
          match current_block {
            15129665204879337069 => {}
            8629930936610358348 => {}
            _ => {
              match current_block {
                17251831742223396249 => {
                  dir = 0;
                  if c == 'X' as i32 {
                    dir = -1i32
                  }
                  loop {
                    if *(*ptr_to_globals).dot.offset(dir as isize) as libc::c_int != '\n' as i32 {
                      if c == 'X' as i32 {
                        (*ptr_to_globals).dot = (*ptr_to_globals).dot.offset(-1)
                      }
                      (*ptr_to_globals).dot = yank_delete(
                        (*ptr_to_globals).dot,
                        (*ptr_to_globals).dot,
                        0,
                        YANKDEL as libc::c_int,
                        1i32,
                      )
                    }
                    (*ptr_to_globals).cmdcnt -= 1;
                    if !((*ptr_to_globals).cmdcnt > 0) {
                      break;
                    }
                  }
                  end_cmd_q();
                  if c == 's' as i32 {
                    current_block = 8629930936610358348;
                  } else {
                    current_block = 15129665204879337069;
                  }
                }
                2087484904894455135 => {
                  dot_end();
                  (*ptr_to_globals).dot =
                    char_insert((*ptr_to_globals).dot, '\n' as i32 as libc::c_char, 1i32);
                  current_block = 8629930936610358348;
                }
                11945623545738147997 => {
                  (*ptr_to_globals).dot = (*ptr_to_globals).end.offset(-1);
                  if (*ptr_to_globals).cmdcnt > 0 {
                    (*ptr_to_globals).dot = find_line((*ptr_to_globals).cmdcnt)
                  }
                  dot_skip_over_ws();
                  current_block = 15129665204879337069;
                }
                5847749760081351726 => {
                  dir = FORWARD as libc::c_int;
                  if c == 'B' as i32 {
                    dir = BACK as libc::c_int
                  }
                  loop {
                    if c == 'W' as i32
                      || ({
                        let mut bb__isspace: libc::c_uchar =
                          (*(*ptr_to_globals).dot.offset(dir as isize) as libc::c_int - 9i32)
                            as libc::c_uchar;
                        (bb__isspace as libc::c_int == ' ' as i32 - 9i32
                          || bb__isspace as libc::c_int <= 13i32 - 9i32)
                          as libc::c_int
                      }) != 0
                    {
                      (*ptr_to_globals).dot =
                        skip_thing((*ptr_to_globals).dot, 1i32, dir, S_TO_WS as libc::c_int);
                      (*ptr_to_globals).dot =
                        skip_thing((*ptr_to_globals).dot, 2i32, dir, S_OVER_WS as libc::c_int)
                    }
                    if c != 'W' as i32 {
                      (*ptr_to_globals).dot =
                        skip_thing((*ptr_to_globals).dot, 1i32, dir, S_BEFORE_WS as libc::c_int)
                    }
                    (*ptr_to_globals).cmdcnt -= 1;
                    if !((*ptr_to_globals).cmdcnt > 0) {
                      break;
                    }
                  }
                  current_block = 15129665204879337069;
                }
                17440971994642376514 => {
                  current_block = 15129665204879337069;
                }
                7534742345255184552 => {
                  current_block = 17247297260531395789;
                }
                8800996768013373992 => {
                  loop {
                    dot_next();
                    (*ptr_to_globals).dot = move_to_col(
                      (*ptr_to_globals).dot,
                      (*ptr_to_globals).ccol + (*ptr_to_globals).offset,
                    );
                    (*ptr_to_globals).cmdcnt -= 1;
                    if !((*ptr_to_globals).cmdcnt > 0) {
                      break;
                    }
                  }
                  current_block = 15129665204879337069;
                }
                13993698454868426881 => {
                  loop {
                    dot_right();
                    (*ptr_to_globals).cmdcnt -= 1;
                    if !((*ptr_to_globals).cmdcnt > 0) {
                      break;
                    }
                  }
                  current_block = 15129665204879337069;
                }
                7856905509180742666 => {
                  while !((*ptr_to_globals).last_forward_char == 0) {
                    q = (*ptr_to_globals).dot.offset(1);
                    while q < (*ptr_to_globals).end.offset(-1)
                      && *q as libc::c_int != '\n' as i32
                      && *q as libc::c_int != (*ptr_to_globals).last_forward_char
                    {
                      q = q.offset(1)
                    }
                    if *q as libc::c_int == (*ptr_to_globals).last_forward_char {
                      (*ptr_to_globals).dot = q
                    }
                    (*ptr_to_globals).cmdcnt -= 1;
                    if !((*ptr_to_globals).cmdcnt > 0) {
                      break;
                    }
                  }
                  current_block = 15129665204879337069;
                }
                17498168302144015873 => {
                  current_block = 8681395796513813967;
                }
                1752638907092016026 => {
                  if *(*ptr_to_globals).dot as libc::c_int != '\n' as i32 {
                    (*ptr_to_globals).dot = (*ptr_to_globals).dot.offset(1)
                  }
                  current_block = 8629930936610358348;
                }
                3268579060917229304 => {
                  current_block = 8629930936610358348;
                }
                1895262434596074581 => {
                  current_block = 8908416993177701018;
                }
                _ => {}
              }
              match current_block {
                8629930936610358348 => {}
                15129665204879337069 => {}
                _ => {
                  match current_block {
                    17247297260531395789 => {
                      loop {
                        dot_left();
                        (*ptr_to_globals).cmdcnt -= 1;
                        if !((*ptr_to_globals).cmdcnt > 0) {
                          break;
                        }
                      }
                      current_block = 15129665204879337069;
                    }
                    8681395796513813967 => {
                      current_block = 5591548203144509315;
                    }
                    8908416993177701018 => {
                      current_block = 16124761010012532485;
                    }
                    _ => {}
                  }
                  match current_block {
                    15129665204879337069 => {}
                    _ => {
                      match current_block {
                        16124761010012532485 => {
                          let mut yf: libc::c_int = 0;
                          let mut ml: libc::c_int = 0;
                          let mut whole: libc::c_int = 0;
                          yf = YANKDEL as libc::c_int;
                          if c == 'y' as i32 || c == 'Y' as i32 {
                            yf = YANKONLY as libc::c_int
                          }
                          c1 = 'y' as i32;
                          if c != 'Y' as i32 {
                            c1 = get_one_char()
                          }
                          ml = find_range(&mut p, &mut q, c1 as libc::c_char);
                          place_cursor(0i32, 0);
                          if c1 == 27i32 {
                            c1 = 27i32;
                            c = c1
                          } else if !strchr(b"wW\x00" as *const u8 as *const libc::c_char, c1)
                            .is_null()
                          {
                            ml = 0;
                            if c == 'c' as i32 {
                              while ({
                                let mut bb__isspace: libc::c_uchar =
                                  (*q as libc::c_int - 9i32) as libc::c_uchar;
                                (bb__isspace as libc::c_int == ' ' as i32 - 9i32
                                  || bb__isspace as libc::c_int <= 13i32 - 9i32)
                                  as libc::c_int
                              }) != 0
                                && q > p
                              {
                                q = q.offset(-1)
                              }
                            }
                            (*ptr_to_globals).dot = yank_delete(p, q, ml, yf, 1i32)
                          } else if !strchr(
                            b"^0bBeEft%$ lh\x08\x7f\x00" as *const u8 as *const libc::c_char,
                            c1,
                          )
                          .is_null()
                          {
                            (*ptr_to_globals).dot = yank_delete(p, q, ml, yf, 1i32)
                          } else if !strchr(
                            b"cdykjGHL+-{}\r\n\x00" as *const u8 as *const libc::c_char,
                            c1,
                          )
                          .is_null()
                          {
                            (*ptr_to_globals).dot = yank_delete(p, q, ml, yf, 1i32);
                            whole = 1i32
                          } else {
                            c1 = 27i32;
                            c = c1;
                            ml = 0;
                            indicate_error();
                          }
                          if ml != 0 && whole != 0 {
                            if c == 'c' as i32 {
                              (*ptr_to_globals).dot = char_insert(
                                (*ptr_to_globals).dot,
                                '\n' as i32 as libc::c_char,
                                2i32,
                              );
                              if whole != 0
                                && (*ptr_to_globals).dot != (*ptr_to_globals).end.offset(-1)
                              {
                                dot_prev();
                              }
                            } else if c == 'd' as i32 {
                              dot_begin();
                              dot_skip_over_ws();
                            }
                          }
                          if c1 != 27i32 {
                            if c == 'c' as i32 {
                              strcpy(
                                buf.as_mut_ptr(),
                                b"Change\x00" as *const u8 as *const libc::c_char,
                              );
                              current_block = 8629930936610358348;
                            } else {
                              if c == 'd' as i32 {
                                strcpy(
                                  buf.as_mut_ptr(),
                                  b"Delete\x00" as *const u8 as *const libc::c_char,
                                );
                              }
                              if c == 'y' as i32 || c == 'Y' as i32 {
                                strcpy(
                                  buf.as_mut_ptr(),
                                  b"Yank\x00" as *const u8 as *const libc::c_char,
                                );
                              }
                              p = (*ptr_to_globals).reg[(*ptr_to_globals).YDreg as usize];
                              q = p.offset(strlen(p) as isize);
                              cnt = 0;
                              while p <= q {
                                if *p as libc::c_int == '\n' as i32 {
                                  cnt += 1
                                }
                                p = p.offset(1)
                              }
                              status_line(
                                b"%s %u lines (%u chars) using [%c]\x00" as *const u8
                                  as *const libc::c_char,
                                buf.as_mut_ptr(),
                                cnt,
                                strlen((*ptr_to_globals).reg[(*ptr_to_globals).YDreg as usize])
                                  as libc::c_uint,
                                what_reg() as libc::c_int,
                              );
                              end_cmd_q();
                              current_block = 15129665204879337069;
                            }
                          } else {
                            current_block = 15129665204879337069;
                          }
                        }
                        5591548203144509315 => {
                          current_block = 2636677179867529885;
                        }
                        _ => {}
                      }
                      match current_block {
                        15129665204879337069 => {}
                        8629930936610358348 => {}
                        _ => {
                          match current_block {
                            2636677179867529885 => {
                              current_block = 12309206730560524281;
                            }
                            _ => {}
                          }
                          match current_block {
                            12309206730560524281 => {
                              current_block = 3325768110057758661;
                            }
                            _ => {}
                          }
                          match current_block {
                            3325768110057758661 => {
                              current_block = 14815832896553429982;
                            }
                            _ => {}
                          }
                          match current_block {
                            14815832896553429982 => {
                              current_block = 10731695520297161438;
                            }
                            _ => {}
                          }
                          match current_block {
                            10731695520297161438 => {
                              if c == '0' as i32 && (*ptr_to_globals).cmdcnt < 1i32 {
                                dot_begin();
                              } else {
                                (*ptr_to_globals).cmdcnt =
                                  (*ptr_to_globals).cmdcnt * 10i32 + (c - '0' as i32)
                              }
                              current_block = 15129665204879337069;
                            }
                            _ => {}
                          }
                          match current_block {
                            15129665204879337069 => {}
                            _ => {
                              loop {
                                match current_block {
                                  16813369756331276724 => {
                                    msg = std::ptr::null();
                                    current_block = 7392824444931029276;
                                  }
                                  7392824444931029276 => {
                                    dir = FORWARD as libc::c_int;
                                    p = (*ptr_to_globals).dot.offset(1);
                                    if *(*ptr_to_globals).last_search_pattern.offset(0)
                                      as libc::c_int
                                      == '?' as i32
                                    {
                                      dir = BACK as libc::c_int;
                                      p = (*ptr_to_globals).dot.offset(-1)
                                    }
                                    current_block = 4166979493554389389;
                                  }
                                  _ => {
                                    q = char_search(
                                      p,
                                      (*ptr_to_globals).last_search_pattern.offset(1),
                                      dir << 1i32 | FULL as libc::c_int,
                                    );
                                    if !q.is_null() {
                                      (*ptr_to_globals).dot = q;
                                      msg = std::ptr::null()
                                    } else {
                                      p = (*ptr_to_globals).text;
                                      if dir == BACK as libc::c_int {
                                        p = (*ptr_to_globals).end.offset(-1)
                                      }
                                      q = char_search(
                                        p,
                                        (*ptr_to_globals).last_search_pattern.offset(1),
                                        dir << 1i32 | FULL as libc::c_int,
                                      );
                                      if !q.is_null() {
                                        (*ptr_to_globals).dot = q;
                                        msg = b"search hit BOTTOM, continuing at TOP\x00"
                                          as *const u8
                                          as *const libc::c_char;
                                        if dir == BACK as libc::c_int {
                                          msg = b"search hit TOP, continuing at BOTTOM\x00"
                                            as *const u8
                                            as *const libc::c_char
                                        }
                                      } else {
                                        msg = b"Pattern not found\x00" as *const u8
                                          as *const libc::c_char
                                      }
                                    }
                                    if !msg.is_null() {
                                      status_line_bold(
                                        b"%s\x00" as *const u8 as *const libc::c_char,
                                        msg,
                                      );
                                    }
                                    (*ptr_to_globals).cmdcnt -= 1;
                                    if (*ptr_to_globals).cmdcnt > 0 {
                                      current_block = 16813369756331276724;
                                    } else {
                                      break;
                                    }
                                  }
                                }
                              }
                              current_block = 15129665204879337069;
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
        76 => {
          current_block = 13015277209715431090;
          match current_block {
            16992905640583886232 => {
              loop {
                if (*(*ptr_to_globals).dot as libc::c_int - 'a' as i32) as libc::c_uchar
                  as libc::c_int
                  <= 'z' as i32 - 'a' as i32
                {
                  undo_push(
                    (*ptr_to_globals).dot,
                    1i32 as libc::c_uint,
                    1i32 as libc::c_uchar,
                  );
                  *(*ptr_to_globals).dot =
                    bb_ascii_toupper(*(*ptr_to_globals).dot as libc::c_uchar) as libc::c_char;
                  undo_push(
                    (*ptr_to_globals).dot,
                    1i32 as libc::c_uint,
                    2i32 as libc::c_uchar,
                  );
                } else if (*(*ptr_to_globals).dot as libc::c_int - 'A' as i32) as libc::c_uchar
                  as libc::c_int
                  <= 'Z' as i32 - 'A' as i32
                {
                  undo_push(
                    (*ptr_to_globals).dot,
                    1i32 as libc::c_uint,
                    1i32 as libc::c_uchar,
                  );
                  *(*ptr_to_globals).dot =
                    bb_ascii_tolower(*(*ptr_to_globals).dot as libc::c_uchar) as libc::c_char;
                  undo_push(
                    (*ptr_to_globals).dot,
                    1i32 as libc::c_uint,
                    2i32 as libc::c_uchar,
                  );
                }
                dot_right();
                (*ptr_to_globals).cmdcnt -= 1;
                if !((*ptr_to_globals).cmdcnt > 0) {
                  break;
                }
              }
              end_cmd_q();
              current_block = 15129665204879337069;
            }
            8729655159604064397 => {
              c1 = get_one_char();
              cnt = 0;
              if c1 == '.' as i32 {
                cnt = (*ptr_to_globals)
                  .rows
                  .wrapping_sub(2i32 as libc::c_uint)
                  .wrapping_div(2i32 as libc::c_uint) as libc::c_int
              }
              if c1 == '-' as i32 {
                cnt = (*ptr_to_globals).rows.wrapping_sub(2i32 as libc::c_uint) as libc::c_int
              }
              (*ptr_to_globals).screenbegin = begin_line((*ptr_to_globals).dot);
              dot_scroll(cnt, -1i32);
              current_block = 15129665204879337069;
            }
            15899500648299942075 => {
              (*ptr_to_globals).last_forward_char = get_one_char();
              do_cmd(';' as i32);
              if *(*ptr_to_globals).dot as libc::c_int == (*ptr_to_globals).last_forward_char {
                dot_left();
              }
              (*ptr_to_globals).last_forward_char = 0;
              current_block = 15129665204879337069;
            }
            9051390181078481641 => {
              c1 = get_one_char();
              if *(*ptr_to_globals).dot as libc::c_int != '\n' as i32 {
                (*ptr_to_globals).dot =
                  text_hole_delete((*ptr_to_globals).dot, (*ptr_to_globals).dot, 1i32);
                (*ptr_to_globals).dot =
                  char_insert((*ptr_to_globals).dot, c1 as libc::c_char, 2i32);
                dot_left();
              }
              end_cmd_q();
              current_block = 15129665204879337069;
            }
            877115918601926659 => {
              dir = FORWARD as libc::c_int;
              if c == 'b' as i32 {
                dir = BACK as libc::c_int
              }
              while !((*ptr_to_globals).dot.offset(dir as isize) < (*ptr_to_globals).text
                || (*ptr_to_globals).dot.offset(dir as isize) > (*ptr_to_globals).end.offset(-1))
              {
                (*ptr_to_globals).dot = (*ptr_to_globals).dot.offset(dir as isize);
                if ({
                  let mut bb__isspace: libc::c_uchar =
                    (*(*ptr_to_globals).dot as libc::c_int - 9i32) as libc::c_uchar;
                  (bb__isspace as libc::c_int == ' ' as i32 - 9i32
                    || bb__isspace as libc::c_int <= 13i32 - 9i32) as libc::c_int
                }) != 0
                {
                  (*ptr_to_globals).dot = skip_thing(
                    (*ptr_to_globals).dot,
                    if c == 'e' as i32 { 2i32 } else { 1i32 },
                    dir,
                    S_OVER_WS as libc::c_int,
                  )
                }
                if bb_ascii_isalnum(*(*ptr_to_globals).dot as libc::c_uchar) != 0
                  || *(*ptr_to_globals).dot as libc::c_int == '_' as i32
                {
                  (*ptr_to_globals).dot =
                    skip_thing((*ptr_to_globals).dot, 1i32, dir, S_END_ALNUM as libc::c_int)
                } else if *strchrnul(
                  b"!\"#$%&\'()*+,-./:;<=>?@[\\]^_`{|}~\x00" as *const u8 as *const libc::c_char,
                  *(*ptr_to_globals).dot as libc::c_int,
                )
                .offset(0)
                  != 0
                {
                  (*ptr_to_globals).dot =
                    skip_thing((*ptr_to_globals).dot, 1i32, dir, S_END_PUNCT as libc::c_int)
                }
                (*ptr_to_globals).cmdcnt -= 1;
                if !((*ptr_to_globals).cmdcnt > 0) {
                  break;
                }
              }
              current_block = 15129665204879337069;
            }
            1085022737867179637 => {
              dot_begin();
              dot_skip_over_ws();
              current_block = 15129665204879337069;
            }
            3113147720494587438 => {
              c1 = get_one_char();
              if c1 != 'Z' as i32 {
                indicate_error();
              } else if (*ptr_to_globals).modified_count != 0 {
                if 1i32 != 0 && (*ptr_to_globals).readonly_mode as libc::c_int != 0 {
                  status_line_bold(
                    b"\'%s\' is read only\x00" as *const u8 as *const libc::c_char,
                    (*ptr_to_globals).current_filename,
                  );
                } else {
                  cnt = file_write(
                    (*ptr_to_globals).current_filename,
                    (*ptr_to_globals).text,
                    (*ptr_to_globals).end.offset(-1),
                  );
                  if cnt < 0 {
                    if cnt == -1i32 {
                      status_line_bold(b"Write error: %m\x00" as *const u8 as *const libc::c_char);
                    }
                  } else if cnt as libc::c_long
                    == (*ptr_to_globals)
                      .end
                      .offset(-1)
                      .wrapping_offset_from((*ptr_to_globals).text)
                      as libc::c_long
                      + 1
                  {
                    (*ptr_to_globals).editing = 0 as smallint
                  }
                }
              } else {
                (*ptr_to_globals).editing = 0 as smallint
              }
              current_block = 15129665204879337069;
            }
            12960118908218882441 => {
              p = begin_line((*ptr_to_globals).dot);
              if *p.offset(-1i32 as isize) as libc::c_int == '\n' as i32 {
                dot_prev();
                current_block = 2087484904894455135;
              } else {
                dot_begin();
                (*ptr_to_globals).dot =
                  char_insert((*ptr_to_globals).dot, '\n' as i32 as libc::c_char, 1i32);
                dot_prev();
                current_block = 8629930936610358348;
              }
            }
            8720450212473544924 => {
              (*ptr_to_globals).dot = (*ptr_to_globals).screenbegin;
              cnt = 0;
              while (cnt as libc::c_uint)
                < (*ptr_to_globals)
                  .rows
                  .wrapping_sub(1i32 as libc::c_uint)
                  .wrapping_div(2i32 as libc::c_uint)
              {
                (*ptr_to_globals).dot = next_line((*ptr_to_globals).dot);
                cnt += 1
              }
              current_block = 15129665204879337069;
            }
            13015277209715431090 => {
              (*ptr_to_globals).dot = end_screen();
              if (*ptr_to_globals).cmdcnt as libc::c_uint
                > (*ptr_to_globals).rows.wrapping_sub(1i32 as libc::c_uint)
              {
                (*ptr_to_globals).cmdcnt =
                  (*ptr_to_globals).rows.wrapping_sub(1i32 as libc::c_uint) as libc::c_int
              }
              (*ptr_to_globals).cmdcnt -= 1;
              if (*ptr_to_globals).cmdcnt > 0 {
                do_cmd('-' as i32);
              }
              dot_begin();
              dot_skip_over_ws();
              current_block = 15129665204879337069;
            }
            9800435767766781385 => {
              loop {
                dot_end();
                if (*ptr_to_globals).dot < (*ptr_to_globals).end.offset(-1) {
                  undo_push(
                    (*ptr_to_globals).dot,
                    1i32 as libc::c_uint,
                    1i32 as libc::c_uchar,
                  );
                  let fresh15 = (*ptr_to_globals).dot;
                  (*ptr_to_globals).dot = (*ptr_to_globals).dot.offset(1);
                  *fresh15 = ' ' as i32 as libc::c_char;
                  undo_push(
                    (*ptr_to_globals).dot.offset(-1),
                    1i32 as libc::c_uint,
                    2i32 as libc::c_uchar,
                  );
                  while ({
                    let mut bb__isblank: libc::c_uchar = *(*ptr_to_globals).dot as libc::c_uchar;
                    (bb__isblank as libc::c_int == ' ' as i32
                      || bb__isblank as libc::c_int == '\t' as i32)
                      as libc::c_int
                  }) != 0
                  {
                    text_hole_delete((*ptr_to_globals).dot, (*ptr_to_globals).dot, 2i32);
                  }
                }
                (*ptr_to_globals).cmdcnt -= 1;
                if !((*ptr_to_globals).cmdcnt > 0) {
                  break;
                }
              }
              end_cmd_q();
              current_block = 15129665204879337069;
            }
            3432363526595694666 => {
              dot_begin();
              dot_skip_over_ws();
              current_block = 3268579060917229304;
            }
            3494829253343353619 => {
              (*ptr_to_globals).dot = (*ptr_to_globals).screenbegin;
              if (*ptr_to_globals).cmdcnt as libc::c_uint
                > (*ptr_to_globals).rows.wrapping_sub(1i32 as libc::c_uint)
              {
                (*ptr_to_globals).cmdcnt =
                  (*ptr_to_globals).rows.wrapping_sub(1i32 as libc::c_uint) as libc::c_int
              }
              (*ptr_to_globals).cmdcnt -= 1;
              if (*ptr_to_globals).cmdcnt > 0 {
                do_cmd('+' as i32);
              }
              dot_skip_over_ws();
              current_block = 15129665204879337069;
            }
            17973101765331640574 => {
              c1 = get_one_char();
              if c1 != 'g' as i32 {
                buf[0] = 'g' as i32 as libc::c_char;
                buf[1] = if c1 >= 0 { c1 } else { '*' as i32 } as libc::c_char;
                buf[2] = '\u{0}' as i32 as libc::c_char;
                not_implemented(buf.as_mut_ptr());
                current_block = 15129665204879337069;
              } else {
                if (*ptr_to_globals).cmdcnt == 0 {
                  (*ptr_to_globals).cmdcnt = 1i32
                }
                current_block = 11945623545738147997;
              }
            }
            16546625800574160972 => {
              save_dot = (*ptr_to_globals).dot;
              (*ptr_to_globals).dot = dollar_line((*ptr_to_globals).dot);
              (*ptr_to_globals).dot = yank_delete(
                save_dot,
                (*ptr_to_globals).dot,
                0,
                YANKDEL as libc::c_int,
                1i32,
              );
              if c == 'C' as i32 {
                current_block = 8629930936610358348;
              } else {
                if c == 'D' as i32 {
                  end_cmd_q();
                }
                current_block = 15129665204879337069;
              }
            }
            11937696639986586685 => {
              cnt = count_lines((*ptr_to_globals).text, (*ptr_to_globals).dot);
              c1 = get_one_char();
              find_range(&mut p, &mut q, c1 as libc::c_char);
              yank_delete(p, q, 1i32, YANKONLY as libc::c_int, 0);
              p = begin_line(p);
              q = end_line(q);
              i = count_lines(p, q);
              while i > 0 {
                if c == '<' as i32 {
                  if *p as libc::c_int == '\t' as i32 {
                    text_hole_delete(p, p, 0);
                  } else if *p as libc::c_int == ' ' as i32 {
                    j = 0;
                    while *p as libc::c_int == ' ' as i32 && j < (*ptr_to_globals).tabstop {
                      text_hole_delete(p, p, 0);
                      j += 1
                    }
                  }
                } else if c == '>' as i32 {
                  char_insert(p, '\t' as i32 as libc::c_char, 1i32);
                }
                i -= 1;
                p = next_line(p)
              }
              (*ptr_to_globals).dot = find_line(cnt);
              dot_skip_over_ws();
              end_cmd_q();
              current_block = 15129665204879337069;
            }
            17725350714912028156 => {
              p = get_input_line(b":\x00" as *const u8 as *const libc::c_char);
              colon(p);
              current_block = 15129665204879337069;
            }
            14526470074083880812 => {
              q = char_search(
                (*ptr_to_globals).dot,
                b"\n\n\x00" as *const u8 as *const libc::c_char,
                (FORWARD as libc::c_int) << 1i32 | FULL as libc::c_int,
              );
              if !q.is_null() {
                (*ptr_to_globals).dot = next_line(q)
              }
              current_block = 15129665204879337069;
            }
            8893187391306414141 => {
              q = char_search(
                (*ptr_to_globals).dot,
                b"\n\n\x00" as *const u8 as *const libc::c_char,
                ((BACK as libc::c_int as libc::c_uint) << 1i32
                  | FULL as libc::c_int as libc::c_uint) as libc::c_int,
              );
              if !q.is_null() {
                (*ptr_to_globals).dot = next_line(q)
              }
              current_block = 15129665204879337069;
            }
            7021673758293221412 => {
              dir = BACK as libc::c_int;
              p = (*ptr_to_globals).dot.offset(-1);
              if *(*ptr_to_globals).last_search_pattern.offset(0) as libc::c_int == '?' as i32 {
                dir = FORWARD as libc::c_int;
                p = (*ptr_to_globals).dot.offset(1)
              }
              current_block = 4166979493554389389;
            }
            18374191879090272823 => {
              buf[0] = c as libc::c_char;
              buf[1] = '\u{0}' as i32 as libc::c_char;
              q = get_input_line(buf.as_mut_ptr());
              if *q.offset(0) as libc::c_int != 0 && *q.offset(1) == 0 {
                if *(*ptr_to_globals).last_search_pattern.offset(0) != 0 {
                  *(*ptr_to_globals).last_search_pattern.offset(0) = c as libc::c_char
                }
                current_block = 7392824444931029276;
              } else if *q.offset(0) != 0 {
                free((*ptr_to_globals).last_search_pattern as *mut libc::c_void);
                (*ptr_to_globals).last_search_pattern = crate::libbb::xfuncs_printf::xstrdup(q);
                current_block = 7392824444931029276;
              } else {
                current_block = 15129665204879337069;
              }
            }
            16407828456666301883 => {
              if (*ptr_to_globals).last_forward_char == 0 {
                current_block = 15129665204879337069;
              } else {
                loop {
                  q = (*ptr_to_globals).dot.offset(-1);
                  while q >= (*ptr_to_globals).text
                    && *q as libc::c_int != '\n' as i32
                    && *q as libc::c_int != (*ptr_to_globals).last_forward_char
                  {
                    q = q.offset(-1)
                  }
                  if q >= (*ptr_to_globals).text
                    && *q as libc::c_int == (*ptr_to_globals).last_forward_char
                  {
                    (*ptr_to_globals).dot = q
                  }
                  (*ptr_to_globals).cmdcnt -= 1;
                  if !((*ptr_to_globals).cmdcnt > 0) {
                    break;
                  }
                }
                current_block = 15129665204879337069;
              }
            }
            9018432604062702004 => {
              q = (*ptr_to_globals).dot;
              while q < (*ptr_to_globals).end && *q as libc::c_int != '\n' as i32 {
                if !strchr(
                  b"()[]{}\x00" as *const u8 as *const libc::c_char,
                  *q as libc::c_int,
                )
                .is_null()
                {
                  p = find_pair(q, *q);
                  if p.is_null() {
                    indicate_error();
                  } else {
                    (*ptr_to_globals).dot = p
                  }
                  break;
                } else {
                  q = q.offset(1)
                }
              }
              if *q as libc::c_int == '\n' as i32 {
                indicate_error();
              }
              current_block = 15129665204879337069;
            }
            10247103787464459848 => {
              p = (*ptr_to_globals).reg[(*ptr_to_globals).YDreg as usize];
              if p.is_null() {
                status_line_bold(
                  b"Nothing in register %c\x00" as *const u8 as *const libc::c_char,
                  what_reg() as libc::c_int,
                );
              } else {
                if !strchr(p, '\n' as i32).is_null() {
                  if c == 'P' as i32 {
                    dot_begin();
                  }
                  if c == 'p' as i32 {
                    if end_line((*ptr_to_globals).dot) == (*ptr_to_globals).end.offset(-1) {
                      (*ptr_to_globals).dot = (*ptr_to_globals).end
                    } else {
                      dot_next();
                    }
                  }
                } else if c == 'p' as i32 {
                  dot_right();
                }
                string_insert((*ptr_to_globals).dot, p, 1i32);
                end_cmd_q();
              }
              current_block = 15129665204879337069;
            }
            15260732871948875843 => {
              c1 = (get_one_char() | 0x20i32) - 'a' as i32;
              if c1 as libc::c_uint <= 25i32 as libc::c_uint {
                (*ptr_to_globals).mark[c1 as usize] = (*ptr_to_globals).dot
              } else {
                indicate_error();
              }
              current_block = 15129665204879337069;
            }
            12738322036487086035 => {
              c1 = get_one_char() | 0x20i32;
              if (c1 - 'a' as i32) as libc::c_uint <= 25i32 as libc::c_uint {
                c1 = c1 - 'a' as i32;
                q = (*ptr_to_globals).mark[c1 as usize];
                if (*ptr_to_globals).text <= q && q < (*ptr_to_globals).end {
                  (*ptr_to_globals).dot = q;
                  dot_begin();
                  dot_skip_over_ws();
                }
              } else if c1 == '\'' as i32 {
                (*ptr_to_globals).dot = swap_context((*ptr_to_globals).dot);
                dot_begin();
                dot_skip_over_ws();
              } else {
                indicate_error();
              }
              current_block = 15129665204879337069;
            }
            13255096073384561358 => {
              c1 = (get_one_char() | 0x20i32) - 'a' as i32;
              if c1 as libc::c_uint <= 25i32 as libc::c_uint {
                (*ptr_to_globals).YDreg = c1 as smalluint
              } else {
                indicate_error();
              }
              current_block = 15129665204879337069;
            }
            10258711639984089377 => {
              if (*ptr_to_globals).cmd_mode as libc::c_int == 0 {
                indicate_error();
              }
              (*ptr_to_globals).cmd_mode = 0 as smallint;
              undo_queue_commit();
              end_cmd_q();
              (*ptr_to_globals).last_status_cksum = 0;
              current_block = 15129665204879337069;
            }
            11439127087547047736 => {
              buf[0] = c as libc::c_char;
              buf[1] = '\u{0}' as i32 as libc::c_char;
              not_implemented(buf.as_mut_ptr());
              end_cmd_q();
              current_block = 17440971994642376514;
            }
            7961798899781870241 => {
              dot_scroll(
                (*ptr_to_globals).rows.wrapping_sub(2i32 as libc::c_uint) as libc::c_int,
                -1i32,
              );
              current_block = 15129665204879337069;
            }
            9426343755402444879 => {
              dot_scroll(
                (*ptr_to_globals)
                  .rows
                  .wrapping_sub(2i32 as libc::c_uint)
                  .wrapping_div(2i32 as libc::c_uint) as libc::c_int,
                1i32,
              );
              current_block = 15129665204879337069;
            }
            13352459794680105913 => {
              dot_scroll(1i32, 1i32);
              current_block = 15129665204879337069;
            }
            14142272253464333006 => {
              dot_scroll(
                (*ptr_to_globals).rows.wrapping_sub(2i32 as libc::c_uint) as libc::c_int,
                1i32,
              );
              current_block = 15129665204879337069;
            }
            10758177197742640066 => {
              (*ptr_to_globals).last_status_cksum = 0;
              current_block = 15129665204879337069;
            }
            6152256259730122749 => {
              current_block = 7534742345255184552;
            }
            12883932598258173301 => {
              current_block = 8800996768013373992;
            }
            11242998110520238401 => {
              redraw(1i32);
              current_block = 15129665204879337069;
            }
            13619733043935729992 => {
              loop {
                dot_next();
                dot_skip_over_ws();
                (*ptr_to_globals).cmdcnt -= 1;
                if !((*ptr_to_globals).cmdcnt > 0) {
                  break;
                }
              }
              current_block = 15129665204879337069;
            }
            9339065157412720613 => {
              dot_scroll(
                (*ptr_to_globals)
                  .rows
                  .wrapping_sub(2i32 as libc::c_uint)
                  .wrapping_div(2i32 as libc::c_uint) as libc::c_int,
                -1i32,
              );
              current_block = 15129665204879337069;
            }
            11447082683497798022 => {
              dot_scroll(1i32, -1i32);
              current_block = 15129665204879337069;
            }
            5182000506326660482 => {
              current_block = 13993698454868426881;
            }
            1105010766850597332 => {
              if !(*ptr_to_globals).reg[27].is_null() {
                p = begin_line((*ptr_to_globals).dot);
                q = end_line((*ptr_to_globals).dot);
                p = text_hole_delete(p, q, 1i32);
                p = p.offset(string_insert(p, (*ptr_to_globals).reg[27], 2i32) as isize);
                (*ptr_to_globals).dot = p;
                dot_skip_over_ws();
              }
              current_block = 15129665204879337069;
            }
            8616046655533110204 => {
              undo_pop();
              current_block = 15129665204879337069;
            }
            5127767458142431603 => {
              loop {
                (*ptr_to_globals).dot = end_line((*ptr_to_globals).dot);
                (*ptr_to_globals).cmdcnt -= 1;
                if (*ptr_to_globals).cmdcnt <= 0 {
                  break;
                }
                dot_next();
              }
              current_block = 15129665204879337069;
            }
            222014967776118151 => {
              (*ptr_to_globals).last_forward_char = get_one_char();
              current_block = 7856905509180742666;
            }
            11209792479411604110 => {
              loop {
                dot_prev();
                dot_skip_over_ws();
                (*ptr_to_globals).cmdcnt -= 1;
                if !((*ptr_to_globals).cmdcnt > 0) {
                  break;
                }
              }
              current_block = 15129665204879337069;
            }
            3364823792826654116 => {
              if (*ptr_to_globals).lmc_len != 0 {
                (*ptr_to_globals).ioq_start = crate::libbb::xfuncs_printf::xstrndup(
                  (*ptr_to_globals).last_modifying_cmd.as_mut_ptr(),
                  (*ptr_to_globals).lmc_len,
                );
                (*ptr_to_globals).ioq = (*ptr_to_globals).ioq_start
              }
              current_block = 15129665204879337069;
            }
            18096603330221575131 => {
              current_block = 17498168302144015873;
            }
            16891123271837848903 => {
              dot_end();
              current_block = 1752638907092016026;
            }
            8517235759107662071 => {
              current_block = 5847749760081351726;
            }
            12525254419223051704 => {
              if (*ptr_to_globals).dot < (*ptr_to_globals).end.offset(-1) {
                (*ptr_to_globals).dot = yank_delete(
                  (*ptr_to_globals).dot,
                  (*ptr_to_globals).dot,
                  1i32,
                  YANKDEL as libc::c_int,
                  1i32,
                )
              }
              current_block = 15129665204879337069;
            }
            15232911949322867522 => {
              current_block = 17251831742223396249;
            }
            10863374208794025069 => {
              current_block = 1895262434596074581;
            }
            451126677064669119 => {
              loop {
                dot_prev();
                (*ptr_to_globals).dot = move_to_col(
                  (*ptr_to_globals).dot,
                  (*ptr_to_globals).ccol + (*ptr_to_globals).offset,
                );
                (*ptr_to_globals).cmdcnt -= 1;
                if !((*ptr_to_globals).cmdcnt > 0) {
                  break;
                }
              }
              current_block = 15129665204879337069;
            }
            4611735929166613116 => {
              loop {
                if bb_ascii_isalnum(*(*ptr_to_globals).dot as libc::c_uchar) != 0
                  || *(*ptr_to_globals).dot as libc::c_int == '_' as i32
                {
                  (*ptr_to_globals).dot = skip_thing(
                    (*ptr_to_globals).dot,
                    1i32,
                    FORWARD as libc::c_int,
                    S_END_ALNUM as libc::c_int,
                  )
                } else if *strchrnul(
                  b"!\"#$%&\'()*+,-./:;<=>?@[\\]^_`{|}~\x00" as *const u8 as *const libc::c_char,
                  *(*ptr_to_globals).dot as libc::c_int,
                )
                .offset(0)
                  != 0
                {
                  (*ptr_to_globals).dot = skip_thing(
                    (*ptr_to_globals).dot,
                    1i32,
                    FORWARD as libc::c_int,
                    S_END_PUNCT as libc::c_int,
                  )
                }
                if (*ptr_to_globals).dot < (*ptr_to_globals).end.offset(-1) {
                  (*ptr_to_globals).dot = (*ptr_to_globals).dot.offset(1)
                }
                if ({
                  let mut bb__isspace: libc::c_uchar =
                    (*(*ptr_to_globals).dot as libc::c_int - 9i32) as libc::c_uchar;
                  (bb__isspace as libc::c_int == ' ' as i32 - 9i32
                    || bb__isspace as libc::c_int <= 13i32 - 9i32) as libc::c_int
                }) != 0
                {
                  (*ptr_to_globals).dot = skip_thing(
                    (*ptr_to_globals).dot,
                    2i32,
                    FORWARD as libc::c_int,
                    S_OVER_WS as libc::c_int,
                  )
                }
                (*ptr_to_globals).cmdcnt -= 1;
                if !((*ptr_to_globals).cmdcnt > 0) {
                  break;
                }
              }
              current_block = 15129665204879337069;
            }
            4386451087681909888 => {
              (*ptr_to_globals).dot =
                move_to_col((*ptr_to_globals).dot, (*ptr_to_globals).cmdcnt - 1i32);
              current_block = 15129665204879337069;
            }
            1296397779060594135 => {
              dot_begin();
              current_block = 15129665204879337069;
            }
            _ => {}
          }
          match current_block {
            15129665204879337069 => {}
            8629930936610358348 => {}
            _ => {
              match current_block {
                17251831742223396249 => {
                  dir = 0;
                  if c == 'X' as i32 {
                    dir = -1i32
                  }
                  loop {
                    if *(*ptr_to_globals).dot.offset(dir as isize) as libc::c_int != '\n' as i32 {
                      if c == 'X' as i32 {
                        (*ptr_to_globals).dot = (*ptr_to_globals).dot.offset(-1)
                      }
                      (*ptr_to_globals).dot = yank_delete(
                        (*ptr_to_globals).dot,
                        (*ptr_to_globals).dot,
                        0,
                        YANKDEL as libc::c_int,
                        1i32,
                      )
                    }
                    (*ptr_to_globals).cmdcnt -= 1;
                    if !((*ptr_to_globals).cmdcnt > 0) {
                      break;
                    }
                  }
                  end_cmd_q();
                  if c == 's' as i32 {
                    current_block = 8629930936610358348;
                  } else {
                    current_block = 15129665204879337069;
                  }
                }
                2087484904894455135 => {
                  dot_end();
                  (*ptr_to_globals).dot =
                    char_insert((*ptr_to_globals).dot, '\n' as i32 as libc::c_char, 1i32);
                  current_block = 8629930936610358348;
                }
                11945623545738147997 => {
                  (*ptr_to_globals).dot = (*ptr_to_globals).end.offset(-1);
                  if (*ptr_to_globals).cmdcnt > 0 {
                    (*ptr_to_globals).dot = find_line((*ptr_to_globals).cmdcnt)
                  }
                  dot_skip_over_ws();
                  current_block = 15129665204879337069;
                }
                5847749760081351726 => {
                  dir = FORWARD as libc::c_int;
                  if c == 'B' as i32 {
                    dir = BACK as libc::c_int
                  }
                  loop {
                    if c == 'W' as i32
                      || ({
                        let mut bb__isspace: libc::c_uchar =
                          (*(*ptr_to_globals).dot.offset(dir as isize) as libc::c_int - 9i32)
                            as libc::c_uchar;
                        (bb__isspace as libc::c_int == ' ' as i32 - 9i32
                          || bb__isspace as libc::c_int <= 13i32 - 9i32)
                          as libc::c_int
                      }) != 0
                    {
                      (*ptr_to_globals).dot =
                        skip_thing((*ptr_to_globals).dot, 1i32, dir, S_TO_WS as libc::c_int);
                      (*ptr_to_globals).dot =
                        skip_thing((*ptr_to_globals).dot, 2i32, dir, S_OVER_WS as libc::c_int)
                    }
                    if c != 'W' as i32 {
                      (*ptr_to_globals).dot =
                        skip_thing((*ptr_to_globals).dot, 1i32, dir, S_BEFORE_WS as libc::c_int)
                    }
                    (*ptr_to_globals).cmdcnt -= 1;
                    if !((*ptr_to_globals).cmdcnt > 0) {
                      break;
                    }
                  }
                  current_block = 15129665204879337069;
                }
                17440971994642376514 => {
                  current_block = 15129665204879337069;
                }
                7534742345255184552 => {
                  current_block = 17247297260531395789;
                }
                8800996768013373992 => {
                  loop {
                    dot_next();
                    (*ptr_to_globals).dot = move_to_col(
                      (*ptr_to_globals).dot,
                      (*ptr_to_globals).ccol + (*ptr_to_globals).offset,
                    );
                    (*ptr_to_globals).cmdcnt -= 1;
                    if !((*ptr_to_globals).cmdcnt > 0) {
                      break;
                    }
                  }
                  current_block = 15129665204879337069;
                }
                13993698454868426881 => {
                  loop {
                    dot_right();
                    (*ptr_to_globals).cmdcnt -= 1;
                    if !((*ptr_to_globals).cmdcnt > 0) {
                      break;
                    }
                  }
                  current_block = 15129665204879337069;
                }
                7856905509180742666 => {
                  while !((*ptr_to_globals).last_forward_char == 0) {
                    q = (*ptr_to_globals).dot.offset(1);
                    while q < (*ptr_to_globals).end.offset(-1)
                      && *q as libc::c_int != '\n' as i32
                      && *q as libc::c_int != (*ptr_to_globals).last_forward_char
                    {
                      q = q.offset(1)
                    }
                    if *q as libc::c_int == (*ptr_to_globals).last_forward_char {
                      (*ptr_to_globals).dot = q
                    }
                    (*ptr_to_globals).cmdcnt -= 1;
                    if !((*ptr_to_globals).cmdcnt > 0) {
                      break;
                    }
                  }
                  current_block = 15129665204879337069;
                }
                17498168302144015873 => {
                  current_block = 8681395796513813967;
                }
                1752638907092016026 => {
                  if *(*ptr_to_globals).dot as libc::c_int != '\n' as i32 {
                    (*ptr_to_globals).dot = (*ptr_to_globals).dot.offset(1)
                  }
                  current_block = 8629930936610358348;
                }
                3268579060917229304 => {
                  current_block = 8629930936610358348;
                }
                1895262434596074581 => {
                  current_block = 8908416993177701018;
                }
                _ => {}
              }
              match current_block {
                8629930936610358348 => {}
                15129665204879337069 => {}
                _ => {
                  match current_block {
                    17247297260531395789 => {
                      loop {
                        dot_left();
                        (*ptr_to_globals).cmdcnt -= 1;
                        if !((*ptr_to_globals).cmdcnt > 0) {
                          break;
                        }
                      }
                      current_block = 15129665204879337069;
                    }
                    8681395796513813967 => {
                      current_block = 5591548203144509315;
                    }
                    8908416993177701018 => {
                      current_block = 16124761010012532485;
                    }
                    _ => {}
                  }
                  match current_block {
                    15129665204879337069 => {}
                    _ => {
                      match current_block {
                        16124761010012532485 => {
                          let mut yf: libc::c_int = 0;
                          let mut ml: libc::c_int = 0;
                          let mut whole: libc::c_int = 0;
                          yf = YANKDEL as libc::c_int;
                          if c == 'y' as i32 || c == 'Y' as i32 {
                            yf = YANKONLY as libc::c_int
                          }
                          c1 = 'y' as i32;
                          if c != 'Y' as i32 {
                            c1 = get_one_char()
                          }
                          ml = find_range(&mut p, &mut q, c1 as libc::c_char);
                          place_cursor(0i32, 0);
                          if c1 == 27i32 {
                            c1 = 27i32;
                            c = c1
                          } else if !strchr(b"wW\x00" as *const u8 as *const libc::c_char, c1)
                            .is_null()
                          {
                            ml = 0;
                            if c == 'c' as i32 {
                              while ({
                                let mut bb__isspace: libc::c_uchar =
                                  (*q as libc::c_int - 9i32) as libc::c_uchar;
                                (bb__isspace as libc::c_int == ' ' as i32 - 9i32
                                  || bb__isspace as libc::c_int <= 13i32 - 9i32)
                                  as libc::c_int
                              }) != 0
                                && q > p
                              {
                                q = q.offset(-1)
                              }
                            }
                            (*ptr_to_globals).dot = yank_delete(p, q, ml, yf, 1i32)
                          } else if !strchr(
                            b"^0bBeEft%$ lh\x08\x7f\x00" as *const u8 as *const libc::c_char,
                            c1,
                          )
                          .is_null()
                          {
                            (*ptr_to_globals).dot = yank_delete(p, q, ml, yf, 1i32)
                          } else if !strchr(
                            b"cdykjGHL+-{}\r\n\x00" as *const u8 as *const libc::c_char,
                            c1,
                          )
                          .is_null()
                          {
                            (*ptr_to_globals).dot = yank_delete(p, q, ml, yf, 1i32);
                            whole = 1i32
                          } else {
                            c1 = 27i32;
                            c = c1;
                            ml = 0;
                            indicate_error();
                          }
                          if ml != 0 && whole != 0 {
                            if c == 'c' as i32 {
                              (*ptr_to_globals).dot = char_insert(
                                (*ptr_to_globals).dot,
                                '\n' as i32 as libc::c_char,
                                2i32,
                              );
                              if whole != 0
                                && (*ptr_to_globals).dot != (*ptr_to_globals).end.offset(-1)
                              {
                                dot_prev();
                              }
                            } else if c == 'd' as i32 {
                              dot_begin();
                              dot_skip_over_ws();
                            }
                          }
                          if c1 != 27i32 {
                            if c == 'c' as i32 {
                              strcpy(
                                buf.as_mut_ptr(),
                                b"Change\x00" as *const u8 as *const libc::c_char,
                              );
                              current_block = 8629930936610358348;
                            } else {
                              if c == 'd' as i32 {
                                strcpy(
                                  buf.as_mut_ptr(),
                                  b"Delete\x00" as *const u8 as *const libc::c_char,
                                );
                              }
                              if c == 'y' as i32 || c == 'Y' as i32 {
                                strcpy(
                                  buf.as_mut_ptr(),
                                  b"Yank\x00" as *const u8 as *const libc::c_char,
                                );
                              }
                              p = (*ptr_to_globals).reg[(*ptr_to_globals).YDreg as usize];
                              q = p.offset(strlen(p) as isize);
                              cnt = 0;
                              while p <= q {
                                if *p as libc::c_int == '\n' as i32 {
                                  cnt += 1
                                }
                                p = p.offset(1)
                              }
                              status_line(
                                b"%s %u lines (%u chars) using [%c]\x00" as *const u8
                                  as *const libc::c_char,
                                buf.as_mut_ptr(),
                                cnt,
                                strlen((*ptr_to_globals).reg[(*ptr_to_globals).YDreg as usize])
                                  as libc::c_uint,
                                what_reg() as libc::c_int,
                              );
                              end_cmd_q();
                              current_block = 15129665204879337069;
                            }
                          } else {
                            current_block = 15129665204879337069;
                          }
                        }
                        5591548203144509315 => {
                          current_block = 2636677179867529885;
                        }
                        _ => {}
                      }
                      match current_block {
                        15129665204879337069 => {}
                        8629930936610358348 => {}
                        _ => {
                          match current_block {
                            2636677179867529885 => {
                              current_block = 12309206730560524281;
                            }
                            _ => {}
                          }
                          match current_block {
                            12309206730560524281 => {
                              current_block = 3325768110057758661;
                            }
                            _ => {}
                          }
                          match current_block {
                            3325768110057758661 => {
                              current_block = 14815832896553429982;
                            }
                            _ => {}
                          }
                          match current_block {
                            14815832896553429982 => {
                              current_block = 10731695520297161438;
                            }
                            _ => {}
                          }
                          match current_block {
                            10731695520297161438 => {
                              if c == '0' as i32 && (*ptr_to_globals).cmdcnt < 1i32 {
                                dot_begin();
                              } else {
                                (*ptr_to_globals).cmdcnt =
                                  (*ptr_to_globals).cmdcnt * 10i32 + (c - '0' as i32)
                              }
                              current_block = 15129665204879337069;
                            }
                            _ => {}
                          }
                          match current_block {
                            15129665204879337069 => {}
                            _ => {
                              loop {
                                match current_block {
                                  16813369756331276724 => {
                                    msg = std::ptr::null();
                                    current_block = 7392824444931029276;
                                  }
                                  7392824444931029276 => {
                                    dir = FORWARD as libc::c_int;
                                    p = (*ptr_to_globals).dot.offset(1);
                                    if *(*ptr_to_globals).last_search_pattern.offset(0)
                                      as libc::c_int
                                      == '?' as i32
                                    {
                                      dir = BACK as libc::c_int;
                                      p = (*ptr_to_globals).dot.offset(-1)
                                    }
                                    current_block = 4166979493554389389;
                                  }
                                  _ => {
                                    q = char_search(
                                      p,
                                      (*ptr_to_globals).last_search_pattern.offset(1),
                                      dir << 1i32 | FULL as libc::c_int,
                                    );
                                    if !q.is_null() {
                                      (*ptr_to_globals).dot = q;
                                      msg = std::ptr::null()
                                    } else {
                                      p = (*ptr_to_globals).text;
                                      if dir == BACK as libc::c_int {
                                        p = (*ptr_to_globals).end.offset(-1)
                                      }
                                      q = char_search(
                                        p,
                                        (*ptr_to_globals).last_search_pattern.offset(1),
                                        dir << 1i32 | FULL as libc::c_int,
                                      );
                                      if !q.is_null() {
                                        (*ptr_to_globals).dot = q;
                                        msg = b"search hit BOTTOM, continuing at TOP\x00"
                                          as *const u8
                                          as *const libc::c_char;
                                        if dir == BACK as libc::c_int {
                                          msg = b"search hit TOP, continuing at BOTTOM\x00"
                                            as *const u8
                                            as *const libc::c_char
                                        }
                                      } else {
                                        msg = b"Pattern not found\x00" as *const u8
                                          as *const libc::c_char
                                      }
                                    }
                                    if !msg.is_null() {
                                      status_line_bold(
                                        b"%s\x00" as *const u8 as *const libc::c_char,
                                        msg,
                                      );
                                    }
                                    (*ptr_to_globals).cmdcnt -= 1;
                                    if (*ptr_to_globals).cmdcnt > 0 {
                                      current_block = 16813369756331276724;
                                    } else {
                                      break;
                                    }
                                  }
                                }
                              }
                              current_block = 15129665204879337069;
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
        77 => {
          current_block = 8720450212473544924;
          match current_block {
            16992905640583886232 => {
              loop {
                if (*(*ptr_to_globals).dot as libc::c_int - 'a' as i32) as libc::c_uchar
                  as libc::c_int
                  <= 'z' as i32 - 'a' as i32
                {
                  undo_push(
                    (*ptr_to_globals).dot,
                    1i32 as libc::c_uint,
                    1i32 as libc::c_uchar,
                  );
                  *(*ptr_to_globals).dot =
                    bb_ascii_toupper(*(*ptr_to_globals).dot as libc::c_uchar) as libc::c_char;
                  undo_push(
                    (*ptr_to_globals).dot,
                    1i32 as libc::c_uint,
                    2i32 as libc::c_uchar,
                  );
                } else if (*(*ptr_to_globals).dot as libc::c_int - 'A' as i32) as libc::c_uchar
                  as libc::c_int
                  <= 'Z' as i32 - 'A' as i32
                {
                  undo_push(
                    (*ptr_to_globals).dot,
                    1i32 as libc::c_uint,
                    1i32 as libc::c_uchar,
                  );
                  *(*ptr_to_globals).dot =
                    bb_ascii_tolower(*(*ptr_to_globals).dot as libc::c_uchar) as libc::c_char;
                  undo_push(
                    (*ptr_to_globals).dot,
                    1i32 as libc::c_uint,
                    2i32 as libc::c_uchar,
                  );
                }
                dot_right();
                (*ptr_to_globals).cmdcnt -= 1;
                if !((*ptr_to_globals).cmdcnt > 0) {
                  break;
                }
              }
              end_cmd_q();
              current_block = 15129665204879337069;
            }
            8729655159604064397 => {
              c1 = get_one_char();
              cnt = 0;
              if c1 == '.' as i32 {
                cnt = (*ptr_to_globals)
                  .rows
                  .wrapping_sub(2i32 as libc::c_uint)
                  .wrapping_div(2i32 as libc::c_uint) as libc::c_int
              }
              if c1 == '-' as i32 {
                cnt = (*ptr_to_globals).rows.wrapping_sub(2i32 as libc::c_uint) as libc::c_int
              }
              (*ptr_to_globals).screenbegin = begin_line((*ptr_to_globals).dot);
              dot_scroll(cnt, -1i32);
              current_block = 15129665204879337069;
            }
            15899500648299942075 => {
              (*ptr_to_globals).last_forward_char = get_one_char();
              do_cmd(';' as i32);
              if *(*ptr_to_globals).dot as libc::c_int == (*ptr_to_globals).last_forward_char {
                dot_left();
              }
              (*ptr_to_globals).last_forward_char = 0;
              current_block = 15129665204879337069;
            }
            9051390181078481641 => {
              c1 = get_one_char();
              if *(*ptr_to_globals).dot as libc::c_int != '\n' as i32 {
                (*ptr_to_globals).dot =
                  text_hole_delete((*ptr_to_globals).dot, (*ptr_to_globals).dot, 1i32);
                (*ptr_to_globals).dot =
                  char_insert((*ptr_to_globals).dot, c1 as libc::c_char, 2i32);
                dot_left();
              }
              end_cmd_q();
              current_block = 15129665204879337069;
            }
            877115918601926659 => {
              dir = FORWARD as libc::c_int;
              if c == 'b' as i32 {
                dir = BACK as libc::c_int
              }
              while !((*ptr_to_globals).dot.offset(dir as isize) < (*ptr_to_globals).text
                || (*ptr_to_globals).dot.offset(dir as isize) > (*ptr_to_globals).end.offset(-1))
              {
                (*ptr_to_globals).dot = (*ptr_to_globals).dot.offset(dir as isize);
                if ({
                  let mut bb__isspace: libc::c_uchar =
                    (*(*ptr_to_globals).dot as libc::c_int - 9i32) as libc::c_uchar;
                  (bb__isspace as libc::c_int == ' ' as i32 - 9i32
                    || bb__isspace as libc::c_int <= 13i32 - 9i32) as libc::c_int
                }) != 0
                {
                  (*ptr_to_globals).dot = skip_thing(
                    (*ptr_to_globals).dot,
                    if c == 'e' as i32 { 2i32 } else { 1i32 },
                    dir,
                    S_OVER_WS as libc::c_int,
                  )
                }
                if bb_ascii_isalnum(*(*ptr_to_globals).dot as libc::c_uchar) != 0
                  || *(*ptr_to_globals).dot as libc::c_int == '_' as i32
                {
                  (*ptr_to_globals).dot =
                    skip_thing((*ptr_to_globals).dot, 1i32, dir, S_END_ALNUM as libc::c_int)
                } else if *strchrnul(
                  b"!\"#$%&\'()*+,-./:;<=>?@[\\]^_`{|}~\x00" as *const u8 as *const libc::c_char,
                  *(*ptr_to_globals).dot as libc::c_int,
                )
                .offset(0)
                  != 0
                {
                  (*ptr_to_globals).dot =
                    skip_thing((*ptr_to_globals).dot, 1i32, dir, S_END_PUNCT as libc::c_int)
                }
                (*ptr_to_globals).cmdcnt -= 1;
                if !((*ptr_to_globals).cmdcnt > 0) {
                  break;
                }
              }
              current_block = 15129665204879337069;
            }
            1085022737867179637 => {
              dot_begin();
              dot_skip_over_ws();
              current_block = 15129665204879337069;
            }
            3113147720494587438 => {
              c1 = get_one_char();
              if c1 != 'Z' as i32 {
                indicate_error();
              } else if (*ptr_to_globals).modified_count != 0 {
                if 1i32 != 0 && (*ptr_to_globals).readonly_mode as libc::c_int != 0 {
                  status_line_bold(
                    b"\'%s\' is read only\x00" as *const u8 as *const libc::c_char,
                    (*ptr_to_globals).current_filename,
                  );
                } else {
                  cnt = file_write(
                    (*ptr_to_globals).current_filename,
                    (*ptr_to_globals).text,
                    (*ptr_to_globals).end.offset(-1),
                  );
                  if cnt < 0 {
                    if cnt == -1i32 {
                      status_line_bold(b"Write error: %m\x00" as *const u8 as *const libc::c_char);
                    }
                  } else if cnt as libc::c_long
                    == (*ptr_to_globals)
                      .end
                      .offset(-1)
                      .wrapping_offset_from((*ptr_to_globals).text)
                      as libc::c_long
                      + 1
                  {
                    (*ptr_to_globals).editing = 0 as smallint
                  }
                }
              } else {
                (*ptr_to_globals).editing = 0 as smallint
              }
              current_block = 15129665204879337069;
            }
            12960118908218882441 => {
              p = begin_line((*ptr_to_globals).dot);
              if *p.offset(-1i32 as isize) as libc::c_int == '\n' as i32 {
                dot_prev();
                current_block = 2087484904894455135;
              } else {
                dot_begin();
                (*ptr_to_globals).dot =
                  char_insert((*ptr_to_globals).dot, '\n' as i32 as libc::c_char, 1i32);
                dot_prev();
                current_block = 8629930936610358348;
              }
            }
            8720450212473544924 => {
              (*ptr_to_globals).dot = (*ptr_to_globals).screenbegin;
              cnt = 0;
              while (cnt as libc::c_uint)
                < (*ptr_to_globals)
                  .rows
                  .wrapping_sub(1i32 as libc::c_uint)
                  .wrapping_div(2i32 as libc::c_uint)
              {
                (*ptr_to_globals).dot = next_line((*ptr_to_globals).dot);
                cnt += 1
              }
              current_block = 15129665204879337069;
            }
            13015277209715431090 => {
              (*ptr_to_globals).dot = end_screen();
              if (*ptr_to_globals).cmdcnt as libc::c_uint
                > (*ptr_to_globals).rows.wrapping_sub(1i32 as libc::c_uint)
              {
                (*ptr_to_globals).cmdcnt =
                  (*ptr_to_globals).rows.wrapping_sub(1i32 as libc::c_uint) as libc::c_int
              }
              (*ptr_to_globals).cmdcnt -= 1;
              if (*ptr_to_globals).cmdcnt > 0 {
                do_cmd('-' as i32);
              }
              dot_begin();
              dot_skip_over_ws();
              current_block = 15129665204879337069;
            }
            9800435767766781385 => {
              loop {
                dot_end();
                if (*ptr_to_globals).dot < (*ptr_to_globals).end.offset(-1) {
                  undo_push(
                    (*ptr_to_globals).dot,
                    1i32 as libc::c_uint,
                    1i32 as libc::c_uchar,
                  );
                  let fresh15 = (*ptr_to_globals).dot;
                  (*ptr_to_globals).dot = (*ptr_to_globals).dot.offset(1);
                  *fresh15 = ' ' as i32 as libc::c_char;
                  undo_push(
                    (*ptr_to_globals).dot.offset(-1),
                    1i32 as libc::c_uint,
                    2i32 as libc::c_uchar,
                  );
                  while ({
                    let mut bb__isblank: libc::c_uchar = *(*ptr_to_globals).dot as libc::c_uchar;
                    (bb__isblank as libc::c_int == ' ' as i32
                      || bb__isblank as libc::c_int == '\t' as i32)
                      as libc::c_int
                  }) != 0
                  {
                    text_hole_delete((*ptr_to_globals).dot, (*ptr_to_globals).dot, 2i32);
                  }
                }
                (*ptr_to_globals).cmdcnt -= 1;
                if !((*ptr_to_globals).cmdcnt > 0) {
                  break;
                }
              }
              end_cmd_q();
              current_block = 15129665204879337069;
            }
            3432363526595694666 => {
              dot_begin();
              dot_skip_over_ws();
              current_block = 3268579060917229304;
            }
            3494829253343353619 => {
              (*ptr_to_globals).dot = (*ptr_to_globals).screenbegin;
              if (*ptr_to_globals).cmdcnt as libc::c_uint
                > (*ptr_to_globals).rows.wrapping_sub(1i32 as libc::c_uint)
              {
                (*ptr_to_globals).cmdcnt =
                  (*ptr_to_globals).rows.wrapping_sub(1i32 as libc::c_uint) as libc::c_int
              }
              (*ptr_to_globals).cmdcnt -= 1;
              if (*ptr_to_globals).cmdcnt > 0 {
                do_cmd('+' as i32);
              }
              dot_skip_over_ws();
              current_block = 15129665204879337069;
            }
            17973101765331640574 => {
              c1 = get_one_char();
              if c1 != 'g' as i32 {
                buf[0] = 'g' as i32 as libc::c_char;
                buf[1] = if c1 >= 0 { c1 } else { '*' as i32 } as libc::c_char;
                buf[2] = '\u{0}' as i32 as libc::c_char;
                not_implemented(buf.as_mut_ptr());
                current_block = 15129665204879337069;
              } else {
                if (*ptr_to_globals).cmdcnt == 0 {
                  (*ptr_to_globals).cmdcnt = 1i32
                }
                current_block = 11945623545738147997;
              }
            }
            16546625800574160972 => {
              save_dot = (*ptr_to_globals).dot;
              (*ptr_to_globals).dot = dollar_line((*ptr_to_globals).dot);
              (*ptr_to_globals).dot = yank_delete(
                save_dot,
                (*ptr_to_globals).dot,
                0,
                YANKDEL as libc::c_int,
                1i32,
              );
              if c == 'C' as i32 {
                current_block = 8629930936610358348;
              } else {
                if c == 'D' as i32 {
                  end_cmd_q();
                }
                current_block = 15129665204879337069;
              }
            }
            11937696639986586685 => {
              cnt = count_lines((*ptr_to_globals).text, (*ptr_to_globals).dot);
              c1 = get_one_char();
              find_range(&mut p, &mut q, c1 as libc::c_char);
              yank_delete(p, q, 1i32, YANKONLY as libc::c_int, 0);
              p = begin_line(p);
              q = end_line(q);
              i = count_lines(p, q);
              while i > 0 {
                if c == '<' as i32 {
                  if *p as libc::c_int == '\t' as i32 {
                    text_hole_delete(p, p, 0);
                  } else if *p as libc::c_int == ' ' as i32 {
                    j = 0;
                    while *p as libc::c_int == ' ' as i32 && j < (*ptr_to_globals).tabstop {
                      text_hole_delete(p, p, 0);
                      j += 1
                    }
                  }
                } else if c == '>' as i32 {
                  char_insert(p, '\t' as i32 as libc::c_char, 1i32);
                }
                i -= 1;
                p = next_line(p)
              }
              (*ptr_to_globals).dot = find_line(cnt);
              dot_skip_over_ws();
              end_cmd_q();
              current_block = 15129665204879337069;
            }
            17725350714912028156 => {
              p = get_input_line(b":\x00" as *const u8 as *const libc::c_char);
              colon(p);
              current_block = 15129665204879337069;
            }
            14526470074083880812 => {
              q = char_search(
                (*ptr_to_globals).dot,
                b"\n\n\x00" as *const u8 as *const libc::c_char,
                (FORWARD as libc::c_int) << 1i32 | FULL as libc::c_int,
              );
              if !q.is_null() {
                (*ptr_to_globals).dot = next_line(q)
              }
              current_block = 15129665204879337069;
            }
            8893187391306414141 => {
              q = char_search(
                (*ptr_to_globals).dot,
                b"\n\n\x00" as *const u8 as *const libc::c_char,
                ((BACK as libc::c_int as libc::c_uint) << 1i32
                  | FULL as libc::c_int as libc::c_uint) as libc::c_int,
              );
              if !q.is_null() {
                (*ptr_to_globals).dot = next_line(q)
              }
              current_block = 15129665204879337069;
            }
            7021673758293221412 => {
              dir = BACK as libc::c_int;
              p = (*ptr_to_globals).dot.offset(-1);
              if *(*ptr_to_globals).last_search_pattern.offset(0) as libc::c_int == '?' as i32 {
                dir = FORWARD as libc::c_int;
                p = (*ptr_to_globals).dot.offset(1)
              }
              current_block = 4166979493554389389;
            }
            18374191879090272823 => {
              buf[0] = c as libc::c_char;
              buf[1] = '\u{0}' as i32 as libc::c_char;
              q = get_input_line(buf.as_mut_ptr());
              if *q.offset(0) as libc::c_int != 0 && *q.offset(1) == 0 {
                if *(*ptr_to_globals).last_search_pattern.offset(0) != 0 {
                  *(*ptr_to_globals).last_search_pattern.offset(0) = c as libc::c_char
                }
                current_block = 7392824444931029276;
              } else if *q.offset(0) != 0 {
                free((*ptr_to_globals).last_search_pattern as *mut libc::c_void);
                (*ptr_to_globals).last_search_pattern = crate::libbb::xfuncs_printf::xstrdup(q);
                current_block = 7392824444931029276;
              } else {
                current_block = 15129665204879337069;
              }
            }
            16407828456666301883 => {
              if (*ptr_to_globals).last_forward_char == 0 {
                current_block = 15129665204879337069;
              } else {
                loop {
                  q = (*ptr_to_globals).dot.offset(-1);
                  while q >= (*ptr_to_globals).text
                    && *q as libc::c_int != '\n' as i32
                    && *q as libc::c_int != (*ptr_to_globals).last_forward_char
                  {
                    q = q.offset(-1)
                  }
                  if q >= (*ptr_to_globals).text
                    && *q as libc::c_int == (*ptr_to_globals).last_forward_char
                  {
                    (*ptr_to_globals).dot = q
                  }
                  (*ptr_to_globals).cmdcnt -= 1;
                  if !((*ptr_to_globals).cmdcnt > 0) {
                    break;
                  }
                }
                current_block = 15129665204879337069;
              }
            }
            9018432604062702004 => {
              q = (*ptr_to_globals).dot;
              while q < (*ptr_to_globals).end && *q as libc::c_int != '\n' as i32 {
                if !strchr(
                  b"()[]{}\x00" as *const u8 as *const libc::c_char,
                  *q as libc::c_int,
                )
                .is_null()
                {
                  p = find_pair(q, *q);
                  if p.is_null() {
                    indicate_error();
                  } else {
                    (*ptr_to_globals).dot = p
                  }
                  break;
                } else {
                  q = q.offset(1)
                }
              }
              if *q as libc::c_int == '\n' as i32 {
                indicate_error();
              }
              current_block = 15129665204879337069;
            }
            10247103787464459848 => {
              p = (*ptr_to_globals).reg[(*ptr_to_globals).YDreg as usize];
              if p.is_null() {
                status_line_bold(
                  b"Nothing in register %c\x00" as *const u8 as *const libc::c_char,
                  what_reg() as libc::c_int,
                );
              } else {
                if !strchr(p, '\n' as i32).is_null() {
                  if c == 'P' as i32 {
                    dot_begin();
                  }
                  if c == 'p' as i32 {
                    if end_line((*ptr_to_globals).dot) == (*ptr_to_globals).end.offset(-1) {
                      (*ptr_to_globals).dot = (*ptr_to_globals).end
                    } else {
                      dot_next();
                    }
                  }
                } else if c == 'p' as i32 {
                  dot_right();
                }
                string_insert((*ptr_to_globals).dot, p, 1i32);
                end_cmd_q();
              }
              current_block = 15129665204879337069;
            }
            15260732871948875843 => {
              c1 = (get_one_char() | 0x20i32) - 'a' as i32;
              if c1 as libc::c_uint <= 25i32 as libc::c_uint {
                (*ptr_to_globals).mark[c1 as usize] = (*ptr_to_globals).dot
              } else {
                indicate_error();
              }
              current_block = 15129665204879337069;
            }
            12738322036487086035 => {
              c1 = get_one_char() | 0x20i32;
              if (c1 - 'a' as i32) as libc::c_uint <= 25i32 as libc::c_uint {
                c1 = c1 - 'a' as i32;
                q = (*ptr_to_globals).mark[c1 as usize];
                if (*ptr_to_globals).text <= q && q < (*ptr_to_globals).end {
                  (*ptr_to_globals).dot = q;
                  dot_begin();
                  dot_skip_over_ws();
                }
              } else if c1 == '\'' as i32 {
                (*ptr_to_globals).dot = swap_context((*ptr_to_globals).dot);
                dot_begin();
                dot_skip_over_ws();
              } else {
                indicate_error();
              }
              current_block = 15129665204879337069;
            }
            13255096073384561358 => {
              c1 = (get_one_char() | 0x20i32) - 'a' as i32;
              if c1 as libc::c_uint <= 25i32 as libc::c_uint {
                (*ptr_to_globals).YDreg = c1 as smalluint
              } else {
                indicate_error();
              }
              current_block = 15129665204879337069;
            }
            10258711639984089377 => {
              if (*ptr_to_globals).cmd_mode as libc::c_int == 0 {
                indicate_error();
              }
              (*ptr_to_globals).cmd_mode = 0 as smallint;
              undo_queue_commit();
              end_cmd_q();
              (*ptr_to_globals).last_status_cksum = 0;
              current_block = 15129665204879337069;
            }
            11439127087547047736 => {
              buf[0] = c as libc::c_char;
              buf[1] = '\u{0}' as i32 as libc::c_char;
              not_implemented(buf.as_mut_ptr());
              end_cmd_q();
              current_block = 17440971994642376514;
            }
            7961798899781870241 => {
              dot_scroll(
                (*ptr_to_globals).rows.wrapping_sub(2i32 as libc::c_uint) as libc::c_int,
                -1i32,
              );
              current_block = 15129665204879337069;
            }
            9426343755402444879 => {
              dot_scroll(
                (*ptr_to_globals)
                  .rows
                  .wrapping_sub(2i32 as libc::c_uint)
                  .wrapping_div(2i32 as libc::c_uint) as libc::c_int,
                1i32,
              );
              current_block = 15129665204879337069;
            }
            13352459794680105913 => {
              dot_scroll(1i32, 1i32);
              current_block = 15129665204879337069;
            }
            14142272253464333006 => {
              dot_scroll(
                (*ptr_to_globals).rows.wrapping_sub(2i32 as libc::c_uint) as libc::c_int,
                1i32,
              );
              current_block = 15129665204879337069;
            }
            10758177197742640066 => {
              (*ptr_to_globals).last_status_cksum = 0;
              current_block = 15129665204879337069;
            }
            6152256259730122749 => {
              current_block = 7534742345255184552;
            }
            12883932598258173301 => {
              current_block = 8800996768013373992;
            }
            11242998110520238401 => {
              redraw(1i32);
              current_block = 15129665204879337069;
            }
            13619733043935729992 => {
              loop {
                dot_next();
                dot_skip_over_ws();
                (*ptr_to_globals).cmdcnt -= 1;
                if !((*ptr_to_globals).cmdcnt > 0) {
                  break;
                }
              }
              current_block = 15129665204879337069;
            }
            9339065157412720613 => {
              dot_scroll(
                (*ptr_to_globals)
                  .rows
                  .wrapping_sub(2i32 as libc::c_uint)
                  .wrapping_div(2i32 as libc::c_uint) as libc::c_int,
                -1i32,
              );
              current_block = 15129665204879337069;
            }
            11447082683497798022 => {
              dot_scroll(1i32, -1i32);
              current_block = 15129665204879337069;
            }
            5182000506326660482 => {
              current_block = 13993698454868426881;
            }
            1105010766850597332 => {
              if !(*ptr_to_globals).reg[27].is_null() {
                p = begin_line((*ptr_to_globals).dot);
                q = end_line((*ptr_to_globals).dot);
                p = text_hole_delete(p, q, 1i32);
                p = p.offset(string_insert(p, (*ptr_to_globals).reg[27], 2i32) as isize);
                (*ptr_to_globals).dot = p;
                dot_skip_over_ws();
              }
              current_block = 15129665204879337069;
            }
            8616046655533110204 => {
              undo_pop();
              current_block = 15129665204879337069;
            }
            5127767458142431603 => {
              loop {
                (*ptr_to_globals).dot = end_line((*ptr_to_globals).dot);
                (*ptr_to_globals).cmdcnt -= 1;
                if (*ptr_to_globals).cmdcnt <= 0 {
                  break;
                }
                dot_next();
              }
              current_block = 15129665204879337069;
            }
            222014967776118151 => {
              (*ptr_to_globals).last_forward_char = get_one_char();
              current_block = 7856905509180742666;
            }
            11209792479411604110 => {
              loop {
                dot_prev();
                dot_skip_over_ws();
                (*ptr_to_globals).cmdcnt -= 1;
                if !((*ptr_to_globals).cmdcnt > 0) {
                  break;
                }
              }
              current_block = 15129665204879337069;
            }
            3364823792826654116 => {
              if (*ptr_to_globals).lmc_len != 0 {
                (*ptr_to_globals).ioq_start = crate::libbb::xfuncs_printf::xstrndup(
                  (*ptr_to_globals).last_modifying_cmd.as_mut_ptr(),
                  (*ptr_to_globals).lmc_len,
                );
                (*ptr_to_globals).ioq = (*ptr_to_globals).ioq_start
              }
              current_block = 15129665204879337069;
            }
            18096603330221575131 => {
              current_block = 17498168302144015873;
            }
            16891123271837848903 => {
              dot_end();
              current_block = 1752638907092016026;
            }
            8517235759107662071 => {
              current_block = 5847749760081351726;
            }
            12525254419223051704 => {
              if (*ptr_to_globals).dot < (*ptr_to_globals).end.offset(-1) {
                (*ptr_to_globals).dot = yank_delete(
                  (*ptr_to_globals).dot,
                  (*ptr_to_globals).dot,
                  1i32,
                  YANKDEL as libc::c_int,
                  1i32,
                )
              }
              current_block = 15129665204879337069;
            }
            15232911949322867522 => {
              current_block = 17251831742223396249;
            }
            10863374208794025069 => {
              current_block = 1895262434596074581;
            }
            451126677064669119 => {
              loop {
                dot_prev();
                (*ptr_to_globals).dot = move_to_col(
                  (*ptr_to_globals).dot,
                  (*ptr_to_globals).ccol + (*ptr_to_globals).offset,
                );
                (*ptr_to_globals).cmdcnt -= 1;
                if !((*ptr_to_globals).cmdcnt > 0) {
                  break;
                }
              }
              current_block = 15129665204879337069;
            }
            4611735929166613116 => {
              loop {
                if bb_ascii_isalnum(*(*ptr_to_globals).dot as libc::c_uchar) != 0
                  || *(*ptr_to_globals).dot as libc::c_int == '_' as i32
                {
                  (*ptr_to_globals).dot = skip_thing(
                    (*ptr_to_globals).dot,
                    1i32,
                    FORWARD as libc::c_int,
                    S_END_ALNUM as libc::c_int,
                  )
                } else if *strchrnul(
                  b"!\"#$%&\'()*+,-./:;<=>?@[\\]^_`{|}~\x00" as *const u8 as *const libc::c_char,
                  *(*ptr_to_globals).dot as libc::c_int,
                )
                .offset(0)
                  != 0
                {
                  (*ptr_to_globals).dot = skip_thing(
                    (*ptr_to_globals).dot,
                    1i32,
                    FORWARD as libc::c_int,
                    S_END_PUNCT as libc::c_int,
                  )
                }
                if (*ptr_to_globals).dot < (*ptr_to_globals).end.offset(-1) {
                  (*ptr_to_globals).dot = (*ptr_to_globals).dot.offset(1)
                }
                if ({
                  let mut bb__isspace: libc::c_uchar =
                    (*(*ptr_to_globals).dot as libc::c_int - 9i32) as libc::c_uchar;
                  (bb__isspace as libc::c_int == ' ' as i32 - 9i32
                    || bb__isspace as libc::c_int <= 13i32 - 9i32) as libc::c_int
                }) != 0
                {
                  (*ptr_to_globals).dot = skip_thing(
                    (*ptr_to_globals).dot,
                    2i32,
                    FORWARD as libc::c_int,
                    S_OVER_WS as libc::c_int,
                  )
                }
                (*ptr_to_globals).cmdcnt -= 1;
                if !((*ptr_to_globals).cmdcnt > 0) {
                  break;
                }
              }
              current_block = 15129665204879337069;
            }
            4386451087681909888 => {
              (*ptr_to_globals).dot =
                move_to_col((*ptr_to_globals).dot, (*ptr_to_globals).cmdcnt - 1i32);
              current_block = 15129665204879337069;
            }
            1296397779060594135 => {
              dot_begin();
              current_block = 15129665204879337069;
            }
            _ => {}
          }
          match current_block {
            15129665204879337069 => {}
            8629930936610358348 => {}
            _ => {
              match current_block {
                17251831742223396249 => {
                  dir = 0;
                  if c == 'X' as i32 {
                    dir = -1i32
                  }
                  loop {
                    if *(*ptr_to_globals).dot.offset(dir as isize) as libc::c_int != '\n' as i32 {
                      if c == 'X' as i32 {
                        (*ptr_to_globals).dot = (*ptr_to_globals).dot.offset(-1)
                      }
                      (*ptr_to_globals).dot = yank_delete(
                        (*ptr_to_globals).dot,
                        (*ptr_to_globals).dot,
                        0,
                        YANKDEL as libc::c_int,
                        1i32,
                      )
                    }
                    (*ptr_to_globals).cmdcnt -= 1;
                    if !((*ptr_to_globals).cmdcnt > 0) {
                      break;
                    }
                  }
                  end_cmd_q();
                  if c == 's' as i32 {
                    current_block = 8629930936610358348;
                  } else {
                    current_block = 15129665204879337069;
                  }
                }
                2087484904894455135 => {
                  dot_end();
                  (*ptr_to_globals).dot =
                    char_insert((*ptr_to_globals).dot, '\n' as i32 as libc::c_char, 1i32);
                  current_block = 8629930936610358348;
                }
                11945623545738147997 => {
                  (*ptr_to_globals).dot = (*ptr_to_globals).end.offset(-1);
                  if (*ptr_to_globals).cmdcnt > 0 {
                    (*ptr_to_globals).dot = find_line((*ptr_to_globals).cmdcnt)
                  }
                  dot_skip_over_ws();
                  current_block = 15129665204879337069;
                }
                5847749760081351726 => {
                  dir = FORWARD as libc::c_int;
                  if c == 'B' as i32 {
                    dir = BACK as libc::c_int
                  }
                  loop {
                    if c == 'W' as i32
                      || ({
                        let mut bb__isspace: libc::c_uchar =
                          (*(*ptr_to_globals).dot.offset(dir as isize) as libc::c_int - 9i32)
                            as libc::c_uchar;
                        (bb__isspace as libc::c_int == ' ' as i32 - 9i32
                          || bb__isspace as libc::c_int <= 13i32 - 9i32)
                          as libc::c_int
                      }) != 0
                    {
                      (*ptr_to_globals).dot =
                        skip_thing((*ptr_to_globals).dot, 1i32, dir, S_TO_WS as libc::c_int);
                      (*ptr_to_globals).dot =
                        skip_thing((*ptr_to_globals).dot, 2i32, dir, S_OVER_WS as libc::c_int)
                    }
                    if c != 'W' as i32 {
                      (*ptr_to_globals).dot =
                        skip_thing((*ptr_to_globals).dot, 1i32, dir, S_BEFORE_WS as libc::c_int)
                    }
                    (*ptr_to_globals).cmdcnt -= 1;
                    if !((*ptr_to_globals).cmdcnt > 0) {
                      break;
                    }
                  }
                  current_block = 15129665204879337069;
                }
                17440971994642376514 => {
                  current_block = 15129665204879337069;
                }
                7534742345255184552 => {
                  current_block = 17247297260531395789;
                }
                8800996768013373992 => {
                  loop {
                    dot_next();
                    (*ptr_to_globals).dot = move_to_col(
                      (*ptr_to_globals).dot,
                      (*ptr_to_globals).ccol + (*ptr_to_globals).offset,
                    );
                    (*ptr_to_globals).cmdcnt -= 1;
                    if !((*ptr_to_globals).cmdcnt > 0) {
                      break;
                    }
                  }
                  current_block = 15129665204879337069;
                }
                13993698454868426881 => {
                  loop {
                    dot_right();
                    (*ptr_to_globals).cmdcnt -= 1;
                    if !((*ptr_to_globals).cmdcnt > 0) {
                      break;
                    }
                  }
                  current_block = 15129665204879337069;
                }
                7856905509180742666 => {
                  while !((*ptr_to_globals).last_forward_char == 0) {
                    q = (*ptr_to_globals).dot.offset(1);
                    while q < (*ptr_to_globals).end.offset(-1)
                      && *q as libc::c_int != '\n' as i32
                      && *q as libc::c_int != (*ptr_to_globals).last_forward_char
                    {
                      q = q.offset(1)
                    }
                    if *q as libc::c_int == (*ptr_to_globals).last_forward_char {
                      (*ptr_to_globals).dot = q
                    }
                    (*ptr_to_globals).cmdcnt -= 1;
                    if !((*ptr_to_globals).cmdcnt > 0) {
                      break;
                    }
                  }
                  current_block = 15129665204879337069;
                }
                17498168302144015873 => {
                  current_block = 8681395796513813967;
                }
                1752638907092016026 => {
                  if *(*ptr_to_globals).dot as libc::c_int != '\n' as i32 {
                    (*ptr_to_globals).dot = (*ptr_to_globals).dot.offset(1)
                  }
                  current_block = 8629930936610358348;
                }
                3268579060917229304 => {
                  current_block = 8629930936610358348;
                }
                1895262434596074581 => {
                  current_block = 8908416993177701018;
                }
                _ => {}
              }
              match current_block {
                8629930936610358348 => {}
                15129665204879337069 => {}
                _ => {
                  match current_block {
                    17247297260531395789 => {
                      loop {
                        dot_left();
                        (*ptr_to_globals).cmdcnt -= 1;
                        if !((*ptr_to_globals).cmdcnt > 0) {
                          break;
                        }
                      }
                      current_block = 15129665204879337069;
                    }
                    8681395796513813967 => {
                      current_block = 5591548203144509315;
                    }
                    8908416993177701018 => {
                      current_block = 16124761010012532485;
                    }
                    _ => {}
                  }
                  match current_block {
                    15129665204879337069 => {}
                    _ => {
                      match current_block {
                        16124761010012532485 => {
                          let mut yf: libc::c_int = 0;
                          let mut ml: libc::c_int = 0;
                          let mut whole: libc::c_int = 0;
                          yf = YANKDEL as libc::c_int;
                          if c == 'y' as i32 || c == 'Y' as i32 {
                            yf = YANKONLY as libc::c_int
                          }
                          c1 = 'y' as i32;
                          if c != 'Y' as i32 {
                            c1 = get_one_char()
                          }
                          ml = find_range(&mut p, &mut q, c1 as libc::c_char);
                          place_cursor(0i32, 0);
                          if c1 == 27i32 {
                            c1 = 27i32;
                            c = c1
                          } else if !strchr(b"wW\x00" as *const u8 as *const libc::c_char, c1)
                            .is_null()
                          {
                            ml = 0;
                            if c == 'c' as i32 {
                              while ({
                                let mut bb__isspace: libc::c_uchar =
                                  (*q as libc::c_int - 9i32) as libc::c_uchar;
                                (bb__isspace as libc::c_int == ' ' as i32 - 9i32
                                  || bb__isspace as libc::c_int <= 13i32 - 9i32)
                                  as libc::c_int
                              }) != 0
                                && q > p
                              {
                                q = q.offset(-1)
                              }
                            }
                            (*ptr_to_globals).dot = yank_delete(p, q, ml, yf, 1i32)
                          } else if !strchr(
                            b"^0bBeEft%$ lh\x08\x7f\x00" as *const u8 as *const libc::c_char,
                            c1,
                          )
                          .is_null()
                          {
                            (*ptr_to_globals).dot = yank_delete(p, q, ml, yf, 1i32)
                          } else if !strchr(
                            b"cdykjGHL+-{}\r\n\x00" as *const u8 as *const libc::c_char,
                            c1,
                          )
                          .is_null()
                          {
                            (*ptr_to_globals).dot = yank_delete(p, q, ml, yf, 1i32);
                            whole = 1i32
                          } else {
                            c1 = 27i32;
                            c = c1;
                            ml = 0;
                            indicate_error();
                          }
                          if ml != 0 && whole != 0 {
                            if c == 'c' as i32 {
                              (*ptr_to_globals).dot = char_insert(
                                (*ptr_to_globals).dot,
                                '\n' as i32 as libc::c_char,
                                2i32,
                              );
                              if whole != 0
                                && (*ptr_to_globals).dot != (*ptr_to_globals).end.offset(-1)
                              {
                                dot_prev();
                              }
                            } else if c == 'd' as i32 {
                              dot_begin();
                              dot_skip_over_ws();
                            }
                          }
                          if c1 != 27i32 {
                            if c == 'c' as i32 {
                              strcpy(
                                buf.as_mut_ptr(),
                                b"Change\x00" as *const u8 as *const libc::c_char,
                              );
                              current_block = 8629930936610358348;
                            } else {
                              if c == 'd' as i32 {
                                strcpy(
                                  buf.as_mut_ptr(),
                                  b"Delete\x00" as *const u8 as *const libc::c_char,
                                );
                              }
                              if c == 'y' as i32 || c == 'Y' as i32 {
                                strcpy(
                                  buf.as_mut_ptr(),
                                  b"Yank\x00" as *const u8 as *const libc::c_char,
                                );
                              }
                              p = (*ptr_to_globals).reg[(*ptr_to_globals).YDreg as usize];
                              q = p.offset(strlen(p) as isize);
                              cnt = 0;
                              while p <= q {
                                if *p as libc::c_int == '\n' as i32 {
                                  cnt += 1
                                }
                                p = p.offset(1)
                              }
                              status_line(
                                b"%s %u lines (%u chars) using [%c]\x00" as *const u8
                                  as *const libc::c_char,
                                buf.as_mut_ptr(),
                                cnt,
                                strlen((*ptr_to_globals).reg[(*ptr_to_globals).YDreg as usize])
                                  as libc::c_uint,
                                what_reg() as libc::c_int,
                              );
                              end_cmd_q();
                              current_block = 15129665204879337069;
                            }
                          } else {
                            current_block = 15129665204879337069;
                          }
                        }
                        5591548203144509315 => {
                          current_block = 2636677179867529885;
                        }
                        _ => {}
                      }
                      match current_block {
                        15129665204879337069 => {}
                        8629930936610358348 => {}
                        _ => {
                          match current_block {
                            2636677179867529885 => {
                              current_block = 12309206730560524281;
                            }
                            _ => {}
                          }
                          match current_block {
                            12309206730560524281 => {
                              current_block = 3325768110057758661;
                            }
                            _ => {}
                          }
                          match current_block {
                            3325768110057758661 => {
                              current_block = 14815832896553429982;
                            }
                            _ => {}
                          }
                          match current_block {
                            14815832896553429982 => {
                              current_block = 10731695520297161438;
                            }
                            _ => {}
                          }
                          match current_block {
                            10731695520297161438 => {
                              if c == '0' as i32 && (*ptr_to_globals).cmdcnt < 1i32 {
                                dot_begin();
                              } else {
                                (*ptr_to_globals).cmdcnt =
                                  (*ptr_to_globals).cmdcnt * 10i32 + (c - '0' as i32)
                              }
                              current_block = 15129665204879337069;
                            }
                            _ => {}
                          }
                          match current_block {
                            15129665204879337069 => {}
                            _ => {
                              loop {
                                match current_block {
                                  16813369756331276724 => {
                                    msg = std::ptr::null();
                                    current_block = 7392824444931029276;
                                  }
                                  7392824444931029276 => {
                                    dir = FORWARD as libc::c_int;
                                    p = (*ptr_to_globals).dot.offset(1);
                                    if *(*ptr_to_globals).last_search_pattern.offset(0)
                                      as libc::c_int
                                      == '?' as i32
                                    {
                                      dir = BACK as libc::c_int;
                                      p = (*ptr_to_globals).dot.offset(-1)
                                    }
                                    current_block = 4166979493554389389;
                                  }
                                  _ => {
                                    q = char_search(
                                      p,
                                      (*ptr_to_globals).last_search_pattern.offset(1),
                                      dir << 1i32 | FULL as libc::c_int,
                                    );
                                    if !q.is_null() {
                                      (*ptr_to_globals).dot = q;
                                      msg = std::ptr::null()
                                    } else {
                                      p = (*ptr_to_globals).text;
                                      if dir == BACK as libc::c_int {
                                        p = (*ptr_to_globals).end.offset(-1)
                                      }
                                      q = char_search(
                                        p,
                                        (*ptr_to_globals).last_search_pattern.offset(1),
                                        dir << 1i32 | FULL as libc::c_int,
                                      );
                                      if !q.is_null() {
                                        (*ptr_to_globals).dot = q;
                                        msg = b"search hit BOTTOM, continuing at TOP\x00"
                                          as *const u8
                                          as *const libc::c_char;
                                        if dir == BACK as libc::c_int {
                                          msg = b"search hit TOP, continuing at BOTTOM\x00"
                                            as *const u8
                                            as *const libc::c_char
                                        }
                                      } else {
                                        msg = b"Pattern not found\x00" as *const u8
                                          as *const libc::c_char
                                      }
                                    }
                                    if !msg.is_null() {
                                      status_line_bold(
                                        b"%s\x00" as *const u8 as *const libc::c_char,
                                        msg,
                                      );
                                    }
                                    (*ptr_to_globals).cmdcnt -= 1;
                                    if (*ptr_to_globals).cmdcnt > 0 {
                                      current_block = 16813369756331276724;
                                    } else {
                                      break;
                                    }
                                  }
                                }
                              }
                              current_block = 15129665204879337069;
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
        79 => {
          current_block = 12960118908218882441;
          match current_block {
            16992905640583886232 => {
              loop {
                if (*(*ptr_to_globals).dot as libc::c_int - 'a' as i32) as libc::c_uchar
                  as libc::c_int
                  <= 'z' as i32 - 'a' as i32
                {
                  undo_push(
                    (*ptr_to_globals).dot,
                    1i32 as libc::c_uint,
                    1i32 as libc::c_uchar,
                  );
                  *(*ptr_to_globals).dot =
                    bb_ascii_toupper(*(*ptr_to_globals).dot as libc::c_uchar) as libc::c_char;
                  undo_push(
                    (*ptr_to_globals).dot,
                    1i32 as libc::c_uint,
                    2i32 as libc::c_uchar,
                  );
                } else if (*(*ptr_to_globals).dot as libc::c_int - 'A' as i32) as libc::c_uchar
                  as libc::c_int
                  <= 'Z' as i32 - 'A' as i32
                {
                  undo_push(
                    (*ptr_to_globals).dot,
                    1i32 as libc::c_uint,
                    1i32 as libc::c_uchar,
                  );
                  *(*ptr_to_globals).dot =
                    bb_ascii_tolower(*(*ptr_to_globals).dot as libc::c_uchar) as libc::c_char;
                  undo_push(
                    (*ptr_to_globals).dot,
                    1i32 as libc::c_uint,
                    2i32 as libc::c_uchar,
                  );
                }
                dot_right();
                (*ptr_to_globals).cmdcnt -= 1;
                if !((*ptr_to_globals).cmdcnt > 0) {
                  break;
                }
              }
              end_cmd_q();
              current_block = 15129665204879337069;
            }
            8729655159604064397 => {
              c1 = get_one_char();
              cnt = 0;
              if c1 == '.' as i32 {
                cnt = (*ptr_to_globals)
                  .rows
                  .wrapping_sub(2i32 as libc::c_uint)
                  .wrapping_div(2i32 as libc::c_uint) as libc::c_int
              }
              if c1 == '-' as i32 {
                cnt = (*ptr_to_globals).rows.wrapping_sub(2i32 as libc::c_uint) as libc::c_int
              }
              (*ptr_to_globals).screenbegin = begin_line((*ptr_to_globals).dot);
              dot_scroll(cnt, -1i32);
              current_block = 15129665204879337069;
            }
            15899500648299942075 => {
              (*ptr_to_globals).last_forward_char = get_one_char();
              do_cmd(';' as i32);
              if *(*ptr_to_globals).dot as libc::c_int == (*ptr_to_globals).last_forward_char {
                dot_left();
              }
              (*ptr_to_globals).last_forward_char = 0;
              current_block = 15129665204879337069;
            }
            9051390181078481641 => {
              c1 = get_one_char();
              if *(*ptr_to_globals).dot as libc::c_int != '\n' as i32 {
                (*ptr_to_globals).dot =
                  text_hole_delete((*ptr_to_globals).dot, (*ptr_to_globals).dot, 1i32);
                (*ptr_to_globals).dot =
                  char_insert((*ptr_to_globals).dot, c1 as libc::c_char, 2i32);
                dot_left();
              }
              end_cmd_q();
              current_block = 15129665204879337069;
            }
            877115918601926659 => {
              dir = FORWARD as libc::c_int;
              if c == 'b' as i32 {
                dir = BACK as libc::c_int
              }
              while !((*ptr_to_globals).dot.offset(dir as isize) < (*ptr_to_globals).text
                || (*ptr_to_globals).dot.offset(dir as isize) > (*ptr_to_globals).end.offset(-1))
              {
                (*ptr_to_globals).dot = (*ptr_to_globals).dot.offset(dir as isize);
                if ({
                  let mut bb__isspace: libc::c_uchar =
                    (*(*ptr_to_globals).dot as libc::c_int - 9i32) as libc::c_uchar;
                  (bb__isspace as libc::c_int == ' ' as i32 - 9i32
                    || bb__isspace as libc::c_int <= 13i32 - 9i32) as libc::c_int
                }) != 0
                {
                  (*ptr_to_globals).dot = skip_thing(
                    (*ptr_to_globals).dot,
                    if c == 'e' as i32 { 2i32 } else { 1i32 },
                    dir,
                    S_OVER_WS as libc::c_int,
                  )
                }
                if bb_ascii_isalnum(*(*ptr_to_globals).dot as libc::c_uchar) != 0
                  || *(*ptr_to_globals).dot as libc::c_int == '_' as i32
                {
                  (*ptr_to_globals).dot =
                    skip_thing((*ptr_to_globals).dot, 1i32, dir, S_END_ALNUM as libc::c_int)
                } else if *strchrnul(
                  b"!\"#$%&\'()*+,-./:;<=>?@[\\]^_`{|}~\x00" as *const u8 as *const libc::c_char,
                  *(*ptr_to_globals).dot as libc::c_int,
                )
                .offset(0)
                  != 0
                {
                  (*ptr_to_globals).dot =
                    skip_thing((*ptr_to_globals).dot, 1i32, dir, S_END_PUNCT as libc::c_int)
                }
                (*ptr_to_globals).cmdcnt -= 1;
                if !((*ptr_to_globals).cmdcnt > 0) {
                  break;
                }
              }
              current_block = 15129665204879337069;
            }
            1085022737867179637 => {
              dot_begin();
              dot_skip_over_ws();
              current_block = 15129665204879337069;
            }
            3113147720494587438 => {
              c1 = get_one_char();
              if c1 != 'Z' as i32 {
                indicate_error();
              } else if (*ptr_to_globals).modified_count != 0 {
                if 1i32 != 0 && (*ptr_to_globals).readonly_mode as libc::c_int != 0 {
                  status_line_bold(
                    b"\'%s\' is read only\x00" as *const u8 as *const libc::c_char,
                    (*ptr_to_globals).current_filename,
                  );
                } else {
                  cnt = file_write(
                    (*ptr_to_globals).current_filename,
                    (*ptr_to_globals).text,
                    (*ptr_to_globals).end.offset(-1),
                  );
                  if cnt < 0 {
                    if cnt == -1i32 {
                      status_line_bold(b"Write error: %m\x00" as *const u8 as *const libc::c_char);
                    }
                  } else if cnt as libc::c_long
                    == (*ptr_to_globals)
                      .end
                      .offset(-1)
                      .wrapping_offset_from((*ptr_to_globals).text)
                      as libc::c_long
                      + 1
                  {
                    (*ptr_to_globals).editing = 0 as smallint
                  }
                }
              } else {
                (*ptr_to_globals).editing = 0 as smallint
              }
              current_block = 15129665204879337069;
            }
            12960118908218882441 => {
              p = begin_line((*ptr_to_globals).dot);
              if *p.offset(-1i32 as isize) as libc::c_int == '\n' as i32 {
                dot_prev();
                current_block = 2087484904894455135;
              } else {
                dot_begin();
                (*ptr_to_globals).dot =
                  char_insert((*ptr_to_globals).dot, '\n' as i32 as libc::c_char, 1i32);
                dot_prev();
                current_block = 8629930936610358348;
              }
            }
            8720450212473544924 => {
              (*ptr_to_globals).dot = (*ptr_to_globals).screenbegin;
              cnt = 0;
              while (cnt as libc::c_uint)
                < (*ptr_to_globals)
                  .rows
                  .wrapping_sub(1i32 as libc::c_uint)
                  .wrapping_div(2i32 as libc::c_uint)
              {
                (*ptr_to_globals).dot = next_line((*ptr_to_globals).dot);
                cnt += 1
              }
              current_block = 15129665204879337069;
            }
            13015277209715431090 => {
              (*ptr_to_globals).dot = end_screen();
              if (*ptr_to_globals).cmdcnt as libc::c_uint
                > (*ptr_to_globals).rows.wrapping_sub(1i32 as libc::c_uint)
              {
                (*ptr_to_globals).cmdcnt =
                  (*ptr_to_globals).rows.wrapping_sub(1i32 as libc::c_uint) as libc::c_int
              }
              (*ptr_to_globals).cmdcnt -= 1;
              if (*ptr_to_globals).cmdcnt > 0 {
                do_cmd('-' as i32);
              }
              dot_begin();
              dot_skip_over_ws();
              current_block = 15129665204879337069;
            }
            9800435767766781385 => {
              loop {
                dot_end();
                if (*ptr_to_globals).dot < (*ptr_to_globals).end.offset(-1) {
                  undo_push(
                    (*ptr_to_globals).dot,
                    1i32 as libc::c_uint,
                    1i32 as libc::c_uchar,
                  );
                  let fresh15 = (*ptr_to_globals).dot;
                  (*ptr_to_globals).dot = (*ptr_to_globals).dot.offset(1);
                  *fresh15 = ' ' as i32 as libc::c_char;
                  undo_push(
                    (*ptr_to_globals).dot.offset(-1),
                    1i32 as libc::c_uint,
                    2i32 as libc::c_uchar,
                  );
                  while ({
                    let mut bb__isblank: libc::c_uchar = *(*ptr_to_globals).dot as libc::c_uchar;
                    (bb__isblank as libc::c_int == ' ' as i32
                      || bb__isblank as libc::c_int == '\t' as i32)
                      as libc::c_int
                  }) != 0
                  {
                    text_hole_delete((*ptr_to_globals).dot, (*ptr_to_globals).dot, 2i32);
                  }
                }
                (*ptr_to_globals).cmdcnt -= 1;
                if !((*ptr_to_globals).cmdcnt > 0) {
                  break;
                }
              }
              end_cmd_q();
              current_block = 15129665204879337069;
            }
            3432363526595694666 => {
              dot_begin();
              dot_skip_over_ws();
              current_block = 3268579060917229304;
            }
            3494829253343353619 => {
              (*ptr_to_globals).dot = (*ptr_to_globals).screenbegin;
              if (*ptr_to_globals).cmdcnt as libc::c_uint
                > (*ptr_to_globals).rows.wrapping_sub(1i32 as libc::c_uint)
              {
                (*ptr_to_globals).cmdcnt =
                  (*ptr_to_globals).rows.wrapping_sub(1i32 as libc::c_uint) as libc::c_int
              }
              (*ptr_to_globals).cmdcnt -= 1;
              if (*ptr_to_globals).cmdcnt > 0 {
                do_cmd('+' as i32);
              }
              dot_skip_over_ws();
              current_block = 15129665204879337069;
            }
            17973101765331640574 => {
              c1 = get_one_char();
              if c1 != 'g' as i32 {
                buf[0] = 'g' as i32 as libc::c_char;
                buf[1] = if c1 >= 0 { c1 } else { '*' as i32 } as libc::c_char;
                buf[2] = '\u{0}' as i32 as libc::c_char;
                not_implemented(buf.as_mut_ptr());
                current_block = 15129665204879337069;
              } else {
                if (*ptr_to_globals).cmdcnt == 0 {
                  (*ptr_to_globals).cmdcnt = 1i32
                }
                current_block = 11945623545738147997;
              }
            }
            16546625800574160972 => {
              save_dot = (*ptr_to_globals).dot;
              (*ptr_to_globals).dot = dollar_line((*ptr_to_globals).dot);
              (*ptr_to_globals).dot = yank_delete(
                save_dot,
                (*ptr_to_globals).dot,
                0,
                YANKDEL as libc::c_int,
                1i32,
              );
              if c == 'C' as i32 {
                current_block = 8629930936610358348;
              } else {
                if c == 'D' as i32 {
                  end_cmd_q();
                }
                current_block = 15129665204879337069;
              }
            }
            11937696639986586685 => {
              cnt = count_lines((*ptr_to_globals).text, (*ptr_to_globals).dot);
              c1 = get_one_char();
              find_range(&mut p, &mut q, c1 as libc::c_char);
              yank_delete(p, q, 1i32, YANKONLY as libc::c_int, 0);
              p = begin_line(p);
              q = end_line(q);
              i = count_lines(p, q);
              while i > 0 {
                if c == '<' as i32 {
                  if *p as libc::c_int == '\t' as i32 {
                    text_hole_delete(p, p, 0);
                  } else if *p as libc::c_int == ' ' as i32 {
                    j = 0;
                    while *p as libc::c_int == ' ' as i32 && j < (*ptr_to_globals).tabstop {
                      text_hole_delete(p, p, 0);
                      j += 1
                    }
                  }
                } else if c == '>' as i32 {
                  char_insert(p, '\t' as i32 as libc::c_char, 1i32);
                }
                i -= 1;
                p = next_line(p)
              }
              (*ptr_to_globals).dot = find_line(cnt);
              dot_skip_over_ws();
              end_cmd_q();
              current_block = 15129665204879337069;
            }
            17725350714912028156 => {
              p = get_input_line(b":\x00" as *const u8 as *const libc::c_char);
              colon(p);
              current_block = 15129665204879337069;
            }
            14526470074083880812 => {
              q = char_search(
                (*ptr_to_globals).dot,
                b"\n\n\x00" as *const u8 as *const libc::c_char,
                (FORWARD as libc::c_int) << 1i32 | FULL as libc::c_int,
              );
              if !q.is_null() {
                (*ptr_to_globals).dot = next_line(q)
              }
              current_block = 15129665204879337069;
            }
            8893187391306414141 => {
              q = char_search(
                (*ptr_to_globals).dot,
                b"\n\n\x00" as *const u8 as *const libc::c_char,
                ((BACK as libc::c_int as libc::c_uint) << 1i32
                  | FULL as libc::c_int as libc::c_uint) as libc::c_int,
              );
              if !q.is_null() {
                (*ptr_to_globals).dot = next_line(q)
              }
              current_block = 15129665204879337069;
            }
            7021673758293221412 => {
              dir = BACK as libc::c_int;
              p = (*ptr_to_globals).dot.offset(-1);
              if *(*ptr_to_globals).last_search_pattern.offset(0) as libc::c_int == '?' as i32 {
                dir = FORWARD as libc::c_int;
                p = (*ptr_to_globals).dot.offset(1)
              }
              current_block = 4166979493554389389;
            }
            18374191879090272823 => {
              buf[0] = c as libc::c_char;
              buf[1] = '\u{0}' as i32 as libc::c_char;
              q = get_input_line(buf.as_mut_ptr());
              if *q.offset(0) as libc::c_int != 0 && *q.offset(1) == 0 {
                if *(*ptr_to_globals).last_search_pattern.offset(0) != 0 {
                  *(*ptr_to_globals).last_search_pattern.offset(0) = c as libc::c_char
                }
                current_block = 7392824444931029276;
              } else if *q.offset(0) != 0 {
                free((*ptr_to_globals).last_search_pattern as *mut libc::c_void);
                (*ptr_to_globals).last_search_pattern = crate::libbb::xfuncs_printf::xstrdup(q);
                current_block = 7392824444931029276;
              } else {
                current_block = 15129665204879337069;
              }
            }
            16407828456666301883 => {
              if (*ptr_to_globals).last_forward_char == 0 {
                current_block = 15129665204879337069;
              } else {
                loop {
                  q = (*ptr_to_globals).dot.offset(-1);
                  while q >= (*ptr_to_globals).text
                    && *q as libc::c_int != '\n' as i32
                    && *q as libc::c_int != (*ptr_to_globals).last_forward_char
                  {
                    q = q.offset(-1)
                  }
                  if q >= (*ptr_to_globals).text
                    && *q as libc::c_int == (*ptr_to_globals).last_forward_char
                  {
                    (*ptr_to_globals).dot = q
                  }
                  (*ptr_to_globals).cmdcnt -= 1;
                  if !((*ptr_to_globals).cmdcnt > 0) {
                    break;
                  }
                }
                current_block = 15129665204879337069;
              }
            }
            9018432604062702004 => {
              q = (*ptr_to_globals).dot;
              while q < (*ptr_to_globals).end && *q as libc::c_int != '\n' as i32 {
                if !strchr(
                  b"()[]{}\x00" as *const u8 as *const libc::c_char,
                  *q as libc::c_int,
                )
                .is_null()
                {
                  p = find_pair(q, *q);
                  if p.is_null() {
                    indicate_error();
                  } else {
                    (*ptr_to_globals).dot = p
                  }
                  break;
                } else {
                  q = q.offset(1)
                }
              }
              if *q as libc::c_int == '\n' as i32 {
                indicate_error();
              }
              current_block = 15129665204879337069;
            }
            10247103787464459848 => {
              p = (*ptr_to_globals).reg[(*ptr_to_globals).YDreg as usize];
              if p.is_null() {
                status_line_bold(
                  b"Nothing in register %c\x00" as *const u8 as *const libc::c_char,
                  what_reg() as libc::c_int,
                );
              } else {
                if !strchr(p, '\n' as i32).is_null() {
                  if c == 'P' as i32 {
                    dot_begin();
                  }
                  if c == 'p' as i32 {
                    if end_line((*ptr_to_globals).dot) == (*ptr_to_globals).end.offset(-1) {
                      (*ptr_to_globals).dot = (*ptr_to_globals).end
                    } else {
                      dot_next();
                    }
                  }
                } else if c == 'p' as i32 {
                  dot_right();
                }
                string_insert((*ptr_to_globals).dot, p, 1i32);
                end_cmd_q();
              }
              current_block = 15129665204879337069;
            }
            15260732871948875843 => {
              c1 = (get_one_char() | 0x20i32) - 'a' as i32;
              if c1 as libc::c_uint <= 25i32 as libc::c_uint {
                (*ptr_to_globals).mark[c1 as usize] = (*ptr_to_globals).dot
              } else {
                indicate_error();
              }
              current_block = 15129665204879337069;
            }
            12738322036487086035 => {
              c1 = get_one_char() | 0x20i32;
              if (c1 - 'a' as i32) as libc::c_uint <= 25i32 as libc::c_uint {
                c1 = c1 - 'a' as i32;
                q = (*ptr_to_globals).mark[c1 as usize];
                if (*ptr_to_globals).text <= q && q < (*ptr_to_globals).end {
                  (*ptr_to_globals).dot = q;
                  dot_begin();
                  dot_skip_over_ws();
                }
              } else if c1 == '\'' as i32 {
                (*ptr_to_globals).dot = swap_context((*ptr_to_globals).dot);
                dot_begin();
                dot_skip_over_ws();
              } else {
                indicate_error();
              }
              current_block = 15129665204879337069;
            }
            13255096073384561358 => {
              c1 = (get_one_char() | 0x20i32) - 'a' as i32;
              if c1 as libc::c_uint <= 25i32 as libc::c_uint {
                (*ptr_to_globals).YDreg = c1 as smalluint
              } else {
                indicate_error();
              }
              current_block = 15129665204879337069;
            }
            10258711639984089377 => {
              if (*ptr_to_globals).cmd_mode as libc::c_int == 0 {
                indicate_error();
              }
              (*ptr_to_globals).cmd_mode = 0 as smallint;
              undo_queue_commit();
              end_cmd_q();
              (*ptr_to_globals).last_status_cksum = 0;
              current_block = 15129665204879337069;
            }
            11439127087547047736 => {
              buf[0] = c as libc::c_char;
              buf[1] = '\u{0}' as i32 as libc::c_char;
              not_implemented(buf.as_mut_ptr());
              end_cmd_q();
              current_block = 17440971994642376514;
            }
            7961798899781870241 => {
              dot_scroll(
                (*ptr_to_globals).rows.wrapping_sub(2i32 as libc::c_uint) as libc::c_int,
                -1i32,
              );
              current_block = 15129665204879337069;
            }
            9426343755402444879 => {
              dot_scroll(
                (*ptr_to_globals)
                  .rows
                  .wrapping_sub(2i32 as libc::c_uint)
                  .wrapping_div(2i32 as libc::c_uint) as libc::c_int,
                1i32,
              );
              current_block = 15129665204879337069;
            }
            13352459794680105913 => {
              dot_scroll(1i32, 1i32);
              current_block = 15129665204879337069;
            }
            14142272253464333006 => {
              dot_scroll(
                (*ptr_to_globals).rows.wrapping_sub(2i32 as libc::c_uint) as libc::c_int,
                1i32,
              );
              current_block = 15129665204879337069;
            }
            10758177197742640066 => {
              (*ptr_to_globals).last_status_cksum = 0;
              current_block = 15129665204879337069;
            }
            6152256259730122749 => {
              current_block = 7534742345255184552;
            }
            12883932598258173301 => {
              current_block = 8800996768013373992;
            }
            11242998110520238401 => {
              redraw(1i32);
              current_block = 15129665204879337069;
            }
            13619733043935729992 => {
              loop {
                dot_next();
                dot_skip_over_ws();
                (*ptr_to_globals).cmdcnt -= 1;
                if !((*ptr_to_globals).cmdcnt > 0) {
                  break;
                }
              }
              current_block = 15129665204879337069;
            }
            9339065157412720613 => {
              dot_scroll(
                (*ptr_to_globals)
                  .rows
                  .wrapping_sub(2i32 as libc::c_uint)
                  .wrapping_div(2i32 as libc::c_uint) as libc::c_int,
                -1i32,
              );
              current_block = 15129665204879337069;
            }
            11447082683497798022 => {
              dot_scroll(1i32, -1i32);
              current_block = 15129665204879337069;
            }
            5182000506326660482 => {
              current_block = 13993698454868426881;
            }
            1105010766850597332 => {
              if !(*ptr_to_globals).reg[27].is_null() {
                p = begin_line((*ptr_to_globals).dot);
                q = end_line((*ptr_to_globals).dot);
                p = text_hole_delete(p, q, 1i32);
                p = p.offset(string_insert(p, (*ptr_to_globals).reg[27], 2i32) as isize);
                (*ptr_to_globals).dot = p;
                dot_skip_over_ws();
              }
              current_block = 15129665204879337069;
            }
            8616046655533110204 => {
              undo_pop();
              current_block = 15129665204879337069;
            }
            5127767458142431603 => {
              loop {
                (*ptr_to_globals).dot = end_line((*ptr_to_globals).dot);
                (*ptr_to_globals).cmdcnt -= 1;
                if (*ptr_to_globals).cmdcnt <= 0 {
                  break;
                }
                dot_next();
              }
              current_block = 15129665204879337069;
            }
            222014967776118151 => {
              (*ptr_to_globals).last_forward_char = get_one_char();
              current_block = 7856905509180742666;
            }
            11209792479411604110 => {
              loop {
                dot_prev();
                dot_skip_over_ws();
                (*ptr_to_globals).cmdcnt -= 1;
                if !((*ptr_to_globals).cmdcnt > 0) {
                  break;
                }
              }
              current_block = 15129665204879337069;
            }
            3364823792826654116 => {
              if (*ptr_to_globals).lmc_len != 0 {
                (*ptr_to_globals).ioq_start = crate::libbb::xfuncs_printf::xstrndup(
                  (*ptr_to_globals).last_modifying_cmd.as_mut_ptr(),
                  (*ptr_to_globals).lmc_len,
                );
                (*ptr_to_globals).ioq = (*ptr_to_globals).ioq_start
              }
              current_block = 15129665204879337069;
            }
            18096603330221575131 => {
              current_block = 17498168302144015873;
            }
            16891123271837848903 => {
              dot_end();
              current_block = 1752638907092016026;
            }
            8517235759107662071 => {
              current_block = 5847749760081351726;
            }
            12525254419223051704 => {
              if (*ptr_to_globals).dot < (*ptr_to_globals).end.offset(-1) {
                (*ptr_to_globals).dot = yank_delete(
                  (*ptr_to_globals).dot,
                  (*ptr_to_globals).dot,
                  1i32,
                  YANKDEL as libc::c_int,
                  1i32,
                )
              }
              current_block = 15129665204879337069;
            }
            15232911949322867522 => {
              current_block = 17251831742223396249;
            }
            10863374208794025069 => {
              current_block = 1895262434596074581;
            }
            451126677064669119 => {
              loop {
                dot_prev();
                (*ptr_to_globals).dot = move_to_col(
                  (*ptr_to_globals).dot,
                  (*ptr_to_globals).ccol + (*ptr_to_globals).offset,
                );
                (*ptr_to_globals).cmdcnt -= 1;
                if !((*ptr_to_globals).cmdcnt > 0) {
                  break;
                }
              }
              current_block = 15129665204879337069;
            }
            4611735929166613116 => {
              loop {
                if bb_ascii_isalnum(*(*ptr_to_globals).dot as libc::c_uchar) != 0
                  || *(*ptr_to_globals).dot as libc::c_int == '_' as i32
                {
                  (*ptr_to_globals).dot = skip_thing(
                    (*ptr_to_globals).dot,
                    1i32,
                    FORWARD as libc::c_int,
                    S_END_ALNUM as libc::c_int,
                  )
                } else if *strchrnul(
                  b"!\"#$%&\'()*+,-./:;<=>?@[\\]^_`{|}~\x00" as *const u8 as *const libc::c_char,
                  *(*ptr_to_globals).dot as libc::c_int,
                )
                .offset(0)
                  != 0
                {
                  (*ptr_to_globals).dot = skip_thing(
                    (*ptr_to_globals).dot,
                    1i32,
                    FORWARD as libc::c_int,
                    S_END_PUNCT as libc::c_int,
                  )
                }
                if (*ptr_to_globals).dot < (*ptr_to_globals).end.offset(-1) {
                  (*ptr_to_globals).dot = (*ptr_to_globals).dot.offset(1)
                }
                if ({
                  let mut bb__isspace: libc::c_uchar =
                    (*(*ptr_to_globals).dot as libc::c_int - 9i32) as libc::c_uchar;
                  (bb__isspace as libc::c_int == ' ' as i32 - 9i32
                    || bb__isspace as libc::c_int <= 13i32 - 9i32) as libc::c_int
                }) != 0
                {
                  (*ptr_to_globals).dot = skip_thing(
                    (*ptr_to_globals).dot,
                    2i32,
                    FORWARD as libc::c_int,
                    S_OVER_WS as libc::c_int,
                  )
                }
                (*ptr_to_globals).cmdcnt -= 1;
                if !((*ptr_to_globals).cmdcnt > 0) {
                  break;
                }
              }
              current_block = 15129665204879337069;
            }
            4386451087681909888 => {
              (*ptr_to_globals).dot =
                move_to_col((*ptr_to_globals).dot, (*ptr_to_globals).cmdcnt - 1i32);
              current_block = 15129665204879337069;
            }
            1296397779060594135 => {
              dot_begin();
              current_block = 15129665204879337069;
            }
            _ => {}
          }
          match current_block {
            15129665204879337069 => {}
            8629930936610358348 => {}
            _ => {
              match current_block {
                17251831742223396249 => {
                  dir = 0;
                  if c == 'X' as i32 {
                    dir = -1i32
                  }
                  loop {
                    if *(*ptr_to_globals).dot.offset(dir as isize) as libc::c_int != '\n' as i32 {
                      if c == 'X' as i32 {
                        (*ptr_to_globals).dot = (*ptr_to_globals).dot.offset(-1)
                      }
                      (*ptr_to_globals).dot = yank_delete(
                        (*ptr_to_globals).dot,
                        (*ptr_to_globals).dot,
                        0,
                        YANKDEL as libc::c_int,
                        1i32,
                      )
                    }
                    (*ptr_to_globals).cmdcnt -= 1;
                    if !((*ptr_to_globals).cmdcnt > 0) {
                      break;
                    }
                  }
                  end_cmd_q();
                  if c == 's' as i32 {
                    current_block = 8629930936610358348;
                  } else {
                    current_block = 15129665204879337069;
                  }
                }
                2087484904894455135 => {
                  dot_end();
                  (*ptr_to_globals).dot =
                    char_insert((*ptr_to_globals).dot, '\n' as i32 as libc::c_char, 1i32);
                  current_block = 8629930936610358348;
                }
                11945623545738147997 => {
                  (*ptr_to_globals).dot = (*ptr_to_globals).end.offset(-1);
                  if (*ptr_to_globals).cmdcnt > 0 {
                    (*ptr_to_globals).dot = find_line((*ptr_to_globals).cmdcnt)
                  }
                  dot_skip_over_ws();
                  current_block = 15129665204879337069;
                }
                5847749760081351726 => {
                  dir = FORWARD as libc::c_int;
                  if c == 'B' as i32 {
                    dir = BACK as libc::c_int
                  }
                  loop {
                    if c == 'W' as i32
                      || ({
                        let mut bb__isspace: libc::c_uchar =
                          (*(*ptr_to_globals).dot.offset(dir as isize) as libc::c_int - 9i32)
                            as libc::c_uchar;
                        (bb__isspace as libc::c_int == ' ' as i32 - 9i32
                          || bb__isspace as libc::c_int <= 13i32 - 9i32)
                          as libc::c_int
                      }) != 0
                    {
                      (*ptr_to_globals).dot =
                        skip_thing((*ptr_to_globals).dot, 1i32, dir, S_TO_WS as libc::c_int);
                      (*ptr_to_globals).dot =
                        skip_thing((*ptr_to_globals).dot, 2i32, dir, S_OVER_WS as libc::c_int)
                    }
                    if c != 'W' as i32 {
                      (*ptr_to_globals).dot =
                        skip_thing((*ptr_to_globals).dot, 1i32, dir, S_BEFORE_WS as libc::c_int)
                    }
                    (*ptr_to_globals).cmdcnt -= 1;
                    if !((*ptr_to_globals).cmdcnt > 0) {
                      break;
                    }
                  }
                  current_block = 15129665204879337069;
                }
                17440971994642376514 => {
                  current_block = 15129665204879337069;
                }
                7534742345255184552 => {
                  current_block = 17247297260531395789;
                }
                8800996768013373992 => {
                  loop {
                    dot_next();
                    (*ptr_to_globals).dot = move_to_col(
                      (*ptr_to_globals).dot,
                      (*ptr_to_globals).ccol + (*ptr_to_globals).offset,
                    );
                    (*ptr_to_globals).cmdcnt -= 1;
                    if !((*ptr_to_globals).cmdcnt > 0) {
                      break;
                    }
                  }
                  current_block = 15129665204879337069;
                }
                13993698454868426881 => {
                  loop {
                    dot_right();
                    (*ptr_to_globals).cmdcnt -= 1;
                    if !((*ptr_to_globals).cmdcnt > 0) {
                      break;
                    }
                  }
                  current_block = 15129665204879337069;
                }
                7856905509180742666 => {
                  while !((*ptr_to_globals).last_forward_char == 0) {
                    q = (*ptr_to_globals).dot.offset(1);
                    while q < (*ptr_to_globals).end.offset(-1)
                      && *q as libc::c_int != '\n' as i32
                      && *q as libc::c_int != (*ptr_to_globals).last_forward_char
                    {
                      q = q.offset(1)
                    }
                    if *q as libc::c_int == (*ptr_to_globals).last_forward_char {
                      (*ptr_to_globals).dot = q
                    }
                    (*ptr_to_globals).cmdcnt -= 1;
                    if !((*ptr_to_globals).cmdcnt > 0) {
                      break;
                    }
                  }
                  current_block = 15129665204879337069;
                }
                17498168302144015873 => {
                  current_block = 8681395796513813967;
                }
                1752638907092016026 => {
                  if *(*ptr_to_globals).dot as libc::c_int != '\n' as i32 {
                    (*ptr_to_globals).dot = (*ptr_to_globals).dot.offset(1)
                  }
                  current_block = 8629930936610358348;
                }
                3268579060917229304 => {
                  current_block = 8629930936610358348;
                }
                1895262434596074581 => {
                  current_block = 8908416993177701018;
                }
                _ => {}
              }
              match current_block {
                8629930936610358348 => {}
                15129665204879337069 => {}
                _ => {
                  match current_block {
                    17247297260531395789 => {
                      loop {
                        dot_left();
                        (*ptr_to_globals).cmdcnt -= 1;
                        if !((*ptr_to_globals).cmdcnt > 0) {
                          break;
                        }
                      }
                      current_block = 15129665204879337069;
                    }
                    8681395796513813967 => {
                      current_block = 5591548203144509315;
                    }
                    8908416993177701018 => {
                      current_block = 16124761010012532485;
                    }
                    _ => {}
                  }
                  match current_block {
                    15129665204879337069 => {}
                    _ => {
                      match current_block {
                        16124761010012532485 => {
                          let mut yf: libc::c_int = 0;
                          let mut ml: libc::c_int = 0;
                          let mut whole: libc::c_int = 0;
                          yf = YANKDEL as libc::c_int;
                          if c == 'y' as i32 || c == 'Y' as i32 {
                            yf = YANKONLY as libc::c_int
                          }
                          c1 = 'y' as i32;
                          if c != 'Y' as i32 {
                            c1 = get_one_char()
                          }
                          ml = find_range(&mut p, &mut q, c1 as libc::c_char);
                          place_cursor(0i32, 0);
                          if c1 == 27i32 {
                            c1 = 27i32;
                            c = c1
                          } else if !strchr(b"wW\x00" as *const u8 as *const libc::c_char, c1)
                            .is_null()
                          {
                            ml = 0;
                            if c == 'c' as i32 {
                              while ({
                                let mut bb__isspace: libc::c_uchar =
                                  (*q as libc::c_int - 9i32) as libc::c_uchar;
                                (bb__isspace as libc::c_int == ' ' as i32 - 9i32
                                  || bb__isspace as libc::c_int <= 13i32 - 9i32)
                                  as libc::c_int
                              }) != 0
                                && q > p
                              {
                                q = q.offset(-1)
                              }
                            }
                            (*ptr_to_globals).dot = yank_delete(p, q, ml, yf, 1i32)
                          } else if !strchr(
                            b"^0bBeEft%$ lh\x08\x7f\x00" as *const u8 as *const libc::c_char,
                            c1,
                          )
                          .is_null()
                          {
                            (*ptr_to_globals).dot = yank_delete(p, q, ml, yf, 1i32)
                          } else if !strchr(
                            b"cdykjGHL+-{}\r\n\x00" as *const u8 as *const libc::c_char,
                            c1,
                          )
                          .is_null()
                          {
                            (*ptr_to_globals).dot = yank_delete(p, q, ml, yf, 1i32);
                            whole = 1i32
                          } else {
                            c1 = 27i32;
                            c = c1;
                            ml = 0;
                            indicate_error();
                          }
                          if ml != 0 && whole != 0 {
                            if c == 'c' as i32 {
                              (*ptr_to_globals).dot = char_insert(
                                (*ptr_to_globals).dot,
                                '\n' as i32 as libc::c_char,
                                2i32,
                              );
                              if whole != 0
                                && (*ptr_to_globals).dot != (*ptr_to_globals).end.offset(-1)
                              {
                                dot_prev();
                              }
                            } else if c == 'd' as i32 {
                              dot_begin();
                              dot_skip_over_ws();
                            }
                          }
                          if c1 != 27i32 {
                            if c == 'c' as i32 {
                              strcpy(
                                buf.as_mut_ptr(),
                                b"Change\x00" as *const u8 as *const libc::c_char,
                              );
                              current_block = 8629930936610358348;
                            } else {
                              if c == 'd' as i32 {
                                strcpy(
                                  buf.as_mut_ptr(),
                                  b"Delete\x00" as *const u8 as *const libc::c_char,
                                );
                              }
                              if c == 'y' as i32 || c == 'Y' as i32 {
                                strcpy(
                                  buf.as_mut_ptr(),
                                  b"Yank\x00" as *const u8 as *const libc::c_char,
                                );
                              }
                              p = (*ptr_to_globals).reg[(*ptr_to_globals).YDreg as usize];
                              q = p.offset(strlen(p) as isize);
                              cnt = 0;
                              while p <= q {
                                if *p as libc::c_int == '\n' as i32 {
                                  cnt += 1
                                }
                                p = p.offset(1)
                              }
                              status_line(
                                b"%s %u lines (%u chars) using [%c]\x00" as *const u8
                                  as *const libc::c_char,
                                buf.as_mut_ptr(),
                                cnt,
                                strlen((*ptr_to_globals).reg[(*ptr_to_globals).YDreg as usize])
                                  as libc::c_uint,
                                what_reg() as libc::c_int,
                              );
                              end_cmd_q();
                              current_block = 15129665204879337069;
                            }
                          } else {
                            current_block = 15129665204879337069;
                          }
                        }
                        5591548203144509315 => {
                          current_block = 2636677179867529885;
                        }
                        _ => {}
                      }
                      match current_block {
                        15129665204879337069 => {}
                        8629930936610358348 => {}
                        _ => {
                          match current_block {
                            2636677179867529885 => {
                              current_block = 12309206730560524281;
                            }
                            _ => {}
                          }
                          match current_block {
                            12309206730560524281 => {
                              current_block = 3325768110057758661;
                            }
                            _ => {}
                          }
                          match current_block {
                            3325768110057758661 => {
                              current_block = 14815832896553429982;
                            }
                            _ => {}
                          }
                          match current_block {
                            14815832896553429982 => {
                              current_block = 10731695520297161438;
                            }
                            _ => {}
                          }
                          match current_block {
                            10731695520297161438 => {
                              if c == '0' as i32 && (*ptr_to_globals).cmdcnt < 1i32 {
                                dot_begin();
                              } else {
                                (*ptr_to_globals).cmdcnt =
                                  (*ptr_to_globals).cmdcnt * 10i32 + (c - '0' as i32)
                              }
                              current_block = 15129665204879337069;
                            }
                            _ => {}
                          }
                          match current_block {
                            15129665204879337069 => {}
                            _ => {
                              loop {
                                match current_block {
                                  16813369756331276724 => {
                                    msg = std::ptr::null();
                                    current_block = 7392824444931029276;
                                  }
                                  7392824444931029276 => {
                                    dir = FORWARD as libc::c_int;
                                    p = (*ptr_to_globals).dot.offset(1);
                                    if *(*ptr_to_globals).last_search_pattern.offset(0)
                                      as libc::c_int
                                      == '?' as i32
                                    {
                                      dir = BACK as libc::c_int;
                                      p = (*ptr_to_globals).dot.offset(-1)
                                    }
                                    current_block = 4166979493554389389;
                                  }
                                  _ => {
                                    q = char_search(
                                      p,
                                      (*ptr_to_globals).last_search_pattern.offset(1),
                                      dir << 1i32 | FULL as libc::c_int,
                                    );
                                    if !q.is_null() {
                                      (*ptr_to_globals).dot = q;
                                      msg = std::ptr::null()
                                    } else {
                                      p = (*ptr_to_globals).text;
                                      if dir == BACK as libc::c_int {
                                        p = (*ptr_to_globals).end.offset(-1)
                                      }
                                      q = char_search(
                                        p,
                                        (*ptr_to_globals).last_search_pattern.offset(1),
                                        dir << 1i32 | FULL as libc::c_int,
                                      );
                                      if !q.is_null() {
                                        (*ptr_to_globals).dot = q;
                                        msg = b"search hit BOTTOM, continuing at TOP\x00"
                                          as *const u8
                                          as *const libc::c_char;
                                        if dir == BACK as libc::c_int {
                                          msg = b"search hit TOP, continuing at BOTTOM\x00"
                                            as *const u8
                                            as *const libc::c_char
                                        }
                                      } else {
                                        msg = b"Pattern not found\x00" as *const u8
                                          as *const libc::c_char
                                      }
                                    }
                                    if !msg.is_null() {
                                      status_line_bold(
                                        b"%s\x00" as *const u8 as *const libc::c_char,
                                        msg,
                                      );
                                    }
                                    (*ptr_to_globals).cmdcnt -= 1;
                                    if (*ptr_to_globals).cmdcnt > 0 {
                                      current_block = 16813369756331276724;
                                    } else {
                                      break;
                                    }
                                  }
                                }
                              }
                              current_block = 15129665204879337069;
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
        111 => {
          current_block = 2087484904894455135;
          match current_block {
            16992905640583886232 => {
              loop {
                if (*(*ptr_to_globals).dot as libc::c_int - 'a' as i32) as libc::c_uchar
                  as libc::c_int
                  <= 'z' as i32 - 'a' as i32
                {
                  undo_push(
                    (*ptr_to_globals).dot,
                    1i32 as libc::c_uint,
                    1i32 as libc::c_uchar,
                  );
                  *(*ptr_to_globals).dot =
                    bb_ascii_toupper(*(*ptr_to_globals).dot as libc::c_uchar) as libc::c_char;
                  undo_push(
                    (*ptr_to_globals).dot,
                    1i32 as libc::c_uint,
                    2i32 as libc::c_uchar,
                  );
                } else if (*(*ptr_to_globals).dot as libc::c_int - 'A' as i32) as libc::c_uchar
                  as libc::c_int
                  <= 'Z' as i32 - 'A' as i32
                {
                  undo_push(
                    (*ptr_to_globals).dot,
                    1i32 as libc::c_uint,
                    1i32 as libc::c_uchar,
                  );
                  *(*ptr_to_globals).dot =
                    bb_ascii_tolower(*(*ptr_to_globals).dot as libc::c_uchar) as libc::c_char;
                  undo_push(
                    (*ptr_to_globals).dot,
                    1i32 as libc::c_uint,
                    2i32 as libc::c_uchar,
                  );
                }
                dot_right();
                (*ptr_to_globals).cmdcnt -= 1;
                if !((*ptr_to_globals).cmdcnt > 0) {
                  break;
                }
              }
              end_cmd_q();
              current_block = 15129665204879337069;
            }
            8729655159604064397 => {
              c1 = get_one_char();
              cnt = 0;
              if c1 == '.' as i32 {
                cnt = (*ptr_to_globals)
                  .rows
                  .wrapping_sub(2i32 as libc::c_uint)
                  .wrapping_div(2i32 as libc::c_uint) as libc::c_int
              }
              if c1 == '-' as i32 {
                cnt = (*ptr_to_globals).rows.wrapping_sub(2i32 as libc::c_uint) as libc::c_int
              }
              (*ptr_to_globals).screenbegin = begin_line((*ptr_to_globals).dot);
              dot_scroll(cnt, -1i32);
              current_block = 15129665204879337069;
            }
            15899500648299942075 => {
              (*ptr_to_globals).last_forward_char = get_one_char();
              do_cmd(';' as i32);
              if *(*ptr_to_globals).dot as libc::c_int == (*ptr_to_globals).last_forward_char {
                dot_left();
              }
              (*ptr_to_globals).last_forward_char = 0;
              current_block = 15129665204879337069;
            }
            9051390181078481641 => {
              c1 = get_one_char();
              if *(*ptr_to_globals).dot as libc::c_int != '\n' as i32 {
                (*ptr_to_globals).dot =
                  text_hole_delete((*ptr_to_globals).dot, (*ptr_to_globals).dot, 1i32);
                (*ptr_to_globals).dot =
                  char_insert((*ptr_to_globals).dot, c1 as libc::c_char, 2i32);
                dot_left();
              }
              end_cmd_q();
              current_block = 15129665204879337069;
            }
            877115918601926659 => {
              dir = FORWARD as libc::c_int;
              if c == 'b' as i32 {
                dir = BACK as libc::c_int
              }
              while !((*ptr_to_globals).dot.offset(dir as isize) < (*ptr_to_globals).text
                || (*ptr_to_globals).dot.offset(dir as isize) > (*ptr_to_globals).end.offset(-1))
              {
                (*ptr_to_globals).dot = (*ptr_to_globals).dot.offset(dir as isize);
                if ({
                  let mut bb__isspace: libc::c_uchar =
                    (*(*ptr_to_globals).dot as libc::c_int - 9i32) as libc::c_uchar;
                  (bb__isspace as libc::c_int == ' ' as i32 - 9i32
                    || bb__isspace as libc::c_int <= 13i32 - 9i32) as libc::c_int
                }) != 0
                {
                  (*ptr_to_globals).dot = skip_thing(
                    (*ptr_to_globals).dot,
                    if c == 'e' as i32 { 2i32 } else { 1i32 },
                    dir,
                    S_OVER_WS as libc::c_int,
                  )
                }
                if bb_ascii_isalnum(*(*ptr_to_globals).dot as libc::c_uchar) != 0
                  || *(*ptr_to_globals).dot as libc::c_int == '_' as i32
                {
                  (*ptr_to_globals).dot =
                    skip_thing((*ptr_to_globals).dot, 1i32, dir, S_END_ALNUM as libc::c_int)
                } else if *strchrnul(
                  b"!\"#$%&\'()*+,-./:;<=>?@[\\]^_`{|}~\x00" as *const u8 as *const libc::c_char,
                  *(*ptr_to_globals).dot as libc::c_int,
                )
                .offset(0)
                  != 0
                {
                  (*ptr_to_globals).dot =
                    skip_thing((*ptr_to_globals).dot, 1i32, dir, S_END_PUNCT as libc::c_int)
                }
                (*ptr_to_globals).cmdcnt -= 1;
                if !((*ptr_to_globals).cmdcnt > 0) {
                  break;
                }
              }
              current_block = 15129665204879337069;
            }
            1085022737867179637 => {
              dot_begin();
              dot_skip_over_ws();
              current_block = 15129665204879337069;
            }
            3113147720494587438 => {
              c1 = get_one_char();
              if c1 != 'Z' as i32 {
                indicate_error();
              } else if (*ptr_to_globals).modified_count != 0 {
                if 1i32 != 0 && (*ptr_to_globals).readonly_mode as libc::c_int != 0 {
                  status_line_bold(
                    b"\'%s\' is read only\x00" as *const u8 as *const libc::c_char,
                    (*ptr_to_globals).current_filename,
                  );
                } else {
                  cnt = file_write(
                    (*ptr_to_globals).current_filename,
                    (*ptr_to_globals).text,
                    (*ptr_to_globals).end.offset(-1),
                  );
                  if cnt < 0 {
                    if cnt == -1i32 {
                      status_line_bold(b"Write error: %m\x00" as *const u8 as *const libc::c_char);
                    }
                  } else if cnt as libc::c_long
                    == (*ptr_to_globals)
                      .end
                      .offset(-1)
                      .wrapping_offset_from((*ptr_to_globals).text)
                      as libc::c_long
                      + 1
                  {
                    (*ptr_to_globals).editing = 0 as smallint
                  }
                }
              } else {
                (*ptr_to_globals).editing = 0 as smallint
              }
              current_block = 15129665204879337069;
            }
            12960118908218882441 => {
              p = begin_line((*ptr_to_globals).dot);
              if *p.offset(-1i32 as isize) as libc::c_int == '\n' as i32 {
                dot_prev();
                current_block = 2087484904894455135;
              } else {
                dot_begin();
                (*ptr_to_globals).dot =
                  char_insert((*ptr_to_globals).dot, '\n' as i32 as libc::c_char, 1i32);
                dot_prev();
                current_block = 8629930936610358348;
              }
            }
            8720450212473544924 => {
              (*ptr_to_globals).dot = (*ptr_to_globals).screenbegin;
              cnt = 0;
              while (cnt as libc::c_uint)
                < (*ptr_to_globals)
                  .rows
                  .wrapping_sub(1i32 as libc::c_uint)
                  .wrapping_div(2i32 as libc::c_uint)
              {
                (*ptr_to_globals).dot = next_line((*ptr_to_globals).dot);
                cnt += 1
              }
              current_block = 15129665204879337069;
            }
            13015277209715431090 => {
              (*ptr_to_globals).dot = end_screen();
              if (*ptr_to_globals).cmdcnt as libc::c_uint
                > (*ptr_to_globals).rows.wrapping_sub(1i32 as libc::c_uint)
              {
                (*ptr_to_globals).cmdcnt =
                  (*ptr_to_globals).rows.wrapping_sub(1i32 as libc::c_uint) as libc::c_int
              }
              (*ptr_to_globals).cmdcnt -= 1;
              if (*ptr_to_globals).cmdcnt > 0 {
                do_cmd('-' as i32);
              }
              dot_begin();
              dot_skip_over_ws();
              current_block = 15129665204879337069;
            }
            9800435767766781385 => {
              loop {
                dot_end();
                if (*ptr_to_globals).dot < (*ptr_to_globals).end.offset(-1) {
                  undo_push(
                    (*ptr_to_globals).dot,
                    1i32 as libc::c_uint,
                    1i32 as libc::c_uchar,
                  );
                  let fresh15 = (*ptr_to_globals).dot;
                  (*ptr_to_globals).dot = (*ptr_to_globals).dot.offset(1);
                  *fresh15 = ' ' as i32 as libc::c_char;
                  undo_push(
                    (*ptr_to_globals).dot.offset(-1),
                    1i32 as libc::c_uint,
                    2i32 as libc::c_uchar,
                  );
                  while ({
                    let mut bb__isblank: libc::c_uchar = *(*ptr_to_globals).dot as libc::c_uchar;
                    (bb__isblank as libc::c_int == ' ' as i32
                      || bb__isblank as libc::c_int == '\t' as i32)
                      as libc::c_int
                  }) != 0
                  {
                    text_hole_delete((*ptr_to_globals).dot, (*ptr_to_globals).dot, 2i32);
                  }
                }
                (*ptr_to_globals).cmdcnt -= 1;
                if !((*ptr_to_globals).cmdcnt > 0) {
                  break;
                }
              }
              end_cmd_q();
              current_block = 15129665204879337069;
            }
            3432363526595694666 => {
              dot_begin();
              dot_skip_over_ws();
              current_block = 3268579060917229304;
            }
            3494829253343353619 => {
              (*ptr_to_globals).dot = (*ptr_to_globals).screenbegin;
              if (*ptr_to_globals).cmdcnt as libc::c_uint
                > (*ptr_to_globals).rows.wrapping_sub(1i32 as libc::c_uint)
              {
                (*ptr_to_globals).cmdcnt =
                  (*ptr_to_globals).rows.wrapping_sub(1i32 as libc::c_uint) as libc::c_int
              }
              (*ptr_to_globals).cmdcnt -= 1;
              if (*ptr_to_globals).cmdcnt > 0 {
                do_cmd('+' as i32);
              }
              dot_skip_over_ws();
              current_block = 15129665204879337069;
            }
            17973101765331640574 => {
              c1 = get_one_char();
              if c1 != 'g' as i32 {
                buf[0] = 'g' as i32 as libc::c_char;
                buf[1] = if c1 >= 0 { c1 } else { '*' as i32 } as libc::c_char;
                buf[2] = '\u{0}' as i32 as libc::c_char;
                not_implemented(buf.as_mut_ptr());
                current_block = 15129665204879337069;
              } else {
                if (*ptr_to_globals).cmdcnt == 0 {
                  (*ptr_to_globals).cmdcnt = 1i32
                }
                current_block = 11945623545738147997;
              }
            }
            16546625800574160972 => {
              save_dot = (*ptr_to_globals).dot;
              (*ptr_to_globals).dot = dollar_line((*ptr_to_globals).dot);
              (*ptr_to_globals).dot = yank_delete(
                save_dot,
                (*ptr_to_globals).dot,
                0,
                YANKDEL as libc::c_int,
                1i32,
              );
              if c == 'C' as i32 {
                current_block = 8629930936610358348;
              } else {
                if c == 'D' as i32 {
                  end_cmd_q();
                }
                current_block = 15129665204879337069;
              }
            }
            11937696639986586685 => {
              cnt = count_lines((*ptr_to_globals).text, (*ptr_to_globals).dot);
              c1 = get_one_char();
              find_range(&mut p, &mut q, c1 as libc::c_char);
              yank_delete(p, q, 1i32, YANKONLY as libc::c_int, 0);
              p = begin_line(p);
              q = end_line(q);
              i = count_lines(p, q);
              while i > 0 {
                if c == '<' as i32 {
                  if *p as libc::c_int == '\t' as i32 {
                    text_hole_delete(p, p, 0);
                  } else if *p as libc::c_int == ' ' as i32 {
                    j = 0;
                    while *p as libc::c_int == ' ' as i32 && j < (*ptr_to_globals).tabstop {
                      text_hole_delete(p, p, 0);
                      j += 1
                    }
                  }
                } else if c == '>' as i32 {
                  char_insert(p, '\t' as i32 as libc::c_char, 1i32);
                }
                i -= 1;
                p = next_line(p)
              }
              (*ptr_to_globals).dot = find_line(cnt);
              dot_skip_over_ws();
              end_cmd_q();
              current_block = 15129665204879337069;
            }
            17725350714912028156 => {
              p = get_input_line(b":\x00" as *const u8 as *const libc::c_char);
              colon(p);
              current_block = 15129665204879337069;
            }
            14526470074083880812 => {
              q = char_search(
                (*ptr_to_globals).dot,
                b"\n\n\x00" as *const u8 as *const libc::c_char,
                (FORWARD as libc::c_int) << 1i32 | FULL as libc::c_int,
              );
              if !q.is_null() {
                (*ptr_to_globals).dot = next_line(q)
              }
              current_block = 15129665204879337069;
            }
            8893187391306414141 => {
              q = char_search(
                (*ptr_to_globals).dot,
                b"\n\n\x00" as *const u8 as *const libc::c_char,
                ((BACK as libc::c_int as libc::c_uint) << 1i32
                  | FULL as libc::c_int as libc::c_uint) as libc::c_int,
              );
              if !q.is_null() {
                (*ptr_to_globals).dot = next_line(q)
              }
              current_block = 15129665204879337069;
            }
            7021673758293221412 => {
              dir = BACK as libc::c_int;
              p = (*ptr_to_globals).dot.offset(-1);
              if *(*ptr_to_globals).last_search_pattern.offset(0) as libc::c_int == '?' as i32 {
                dir = FORWARD as libc::c_int;
                p = (*ptr_to_globals).dot.offset(1)
              }
              current_block = 4166979493554389389;
            }
            18374191879090272823 => {
              buf[0] = c as libc::c_char;
              buf[1] = '\u{0}' as i32 as libc::c_char;
              q = get_input_line(buf.as_mut_ptr());
              if *q.offset(0) as libc::c_int != 0 && *q.offset(1) == 0 {
                if *(*ptr_to_globals).last_search_pattern.offset(0) != 0 {
                  *(*ptr_to_globals).last_search_pattern.offset(0) = c as libc::c_char
                }
                current_block = 7392824444931029276;
              } else if *q.offset(0) != 0 {
                free((*ptr_to_globals).last_search_pattern as *mut libc::c_void);
                (*ptr_to_globals).last_search_pattern = crate::libbb::xfuncs_printf::xstrdup(q);
                current_block = 7392824444931029276;
              } else {
                current_block = 15129665204879337069;
              }
            }
            16407828456666301883 => {
              if (*ptr_to_globals).last_forward_char == 0 {
                current_block = 15129665204879337069;
              } else {
                loop {
                  q = (*ptr_to_globals).dot.offset(-1);
                  while q >= (*ptr_to_globals).text
                    && *q as libc::c_int != '\n' as i32
                    && *q as libc::c_int != (*ptr_to_globals).last_forward_char
                  {
                    q = q.offset(-1)
                  }
                  if q >= (*ptr_to_globals).text
                    && *q as libc::c_int == (*ptr_to_globals).last_forward_char
                  {
                    (*ptr_to_globals).dot = q
                  }
                  (*ptr_to_globals).cmdcnt -= 1;
                  if !((*ptr_to_globals).cmdcnt > 0) {
                    break;
                  }
                }
                current_block = 15129665204879337069;
              }
            }
            9018432604062702004 => {
              q = (*ptr_to_globals).dot;
              while q < (*ptr_to_globals).end && *q as libc::c_int != '\n' as i32 {
                if !strchr(
                  b"()[]{}\x00" as *const u8 as *const libc::c_char,
                  *q as libc::c_int,
                )
                .is_null()
                {
                  p = find_pair(q, *q);
                  if p.is_null() {
                    indicate_error();
                  } else {
                    (*ptr_to_globals).dot = p
                  }
                  break;
                } else {
                  q = q.offset(1)
                }
              }
              if *q as libc::c_int == '\n' as i32 {
                indicate_error();
              }
              current_block = 15129665204879337069;
            }
            10247103787464459848 => {
              p = (*ptr_to_globals).reg[(*ptr_to_globals).YDreg as usize];
              if p.is_null() {
                status_line_bold(
                  b"Nothing in register %c\x00" as *const u8 as *const libc::c_char,
                  what_reg() as libc::c_int,
                );
              } else {
                if !strchr(p, '\n' as i32).is_null() {
                  if c == 'P' as i32 {
                    dot_begin();
                  }
                  if c == 'p' as i32 {
                    if end_line((*ptr_to_globals).dot) == (*ptr_to_globals).end.offset(-1) {
                      (*ptr_to_globals).dot = (*ptr_to_globals).end
                    } else {
                      dot_next();
                    }
                  }
                } else if c == 'p' as i32 {
                  dot_right();
                }
                string_insert((*ptr_to_globals).dot, p, 1i32);
                end_cmd_q();
              }
              current_block = 15129665204879337069;
            }
            15260732871948875843 => {
              c1 = (get_one_char() | 0x20i32) - 'a' as i32;
              if c1 as libc::c_uint <= 25i32 as libc::c_uint {
                (*ptr_to_globals).mark[c1 as usize] = (*ptr_to_globals).dot
              } else {
                indicate_error();
              }
              current_block = 15129665204879337069;
            }
            12738322036487086035 => {
              c1 = get_one_char() | 0x20i32;
              if (c1 - 'a' as i32) as libc::c_uint <= 25i32 as libc::c_uint {
                c1 = c1 - 'a' as i32;
                q = (*ptr_to_globals).mark[c1 as usize];
                if (*ptr_to_globals).text <= q && q < (*ptr_to_globals).end {
                  (*ptr_to_globals).dot = q;
                  dot_begin();
                  dot_skip_over_ws();
                }
              } else if c1 == '\'' as i32 {
                (*ptr_to_globals).dot = swap_context((*ptr_to_globals).dot);
                dot_begin();
                dot_skip_over_ws();
              } else {
                indicate_error();
              }
              current_block = 15129665204879337069;
            }
            13255096073384561358 => {
              c1 = (get_one_char() | 0x20i32) - 'a' as i32;
              if c1 as libc::c_uint <= 25i32 as libc::c_uint {
                (*ptr_to_globals).YDreg = c1 as smalluint
              } else {
                indicate_error();
              }
              current_block = 15129665204879337069;
            }
            10258711639984089377 => {
              if (*ptr_to_globals).cmd_mode as libc::c_int == 0 {
                indicate_error();
              }
              (*ptr_to_globals).cmd_mode = 0 as smallint;
              undo_queue_commit();
              end_cmd_q();
              (*ptr_to_globals).last_status_cksum = 0;
              current_block = 15129665204879337069;
            }
            11439127087547047736 => {
              buf[0] = c as libc::c_char;
              buf[1] = '\u{0}' as i32 as libc::c_char;
              not_implemented(buf.as_mut_ptr());
              end_cmd_q();
              current_block = 17440971994642376514;
            }
            7961798899781870241 => {
              dot_scroll(
                (*ptr_to_globals).rows.wrapping_sub(2i32 as libc::c_uint) as libc::c_int,
                -1i32,
              );
              current_block = 15129665204879337069;
            }
            9426343755402444879 => {
              dot_scroll(
                (*ptr_to_globals)
                  .rows
                  .wrapping_sub(2i32 as libc::c_uint)
                  .wrapping_div(2i32 as libc::c_uint) as libc::c_int,
                1i32,
              );
              current_block = 15129665204879337069;
            }
            13352459794680105913 => {
              dot_scroll(1i32, 1i32);
              current_block = 15129665204879337069;
            }
            14142272253464333006 => {
              dot_scroll(
                (*ptr_to_globals).rows.wrapping_sub(2i32 as libc::c_uint) as libc::c_int,
                1i32,
              );
              current_block = 15129665204879337069;
            }
            10758177197742640066 => {
              (*ptr_to_globals).last_status_cksum = 0;
              current_block = 15129665204879337069;
            }
            6152256259730122749 => {
              current_block = 7534742345255184552;
            }
            12883932598258173301 => {
              current_block = 8800996768013373992;
            }
            11242998110520238401 => {
              redraw(1i32);
              current_block = 15129665204879337069;
            }
            13619733043935729992 => {
              loop {
                dot_next();
                dot_skip_over_ws();
                (*ptr_to_globals).cmdcnt -= 1;
                if !((*ptr_to_globals).cmdcnt > 0) {
                  break;
                }
              }
              current_block = 15129665204879337069;
            }
            9339065157412720613 => {
              dot_scroll(
                (*ptr_to_globals)
                  .rows
                  .wrapping_sub(2i32 as libc::c_uint)
                  .wrapping_div(2i32 as libc::c_uint) as libc::c_int,
                -1i32,
              );
              current_block = 15129665204879337069;
            }
            11447082683497798022 => {
              dot_scroll(1i32, -1i32);
              current_block = 15129665204879337069;
            }
            5182000506326660482 => {
              current_block = 13993698454868426881;
            }
            1105010766850597332 => {
              if !(*ptr_to_globals).reg[27].is_null() {
                p = begin_line((*ptr_to_globals).dot);
                q = end_line((*ptr_to_globals).dot);
                p = text_hole_delete(p, q, 1i32);
                p = p.offset(string_insert(p, (*ptr_to_globals).reg[27], 2i32) as isize);
                (*ptr_to_globals).dot = p;
                dot_skip_over_ws();
              }
              current_block = 15129665204879337069;
            }
            8616046655533110204 => {
              undo_pop();
              current_block = 15129665204879337069;
            }
            5127767458142431603 => {
              loop {
                (*ptr_to_globals).dot = end_line((*ptr_to_globals).dot);
                (*ptr_to_globals).cmdcnt -= 1;
                if (*ptr_to_globals).cmdcnt <= 0 {
                  break;
                }
                dot_next();
              }
              current_block = 15129665204879337069;
            }
            222014967776118151 => {
              (*ptr_to_globals).last_forward_char = get_one_char();
              current_block = 7856905509180742666;
            }
            11209792479411604110 => {
              loop {
                dot_prev();
                dot_skip_over_ws();
                (*ptr_to_globals).cmdcnt -= 1;
                if !((*ptr_to_globals).cmdcnt > 0) {
                  break;
                }
              }
              current_block = 15129665204879337069;
            }
            3364823792826654116 => {
              if (*ptr_to_globals).lmc_len != 0 {
                (*ptr_to_globals).ioq_start = crate::libbb::xfuncs_printf::xstrndup(
                  (*ptr_to_globals).last_modifying_cmd.as_mut_ptr(),
                  (*ptr_to_globals).lmc_len,
                );
                (*ptr_to_globals).ioq = (*ptr_to_globals).ioq_start
              }
              current_block = 15129665204879337069;
            }
            18096603330221575131 => {
              current_block = 17498168302144015873;
            }
            16891123271837848903 => {
              dot_end();
              current_block = 1752638907092016026;
            }
            8517235759107662071 => {
              current_block = 5847749760081351726;
            }
            12525254419223051704 => {
              if (*ptr_to_globals).dot < (*ptr_to_globals).end.offset(-1) {
                (*ptr_to_globals).dot = yank_delete(
                  (*ptr_to_globals).dot,
                  (*ptr_to_globals).dot,
                  1i32,
                  YANKDEL as libc::c_int,
                  1i32,
                )
              }
              current_block = 15129665204879337069;
            }
            15232911949322867522 => {
              current_block = 17251831742223396249;
            }
            10863374208794025069 => {
              current_block = 1895262434596074581;
            }
            451126677064669119 => {
              loop {
                dot_prev();
                (*ptr_to_globals).dot = move_to_col(
                  (*ptr_to_globals).dot,
                  (*ptr_to_globals).ccol + (*ptr_to_globals).offset,
                );
                (*ptr_to_globals).cmdcnt -= 1;
                if !((*ptr_to_globals).cmdcnt > 0) {
                  break;
                }
              }
              current_block = 15129665204879337069;
            }
            4611735929166613116 => {
              loop {
                if bb_ascii_isalnum(*(*ptr_to_globals).dot as libc::c_uchar) != 0
                  || *(*ptr_to_globals).dot as libc::c_int == '_' as i32
                {
                  (*ptr_to_globals).dot = skip_thing(
                    (*ptr_to_globals).dot,
                    1i32,
                    FORWARD as libc::c_int,
                    S_END_ALNUM as libc::c_int,
                  )
                } else if *strchrnul(
                  b"!\"#$%&\'()*+,-./:;<=>?@[\\]^_`{|}~\x00" as *const u8 as *const libc::c_char,
                  *(*ptr_to_globals).dot as libc::c_int,
                )
                .offset(0)
                  != 0
                {
                  (*ptr_to_globals).dot = skip_thing(
                    (*ptr_to_globals).dot,
                    1i32,
                    FORWARD as libc::c_int,
                    S_END_PUNCT as libc::c_int,
                  )
                }
                if (*ptr_to_globals).dot < (*ptr_to_globals).end.offset(-1) {
                  (*ptr_to_globals).dot = (*ptr_to_globals).dot.offset(1)
                }
                if ({
                  let mut bb__isspace: libc::c_uchar =
                    (*(*ptr_to_globals).dot as libc::c_int - 9i32) as libc::c_uchar;
                  (bb__isspace as libc::c_int == ' ' as i32 - 9i32
                    || bb__isspace as libc::c_int <= 13i32 - 9i32) as libc::c_int
                }) != 0
                {
                  (*ptr_to_globals).dot = skip_thing(
                    (*ptr_to_globals).dot,
                    2i32,
                    FORWARD as libc::c_int,
                    S_OVER_WS as libc::c_int,
                  )
                }
                (*ptr_to_globals).cmdcnt -= 1;
                if !((*ptr_to_globals).cmdcnt > 0) {
                  break;
                }
              }
              current_block = 15129665204879337069;
            }
            4386451087681909888 => {
              (*ptr_to_globals).dot =
                move_to_col((*ptr_to_globals).dot, (*ptr_to_globals).cmdcnt - 1i32);
              current_block = 15129665204879337069;
            }
            1296397779060594135 => {
              dot_begin();
              current_block = 15129665204879337069;
            }
            _ => {}
          }
          match current_block {
            15129665204879337069 => {}
            8629930936610358348 => {}
            _ => {
              match current_block {
                17251831742223396249 => {
                  dir = 0;
                  if c == 'X' as i32 {
                    dir = -1i32
                  }
                  loop {
                    if *(*ptr_to_globals).dot.offset(dir as isize) as libc::c_int != '\n' as i32 {
                      if c == 'X' as i32 {
                        (*ptr_to_globals).dot = (*ptr_to_globals).dot.offset(-1)
                      }
                      (*ptr_to_globals).dot = yank_delete(
                        (*ptr_to_globals).dot,
                        (*ptr_to_globals).dot,
                        0,
                        YANKDEL as libc::c_int,
                        1i32,
                      )
                    }
                    (*ptr_to_globals).cmdcnt -= 1;
                    if !((*ptr_to_globals).cmdcnt > 0) {
                      break;
                    }
                  }
                  end_cmd_q();
                  if c == 's' as i32 {
                    current_block = 8629930936610358348;
                  } else {
                    current_block = 15129665204879337069;
                  }
                }
                2087484904894455135 => {
                  dot_end();
                  (*ptr_to_globals).dot =
                    char_insert((*ptr_to_globals).dot, '\n' as i32 as libc::c_char, 1i32);
                  current_block = 8629930936610358348;
                }
                11945623545738147997 => {
                  (*ptr_to_globals).dot = (*ptr_to_globals).end.offset(-1);
                  if (*ptr_to_globals).cmdcnt > 0 {
                    (*ptr_to_globals).dot = find_line((*ptr_to_globals).cmdcnt)
                  }
                  dot_skip_over_ws();
                  current_block = 15129665204879337069;
                }
                5847749760081351726 => {
                  dir = FORWARD as libc::c_int;
                  if c == 'B' as i32 {
                    dir = BACK as libc::c_int
                  }
                  loop {
                    if c == 'W' as i32
                      || ({
                        let mut bb__isspace: libc::c_uchar =
                          (*(*ptr_to_globals).dot.offset(dir as isize) as libc::c_int - 9i32)
                            as libc::c_uchar;
                        (bb__isspace as libc::c_int == ' ' as i32 - 9i32
                          || bb__isspace as libc::c_int <= 13i32 - 9i32)
                          as libc::c_int
                      }) != 0
                    {
                      (*ptr_to_globals).dot =
                        skip_thing((*ptr_to_globals).dot, 1i32, dir, S_TO_WS as libc::c_int);
                      (*ptr_to_globals).dot =
                        skip_thing((*ptr_to_globals).dot, 2i32, dir, S_OVER_WS as libc::c_int)
                    }
                    if c != 'W' as i32 {
                      (*ptr_to_globals).dot =
                        skip_thing((*ptr_to_globals).dot, 1i32, dir, S_BEFORE_WS as libc::c_int)
                    }
                    (*ptr_to_globals).cmdcnt -= 1;
                    if !((*ptr_to_globals).cmdcnt > 0) {
                      break;
                    }
                  }
                  current_block = 15129665204879337069;
                }
                17440971994642376514 => {
                  current_block = 15129665204879337069;
                }
                7534742345255184552 => {
                  current_block = 17247297260531395789;
                }
                8800996768013373992 => {
                  loop {
                    dot_next();
                    (*ptr_to_globals).dot = move_to_col(
                      (*ptr_to_globals).dot,
                      (*ptr_to_globals).ccol + (*ptr_to_globals).offset,
                    );
                    (*ptr_to_globals).cmdcnt -= 1;
                    if !((*ptr_to_globals).cmdcnt > 0) {
                      break;
                    }
                  }
                  current_block = 15129665204879337069;
                }
                13993698454868426881 => {
                  loop {
                    dot_right();
                    (*ptr_to_globals).cmdcnt -= 1;
                    if !((*ptr_to_globals).cmdcnt > 0) {
                      break;
                    }
                  }
                  current_block = 15129665204879337069;
                }
                7856905509180742666 => {
                  while !((*ptr_to_globals).last_forward_char == 0) {
                    q = (*ptr_to_globals).dot.offset(1);
                    while q < (*ptr_to_globals).end.offset(-1)
                      && *q as libc::c_int != '\n' as i32
                      && *q as libc::c_int != (*ptr_to_globals).last_forward_char
                    {
                      q = q.offset(1)
                    }
                    if *q as libc::c_int == (*ptr_to_globals).last_forward_char {
                      (*ptr_to_globals).dot = q
                    }
                    (*ptr_to_globals).cmdcnt -= 1;
                    if !((*ptr_to_globals).cmdcnt > 0) {
                      break;
                    }
                  }
                  current_block = 15129665204879337069;
                }
                17498168302144015873 => {
                  current_block = 8681395796513813967;
                }
                1752638907092016026 => {
                  if *(*ptr_to_globals).dot as libc::c_int != '\n' as i32 {
                    (*ptr_to_globals).dot = (*ptr_to_globals).dot.offset(1)
                  }
                  current_block = 8629930936610358348;
                }
                3268579060917229304 => {
                  current_block = 8629930936610358348;
                }
                1895262434596074581 => {
                  current_block = 8908416993177701018;
                }
                _ => {}
              }
              match current_block {
                8629930936610358348 => {}
                15129665204879337069 => {}
                _ => {
                  match current_block {
                    17247297260531395789 => {
                      loop {
                        dot_left();
                        (*ptr_to_globals).cmdcnt -= 1;
                        if !((*ptr_to_globals).cmdcnt > 0) {
                          break;
                        }
                      }
                      current_block = 15129665204879337069;
                    }
                    8681395796513813967 => {
                      current_block = 5591548203144509315;
                    }
                    8908416993177701018 => {
                      current_block = 16124761010012532485;
                    }
                    _ => {}
                  }
                  match current_block {
                    15129665204879337069 => {}
                    _ => {
                      match current_block {
                        16124761010012532485 => {
                          let mut yf: libc::c_int = 0;
                          let mut ml: libc::c_int = 0;
                          let mut whole: libc::c_int = 0;
                          yf = YANKDEL as libc::c_int;
                          if c == 'y' as i32 || c == 'Y' as i32 {
                            yf = YANKONLY as libc::c_int
                          }
                          c1 = 'y' as i32;
                          if c != 'Y' as i32 {
                            c1 = get_one_char()
                          }
                          ml = find_range(&mut p, &mut q, c1 as libc::c_char);
                          place_cursor(0i32, 0);
                          if c1 == 27i32 {
                            c1 = 27i32;
                            c = c1
                          } else if !strchr(b"wW\x00" as *const u8 as *const libc::c_char, c1)
                            .is_null()
                          {
                            ml = 0;
                            if c == 'c' as i32 {
                              while ({
                                let mut bb__isspace: libc::c_uchar =
                                  (*q as libc::c_int - 9i32) as libc::c_uchar;
                                (bb__isspace as libc::c_int == ' ' as i32 - 9i32
                                  || bb__isspace as libc::c_int <= 13i32 - 9i32)
                                  as libc::c_int
                              }) != 0
                                && q > p
                              {
                                q = q.offset(-1)
                              }
                            }
                            (*ptr_to_globals).dot = yank_delete(p, q, ml, yf, 1i32)
                          } else if !strchr(
                            b"^0bBeEft%$ lh\x08\x7f\x00" as *const u8 as *const libc::c_char,
                            c1,
                          )
                          .is_null()
                          {
                            (*ptr_to_globals).dot = yank_delete(p, q, ml, yf, 1i32)
                          } else if !strchr(
                            b"cdykjGHL+-{}\r\n\x00" as *const u8 as *const libc::c_char,
                            c1,
                          )
                          .is_null()
                          {
                            (*ptr_to_globals).dot = yank_delete(p, q, ml, yf, 1i32);
                            whole = 1i32
                          } else {
                            c1 = 27i32;
                            c = c1;
                            ml = 0;
                            indicate_error();
                          }
                          if ml != 0 && whole != 0 {
                            if c == 'c' as i32 {
                              (*ptr_to_globals).dot = char_insert(
                                (*ptr_to_globals).dot,
                                '\n' as i32 as libc::c_char,
                                2i32,
                              );
                              if whole != 0
                                && (*ptr_to_globals).dot != (*ptr_to_globals).end.offset(-1)
                              {
                                dot_prev();
                              }
                            } else if c == 'd' as i32 {
                              dot_begin();
                              dot_skip_over_ws();
                            }
                          }
                          if c1 != 27i32 {
                            if c == 'c' as i32 {
                              strcpy(
                                buf.as_mut_ptr(),
                                b"Change\x00" as *const u8 as *const libc::c_char,
                              );
                              current_block = 8629930936610358348;
                            } else {
                              if c == 'd' as i32 {
                                strcpy(
                                  buf.as_mut_ptr(),
                                  b"Delete\x00" as *const u8 as *const libc::c_char,
                                );
                              }
                              if c == 'y' as i32 || c == 'Y' as i32 {
                                strcpy(
                                  buf.as_mut_ptr(),
                                  b"Yank\x00" as *const u8 as *const libc::c_char,
                                );
                              }
                              p = (*ptr_to_globals).reg[(*ptr_to_globals).YDreg as usize];
                              q = p.offset(strlen(p) as isize);
                              cnt = 0;
                              while p <= q {
                                if *p as libc::c_int == '\n' as i32 {
                                  cnt += 1
                                }
                                p = p.offset(1)
                              }
                              status_line(
                                b"%s %u lines (%u chars) using [%c]\x00" as *const u8
                                  as *const libc::c_char,
                                buf.as_mut_ptr(),
                                cnt,
                                strlen((*ptr_to_globals).reg[(*ptr_to_globals).YDreg as usize])
                                  as libc::c_uint,
                                what_reg() as libc::c_int,
                              );
                              end_cmd_q();
                              current_block = 15129665204879337069;
                            }
                          } else {
                            current_block = 15129665204879337069;
                          }
                        }
                        5591548203144509315 => {
                          current_block = 2636677179867529885;
                        }
                        _ => {}
                      }
                      match current_block {
                        15129665204879337069 => {}
                        8629930936610358348 => {}
                        _ => {
                          match current_block {
                            2636677179867529885 => {
                              current_block = 12309206730560524281;
                            }
                            _ => {}
                          }
                          match current_block {
                            12309206730560524281 => {
                              current_block = 3325768110057758661;
                            }
                            _ => {}
                          }
                          match current_block {
                            3325768110057758661 => {
                              current_block = 14815832896553429982;
                            }
                            _ => {}
                          }
                          match current_block {
                            14815832896553429982 => {
                              current_block = 10731695520297161438;
                            }
                            _ => {}
                          }
                          match current_block {
                            10731695520297161438 => {
                              if c == '0' as i32 && (*ptr_to_globals).cmdcnt < 1i32 {
                                dot_begin();
                              } else {
                                (*ptr_to_globals).cmdcnt =
                                  (*ptr_to_globals).cmdcnt * 10i32 + (c - '0' as i32)
                              }
                              current_block = 15129665204879337069;
                            }
                            _ => {}
                          }
                          match current_block {
                            15129665204879337069 => {}
                            _ => {
                              loop {
                                match current_block {
                                  16813369756331276724 => {
                                    msg = std::ptr::null();
                                    current_block = 7392824444931029276;
                                  }
                                  7392824444931029276 => {
                                    dir = FORWARD as libc::c_int;
                                    p = (*ptr_to_globals).dot.offset(1);
                                    if *(*ptr_to_globals).last_search_pattern.offset(0)
                                      as libc::c_int
                                      == '?' as i32
                                    {
                                      dir = BACK as libc::c_int;
                                      p = (*ptr_to_globals).dot.offset(-1)
                                    }
                                    current_block = 4166979493554389389;
                                  }
                                  _ => {
                                    q = char_search(
                                      p,
                                      (*ptr_to_globals).last_search_pattern.offset(1),
                                      dir << 1i32 | FULL as libc::c_int,
                                    );
                                    if !q.is_null() {
                                      (*ptr_to_globals).dot = q;
                                      msg = std::ptr::null()
                                    } else {
                                      p = (*ptr_to_globals).text;
                                      if dir == BACK as libc::c_int {
                                        p = (*ptr_to_globals).end.offset(-1)
                                      }
                                      q = char_search(
                                        p,
                                        (*ptr_to_globals).last_search_pattern.offset(1),
                                        dir << 1i32 | FULL as libc::c_int,
                                      );
                                      if !q.is_null() {
                                        (*ptr_to_globals).dot = q;
                                        msg = b"search hit BOTTOM, continuing at TOP\x00"
                                          as *const u8
                                          as *const libc::c_char;
                                        if dir == BACK as libc::c_int {
                                          msg = b"search hit TOP, continuing at BOTTOM\x00"
                                            as *const u8
                                            as *const libc::c_char
                                        }
                                      } else {
                                        msg = b"Pattern not found\x00" as *const u8
                                          as *const libc::c_char
                                      }
                                    }
                                    if !msg.is_null() {
                                      status_line_bold(
                                        b"%s\x00" as *const u8 as *const libc::c_char,
                                        msg,
                                      );
                                    }
                                    (*ptr_to_globals).cmdcnt -= 1;
                                    if (*ptr_to_globals).cmdcnt > 0 {
                                      current_block = 16813369756331276724;
                                    } else {
                                      break;
                                    }
                                  }
                                }
                              }
                              current_block = 15129665204879337069;
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
        82 => {
          current_block = 14485563909071777978;
        }
        -9 => {
          current_block = 12525254419223051704;
          match current_block {
            16992905640583886232 => {
              loop {
                if (*(*ptr_to_globals).dot as libc::c_int - 'a' as i32) as libc::c_uchar
                  as libc::c_int
                  <= 'z' as i32 - 'a' as i32
                {
                  undo_push(
                    (*ptr_to_globals).dot,
                    1i32 as libc::c_uint,
                    1i32 as libc::c_uchar,
                  );
                  *(*ptr_to_globals).dot =
                    bb_ascii_toupper(*(*ptr_to_globals).dot as libc::c_uchar) as libc::c_char;
                  undo_push(
                    (*ptr_to_globals).dot,
                    1i32 as libc::c_uint,
                    2i32 as libc::c_uchar,
                  );
                } else if (*(*ptr_to_globals).dot as libc::c_int - 'A' as i32) as libc::c_uchar
                  as libc::c_int
                  <= 'Z' as i32 - 'A' as i32
                {
                  undo_push(
                    (*ptr_to_globals).dot,
                    1i32 as libc::c_uint,
                    1i32 as libc::c_uchar,
                  );
                  *(*ptr_to_globals).dot =
                    bb_ascii_tolower(*(*ptr_to_globals).dot as libc::c_uchar) as libc::c_char;
                  undo_push(
                    (*ptr_to_globals).dot,
                    1i32 as libc::c_uint,
                    2i32 as libc::c_uchar,
                  );
                }
                dot_right();
                (*ptr_to_globals).cmdcnt -= 1;
                if !((*ptr_to_globals).cmdcnt > 0) {
                  break;
                }
              }
              end_cmd_q();
              current_block = 15129665204879337069;
            }
            8729655159604064397 => {
              c1 = get_one_char();
              cnt = 0;
              if c1 == '.' as i32 {
                cnt = (*ptr_to_globals)
                  .rows
                  .wrapping_sub(2i32 as libc::c_uint)
                  .wrapping_div(2i32 as libc::c_uint) as libc::c_int
              }
              if c1 == '-' as i32 {
                cnt = (*ptr_to_globals).rows.wrapping_sub(2i32 as libc::c_uint) as libc::c_int
              }
              (*ptr_to_globals).screenbegin = begin_line((*ptr_to_globals).dot);
              dot_scroll(cnt, -1i32);
              current_block = 15129665204879337069;
            }
            15899500648299942075 => {
              (*ptr_to_globals).last_forward_char = get_one_char();
              do_cmd(';' as i32);
              if *(*ptr_to_globals).dot as libc::c_int == (*ptr_to_globals).last_forward_char {
                dot_left();
              }
              (*ptr_to_globals).last_forward_char = 0;
              current_block = 15129665204879337069;
            }
            9051390181078481641 => {
              c1 = get_one_char();
              if *(*ptr_to_globals).dot as libc::c_int != '\n' as i32 {
                (*ptr_to_globals).dot =
                  text_hole_delete((*ptr_to_globals).dot, (*ptr_to_globals).dot, 1i32);
                (*ptr_to_globals).dot =
                  char_insert((*ptr_to_globals).dot, c1 as libc::c_char, 2i32);
                dot_left();
              }
              end_cmd_q();
              current_block = 15129665204879337069;
            }
            877115918601926659 => {
              dir = FORWARD as libc::c_int;
              if c == 'b' as i32 {
                dir = BACK as libc::c_int
              }
              while !((*ptr_to_globals).dot.offset(dir as isize) < (*ptr_to_globals).text
                || (*ptr_to_globals).dot.offset(dir as isize) > (*ptr_to_globals).end.offset(-1))
              {
                (*ptr_to_globals).dot = (*ptr_to_globals).dot.offset(dir as isize);
                if ({
                  let mut bb__isspace: libc::c_uchar =
                    (*(*ptr_to_globals).dot as libc::c_int - 9i32) as libc::c_uchar;
                  (bb__isspace as libc::c_int == ' ' as i32 - 9i32
                    || bb__isspace as libc::c_int <= 13i32 - 9i32) as libc::c_int
                }) != 0
                {
                  (*ptr_to_globals).dot = skip_thing(
                    (*ptr_to_globals).dot,
                    if c == 'e' as i32 { 2i32 } else { 1i32 },
                    dir,
                    S_OVER_WS as libc::c_int,
                  )
                }
                if bb_ascii_isalnum(*(*ptr_to_globals).dot as libc::c_uchar) != 0
                  || *(*ptr_to_globals).dot as libc::c_int == '_' as i32
                {
                  (*ptr_to_globals).dot =
                    skip_thing((*ptr_to_globals).dot, 1i32, dir, S_END_ALNUM as libc::c_int)
                } else if *strchrnul(
                  b"!\"#$%&\'()*+,-./:;<=>?@[\\]^_`{|}~\x00" as *const u8 as *const libc::c_char,
                  *(*ptr_to_globals).dot as libc::c_int,
                )
                .offset(0)
                  != 0
                {
                  (*ptr_to_globals).dot =
                    skip_thing((*ptr_to_globals).dot, 1i32, dir, S_END_PUNCT as libc::c_int)
                }
                (*ptr_to_globals).cmdcnt -= 1;
                if !((*ptr_to_globals).cmdcnt > 0) {
                  break;
                }
              }
              current_block = 15129665204879337069;
            }
            1085022737867179637 => {
              dot_begin();
              dot_skip_over_ws();
              current_block = 15129665204879337069;
            }
            3113147720494587438 => {
              c1 = get_one_char();
              if c1 != 'Z' as i32 {
                indicate_error();
              } else if (*ptr_to_globals).modified_count != 0 {
                if 1i32 != 0 && (*ptr_to_globals).readonly_mode as libc::c_int != 0 {
                  status_line_bold(
                    b"\'%s\' is read only\x00" as *const u8 as *const libc::c_char,
                    (*ptr_to_globals).current_filename,
                  );
                } else {
                  cnt = file_write(
                    (*ptr_to_globals).current_filename,
                    (*ptr_to_globals).text,
                    (*ptr_to_globals).end.offset(-1),
                  );
                  if cnt < 0 {
                    if cnt == -1i32 {
                      status_line_bold(b"Write error: %m\x00" as *const u8 as *const libc::c_char);
                    }
                  } else if cnt as libc::c_long
                    == (*ptr_to_globals)
                      .end
                      .offset(-1)
                      .wrapping_offset_from((*ptr_to_globals).text)
                      as libc::c_long
                      + 1
                  {
                    (*ptr_to_globals).editing = 0 as smallint
                  }
                }
              } else {
                (*ptr_to_globals).editing = 0 as smallint
              }
              current_block = 15129665204879337069;
            }
            12960118908218882441 => {
              p = begin_line((*ptr_to_globals).dot);
              if *p.offset(-1i32 as isize) as libc::c_int == '\n' as i32 {
                dot_prev();
                current_block = 2087484904894455135;
              } else {
                dot_begin();
                (*ptr_to_globals).dot =
                  char_insert((*ptr_to_globals).dot, '\n' as i32 as libc::c_char, 1i32);
                dot_prev();
                current_block = 8629930936610358348;
              }
            }
            8720450212473544924 => {
              (*ptr_to_globals).dot = (*ptr_to_globals).screenbegin;
              cnt = 0;
              while (cnt as libc::c_uint)
                < (*ptr_to_globals)
                  .rows
                  .wrapping_sub(1i32 as libc::c_uint)
                  .wrapping_div(2i32 as libc::c_uint)
              {
                (*ptr_to_globals).dot = next_line((*ptr_to_globals).dot);
                cnt += 1
              }
              current_block = 15129665204879337069;
            }
            13015277209715431090 => {
              (*ptr_to_globals).dot = end_screen();
              if (*ptr_to_globals).cmdcnt as libc::c_uint
                > (*ptr_to_globals).rows.wrapping_sub(1i32 as libc::c_uint)
              {
                (*ptr_to_globals).cmdcnt =
                  (*ptr_to_globals).rows.wrapping_sub(1i32 as libc::c_uint) as libc::c_int
              }
              (*ptr_to_globals).cmdcnt -= 1;
              if (*ptr_to_globals).cmdcnt > 0 {
                do_cmd('-' as i32);
              }
              dot_begin();
              dot_skip_over_ws();
              current_block = 15129665204879337069;
            }
            9800435767766781385 => {
              loop {
                dot_end();
                if (*ptr_to_globals).dot < (*ptr_to_globals).end.offset(-1) {
                  undo_push(
                    (*ptr_to_globals).dot,
                    1i32 as libc::c_uint,
                    1i32 as libc::c_uchar,
                  );
                  let fresh15 = (*ptr_to_globals).dot;
                  (*ptr_to_globals).dot = (*ptr_to_globals).dot.offset(1);
                  *fresh15 = ' ' as i32 as libc::c_char;
                  undo_push(
                    (*ptr_to_globals).dot.offset(-1),
                    1i32 as libc::c_uint,
                    2i32 as libc::c_uchar,
                  );
                  while ({
                    let mut bb__isblank: libc::c_uchar = *(*ptr_to_globals).dot as libc::c_uchar;
                    (bb__isblank as libc::c_int == ' ' as i32
                      || bb__isblank as libc::c_int == '\t' as i32)
                      as libc::c_int
                  }) != 0
                  {
                    text_hole_delete((*ptr_to_globals).dot, (*ptr_to_globals).dot, 2i32);
                  }
                }
                (*ptr_to_globals).cmdcnt -= 1;
                if !((*ptr_to_globals).cmdcnt > 0) {
                  break;
                }
              }
              end_cmd_q();
              current_block = 15129665204879337069;
            }
            3432363526595694666 => {
              dot_begin();
              dot_skip_over_ws();
              current_block = 3268579060917229304;
            }
            3494829253343353619 => {
              (*ptr_to_globals).dot = (*ptr_to_globals).screenbegin;
              if (*ptr_to_globals).cmdcnt as libc::c_uint
                > (*ptr_to_globals).rows.wrapping_sub(1i32 as libc::c_uint)
              {
                (*ptr_to_globals).cmdcnt =
                  (*ptr_to_globals).rows.wrapping_sub(1i32 as libc::c_uint) as libc::c_int
              }
              (*ptr_to_globals).cmdcnt -= 1;
              if (*ptr_to_globals).cmdcnt > 0 {
                do_cmd('+' as i32);
              }
              dot_skip_over_ws();
              current_block = 15129665204879337069;
            }
            17973101765331640574 => {
              c1 = get_one_char();
              if c1 != 'g' as i32 {
                buf[0] = 'g' as i32 as libc::c_char;
                buf[1] = if c1 >= 0 { c1 } else { '*' as i32 } as libc::c_char;
                buf[2] = '\u{0}' as i32 as libc::c_char;
                not_implemented(buf.as_mut_ptr());
                current_block = 15129665204879337069;
              } else {
                if (*ptr_to_globals).cmdcnt == 0 {
                  (*ptr_to_globals).cmdcnt = 1i32
                }
                current_block = 11945623545738147997;
              }
            }
            16546625800574160972 => {
              save_dot = (*ptr_to_globals).dot;
              (*ptr_to_globals).dot = dollar_line((*ptr_to_globals).dot);
              (*ptr_to_globals).dot = yank_delete(
                save_dot,
                (*ptr_to_globals).dot,
                0,
                YANKDEL as libc::c_int,
                1i32,
              );
              if c == 'C' as i32 {
                current_block = 8629930936610358348;
              } else {
                if c == 'D' as i32 {
                  end_cmd_q();
                }
                current_block = 15129665204879337069;
              }
            }
            11937696639986586685 => {
              cnt = count_lines((*ptr_to_globals).text, (*ptr_to_globals).dot);
              c1 = get_one_char();
              find_range(&mut p, &mut q, c1 as libc::c_char);
              yank_delete(p, q, 1i32, YANKONLY as libc::c_int, 0);
              p = begin_line(p);
              q = end_line(q);
              i = count_lines(p, q);
              while i > 0 {
                if c == '<' as i32 {
                  if *p as libc::c_int == '\t' as i32 {
                    text_hole_delete(p, p, 0);
                  } else if *p as libc::c_int == ' ' as i32 {
                    j = 0;
                    while *p as libc::c_int == ' ' as i32 && j < (*ptr_to_globals).tabstop {
                      text_hole_delete(p, p, 0);
                      j += 1
                    }
                  }
                } else if c == '>' as i32 {
                  char_insert(p, '\t' as i32 as libc::c_char, 1i32);
                }
                i -= 1;
                p = next_line(p)
              }
              (*ptr_to_globals).dot = find_line(cnt);
              dot_skip_over_ws();
              end_cmd_q();
              current_block = 15129665204879337069;
            }
            17725350714912028156 => {
              p = get_input_line(b":\x00" as *const u8 as *const libc::c_char);
              colon(p);
              current_block = 15129665204879337069;
            }
            14526470074083880812 => {
              q = char_search(
                (*ptr_to_globals).dot,
                b"\n\n\x00" as *const u8 as *const libc::c_char,
                (FORWARD as libc::c_int) << 1i32 | FULL as libc::c_int,
              );
              if !q.is_null() {
                (*ptr_to_globals).dot = next_line(q)
              }
              current_block = 15129665204879337069;
            }
            8893187391306414141 => {
              q = char_search(
                (*ptr_to_globals).dot,
                b"\n\n\x00" as *const u8 as *const libc::c_char,
                ((BACK as libc::c_int as libc::c_uint) << 1i32
                  | FULL as libc::c_int as libc::c_uint) as libc::c_int,
              );
              if !q.is_null() {
                (*ptr_to_globals).dot = next_line(q)
              }
              current_block = 15129665204879337069;
            }
            7021673758293221412 => {
              dir = BACK as libc::c_int;
              p = (*ptr_to_globals).dot.offset(-1);
              if *(*ptr_to_globals).last_search_pattern.offset(0) as libc::c_int == '?' as i32 {
                dir = FORWARD as libc::c_int;
                p = (*ptr_to_globals).dot.offset(1)
              }
              current_block = 4166979493554389389;
            }
            18374191879090272823 => {
              buf[0] = c as libc::c_char;
              buf[1] = '\u{0}' as i32 as libc::c_char;
              q = get_input_line(buf.as_mut_ptr());
              if *q.offset(0) as libc::c_int != 0 && *q.offset(1) == 0 {
                if *(*ptr_to_globals).last_search_pattern.offset(0) != 0 {
                  *(*ptr_to_globals).last_search_pattern.offset(0) = c as libc::c_char
                }
                current_block = 7392824444931029276;
              } else if *q.offset(0) != 0 {
                free((*ptr_to_globals).last_search_pattern as *mut libc::c_void);
                (*ptr_to_globals).last_search_pattern = crate::libbb::xfuncs_printf::xstrdup(q);
                current_block = 7392824444931029276;
              } else {
                current_block = 15129665204879337069;
              }
            }
            16407828456666301883 => {
              if (*ptr_to_globals).last_forward_char == 0 {
                current_block = 15129665204879337069;
              } else {
                loop {
                  q = (*ptr_to_globals).dot.offset(-1);
                  while q >= (*ptr_to_globals).text
                    && *q as libc::c_int != '\n' as i32
                    && *q as libc::c_int != (*ptr_to_globals).last_forward_char
                  {
                    q = q.offset(-1)
                  }
                  if q >= (*ptr_to_globals).text
                    && *q as libc::c_int == (*ptr_to_globals).last_forward_char
                  {
                    (*ptr_to_globals).dot = q
                  }
                  (*ptr_to_globals).cmdcnt -= 1;
                  if !((*ptr_to_globals).cmdcnt > 0) {
                    break;
                  }
                }
                current_block = 15129665204879337069;
              }
            }
            9018432604062702004 => {
              q = (*ptr_to_globals).dot;
              while q < (*ptr_to_globals).end && *q as libc::c_int != '\n' as i32 {
                if !strchr(
                  b"()[]{}\x00" as *const u8 as *const libc::c_char,
                  *q as libc::c_int,
                )
                .is_null()
                {
                  p = find_pair(q, *q);
                  if p.is_null() {
                    indicate_error();
                  } else {
                    (*ptr_to_globals).dot = p
                  }
                  break;
                } else {
                  q = q.offset(1)
                }
              }
              if *q as libc::c_int == '\n' as i32 {
                indicate_error();
              }
              current_block = 15129665204879337069;
            }
            10247103787464459848 => {
              p = (*ptr_to_globals).reg[(*ptr_to_globals).YDreg as usize];
              if p.is_null() {
                status_line_bold(
                  b"Nothing in register %c\x00" as *const u8 as *const libc::c_char,
                  what_reg() as libc::c_int,
                );
              } else {
                if !strchr(p, '\n' as i32).is_null() {
                  if c == 'P' as i32 {
                    dot_begin();
                  }
                  if c == 'p' as i32 {
                    if end_line((*ptr_to_globals).dot) == (*ptr_to_globals).end.offset(-1) {
                      (*ptr_to_globals).dot = (*ptr_to_globals).end
                    } else {
                      dot_next();
                    }
                  }
                } else if c == 'p' as i32 {
                  dot_right();
                }
                string_insert((*ptr_to_globals).dot, p, 1i32);
                end_cmd_q();
              }
              current_block = 15129665204879337069;
            }
            15260732871948875843 => {
              c1 = (get_one_char() | 0x20i32) - 'a' as i32;
              if c1 as libc::c_uint <= 25i32 as libc::c_uint {
                (*ptr_to_globals).mark[c1 as usize] = (*ptr_to_globals).dot
              } else {
                indicate_error();
              }
              current_block = 15129665204879337069;
            }
            12738322036487086035 => {
              c1 = get_one_char() | 0x20i32;
              if (c1 - 'a' as i32) as libc::c_uint <= 25i32 as libc::c_uint {
                c1 = c1 - 'a' as i32;
                q = (*ptr_to_globals).mark[c1 as usize];
                if (*ptr_to_globals).text <= q && q < (*ptr_to_globals).end {
                  (*ptr_to_globals).dot = q;
                  dot_begin();
                  dot_skip_over_ws();
                }
              } else if c1 == '\'' as i32 {
                (*ptr_to_globals).dot = swap_context((*ptr_to_globals).dot);
                dot_begin();
                dot_skip_over_ws();
              } else {
                indicate_error();
              }
              current_block = 15129665204879337069;
            }
            13255096073384561358 => {
              c1 = (get_one_char() | 0x20i32) - 'a' as i32;
              if c1 as libc::c_uint <= 25i32 as libc::c_uint {
                (*ptr_to_globals).YDreg = c1 as smalluint
              } else {
                indicate_error();
              }
              current_block = 15129665204879337069;
            }
            10258711639984089377 => {
              if (*ptr_to_globals).cmd_mode as libc::c_int == 0 {
                indicate_error();
              }
              (*ptr_to_globals).cmd_mode = 0 as smallint;
              undo_queue_commit();
              end_cmd_q();
              (*ptr_to_globals).last_status_cksum = 0;
              current_block = 15129665204879337069;
            }
            11439127087547047736 => {
              buf[0] = c as libc::c_char;
              buf[1] = '\u{0}' as i32 as libc::c_char;
              not_implemented(buf.as_mut_ptr());
              end_cmd_q();
              current_block = 17440971994642376514;
            }
            7961798899781870241 => {
              dot_scroll(
                (*ptr_to_globals).rows.wrapping_sub(2i32 as libc::c_uint) as libc::c_int,
                -1i32,
              );
              current_block = 15129665204879337069;
            }
            9426343755402444879 => {
              dot_scroll(
                (*ptr_to_globals)
                  .rows
                  .wrapping_sub(2i32 as libc::c_uint)
                  .wrapping_div(2i32 as libc::c_uint) as libc::c_int,
                1i32,
              );
              current_block = 15129665204879337069;
            }
            13352459794680105913 => {
              dot_scroll(1i32, 1i32);
              current_block = 15129665204879337069;
            }
            14142272253464333006 => {
              dot_scroll(
                (*ptr_to_globals).rows.wrapping_sub(2i32 as libc::c_uint) as libc::c_int,
                1i32,
              );
              current_block = 15129665204879337069;
            }
            10758177197742640066 => {
              (*ptr_to_globals).last_status_cksum = 0;
              current_block = 15129665204879337069;
            }
            6152256259730122749 => {
              current_block = 7534742345255184552;
            }
            12883932598258173301 => {
              current_block = 8800996768013373992;
            }
            11242998110520238401 => {
              redraw(1i32);
              current_block = 15129665204879337069;
            }
            13619733043935729992 => {
              loop {
                dot_next();
                dot_skip_over_ws();
                (*ptr_to_globals).cmdcnt -= 1;
                if !((*ptr_to_globals).cmdcnt > 0) {
                  break;
                }
              }
              current_block = 15129665204879337069;
            }
            9339065157412720613 => {
              dot_scroll(
                (*ptr_to_globals)
                  .rows
                  .wrapping_sub(2i32 as libc::c_uint)
                  .wrapping_div(2i32 as libc::c_uint) as libc::c_int,
                -1i32,
              );
              current_block = 15129665204879337069;
            }
            11447082683497798022 => {
              dot_scroll(1i32, -1i32);
              current_block = 15129665204879337069;
            }
            5182000506326660482 => {
              current_block = 13993698454868426881;
            }
            1105010766850597332 => {
              if !(*ptr_to_globals).reg[27].is_null() {
                p = begin_line((*ptr_to_globals).dot);
                q = end_line((*ptr_to_globals).dot);
                p = text_hole_delete(p, q, 1i32);
                p = p.offset(string_insert(p, (*ptr_to_globals).reg[27], 2i32) as isize);
                (*ptr_to_globals).dot = p;
                dot_skip_over_ws();
              }
              current_block = 15129665204879337069;
            }
            8616046655533110204 => {
              undo_pop();
              current_block = 15129665204879337069;
            }
            5127767458142431603 => {
              loop {
                (*ptr_to_globals).dot = end_line((*ptr_to_globals).dot);
                (*ptr_to_globals).cmdcnt -= 1;
                if (*ptr_to_globals).cmdcnt <= 0 {
                  break;
                }
                dot_next();
              }
              current_block = 15129665204879337069;
            }
            222014967776118151 => {
              (*ptr_to_globals).last_forward_char = get_one_char();
              current_block = 7856905509180742666;
            }
            11209792479411604110 => {
              loop {
                dot_prev();
                dot_skip_over_ws();
                (*ptr_to_globals).cmdcnt -= 1;
                if !((*ptr_to_globals).cmdcnt > 0) {
                  break;
                }
              }
              current_block = 15129665204879337069;
            }
            3364823792826654116 => {
              if (*ptr_to_globals).lmc_len != 0 {
                (*ptr_to_globals).ioq_start = crate::libbb::xfuncs_printf::xstrndup(
                  (*ptr_to_globals).last_modifying_cmd.as_mut_ptr(),
                  (*ptr_to_globals).lmc_len,
                );
                (*ptr_to_globals).ioq = (*ptr_to_globals).ioq_start
              }
              current_block = 15129665204879337069;
            }
            18096603330221575131 => {
              current_block = 17498168302144015873;
            }
            16891123271837848903 => {
              dot_end();
              current_block = 1752638907092016026;
            }
            8517235759107662071 => {
              current_block = 5847749760081351726;
            }
            12525254419223051704 => {
              if (*ptr_to_globals).dot < (*ptr_to_globals).end.offset(-1) {
                (*ptr_to_globals).dot = yank_delete(
                  (*ptr_to_globals).dot,
                  (*ptr_to_globals).dot,
                  1i32,
                  YANKDEL as libc::c_int,
                  1i32,
                )
              }
              current_block = 15129665204879337069;
            }
            15232911949322867522 => {
              current_block = 17251831742223396249;
            }
            10863374208794025069 => {
              current_block = 1895262434596074581;
            }
            451126677064669119 => {
              loop {
                dot_prev();
                (*ptr_to_globals).dot = move_to_col(
                  (*ptr_to_globals).dot,
                  (*ptr_to_globals).ccol + (*ptr_to_globals).offset,
                );
                (*ptr_to_globals).cmdcnt -= 1;
                if !((*ptr_to_globals).cmdcnt > 0) {
                  break;
                }
              }
              current_block = 15129665204879337069;
            }
            4611735929166613116 => {
              loop {
                if bb_ascii_isalnum(*(*ptr_to_globals).dot as libc::c_uchar) != 0
                  || *(*ptr_to_globals).dot as libc::c_int == '_' as i32
                {
                  (*ptr_to_globals).dot = skip_thing(
                    (*ptr_to_globals).dot,
                    1i32,
                    FORWARD as libc::c_int,
                    S_END_ALNUM as libc::c_int,
                  )
                } else if *strchrnul(
                  b"!\"#$%&\'()*+,-./:;<=>?@[\\]^_`{|}~\x00" as *const u8 as *const libc::c_char,
                  *(*ptr_to_globals).dot as libc::c_int,
                )
                .offset(0)
                  != 0
                {
                  (*ptr_to_globals).dot = skip_thing(
                    (*ptr_to_globals).dot,
                    1i32,
                    FORWARD as libc::c_int,
                    S_END_PUNCT as libc::c_int,
                  )
                }
                if (*ptr_to_globals).dot < (*ptr_to_globals).end.offset(-1) {
                  (*ptr_to_globals).dot = (*ptr_to_globals).dot.offset(1)
                }
                if ({
                  let mut bb__isspace: libc::c_uchar =
                    (*(*ptr_to_globals).dot as libc::c_int - 9i32) as libc::c_uchar;
                  (bb__isspace as libc::c_int == ' ' as i32 - 9i32
                    || bb__isspace as libc::c_int <= 13i32 - 9i32) as libc::c_int
                }) != 0
                {
                  (*ptr_to_globals).dot = skip_thing(
                    (*ptr_to_globals).dot,
                    2i32,
                    FORWARD as libc::c_int,
                    S_OVER_WS as libc::c_int,
                  )
                }
                (*ptr_to_globals).cmdcnt -= 1;
                if !((*ptr_to_globals).cmdcnt > 0) {
                  break;
                }
              }
              current_block = 15129665204879337069;
            }
            4386451087681909888 => {
              (*ptr_to_globals).dot =
                move_to_col((*ptr_to_globals).dot, (*ptr_to_globals).cmdcnt - 1i32);
              current_block = 15129665204879337069;
            }
            1296397779060594135 => {
              dot_begin();
              current_block = 15129665204879337069;
            }
            _ => {}
          }
          match current_block {
            15129665204879337069 => {}
            8629930936610358348 => {}
            _ => {
              match current_block {
                17251831742223396249 => {
                  dir = 0;
                  if c == 'X' as i32 {
                    dir = -1i32
                  }
                  loop {
                    if *(*ptr_to_globals).dot.offset(dir as isize) as libc::c_int != '\n' as i32 {
                      if c == 'X' as i32 {
                        (*ptr_to_globals).dot = (*ptr_to_globals).dot.offset(-1)
                      }
                      (*ptr_to_globals).dot = yank_delete(
                        (*ptr_to_globals).dot,
                        (*ptr_to_globals).dot,
                        0,
                        YANKDEL as libc::c_int,
                        1i32,
                      )
                    }
                    (*ptr_to_globals).cmdcnt -= 1;
                    if !((*ptr_to_globals).cmdcnt > 0) {
                      break;
                    }
                  }
                  end_cmd_q();
                  if c == 's' as i32 {
                    current_block = 8629930936610358348;
                  } else {
                    current_block = 15129665204879337069;
                  }
                }
                2087484904894455135 => {
                  dot_end();
                  (*ptr_to_globals).dot =
                    char_insert((*ptr_to_globals).dot, '\n' as i32 as libc::c_char, 1i32);
                  current_block = 8629930936610358348;
                }
                11945623545738147997 => {
                  (*ptr_to_globals).dot = (*ptr_to_globals).end.offset(-1);
                  if (*ptr_to_globals).cmdcnt > 0 {
                    (*ptr_to_globals).dot = find_line((*ptr_to_globals).cmdcnt)
                  }
                  dot_skip_over_ws();
                  current_block = 15129665204879337069;
                }
                5847749760081351726 => {
                  dir = FORWARD as libc::c_int;
                  if c == 'B' as i32 {
                    dir = BACK as libc::c_int
                  }
                  loop {
                    if c == 'W' as i32
                      || ({
                        let mut bb__isspace: libc::c_uchar =
                          (*(*ptr_to_globals).dot.offset(dir as isize) as libc::c_int - 9i32)
                            as libc::c_uchar;
                        (bb__isspace as libc::c_int == ' ' as i32 - 9i32
                          || bb__isspace as libc::c_int <= 13i32 - 9i32)
                          as libc::c_int
                      }) != 0
                    {
                      (*ptr_to_globals).dot =
                        skip_thing((*ptr_to_globals).dot, 1i32, dir, S_TO_WS as libc::c_int);
                      (*ptr_to_globals).dot =
                        skip_thing((*ptr_to_globals).dot, 2i32, dir, S_OVER_WS as libc::c_int)
                    }
                    if c != 'W' as i32 {
                      (*ptr_to_globals).dot =
                        skip_thing((*ptr_to_globals).dot, 1i32, dir, S_BEFORE_WS as libc::c_int)
                    }
                    (*ptr_to_globals).cmdcnt -= 1;
                    if !((*ptr_to_globals).cmdcnt > 0) {
                      break;
                    }
                  }
                  current_block = 15129665204879337069;
                }
                17440971994642376514 => {
                  current_block = 15129665204879337069;
                }
                7534742345255184552 => {
                  current_block = 17247297260531395789;
                }
                8800996768013373992 => {
                  loop {
                    dot_next();
                    (*ptr_to_globals).dot = move_to_col(
                      (*ptr_to_globals).dot,
                      (*ptr_to_globals).ccol + (*ptr_to_globals).offset,
                    );
                    (*ptr_to_globals).cmdcnt -= 1;
                    if !((*ptr_to_globals).cmdcnt > 0) {
                      break;
                    }
                  }
                  current_block = 15129665204879337069;
                }
                13993698454868426881 => {
                  loop {
                    dot_right();
                    (*ptr_to_globals).cmdcnt -= 1;
                    if !((*ptr_to_globals).cmdcnt > 0) {
                      break;
                    }
                  }
                  current_block = 15129665204879337069;
                }
                7856905509180742666 => {
                  while !((*ptr_to_globals).last_forward_char == 0) {
                    q = (*ptr_to_globals).dot.offset(1);
                    while q < (*ptr_to_globals).end.offset(-1)
                      && *q as libc::c_int != '\n' as i32
                      && *q as libc::c_int != (*ptr_to_globals).last_forward_char
                    {
                      q = q.offset(1)
                    }
                    if *q as libc::c_int == (*ptr_to_globals).last_forward_char {
                      (*ptr_to_globals).dot = q
                    }
                    (*ptr_to_globals).cmdcnt -= 1;
                    if !((*ptr_to_globals).cmdcnt > 0) {
                      break;
                    }
                  }
                  current_block = 15129665204879337069;
                }
                17498168302144015873 => {
                  current_block = 8681395796513813967;
                }
                1752638907092016026 => {
                  if *(*ptr_to_globals).dot as libc::c_int != '\n' as i32 {
                    (*ptr_to_globals).dot = (*ptr_to_globals).dot.offset(1)
                  }
                  current_block = 8629930936610358348;
                }
                3268579060917229304 => {
                  current_block = 8629930936610358348;
                }
                1895262434596074581 => {
                  current_block = 8908416993177701018;
                }
                _ => {}
              }
              match current_block {
                8629930936610358348 => {}
                15129665204879337069 => {}
                _ => {
                  match current_block {
                    17247297260531395789 => {
                      loop {
                        dot_left();
                        (*ptr_to_globals).cmdcnt -= 1;
                        if !((*ptr_to_globals).cmdcnt > 0) {
                          break;
                        }
                      }
                      current_block = 15129665204879337069;
                    }
                    8681395796513813967 => {
                      current_block = 5591548203144509315;
                    }
                    8908416993177701018 => {
                      current_block = 16124761010012532485;
                    }
                    _ => {}
                  }
                  match current_block {
                    15129665204879337069 => {}
                    _ => {
                      match current_block {
                        16124761010012532485 => {
                          let mut yf: libc::c_int = 0;
                          let mut ml: libc::c_int = 0;
                          let mut whole: libc::c_int = 0;
                          yf = YANKDEL as libc::c_int;
                          if c == 'y' as i32 || c == 'Y' as i32 {
                            yf = YANKONLY as libc::c_int
                          }
                          c1 = 'y' as i32;
                          if c != 'Y' as i32 {
                            c1 = get_one_char()
                          }
                          ml = find_range(&mut p, &mut q, c1 as libc::c_char);
                          place_cursor(0i32, 0);
                          if c1 == 27i32 {
                            c1 = 27i32;
                            c = c1
                          } else if !strchr(b"wW\x00" as *const u8 as *const libc::c_char, c1)
                            .is_null()
                          {
                            ml = 0;
                            if c == 'c' as i32 {
                              while ({
                                let mut bb__isspace: libc::c_uchar =
                                  (*q as libc::c_int - 9i32) as libc::c_uchar;
                                (bb__isspace as libc::c_int == ' ' as i32 - 9i32
                                  || bb__isspace as libc::c_int <= 13i32 - 9i32)
                                  as libc::c_int
                              }) != 0
                                && q > p
                              {
                                q = q.offset(-1)
                              }
                            }
                            (*ptr_to_globals).dot = yank_delete(p, q, ml, yf, 1i32)
                          } else if !strchr(
                            b"^0bBeEft%$ lh\x08\x7f\x00" as *const u8 as *const libc::c_char,
                            c1,
                          )
                          .is_null()
                          {
                            (*ptr_to_globals).dot = yank_delete(p, q, ml, yf, 1i32)
                          } else if !strchr(
                            b"cdykjGHL+-{}\r\n\x00" as *const u8 as *const libc::c_char,
                            c1,
                          )
                          .is_null()
                          {
                            (*ptr_to_globals).dot = yank_delete(p, q, ml, yf, 1i32);
                            whole = 1i32
                          } else {
                            c1 = 27i32;
                            c = c1;
                            ml = 0;
                            indicate_error();
                          }
                          if ml != 0 && whole != 0 {
                            if c == 'c' as i32 {
                              (*ptr_to_globals).dot = char_insert(
                                (*ptr_to_globals).dot,
                                '\n' as i32 as libc::c_char,
                                2i32,
                              );
                              if whole != 0
                                && (*ptr_to_globals).dot != (*ptr_to_globals).end.offset(-1)
                              {
                                dot_prev();
                              }
                            } else if c == 'd' as i32 {
                              dot_begin();
                              dot_skip_over_ws();
                            }
                          }
                          if c1 != 27i32 {
                            if c == 'c' as i32 {
                              strcpy(
                                buf.as_mut_ptr(),
                                b"Change\x00" as *const u8 as *const libc::c_char,
                              );
                              current_block = 8629930936610358348;
                            } else {
                              if c == 'd' as i32 {
                                strcpy(
                                  buf.as_mut_ptr(),
                                  b"Delete\x00" as *const u8 as *const libc::c_char,
                                );
                              }
                              if c == 'y' as i32 || c == 'Y' as i32 {
                                strcpy(
                                  buf.as_mut_ptr(),
                                  b"Yank\x00" as *const u8 as *const libc::c_char,
                                );
                              }
                              p = (*ptr_to_globals).reg[(*ptr_to_globals).YDreg as usize];
                              q = p.offset(strlen(p) as isize);
                              cnt = 0;
                              while p <= q {
                                if *p as libc::c_int == '\n' as i32 {
                                  cnt += 1
                                }
                                p = p.offset(1)
                              }
                              status_line(
                                b"%s %u lines (%u chars) using [%c]\x00" as *const u8
                                  as *const libc::c_char,
                                buf.as_mut_ptr(),
                                cnt,
                                strlen((*ptr_to_globals).reg[(*ptr_to_globals).YDreg as usize])
                                  as libc::c_uint,
                                what_reg() as libc::c_int,
                              );
                              end_cmd_q();
                              current_block = 15129665204879337069;
                            }
                          } else {
                            current_block = 15129665204879337069;
                          }
                        }
                        5591548203144509315 => {
                          current_block = 2636677179867529885;
                        }
                        _ => {}
                      }
                      match current_block {
                        15129665204879337069 => {}
                        8629930936610358348 => {}
                        _ => {
                          match current_block {
                            2636677179867529885 => {
                              current_block = 12309206730560524281;
                            }
                            _ => {}
                          }
                          match current_block {
                            12309206730560524281 => {
                              current_block = 3325768110057758661;
                            }
                            _ => {}
                          }
                          match current_block {
                            3325768110057758661 => {
                              current_block = 14815832896553429982;
                            }
                            _ => {}
                          }
                          match current_block {
                            14815832896553429982 => {
                              current_block = 10731695520297161438;
                            }
                            _ => {}
                          }
                          match current_block {
                            10731695520297161438 => {
                              if c == '0' as i32 && (*ptr_to_globals).cmdcnt < 1i32 {
                                dot_begin();
                              } else {
                                (*ptr_to_globals).cmdcnt =
                                  (*ptr_to_globals).cmdcnt * 10i32 + (c - '0' as i32)
                              }
                              current_block = 15129665204879337069;
                            }
                            _ => {}
                          }
                          match current_block {
                            15129665204879337069 => {}
                            _ => {
                              loop {
                                match current_block {
                                  16813369756331276724 => {
                                    msg = std::ptr::null();
                                    current_block = 7392824444931029276;
                                  }
                                  7392824444931029276 => {
                                    dir = FORWARD as libc::c_int;
                                    p = (*ptr_to_globals).dot.offset(1);
                                    if *(*ptr_to_globals).last_search_pattern.offset(0)
                                      as libc::c_int
                                      == '?' as i32
                                    {
                                      dir = BACK as libc::c_int;
                                      p = (*ptr_to_globals).dot.offset(-1)
                                    }
                                    current_block = 4166979493554389389;
                                  }
                                  _ => {
                                    q = char_search(
                                      p,
                                      (*ptr_to_globals).last_search_pattern.offset(1),
                                      dir << 1i32 | FULL as libc::c_int,
                                    );
                                    if !q.is_null() {
                                      (*ptr_to_globals).dot = q;
                                      msg = std::ptr::null()
                                    } else {
                                      p = (*ptr_to_globals).text;
                                      if dir == BACK as libc::c_int {
                                        p = (*ptr_to_globals).end.offset(-1)
                                      }
                                      q = char_search(
                                        p,
                                        (*ptr_to_globals).last_search_pattern.offset(1),
                                        dir << 1i32 | FULL as libc::c_int,
                                      );
                                      if !q.is_null() {
                                        (*ptr_to_globals).dot = q;
                                        msg = b"search hit BOTTOM, continuing at TOP\x00"
                                          as *const u8
                                          as *const libc::c_char;
                                        if dir == BACK as libc::c_int {
                                          msg = b"search hit TOP, continuing at BOTTOM\x00"
                                            as *const u8
                                            as *const libc::c_char
                                        }
                                      } else {
                                        msg = b"Pattern not found\x00" as *const u8
                                          as *const libc::c_char
                                      }
                                    }
                                    if !msg.is_null() {
                                      status_line_bold(
                                        b"%s\x00" as *const u8 as *const libc::c_char,
                                        msg,
                                      );
                                    }
                                    (*ptr_to_globals).cmdcnt -= 1;
                                    if (*ptr_to_globals).cmdcnt > 0 {
                                      current_block = 16813369756331276724;
                                    } else {
                                      break;
                                    }
                                  }
                                }
                              }
                              current_block = 15129665204879337069;
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
        88 => {
          current_block = 15232911949322867522;
          match current_block {
            16992905640583886232 => {
              loop {
                if (*(*ptr_to_globals).dot as libc::c_int - 'a' as i32) as libc::c_uchar
                  as libc::c_int
                  <= 'z' as i32 - 'a' as i32
                {
                  undo_push(
                    (*ptr_to_globals).dot,
                    1i32 as libc::c_uint,
                    1i32 as libc::c_uchar,
                  );
                  *(*ptr_to_globals).dot =
                    bb_ascii_toupper(*(*ptr_to_globals).dot as libc::c_uchar) as libc::c_char;
                  undo_push(
                    (*ptr_to_globals).dot,
                    1i32 as libc::c_uint,
                    2i32 as libc::c_uchar,
                  );
                } else if (*(*ptr_to_globals).dot as libc::c_int - 'A' as i32) as libc::c_uchar
                  as libc::c_int
                  <= 'Z' as i32 - 'A' as i32
                {
                  undo_push(
                    (*ptr_to_globals).dot,
                    1i32 as libc::c_uint,
                    1i32 as libc::c_uchar,
                  );
                  *(*ptr_to_globals).dot =
                    bb_ascii_tolower(*(*ptr_to_globals).dot as libc::c_uchar) as libc::c_char;
                  undo_push(
                    (*ptr_to_globals).dot,
                    1i32 as libc::c_uint,
                    2i32 as libc::c_uchar,
                  );
                }
                dot_right();
                (*ptr_to_globals).cmdcnt -= 1;
                if !((*ptr_to_globals).cmdcnt > 0) {
                  break;
                }
              }
              end_cmd_q();
              current_block = 15129665204879337069;
            }
            8729655159604064397 => {
              c1 = get_one_char();
              cnt = 0;
              if c1 == '.' as i32 {
                cnt = (*ptr_to_globals)
                  .rows
                  .wrapping_sub(2i32 as libc::c_uint)
                  .wrapping_div(2i32 as libc::c_uint) as libc::c_int
              }
              if c1 == '-' as i32 {
                cnt = (*ptr_to_globals).rows.wrapping_sub(2i32 as libc::c_uint) as libc::c_int
              }
              (*ptr_to_globals).screenbegin = begin_line((*ptr_to_globals).dot);
              dot_scroll(cnt, -1i32);
              current_block = 15129665204879337069;
            }
            15899500648299942075 => {
              (*ptr_to_globals).last_forward_char = get_one_char();
              do_cmd(';' as i32);
              if *(*ptr_to_globals).dot as libc::c_int == (*ptr_to_globals).last_forward_char {
                dot_left();
              }
              (*ptr_to_globals).last_forward_char = 0;
              current_block = 15129665204879337069;
            }
            9051390181078481641 => {
              c1 = get_one_char();
              if *(*ptr_to_globals).dot as libc::c_int != '\n' as i32 {
                (*ptr_to_globals).dot =
                  text_hole_delete((*ptr_to_globals).dot, (*ptr_to_globals).dot, 1i32);
                (*ptr_to_globals).dot =
                  char_insert((*ptr_to_globals).dot, c1 as libc::c_char, 2i32);
                dot_left();
              }
              end_cmd_q();
              current_block = 15129665204879337069;
            }
            877115918601926659 => {
              dir = FORWARD as libc::c_int;
              if c == 'b' as i32 {
                dir = BACK as libc::c_int
              }
              while !((*ptr_to_globals).dot.offset(dir as isize) < (*ptr_to_globals).text
                || (*ptr_to_globals).dot.offset(dir as isize) > (*ptr_to_globals).end.offset(-1))
              {
                (*ptr_to_globals).dot = (*ptr_to_globals).dot.offset(dir as isize);
                if ({
                  let mut bb__isspace: libc::c_uchar =
                    (*(*ptr_to_globals).dot as libc::c_int - 9i32) as libc::c_uchar;
                  (bb__isspace as libc::c_int == ' ' as i32 - 9i32
                    || bb__isspace as libc::c_int <= 13i32 - 9i32) as libc::c_int
                }) != 0
                {
                  (*ptr_to_globals).dot = skip_thing(
                    (*ptr_to_globals).dot,
                    if c == 'e' as i32 { 2i32 } else { 1i32 },
                    dir,
                    S_OVER_WS as libc::c_int,
                  )
                }
                if bb_ascii_isalnum(*(*ptr_to_globals).dot as libc::c_uchar) != 0
                  || *(*ptr_to_globals).dot as libc::c_int == '_' as i32
                {
                  (*ptr_to_globals).dot =
                    skip_thing((*ptr_to_globals).dot, 1i32, dir, S_END_ALNUM as libc::c_int)
                } else if *strchrnul(
                  b"!\"#$%&\'()*+,-./:;<=>?@[\\]^_`{|}~\x00" as *const u8 as *const libc::c_char,
                  *(*ptr_to_globals).dot as libc::c_int,
                )
                .offset(0)
                  != 0
                {
                  (*ptr_to_globals).dot =
                    skip_thing((*ptr_to_globals).dot, 1i32, dir, S_END_PUNCT as libc::c_int)
                }
                (*ptr_to_globals).cmdcnt -= 1;
                if !((*ptr_to_globals).cmdcnt > 0) {
                  break;
                }
              }
              current_block = 15129665204879337069;
            }
            1085022737867179637 => {
              dot_begin();
              dot_skip_over_ws();
              current_block = 15129665204879337069;
            }
            3113147720494587438 => {
              c1 = get_one_char();
              if c1 != 'Z' as i32 {
                indicate_error();
              } else if (*ptr_to_globals).modified_count != 0 {
                if 1i32 != 0 && (*ptr_to_globals).readonly_mode as libc::c_int != 0 {
                  status_line_bold(
                    b"\'%s\' is read only\x00" as *const u8 as *const libc::c_char,
                    (*ptr_to_globals).current_filename,
                  );
                } else {
                  cnt = file_write(
                    (*ptr_to_globals).current_filename,
                    (*ptr_to_globals).text,
                    (*ptr_to_globals).end.offset(-1),
                  );
                  if cnt < 0 {
                    if cnt == -1i32 {
                      status_line_bold(b"Write error: %m\x00" as *const u8 as *const libc::c_char);
                    }
                  } else if cnt as libc::c_long
                    == (*ptr_to_globals)
                      .end
                      .offset(-1)
                      .wrapping_offset_from((*ptr_to_globals).text)
                      as libc::c_long
                      + 1
                  {
                    (*ptr_to_globals).editing = 0 as smallint
                  }
                }
              } else {
                (*ptr_to_globals).editing = 0 as smallint
              }
              current_block = 15129665204879337069;
            }
            12960118908218882441 => {
              p = begin_line((*ptr_to_globals).dot);
              if *p.offset(-1i32 as isize) as libc::c_int == '\n' as i32 {
                dot_prev();
                current_block = 2087484904894455135;
              } else {
                dot_begin();
                (*ptr_to_globals).dot =
                  char_insert((*ptr_to_globals).dot, '\n' as i32 as libc::c_char, 1i32);
                dot_prev();
                current_block = 8629930936610358348;
              }
            }
            8720450212473544924 => {
              (*ptr_to_globals).dot = (*ptr_to_globals).screenbegin;
              cnt = 0;
              while (cnt as libc::c_uint)
                < (*ptr_to_globals)
                  .rows
                  .wrapping_sub(1i32 as libc::c_uint)
                  .wrapping_div(2i32 as libc::c_uint)
              {
                (*ptr_to_globals).dot = next_line((*ptr_to_globals).dot);
                cnt += 1
              }
              current_block = 15129665204879337069;
            }
            13015277209715431090 => {
              (*ptr_to_globals).dot = end_screen();
              if (*ptr_to_globals).cmdcnt as libc::c_uint
                > (*ptr_to_globals).rows.wrapping_sub(1i32 as libc::c_uint)
              {
                (*ptr_to_globals).cmdcnt =
                  (*ptr_to_globals).rows.wrapping_sub(1i32 as libc::c_uint) as libc::c_int
              }
              (*ptr_to_globals).cmdcnt -= 1;
              if (*ptr_to_globals).cmdcnt > 0 {
                do_cmd('-' as i32);
              }
              dot_begin();
              dot_skip_over_ws();
              current_block = 15129665204879337069;
            }
            9800435767766781385 => {
              loop {
                dot_end();
                if (*ptr_to_globals).dot < (*ptr_to_globals).end.offset(-1) {
                  undo_push(
                    (*ptr_to_globals).dot,
                    1i32 as libc::c_uint,
                    1i32 as libc::c_uchar,
                  );
                  let fresh15 = (*ptr_to_globals).dot;
                  (*ptr_to_globals).dot = (*ptr_to_globals).dot.offset(1);
                  *fresh15 = ' ' as i32 as libc::c_char;
                  undo_push(
                    (*ptr_to_globals).dot.offset(-1),
                    1i32 as libc::c_uint,
                    2i32 as libc::c_uchar,
                  );
                  while ({
                    let mut bb__isblank: libc::c_uchar = *(*ptr_to_globals).dot as libc::c_uchar;
                    (bb__isblank as libc::c_int == ' ' as i32
                      || bb__isblank as libc::c_int == '\t' as i32)
                      as libc::c_int
                  }) != 0
                  {
                    text_hole_delete((*ptr_to_globals).dot, (*ptr_to_globals).dot, 2i32);
                  }
                }
                (*ptr_to_globals).cmdcnt -= 1;
                if !((*ptr_to_globals).cmdcnt > 0) {
                  break;
                }
              }
              end_cmd_q();
              current_block = 15129665204879337069;
            }
            3432363526595694666 => {
              dot_begin();
              dot_skip_over_ws();
              current_block = 3268579060917229304;
            }
            3494829253343353619 => {
              (*ptr_to_globals).dot = (*ptr_to_globals).screenbegin;
              if (*ptr_to_globals).cmdcnt as libc::c_uint
                > (*ptr_to_globals).rows.wrapping_sub(1i32 as libc::c_uint)
              {
                (*ptr_to_globals).cmdcnt =
                  (*ptr_to_globals).rows.wrapping_sub(1i32 as libc::c_uint) as libc::c_int
              }
              (*ptr_to_globals).cmdcnt -= 1;
              if (*ptr_to_globals).cmdcnt > 0 {
                do_cmd('+' as i32);
              }
              dot_skip_over_ws();
              current_block = 15129665204879337069;
            }
            17973101765331640574 => {
              c1 = get_one_char();
              if c1 != 'g' as i32 {
                buf[0] = 'g' as i32 as libc::c_char;
                buf[1] = if c1 >= 0 { c1 } else { '*' as i32 } as libc::c_char;
                buf[2] = '\u{0}' as i32 as libc::c_char;
                not_implemented(buf.as_mut_ptr());
                current_block = 15129665204879337069;
              } else {
                if (*ptr_to_globals).cmdcnt == 0 {
                  (*ptr_to_globals).cmdcnt = 1i32
                }
                current_block = 11945623545738147997;
              }
            }
            16546625800574160972 => {
              save_dot = (*ptr_to_globals).dot;
              (*ptr_to_globals).dot = dollar_line((*ptr_to_globals).dot);
              (*ptr_to_globals).dot = yank_delete(
                save_dot,
                (*ptr_to_globals).dot,
                0,
                YANKDEL as libc::c_int,
                1i32,
              );
              if c == 'C' as i32 {
                current_block = 8629930936610358348;
              } else {
                if c == 'D' as i32 {
                  end_cmd_q();
                }
                current_block = 15129665204879337069;
              }
            }
            11937696639986586685 => {
              cnt = count_lines((*ptr_to_globals).text, (*ptr_to_globals).dot);
              c1 = get_one_char();
              find_range(&mut p, &mut q, c1 as libc::c_char);
              yank_delete(p, q, 1i32, YANKONLY as libc::c_int, 0);
              p = begin_line(p);
              q = end_line(q);
              i = count_lines(p, q);
              while i > 0 {
                if c == '<' as i32 {
                  if *p as libc::c_int == '\t' as i32 {
                    text_hole_delete(p, p, 0);
                  } else if *p as libc::c_int == ' ' as i32 {
                    j = 0;
                    while *p as libc::c_int == ' ' as i32 && j < (*ptr_to_globals).tabstop {
                      text_hole_delete(p, p, 0);
                      j += 1
                    }
                  }
                } else if c == '>' as i32 {
                  char_insert(p, '\t' as i32 as libc::c_char, 1i32);
                }
                i -= 1;
                p = next_line(p)
              }
              (*ptr_to_globals).dot = find_line(cnt);
              dot_skip_over_ws();
              end_cmd_q();
              current_block = 15129665204879337069;
            }
            17725350714912028156 => {
              p = get_input_line(b":\x00" as *const u8 as *const libc::c_char);
              colon(p);
              current_block = 15129665204879337069;
            }
            14526470074083880812 => {
              q = char_search(
                (*ptr_to_globals).dot,
                b"\n\n\x00" as *const u8 as *const libc::c_char,
                (FORWARD as libc::c_int) << 1i32 | FULL as libc::c_int,
              );
              if !q.is_null() {
                (*ptr_to_globals).dot = next_line(q)
              }
              current_block = 15129665204879337069;
            }
            8893187391306414141 => {
              q = char_search(
                (*ptr_to_globals).dot,
                b"\n\n\x00" as *const u8 as *const libc::c_char,
                ((BACK as libc::c_int as libc::c_uint) << 1i32
                  | FULL as libc::c_int as libc::c_uint) as libc::c_int,
              );
              if !q.is_null() {
                (*ptr_to_globals).dot = next_line(q)
              }
              current_block = 15129665204879337069;
            }
            7021673758293221412 => {
              dir = BACK as libc::c_int;
              p = (*ptr_to_globals).dot.offset(-1);
              if *(*ptr_to_globals).last_search_pattern.offset(0) as libc::c_int == '?' as i32 {
                dir = FORWARD as libc::c_int;
                p = (*ptr_to_globals).dot.offset(1)
              }
              current_block = 4166979493554389389;
            }
            18374191879090272823 => {
              buf[0] = c as libc::c_char;
              buf[1] = '\u{0}' as i32 as libc::c_char;
              q = get_input_line(buf.as_mut_ptr());
              if *q.offset(0) as libc::c_int != 0 && *q.offset(1) == 0 {
                if *(*ptr_to_globals).last_search_pattern.offset(0) != 0 {
                  *(*ptr_to_globals).last_search_pattern.offset(0) = c as libc::c_char
                }
                current_block = 7392824444931029276;
              } else if *q.offset(0) != 0 {
                free((*ptr_to_globals).last_search_pattern as *mut libc::c_void);
                (*ptr_to_globals).last_search_pattern = crate::libbb::xfuncs_printf::xstrdup(q);
                current_block = 7392824444931029276;
              } else {
                current_block = 15129665204879337069;
              }
            }
            16407828456666301883 => {
              if (*ptr_to_globals).last_forward_char == 0 {
                current_block = 15129665204879337069;
              } else {
                loop {
                  q = (*ptr_to_globals).dot.offset(-1);
                  while q >= (*ptr_to_globals).text
                    && *q as libc::c_int != '\n' as i32
                    && *q as libc::c_int != (*ptr_to_globals).last_forward_char
                  {
                    q = q.offset(-1)
                  }
                  if q >= (*ptr_to_globals).text
                    && *q as libc::c_int == (*ptr_to_globals).last_forward_char
                  {
                    (*ptr_to_globals).dot = q
                  }
                  (*ptr_to_globals).cmdcnt -= 1;
                  if !((*ptr_to_globals).cmdcnt > 0) {
                    break;
                  }
                }
                current_block = 15129665204879337069;
              }
            }
            9018432604062702004 => {
              q = (*ptr_to_globals).dot;
              while q < (*ptr_to_globals).end && *q as libc::c_int != '\n' as i32 {
                if !strchr(
                  b"()[]{}\x00" as *const u8 as *const libc::c_char,
                  *q as libc::c_int,
                )
                .is_null()
                {
                  p = find_pair(q, *q);
                  if p.is_null() {
                    indicate_error();
                  } else {
                    (*ptr_to_globals).dot = p
                  }
                  break;
                } else {
                  q = q.offset(1)
                }
              }
              if *q as libc::c_int == '\n' as i32 {
                indicate_error();
              }
              current_block = 15129665204879337069;
            }
            10247103787464459848 => {
              p = (*ptr_to_globals).reg[(*ptr_to_globals).YDreg as usize];
              if p.is_null() {
                status_line_bold(
                  b"Nothing in register %c\x00" as *const u8 as *const libc::c_char,
                  what_reg() as libc::c_int,
                );
              } else {
                if !strchr(p, '\n' as i32).is_null() {
                  if c == 'P' as i32 {
                    dot_begin();
                  }
                  if c == 'p' as i32 {
                    if end_line((*ptr_to_globals).dot) == (*ptr_to_globals).end.offset(-1) {
                      (*ptr_to_globals).dot = (*ptr_to_globals).end
                    } else {
                      dot_next();
                    }
                  }
                } else if c == 'p' as i32 {
                  dot_right();
                }
                string_insert((*ptr_to_globals).dot, p, 1i32);
                end_cmd_q();
              }
              current_block = 15129665204879337069;
            }
            15260732871948875843 => {
              c1 = (get_one_char() | 0x20i32) - 'a' as i32;
              if c1 as libc::c_uint <= 25i32 as libc::c_uint {
                (*ptr_to_globals).mark[c1 as usize] = (*ptr_to_globals).dot
              } else {
                indicate_error();
              }
              current_block = 15129665204879337069;
            }
            12738322036487086035 => {
              c1 = get_one_char() | 0x20i32;
              if (c1 - 'a' as i32) as libc::c_uint <= 25i32 as libc::c_uint {
                c1 = c1 - 'a' as i32;
                q = (*ptr_to_globals).mark[c1 as usize];
                if (*ptr_to_globals).text <= q && q < (*ptr_to_globals).end {
                  (*ptr_to_globals).dot = q;
                  dot_begin();
                  dot_skip_over_ws();
                }
              } else if c1 == '\'' as i32 {
                (*ptr_to_globals).dot = swap_context((*ptr_to_globals).dot);
                dot_begin();
                dot_skip_over_ws();
              } else {
                indicate_error();
              }
              current_block = 15129665204879337069;
            }
            13255096073384561358 => {
              c1 = (get_one_char() | 0x20i32) - 'a' as i32;
              if c1 as libc::c_uint <= 25i32 as libc::c_uint {
                (*ptr_to_globals).YDreg = c1 as smalluint
              } else {
                indicate_error();
              }
              current_block = 15129665204879337069;
            }
            10258711639984089377 => {
              if (*ptr_to_globals).cmd_mode as libc::c_int == 0 {
                indicate_error();
              }
              (*ptr_to_globals).cmd_mode = 0 as smallint;
              undo_queue_commit();
              end_cmd_q();
              (*ptr_to_globals).last_status_cksum = 0;
              current_block = 15129665204879337069;
            }
            11439127087547047736 => {
              buf[0] = c as libc::c_char;
              buf[1] = '\u{0}' as i32 as libc::c_char;
              not_implemented(buf.as_mut_ptr());
              end_cmd_q();
              current_block = 17440971994642376514;
            }
            7961798899781870241 => {
              dot_scroll(
                (*ptr_to_globals).rows.wrapping_sub(2i32 as libc::c_uint) as libc::c_int,
                -1i32,
              );
              current_block = 15129665204879337069;
            }
            9426343755402444879 => {
              dot_scroll(
                (*ptr_to_globals)
                  .rows
                  .wrapping_sub(2i32 as libc::c_uint)
                  .wrapping_div(2i32 as libc::c_uint) as libc::c_int,
                1i32,
              );
              current_block = 15129665204879337069;
            }
            13352459794680105913 => {
              dot_scroll(1i32, 1i32);
              current_block = 15129665204879337069;
            }
            14142272253464333006 => {
              dot_scroll(
                (*ptr_to_globals).rows.wrapping_sub(2i32 as libc::c_uint) as libc::c_int,
                1i32,
              );
              current_block = 15129665204879337069;
            }
            10758177197742640066 => {
              (*ptr_to_globals).last_status_cksum = 0;
              current_block = 15129665204879337069;
            }
            6152256259730122749 => {
              current_block = 7534742345255184552;
            }
            12883932598258173301 => {
              current_block = 8800996768013373992;
            }
            11242998110520238401 => {
              redraw(1i32);
              current_block = 15129665204879337069;
            }
            13619733043935729992 => {
              loop {
                dot_next();
                dot_skip_over_ws();
                (*ptr_to_globals).cmdcnt -= 1;
                if !((*ptr_to_globals).cmdcnt > 0) {
                  break;
                }
              }
              current_block = 15129665204879337069;
            }
            9339065157412720613 => {
              dot_scroll(
                (*ptr_to_globals)
                  .rows
                  .wrapping_sub(2i32 as libc::c_uint)
                  .wrapping_div(2i32 as libc::c_uint) as libc::c_int,
                -1i32,
              );
              current_block = 15129665204879337069;
            }
            11447082683497798022 => {
              dot_scroll(1i32, -1i32);
              current_block = 15129665204879337069;
            }
            5182000506326660482 => {
              current_block = 13993698454868426881;
            }
            1105010766850597332 => {
              if !(*ptr_to_globals).reg[27].is_null() {
                p = begin_line((*ptr_to_globals).dot);
                q = end_line((*ptr_to_globals).dot);
                p = text_hole_delete(p, q, 1i32);
                p = p.offset(string_insert(p, (*ptr_to_globals).reg[27], 2i32) as isize);
                (*ptr_to_globals).dot = p;
                dot_skip_over_ws();
              }
              current_block = 15129665204879337069;
            }
            8616046655533110204 => {
              undo_pop();
              current_block = 15129665204879337069;
            }
            5127767458142431603 => {
              loop {
                (*ptr_to_globals).dot = end_line((*ptr_to_globals).dot);
                (*ptr_to_globals).cmdcnt -= 1;
                if (*ptr_to_globals).cmdcnt <= 0 {
                  break;
                }
                dot_next();
              }
              current_block = 15129665204879337069;
            }
            222014967776118151 => {
              (*ptr_to_globals).last_forward_char = get_one_char();
              current_block = 7856905509180742666;
            }
            11209792479411604110 => {
              loop {
                dot_prev();
                dot_skip_over_ws();
                (*ptr_to_globals).cmdcnt -= 1;
                if !((*ptr_to_globals).cmdcnt > 0) {
                  break;
                }
              }
              current_block = 15129665204879337069;
            }
            3364823792826654116 => {
              if (*ptr_to_globals).lmc_len != 0 {
                (*ptr_to_globals).ioq_start = crate::libbb::xfuncs_printf::xstrndup(
                  (*ptr_to_globals).last_modifying_cmd.as_mut_ptr(),
                  (*ptr_to_globals).lmc_len,
                );
                (*ptr_to_globals).ioq = (*ptr_to_globals).ioq_start
              }
              current_block = 15129665204879337069;
            }
            18096603330221575131 => {
              current_block = 17498168302144015873;
            }
            16891123271837848903 => {
              dot_end();
              current_block = 1752638907092016026;
            }
            8517235759107662071 => {
              current_block = 5847749760081351726;
            }
            12525254419223051704 => {
              if (*ptr_to_globals).dot < (*ptr_to_globals).end.offset(-1) {
                (*ptr_to_globals).dot = yank_delete(
                  (*ptr_to_globals).dot,
                  (*ptr_to_globals).dot,
                  1i32,
                  YANKDEL as libc::c_int,
                  1i32,
                )
              }
              current_block = 15129665204879337069;
            }
            15232911949322867522 => {
              current_block = 17251831742223396249;
            }
            10863374208794025069 => {
              current_block = 1895262434596074581;
            }
            451126677064669119 => {
              loop {
                dot_prev();
                (*ptr_to_globals).dot = move_to_col(
                  (*ptr_to_globals).dot,
                  (*ptr_to_globals).ccol + (*ptr_to_globals).offset,
                );
                (*ptr_to_globals).cmdcnt -= 1;
                if !((*ptr_to_globals).cmdcnt > 0) {
                  break;
                }
              }
              current_block = 15129665204879337069;
            }
            4611735929166613116 => {
              loop {
                if bb_ascii_isalnum(*(*ptr_to_globals).dot as libc::c_uchar) != 0
                  || *(*ptr_to_globals).dot as libc::c_int == '_' as i32
                {
                  (*ptr_to_globals).dot = skip_thing(
                    (*ptr_to_globals).dot,
                    1i32,
                    FORWARD as libc::c_int,
                    S_END_ALNUM as libc::c_int,
                  )
                } else if *strchrnul(
                  b"!\"#$%&\'()*+,-./:;<=>?@[\\]^_`{|}~\x00" as *const u8 as *const libc::c_char,
                  *(*ptr_to_globals).dot as libc::c_int,
                )
                .offset(0)
                  != 0
                {
                  (*ptr_to_globals).dot = skip_thing(
                    (*ptr_to_globals).dot,
                    1i32,
                    FORWARD as libc::c_int,
                    S_END_PUNCT as libc::c_int,
                  )
                }
                if (*ptr_to_globals).dot < (*ptr_to_globals).end.offset(-1) {
                  (*ptr_to_globals).dot = (*ptr_to_globals).dot.offset(1)
                }
                if ({
                  let mut bb__isspace: libc::c_uchar =
                    (*(*ptr_to_globals).dot as libc::c_int - 9i32) as libc::c_uchar;
                  (bb__isspace as libc::c_int == ' ' as i32 - 9i32
                    || bb__isspace as libc::c_int <= 13i32 - 9i32) as libc::c_int
                }) != 0
                {
                  (*ptr_to_globals).dot = skip_thing(
                    (*ptr_to_globals).dot,
                    2i32,
                    FORWARD as libc::c_int,
                    S_OVER_WS as libc::c_int,
                  )
                }
                (*ptr_to_globals).cmdcnt -= 1;
                if !((*ptr_to_globals).cmdcnt > 0) {
                  break;
                }
              }
              current_block = 15129665204879337069;
            }
            4386451087681909888 => {
              (*ptr_to_globals).dot =
                move_to_col((*ptr_to_globals).dot, (*ptr_to_globals).cmdcnt - 1i32);
              current_block = 15129665204879337069;
            }
            1296397779060594135 => {
              dot_begin();
              current_block = 15129665204879337069;
            }
            _ => {}
          }
          match current_block {
            15129665204879337069 => {}
            8629930936610358348 => {}
            _ => {
              match current_block {
                17251831742223396249 => {
                  dir = 0;
                  if c == 'X' as i32 {
                    dir = -1i32
                  }
                  loop {
                    if *(*ptr_to_globals).dot.offset(dir as isize) as libc::c_int != '\n' as i32 {
                      if c == 'X' as i32 {
                        (*ptr_to_globals).dot = (*ptr_to_globals).dot.offset(-1)
                      }
                      (*ptr_to_globals).dot = yank_delete(
                        (*ptr_to_globals).dot,
                        (*ptr_to_globals).dot,
                        0,
                        YANKDEL as libc::c_int,
                        1i32,
                      )
                    }
                    (*ptr_to_globals).cmdcnt -= 1;
                    if !((*ptr_to_globals).cmdcnt > 0) {
                      break;
                    }
                  }
                  end_cmd_q();
                  if c == 's' as i32 {
                    current_block = 8629930936610358348;
                  } else {
                    current_block = 15129665204879337069;
                  }
                }
                2087484904894455135 => {
                  dot_end();
                  (*ptr_to_globals).dot =
                    char_insert((*ptr_to_globals).dot, '\n' as i32 as libc::c_char, 1i32);
                  current_block = 8629930936610358348;
                }
                11945623545738147997 => {
                  (*ptr_to_globals).dot = (*ptr_to_globals).end.offset(-1);
                  if (*ptr_to_globals).cmdcnt > 0 {
                    (*ptr_to_globals).dot = find_line((*ptr_to_globals).cmdcnt)
                  }
                  dot_skip_over_ws();
                  current_block = 15129665204879337069;
                }
                5847749760081351726 => {
                  dir = FORWARD as libc::c_int;
                  if c == 'B' as i32 {
                    dir = BACK as libc::c_int
                  }
                  loop {
                    if c == 'W' as i32
                      || ({
                        let mut bb__isspace: libc::c_uchar =
                          (*(*ptr_to_globals).dot.offset(dir as isize) as libc::c_int - 9i32)
                            as libc::c_uchar;
                        (bb__isspace as libc::c_int == ' ' as i32 - 9i32
                          || bb__isspace as libc::c_int <= 13i32 - 9i32)
                          as libc::c_int
                      }) != 0
                    {
                      (*ptr_to_globals).dot =
                        skip_thing((*ptr_to_globals).dot, 1i32, dir, S_TO_WS as libc::c_int);
                      (*ptr_to_globals).dot =
                        skip_thing((*ptr_to_globals).dot, 2i32, dir, S_OVER_WS as libc::c_int)
                    }
                    if c != 'W' as i32 {
                      (*ptr_to_globals).dot =
                        skip_thing((*ptr_to_globals).dot, 1i32, dir, S_BEFORE_WS as libc::c_int)
                    }
                    (*ptr_to_globals).cmdcnt -= 1;
                    if !((*ptr_to_globals).cmdcnt > 0) {
                      break;
                    }
                  }
                  current_block = 15129665204879337069;
                }
                17440971994642376514 => {
                  current_block = 15129665204879337069;
                }
                7534742345255184552 => {
                  current_block = 17247297260531395789;
                }
                8800996768013373992 => {
                  loop {
                    dot_next();
                    (*ptr_to_globals).dot = move_to_col(
                      (*ptr_to_globals).dot,
                      (*ptr_to_globals).ccol + (*ptr_to_globals).offset,
                    );
                    (*ptr_to_globals).cmdcnt -= 1;
                    if !((*ptr_to_globals).cmdcnt > 0) {
                      break;
                    }
                  }
                  current_block = 15129665204879337069;
                }
                13993698454868426881 => {
                  loop {
                    dot_right();
                    (*ptr_to_globals).cmdcnt -= 1;
                    if !((*ptr_to_globals).cmdcnt > 0) {
                      break;
                    }
                  }
                  current_block = 15129665204879337069;
                }
                7856905509180742666 => {
                  while !((*ptr_to_globals).last_forward_char == 0) {
                    q = (*ptr_to_globals).dot.offset(1);
                    while q < (*ptr_to_globals).end.offset(-1)
                      && *q as libc::c_int != '\n' as i32
                      && *q as libc::c_int != (*ptr_to_globals).last_forward_char
                    {
                      q = q.offset(1)
                    }
                    if *q as libc::c_int == (*ptr_to_globals).last_forward_char {
                      (*ptr_to_globals).dot = q
                    }
                    (*ptr_to_globals).cmdcnt -= 1;
                    if !((*ptr_to_globals).cmdcnt > 0) {
                      break;
                    }
                  }
                  current_block = 15129665204879337069;
                }
                17498168302144015873 => {
                  current_block = 8681395796513813967;
                }
                1752638907092016026 => {
                  if *(*ptr_to_globals).dot as libc::c_int != '\n' as i32 {
                    (*ptr_to_globals).dot = (*ptr_to_globals).dot.offset(1)
                  }
                  current_block = 8629930936610358348;
                }
                3268579060917229304 => {
                  current_block = 8629930936610358348;
                }
                1895262434596074581 => {
                  current_block = 8908416993177701018;
                }
                _ => {}
              }
              match current_block {
                8629930936610358348 => {}
                15129665204879337069 => {}
                _ => {
                  match current_block {
                    17247297260531395789 => {
                      loop {
                        dot_left();
                        (*ptr_to_globals).cmdcnt -= 1;
                        if !((*ptr_to_globals).cmdcnt > 0) {
                          break;
                        }
                      }
                      current_block = 15129665204879337069;
                    }
                    8681395796513813967 => {
                      current_block = 5591548203144509315;
                    }
                    8908416993177701018 => {
                      current_block = 16124761010012532485;
                    }
                    _ => {}
                  }
                  match current_block {
                    15129665204879337069 => {}
                    _ => {
                      match current_block {
                        16124761010012532485 => {
                          let mut yf: libc::c_int = 0;
                          let mut ml: libc::c_int = 0;
                          let mut whole: libc::c_int = 0;
                          yf = YANKDEL as libc::c_int;
                          if c == 'y' as i32 || c == 'Y' as i32 {
                            yf = YANKONLY as libc::c_int
                          }
                          c1 = 'y' as i32;
                          if c != 'Y' as i32 {
                            c1 = get_one_char()
                          }
                          ml = find_range(&mut p, &mut q, c1 as libc::c_char);
                          place_cursor(0i32, 0);
                          if c1 == 27i32 {
                            c1 = 27i32;
                            c = c1
                          } else if !strchr(b"wW\x00" as *const u8 as *const libc::c_char, c1)
                            .is_null()
                          {
                            ml = 0;
                            if c == 'c' as i32 {
                              while ({
                                let mut bb__isspace: libc::c_uchar =
                                  (*q as libc::c_int - 9i32) as libc::c_uchar;
                                (bb__isspace as libc::c_int == ' ' as i32 - 9i32
                                  || bb__isspace as libc::c_int <= 13i32 - 9i32)
                                  as libc::c_int
                              }) != 0
                                && q > p
                              {
                                q = q.offset(-1)
                              }
                            }
                            (*ptr_to_globals).dot = yank_delete(p, q, ml, yf, 1i32)
                          } else if !strchr(
                            b"^0bBeEft%$ lh\x08\x7f\x00" as *const u8 as *const libc::c_char,
                            c1,
                          )
                          .is_null()
                          {
                            (*ptr_to_globals).dot = yank_delete(p, q, ml, yf, 1i32)
                          } else if !strchr(
                            b"cdykjGHL+-{}\r\n\x00" as *const u8 as *const libc::c_char,
                            c1,
                          )
                          .is_null()
                          {
                            (*ptr_to_globals).dot = yank_delete(p, q, ml, yf, 1i32);
                            whole = 1i32
                          } else {
                            c1 = 27i32;
                            c = c1;
                            ml = 0;
                            indicate_error();
                          }
                          if ml != 0 && whole != 0 {
                            if c == 'c' as i32 {
                              (*ptr_to_globals).dot = char_insert(
                                (*ptr_to_globals).dot,
                                '\n' as i32 as libc::c_char,
                                2i32,
                              );
                              if whole != 0
                                && (*ptr_to_globals).dot != (*ptr_to_globals).end.offset(-1)
                              {
                                dot_prev();
                              }
                            } else if c == 'd' as i32 {
                              dot_begin();
                              dot_skip_over_ws();
                            }
                          }
                          if c1 != 27i32 {
                            if c == 'c' as i32 {
                              strcpy(
                                buf.as_mut_ptr(),
                                b"Change\x00" as *const u8 as *const libc::c_char,
                              );
                              current_block = 8629930936610358348;
                            } else {
                              if c == 'd' as i32 {
                                strcpy(
                                  buf.as_mut_ptr(),
                                  b"Delete\x00" as *const u8 as *const libc::c_char,
                                );
                              }
                              if c == 'y' as i32 || c == 'Y' as i32 {
                                strcpy(
                                  buf.as_mut_ptr(),
                                  b"Yank\x00" as *const u8 as *const libc::c_char,
                                );
                              }
                              p = (*ptr_to_globals).reg[(*ptr_to_globals).YDreg as usize];
                              q = p.offset(strlen(p) as isize);
                              cnt = 0;
                              while p <= q {
                                if *p as libc::c_int == '\n' as i32 {
                                  cnt += 1
                                }
                                p = p.offset(1)
                              }
                              status_line(
                                b"%s %u lines (%u chars) using [%c]\x00" as *const u8
                                  as *const libc::c_char,
                                buf.as_mut_ptr(),
                                cnt,
                                strlen((*ptr_to_globals).reg[(*ptr_to_globals).YDreg as usize])
                                  as libc::c_uint,
                                what_reg() as libc::c_int,
                              );
                              end_cmd_q();
                              current_block = 15129665204879337069;
                            }
                          } else {
                            current_block = 15129665204879337069;
                          }
                        }
                        5591548203144509315 => {
                          current_block = 2636677179867529885;
                        }
                        _ => {}
                      }
                      match current_block {
                        15129665204879337069 => {}
                        8629930936610358348 => {}
                        _ => {
                          match current_block {
                            2636677179867529885 => {
                              current_block = 12309206730560524281;
                            }
                            _ => {}
                          }
                          match current_block {
                            12309206730560524281 => {
                              current_block = 3325768110057758661;
                            }
                            _ => {}
                          }
                          match current_block {
                            3325768110057758661 => {
                              current_block = 14815832896553429982;
                            }
                            _ => {}
                          }
                          match current_block {
                            14815832896553429982 => {
                              current_block = 10731695520297161438;
                            }
                            _ => {}
                          }
                          match current_block {
                            10731695520297161438 => {
                              if c == '0' as i32 && (*ptr_to_globals).cmdcnt < 1i32 {
                                dot_begin();
                              } else {
                                (*ptr_to_globals).cmdcnt =
                                  (*ptr_to_globals).cmdcnt * 10i32 + (c - '0' as i32)
                              }
                              current_block = 15129665204879337069;
                            }
                            _ => {}
                          }
                          match current_block {
                            15129665204879337069 => {}
                            _ => {
                              loop {
                                match current_block {
                                  16813369756331276724 => {
                                    msg = std::ptr::null();
                                    current_block = 7392824444931029276;
                                  }
                                  7392824444931029276 => {
                                    dir = FORWARD as libc::c_int;
                                    p = (*ptr_to_globals).dot.offset(1);
                                    if *(*ptr_to_globals).last_search_pattern.offset(0)
                                      as libc::c_int
                                      == '?' as i32
                                    {
                                      dir = BACK as libc::c_int;
                                      p = (*ptr_to_globals).dot.offset(-1)
                                    }
                                    current_block = 4166979493554389389;
                                  }
                                  _ => {
                                    q = char_search(
                                      p,
                                      (*ptr_to_globals).last_search_pattern.offset(1),
                                      dir << 1i32 | FULL as libc::c_int,
                                    );
                                    if !q.is_null() {
                                      (*ptr_to_globals).dot = q;
                                      msg = std::ptr::null()
                                    } else {
                                      p = (*ptr_to_globals).text;
                                      if dir == BACK as libc::c_int {
                                        p = (*ptr_to_globals).end.offset(-1)
                                      }
                                      q = char_search(
                                        p,
                                        (*ptr_to_globals).last_search_pattern.offset(1),
                                        dir << 1i32 | FULL as libc::c_int,
                                      );
                                      if !q.is_null() {
                                        (*ptr_to_globals).dot = q;
                                        msg = b"search hit BOTTOM, continuing at TOP\x00"
                                          as *const u8
                                          as *const libc::c_char;
                                        if dir == BACK as libc::c_int {
                                          msg = b"search hit TOP, continuing at BOTTOM\x00"
                                            as *const u8
                                            as *const libc::c_char
                                        }
                                      } else {
                                        msg = b"Pattern not found\x00" as *const u8
                                          as *const libc::c_char
                                      }
                                    }
                                    if !msg.is_null() {
                                      status_line_bold(
                                        b"%s\x00" as *const u8 as *const libc::c_char,
                                        msg,
                                      );
                                    }
                                    (*ptr_to_globals).cmdcnt -= 1;
                                    if (*ptr_to_globals).cmdcnt > 0 {
                                      current_block = 16813369756331276724;
                                    } else {
                                      break;
                                    }
                                  }
                                }
                              }
                              current_block = 15129665204879337069;
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
        120 | 115 => {
          current_block = 17251831742223396249;
          match current_block {
            16992905640583886232 => {
              loop {
                if (*(*ptr_to_globals).dot as libc::c_int - 'a' as i32) as libc::c_uchar
                  as libc::c_int
                  <= 'z' as i32 - 'a' as i32
                {
                  undo_push(
                    (*ptr_to_globals).dot,
                    1i32 as libc::c_uint,
                    1i32 as libc::c_uchar,
                  );
                  *(*ptr_to_globals).dot =
                    bb_ascii_toupper(*(*ptr_to_globals).dot as libc::c_uchar) as libc::c_char;
                  undo_push(
                    (*ptr_to_globals).dot,
                    1i32 as libc::c_uint,
                    2i32 as libc::c_uchar,
                  );
                } else if (*(*ptr_to_globals).dot as libc::c_int - 'A' as i32) as libc::c_uchar
                  as libc::c_int
                  <= 'Z' as i32 - 'A' as i32
                {
                  undo_push(
                    (*ptr_to_globals).dot,
                    1i32 as libc::c_uint,
                    1i32 as libc::c_uchar,
                  );
                  *(*ptr_to_globals).dot =
                    bb_ascii_tolower(*(*ptr_to_globals).dot as libc::c_uchar) as libc::c_char;
                  undo_push(
                    (*ptr_to_globals).dot,
                    1i32 as libc::c_uint,
                    2i32 as libc::c_uchar,
                  );
                }
                dot_right();
                (*ptr_to_globals).cmdcnt -= 1;
                if !((*ptr_to_globals).cmdcnt > 0) {
                  break;
                }
              }
              end_cmd_q();
              current_block = 15129665204879337069;
            }
            8729655159604064397 => {
              c1 = get_one_char();
              cnt = 0;
              if c1 == '.' as i32 {
                cnt = (*ptr_to_globals)
                  .rows
                  .wrapping_sub(2i32 as libc::c_uint)
                  .wrapping_div(2i32 as libc::c_uint) as libc::c_int
              }
              if c1 == '-' as i32 {
                cnt = (*ptr_to_globals).rows.wrapping_sub(2i32 as libc::c_uint) as libc::c_int
              }
              (*ptr_to_globals).screenbegin = begin_line((*ptr_to_globals).dot);
              dot_scroll(cnt, -1i32);
              current_block = 15129665204879337069;
            }
            15899500648299942075 => {
              (*ptr_to_globals).last_forward_char = get_one_char();
              do_cmd(';' as i32);
              if *(*ptr_to_globals).dot as libc::c_int == (*ptr_to_globals).last_forward_char {
                dot_left();
              }
              (*ptr_to_globals).last_forward_char = 0;
              current_block = 15129665204879337069;
            }
            9051390181078481641 => {
              c1 = get_one_char();
              if *(*ptr_to_globals).dot as libc::c_int != '\n' as i32 {
                (*ptr_to_globals).dot =
                  text_hole_delete((*ptr_to_globals).dot, (*ptr_to_globals).dot, 1i32);
                (*ptr_to_globals).dot =
                  char_insert((*ptr_to_globals).dot, c1 as libc::c_char, 2i32);
                dot_left();
              }
              end_cmd_q();
              current_block = 15129665204879337069;
            }
            877115918601926659 => {
              dir = FORWARD as libc::c_int;
              if c == 'b' as i32 {
                dir = BACK as libc::c_int
              }
              while !((*ptr_to_globals).dot.offset(dir as isize) < (*ptr_to_globals).text
                || (*ptr_to_globals).dot.offset(dir as isize) > (*ptr_to_globals).end.offset(-1))
              {
                (*ptr_to_globals).dot = (*ptr_to_globals).dot.offset(dir as isize);
                if ({
                  let mut bb__isspace: libc::c_uchar =
                    (*(*ptr_to_globals).dot as libc::c_int - 9i32) as libc::c_uchar;
                  (bb__isspace as libc::c_int == ' ' as i32 - 9i32
                    || bb__isspace as libc::c_int <= 13i32 - 9i32) as libc::c_int
                }) != 0
                {
                  (*ptr_to_globals).dot = skip_thing(
                    (*ptr_to_globals).dot,
                    if c == 'e' as i32 { 2i32 } else { 1i32 },
                    dir,
                    S_OVER_WS as libc::c_int,
                  )
                }
                if bb_ascii_isalnum(*(*ptr_to_globals).dot as libc::c_uchar) != 0
                  || *(*ptr_to_globals).dot as libc::c_int == '_' as i32
                {
                  (*ptr_to_globals).dot =
                    skip_thing((*ptr_to_globals).dot, 1i32, dir, S_END_ALNUM as libc::c_int)
                } else if *strchrnul(
                  b"!\"#$%&\'()*+,-./:;<=>?@[\\]^_`{|}~\x00" as *const u8 as *const libc::c_char,
                  *(*ptr_to_globals).dot as libc::c_int,
                )
                .offset(0)
                  != 0
                {
                  (*ptr_to_globals).dot =
                    skip_thing((*ptr_to_globals).dot, 1i32, dir, S_END_PUNCT as libc::c_int)
                }
                (*ptr_to_globals).cmdcnt -= 1;
                if !((*ptr_to_globals).cmdcnt > 0) {
                  break;
                }
              }
              current_block = 15129665204879337069;
            }
            1085022737867179637 => {
              dot_begin();
              dot_skip_over_ws();
              current_block = 15129665204879337069;
            }
            3113147720494587438 => {
              c1 = get_one_char();
              if c1 != 'Z' as i32 {
                indicate_error();
              } else if (*ptr_to_globals).modified_count != 0 {
                if 1i32 != 0 && (*ptr_to_globals).readonly_mode as libc::c_int != 0 {
                  status_line_bold(
                    b"\'%s\' is read only\x00" as *const u8 as *const libc::c_char,
                    (*ptr_to_globals).current_filename,
                  );
                } else {
                  cnt = file_write(
                    (*ptr_to_globals).current_filename,
                    (*ptr_to_globals).text,
                    (*ptr_to_globals).end.offset(-1),
                  );
                  if cnt < 0 {
                    if cnt == -1i32 {
                      status_line_bold(b"Write error: %m\x00" as *const u8 as *const libc::c_char);
                    }
                  } else if cnt as libc::c_long
                    == (*ptr_to_globals)
                      .end
                      .offset(-1)
                      .wrapping_offset_from((*ptr_to_globals).text)
                      as libc::c_long
                      + 1
                  {
                    (*ptr_to_globals).editing = 0 as smallint
                  }
                }
              } else {
                (*ptr_to_globals).editing = 0 as smallint
              }
              current_block = 15129665204879337069;
            }
            12960118908218882441 => {
              p = begin_line((*ptr_to_globals).dot);
              if *p.offset(-1i32 as isize) as libc::c_int == '\n' as i32 {
                dot_prev();
                current_block = 2087484904894455135;
              } else {
                dot_begin();
                (*ptr_to_globals).dot =
                  char_insert((*ptr_to_globals).dot, '\n' as i32 as libc::c_char, 1i32);
                dot_prev();
                current_block = 8629930936610358348;
              }
            }
            8720450212473544924 => {
              (*ptr_to_globals).dot = (*ptr_to_globals).screenbegin;
              cnt = 0;
              while (cnt as libc::c_uint)
                < (*ptr_to_globals)
                  .rows
                  .wrapping_sub(1i32 as libc::c_uint)
                  .wrapping_div(2i32 as libc::c_uint)
              {
                (*ptr_to_globals).dot = next_line((*ptr_to_globals).dot);
                cnt += 1
              }
              current_block = 15129665204879337069;
            }
            13015277209715431090 => {
              (*ptr_to_globals).dot = end_screen();
              if (*ptr_to_globals).cmdcnt as libc::c_uint
                > (*ptr_to_globals).rows.wrapping_sub(1i32 as libc::c_uint)
              {
                (*ptr_to_globals).cmdcnt =
                  (*ptr_to_globals).rows.wrapping_sub(1i32 as libc::c_uint) as libc::c_int
              }
              (*ptr_to_globals).cmdcnt -= 1;
              if (*ptr_to_globals).cmdcnt > 0 {
                do_cmd('-' as i32);
              }
              dot_begin();
              dot_skip_over_ws();
              current_block = 15129665204879337069;
            }
            9800435767766781385 => {
              loop {
                dot_end();
                if (*ptr_to_globals).dot < (*ptr_to_globals).end.offset(-1) {
                  undo_push(
                    (*ptr_to_globals).dot,
                    1i32 as libc::c_uint,
                    1i32 as libc::c_uchar,
                  );
                  let fresh15 = (*ptr_to_globals).dot;
                  (*ptr_to_globals).dot = (*ptr_to_globals).dot.offset(1);
                  *fresh15 = ' ' as i32 as libc::c_char;
                  undo_push(
                    (*ptr_to_globals).dot.offset(-1),
                    1i32 as libc::c_uint,
                    2i32 as libc::c_uchar,
                  );
                  while ({
                    let mut bb__isblank: libc::c_uchar = *(*ptr_to_globals).dot as libc::c_uchar;
                    (bb__isblank as libc::c_int == ' ' as i32
                      || bb__isblank as libc::c_int == '\t' as i32)
                      as libc::c_int
                  }) != 0
                  {
                    text_hole_delete((*ptr_to_globals).dot, (*ptr_to_globals).dot, 2i32);
                  }
                }
                (*ptr_to_globals).cmdcnt -= 1;
                if !((*ptr_to_globals).cmdcnt > 0) {
                  break;
                }
              }
              end_cmd_q();
              current_block = 15129665204879337069;
            }
            3432363526595694666 => {
              dot_begin();
              dot_skip_over_ws();
              current_block = 3268579060917229304;
            }
            3494829253343353619 => {
              (*ptr_to_globals).dot = (*ptr_to_globals).screenbegin;
              if (*ptr_to_globals).cmdcnt as libc::c_uint
                > (*ptr_to_globals).rows.wrapping_sub(1i32 as libc::c_uint)
              {
                (*ptr_to_globals).cmdcnt =
                  (*ptr_to_globals).rows.wrapping_sub(1i32 as libc::c_uint) as libc::c_int
              }
              (*ptr_to_globals).cmdcnt -= 1;
              if (*ptr_to_globals).cmdcnt > 0 {
                do_cmd('+' as i32);
              }
              dot_skip_over_ws();
              current_block = 15129665204879337069;
            }
            17973101765331640574 => {
              c1 = get_one_char();
              if c1 != 'g' as i32 {
                buf[0] = 'g' as i32 as libc::c_char;
                buf[1] = if c1 >= 0 { c1 } else { '*' as i32 } as libc::c_char;
                buf[2] = '\u{0}' as i32 as libc::c_char;
                not_implemented(buf.as_mut_ptr());
                current_block = 15129665204879337069;
              } else {
                if (*ptr_to_globals).cmdcnt == 0 {
                  (*ptr_to_globals).cmdcnt = 1i32
                }
                current_block = 11945623545738147997;
              }
            }
            16546625800574160972 => {
              save_dot = (*ptr_to_globals).dot;
              (*ptr_to_globals).dot = dollar_line((*ptr_to_globals).dot);
              (*ptr_to_globals).dot = yank_delete(
                save_dot,
                (*ptr_to_globals).dot,
                0,
                YANKDEL as libc::c_int,
                1i32,
              );
              if c == 'C' as i32 {
                current_block = 8629930936610358348;
              } else {
                if c == 'D' as i32 {
                  end_cmd_q();
                }
                current_block = 15129665204879337069;
              }
            }
            11937696639986586685 => {
              cnt = count_lines((*ptr_to_globals).text, (*ptr_to_globals).dot);
              c1 = get_one_char();
              find_range(&mut p, &mut q, c1 as libc::c_char);
              yank_delete(p, q, 1i32, YANKONLY as libc::c_int, 0);
              p = begin_line(p);
              q = end_line(q);
              i = count_lines(p, q);
              while i > 0 {
                if c == '<' as i32 {
                  if *p as libc::c_int == '\t' as i32 {
                    text_hole_delete(p, p, 0);
                  } else if *p as libc::c_int == ' ' as i32 {
                    j = 0;
                    while *p as libc::c_int == ' ' as i32 && j < (*ptr_to_globals).tabstop {
                      text_hole_delete(p, p, 0);
                      j += 1
                    }
                  }
                } else if c == '>' as i32 {
                  char_insert(p, '\t' as i32 as libc::c_char, 1i32);
                }
                i -= 1;
                p = next_line(p)
              }
              (*ptr_to_globals).dot = find_line(cnt);
              dot_skip_over_ws();
              end_cmd_q();
              current_block = 15129665204879337069;
            }
            17725350714912028156 => {
              p = get_input_line(b":\x00" as *const u8 as *const libc::c_char);
              colon(p);
              current_block = 15129665204879337069;
            }
            14526470074083880812 => {
              q = char_search(
                (*ptr_to_globals).dot,
                b"\n\n\x00" as *const u8 as *const libc::c_char,
                (FORWARD as libc::c_int) << 1i32 | FULL as libc::c_int,
              );
              if !q.is_null() {
                (*ptr_to_globals).dot = next_line(q)
              }
              current_block = 15129665204879337069;
            }
            8893187391306414141 => {
              q = char_search(
                (*ptr_to_globals).dot,
                b"\n\n\x00" as *const u8 as *const libc::c_char,
                ((BACK as libc::c_int as libc::c_uint) << 1i32
                  | FULL as libc::c_int as libc::c_uint) as libc::c_int,
              );
              if !q.is_null() {
                (*ptr_to_globals).dot = next_line(q)
              }
              current_block = 15129665204879337069;
            }
            7021673758293221412 => {
              dir = BACK as libc::c_int;
              p = (*ptr_to_globals).dot.offset(-1);
              if *(*ptr_to_globals).last_search_pattern.offset(0) as libc::c_int == '?' as i32 {
                dir = FORWARD as libc::c_int;
                p = (*ptr_to_globals).dot.offset(1)
              }
              current_block = 4166979493554389389;
            }
            18374191879090272823 => {
              buf[0] = c as libc::c_char;
              buf[1] = '\u{0}' as i32 as libc::c_char;
              q = get_input_line(buf.as_mut_ptr());
              if *q.offset(0) as libc::c_int != 0 && *q.offset(1) == 0 {
                if *(*ptr_to_globals).last_search_pattern.offset(0) != 0 {
                  *(*ptr_to_globals).last_search_pattern.offset(0) = c as libc::c_char
                }
                current_block = 7392824444931029276;
              } else if *q.offset(0) != 0 {
                free((*ptr_to_globals).last_search_pattern as *mut libc::c_void);
                (*ptr_to_globals).last_search_pattern = crate::libbb::xfuncs_printf::xstrdup(q);
                current_block = 7392824444931029276;
              } else {
                current_block = 15129665204879337069;
              }
            }
            16407828456666301883 => {
              if (*ptr_to_globals).last_forward_char == 0 {
                current_block = 15129665204879337069;
              } else {
                loop {
                  q = (*ptr_to_globals).dot.offset(-1);
                  while q >= (*ptr_to_globals).text
                    && *q as libc::c_int != '\n' as i32
                    && *q as libc::c_int != (*ptr_to_globals).last_forward_char
                  {
                    q = q.offset(-1)
                  }
                  if q >= (*ptr_to_globals).text
                    && *q as libc::c_int == (*ptr_to_globals).last_forward_char
                  {
                    (*ptr_to_globals).dot = q
                  }
                  (*ptr_to_globals).cmdcnt -= 1;
                  if !((*ptr_to_globals).cmdcnt > 0) {
                    break;
                  }
                }
                current_block = 15129665204879337069;
              }
            }
            9018432604062702004 => {
              q = (*ptr_to_globals).dot;
              while q < (*ptr_to_globals).end && *q as libc::c_int != '\n' as i32 {
                if !strchr(
                  b"()[]{}\x00" as *const u8 as *const libc::c_char,
                  *q as libc::c_int,
                )
                .is_null()
                {
                  p = find_pair(q, *q);
                  if p.is_null() {
                    indicate_error();
                  } else {
                    (*ptr_to_globals).dot = p
                  }
                  break;
                } else {
                  q = q.offset(1)
                }
              }
              if *q as libc::c_int == '\n' as i32 {
                indicate_error();
              }
              current_block = 15129665204879337069;
            }
            10247103787464459848 => {
              p = (*ptr_to_globals).reg[(*ptr_to_globals).YDreg as usize];
              if p.is_null() {
                status_line_bold(
                  b"Nothing in register %c\x00" as *const u8 as *const libc::c_char,
                  what_reg() as libc::c_int,
                );
              } else {
                if !strchr(p, '\n' as i32).is_null() {
                  if c == 'P' as i32 {
                    dot_begin();
                  }
                  if c == 'p' as i32 {
                    if end_line((*ptr_to_globals).dot) == (*ptr_to_globals).end.offset(-1) {
                      (*ptr_to_globals).dot = (*ptr_to_globals).end
                    } else {
                      dot_next();
                    }
                  }
                } else if c == 'p' as i32 {
                  dot_right();
                }
                string_insert((*ptr_to_globals).dot, p, 1i32);
                end_cmd_q();
              }
              current_block = 15129665204879337069;
            }
            15260732871948875843 => {
              c1 = (get_one_char() | 0x20i32) - 'a' as i32;
              if c1 as libc::c_uint <= 25i32 as libc::c_uint {
                (*ptr_to_globals).mark[c1 as usize] = (*ptr_to_globals).dot
              } else {
                indicate_error();
              }
              current_block = 15129665204879337069;
            }
            12738322036487086035 => {
              c1 = get_one_char() | 0x20i32;
              if (c1 - 'a' as i32) as libc::c_uint <= 25i32 as libc::c_uint {
                c1 = c1 - 'a' as i32;
                q = (*ptr_to_globals).mark[c1 as usize];
                if (*ptr_to_globals).text <= q && q < (*ptr_to_globals).end {
                  (*ptr_to_globals).dot = q;
                  dot_begin();
                  dot_skip_over_ws();
                }
              } else if c1 == '\'' as i32 {
                (*ptr_to_globals).dot = swap_context((*ptr_to_globals).dot);
                dot_begin();
                dot_skip_over_ws();
              } else {
                indicate_error();
              }
              current_block = 15129665204879337069;
            }
            13255096073384561358 => {
              c1 = (get_one_char() | 0x20i32) - 'a' as i32;
              if c1 as libc::c_uint <= 25i32 as libc::c_uint {
                (*ptr_to_globals).YDreg = c1 as smalluint
              } else {
                indicate_error();
              }
              current_block = 15129665204879337069;
            }
            10258711639984089377 => {
              if (*ptr_to_globals).cmd_mode as libc::c_int == 0 {
                indicate_error();
              }
              (*ptr_to_globals).cmd_mode = 0 as smallint;
              undo_queue_commit();
              end_cmd_q();
              (*ptr_to_globals).last_status_cksum = 0;
              current_block = 15129665204879337069;
            }
            11439127087547047736 => {
              buf[0] = c as libc::c_char;
              buf[1] = '\u{0}' as i32 as libc::c_char;
              not_implemented(buf.as_mut_ptr());
              end_cmd_q();
              current_block = 17440971994642376514;
            }
            7961798899781870241 => {
              dot_scroll(
                (*ptr_to_globals).rows.wrapping_sub(2i32 as libc::c_uint) as libc::c_int,
                -1i32,
              );
              current_block = 15129665204879337069;
            }
            9426343755402444879 => {
              dot_scroll(
                (*ptr_to_globals)
                  .rows
                  .wrapping_sub(2i32 as libc::c_uint)
                  .wrapping_div(2i32 as libc::c_uint) as libc::c_int,
                1i32,
              );
              current_block = 15129665204879337069;
            }
            13352459794680105913 => {
              dot_scroll(1i32, 1i32);
              current_block = 15129665204879337069;
            }
            14142272253464333006 => {
              dot_scroll(
                (*ptr_to_globals).rows.wrapping_sub(2i32 as libc::c_uint) as libc::c_int,
                1i32,
              );
              current_block = 15129665204879337069;
            }
            10758177197742640066 => {
              (*ptr_to_globals).last_status_cksum = 0;
              current_block = 15129665204879337069;
            }
            6152256259730122749 => {
              current_block = 7534742345255184552;
            }
            12883932598258173301 => {
              current_block = 8800996768013373992;
            }
            11242998110520238401 => {
              redraw(1i32);
              current_block = 15129665204879337069;
            }
            13619733043935729992 => {
              loop {
                dot_next();
                dot_skip_over_ws();
                (*ptr_to_globals).cmdcnt -= 1;
                if !((*ptr_to_globals).cmdcnt > 0) {
                  break;
                }
              }
              current_block = 15129665204879337069;
            }
            9339065157412720613 => {
              dot_scroll(
                (*ptr_to_globals)
                  .rows
                  .wrapping_sub(2i32 as libc::c_uint)
                  .wrapping_div(2i32 as libc::c_uint) as libc::c_int,
                -1i32,
              );
              current_block = 15129665204879337069;
            }
            11447082683497798022 => {
              dot_scroll(1i32, -1i32);
              current_block = 15129665204879337069;
            }
            5182000506326660482 => {
              current_block = 13993698454868426881;
            }
            1105010766850597332 => {
              if !(*ptr_to_globals).reg[27].is_null() {
                p = begin_line((*ptr_to_globals).dot);
                q = end_line((*ptr_to_globals).dot);
                p = text_hole_delete(p, q, 1i32);
                p = p.offset(string_insert(p, (*ptr_to_globals).reg[27], 2i32) as isize);
                (*ptr_to_globals).dot = p;
                dot_skip_over_ws();
              }
              current_block = 15129665204879337069;
            }
            8616046655533110204 => {
              undo_pop();
              current_block = 15129665204879337069;
            }
            5127767458142431603 => {
              loop {
                (*ptr_to_globals).dot = end_line((*ptr_to_globals).dot);
                (*ptr_to_globals).cmdcnt -= 1;
                if (*ptr_to_globals).cmdcnt <= 0 {
                  break;
                }
                dot_next();
              }
              current_block = 15129665204879337069;
            }
            222014967776118151 => {
              (*ptr_to_globals).last_forward_char = get_one_char();
              current_block = 7856905509180742666;
            }
            11209792479411604110 => {
              loop {
                dot_prev();
                dot_skip_over_ws();
                (*ptr_to_globals).cmdcnt -= 1;
                if !((*ptr_to_globals).cmdcnt > 0) {
                  break;
                }
              }
              current_block = 15129665204879337069;
            }
            3364823792826654116 => {
              if (*ptr_to_globals).lmc_len != 0 {
                (*ptr_to_globals).ioq_start = crate::libbb::xfuncs_printf::xstrndup(
                  (*ptr_to_globals).last_modifying_cmd.as_mut_ptr(),
                  (*ptr_to_globals).lmc_len,
                );
                (*ptr_to_globals).ioq = (*ptr_to_globals).ioq_start
              }
              current_block = 15129665204879337069;
            }
            18096603330221575131 => {
              current_block = 17498168302144015873;
            }
            16891123271837848903 => {
              dot_end();
              current_block = 1752638907092016026;
            }
            8517235759107662071 => {
              current_block = 5847749760081351726;
            }
            12525254419223051704 => {
              if (*ptr_to_globals).dot < (*ptr_to_globals).end.offset(-1) {
                (*ptr_to_globals).dot = yank_delete(
                  (*ptr_to_globals).dot,
                  (*ptr_to_globals).dot,
                  1i32,
                  YANKDEL as libc::c_int,
                  1i32,
                )
              }
              current_block = 15129665204879337069;
            }
            15232911949322867522 => {
              current_block = 17251831742223396249;
            }
            10863374208794025069 => {
              current_block = 1895262434596074581;
            }
            451126677064669119 => {
              loop {
                dot_prev();
                (*ptr_to_globals).dot = move_to_col(
                  (*ptr_to_globals).dot,
                  (*ptr_to_globals).ccol + (*ptr_to_globals).offset,
                );
                (*ptr_to_globals).cmdcnt -= 1;
                if !((*ptr_to_globals).cmdcnt > 0) {
                  break;
                }
              }
              current_block = 15129665204879337069;
            }
            4611735929166613116 => {
              loop {
                if bb_ascii_isalnum(*(*ptr_to_globals).dot as libc::c_uchar) != 0
                  || *(*ptr_to_globals).dot as libc::c_int == '_' as i32
                {
                  (*ptr_to_globals).dot = skip_thing(
                    (*ptr_to_globals).dot,
                    1i32,
                    FORWARD as libc::c_int,
                    S_END_ALNUM as libc::c_int,
                  )
                } else if *strchrnul(
                  b"!\"#$%&\'()*+,-./:;<=>?@[\\]^_`{|}~\x00" as *const u8 as *const libc::c_char,
                  *(*ptr_to_globals).dot as libc::c_int,
                )
                .offset(0)
                  != 0
                {
                  (*ptr_to_globals).dot = skip_thing(
                    (*ptr_to_globals).dot,
                    1i32,
                    FORWARD as libc::c_int,
                    S_END_PUNCT as libc::c_int,
                  )
                }
                if (*ptr_to_globals).dot < (*ptr_to_globals).end.offset(-1) {
                  (*ptr_to_globals).dot = (*ptr_to_globals).dot.offset(1)
                }
                if ({
                  let mut bb__isspace: libc::c_uchar =
                    (*(*ptr_to_globals).dot as libc::c_int - 9i32) as libc::c_uchar;
                  (bb__isspace as libc::c_int == ' ' as i32 - 9i32
                    || bb__isspace as libc::c_int <= 13i32 - 9i32) as libc::c_int
                }) != 0
                {
                  (*ptr_to_globals).dot = skip_thing(
                    (*ptr_to_globals).dot,
                    2i32,
                    FORWARD as libc::c_int,
                    S_OVER_WS as libc::c_int,
                  )
                }
                (*ptr_to_globals).cmdcnt -= 1;
                if !((*ptr_to_globals).cmdcnt > 0) {
                  break;
                }
              }
              current_block = 15129665204879337069;
            }
            4386451087681909888 => {
              (*ptr_to_globals).dot =
                move_to_col((*ptr_to_globals).dot, (*ptr_to_globals).cmdcnt - 1i32);
              current_block = 15129665204879337069;
            }
            1296397779060594135 => {
              dot_begin();
              current_block = 15129665204879337069;
            }
            _ => {}
          }
          match current_block {
            15129665204879337069 => {}
            8629930936610358348 => {}
            _ => {
              match current_block {
                17251831742223396249 => {
                  dir = 0;
                  if c == 'X' as i32 {
                    dir = -1i32
                  }
                  loop {
                    if *(*ptr_to_globals).dot.offset(dir as isize) as libc::c_int != '\n' as i32 {
                      if c == 'X' as i32 {
                        (*ptr_to_globals).dot = (*ptr_to_globals).dot.offset(-1)
                      }
                      (*ptr_to_globals).dot = yank_delete(
                        (*ptr_to_globals).dot,
                        (*ptr_to_globals).dot,
                        0,
                        YANKDEL as libc::c_int,
                        1i32,
                      )
                    }
                    (*ptr_to_globals).cmdcnt -= 1;
                    if !((*ptr_to_globals).cmdcnt > 0) {
                      break;
                    }
                  }
                  end_cmd_q();
                  if c == 's' as i32 {
                    current_block = 8629930936610358348;
                  } else {
                    current_block = 15129665204879337069;
                  }
                }
                2087484904894455135 => {
                  dot_end();
                  (*ptr_to_globals).dot =
                    char_insert((*ptr_to_globals).dot, '\n' as i32 as libc::c_char, 1i32);
                  current_block = 8629930936610358348;
                }
                11945623545738147997 => {
                  (*ptr_to_globals).dot = (*ptr_to_globals).end.offset(-1);
                  if (*ptr_to_globals).cmdcnt > 0 {
                    (*ptr_to_globals).dot = find_line((*ptr_to_globals).cmdcnt)
                  }
                  dot_skip_over_ws();
                  current_block = 15129665204879337069;
                }
                5847749760081351726 => {
                  dir = FORWARD as libc::c_int;
                  if c == 'B' as i32 {
                    dir = BACK as libc::c_int
                  }
                  loop {
                    if c == 'W' as i32
                      || ({
                        let mut bb__isspace: libc::c_uchar =
                          (*(*ptr_to_globals).dot.offset(dir as isize) as libc::c_int - 9i32)
                            as libc::c_uchar;
                        (bb__isspace as libc::c_int == ' ' as i32 - 9i32
                          || bb__isspace as libc::c_int <= 13i32 - 9i32)
                          as libc::c_int
                      }) != 0
                    {
                      (*ptr_to_globals).dot =
                        skip_thing((*ptr_to_globals).dot, 1i32, dir, S_TO_WS as libc::c_int);
                      (*ptr_to_globals).dot =
                        skip_thing((*ptr_to_globals).dot, 2i32, dir, S_OVER_WS as libc::c_int)
                    }
                    if c != 'W' as i32 {
                      (*ptr_to_globals).dot =
                        skip_thing((*ptr_to_globals).dot, 1i32, dir, S_BEFORE_WS as libc::c_int)
                    }
                    (*ptr_to_globals).cmdcnt -= 1;
                    if !((*ptr_to_globals).cmdcnt > 0) {
                      break;
                    }
                  }
                  current_block = 15129665204879337069;
                }
                17440971994642376514 => {
                  current_block = 15129665204879337069;
                }
                7534742345255184552 => {
                  current_block = 17247297260531395789;
                }
                8800996768013373992 => {
                  loop {
                    dot_next();
                    (*ptr_to_globals).dot = move_to_col(
                      (*ptr_to_globals).dot,
                      (*ptr_to_globals).ccol + (*ptr_to_globals).offset,
                    );
                    (*ptr_to_globals).cmdcnt -= 1;
                    if !((*ptr_to_globals).cmdcnt > 0) {
                      break;
                    }
                  }
                  current_block = 15129665204879337069;
                }
                13993698454868426881 => {
                  loop {
                    dot_right();
                    (*ptr_to_globals).cmdcnt -= 1;
                    if !((*ptr_to_globals).cmdcnt > 0) {
                      break;
                    }
                  }
                  current_block = 15129665204879337069;
                }
                7856905509180742666 => {
                  while !((*ptr_to_globals).last_forward_char == 0) {
                    q = (*ptr_to_globals).dot.offset(1);
                    while q < (*ptr_to_globals).end.offset(-1)
                      && *q as libc::c_int != '\n' as i32
                      && *q as libc::c_int != (*ptr_to_globals).last_forward_char
                    {
                      q = q.offset(1)
                    }
                    if *q as libc::c_int == (*ptr_to_globals).last_forward_char {
                      (*ptr_to_globals).dot = q
                    }
                    (*ptr_to_globals).cmdcnt -= 1;
                    if !((*ptr_to_globals).cmdcnt > 0) {
                      break;
                    }
                  }
                  current_block = 15129665204879337069;
                }
                17498168302144015873 => {
                  current_block = 8681395796513813967;
                }
                1752638907092016026 => {
                  if *(*ptr_to_globals).dot as libc::c_int != '\n' as i32 {
                    (*ptr_to_globals).dot = (*ptr_to_globals).dot.offset(1)
                  }
                  current_block = 8629930936610358348;
                }
                3268579060917229304 => {
                  current_block = 8629930936610358348;
                }
                1895262434596074581 => {
                  current_block = 8908416993177701018;
                }
                _ => {}
              }
              match current_block {
                8629930936610358348 => {}
                15129665204879337069 => {}
                _ => {
                  match current_block {
                    17247297260531395789 => {
                      loop {
                        dot_left();
                        (*ptr_to_globals).cmdcnt -= 1;
                        if !((*ptr_to_globals).cmdcnt > 0) {
                          break;
                        }
                      }
                      current_block = 15129665204879337069;
                    }
                    8681395796513813967 => {
                      current_block = 5591548203144509315;
                    }
                    8908416993177701018 => {
                      current_block = 16124761010012532485;
                    }
                    _ => {}
                  }
                  match current_block {
                    15129665204879337069 => {}
                    _ => {
                      match current_block {
                        16124761010012532485 => {
                          let mut yf: libc::c_int = 0;
                          let mut ml: libc::c_int = 0;
                          let mut whole: libc::c_int = 0;
                          yf = YANKDEL as libc::c_int;
                          if c == 'y' as i32 || c == 'Y' as i32 {
                            yf = YANKONLY as libc::c_int
                          }
                          c1 = 'y' as i32;
                          if c != 'Y' as i32 {
                            c1 = get_one_char()
                          }
                          ml = find_range(&mut p, &mut q, c1 as libc::c_char);
                          place_cursor(0i32, 0);
                          if c1 == 27i32 {
                            c1 = 27i32;
                            c = c1
                          } else if !strchr(b"wW\x00" as *const u8 as *const libc::c_char, c1)
                            .is_null()
                          {
                            ml = 0;
                            if c == 'c' as i32 {
                              while ({
                                let mut bb__isspace: libc::c_uchar =
                                  (*q as libc::c_int - 9i32) as libc::c_uchar;
                                (bb__isspace as libc::c_int == ' ' as i32 - 9i32
                                  || bb__isspace as libc::c_int <= 13i32 - 9i32)
                                  as libc::c_int
                              }) != 0
                                && q > p
                              {
                                q = q.offset(-1)
                              }
                            }
                            (*ptr_to_globals).dot = yank_delete(p, q, ml, yf, 1i32)
                          } else if !strchr(
                            b"^0bBeEft%$ lh\x08\x7f\x00" as *const u8 as *const libc::c_char,
                            c1,
                          )
                          .is_null()
                          {
                            (*ptr_to_globals).dot = yank_delete(p, q, ml, yf, 1i32)
                          } else if !strchr(
                            b"cdykjGHL+-{}\r\n\x00" as *const u8 as *const libc::c_char,
                            c1,
                          )
                          .is_null()
                          {
                            (*ptr_to_globals).dot = yank_delete(p, q, ml, yf, 1i32);
                            whole = 1i32
                          } else {
                            c1 = 27i32;
                            c = c1;
                            ml = 0;
                            indicate_error();
                          }
                          if ml != 0 && whole != 0 {
                            if c == 'c' as i32 {
                              (*ptr_to_globals).dot = char_insert(
                                (*ptr_to_globals).dot,
                                '\n' as i32 as libc::c_char,
                                2i32,
                              );
                              if whole != 0
                                && (*ptr_to_globals).dot != (*ptr_to_globals).end.offset(-1)
                              {
                                dot_prev();
                              }
                            } else if c == 'd' as i32 {
                              dot_begin();
                              dot_skip_over_ws();
                            }
                          }
                          if c1 != 27i32 {
                            if c == 'c' as i32 {
                              strcpy(
                                buf.as_mut_ptr(),
                                b"Change\x00" as *const u8 as *const libc::c_char,
                              );
                              current_block = 8629930936610358348;
                            } else {
                              if c == 'd' as i32 {
                                strcpy(
                                  buf.as_mut_ptr(),
                                  b"Delete\x00" as *const u8 as *const libc::c_char,
                                );
                              }
                              if c == 'y' as i32 || c == 'Y' as i32 {
                                strcpy(
                                  buf.as_mut_ptr(),
                                  b"Yank\x00" as *const u8 as *const libc::c_char,
                                );
                              }
                              p = (*ptr_to_globals).reg[(*ptr_to_globals).YDreg as usize];
                              q = p.offset(strlen(p) as isize);
                              cnt = 0;
                              while p <= q {
                                if *p as libc::c_int == '\n' as i32 {
                                  cnt += 1
                                }
                                p = p.offset(1)
                              }
                              status_line(
                                b"%s %u lines (%u chars) using [%c]\x00" as *const u8
                                  as *const libc::c_char,
                                buf.as_mut_ptr(),
                                cnt,
                                strlen((*ptr_to_globals).reg[(*ptr_to_globals).YDreg as usize])
                                  as libc::c_uint,
                                what_reg() as libc::c_int,
                              );
                              end_cmd_q();
                              current_block = 15129665204879337069;
                            }
                          } else {
                            current_block = 15129665204879337069;
                          }
                        }
                        5591548203144509315 => {
                          current_block = 2636677179867529885;
                        }
                        _ => {}
                      }
                      match current_block {
                        15129665204879337069 => {}
                        8629930936610358348 => {}
                        _ => {
                          match current_block {
                            2636677179867529885 => {
                              current_block = 12309206730560524281;
                            }
                            _ => {}
                          }
                          match current_block {
                            12309206730560524281 => {
                              current_block = 3325768110057758661;
                            }
                            _ => {}
                          }
                          match current_block {
                            3325768110057758661 => {
                              current_block = 14815832896553429982;
                            }
                            _ => {}
                          }
                          match current_block {
                            14815832896553429982 => {
                              current_block = 10731695520297161438;
                            }
                            _ => {}
                          }
                          match current_block {
                            10731695520297161438 => {
                              if c == '0' as i32 && (*ptr_to_globals).cmdcnt < 1i32 {
                                dot_begin();
                              } else {
                                (*ptr_to_globals).cmdcnt =
                                  (*ptr_to_globals).cmdcnt * 10i32 + (c - '0' as i32)
                              }
                              current_block = 15129665204879337069;
                            }
                            _ => {}
                          }
                          match current_block {
                            15129665204879337069 => {}
                            _ => {
                              loop {
                                match current_block {
                                  16813369756331276724 => {
                                    msg = std::ptr::null();
                                    current_block = 7392824444931029276;
                                  }
                                  7392824444931029276 => {
                                    dir = FORWARD as libc::c_int;
                                    p = (*ptr_to_globals).dot.offset(1);
                                    if *(*ptr_to_globals).last_search_pattern.offset(0)
                                      as libc::c_int
                                      == '?' as i32
                                    {
                                      dir = BACK as libc::c_int;
                                      p = (*ptr_to_globals).dot.offset(-1)
                                    }
                                    current_block = 4166979493554389389;
                                  }
                                  _ => {
                                    q = char_search(
                                      p,
                                      (*ptr_to_globals).last_search_pattern.offset(1),
                                      dir << 1i32 | FULL as libc::c_int,
                                    );
                                    if !q.is_null() {
                                      (*ptr_to_globals).dot = q;
                                      msg = std::ptr::null()
                                    } else {
                                      p = (*ptr_to_globals).text;
                                      if dir == BACK as libc::c_int {
                                        p = (*ptr_to_globals).end.offset(-1)
                                      }
                                      q = char_search(
                                        p,
                                        (*ptr_to_globals).last_search_pattern.offset(1),
                                        dir << 1i32 | FULL as libc::c_int,
                                      );
                                      if !q.is_null() {
                                        (*ptr_to_globals).dot = q;
                                        msg = b"search hit BOTTOM, continuing at TOP\x00"
                                          as *const u8
                                          as *const libc::c_char;
                                        if dir == BACK as libc::c_int {
                                          msg = b"search hit TOP, continuing at BOTTOM\x00"
                                            as *const u8
                                            as *const libc::c_char
                                        }
                                      } else {
                                        msg = b"Pattern not found\x00" as *const u8
                                          as *const libc::c_char
                                      }
                                    }
                                    if !msg.is_null() {
                                      status_line_bold(
                                        b"%s\x00" as *const u8 as *const libc::c_char,
                                        msg,
                                      );
                                    }
                                    (*ptr_to_globals).cmdcnt -= 1;
                                    if (*ptr_to_globals).cmdcnt > 0 {
                                      current_block = 16813369756331276724;
                                    } else {
                                      break;
                                    }
                                  }
                                }
                              }
                              current_block = 15129665204879337069;
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
        90 => {
          current_block = 3113147720494587438;
          match current_block {
            16992905640583886232 => {
              loop {
                if (*(*ptr_to_globals).dot as libc::c_int - 'a' as i32) as libc::c_uchar
                  as libc::c_int
                  <= 'z' as i32 - 'a' as i32
                {
                  undo_push(
                    (*ptr_to_globals).dot,
                    1i32 as libc::c_uint,
                    1i32 as libc::c_uchar,
                  );
                  *(*ptr_to_globals).dot =
                    bb_ascii_toupper(*(*ptr_to_globals).dot as libc::c_uchar) as libc::c_char;
                  undo_push(
                    (*ptr_to_globals).dot,
                    1i32 as libc::c_uint,
                    2i32 as libc::c_uchar,
                  );
                } else if (*(*ptr_to_globals).dot as libc::c_int - 'A' as i32) as libc::c_uchar
                  as libc::c_int
                  <= 'Z' as i32 - 'A' as i32
                {
                  undo_push(
                    (*ptr_to_globals).dot,
                    1i32 as libc::c_uint,
                    1i32 as libc::c_uchar,
                  );
                  *(*ptr_to_globals).dot =
                    bb_ascii_tolower(*(*ptr_to_globals).dot as libc::c_uchar) as libc::c_char;
                  undo_push(
                    (*ptr_to_globals).dot,
                    1i32 as libc::c_uint,
                    2i32 as libc::c_uchar,
                  );
                }
                dot_right();
                (*ptr_to_globals).cmdcnt -= 1;
                if !((*ptr_to_globals).cmdcnt > 0) {
                  break;
                }
              }
              end_cmd_q();
              current_block = 15129665204879337069;
            }
            8729655159604064397 => {
              c1 = get_one_char();
              cnt = 0;
              if c1 == '.' as i32 {
                cnt = (*ptr_to_globals)
                  .rows
                  .wrapping_sub(2i32 as libc::c_uint)
                  .wrapping_div(2i32 as libc::c_uint) as libc::c_int
              }
              if c1 == '-' as i32 {
                cnt = (*ptr_to_globals).rows.wrapping_sub(2i32 as libc::c_uint) as libc::c_int
              }
              (*ptr_to_globals).screenbegin = begin_line((*ptr_to_globals).dot);
              dot_scroll(cnt, -1i32);
              current_block = 15129665204879337069;
            }
            15899500648299942075 => {
              (*ptr_to_globals).last_forward_char = get_one_char();
              do_cmd(';' as i32);
              if *(*ptr_to_globals).dot as libc::c_int == (*ptr_to_globals).last_forward_char {
                dot_left();
              }
              (*ptr_to_globals).last_forward_char = 0;
              current_block = 15129665204879337069;
            }
            9051390181078481641 => {
              c1 = get_one_char();
              if *(*ptr_to_globals).dot as libc::c_int != '\n' as i32 {
                (*ptr_to_globals).dot =
                  text_hole_delete((*ptr_to_globals).dot, (*ptr_to_globals).dot, 1i32);
                (*ptr_to_globals).dot =
                  char_insert((*ptr_to_globals).dot, c1 as libc::c_char, 2i32);
                dot_left();
              }
              end_cmd_q();
              current_block = 15129665204879337069;
            }
            877115918601926659 => {
              dir = FORWARD as libc::c_int;
              if c == 'b' as i32 {
                dir = BACK as libc::c_int
              }
              while !((*ptr_to_globals).dot.offset(dir as isize) < (*ptr_to_globals).text
                || (*ptr_to_globals).dot.offset(dir as isize) > (*ptr_to_globals).end.offset(-1))
              {
                (*ptr_to_globals).dot = (*ptr_to_globals).dot.offset(dir as isize);
                if ({
                  let mut bb__isspace: libc::c_uchar =
                    (*(*ptr_to_globals).dot as libc::c_int - 9i32) as libc::c_uchar;
                  (bb__isspace as libc::c_int == ' ' as i32 - 9i32
                    || bb__isspace as libc::c_int <= 13i32 - 9i32) as libc::c_int
                }) != 0
                {
                  (*ptr_to_globals).dot = skip_thing(
                    (*ptr_to_globals).dot,
                    if c == 'e' as i32 { 2i32 } else { 1i32 },
                    dir,
                    S_OVER_WS as libc::c_int,
                  )
                }
                if bb_ascii_isalnum(*(*ptr_to_globals).dot as libc::c_uchar) != 0
                  || *(*ptr_to_globals).dot as libc::c_int == '_' as i32
                {
                  (*ptr_to_globals).dot =
                    skip_thing((*ptr_to_globals).dot, 1i32, dir, S_END_ALNUM as libc::c_int)
                } else if *strchrnul(
                  b"!\"#$%&\'()*+,-./:;<=>?@[\\]^_`{|}~\x00" as *const u8 as *const libc::c_char,
                  *(*ptr_to_globals).dot as libc::c_int,
                )
                .offset(0)
                  != 0
                {
                  (*ptr_to_globals).dot =
                    skip_thing((*ptr_to_globals).dot, 1i32, dir, S_END_PUNCT as libc::c_int)
                }
                (*ptr_to_globals).cmdcnt -= 1;
                if !((*ptr_to_globals).cmdcnt > 0) {
                  break;
                }
              }
              current_block = 15129665204879337069;
            }
            1085022737867179637 => {
              dot_begin();
              dot_skip_over_ws();
              current_block = 15129665204879337069;
            }
            3113147720494587438 => {
              c1 = get_one_char();
              if c1 != 'Z' as i32 {
                indicate_error();
              } else if (*ptr_to_globals).modified_count != 0 {
                if 1i32 != 0 && (*ptr_to_globals).readonly_mode as libc::c_int != 0 {
                  status_line_bold(
                    b"\'%s\' is read only\x00" as *const u8 as *const libc::c_char,
                    (*ptr_to_globals).current_filename,
                  );
                } else {
                  cnt = file_write(
                    (*ptr_to_globals).current_filename,
                    (*ptr_to_globals).text,
                    (*ptr_to_globals).end.offset(-1),
                  );
                  if cnt < 0 {
                    if cnt == -1i32 {
                      status_line_bold(b"Write error: %m\x00" as *const u8 as *const libc::c_char);
                    }
                  } else if cnt as libc::c_long
                    == (*ptr_to_globals)
                      .end
                      .offset(-1)
                      .wrapping_offset_from((*ptr_to_globals).text)
                      as libc::c_long
                      + 1
                  {
                    (*ptr_to_globals).editing = 0 as smallint
                  }
                }
              } else {
                (*ptr_to_globals).editing = 0 as smallint
              }
              current_block = 15129665204879337069;
            }
            12960118908218882441 => {
              p = begin_line((*ptr_to_globals).dot);
              if *p.offset(-1i32 as isize) as libc::c_int == '\n' as i32 {
                dot_prev();
                current_block = 2087484904894455135;
              } else {
                dot_begin();
                (*ptr_to_globals).dot =
                  char_insert((*ptr_to_globals).dot, '\n' as i32 as libc::c_char, 1i32);
                dot_prev();
                current_block = 8629930936610358348;
              }
            }
            8720450212473544924 => {
              (*ptr_to_globals).dot = (*ptr_to_globals).screenbegin;
              cnt = 0;
              while (cnt as libc::c_uint)
                < (*ptr_to_globals)
                  .rows
                  .wrapping_sub(1i32 as libc::c_uint)
                  .wrapping_div(2i32 as libc::c_uint)
              {
                (*ptr_to_globals).dot = next_line((*ptr_to_globals).dot);
                cnt += 1
              }
              current_block = 15129665204879337069;
            }
            13015277209715431090 => {
              (*ptr_to_globals).dot = end_screen();
              if (*ptr_to_globals).cmdcnt as libc::c_uint
                > (*ptr_to_globals).rows.wrapping_sub(1i32 as libc::c_uint)
              {
                (*ptr_to_globals).cmdcnt =
                  (*ptr_to_globals).rows.wrapping_sub(1i32 as libc::c_uint) as libc::c_int
              }
              (*ptr_to_globals).cmdcnt -= 1;
              if (*ptr_to_globals).cmdcnt > 0 {
                do_cmd('-' as i32);
              }
              dot_begin();
              dot_skip_over_ws();
              current_block = 15129665204879337069;
            }
            9800435767766781385 => {
              loop {
                dot_end();
                if (*ptr_to_globals).dot < (*ptr_to_globals).end.offset(-1) {
                  undo_push(
                    (*ptr_to_globals).dot,
                    1i32 as libc::c_uint,
                    1i32 as libc::c_uchar,
                  );
                  let fresh15 = (*ptr_to_globals).dot;
                  (*ptr_to_globals).dot = (*ptr_to_globals).dot.offset(1);
                  *fresh15 = ' ' as i32 as libc::c_char;
                  undo_push(
                    (*ptr_to_globals).dot.offset(-1),
                    1i32 as libc::c_uint,
                    2i32 as libc::c_uchar,
                  );
                  while ({
                    let mut bb__isblank: libc::c_uchar = *(*ptr_to_globals).dot as libc::c_uchar;
                    (bb__isblank as libc::c_int == ' ' as i32
                      || bb__isblank as libc::c_int == '\t' as i32)
                      as libc::c_int
                  }) != 0
                  {
                    text_hole_delete((*ptr_to_globals).dot, (*ptr_to_globals).dot, 2i32);
                  }
                }
                (*ptr_to_globals).cmdcnt -= 1;
                if !((*ptr_to_globals).cmdcnt > 0) {
                  break;
                }
              }
              end_cmd_q();
              current_block = 15129665204879337069;
            }
            3432363526595694666 => {
              dot_begin();
              dot_skip_over_ws();
              current_block = 3268579060917229304;
            }
            3494829253343353619 => {
              (*ptr_to_globals).dot = (*ptr_to_globals).screenbegin;
              if (*ptr_to_globals).cmdcnt as libc::c_uint
                > (*ptr_to_globals).rows.wrapping_sub(1i32 as libc::c_uint)
              {
                (*ptr_to_globals).cmdcnt =
                  (*ptr_to_globals).rows.wrapping_sub(1i32 as libc::c_uint) as libc::c_int
              }
              (*ptr_to_globals).cmdcnt -= 1;
              if (*ptr_to_globals).cmdcnt > 0 {
                do_cmd('+' as i32);
              }
              dot_skip_over_ws();
              current_block = 15129665204879337069;
            }
            17973101765331640574 => {
              c1 = get_one_char();
              if c1 != 'g' as i32 {
                buf[0] = 'g' as i32 as libc::c_char;
                buf[1] = if c1 >= 0 { c1 } else { '*' as i32 } as libc::c_char;
                buf[2] = '\u{0}' as i32 as libc::c_char;
                not_implemented(buf.as_mut_ptr());
                current_block = 15129665204879337069;
              } else {
                if (*ptr_to_globals).cmdcnt == 0 {
                  (*ptr_to_globals).cmdcnt = 1i32
                }
                current_block = 11945623545738147997;
              }
            }
            16546625800574160972 => {
              save_dot = (*ptr_to_globals).dot;
              (*ptr_to_globals).dot = dollar_line((*ptr_to_globals).dot);
              (*ptr_to_globals).dot = yank_delete(
                save_dot,
                (*ptr_to_globals).dot,
                0,
                YANKDEL as libc::c_int,
                1i32,
              );
              if c == 'C' as i32 {
                current_block = 8629930936610358348;
              } else {
                if c == 'D' as i32 {
                  end_cmd_q();
                }
                current_block = 15129665204879337069;
              }
            }
            11937696639986586685 => {
              cnt = count_lines((*ptr_to_globals).text, (*ptr_to_globals).dot);
              c1 = get_one_char();
              find_range(&mut p, &mut q, c1 as libc::c_char);
              yank_delete(p, q, 1i32, YANKONLY as libc::c_int, 0);
              p = begin_line(p);
              q = end_line(q);
              i = count_lines(p, q);
              while i > 0 {
                if c == '<' as i32 {
                  if *p as libc::c_int == '\t' as i32 {
                    text_hole_delete(p, p, 0);
                  } else if *p as libc::c_int == ' ' as i32 {
                    j = 0;
                    while *p as libc::c_int == ' ' as i32 && j < (*ptr_to_globals).tabstop {
                      text_hole_delete(p, p, 0);
                      j += 1
                    }
                  }
                } else if c == '>' as i32 {
                  char_insert(p, '\t' as i32 as libc::c_char, 1i32);
                }
                i -= 1;
                p = next_line(p)
              }
              (*ptr_to_globals).dot = find_line(cnt);
              dot_skip_over_ws();
              end_cmd_q();
              current_block = 15129665204879337069;
            }
            17725350714912028156 => {
              p = get_input_line(b":\x00" as *const u8 as *const libc::c_char);
              colon(p);
              current_block = 15129665204879337069;
            }
            14526470074083880812 => {
              q = char_search(
                (*ptr_to_globals).dot,
                b"\n\n\x00" as *const u8 as *const libc::c_char,
                (FORWARD as libc::c_int) << 1i32 | FULL as libc::c_int,
              );
              if !q.is_null() {
                (*ptr_to_globals).dot = next_line(q)
              }
              current_block = 15129665204879337069;
            }
            8893187391306414141 => {
              q = char_search(
                (*ptr_to_globals).dot,
                b"\n\n\x00" as *const u8 as *const libc::c_char,
                ((BACK as libc::c_int as libc::c_uint) << 1i32
                  | FULL as libc::c_int as libc::c_uint) as libc::c_int,
              );
              if !q.is_null() {
                (*ptr_to_globals).dot = next_line(q)
              }
              current_block = 15129665204879337069;
            }
            7021673758293221412 => {
              dir = BACK as libc::c_int;
              p = (*ptr_to_globals).dot.offset(-1);
              if *(*ptr_to_globals).last_search_pattern.offset(0) as libc::c_int == '?' as i32 {
                dir = FORWARD as libc::c_int;
                p = (*ptr_to_globals).dot.offset(1)
              }
              current_block = 4166979493554389389;
            }
            18374191879090272823 => {
              buf[0] = c as libc::c_char;
              buf[1] = '\u{0}' as i32 as libc::c_char;
              q = get_input_line(buf.as_mut_ptr());
              if *q.offset(0) as libc::c_int != 0 && *q.offset(1) == 0 {
                if *(*ptr_to_globals).last_search_pattern.offset(0) != 0 {
                  *(*ptr_to_globals).last_search_pattern.offset(0) = c as libc::c_char
                }
                current_block = 7392824444931029276;
              } else if *q.offset(0) != 0 {
                free((*ptr_to_globals).last_search_pattern as *mut libc::c_void);
                (*ptr_to_globals).last_search_pattern = crate::libbb::xfuncs_printf::xstrdup(q);
                current_block = 7392824444931029276;
              } else {
                current_block = 15129665204879337069;
              }
            }
            16407828456666301883 => {
              if (*ptr_to_globals).last_forward_char == 0 {
                current_block = 15129665204879337069;
              } else {
                loop {
                  q = (*ptr_to_globals).dot.offset(-1);
                  while q >= (*ptr_to_globals).text
                    && *q as libc::c_int != '\n' as i32
                    && *q as libc::c_int != (*ptr_to_globals).last_forward_char
                  {
                    q = q.offset(-1)
                  }
                  if q >= (*ptr_to_globals).text
                    && *q as libc::c_int == (*ptr_to_globals).last_forward_char
                  {
                    (*ptr_to_globals).dot = q
                  }
                  (*ptr_to_globals).cmdcnt -= 1;
                  if !((*ptr_to_globals).cmdcnt > 0) {
                    break;
                  }
                }
                current_block = 15129665204879337069;
              }
            }
            9018432604062702004 => {
              q = (*ptr_to_globals).dot;
              while q < (*ptr_to_globals).end && *q as libc::c_int != '\n' as i32 {
                if !strchr(
                  b"()[]{}\x00" as *const u8 as *const libc::c_char,
                  *q as libc::c_int,
                )
                .is_null()
                {
                  p = find_pair(q, *q);
                  if p.is_null() {
                    indicate_error();
                  } else {
                    (*ptr_to_globals).dot = p
                  }
                  break;
                } else {
                  q = q.offset(1)
                }
              }
              if *q as libc::c_int == '\n' as i32 {
                indicate_error();
              }
              current_block = 15129665204879337069;
            }
            10247103787464459848 => {
              p = (*ptr_to_globals).reg[(*ptr_to_globals).YDreg as usize];
              if p.is_null() {
                status_line_bold(
                  b"Nothing in register %c\x00" as *const u8 as *const libc::c_char,
                  what_reg() as libc::c_int,
                );
              } else {
                if !strchr(p, '\n' as i32).is_null() {
                  if c == 'P' as i32 {
                    dot_begin();
                  }
                  if c == 'p' as i32 {
                    if end_line((*ptr_to_globals).dot) == (*ptr_to_globals).end.offset(-1) {
                      (*ptr_to_globals).dot = (*ptr_to_globals).end
                    } else {
                      dot_next();
                    }
                  }
                } else if c == 'p' as i32 {
                  dot_right();
                }
                string_insert((*ptr_to_globals).dot, p, 1i32);
                end_cmd_q();
              }
              current_block = 15129665204879337069;
            }
            15260732871948875843 => {
              c1 = (get_one_char() | 0x20i32) - 'a' as i32;
              if c1 as libc::c_uint <= 25i32 as libc::c_uint {
                (*ptr_to_globals).mark[c1 as usize] = (*ptr_to_globals).dot
              } else {
                indicate_error();
              }
              current_block = 15129665204879337069;
            }
            12738322036487086035 => {
              c1 = get_one_char() | 0x20i32;
              if (c1 - 'a' as i32) as libc::c_uint <= 25i32 as libc::c_uint {
                c1 = c1 - 'a' as i32;
                q = (*ptr_to_globals).mark[c1 as usize];
                if (*ptr_to_globals).text <= q && q < (*ptr_to_globals).end {
                  (*ptr_to_globals).dot = q;
                  dot_begin();
                  dot_skip_over_ws();
                }
              } else if c1 == '\'' as i32 {
                (*ptr_to_globals).dot = swap_context((*ptr_to_globals).dot);
                dot_begin();
                dot_skip_over_ws();
              } else {
                indicate_error();
              }
              current_block = 15129665204879337069;
            }
            13255096073384561358 => {
              c1 = (get_one_char() | 0x20i32) - 'a' as i32;
              if c1 as libc::c_uint <= 25i32 as libc::c_uint {
                (*ptr_to_globals).YDreg = c1 as smalluint
              } else {
                indicate_error();
              }
              current_block = 15129665204879337069;
            }
            10258711639984089377 => {
              if (*ptr_to_globals).cmd_mode as libc::c_int == 0 {
                indicate_error();
              }
              (*ptr_to_globals).cmd_mode = 0 as smallint;
              undo_queue_commit();
              end_cmd_q();
              (*ptr_to_globals).last_status_cksum = 0;
              current_block = 15129665204879337069;
            }
            11439127087547047736 => {
              buf[0] = c as libc::c_char;
              buf[1] = '\u{0}' as i32 as libc::c_char;
              not_implemented(buf.as_mut_ptr());
              end_cmd_q();
              current_block = 17440971994642376514;
            }
            7961798899781870241 => {
              dot_scroll(
                (*ptr_to_globals).rows.wrapping_sub(2i32 as libc::c_uint) as libc::c_int,
                -1i32,
              );
              current_block = 15129665204879337069;
            }
            9426343755402444879 => {
              dot_scroll(
                (*ptr_to_globals)
                  .rows
                  .wrapping_sub(2i32 as libc::c_uint)
                  .wrapping_div(2i32 as libc::c_uint) as libc::c_int,
                1i32,
              );
              current_block = 15129665204879337069;
            }
            13352459794680105913 => {
              dot_scroll(1i32, 1i32);
              current_block = 15129665204879337069;
            }
            14142272253464333006 => {
              dot_scroll(
                (*ptr_to_globals).rows.wrapping_sub(2i32 as libc::c_uint) as libc::c_int,
                1i32,
              );
              current_block = 15129665204879337069;
            }
            10758177197742640066 => {
              (*ptr_to_globals).last_status_cksum = 0;
              current_block = 15129665204879337069;
            }
            6152256259730122749 => {
              current_block = 7534742345255184552;
            }
            12883932598258173301 => {
              current_block = 8800996768013373992;
            }
            11242998110520238401 => {
              redraw(1i32);
              current_block = 15129665204879337069;
            }
            13619733043935729992 => {
              loop {
                dot_next();
                dot_skip_over_ws();
                (*ptr_to_globals).cmdcnt -= 1;
                if !((*ptr_to_globals).cmdcnt > 0) {
                  break;
                }
              }
              current_block = 15129665204879337069;
            }
            9339065157412720613 => {
              dot_scroll(
                (*ptr_to_globals)
                  .rows
                  .wrapping_sub(2i32 as libc::c_uint)
                  .wrapping_div(2i32 as libc::c_uint) as libc::c_int,
                -1i32,
              );
              current_block = 15129665204879337069;
            }
            11447082683497798022 => {
              dot_scroll(1i32, -1i32);
              current_block = 15129665204879337069;
            }
            5182000506326660482 => {
              current_block = 13993698454868426881;
            }
            1105010766850597332 => {
              if !(*ptr_to_globals).reg[27].is_null() {
                p = begin_line((*ptr_to_globals).dot);
                q = end_line((*ptr_to_globals).dot);
                p = text_hole_delete(p, q, 1i32);
                p = p.offset(string_insert(p, (*ptr_to_globals).reg[27], 2i32) as isize);
                (*ptr_to_globals).dot = p;
                dot_skip_over_ws();
              }
              current_block = 15129665204879337069;
            }
            8616046655533110204 => {
              undo_pop();
              current_block = 15129665204879337069;
            }
            5127767458142431603 => {
              loop {
                (*ptr_to_globals).dot = end_line((*ptr_to_globals).dot);
                (*ptr_to_globals).cmdcnt -= 1;
                if (*ptr_to_globals).cmdcnt <= 0 {
                  break;
                }
                dot_next();
              }
              current_block = 15129665204879337069;
            }
            222014967776118151 => {
              (*ptr_to_globals).last_forward_char = get_one_char();
              current_block = 7856905509180742666;
            }
            11209792479411604110 => {
              loop {
                dot_prev();
                dot_skip_over_ws();
                (*ptr_to_globals).cmdcnt -= 1;
                if !((*ptr_to_globals).cmdcnt > 0) {
                  break;
                }
              }
              current_block = 15129665204879337069;
            }
            3364823792826654116 => {
              if (*ptr_to_globals).lmc_len != 0 {
                (*ptr_to_globals).ioq_start = crate::libbb::xfuncs_printf::xstrndup(
                  (*ptr_to_globals).last_modifying_cmd.as_mut_ptr(),
                  (*ptr_to_globals).lmc_len,
                );
                (*ptr_to_globals).ioq = (*ptr_to_globals).ioq_start
              }
              current_block = 15129665204879337069;
            }
            18096603330221575131 => {
              current_block = 17498168302144015873;
            }
            16891123271837848903 => {
              dot_end();
              current_block = 1752638907092016026;
            }
            8517235759107662071 => {
              current_block = 5847749760081351726;
            }
            12525254419223051704 => {
              if (*ptr_to_globals).dot < (*ptr_to_globals).end.offset(-1) {
                (*ptr_to_globals).dot = yank_delete(
                  (*ptr_to_globals).dot,
                  (*ptr_to_globals).dot,
                  1i32,
                  YANKDEL as libc::c_int,
                  1i32,
                )
              }
              current_block = 15129665204879337069;
            }
            15232911949322867522 => {
              current_block = 17251831742223396249;
            }
            10863374208794025069 => {
              current_block = 1895262434596074581;
            }
            451126677064669119 => {
              loop {
                dot_prev();
                (*ptr_to_globals).dot = move_to_col(
                  (*ptr_to_globals).dot,
                  (*ptr_to_globals).ccol + (*ptr_to_globals).offset,
                );
                (*ptr_to_globals).cmdcnt -= 1;
                if !((*ptr_to_globals).cmdcnt > 0) {
                  break;
                }
              }
              current_block = 15129665204879337069;
            }
            4611735929166613116 => {
              loop {
                if bb_ascii_isalnum(*(*ptr_to_globals).dot as libc::c_uchar) != 0
                  || *(*ptr_to_globals).dot as libc::c_int == '_' as i32
                {
                  (*ptr_to_globals).dot = skip_thing(
                    (*ptr_to_globals).dot,
                    1i32,
                    FORWARD as libc::c_int,
                    S_END_ALNUM as libc::c_int,
                  )
                } else if *strchrnul(
                  b"!\"#$%&\'()*+,-./:;<=>?@[\\]^_`{|}~\x00" as *const u8 as *const libc::c_char,
                  *(*ptr_to_globals).dot as libc::c_int,
                )
                .offset(0)
                  != 0
                {
                  (*ptr_to_globals).dot = skip_thing(
                    (*ptr_to_globals).dot,
                    1i32,
                    FORWARD as libc::c_int,
                    S_END_PUNCT as libc::c_int,
                  )
                }
                if (*ptr_to_globals).dot < (*ptr_to_globals).end.offset(-1) {
                  (*ptr_to_globals).dot = (*ptr_to_globals).dot.offset(1)
                }
                if ({
                  let mut bb__isspace: libc::c_uchar =
                    (*(*ptr_to_globals).dot as libc::c_int - 9i32) as libc::c_uchar;
                  (bb__isspace as libc::c_int == ' ' as i32 - 9i32
                    || bb__isspace as libc::c_int <= 13i32 - 9i32) as libc::c_int
                }) != 0
                {
                  (*ptr_to_globals).dot = skip_thing(
                    (*ptr_to_globals).dot,
                    2i32,
                    FORWARD as libc::c_int,
                    S_OVER_WS as libc::c_int,
                  )
                }
                (*ptr_to_globals).cmdcnt -= 1;
                if !((*ptr_to_globals).cmdcnt > 0) {
                  break;
                }
              }
              current_block = 15129665204879337069;
            }
            4386451087681909888 => {
              (*ptr_to_globals).dot =
                move_to_col((*ptr_to_globals).dot, (*ptr_to_globals).cmdcnt - 1i32);
              current_block = 15129665204879337069;
            }
            1296397779060594135 => {
              dot_begin();
              current_block = 15129665204879337069;
            }
            _ => {}
          }
          match current_block {
            15129665204879337069 => {}
            8629930936610358348 => {}
            _ => {
              match current_block {
                17251831742223396249 => {
                  dir = 0;
                  if c == 'X' as i32 {
                    dir = -1i32
                  }
                  loop {
                    if *(*ptr_to_globals).dot.offset(dir as isize) as libc::c_int != '\n' as i32 {
                      if c == 'X' as i32 {
                        (*ptr_to_globals).dot = (*ptr_to_globals).dot.offset(-1)
                      }
                      (*ptr_to_globals).dot = yank_delete(
                        (*ptr_to_globals).dot,
                        (*ptr_to_globals).dot,
                        0,
                        YANKDEL as libc::c_int,
                        1i32,
                      )
                    }
                    (*ptr_to_globals).cmdcnt -= 1;
                    if !((*ptr_to_globals).cmdcnt > 0) {
                      break;
                    }
                  }
                  end_cmd_q();
                  if c == 's' as i32 {
                    current_block = 8629930936610358348;
                  } else {
                    current_block = 15129665204879337069;
                  }
                }
                2087484904894455135 => {
                  dot_end();
                  (*ptr_to_globals).dot =
                    char_insert((*ptr_to_globals).dot, '\n' as i32 as libc::c_char, 1i32);
                  current_block = 8629930936610358348;
                }
                11945623545738147997 => {
                  (*ptr_to_globals).dot = (*ptr_to_globals).end.offset(-1);
                  if (*ptr_to_globals).cmdcnt > 0 {
                    (*ptr_to_globals).dot = find_line((*ptr_to_globals).cmdcnt)
                  }
                  dot_skip_over_ws();
                  current_block = 15129665204879337069;
                }
                5847749760081351726 => {
                  dir = FORWARD as libc::c_int;
                  if c == 'B' as i32 {
                    dir = BACK as libc::c_int
                  }
                  loop {
                    if c == 'W' as i32
                      || ({
                        let mut bb__isspace: libc::c_uchar =
                          (*(*ptr_to_globals).dot.offset(dir as isize) as libc::c_int - 9i32)
                            as libc::c_uchar;
                        (bb__isspace as libc::c_int == ' ' as i32 - 9i32
                          || bb__isspace as libc::c_int <= 13i32 - 9i32)
                          as libc::c_int
                      }) != 0
                    {
                      (*ptr_to_globals).dot =
                        skip_thing((*ptr_to_globals).dot, 1i32, dir, S_TO_WS as libc::c_int);
                      (*ptr_to_globals).dot =
                        skip_thing((*ptr_to_globals).dot, 2i32, dir, S_OVER_WS as libc::c_int)
                    }
                    if c != 'W' as i32 {
                      (*ptr_to_globals).dot =
                        skip_thing((*ptr_to_globals).dot, 1i32, dir, S_BEFORE_WS as libc::c_int)
                    }
                    (*ptr_to_globals).cmdcnt -= 1;
                    if !((*ptr_to_globals).cmdcnt > 0) {
                      break;
                    }
                  }
                  current_block = 15129665204879337069;
                }
                17440971994642376514 => {
                  current_block = 15129665204879337069;
                }
                7534742345255184552 => {
                  current_block = 17247297260531395789;
                }
                8800996768013373992 => {
                  loop {
                    dot_next();
                    (*ptr_to_globals).dot = move_to_col(
                      (*ptr_to_globals).dot,
                      (*ptr_to_globals).ccol + (*ptr_to_globals).offset,
                    );
                    (*ptr_to_globals).cmdcnt -= 1;
                    if !((*ptr_to_globals).cmdcnt > 0) {
                      break;
                    }
                  }
                  current_block = 15129665204879337069;
                }
                13993698454868426881 => {
                  loop {
                    dot_right();
                    (*ptr_to_globals).cmdcnt -= 1;
                    if !((*ptr_to_globals).cmdcnt > 0) {
                      break;
                    }
                  }
                  current_block = 15129665204879337069;
                }
                7856905509180742666 => {
                  while !((*ptr_to_globals).last_forward_char == 0) {
                    q = (*ptr_to_globals).dot.offset(1);
                    while q < (*ptr_to_globals).end.offset(-1)
                      && *q as libc::c_int != '\n' as i32
                      && *q as libc::c_int != (*ptr_to_globals).last_forward_char
                    {
                      q = q.offset(1)
                    }
                    if *q as libc::c_int == (*ptr_to_globals).last_forward_char {
                      (*ptr_to_globals).dot = q
                    }
                    (*ptr_to_globals).cmdcnt -= 1;
                    if !((*ptr_to_globals).cmdcnt > 0) {
                      break;
                    }
                  }
                  current_block = 15129665204879337069;
                }
                17498168302144015873 => {
                  current_block = 8681395796513813967;
                }
                1752638907092016026 => {
                  if *(*ptr_to_globals).dot as libc::c_int != '\n' as i32 {
                    (*ptr_to_globals).dot = (*ptr_to_globals).dot.offset(1)
                  }
                  current_block = 8629930936610358348;
                }
                3268579060917229304 => {
                  current_block = 8629930936610358348;
                }
                1895262434596074581 => {
                  current_block = 8908416993177701018;
                }
                _ => {}
              }
              match current_block {
                8629930936610358348 => {}
                15129665204879337069 => {}
                _ => {
                  match current_block {
                    17247297260531395789 => {
                      loop {
                        dot_left();
                        (*ptr_to_globals).cmdcnt -= 1;
                        if !((*ptr_to_globals).cmdcnt > 0) {
                          break;
                        }
                      }
                      current_block = 15129665204879337069;
                    }
                    8681395796513813967 => {
                      current_block = 5591548203144509315;
                    }
                    8908416993177701018 => {
                      current_block = 16124761010012532485;
                    }
                    _ => {}
                  }
                  match current_block {
                    15129665204879337069 => {}
                    _ => {
                      match current_block {
                        16124761010012532485 => {
                          let mut yf: libc::c_int = 0;
                          let mut ml: libc::c_int = 0;
                          let mut whole: libc::c_int = 0;
                          yf = YANKDEL as libc::c_int;
                          if c == 'y' as i32 || c == 'Y' as i32 {
                            yf = YANKONLY as libc::c_int
                          }
                          c1 = 'y' as i32;
                          if c != 'Y' as i32 {
                            c1 = get_one_char()
                          }
                          ml = find_range(&mut p, &mut q, c1 as libc::c_char);
                          place_cursor(0i32, 0);
                          if c1 == 27i32 {
                            c1 = 27i32;
                            c = c1
                          } else if !strchr(b"wW\x00" as *const u8 as *const libc::c_char, c1)
                            .is_null()
                          {
                            ml = 0;
                            if c == 'c' as i32 {
                              while ({
                                let mut bb__isspace: libc::c_uchar =
                                  (*q as libc::c_int - 9i32) as libc::c_uchar;
                                (bb__isspace as libc::c_int == ' ' as i32 - 9i32
                                  || bb__isspace as libc::c_int <= 13i32 - 9i32)
                                  as libc::c_int
                              }) != 0
                                && q > p
                              {
                                q = q.offset(-1)
                              }
                            }
                            (*ptr_to_globals).dot = yank_delete(p, q, ml, yf, 1i32)
                          } else if !strchr(
                            b"^0bBeEft%$ lh\x08\x7f\x00" as *const u8 as *const libc::c_char,
                            c1,
                          )
                          .is_null()
                          {
                            (*ptr_to_globals).dot = yank_delete(p, q, ml, yf, 1i32)
                          } else if !strchr(
                            b"cdykjGHL+-{}\r\n\x00" as *const u8 as *const libc::c_char,
                            c1,
                          )
                          .is_null()
                          {
                            (*ptr_to_globals).dot = yank_delete(p, q, ml, yf, 1i32);
                            whole = 1i32
                          } else {
                            c1 = 27i32;
                            c = c1;
                            ml = 0;
                            indicate_error();
                          }
                          if ml != 0 && whole != 0 {
                            if c == 'c' as i32 {
                              (*ptr_to_globals).dot = char_insert(
                                (*ptr_to_globals).dot,
                                '\n' as i32 as libc::c_char,
                                2i32,
                              );
                              if whole != 0
                                && (*ptr_to_globals).dot != (*ptr_to_globals).end.offset(-1)
                              {
                                dot_prev();
                              }
                            } else if c == 'd' as i32 {
                              dot_begin();
                              dot_skip_over_ws();
                            }
                          }
                          if c1 != 27i32 {
                            if c == 'c' as i32 {
                              strcpy(
                                buf.as_mut_ptr(),
                                b"Change\x00" as *const u8 as *const libc::c_char,
                              );
                              current_block = 8629930936610358348;
                            } else {
                              if c == 'd' as i32 {
                                strcpy(
                                  buf.as_mut_ptr(),
                                  b"Delete\x00" as *const u8 as *const libc::c_char,
                                );
                              }
                              if c == 'y' as i32 || c == 'Y' as i32 {
                                strcpy(
                                  buf.as_mut_ptr(),
                                  b"Yank\x00" as *const u8 as *const libc::c_char,
                                );
                              }
                              p = (*ptr_to_globals).reg[(*ptr_to_globals).YDreg as usize];
                              q = p.offset(strlen(p) as isize);
                              cnt = 0;
                              while p <= q {
                                if *p as libc::c_int == '\n' as i32 {
                                  cnt += 1
                                }
                                p = p.offset(1)
                              }
                              status_line(
                                b"%s %u lines (%u chars) using [%c]\x00" as *const u8
                                  as *const libc::c_char,
                                buf.as_mut_ptr(),
                                cnt,
                                strlen((*ptr_to_globals).reg[(*ptr_to_globals).YDreg as usize])
                                  as libc::c_uint,
                                what_reg() as libc::c_int,
                              );
                              end_cmd_q();
                              current_block = 15129665204879337069;
                            }
                          } else {
                            current_block = 15129665204879337069;
                          }
                        }
                        5591548203144509315 => {
                          current_block = 2636677179867529885;
                        }
                        _ => {}
                      }
                      match current_block {
                        15129665204879337069 => {}
                        8629930936610358348 => {}
                        _ => {
                          match current_block {
                            2636677179867529885 => {
                              current_block = 12309206730560524281;
                            }
                            _ => {}
                          }
                          match current_block {
                            12309206730560524281 => {
                              current_block = 3325768110057758661;
                            }
                            _ => {}
                          }
                          match current_block {
                            3325768110057758661 => {
                              current_block = 14815832896553429982;
                            }
                            _ => {}
                          }
                          match current_block {
                            14815832896553429982 => {
                              current_block = 10731695520297161438;
                            }
                            _ => {}
                          }
                          match current_block {
                            10731695520297161438 => {
                              if c == '0' as i32 && (*ptr_to_globals).cmdcnt < 1i32 {
                                dot_begin();
                              } else {
                                (*ptr_to_globals).cmdcnt =
                                  (*ptr_to_globals).cmdcnt * 10i32 + (c - '0' as i32)
                              }
                              current_block = 15129665204879337069;
                            }
                            _ => {}
                          }
                          match current_block {
                            15129665204879337069 => {}
                            _ => {
                              loop {
                                match current_block {
                                  16813369756331276724 => {
                                    msg = std::ptr::null();
                                    current_block = 7392824444931029276;
                                  }
                                  7392824444931029276 => {
                                    dir = FORWARD as libc::c_int;
                                    p = (*ptr_to_globals).dot.offset(1);
                                    if *(*ptr_to_globals).last_search_pattern.offset(0)
                                      as libc::c_int
                                      == '?' as i32
                                    {
                                      dir = BACK as libc::c_int;
                                      p = (*ptr_to_globals).dot.offset(-1)
                                    }
                                    current_block = 4166979493554389389;
                                  }
                                  _ => {
                                    q = char_search(
                                      p,
                                      (*ptr_to_globals).last_search_pattern.offset(1),
                                      dir << 1i32 | FULL as libc::c_int,
                                    );
                                    if !q.is_null() {
                                      (*ptr_to_globals).dot = q;
                                      msg = std::ptr::null()
                                    } else {
                                      p = (*ptr_to_globals).text;
                                      if dir == BACK as libc::c_int {
                                        p = (*ptr_to_globals).end.offset(-1)
                                      }
                                      q = char_search(
                                        p,
                                        (*ptr_to_globals).last_search_pattern.offset(1),
                                        dir << 1i32 | FULL as libc::c_int,
                                      );
                                      if !q.is_null() {
                                        (*ptr_to_globals).dot = q;
                                        msg = b"search hit BOTTOM, continuing at TOP\x00"
                                          as *const u8
                                          as *const libc::c_char;
                                        if dir == BACK as libc::c_int {
                                          msg = b"search hit TOP, continuing at BOTTOM\x00"
                                            as *const u8
                                            as *const libc::c_char
                                        }
                                      } else {
                                        msg = b"Pattern not found\x00" as *const u8
                                          as *const libc::c_char
                                      }
                                    }
                                    if !msg.is_null() {
                                      status_line_bold(
                                        b"%s\x00" as *const u8 as *const libc::c_char,
                                        msg,
                                      );
                                    }
                                    (*ptr_to_globals).cmdcnt -= 1;
                                    if (*ptr_to_globals).cmdcnt > 0 {
                                      current_block = 16813369756331276724;
                                    } else {
                                      break;
                                    }
                                  }
                                }
                              }
                              current_block = 15129665204879337069;
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
        94 => {
          current_block = 1085022737867179637;
          match current_block {
            16992905640583886232 => {
              loop {
                if (*(*ptr_to_globals).dot as libc::c_int - 'a' as i32) as libc::c_uchar
                  as libc::c_int
                  <= 'z' as i32 - 'a' as i32
                {
                  undo_push(
                    (*ptr_to_globals).dot,
                    1i32 as libc::c_uint,
                    1i32 as libc::c_uchar,
                  );
                  *(*ptr_to_globals).dot =
                    bb_ascii_toupper(*(*ptr_to_globals).dot as libc::c_uchar) as libc::c_char;
                  undo_push(
                    (*ptr_to_globals).dot,
                    1i32 as libc::c_uint,
                    2i32 as libc::c_uchar,
                  );
                } else if (*(*ptr_to_globals).dot as libc::c_int - 'A' as i32) as libc::c_uchar
                  as libc::c_int
                  <= 'Z' as i32 - 'A' as i32
                {
                  undo_push(
                    (*ptr_to_globals).dot,
                    1i32 as libc::c_uint,
                    1i32 as libc::c_uchar,
                  );
                  *(*ptr_to_globals).dot =
                    bb_ascii_tolower(*(*ptr_to_globals).dot as libc::c_uchar) as libc::c_char;
                  undo_push(
                    (*ptr_to_globals).dot,
                    1i32 as libc::c_uint,
                    2i32 as libc::c_uchar,
                  );
                }
                dot_right();
                (*ptr_to_globals).cmdcnt -= 1;
                if !((*ptr_to_globals).cmdcnt > 0) {
                  break;
                }
              }
              end_cmd_q();
              current_block = 15129665204879337069;
            }
            8729655159604064397 => {
              c1 = get_one_char();
              cnt = 0;
              if c1 == '.' as i32 {
                cnt = (*ptr_to_globals)
                  .rows
                  .wrapping_sub(2i32 as libc::c_uint)
                  .wrapping_div(2i32 as libc::c_uint) as libc::c_int
              }
              if c1 == '-' as i32 {
                cnt = (*ptr_to_globals).rows.wrapping_sub(2i32 as libc::c_uint) as libc::c_int
              }
              (*ptr_to_globals).screenbegin = begin_line((*ptr_to_globals).dot);
              dot_scroll(cnt, -1i32);
              current_block = 15129665204879337069;
            }
            15899500648299942075 => {
              (*ptr_to_globals).last_forward_char = get_one_char();
              do_cmd(';' as i32);
              if *(*ptr_to_globals).dot as libc::c_int == (*ptr_to_globals).last_forward_char {
                dot_left();
              }
              (*ptr_to_globals).last_forward_char = 0;
              current_block = 15129665204879337069;
            }
            9051390181078481641 => {
              c1 = get_one_char();
              if *(*ptr_to_globals).dot as libc::c_int != '\n' as i32 {
                (*ptr_to_globals).dot =
                  text_hole_delete((*ptr_to_globals).dot, (*ptr_to_globals).dot, 1i32);
                (*ptr_to_globals).dot =
                  char_insert((*ptr_to_globals).dot, c1 as libc::c_char, 2i32);
                dot_left();
              }
              end_cmd_q();
              current_block = 15129665204879337069;
            }
            877115918601926659 => {
              dir = FORWARD as libc::c_int;
              if c == 'b' as i32 {
                dir = BACK as libc::c_int
              }
              while !((*ptr_to_globals).dot.offset(dir as isize) < (*ptr_to_globals).text
                || (*ptr_to_globals).dot.offset(dir as isize) > (*ptr_to_globals).end.offset(-1))
              {
                (*ptr_to_globals).dot = (*ptr_to_globals).dot.offset(dir as isize);
                if ({
                  let mut bb__isspace: libc::c_uchar =
                    (*(*ptr_to_globals).dot as libc::c_int - 9i32) as libc::c_uchar;
                  (bb__isspace as libc::c_int == ' ' as i32 - 9i32
                    || bb__isspace as libc::c_int <= 13i32 - 9i32) as libc::c_int
                }) != 0
                {
                  (*ptr_to_globals).dot = skip_thing(
                    (*ptr_to_globals).dot,
                    if c == 'e' as i32 { 2i32 } else { 1i32 },
                    dir,
                    S_OVER_WS as libc::c_int,
                  )
                }
                if bb_ascii_isalnum(*(*ptr_to_globals).dot as libc::c_uchar) != 0
                  || *(*ptr_to_globals).dot as libc::c_int == '_' as i32
                {
                  (*ptr_to_globals).dot =
                    skip_thing((*ptr_to_globals).dot, 1i32, dir, S_END_ALNUM as libc::c_int)
                } else if *strchrnul(
                  b"!\"#$%&\'()*+,-./:;<=>?@[\\]^_`{|}~\x00" as *const u8 as *const libc::c_char,
                  *(*ptr_to_globals).dot as libc::c_int,
                )
                .offset(0)
                  != 0
                {
                  (*ptr_to_globals).dot =
                    skip_thing((*ptr_to_globals).dot, 1i32, dir, S_END_PUNCT as libc::c_int)
                }
                (*ptr_to_globals).cmdcnt -= 1;
                if !((*ptr_to_globals).cmdcnt > 0) {
                  break;
                }
              }
              current_block = 15129665204879337069;
            }
            1085022737867179637 => {
              dot_begin();
              dot_skip_over_ws();
              current_block = 15129665204879337069;
            }
            3113147720494587438 => {
              c1 = get_one_char();
              if c1 != 'Z' as i32 {
                indicate_error();
              } else if (*ptr_to_globals).modified_count != 0 {
                if 1i32 != 0 && (*ptr_to_globals).readonly_mode as libc::c_int != 0 {
                  status_line_bold(
                    b"\'%s\' is read only\x00" as *const u8 as *const libc::c_char,
                    (*ptr_to_globals).current_filename,
                  );
                } else {
                  cnt = file_write(
                    (*ptr_to_globals).current_filename,
                    (*ptr_to_globals).text,
                    (*ptr_to_globals).end.offset(-1),
                  );
                  if cnt < 0 {
                    if cnt == -1i32 {
                      status_line_bold(b"Write error: %m\x00" as *const u8 as *const libc::c_char);
                    }
                  } else if cnt as libc::c_long
                    == (*ptr_to_globals)
                      .end
                      .offset(-1)
                      .wrapping_offset_from((*ptr_to_globals).text)
                      as libc::c_long
                      + 1
                  {
                    (*ptr_to_globals).editing = 0 as smallint
                  }
                }
              } else {
                (*ptr_to_globals).editing = 0 as smallint
              }
              current_block = 15129665204879337069;
            }
            12960118908218882441 => {
              p = begin_line((*ptr_to_globals).dot);
              if *p.offset(-1i32 as isize) as libc::c_int == '\n' as i32 {
                dot_prev();
                current_block = 2087484904894455135;
              } else {
                dot_begin();
                (*ptr_to_globals).dot =
                  char_insert((*ptr_to_globals).dot, '\n' as i32 as libc::c_char, 1i32);
                dot_prev();
                current_block = 8629930936610358348;
              }
            }
            8720450212473544924 => {
              (*ptr_to_globals).dot = (*ptr_to_globals).screenbegin;
              cnt = 0;
              while (cnt as libc::c_uint)
                < (*ptr_to_globals)
                  .rows
                  .wrapping_sub(1i32 as libc::c_uint)
                  .wrapping_div(2i32 as libc::c_uint)
              {
                (*ptr_to_globals).dot = next_line((*ptr_to_globals).dot);
                cnt += 1
              }
              current_block = 15129665204879337069;
            }
            13015277209715431090 => {
              (*ptr_to_globals).dot = end_screen();
              if (*ptr_to_globals).cmdcnt as libc::c_uint
                > (*ptr_to_globals).rows.wrapping_sub(1i32 as libc::c_uint)
              {
                (*ptr_to_globals).cmdcnt =
                  (*ptr_to_globals).rows.wrapping_sub(1i32 as libc::c_uint) as libc::c_int
              }
              (*ptr_to_globals).cmdcnt -= 1;
              if (*ptr_to_globals).cmdcnt > 0 {
                do_cmd('-' as i32);
              }
              dot_begin();
              dot_skip_over_ws();
              current_block = 15129665204879337069;
            }
            9800435767766781385 => {
              loop {
                dot_end();
                if (*ptr_to_globals).dot < (*ptr_to_globals).end.offset(-1) {
                  undo_push(
                    (*ptr_to_globals).dot,
                    1i32 as libc::c_uint,
                    1i32 as libc::c_uchar,
                  );
                  let fresh15 = (*ptr_to_globals).dot;
                  (*ptr_to_globals).dot = (*ptr_to_globals).dot.offset(1);
                  *fresh15 = ' ' as i32 as libc::c_char;
                  undo_push(
                    (*ptr_to_globals).dot.offset(-1),
                    1i32 as libc::c_uint,
                    2i32 as libc::c_uchar,
                  );
                  while ({
                    let mut bb__isblank: libc::c_uchar = *(*ptr_to_globals).dot as libc::c_uchar;
                    (bb__isblank as libc::c_int == ' ' as i32
                      || bb__isblank as libc::c_int == '\t' as i32)
                      as libc::c_int
                  }) != 0
                  {
                    text_hole_delete((*ptr_to_globals).dot, (*ptr_to_globals).dot, 2i32);
                  }
                }
                (*ptr_to_globals).cmdcnt -= 1;
                if !((*ptr_to_globals).cmdcnt > 0) {
                  break;
                }
              }
              end_cmd_q();
              current_block = 15129665204879337069;
            }
            3432363526595694666 => {
              dot_begin();
              dot_skip_over_ws();
              current_block = 3268579060917229304;
            }
            3494829253343353619 => {
              (*ptr_to_globals).dot = (*ptr_to_globals).screenbegin;
              if (*ptr_to_globals).cmdcnt as libc::c_uint
                > (*ptr_to_globals).rows.wrapping_sub(1i32 as libc::c_uint)
              {
                (*ptr_to_globals).cmdcnt =
                  (*ptr_to_globals).rows.wrapping_sub(1i32 as libc::c_uint) as libc::c_int
              }
              (*ptr_to_globals).cmdcnt -= 1;
              if (*ptr_to_globals).cmdcnt > 0 {
                do_cmd('+' as i32);
              }
              dot_skip_over_ws();
              current_block = 15129665204879337069;
            }
            17973101765331640574 => {
              c1 = get_one_char();
              if c1 != 'g' as i32 {
                buf[0] = 'g' as i32 as libc::c_char;
                buf[1] = if c1 >= 0 { c1 } else { '*' as i32 } as libc::c_char;
                buf[2] = '\u{0}' as i32 as libc::c_char;
                not_implemented(buf.as_mut_ptr());
                current_block = 15129665204879337069;
              } else {
                if (*ptr_to_globals).cmdcnt == 0 {
                  (*ptr_to_globals).cmdcnt = 1i32
                }
                current_block = 11945623545738147997;
              }
            }
            16546625800574160972 => {
              save_dot = (*ptr_to_globals).dot;
              (*ptr_to_globals).dot = dollar_line((*ptr_to_globals).dot);
              (*ptr_to_globals).dot = yank_delete(
                save_dot,
                (*ptr_to_globals).dot,
                0,
                YANKDEL as libc::c_int,
                1i32,
              );
              if c == 'C' as i32 {
                current_block = 8629930936610358348;
              } else {
                if c == 'D' as i32 {
                  end_cmd_q();
                }
                current_block = 15129665204879337069;
              }
            }
            11937696639986586685 => {
              cnt = count_lines((*ptr_to_globals).text, (*ptr_to_globals).dot);
              c1 = get_one_char();
              find_range(&mut p, &mut q, c1 as libc::c_char);
              yank_delete(p, q, 1i32, YANKONLY as libc::c_int, 0);
              p = begin_line(p);
              q = end_line(q);
              i = count_lines(p, q);
              while i > 0 {
                if c == '<' as i32 {
                  if *p as libc::c_int == '\t' as i32 {
                    text_hole_delete(p, p, 0);
                  } else if *p as libc::c_int == ' ' as i32 {
                    j = 0;
                    while *p as libc::c_int == ' ' as i32 && j < (*ptr_to_globals).tabstop {
                      text_hole_delete(p, p, 0);
                      j += 1
                    }
                  }
                } else if c == '>' as i32 {
                  char_insert(p, '\t' as i32 as libc::c_char, 1i32);
                }
                i -= 1;
                p = next_line(p)
              }
              (*ptr_to_globals).dot = find_line(cnt);
              dot_skip_over_ws();
              end_cmd_q();
              current_block = 15129665204879337069;
            }
            17725350714912028156 => {
              p = get_input_line(b":\x00" as *const u8 as *const libc::c_char);
              colon(p);
              current_block = 15129665204879337069;
            }
            14526470074083880812 => {
              q = char_search(
                (*ptr_to_globals).dot,
                b"\n\n\x00" as *const u8 as *const libc::c_char,
                (FORWARD as libc::c_int) << 1i32 | FULL as libc::c_int,
              );
              if !q.is_null() {
                (*ptr_to_globals).dot = next_line(q)
              }
              current_block = 15129665204879337069;
            }
            8893187391306414141 => {
              q = char_search(
                (*ptr_to_globals).dot,
                b"\n\n\x00" as *const u8 as *const libc::c_char,
                ((BACK as libc::c_int as libc::c_uint) << 1i32
                  | FULL as libc::c_int as libc::c_uint) as libc::c_int,
              );
              if !q.is_null() {
                (*ptr_to_globals).dot = next_line(q)
              }
              current_block = 15129665204879337069;
            }
            7021673758293221412 => {
              dir = BACK as libc::c_int;
              p = (*ptr_to_globals).dot.offset(-1);
              if *(*ptr_to_globals).last_search_pattern.offset(0) as libc::c_int == '?' as i32 {
                dir = FORWARD as libc::c_int;
                p = (*ptr_to_globals).dot.offset(1)
              }
              current_block = 4166979493554389389;
            }
            18374191879090272823 => {
              buf[0] = c as libc::c_char;
              buf[1] = '\u{0}' as i32 as libc::c_char;
              q = get_input_line(buf.as_mut_ptr());
              if *q.offset(0) as libc::c_int != 0 && *q.offset(1) == 0 {
                if *(*ptr_to_globals).last_search_pattern.offset(0) != 0 {
                  *(*ptr_to_globals).last_search_pattern.offset(0) = c as libc::c_char
                }
                current_block = 7392824444931029276;
              } else if *q.offset(0) != 0 {
                free((*ptr_to_globals).last_search_pattern as *mut libc::c_void);
                (*ptr_to_globals).last_search_pattern = crate::libbb::xfuncs_printf::xstrdup(q);
                current_block = 7392824444931029276;
              } else {
                current_block = 15129665204879337069;
              }
            }
            16407828456666301883 => {
              if (*ptr_to_globals).last_forward_char == 0 {
                current_block = 15129665204879337069;
              } else {
                loop {
                  q = (*ptr_to_globals).dot.offset(-1);
                  while q >= (*ptr_to_globals).text
                    && *q as libc::c_int != '\n' as i32
                    && *q as libc::c_int != (*ptr_to_globals).last_forward_char
                  {
                    q = q.offset(-1)
                  }
                  if q >= (*ptr_to_globals).text
                    && *q as libc::c_int == (*ptr_to_globals).last_forward_char
                  {
                    (*ptr_to_globals).dot = q
                  }
                  (*ptr_to_globals).cmdcnt -= 1;
                  if !((*ptr_to_globals).cmdcnt > 0) {
                    break;
                  }
                }
                current_block = 15129665204879337069;
              }
            }
            9018432604062702004 => {
              q = (*ptr_to_globals).dot;
              while q < (*ptr_to_globals).end && *q as libc::c_int != '\n' as i32 {
                if !strchr(
                  b"()[]{}\x00" as *const u8 as *const libc::c_char,
                  *q as libc::c_int,
                )
                .is_null()
                {
                  p = find_pair(q, *q);
                  if p.is_null() {
                    indicate_error();
                  } else {
                    (*ptr_to_globals).dot = p
                  }
                  break;
                } else {
                  q = q.offset(1)
                }
              }
              if *q as libc::c_int == '\n' as i32 {
                indicate_error();
              }
              current_block = 15129665204879337069;
            }
            10247103787464459848 => {
              p = (*ptr_to_globals).reg[(*ptr_to_globals).YDreg as usize];
              if p.is_null() {
                status_line_bold(
                  b"Nothing in register %c\x00" as *const u8 as *const libc::c_char,
                  what_reg() as libc::c_int,
                );
              } else {
                if !strchr(p, '\n' as i32).is_null() {
                  if c == 'P' as i32 {
                    dot_begin();
                  }
                  if c == 'p' as i32 {
                    if end_line((*ptr_to_globals).dot) == (*ptr_to_globals).end.offset(-1) {
                      (*ptr_to_globals).dot = (*ptr_to_globals).end
                    } else {
                      dot_next();
                    }
                  }
                } else if c == 'p' as i32 {
                  dot_right();
                }
                string_insert((*ptr_to_globals).dot, p, 1i32);
                end_cmd_q();
              }
              current_block = 15129665204879337069;
            }
            15260732871948875843 => {
              c1 = (get_one_char() | 0x20i32) - 'a' as i32;
              if c1 as libc::c_uint <= 25i32 as libc::c_uint {
                (*ptr_to_globals).mark[c1 as usize] = (*ptr_to_globals).dot
              } else {
                indicate_error();
              }
              current_block = 15129665204879337069;
            }
            12738322036487086035 => {
              c1 = get_one_char() | 0x20i32;
              if (c1 - 'a' as i32) as libc::c_uint <= 25i32 as libc::c_uint {
                c1 = c1 - 'a' as i32;
                q = (*ptr_to_globals).mark[c1 as usize];
                if (*ptr_to_globals).text <= q && q < (*ptr_to_globals).end {
                  (*ptr_to_globals).dot = q;
                  dot_begin();
                  dot_skip_over_ws();
                }
              } else if c1 == '\'' as i32 {
                (*ptr_to_globals).dot = swap_context((*ptr_to_globals).dot);
                dot_begin();
                dot_skip_over_ws();
              } else {
                indicate_error();
              }
              current_block = 15129665204879337069;
            }
            13255096073384561358 => {
              c1 = (get_one_char() | 0x20i32) - 'a' as i32;
              if c1 as libc::c_uint <= 25i32 as libc::c_uint {
                (*ptr_to_globals).YDreg = c1 as smalluint
              } else {
                indicate_error();
              }
              current_block = 15129665204879337069;
            }
            10258711639984089377 => {
              if (*ptr_to_globals).cmd_mode as libc::c_int == 0 {
                indicate_error();
              }
              (*ptr_to_globals).cmd_mode = 0 as smallint;
              undo_queue_commit();
              end_cmd_q();
              (*ptr_to_globals).last_status_cksum = 0;
              current_block = 15129665204879337069;
            }
            11439127087547047736 => {
              buf[0] = c as libc::c_char;
              buf[1] = '\u{0}' as i32 as libc::c_char;
              not_implemented(buf.as_mut_ptr());
              end_cmd_q();
              current_block = 17440971994642376514;
            }
            7961798899781870241 => {
              dot_scroll(
                (*ptr_to_globals).rows.wrapping_sub(2i32 as libc::c_uint) as libc::c_int,
                -1i32,
              );
              current_block = 15129665204879337069;
            }
            9426343755402444879 => {
              dot_scroll(
                (*ptr_to_globals)
                  .rows
                  .wrapping_sub(2i32 as libc::c_uint)
                  .wrapping_div(2i32 as libc::c_uint) as libc::c_int,
                1i32,
              );
              current_block = 15129665204879337069;
            }
            13352459794680105913 => {
              dot_scroll(1i32, 1i32);
              current_block = 15129665204879337069;
            }
            14142272253464333006 => {
              dot_scroll(
                (*ptr_to_globals).rows.wrapping_sub(2i32 as libc::c_uint) as libc::c_int,
                1i32,
              );
              current_block = 15129665204879337069;
            }
            10758177197742640066 => {
              (*ptr_to_globals).last_status_cksum = 0;
              current_block = 15129665204879337069;
            }
            6152256259730122749 => {
              current_block = 7534742345255184552;
            }
            12883932598258173301 => {
              current_block = 8800996768013373992;
            }
            11242998110520238401 => {
              redraw(1i32);
              current_block = 15129665204879337069;
            }
            13619733043935729992 => {
              loop {
                dot_next();
                dot_skip_over_ws();
                (*ptr_to_globals).cmdcnt -= 1;
                if !((*ptr_to_globals).cmdcnt > 0) {
                  break;
                }
              }
              current_block = 15129665204879337069;
            }
            9339065157412720613 => {
              dot_scroll(
                (*ptr_to_globals)
                  .rows
                  .wrapping_sub(2i32 as libc::c_uint)
                  .wrapping_div(2i32 as libc::c_uint) as libc::c_int,
                -1i32,
              );
              current_block = 15129665204879337069;
            }
            11447082683497798022 => {
              dot_scroll(1i32, -1i32);
              current_block = 15129665204879337069;
            }
            5182000506326660482 => {
              current_block = 13993698454868426881;
            }
            1105010766850597332 => {
              if !(*ptr_to_globals).reg[27].is_null() {
                p = begin_line((*ptr_to_globals).dot);
                q = end_line((*ptr_to_globals).dot);
                p = text_hole_delete(p, q, 1i32);
                p = p.offset(string_insert(p, (*ptr_to_globals).reg[27], 2i32) as isize);
                (*ptr_to_globals).dot = p;
                dot_skip_over_ws();
              }
              current_block = 15129665204879337069;
            }
            8616046655533110204 => {
              undo_pop();
              current_block = 15129665204879337069;
            }
            5127767458142431603 => {
              loop {
                (*ptr_to_globals).dot = end_line((*ptr_to_globals).dot);
                (*ptr_to_globals).cmdcnt -= 1;
                if (*ptr_to_globals).cmdcnt <= 0 {
                  break;
                }
                dot_next();
              }
              current_block = 15129665204879337069;
            }
            222014967776118151 => {
              (*ptr_to_globals).last_forward_char = get_one_char();
              current_block = 7856905509180742666;
            }
            11209792479411604110 => {
              loop {
                dot_prev();
                dot_skip_over_ws();
                (*ptr_to_globals).cmdcnt -= 1;
                if !((*ptr_to_globals).cmdcnt > 0) {
                  break;
                }
              }
              current_block = 15129665204879337069;
            }
            3364823792826654116 => {
              if (*ptr_to_globals).lmc_len != 0 {
                (*ptr_to_globals).ioq_start = crate::libbb::xfuncs_printf::xstrndup(
                  (*ptr_to_globals).last_modifying_cmd.as_mut_ptr(),
                  (*ptr_to_globals).lmc_len,
                );
                (*ptr_to_globals).ioq = (*ptr_to_globals).ioq_start
              }
              current_block = 15129665204879337069;
            }
            18096603330221575131 => {
              current_block = 17498168302144015873;
            }
            16891123271837848903 => {
              dot_end();
              current_block = 1752638907092016026;
            }
            8517235759107662071 => {
              current_block = 5847749760081351726;
            }
            12525254419223051704 => {
              if (*ptr_to_globals).dot < (*ptr_to_globals).end.offset(-1) {
                (*ptr_to_globals).dot = yank_delete(
                  (*ptr_to_globals).dot,
                  (*ptr_to_globals).dot,
                  1i32,
                  YANKDEL as libc::c_int,
                  1i32,
                )
              }
              current_block = 15129665204879337069;
            }
            15232911949322867522 => {
              current_block = 17251831742223396249;
            }
            10863374208794025069 => {
              current_block = 1895262434596074581;
            }
            451126677064669119 => {
              loop {
                dot_prev();
                (*ptr_to_globals).dot = move_to_col(
                  (*ptr_to_globals).dot,
                  (*ptr_to_globals).ccol + (*ptr_to_globals).offset,
                );
                (*ptr_to_globals).cmdcnt -= 1;
                if !((*ptr_to_globals).cmdcnt > 0) {
                  break;
                }
              }
              current_block = 15129665204879337069;
            }
            4611735929166613116 => {
              loop {
                if bb_ascii_isalnum(*(*ptr_to_globals).dot as libc::c_uchar) != 0
                  || *(*ptr_to_globals).dot as libc::c_int == '_' as i32
                {
                  (*ptr_to_globals).dot = skip_thing(
                    (*ptr_to_globals).dot,
                    1i32,
                    FORWARD as libc::c_int,
                    S_END_ALNUM as libc::c_int,
                  )
                } else if *strchrnul(
                  b"!\"#$%&\'()*+,-./:;<=>?@[\\]^_`{|}~\x00" as *const u8 as *const libc::c_char,
                  *(*ptr_to_globals).dot as libc::c_int,
                )
                .offset(0)
                  != 0
                {
                  (*ptr_to_globals).dot = skip_thing(
                    (*ptr_to_globals).dot,
                    1i32,
                    FORWARD as libc::c_int,
                    S_END_PUNCT as libc::c_int,
                  )
                }
                if (*ptr_to_globals).dot < (*ptr_to_globals).end.offset(-1) {
                  (*ptr_to_globals).dot = (*ptr_to_globals).dot.offset(1)
                }
                if ({
                  let mut bb__isspace: libc::c_uchar =
                    (*(*ptr_to_globals).dot as libc::c_int - 9i32) as libc::c_uchar;
                  (bb__isspace as libc::c_int == ' ' as i32 - 9i32
                    || bb__isspace as libc::c_int <= 13i32 - 9i32) as libc::c_int
                }) != 0
                {
                  (*ptr_to_globals).dot = skip_thing(
                    (*ptr_to_globals).dot,
                    2i32,
                    FORWARD as libc::c_int,
                    S_OVER_WS as libc::c_int,
                  )
                }
                (*ptr_to_globals).cmdcnt -= 1;
                if !((*ptr_to_globals).cmdcnt > 0) {
                  break;
                }
              }
              current_block = 15129665204879337069;
            }
            4386451087681909888 => {
              (*ptr_to_globals).dot =
                move_to_col((*ptr_to_globals).dot, (*ptr_to_globals).cmdcnt - 1i32);
              current_block = 15129665204879337069;
            }
            1296397779060594135 => {
              dot_begin();
              current_block = 15129665204879337069;
            }
            _ => {}
          }
          match current_block {
            15129665204879337069 => {}
            8629930936610358348 => {}
            _ => {
              match current_block {
                17251831742223396249 => {
                  dir = 0;
                  if c == 'X' as i32 {
                    dir = -1i32
                  }
                  loop {
                    if *(*ptr_to_globals).dot.offset(dir as isize) as libc::c_int != '\n' as i32 {
                      if c == 'X' as i32 {
                        (*ptr_to_globals).dot = (*ptr_to_globals).dot.offset(-1)
                      }
                      (*ptr_to_globals).dot = yank_delete(
                        (*ptr_to_globals).dot,
                        (*ptr_to_globals).dot,
                        0,
                        YANKDEL as libc::c_int,
                        1i32,
                      )
                    }
                    (*ptr_to_globals).cmdcnt -= 1;
                    if !((*ptr_to_globals).cmdcnt > 0) {
                      break;
                    }
                  }
                  end_cmd_q();
                  if c == 's' as i32 {
                    current_block = 8629930936610358348;
                  } else {
                    current_block = 15129665204879337069;
                  }
                }
                2087484904894455135 => {
                  dot_end();
                  (*ptr_to_globals).dot =
                    char_insert((*ptr_to_globals).dot, '\n' as i32 as libc::c_char, 1i32);
                  current_block = 8629930936610358348;
                }
                11945623545738147997 => {
                  (*ptr_to_globals).dot = (*ptr_to_globals).end.offset(-1);
                  if (*ptr_to_globals).cmdcnt > 0 {
                    (*ptr_to_globals).dot = find_line((*ptr_to_globals).cmdcnt)
                  }
                  dot_skip_over_ws();
                  current_block = 15129665204879337069;
                }
                5847749760081351726 => {
                  dir = FORWARD as libc::c_int;
                  if c == 'B' as i32 {
                    dir = BACK as libc::c_int
                  }
                  loop {
                    if c == 'W' as i32
                      || ({
                        let mut bb__isspace: libc::c_uchar =
                          (*(*ptr_to_globals).dot.offset(dir as isize) as libc::c_int - 9i32)
                            as libc::c_uchar;
                        (bb__isspace as libc::c_int == ' ' as i32 - 9i32
                          || bb__isspace as libc::c_int <= 13i32 - 9i32)
                          as libc::c_int
                      }) != 0
                    {
                      (*ptr_to_globals).dot =
                        skip_thing((*ptr_to_globals).dot, 1i32, dir, S_TO_WS as libc::c_int);
                      (*ptr_to_globals).dot =
                        skip_thing((*ptr_to_globals).dot, 2i32, dir, S_OVER_WS as libc::c_int)
                    }
                    if c != 'W' as i32 {
                      (*ptr_to_globals).dot =
                        skip_thing((*ptr_to_globals).dot, 1i32, dir, S_BEFORE_WS as libc::c_int)
                    }
                    (*ptr_to_globals).cmdcnt -= 1;
                    if !((*ptr_to_globals).cmdcnt > 0) {
                      break;
                    }
                  }
                  current_block = 15129665204879337069;
                }
                17440971994642376514 => {
                  current_block = 15129665204879337069;
                }
                7534742345255184552 => {
                  current_block = 17247297260531395789;
                }
                8800996768013373992 => {
                  loop {
                    dot_next();
                    (*ptr_to_globals).dot = move_to_col(
                      (*ptr_to_globals).dot,
                      (*ptr_to_globals).ccol + (*ptr_to_globals).offset,
                    );
                    (*ptr_to_globals).cmdcnt -= 1;
                    if !((*ptr_to_globals).cmdcnt > 0) {
                      break;
                    }
                  }
                  current_block = 15129665204879337069;
                }
                13993698454868426881 => {
                  loop {
                    dot_right();
                    (*ptr_to_globals).cmdcnt -= 1;
                    if !((*ptr_to_globals).cmdcnt > 0) {
                      break;
                    }
                  }
                  current_block = 15129665204879337069;
                }
                7856905509180742666 => {
                  while !((*ptr_to_globals).last_forward_char == 0) {
                    q = (*ptr_to_globals).dot.offset(1);
                    while q < (*ptr_to_globals).end.offset(-1)
                      && *q as libc::c_int != '\n' as i32
                      && *q as libc::c_int != (*ptr_to_globals).last_forward_char
                    {
                      q = q.offset(1)
                    }
                    if *q as libc::c_int == (*ptr_to_globals).last_forward_char {
                      (*ptr_to_globals).dot = q
                    }
                    (*ptr_to_globals).cmdcnt -= 1;
                    if !((*ptr_to_globals).cmdcnt > 0) {
                      break;
                    }
                  }
                  current_block = 15129665204879337069;
                }
                17498168302144015873 => {
                  current_block = 8681395796513813967;
                }
                1752638907092016026 => {
                  if *(*ptr_to_globals).dot as libc::c_int != '\n' as i32 {
                    (*ptr_to_globals).dot = (*ptr_to_globals).dot.offset(1)
                  }
                  current_block = 8629930936610358348;
                }
                3268579060917229304 => {
                  current_block = 8629930936610358348;
                }
                1895262434596074581 => {
                  current_block = 8908416993177701018;
                }
                _ => {}
              }
              match current_block {
                8629930936610358348 => {}
                15129665204879337069 => {}
                _ => {
                  match current_block {
                    17247297260531395789 => {
                      loop {
                        dot_left();
                        (*ptr_to_globals).cmdcnt -= 1;
                        if !((*ptr_to_globals).cmdcnt > 0) {
                          break;
                        }
                      }
                      current_block = 15129665204879337069;
                    }
                    8681395796513813967 => {
                      current_block = 5591548203144509315;
                    }
                    8908416993177701018 => {
                      current_block = 16124761010012532485;
                    }
                    _ => {}
                  }
                  match current_block {
                    15129665204879337069 => {}
                    _ => {
                      match current_block {
                        16124761010012532485 => {
                          let mut yf: libc::c_int = 0;
                          let mut ml: libc::c_int = 0;
                          let mut whole: libc::c_int = 0;
                          yf = YANKDEL as libc::c_int;
                          if c == 'y' as i32 || c == 'Y' as i32 {
                            yf = YANKONLY as libc::c_int
                          }
                          c1 = 'y' as i32;
                          if c != 'Y' as i32 {
                            c1 = get_one_char()
                          }
                          ml = find_range(&mut p, &mut q, c1 as libc::c_char);
                          place_cursor(0i32, 0);
                          if c1 == 27i32 {
                            c1 = 27i32;
                            c = c1
                          } else if !strchr(b"wW\x00" as *const u8 as *const libc::c_char, c1)
                            .is_null()
                          {
                            ml = 0;
                            if c == 'c' as i32 {
                              while ({
                                let mut bb__isspace: libc::c_uchar =
                                  (*q as libc::c_int - 9i32) as libc::c_uchar;
                                (bb__isspace as libc::c_int == ' ' as i32 - 9i32
                                  || bb__isspace as libc::c_int <= 13i32 - 9i32)
                                  as libc::c_int
                              }) != 0
                                && q > p
                              {
                                q = q.offset(-1)
                              }
                            }
                            (*ptr_to_globals).dot = yank_delete(p, q, ml, yf, 1i32)
                          } else if !strchr(
                            b"^0bBeEft%$ lh\x08\x7f\x00" as *const u8 as *const libc::c_char,
                            c1,
                          )
                          .is_null()
                          {
                            (*ptr_to_globals).dot = yank_delete(p, q, ml, yf, 1i32)
                          } else if !strchr(
                            b"cdykjGHL+-{}\r\n\x00" as *const u8 as *const libc::c_char,
                            c1,
                          )
                          .is_null()
                          {
                            (*ptr_to_globals).dot = yank_delete(p, q, ml, yf, 1i32);
                            whole = 1i32
                          } else {
                            c1 = 27i32;
                            c = c1;
                            ml = 0;
                            indicate_error();
                          }
                          if ml != 0 && whole != 0 {
                            if c == 'c' as i32 {
                              (*ptr_to_globals).dot = char_insert(
                                (*ptr_to_globals).dot,
                                '\n' as i32 as libc::c_char,
                                2i32,
                              );
                              if whole != 0
                                && (*ptr_to_globals).dot != (*ptr_to_globals).end.offset(-1)
                              {
                                dot_prev();
                              }
                            } else if c == 'd' as i32 {
                              dot_begin();
                              dot_skip_over_ws();
                            }
                          }
                          if c1 != 27i32 {
                            if c == 'c' as i32 {
                              strcpy(
                                buf.as_mut_ptr(),
                                b"Change\x00" as *const u8 as *const libc::c_char,
                              );
                              current_block = 8629930936610358348;
                            } else {
                              if c == 'd' as i32 {
                                strcpy(
                                  buf.as_mut_ptr(),
                                  b"Delete\x00" as *const u8 as *const libc::c_char,
                                );
                              }
                              if c == 'y' as i32 || c == 'Y' as i32 {
                                strcpy(
                                  buf.as_mut_ptr(),
                                  b"Yank\x00" as *const u8 as *const libc::c_char,
                                );
                              }
                              p = (*ptr_to_globals).reg[(*ptr_to_globals).YDreg as usize];
                              q = p.offset(strlen(p) as isize);
                              cnt = 0;
                              while p <= q {
                                if *p as libc::c_int == '\n' as i32 {
                                  cnt += 1
                                }
                                p = p.offset(1)
                              }
                              status_line(
                                b"%s %u lines (%u chars) using [%c]\x00" as *const u8
                                  as *const libc::c_char,
                                buf.as_mut_ptr(),
                                cnt,
                                strlen((*ptr_to_globals).reg[(*ptr_to_globals).YDreg as usize])
                                  as libc::c_uint,
                                what_reg() as libc::c_int,
                              );
                              end_cmd_q();
                              current_block = 15129665204879337069;
                            }
                          } else {
                            current_block = 15129665204879337069;
                          }
                        }
                        5591548203144509315 => {
                          current_block = 2636677179867529885;
                        }
                        _ => {}
                      }
                      match current_block {
                        15129665204879337069 => {}
                        8629930936610358348 => {}
                        _ => {
                          match current_block {
                            2636677179867529885 => {
                              current_block = 12309206730560524281;
                            }
                            _ => {}
                          }
                          match current_block {
                            12309206730560524281 => {
                              current_block = 3325768110057758661;
                            }
                            _ => {}
                          }
                          match current_block {
                            3325768110057758661 => {
                              current_block = 14815832896553429982;
                            }
                            _ => {}
                          }
                          match current_block {
                            14815832896553429982 => {
                              current_block = 10731695520297161438;
                            }
                            _ => {}
                          }
                          match current_block {
                            10731695520297161438 => {
                              if c == '0' as i32 && (*ptr_to_globals).cmdcnt < 1i32 {
                                dot_begin();
                              } else {
                                (*ptr_to_globals).cmdcnt =
                                  (*ptr_to_globals).cmdcnt * 10i32 + (c - '0' as i32)
                              }
                              current_block = 15129665204879337069;
                            }
                            _ => {}
                          }
                          match current_block {
                            15129665204879337069 => {}
                            _ => {
                              loop {
                                match current_block {
                                  16813369756331276724 => {
                                    msg = std::ptr::null();
                                    current_block = 7392824444931029276;
                                  }
                                  7392824444931029276 => {
                                    dir = FORWARD as libc::c_int;
                                    p = (*ptr_to_globals).dot.offset(1);
                                    if *(*ptr_to_globals).last_search_pattern.offset(0)
                                      as libc::c_int
                                      == '?' as i32
                                    {
                                      dir = BACK as libc::c_int;
                                      p = (*ptr_to_globals).dot.offset(-1)
                                    }
                                    current_block = 4166979493554389389;
                                  }
                                  _ => {
                                    q = char_search(
                                      p,
                                      (*ptr_to_globals).last_search_pattern.offset(1),
                                      dir << 1i32 | FULL as libc::c_int,
                                    );
                                    if !q.is_null() {
                                      (*ptr_to_globals).dot = q;
                                      msg = std::ptr::null()
                                    } else {
                                      p = (*ptr_to_globals).text;
                                      if dir == BACK as libc::c_int {
                                        p = (*ptr_to_globals).end.offset(-1)
                                      }
                                      q = char_search(
                                        p,
                                        (*ptr_to_globals).last_search_pattern.offset(1),
                                        dir << 1i32 | FULL as libc::c_int,
                                      );
                                      if !q.is_null() {
                                        (*ptr_to_globals).dot = q;
                                        msg = b"search hit BOTTOM, continuing at TOP\x00"
                                          as *const u8
                                          as *const libc::c_char;
                                        if dir == BACK as libc::c_int {
                                          msg = b"search hit TOP, continuing at BOTTOM\x00"
                                            as *const u8
                                            as *const libc::c_char
                                        }
                                      } else {
                                        msg = b"Pattern not found\x00" as *const u8
                                          as *const libc::c_char
                                      }
                                    }
                                    if !msg.is_null() {
                                      status_line_bold(
                                        b"%s\x00" as *const u8 as *const libc::c_char,
                                        msg,
                                      );
                                    }
                                    (*ptr_to_globals).cmdcnt -= 1;
                                    if (*ptr_to_globals).cmdcnt > 0 {
                                      current_block = 16813369756331276724;
                                    } else {
                                      break;
                                    }
                                  }
                                }
                              }
                              current_block = 15129665204879337069;
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
        98 | 101 => {
          current_block = 877115918601926659;
          match current_block {
            16992905640583886232 => {
              loop {
                if (*(*ptr_to_globals).dot as libc::c_int - 'a' as i32) as libc::c_uchar
                  as libc::c_int
                  <= 'z' as i32 - 'a' as i32
                {
                  undo_push(
                    (*ptr_to_globals).dot,
                    1i32 as libc::c_uint,
                    1i32 as libc::c_uchar,
                  );
                  *(*ptr_to_globals).dot =
                    bb_ascii_toupper(*(*ptr_to_globals).dot as libc::c_uchar) as libc::c_char;
                  undo_push(
                    (*ptr_to_globals).dot,
                    1i32 as libc::c_uint,
                    2i32 as libc::c_uchar,
                  );
                } else if (*(*ptr_to_globals).dot as libc::c_int - 'A' as i32) as libc::c_uchar
                  as libc::c_int
                  <= 'Z' as i32 - 'A' as i32
                {
                  undo_push(
                    (*ptr_to_globals).dot,
                    1i32 as libc::c_uint,
                    1i32 as libc::c_uchar,
                  );
                  *(*ptr_to_globals).dot =
                    bb_ascii_tolower(*(*ptr_to_globals).dot as libc::c_uchar) as libc::c_char;
                  undo_push(
                    (*ptr_to_globals).dot,
                    1i32 as libc::c_uint,
                    2i32 as libc::c_uchar,
                  );
                }
                dot_right();
                (*ptr_to_globals).cmdcnt -= 1;
                if !((*ptr_to_globals).cmdcnt > 0) {
                  break;
                }
              }
              end_cmd_q();
              current_block = 15129665204879337069;
            }
            8729655159604064397 => {
              c1 = get_one_char();
              cnt = 0;
              if c1 == '.' as i32 {
                cnt = (*ptr_to_globals)
                  .rows
                  .wrapping_sub(2i32 as libc::c_uint)
                  .wrapping_div(2i32 as libc::c_uint) as libc::c_int
              }
              if c1 == '-' as i32 {
                cnt = (*ptr_to_globals).rows.wrapping_sub(2i32 as libc::c_uint) as libc::c_int
              }
              (*ptr_to_globals).screenbegin = begin_line((*ptr_to_globals).dot);
              dot_scroll(cnt, -1i32);
              current_block = 15129665204879337069;
            }
            15899500648299942075 => {
              (*ptr_to_globals).last_forward_char = get_one_char();
              do_cmd(';' as i32);
              if *(*ptr_to_globals).dot as libc::c_int == (*ptr_to_globals).last_forward_char {
                dot_left();
              }
              (*ptr_to_globals).last_forward_char = 0;
              current_block = 15129665204879337069;
            }
            9051390181078481641 => {
              c1 = get_one_char();
              if *(*ptr_to_globals).dot as libc::c_int != '\n' as i32 {
                (*ptr_to_globals).dot =
                  text_hole_delete((*ptr_to_globals).dot, (*ptr_to_globals).dot, 1i32);
                (*ptr_to_globals).dot =
                  char_insert((*ptr_to_globals).dot, c1 as libc::c_char, 2i32);
                dot_left();
              }
              end_cmd_q();
              current_block = 15129665204879337069;
            }
            877115918601926659 => {
              dir = FORWARD as libc::c_int;
              if c == 'b' as i32 {
                dir = BACK as libc::c_int
              }
              while !((*ptr_to_globals).dot.offset(dir as isize) < (*ptr_to_globals).text
                || (*ptr_to_globals).dot.offset(dir as isize) > (*ptr_to_globals).end.offset(-1))
              {
                (*ptr_to_globals).dot = (*ptr_to_globals).dot.offset(dir as isize);
                if ({
                  let mut bb__isspace: libc::c_uchar =
                    (*(*ptr_to_globals).dot as libc::c_int - 9i32) as libc::c_uchar;
                  (bb__isspace as libc::c_int == ' ' as i32 - 9i32
                    || bb__isspace as libc::c_int <= 13i32 - 9i32) as libc::c_int
                }) != 0
                {
                  (*ptr_to_globals).dot = skip_thing(
                    (*ptr_to_globals).dot,
                    if c == 'e' as i32 { 2i32 } else { 1i32 },
                    dir,
                    S_OVER_WS as libc::c_int,
                  )
                }
                if bb_ascii_isalnum(*(*ptr_to_globals).dot as libc::c_uchar) != 0
                  || *(*ptr_to_globals).dot as libc::c_int == '_' as i32
                {
                  (*ptr_to_globals).dot =
                    skip_thing((*ptr_to_globals).dot, 1i32, dir, S_END_ALNUM as libc::c_int)
                } else if *strchrnul(
                  b"!\"#$%&\'()*+,-./:;<=>?@[\\]^_`{|}~\x00" as *const u8 as *const libc::c_char,
                  *(*ptr_to_globals).dot as libc::c_int,
                )
                .offset(0)
                  != 0
                {
                  (*ptr_to_globals).dot =
                    skip_thing((*ptr_to_globals).dot, 1i32, dir, S_END_PUNCT as libc::c_int)
                }
                (*ptr_to_globals).cmdcnt -= 1;
                if !((*ptr_to_globals).cmdcnt > 0) {
                  break;
                }
              }
              current_block = 15129665204879337069;
            }
            1085022737867179637 => {
              dot_begin();
              dot_skip_over_ws();
              current_block = 15129665204879337069;
            }
            3113147720494587438 => {
              c1 = get_one_char();
              if c1 != 'Z' as i32 {
                indicate_error();
              } else if (*ptr_to_globals).modified_count != 0 {
                if 1i32 != 0 && (*ptr_to_globals).readonly_mode as libc::c_int != 0 {
                  status_line_bold(
                    b"\'%s\' is read only\x00" as *const u8 as *const libc::c_char,
                    (*ptr_to_globals).current_filename,
                  );
                } else {
                  cnt = file_write(
                    (*ptr_to_globals).current_filename,
                    (*ptr_to_globals).text,
                    (*ptr_to_globals).end.offset(-1),
                  );
                  if cnt < 0 {
                    if cnt == -1i32 {
                      status_line_bold(b"Write error: %m\x00" as *const u8 as *const libc::c_char);
                    }
                  } else if cnt as libc::c_long
                    == (*ptr_to_globals)
                      .end
                      .offset(-1)
                      .wrapping_offset_from((*ptr_to_globals).text)
                      as libc::c_long
                      + 1
                  {
                    (*ptr_to_globals).editing = 0 as smallint
                  }
                }
              } else {
                (*ptr_to_globals).editing = 0 as smallint
              }
              current_block = 15129665204879337069;
            }
            12960118908218882441 => {
              p = begin_line((*ptr_to_globals).dot);
              if *p.offset(-1i32 as isize) as libc::c_int == '\n' as i32 {
                dot_prev();
                current_block = 2087484904894455135;
              } else {
                dot_begin();
                (*ptr_to_globals).dot =
                  char_insert((*ptr_to_globals).dot, '\n' as i32 as libc::c_char, 1i32);
                dot_prev();
                current_block = 8629930936610358348;
              }
            }
            8720450212473544924 => {
              (*ptr_to_globals).dot = (*ptr_to_globals).screenbegin;
              cnt = 0;
              while (cnt as libc::c_uint)
                < (*ptr_to_globals)
                  .rows
                  .wrapping_sub(1i32 as libc::c_uint)
                  .wrapping_div(2i32 as libc::c_uint)
              {
                (*ptr_to_globals).dot = next_line((*ptr_to_globals).dot);
                cnt += 1
              }
              current_block = 15129665204879337069;
            }
            13015277209715431090 => {
              (*ptr_to_globals).dot = end_screen();
              if (*ptr_to_globals).cmdcnt as libc::c_uint
                > (*ptr_to_globals).rows.wrapping_sub(1i32 as libc::c_uint)
              {
                (*ptr_to_globals).cmdcnt =
                  (*ptr_to_globals).rows.wrapping_sub(1i32 as libc::c_uint) as libc::c_int
              }
              (*ptr_to_globals).cmdcnt -= 1;
              if (*ptr_to_globals).cmdcnt > 0 {
                do_cmd('-' as i32);
              }
              dot_begin();
              dot_skip_over_ws();
              current_block = 15129665204879337069;
            }
            9800435767766781385 => {
              loop {
                dot_end();
                if (*ptr_to_globals).dot < (*ptr_to_globals).end.offset(-1) {
                  undo_push(
                    (*ptr_to_globals).dot,
                    1i32 as libc::c_uint,
                    1i32 as libc::c_uchar,
                  );
                  let fresh15 = (*ptr_to_globals).dot;
                  (*ptr_to_globals).dot = (*ptr_to_globals).dot.offset(1);
                  *fresh15 = ' ' as i32 as libc::c_char;
                  undo_push(
                    (*ptr_to_globals).dot.offset(-1),
                    1i32 as libc::c_uint,
                    2i32 as libc::c_uchar,
                  );
                  while ({
                    let mut bb__isblank: libc::c_uchar = *(*ptr_to_globals).dot as libc::c_uchar;
                    (bb__isblank as libc::c_int == ' ' as i32
                      || bb__isblank as libc::c_int == '\t' as i32)
                      as libc::c_int
                  }) != 0
                  {
                    text_hole_delete((*ptr_to_globals).dot, (*ptr_to_globals).dot, 2i32);
                  }
                }
                (*ptr_to_globals).cmdcnt -= 1;
                if !((*ptr_to_globals).cmdcnt > 0) {
                  break;
                }
              }
              end_cmd_q();
              current_block = 15129665204879337069;
            }
            3432363526595694666 => {
              dot_begin();
              dot_skip_over_ws();
              current_block = 3268579060917229304;
            }
            3494829253343353619 => {
              (*ptr_to_globals).dot = (*ptr_to_globals).screenbegin;
              if (*ptr_to_globals).cmdcnt as libc::c_uint
                > (*ptr_to_globals).rows.wrapping_sub(1i32 as libc::c_uint)
              {
                (*ptr_to_globals).cmdcnt =
                  (*ptr_to_globals).rows.wrapping_sub(1i32 as libc::c_uint) as libc::c_int
              }
              (*ptr_to_globals).cmdcnt -= 1;
              if (*ptr_to_globals).cmdcnt > 0 {
                do_cmd('+' as i32);
              }
              dot_skip_over_ws();
              current_block = 15129665204879337069;
            }
            17973101765331640574 => {
              c1 = get_one_char();
              if c1 != 'g' as i32 {
                buf[0] = 'g' as i32 as libc::c_char;
                buf[1] = if c1 >= 0 { c1 } else { '*' as i32 } as libc::c_char;
                buf[2] = '\u{0}' as i32 as libc::c_char;
                not_implemented(buf.as_mut_ptr());
                current_block = 15129665204879337069;
              } else {
                if (*ptr_to_globals).cmdcnt == 0 {
                  (*ptr_to_globals).cmdcnt = 1i32
                }
                current_block = 11945623545738147997;
              }
            }
            16546625800574160972 => {
              save_dot = (*ptr_to_globals).dot;
              (*ptr_to_globals).dot = dollar_line((*ptr_to_globals).dot);
              (*ptr_to_globals).dot = yank_delete(
                save_dot,
                (*ptr_to_globals).dot,
                0,
                YANKDEL as libc::c_int,
                1i32,
              );
              if c == 'C' as i32 {
                current_block = 8629930936610358348;
              } else {
                if c == 'D' as i32 {
                  end_cmd_q();
                }
                current_block = 15129665204879337069;
              }
            }
            11937696639986586685 => {
              cnt = count_lines((*ptr_to_globals).text, (*ptr_to_globals).dot);
              c1 = get_one_char();
              find_range(&mut p, &mut q, c1 as libc::c_char);
              yank_delete(p, q, 1i32, YANKONLY as libc::c_int, 0);
              p = begin_line(p);
              q = end_line(q);
              i = count_lines(p, q);
              while i > 0 {
                if c == '<' as i32 {
                  if *p as libc::c_int == '\t' as i32 {
                    text_hole_delete(p, p, 0);
                  } else if *p as libc::c_int == ' ' as i32 {
                    j = 0;
                    while *p as libc::c_int == ' ' as i32 && j < (*ptr_to_globals).tabstop {
                      text_hole_delete(p, p, 0);
                      j += 1
                    }
                  }
                } else if c == '>' as i32 {
                  char_insert(p, '\t' as i32 as libc::c_char, 1i32);
                }
                i -= 1;
                p = next_line(p)
              }
              (*ptr_to_globals).dot = find_line(cnt);
              dot_skip_over_ws();
              end_cmd_q();
              current_block = 15129665204879337069;
            }
            17725350714912028156 => {
              p = get_input_line(b":\x00" as *const u8 as *const libc::c_char);
              colon(p);
              current_block = 15129665204879337069;
            }
            14526470074083880812 => {
              q = char_search(
                (*ptr_to_globals).dot,
                b"\n\n\x00" as *const u8 as *const libc::c_char,
                (FORWARD as libc::c_int) << 1i32 | FULL as libc::c_int,
              );
              if !q.is_null() {
                (*ptr_to_globals).dot = next_line(q)
              }
              current_block = 15129665204879337069;
            }
            8893187391306414141 => {
              q = char_search(
                (*ptr_to_globals).dot,
                b"\n\n\x00" as *const u8 as *const libc::c_char,
                ((BACK as libc::c_int as libc::c_uint) << 1i32
                  | FULL as libc::c_int as libc::c_uint) as libc::c_int,
              );
              if !q.is_null() {
                (*ptr_to_globals).dot = next_line(q)
              }
              current_block = 15129665204879337069;
            }
            7021673758293221412 => {
              dir = BACK as libc::c_int;
              p = (*ptr_to_globals).dot.offset(-1);
              if *(*ptr_to_globals).last_search_pattern.offset(0) as libc::c_int == '?' as i32 {
                dir = FORWARD as libc::c_int;
                p = (*ptr_to_globals).dot.offset(1)
              }
              current_block = 4166979493554389389;
            }
            18374191879090272823 => {
              buf[0] = c as libc::c_char;
              buf[1] = '\u{0}' as i32 as libc::c_char;
              q = get_input_line(buf.as_mut_ptr());
              if *q.offset(0) as libc::c_int != 0 && *q.offset(1) == 0 {
                if *(*ptr_to_globals).last_search_pattern.offset(0) != 0 {
                  *(*ptr_to_globals).last_search_pattern.offset(0) = c as libc::c_char
                }
                current_block = 7392824444931029276;
              } else if *q.offset(0) != 0 {
                free((*ptr_to_globals).last_search_pattern as *mut libc::c_void);
                (*ptr_to_globals).last_search_pattern = crate::libbb::xfuncs_printf::xstrdup(q);
                current_block = 7392824444931029276;
              } else {
                current_block = 15129665204879337069;
              }
            }
            16407828456666301883 => {
              if (*ptr_to_globals).last_forward_char == 0 {
                current_block = 15129665204879337069;
              } else {
                loop {
                  q = (*ptr_to_globals).dot.offset(-1);
                  while q >= (*ptr_to_globals).text
                    && *q as libc::c_int != '\n' as i32
                    && *q as libc::c_int != (*ptr_to_globals).last_forward_char
                  {
                    q = q.offset(-1)
                  }
                  if q >= (*ptr_to_globals).text
                    && *q as libc::c_int == (*ptr_to_globals).last_forward_char
                  {
                    (*ptr_to_globals).dot = q
                  }
                  (*ptr_to_globals).cmdcnt -= 1;
                  if !((*ptr_to_globals).cmdcnt > 0) {
                    break;
                  }
                }
                current_block = 15129665204879337069;
              }
            }
            9018432604062702004 => {
              q = (*ptr_to_globals).dot;
              while q < (*ptr_to_globals).end && *q as libc::c_int != '\n' as i32 {
                if !strchr(
                  b"()[]{}\x00" as *const u8 as *const libc::c_char,
                  *q as libc::c_int,
                )
                .is_null()
                {
                  p = find_pair(q, *q);
                  if p.is_null() {
                    indicate_error();
                  } else {
                    (*ptr_to_globals).dot = p
                  }
                  break;
                } else {
                  q = q.offset(1)
                }
              }
              if *q as libc::c_int == '\n' as i32 {
                indicate_error();
              }
              current_block = 15129665204879337069;
            }
            10247103787464459848 => {
              p = (*ptr_to_globals).reg[(*ptr_to_globals).YDreg as usize];
              if p.is_null() {
                status_line_bold(
                  b"Nothing in register %c\x00" as *const u8 as *const libc::c_char,
                  what_reg() as libc::c_int,
                );
              } else {
                if !strchr(p, '\n' as i32).is_null() {
                  if c == 'P' as i32 {
                    dot_begin();
                  }
                  if c == 'p' as i32 {
                    if end_line((*ptr_to_globals).dot) == (*ptr_to_globals).end.offset(-1) {
                      (*ptr_to_globals).dot = (*ptr_to_globals).end
                    } else {
                      dot_next();
                    }
                  }
                } else if c == 'p' as i32 {
                  dot_right();
                }
                string_insert((*ptr_to_globals).dot, p, 1i32);
                end_cmd_q();
              }
              current_block = 15129665204879337069;
            }
            15260732871948875843 => {
              c1 = (get_one_char() | 0x20i32) - 'a' as i32;
              if c1 as libc::c_uint <= 25i32 as libc::c_uint {
                (*ptr_to_globals).mark[c1 as usize] = (*ptr_to_globals).dot
              } else {
                indicate_error();
              }
              current_block = 15129665204879337069;
            }
            12738322036487086035 => {
              c1 = get_one_char() | 0x20i32;
              if (c1 - 'a' as i32) as libc::c_uint <= 25i32 as libc::c_uint {
                c1 = c1 - 'a' as i32;
                q = (*ptr_to_globals).mark[c1 as usize];
                if (*ptr_to_globals).text <= q && q < (*ptr_to_globals).end {
                  (*ptr_to_globals).dot = q;
                  dot_begin();
                  dot_skip_over_ws();
                }
              } else if c1 == '\'' as i32 {
                (*ptr_to_globals).dot = swap_context((*ptr_to_globals).dot);
                dot_begin();
                dot_skip_over_ws();
              } else {
                indicate_error();
              }
              current_block = 15129665204879337069;
            }
            13255096073384561358 => {
              c1 = (get_one_char() | 0x20i32) - 'a' as i32;
              if c1 as libc::c_uint <= 25i32 as libc::c_uint {
                (*ptr_to_globals).YDreg = c1 as smalluint
              } else {
                indicate_error();
              }
              current_block = 15129665204879337069;
            }
            10258711639984089377 => {
              if (*ptr_to_globals).cmd_mode as libc::c_int == 0 {
                indicate_error();
              }
              (*ptr_to_globals).cmd_mode = 0 as smallint;
              undo_queue_commit();
              end_cmd_q();
              (*ptr_to_globals).last_status_cksum = 0;
              current_block = 15129665204879337069;
            }
            11439127087547047736 => {
              buf[0] = c as libc::c_char;
              buf[1] = '\u{0}' as i32 as libc::c_char;
              not_implemented(buf.as_mut_ptr());
              end_cmd_q();
              current_block = 17440971994642376514;
            }
            7961798899781870241 => {
              dot_scroll(
                (*ptr_to_globals).rows.wrapping_sub(2i32 as libc::c_uint) as libc::c_int,
                -1i32,
              );
              current_block = 15129665204879337069;
            }
            9426343755402444879 => {
              dot_scroll(
                (*ptr_to_globals)
                  .rows
                  .wrapping_sub(2i32 as libc::c_uint)
                  .wrapping_div(2i32 as libc::c_uint) as libc::c_int,
                1i32,
              );
              current_block = 15129665204879337069;
            }
            13352459794680105913 => {
              dot_scroll(1i32, 1i32);
              current_block = 15129665204879337069;
            }
            14142272253464333006 => {
              dot_scroll(
                (*ptr_to_globals).rows.wrapping_sub(2i32 as libc::c_uint) as libc::c_int,
                1i32,
              );
              current_block = 15129665204879337069;
            }
            10758177197742640066 => {
              (*ptr_to_globals).last_status_cksum = 0;
              current_block = 15129665204879337069;
            }
            6152256259730122749 => {
              current_block = 7534742345255184552;
            }
            12883932598258173301 => {
              current_block = 8800996768013373992;
            }
            11242998110520238401 => {
              redraw(1i32);
              current_block = 15129665204879337069;
            }
            13619733043935729992 => {
              loop {
                dot_next();
                dot_skip_over_ws();
                (*ptr_to_globals).cmdcnt -= 1;
                if !((*ptr_to_globals).cmdcnt > 0) {
                  break;
                }
              }
              current_block = 15129665204879337069;
            }
            9339065157412720613 => {
              dot_scroll(
                (*ptr_to_globals)
                  .rows
                  .wrapping_sub(2i32 as libc::c_uint)
                  .wrapping_div(2i32 as libc::c_uint) as libc::c_int,
                -1i32,
              );
              current_block = 15129665204879337069;
            }
            11447082683497798022 => {
              dot_scroll(1i32, -1i32);
              current_block = 15129665204879337069;
            }
            5182000506326660482 => {
              current_block = 13993698454868426881;
            }
            1105010766850597332 => {
              if !(*ptr_to_globals).reg[27].is_null() {
                p = begin_line((*ptr_to_globals).dot);
                q = end_line((*ptr_to_globals).dot);
                p = text_hole_delete(p, q, 1i32);
                p = p.offset(string_insert(p, (*ptr_to_globals).reg[27], 2i32) as isize);
                (*ptr_to_globals).dot = p;
                dot_skip_over_ws();
              }
              current_block = 15129665204879337069;
            }
            8616046655533110204 => {
              undo_pop();
              current_block = 15129665204879337069;
            }
            5127767458142431603 => {
              loop {
                (*ptr_to_globals).dot = end_line((*ptr_to_globals).dot);
                (*ptr_to_globals).cmdcnt -= 1;
                if (*ptr_to_globals).cmdcnt <= 0 {
                  break;
                }
                dot_next();
              }
              current_block = 15129665204879337069;
            }
            222014967776118151 => {
              (*ptr_to_globals).last_forward_char = get_one_char();
              current_block = 7856905509180742666;
            }
            11209792479411604110 => {
              loop {
                dot_prev();
                dot_skip_over_ws();
                (*ptr_to_globals).cmdcnt -= 1;
                if !((*ptr_to_globals).cmdcnt > 0) {
                  break;
                }
              }
              current_block = 15129665204879337069;
            }
            3364823792826654116 => {
              if (*ptr_to_globals).lmc_len != 0 {
                (*ptr_to_globals).ioq_start = crate::libbb::xfuncs_printf::xstrndup(
                  (*ptr_to_globals).last_modifying_cmd.as_mut_ptr(),
                  (*ptr_to_globals).lmc_len,
                );
                (*ptr_to_globals).ioq = (*ptr_to_globals).ioq_start
              }
              current_block = 15129665204879337069;
            }
            18096603330221575131 => {
              current_block = 17498168302144015873;
            }
            16891123271837848903 => {
              dot_end();
              current_block = 1752638907092016026;
            }
            8517235759107662071 => {
              current_block = 5847749760081351726;
            }
            12525254419223051704 => {
              if (*ptr_to_globals).dot < (*ptr_to_globals).end.offset(-1) {
                (*ptr_to_globals).dot = yank_delete(
                  (*ptr_to_globals).dot,
                  (*ptr_to_globals).dot,
                  1i32,
                  YANKDEL as libc::c_int,
                  1i32,
                )
              }
              current_block = 15129665204879337069;
            }
            15232911949322867522 => {
              current_block = 17251831742223396249;
            }
            10863374208794025069 => {
              current_block = 1895262434596074581;
            }
            451126677064669119 => {
              loop {
                dot_prev();
                (*ptr_to_globals).dot = move_to_col(
                  (*ptr_to_globals).dot,
                  (*ptr_to_globals).ccol + (*ptr_to_globals).offset,
                );
                (*ptr_to_globals).cmdcnt -= 1;
                if !((*ptr_to_globals).cmdcnt > 0) {
                  break;
                }
              }
              current_block = 15129665204879337069;
            }
            4611735929166613116 => {
              loop {
                if bb_ascii_isalnum(*(*ptr_to_globals).dot as libc::c_uchar) != 0
                  || *(*ptr_to_globals).dot as libc::c_int == '_' as i32
                {
                  (*ptr_to_globals).dot = skip_thing(
                    (*ptr_to_globals).dot,
                    1i32,
                    FORWARD as libc::c_int,
                    S_END_ALNUM as libc::c_int,
                  )
                } else if *strchrnul(
                  b"!\"#$%&\'()*+,-./:;<=>?@[\\]^_`{|}~\x00" as *const u8 as *const libc::c_char,
                  *(*ptr_to_globals).dot as libc::c_int,
                )
                .offset(0)
                  != 0
                {
                  (*ptr_to_globals).dot = skip_thing(
                    (*ptr_to_globals).dot,
                    1i32,
                    FORWARD as libc::c_int,
                    S_END_PUNCT as libc::c_int,
                  )
                }
                if (*ptr_to_globals).dot < (*ptr_to_globals).end.offset(-1) {
                  (*ptr_to_globals).dot = (*ptr_to_globals).dot.offset(1)
                }
                if ({
                  let mut bb__isspace: libc::c_uchar =
                    (*(*ptr_to_globals).dot as libc::c_int - 9i32) as libc::c_uchar;
                  (bb__isspace as libc::c_int == ' ' as i32 - 9i32
                    || bb__isspace as libc::c_int <= 13i32 - 9i32) as libc::c_int
                }) != 0
                {
                  (*ptr_to_globals).dot = skip_thing(
                    (*ptr_to_globals).dot,
                    2i32,
                    FORWARD as libc::c_int,
                    S_OVER_WS as libc::c_int,
                  )
                }
                (*ptr_to_globals).cmdcnt -= 1;
                if !((*ptr_to_globals).cmdcnt > 0) {
                  break;
                }
              }
              current_block = 15129665204879337069;
            }
            4386451087681909888 => {
              (*ptr_to_globals).dot =
                move_to_col((*ptr_to_globals).dot, (*ptr_to_globals).cmdcnt - 1i32);
              current_block = 15129665204879337069;
            }
            1296397779060594135 => {
              dot_begin();
              current_block = 15129665204879337069;
            }
            _ => {}
          }
          match current_block {
            15129665204879337069 => {}
            8629930936610358348 => {}
            _ => {
              match current_block {
                17251831742223396249 => {
                  dir = 0;
                  if c == 'X' as i32 {
                    dir = -1i32
                  }
                  loop {
                    if *(*ptr_to_globals).dot.offset(dir as isize) as libc::c_int != '\n' as i32 {
                      if c == 'X' as i32 {
                        (*ptr_to_globals).dot = (*ptr_to_globals).dot.offset(-1)
                      }
                      (*ptr_to_globals).dot = yank_delete(
                        (*ptr_to_globals).dot,
                        (*ptr_to_globals).dot,
                        0,
                        YANKDEL as libc::c_int,
                        1i32,
                      )
                    }
                    (*ptr_to_globals).cmdcnt -= 1;
                    if !((*ptr_to_globals).cmdcnt > 0) {
                      break;
                    }
                  }
                  end_cmd_q();
                  if c == 's' as i32 {
                    current_block = 8629930936610358348;
                  } else {
                    current_block = 15129665204879337069;
                  }
                }
                2087484904894455135 => {
                  dot_end();
                  (*ptr_to_globals).dot =
                    char_insert((*ptr_to_globals).dot, '\n' as i32 as libc::c_char, 1i32);
                  current_block = 8629930936610358348;
                }
                11945623545738147997 => {
                  (*ptr_to_globals).dot = (*ptr_to_globals).end.offset(-1);
                  if (*ptr_to_globals).cmdcnt > 0 {
                    (*ptr_to_globals).dot = find_line((*ptr_to_globals).cmdcnt)
                  }
                  dot_skip_over_ws();
                  current_block = 15129665204879337069;
                }
                5847749760081351726 => {
                  dir = FORWARD as libc::c_int;
                  if c == 'B' as i32 {
                    dir = BACK as libc::c_int
                  }
                  loop {
                    if c == 'W' as i32
                      || ({
                        let mut bb__isspace: libc::c_uchar =
                          (*(*ptr_to_globals).dot.offset(dir as isize) as libc::c_int - 9i32)
                            as libc::c_uchar;
                        (bb__isspace as libc::c_int == ' ' as i32 - 9i32
                          || bb__isspace as libc::c_int <= 13i32 - 9i32)
                          as libc::c_int
                      }) != 0
                    {
                      (*ptr_to_globals).dot =
                        skip_thing((*ptr_to_globals).dot, 1i32, dir, S_TO_WS as libc::c_int);
                      (*ptr_to_globals).dot =
                        skip_thing((*ptr_to_globals).dot, 2i32, dir, S_OVER_WS as libc::c_int)
                    }
                    if c != 'W' as i32 {
                      (*ptr_to_globals).dot =
                        skip_thing((*ptr_to_globals).dot, 1i32, dir, S_BEFORE_WS as libc::c_int)
                    }
                    (*ptr_to_globals).cmdcnt -= 1;
                    if !((*ptr_to_globals).cmdcnt > 0) {
                      break;
                    }
                  }
                  current_block = 15129665204879337069;
                }
                17440971994642376514 => {
                  current_block = 15129665204879337069;
                }
                7534742345255184552 => {
                  current_block = 17247297260531395789;
                }
                8800996768013373992 => {
                  loop {
                    dot_next();
                    (*ptr_to_globals).dot = move_to_col(
                      (*ptr_to_globals).dot,
                      (*ptr_to_globals).ccol + (*ptr_to_globals).offset,
                    );
                    (*ptr_to_globals).cmdcnt -= 1;
                    if !((*ptr_to_globals).cmdcnt > 0) {
                      break;
                    }
                  }
                  current_block = 15129665204879337069;
                }
                13993698454868426881 => {
                  loop {
                    dot_right();
                    (*ptr_to_globals).cmdcnt -= 1;
                    if !((*ptr_to_globals).cmdcnt > 0) {
                      break;
                    }
                  }
                  current_block = 15129665204879337069;
                }
                7856905509180742666 => {
                  while !((*ptr_to_globals).last_forward_char == 0) {
                    q = (*ptr_to_globals).dot.offset(1);
                    while q < (*ptr_to_globals).end.offset(-1)
                      && *q as libc::c_int != '\n' as i32
                      && *q as libc::c_int != (*ptr_to_globals).last_forward_char
                    {
                      q = q.offset(1)
                    }
                    if *q as libc::c_int == (*ptr_to_globals).last_forward_char {
                      (*ptr_to_globals).dot = q
                    }
                    (*ptr_to_globals).cmdcnt -= 1;
                    if !((*ptr_to_globals).cmdcnt > 0) {
                      break;
                    }
                  }
                  current_block = 15129665204879337069;
                }
                17498168302144015873 => {
                  current_block = 8681395796513813967;
                }
                1752638907092016026 => {
                  if *(*ptr_to_globals).dot as libc::c_int != '\n' as i32 {
                    (*ptr_to_globals).dot = (*ptr_to_globals).dot.offset(1)
                  }
                  current_block = 8629930936610358348;
                }
                3268579060917229304 => {
                  current_block = 8629930936610358348;
                }
                1895262434596074581 => {
                  current_block = 8908416993177701018;
                }
                _ => {}
              }
              match current_block {
                8629930936610358348 => {}
                15129665204879337069 => {}
                _ => {
                  match current_block {
                    17247297260531395789 => {
                      loop {
                        dot_left();
                        (*ptr_to_globals).cmdcnt -= 1;
                        if !((*ptr_to_globals).cmdcnt > 0) {
                          break;
                        }
                      }
                      current_block = 15129665204879337069;
                    }
                    8681395796513813967 => {
                      current_block = 5591548203144509315;
                    }
                    8908416993177701018 => {
                      current_block = 16124761010012532485;
                    }
                    _ => {}
                  }
                  match current_block {
                    15129665204879337069 => {}
                    _ => {
                      match current_block {
                        16124761010012532485 => {
                          let mut yf: libc::c_int = 0;
                          let mut ml: libc::c_int = 0;
                          let mut whole: libc::c_int = 0;
                          yf = YANKDEL as libc::c_int;
                          if c == 'y' as i32 || c == 'Y' as i32 {
                            yf = YANKONLY as libc::c_int
                          }
                          c1 = 'y' as i32;
                          if c != 'Y' as i32 {
                            c1 = get_one_char()
                          }
                          ml = find_range(&mut p, &mut q, c1 as libc::c_char);
                          place_cursor(0i32, 0);
                          if c1 == 27i32 {
                            c1 = 27i32;
                            c = c1
                          } else if !strchr(b"wW\x00" as *const u8 as *const libc::c_char, c1)
                            .is_null()
                          {
                            ml = 0;
                            if c == 'c' as i32 {
                              while ({
                                let mut bb__isspace: libc::c_uchar =
                                  (*q as libc::c_int - 9i32) as libc::c_uchar;
                                (bb__isspace as libc::c_int == ' ' as i32 - 9i32
                                  || bb__isspace as libc::c_int <= 13i32 - 9i32)
                                  as libc::c_int
                              }) != 0
                                && q > p
                              {
                                q = q.offset(-1)
                              }
                            }
                            (*ptr_to_globals).dot = yank_delete(p, q, ml, yf, 1i32)
                          } else if !strchr(
                            b"^0bBeEft%$ lh\x08\x7f\x00" as *const u8 as *const libc::c_char,
                            c1,
                          )
                          .is_null()
                          {
                            (*ptr_to_globals).dot = yank_delete(p, q, ml, yf, 1i32)
                          } else if !strchr(
                            b"cdykjGHL+-{}\r\n\x00" as *const u8 as *const libc::c_char,
                            c1,
                          )
                          .is_null()
                          {
                            (*ptr_to_globals).dot = yank_delete(p, q, ml, yf, 1i32);
                            whole = 1i32
                          } else {
                            c1 = 27i32;
                            c = c1;
                            ml = 0;
                            indicate_error();
                          }
                          if ml != 0 && whole != 0 {
                            if c == 'c' as i32 {
                              (*ptr_to_globals).dot = char_insert(
                                (*ptr_to_globals).dot,
                                '\n' as i32 as libc::c_char,
                                2i32,
                              );
                              if whole != 0
                                && (*ptr_to_globals).dot != (*ptr_to_globals).end.offset(-1)
                              {
                                dot_prev();
                              }
                            } else if c == 'd' as i32 {
                              dot_begin();
                              dot_skip_over_ws();
                            }
                          }
                          if c1 != 27i32 {
                            if c == 'c' as i32 {
                              strcpy(
                                buf.as_mut_ptr(),
                                b"Change\x00" as *const u8 as *const libc::c_char,
                              );
                              current_block = 8629930936610358348;
                            } else {
                              if c == 'd' as i32 {
                                strcpy(
                                  buf.as_mut_ptr(),
                                  b"Delete\x00" as *const u8 as *const libc::c_char,
                                );
                              }
                              if c == 'y' as i32 || c == 'Y' as i32 {
                                strcpy(
                                  buf.as_mut_ptr(),
                                  b"Yank\x00" as *const u8 as *const libc::c_char,
                                );
                              }
                              p = (*ptr_to_globals).reg[(*ptr_to_globals).YDreg as usize];
                              q = p.offset(strlen(p) as isize);
                              cnt = 0;
                              while p <= q {
                                if *p as libc::c_int == '\n' as i32 {
                                  cnt += 1
                                }
                                p = p.offset(1)
                              }
                              status_line(
                                b"%s %u lines (%u chars) using [%c]\x00" as *const u8
                                  as *const libc::c_char,
                                buf.as_mut_ptr(),
                                cnt,
                                strlen((*ptr_to_globals).reg[(*ptr_to_globals).YDreg as usize])
                                  as libc::c_uint,
                                what_reg() as libc::c_int,
                              );
                              end_cmd_q();
                              current_block = 15129665204879337069;
                            }
                          } else {
                            current_block = 15129665204879337069;
                          }
                        }
                        5591548203144509315 => {
                          current_block = 2636677179867529885;
                        }
                        _ => {}
                      }
                      match current_block {
                        15129665204879337069 => {}
                        8629930936610358348 => {}
                        _ => {
                          match current_block {
                            2636677179867529885 => {
                              current_block = 12309206730560524281;
                            }
                            _ => {}
                          }
                          match current_block {
                            12309206730560524281 => {
                              current_block = 3325768110057758661;
                            }
                            _ => {}
                          }
                          match current_block {
                            3325768110057758661 => {
                              current_block = 14815832896553429982;
                            }
                            _ => {}
                          }
                          match current_block {
                            14815832896553429982 => {
                              current_block = 10731695520297161438;
                            }
                            _ => {}
                          }
                          match current_block {
                            10731695520297161438 => {
                              if c == '0' as i32 && (*ptr_to_globals).cmdcnt < 1i32 {
                                dot_begin();
                              } else {
                                (*ptr_to_globals).cmdcnt =
                                  (*ptr_to_globals).cmdcnt * 10i32 + (c - '0' as i32)
                              }
                              current_block = 15129665204879337069;
                            }
                            _ => {}
                          }
                          match current_block {
                            15129665204879337069 => {}
                            _ => {
                              loop {
                                match current_block {
                                  16813369756331276724 => {
                                    msg = std::ptr::null();
                                    current_block = 7392824444931029276;
                                  }
                                  7392824444931029276 => {
                                    dir = FORWARD as libc::c_int;
                                    p = (*ptr_to_globals).dot.offset(1);
                                    if *(*ptr_to_globals).last_search_pattern.offset(0)
                                      as libc::c_int
                                      == '?' as i32
                                    {
                                      dir = BACK as libc::c_int;
                                      p = (*ptr_to_globals).dot.offset(-1)
                                    }
                                    current_block = 4166979493554389389;
                                  }
                                  _ => {
                                    q = char_search(
                                      p,
                                      (*ptr_to_globals).last_search_pattern.offset(1),
                                      dir << 1i32 | FULL as libc::c_int,
                                    );
                                    if !q.is_null() {
                                      (*ptr_to_globals).dot = q;
                                      msg = std::ptr::null()
                                    } else {
                                      p = (*ptr_to_globals).text;
                                      if dir == BACK as libc::c_int {
                                        p = (*ptr_to_globals).end.offset(-1)
                                      }
                                      q = char_search(
                                        p,
                                        (*ptr_to_globals).last_search_pattern.offset(1),
                                        dir << 1i32 | FULL as libc::c_int,
                                      );
                                      if !q.is_null() {
                                        (*ptr_to_globals).dot = q;
                                        msg = b"search hit BOTTOM, continuing at TOP\x00"
                                          as *const u8
                                          as *const libc::c_char;
                                        if dir == BACK as libc::c_int {
                                          msg = b"search hit TOP, continuing at BOTTOM\x00"
                                            as *const u8
                                            as *const libc::c_char
                                        }
                                      } else {
                                        msg = b"Pattern not found\x00" as *const u8
                                          as *const libc::c_char
                                      }
                                    }
                                    if !msg.is_null() {
                                      status_line_bold(
                                        b"%s\x00" as *const u8 as *const libc::c_char,
                                        msg,
                                      );
                                    }
                                    (*ptr_to_globals).cmdcnt -= 1;
                                    if (*ptr_to_globals).cmdcnt > 0 {
                                      current_block = 16813369756331276724;
                                    } else {
                                      break;
                                    }
                                  }
                                }
                              }
                              current_block = 15129665204879337069;
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
        99 => {
          current_block = 10863374208794025069;
          match current_block {
            16992905640583886232 => {
              loop {
                if (*(*ptr_to_globals).dot as libc::c_int - 'a' as i32) as libc::c_uchar
                  as libc::c_int
                  <= 'z' as i32 - 'a' as i32
                {
                  undo_push(
                    (*ptr_to_globals).dot,
                    1i32 as libc::c_uint,
                    1i32 as libc::c_uchar,
                  );
                  *(*ptr_to_globals).dot =
                    bb_ascii_toupper(*(*ptr_to_globals).dot as libc::c_uchar) as libc::c_char;
                  undo_push(
                    (*ptr_to_globals).dot,
                    1i32 as libc::c_uint,
                    2i32 as libc::c_uchar,
                  );
                } else if (*(*ptr_to_globals).dot as libc::c_int - 'A' as i32) as libc::c_uchar
                  as libc::c_int
                  <= 'Z' as i32 - 'A' as i32
                {
                  undo_push(
                    (*ptr_to_globals).dot,
                    1i32 as libc::c_uint,
                    1i32 as libc::c_uchar,
                  );
                  *(*ptr_to_globals).dot =
                    bb_ascii_tolower(*(*ptr_to_globals).dot as libc::c_uchar) as libc::c_char;
                  undo_push(
                    (*ptr_to_globals).dot,
                    1i32 as libc::c_uint,
                    2i32 as libc::c_uchar,
                  );
                }
                dot_right();
                (*ptr_to_globals).cmdcnt -= 1;
                if !((*ptr_to_globals).cmdcnt > 0) {
                  break;
                }
              }
              end_cmd_q();
              current_block = 15129665204879337069;
            }
            8729655159604064397 => {
              c1 = get_one_char();
              cnt = 0;
              if c1 == '.' as i32 {
                cnt = (*ptr_to_globals)
                  .rows
                  .wrapping_sub(2i32 as libc::c_uint)
                  .wrapping_div(2i32 as libc::c_uint) as libc::c_int
              }
              if c1 == '-' as i32 {
                cnt = (*ptr_to_globals).rows.wrapping_sub(2i32 as libc::c_uint) as libc::c_int
              }
              (*ptr_to_globals).screenbegin = begin_line((*ptr_to_globals).dot);
              dot_scroll(cnt, -1i32);
              current_block = 15129665204879337069;
            }
            15899500648299942075 => {
              (*ptr_to_globals).last_forward_char = get_one_char();
              do_cmd(';' as i32);
              if *(*ptr_to_globals).dot as libc::c_int == (*ptr_to_globals).last_forward_char {
                dot_left();
              }
              (*ptr_to_globals).last_forward_char = 0;
              current_block = 15129665204879337069;
            }
            9051390181078481641 => {
              c1 = get_one_char();
              if *(*ptr_to_globals).dot as libc::c_int != '\n' as i32 {
                (*ptr_to_globals).dot =
                  text_hole_delete((*ptr_to_globals).dot, (*ptr_to_globals).dot, 1i32);
                (*ptr_to_globals).dot =
                  char_insert((*ptr_to_globals).dot, c1 as libc::c_char, 2i32);
                dot_left();
              }
              end_cmd_q();
              current_block = 15129665204879337069;
            }
            877115918601926659 => {
              dir = FORWARD as libc::c_int;
              if c == 'b' as i32 {
                dir = BACK as libc::c_int
              }
              while !((*ptr_to_globals).dot.offset(dir as isize) < (*ptr_to_globals).text
                || (*ptr_to_globals).dot.offset(dir as isize) > (*ptr_to_globals).end.offset(-1))
              {
                (*ptr_to_globals).dot = (*ptr_to_globals).dot.offset(dir as isize);
                if ({
                  let mut bb__isspace: libc::c_uchar =
                    (*(*ptr_to_globals).dot as libc::c_int - 9i32) as libc::c_uchar;
                  (bb__isspace as libc::c_int == ' ' as i32 - 9i32
                    || bb__isspace as libc::c_int <= 13i32 - 9i32) as libc::c_int
                }) != 0
                {
                  (*ptr_to_globals).dot = skip_thing(
                    (*ptr_to_globals).dot,
                    if c == 'e' as i32 { 2i32 } else { 1i32 },
                    dir,
                    S_OVER_WS as libc::c_int,
                  )
                }
                if bb_ascii_isalnum(*(*ptr_to_globals).dot as libc::c_uchar) != 0
                  || *(*ptr_to_globals).dot as libc::c_int == '_' as i32
                {
                  (*ptr_to_globals).dot =
                    skip_thing((*ptr_to_globals).dot, 1i32, dir, S_END_ALNUM as libc::c_int)
                } else if *strchrnul(
                  b"!\"#$%&\'()*+,-./:;<=>?@[\\]^_`{|}~\x00" as *const u8 as *const libc::c_char,
                  *(*ptr_to_globals).dot as libc::c_int,
                )
                .offset(0)
                  != 0
                {
                  (*ptr_to_globals).dot =
                    skip_thing((*ptr_to_globals).dot, 1i32, dir, S_END_PUNCT as libc::c_int)
                }
                (*ptr_to_globals).cmdcnt -= 1;
                if !((*ptr_to_globals).cmdcnt > 0) {
                  break;
                }
              }
              current_block = 15129665204879337069;
            }
            1085022737867179637 => {
              dot_begin();
              dot_skip_over_ws();
              current_block = 15129665204879337069;
            }
            3113147720494587438 => {
              c1 = get_one_char();
              if c1 != 'Z' as i32 {
                indicate_error();
              } else if (*ptr_to_globals).modified_count != 0 {
                if 1i32 != 0 && (*ptr_to_globals).readonly_mode as libc::c_int != 0 {
                  status_line_bold(
                    b"\'%s\' is read only\x00" as *const u8 as *const libc::c_char,
                    (*ptr_to_globals).current_filename,
                  );
                } else {
                  cnt = file_write(
                    (*ptr_to_globals).current_filename,
                    (*ptr_to_globals).text,
                    (*ptr_to_globals).end.offset(-1),
                  );
                  if cnt < 0 {
                    if cnt == -1i32 {
                      status_line_bold(b"Write error: %m\x00" as *const u8 as *const libc::c_char);
                    }
                  } else if cnt as libc::c_long
                    == (*ptr_to_globals)
                      .end
                      .offset(-1)
                      .wrapping_offset_from((*ptr_to_globals).text)
                      as libc::c_long
                      + 1
                  {
                    (*ptr_to_globals).editing = 0 as smallint
                  }
                }
              } else {
                (*ptr_to_globals).editing = 0 as smallint
              }
              current_block = 15129665204879337069;
            }
            12960118908218882441 => {
              p = begin_line((*ptr_to_globals).dot);
              if *p.offset(-1i32 as isize) as libc::c_int == '\n' as i32 {
                dot_prev();
                current_block = 2087484904894455135;
              } else {
                dot_begin();
                (*ptr_to_globals).dot =
                  char_insert((*ptr_to_globals).dot, '\n' as i32 as libc::c_char, 1i32);
                dot_prev();
                current_block = 8629930936610358348;
              }
            }
            8720450212473544924 => {
              (*ptr_to_globals).dot = (*ptr_to_globals).screenbegin;
              cnt = 0;
              while (cnt as libc::c_uint)
                < (*ptr_to_globals)
                  .rows
                  .wrapping_sub(1i32 as libc::c_uint)
                  .wrapping_div(2i32 as libc::c_uint)
              {
                (*ptr_to_globals).dot = next_line((*ptr_to_globals).dot);
                cnt += 1
              }
              current_block = 15129665204879337069;
            }
            13015277209715431090 => {
              (*ptr_to_globals).dot = end_screen();
              if (*ptr_to_globals).cmdcnt as libc::c_uint
                > (*ptr_to_globals).rows.wrapping_sub(1i32 as libc::c_uint)
              {
                (*ptr_to_globals).cmdcnt =
                  (*ptr_to_globals).rows.wrapping_sub(1i32 as libc::c_uint) as libc::c_int
              }
              (*ptr_to_globals).cmdcnt -= 1;
              if (*ptr_to_globals).cmdcnt > 0 {
                do_cmd('-' as i32);
              }
              dot_begin();
              dot_skip_over_ws();
              current_block = 15129665204879337069;
            }
            9800435767766781385 => {
              loop {
                dot_end();
                if (*ptr_to_globals).dot < (*ptr_to_globals).end.offset(-1) {
                  undo_push(
                    (*ptr_to_globals).dot,
                    1i32 as libc::c_uint,
                    1i32 as libc::c_uchar,
                  );
                  let fresh15 = (*ptr_to_globals).dot;
                  (*ptr_to_globals).dot = (*ptr_to_globals).dot.offset(1);
                  *fresh15 = ' ' as i32 as libc::c_char;
                  undo_push(
                    (*ptr_to_globals).dot.offset(-1),
                    1i32 as libc::c_uint,
                    2i32 as libc::c_uchar,
                  );
                  while ({
                    let mut bb__isblank: libc::c_uchar = *(*ptr_to_globals).dot as libc::c_uchar;
                    (bb__isblank as libc::c_int == ' ' as i32
                      || bb__isblank as libc::c_int == '\t' as i32)
                      as libc::c_int
                  }) != 0
                  {
                    text_hole_delete((*ptr_to_globals).dot, (*ptr_to_globals).dot, 2i32);
                  }
                }
                (*ptr_to_globals).cmdcnt -= 1;
                if !((*ptr_to_globals).cmdcnt > 0) {
                  break;
                }
              }
              end_cmd_q();
              current_block = 15129665204879337069;
            }
            3432363526595694666 => {
              dot_begin();
              dot_skip_over_ws();
              current_block = 3268579060917229304;
            }
            3494829253343353619 => {
              (*ptr_to_globals).dot = (*ptr_to_globals).screenbegin;
              if (*ptr_to_globals).cmdcnt as libc::c_uint
                > (*ptr_to_globals).rows.wrapping_sub(1i32 as libc::c_uint)
              {
                (*ptr_to_globals).cmdcnt =
                  (*ptr_to_globals).rows.wrapping_sub(1i32 as libc::c_uint) as libc::c_int
              }
              (*ptr_to_globals).cmdcnt -= 1;
              if (*ptr_to_globals).cmdcnt > 0 {
                do_cmd('+' as i32);
              }
              dot_skip_over_ws();
              current_block = 15129665204879337069;
            }
            17973101765331640574 => {
              c1 = get_one_char();
              if c1 != 'g' as i32 {
                buf[0] = 'g' as i32 as libc::c_char;
                buf[1] = if c1 >= 0 { c1 } else { '*' as i32 } as libc::c_char;
                buf[2] = '\u{0}' as i32 as libc::c_char;
                not_implemented(buf.as_mut_ptr());
                current_block = 15129665204879337069;
              } else {
                if (*ptr_to_globals).cmdcnt == 0 {
                  (*ptr_to_globals).cmdcnt = 1i32
                }
                current_block = 11945623545738147997;
              }
            }
            16546625800574160972 => {
              save_dot = (*ptr_to_globals).dot;
              (*ptr_to_globals).dot = dollar_line((*ptr_to_globals).dot);
              (*ptr_to_globals).dot = yank_delete(
                save_dot,
                (*ptr_to_globals).dot,
                0,
                YANKDEL as libc::c_int,
                1i32,
              );
              if c == 'C' as i32 {
                current_block = 8629930936610358348;
              } else {
                if c == 'D' as i32 {
                  end_cmd_q();
                }
                current_block = 15129665204879337069;
              }
            }
            11937696639986586685 => {
              cnt = count_lines((*ptr_to_globals).text, (*ptr_to_globals).dot);
              c1 = get_one_char();
              find_range(&mut p, &mut q, c1 as libc::c_char);
              yank_delete(p, q, 1i32, YANKONLY as libc::c_int, 0);
              p = begin_line(p);
              q = end_line(q);
              i = count_lines(p, q);
              while i > 0 {
                if c == '<' as i32 {
                  if *p as libc::c_int == '\t' as i32 {
                    text_hole_delete(p, p, 0);
                  } else if *p as libc::c_int == ' ' as i32 {
                    j = 0;
                    while *p as libc::c_int == ' ' as i32 && j < (*ptr_to_globals).tabstop {
                      text_hole_delete(p, p, 0);
                      j += 1
                    }
                  }
                } else if c == '>' as i32 {
                  char_insert(p, '\t' as i32 as libc::c_char, 1i32);
                }
                i -= 1;
                p = next_line(p)
              }
              (*ptr_to_globals).dot = find_line(cnt);
              dot_skip_over_ws();
              end_cmd_q();
              current_block = 15129665204879337069;
            }
            17725350714912028156 => {
              p = get_input_line(b":\x00" as *const u8 as *const libc::c_char);
              colon(p);
              current_block = 15129665204879337069;
            }
            14526470074083880812 => {
              q = char_search(
                (*ptr_to_globals).dot,
                b"\n\n\x00" as *const u8 as *const libc::c_char,
                (FORWARD as libc::c_int) << 1i32 | FULL as libc::c_int,
              );
              if !q.is_null() {
                (*ptr_to_globals).dot = next_line(q)
              }
              current_block = 15129665204879337069;
            }
            8893187391306414141 => {
              q = char_search(
                (*ptr_to_globals).dot,
                b"\n\n\x00" as *const u8 as *const libc::c_char,
                ((BACK as libc::c_int as libc::c_uint) << 1i32
                  | FULL as libc::c_int as libc::c_uint) as libc::c_int,
              );
              if !q.is_null() {
                (*ptr_to_globals).dot = next_line(q)
              }
              current_block = 15129665204879337069;
            }
            7021673758293221412 => {
              dir = BACK as libc::c_int;
              p = (*ptr_to_globals).dot.offset(-1);
              if *(*ptr_to_globals).last_search_pattern.offset(0) as libc::c_int == '?' as i32 {
                dir = FORWARD as libc::c_int;
                p = (*ptr_to_globals).dot.offset(1)
              }
              current_block = 4166979493554389389;
            }
            18374191879090272823 => {
              buf[0] = c as libc::c_char;
              buf[1] = '\u{0}' as i32 as libc::c_char;
              q = get_input_line(buf.as_mut_ptr());
              if *q.offset(0) as libc::c_int != 0 && *q.offset(1) == 0 {
                if *(*ptr_to_globals).last_search_pattern.offset(0) != 0 {
                  *(*ptr_to_globals).last_search_pattern.offset(0) = c as libc::c_char
                }
                current_block = 7392824444931029276;
              } else if *q.offset(0) != 0 {
                free((*ptr_to_globals).last_search_pattern as *mut libc::c_void);
                (*ptr_to_globals).last_search_pattern = crate::libbb::xfuncs_printf::xstrdup(q);
                current_block = 7392824444931029276;
              } else {
                current_block = 15129665204879337069;
              }
            }
            16407828456666301883 => {
              if (*ptr_to_globals).last_forward_char == 0 {
                current_block = 15129665204879337069;
              } else {
                loop {
                  q = (*ptr_to_globals).dot.offset(-1);
                  while q >= (*ptr_to_globals).text
                    && *q as libc::c_int != '\n' as i32
                    && *q as libc::c_int != (*ptr_to_globals).last_forward_char
                  {
                    q = q.offset(-1)
                  }
                  if q >= (*ptr_to_globals).text
                    && *q as libc::c_int == (*ptr_to_globals).last_forward_char
                  {
                    (*ptr_to_globals).dot = q
                  }
                  (*ptr_to_globals).cmdcnt -= 1;
                  if !((*ptr_to_globals).cmdcnt > 0) {
                    break;
                  }
                }
                current_block = 15129665204879337069;
              }
            }
            9018432604062702004 => {
              q = (*ptr_to_globals).dot;
              while q < (*ptr_to_globals).end && *q as libc::c_int != '\n' as i32 {
                if !strchr(
                  b"()[]{}\x00" as *const u8 as *const libc::c_char,
                  *q as libc::c_int,
                )
                .is_null()
                {
                  p = find_pair(q, *q);
                  if p.is_null() {
                    indicate_error();
                  } else {
                    (*ptr_to_globals).dot = p
                  }
                  break;
                } else {
                  q = q.offset(1)
                }
              }
              if *q as libc::c_int == '\n' as i32 {
                indicate_error();
              }
              current_block = 15129665204879337069;
            }
            10247103787464459848 => {
              p = (*ptr_to_globals).reg[(*ptr_to_globals).YDreg as usize];
              if p.is_null() {
                status_line_bold(
                  b"Nothing in register %c\x00" as *const u8 as *const libc::c_char,
                  what_reg() as libc::c_int,
                );
              } else {
                if !strchr(p, '\n' as i32).is_null() {
                  if c == 'P' as i32 {
                    dot_begin();
                  }
                  if c == 'p' as i32 {
                    if end_line((*ptr_to_globals).dot) == (*ptr_to_globals).end.offset(-1) {
                      (*ptr_to_globals).dot = (*ptr_to_globals).end
                    } else {
                      dot_next();
                    }
                  }
                } else if c == 'p' as i32 {
                  dot_right();
                }
                string_insert((*ptr_to_globals).dot, p, 1i32);
                end_cmd_q();
              }
              current_block = 15129665204879337069;
            }
            15260732871948875843 => {
              c1 = (get_one_char() | 0x20i32) - 'a' as i32;
              if c1 as libc::c_uint <= 25i32 as libc::c_uint {
                (*ptr_to_globals).mark[c1 as usize] = (*ptr_to_globals).dot
              } else {
                indicate_error();
              }
              current_block = 15129665204879337069;
            }
            12738322036487086035 => {
              c1 = get_one_char() | 0x20i32;
              if (c1 - 'a' as i32) as libc::c_uint <= 25i32 as libc::c_uint {
                c1 = c1 - 'a' as i32;
                q = (*ptr_to_globals).mark[c1 as usize];
                if (*ptr_to_globals).text <= q && q < (*ptr_to_globals).end {
                  (*ptr_to_globals).dot = q;
                  dot_begin();
                  dot_skip_over_ws();
                }
              } else if c1 == '\'' as i32 {
                (*ptr_to_globals).dot = swap_context((*ptr_to_globals).dot);
                dot_begin();
                dot_skip_over_ws();
              } else {
                indicate_error();
              }
              current_block = 15129665204879337069;
            }
            13255096073384561358 => {
              c1 = (get_one_char() | 0x20i32) - 'a' as i32;
              if c1 as libc::c_uint <= 25i32 as libc::c_uint {
                (*ptr_to_globals).YDreg = c1 as smalluint
              } else {
                indicate_error();
              }
              current_block = 15129665204879337069;
            }
            10258711639984089377 => {
              if (*ptr_to_globals).cmd_mode as libc::c_int == 0 {
                indicate_error();
              }
              (*ptr_to_globals).cmd_mode = 0 as smallint;
              undo_queue_commit();
              end_cmd_q();
              (*ptr_to_globals).last_status_cksum = 0;
              current_block = 15129665204879337069;
            }
            11439127087547047736 => {
              buf[0] = c as libc::c_char;
              buf[1] = '\u{0}' as i32 as libc::c_char;
              not_implemented(buf.as_mut_ptr());
              end_cmd_q();
              current_block = 17440971994642376514;
            }
            7961798899781870241 => {
              dot_scroll(
                (*ptr_to_globals).rows.wrapping_sub(2i32 as libc::c_uint) as libc::c_int,
                -1i32,
              );
              current_block = 15129665204879337069;
            }
            9426343755402444879 => {
              dot_scroll(
                (*ptr_to_globals)
                  .rows
                  .wrapping_sub(2i32 as libc::c_uint)
                  .wrapping_div(2i32 as libc::c_uint) as libc::c_int,
                1i32,
              );
              current_block = 15129665204879337069;
            }
            13352459794680105913 => {
              dot_scroll(1i32, 1i32);
              current_block = 15129665204879337069;
            }
            14142272253464333006 => {
              dot_scroll(
                (*ptr_to_globals).rows.wrapping_sub(2i32 as libc::c_uint) as libc::c_int,
                1i32,
              );
              current_block = 15129665204879337069;
            }
            10758177197742640066 => {
              (*ptr_to_globals).last_status_cksum = 0;
              current_block = 15129665204879337069;
            }
            6152256259730122749 => {
              current_block = 7534742345255184552;
            }
            12883932598258173301 => {
              current_block = 8800996768013373992;
            }
            11242998110520238401 => {
              redraw(1i32);
              current_block = 15129665204879337069;
            }
            13619733043935729992 => {
              loop {
                dot_next();
                dot_skip_over_ws();
                (*ptr_to_globals).cmdcnt -= 1;
                if !((*ptr_to_globals).cmdcnt > 0) {
                  break;
                }
              }
              current_block = 15129665204879337069;
            }
            9339065157412720613 => {
              dot_scroll(
                (*ptr_to_globals)
                  .rows
                  .wrapping_sub(2i32 as libc::c_uint)
                  .wrapping_div(2i32 as libc::c_uint) as libc::c_int,
                -1i32,
              );
              current_block = 15129665204879337069;
            }
            11447082683497798022 => {
              dot_scroll(1i32, -1i32);
              current_block = 15129665204879337069;
            }
            5182000506326660482 => {
              current_block = 13993698454868426881;
            }
            1105010766850597332 => {
              if !(*ptr_to_globals).reg[27].is_null() {
                p = begin_line((*ptr_to_globals).dot);
                q = end_line((*ptr_to_globals).dot);
                p = text_hole_delete(p, q, 1i32);
                p = p.offset(string_insert(p, (*ptr_to_globals).reg[27], 2i32) as isize);
                (*ptr_to_globals).dot = p;
                dot_skip_over_ws();
              }
              current_block = 15129665204879337069;
            }
            8616046655533110204 => {
              undo_pop();
              current_block = 15129665204879337069;
            }
            5127767458142431603 => {
              loop {
                (*ptr_to_globals).dot = end_line((*ptr_to_globals).dot);
                (*ptr_to_globals).cmdcnt -= 1;
                if (*ptr_to_globals).cmdcnt <= 0 {
                  break;
                }
                dot_next();
              }
              current_block = 15129665204879337069;
            }
            222014967776118151 => {
              (*ptr_to_globals).last_forward_char = get_one_char();
              current_block = 7856905509180742666;
            }
            11209792479411604110 => {
              loop {
                dot_prev();
                dot_skip_over_ws();
                (*ptr_to_globals).cmdcnt -= 1;
                if !((*ptr_to_globals).cmdcnt > 0) {
                  break;
                }
              }
              current_block = 15129665204879337069;
            }
            3364823792826654116 => {
              if (*ptr_to_globals).lmc_len != 0 {
                (*ptr_to_globals).ioq_start = crate::libbb::xfuncs_printf::xstrndup(
                  (*ptr_to_globals).last_modifying_cmd.as_mut_ptr(),
                  (*ptr_to_globals).lmc_len,
                );
                (*ptr_to_globals).ioq = (*ptr_to_globals).ioq_start
              }
              current_block = 15129665204879337069;
            }
            18096603330221575131 => {
              current_block = 17498168302144015873;
            }
            16891123271837848903 => {
              dot_end();
              current_block = 1752638907092016026;
            }
            8517235759107662071 => {
              current_block = 5847749760081351726;
            }
            12525254419223051704 => {
              if (*ptr_to_globals).dot < (*ptr_to_globals).end.offset(-1) {
                (*ptr_to_globals).dot = yank_delete(
                  (*ptr_to_globals).dot,
                  (*ptr_to_globals).dot,
                  1i32,
                  YANKDEL as libc::c_int,
                  1i32,
                )
              }
              current_block = 15129665204879337069;
            }
            15232911949322867522 => {
              current_block = 17251831742223396249;
            }
            10863374208794025069 => {
              current_block = 1895262434596074581;
            }
            451126677064669119 => {
              loop {
                dot_prev();
                (*ptr_to_globals).dot = move_to_col(
                  (*ptr_to_globals).dot,
                  (*ptr_to_globals).ccol + (*ptr_to_globals).offset,
                );
                (*ptr_to_globals).cmdcnt -= 1;
                if !((*ptr_to_globals).cmdcnt > 0) {
                  break;
                }
              }
              current_block = 15129665204879337069;
            }
            4611735929166613116 => {
              loop {
                if bb_ascii_isalnum(*(*ptr_to_globals).dot as libc::c_uchar) != 0
                  || *(*ptr_to_globals).dot as libc::c_int == '_' as i32
                {
                  (*ptr_to_globals).dot = skip_thing(
                    (*ptr_to_globals).dot,
                    1i32,
                    FORWARD as libc::c_int,
                    S_END_ALNUM as libc::c_int,
                  )
                } else if *strchrnul(
                  b"!\"#$%&\'()*+,-./:;<=>?@[\\]^_`{|}~\x00" as *const u8 as *const libc::c_char,
                  *(*ptr_to_globals).dot as libc::c_int,
                )
                .offset(0)
                  != 0
                {
                  (*ptr_to_globals).dot = skip_thing(
                    (*ptr_to_globals).dot,
                    1i32,
                    FORWARD as libc::c_int,
                    S_END_PUNCT as libc::c_int,
                  )
                }
                if (*ptr_to_globals).dot < (*ptr_to_globals).end.offset(-1) {
                  (*ptr_to_globals).dot = (*ptr_to_globals).dot.offset(1)
                }
                if ({
                  let mut bb__isspace: libc::c_uchar =
                    (*(*ptr_to_globals).dot as libc::c_int - 9i32) as libc::c_uchar;
                  (bb__isspace as libc::c_int == ' ' as i32 - 9i32
                    || bb__isspace as libc::c_int <= 13i32 - 9i32) as libc::c_int
                }) != 0
                {
                  (*ptr_to_globals).dot = skip_thing(
                    (*ptr_to_globals).dot,
                    2i32,
                    FORWARD as libc::c_int,
                    S_OVER_WS as libc::c_int,
                  )
                }
                (*ptr_to_globals).cmdcnt -= 1;
                if !((*ptr_to_globals).cmdcnt > 0) {
                  break;
                }
              }
              current_block = 15129665204879337069;
            }
            4386451087681909888 => {
              (*ptr_to_globals).dot =
                move_to_col((*ptr_to_globals).dot, (*ptr_to_globals).cmdcnt - 1i32);
              current_block = 15129665204879337069;
            }
            1296397779060594135 => {
              dot_begin();
              current_block = 15129665204879337069;
            }
            _ => {}
          }
          match current_block {
            15129665204879337069 => {}
            8629930936610358348 => {}
            _ => {
              match current_block {
                17251831742223396249 => {
                  dir = 0;
                  if c == 'X' as i32 {
                    dir = -1i32
                  }
                  loop {
                    if *(*ptr_to_globals).dot.offset(dir as isize) as libc::c_int != '\n' as i32 {
                      if c == 'X' as i32 {
                        (*ptr_to_globals).dot = (*ptr_to_globals).dot.offset(-1)
                      }
                      (*ptr_to_globals).dot = yank_delete(
                        (*ptr_to_globals).dot,
                        (*ptr_to_globals).dot,
                        0,
                        YANKDEL as libc::c_int,
                        1i32,
                      )
                    }
                    (*ptr_to_globals).cmdcnt -= 1;
                    if !((*ptr_to_globals).cmdcnt > 0) {
                      break;
                    }
                  }
                  end_cmd_q();
                  if c == 's' as i32 {
                    current_block = 8629930936610358348;
                  } else {
                    current_block = 15129665204879337069;
                  }
                }
                2087484904894455135 => {
                  dot_end();
                  (*ptr_to_globals).dot =
                    char_insert((*ptr_to_globals).dot, '\n' as i32 as libc::c_char, 1i32);
                  current_block = 8629930936610358348;
                }
                11945623545738147997 => {
                  (*ptr_to_globals).dot = (*ptr_to_globals).end.offset(-1);
                  if (*ptr_to_globals).cmdcnt > 0 {
                    (*ptr_to_globals).dot = find_line((*ptr_to_globals).cmdcnt)
                  }
                  dot_skip_over_ws();
                  current_block = 15129665204879337069;
                }
                5847749760081351726 => {
                  dir = FORWARD as libc::c_int;
                  if c == 'B' as i32 {
                    dir = BACK as libc::c_int
                  }
                  loop {
                    if c == 'W' as i32
                      || ({
                        let mut bb__isspace: libc::c_uchar =
                          (*(*ptr_to_globals).dot.offset(dir as isize) as libc::c_int - 9i32)
                            as libc::c_uchar;
                        (bb__isspace as libc::c_int == ' ' as i32 - 9i32
                          || bb__isspace as libc::c_int <= 13i32 - 9i32)
                          as libc::c_int
                      }) != 0
                    {
                      (*ptr_to_globals).dot =
                        skip_thing((*ptr_to_globals).dot, 1i32, dir, S_TO_WS as libc::c_int);
                      (*ptr_to_globals).dot =
                        skip_thing((*ptr_to_globals).dot, 2i32, dir, S_OVER_WS as libc::c_int)
                    }
                    if c != 'W' as i32 {
                      (*ptr_to_globals).dot =
                        skip_thing((*ptr_to_globals).dot, 1i32, dir, S_BEFORE_WS as libc::c_int)
                    }
                    (*ptr_to_globals).cmdcnt -= 1;
                    if !((*ptr_to_globals).cmdcnt > 0) {
                      break;
                    }
                  }
                  current_block = 15129665204879337069;
                }
                17440971994642376514 => {
                  current_block = 15129665204879337069;
                }
                7534742345255184552 => {
                  current_block = 17247297260531395789;
                }
                8800996768013373992 => {
                  loop {
                    dot_next();
                    (*ptr_to_globals).dot = move_to_col(
                      (*ptr_to_globals).dot,
                      (*ptr_to_globals).ccol + (*ptr_to_globals).offset,
                    );
                    (*ptr_to_globals).cmdcnt -= 1;
                    if !((*ptr_to_globals).cmdcnt > 0) {
                      break;
                    }
                  }
                  current_block = 15129665204879337069;
                }
                13993698454868426881 => {
                  loop {
                    dot_right();
                    (*ptr_to_globals).cmdcnt -= 1;
                    if !((*ptr_to_globals).cmdcnt > 0) {
                      break;
                    }
                  }
                  current_block = 15129665204879337069;
                }
                7856905509180742666 => {
                  while !((*ptr_to_globals).last_forward_char == 0) {
                    q = (*ptr_to_globals).dot.offset(1);
                    while q < (*ptr_to_globals).end.offset(-1)
                      && *q as libc::c_int != '\n' as i32
                      && *q as libc::c_int != (*ptr_to_globals).last_forward_char
                    {
                      q = q.offset(1)
                    }
                    if *q as libc::c_int == (*ptr_to_globals).last_forward_char {
                      (*ptr_to_globals).dot = q
                    }
                    (*ptr_to_globals).cmdcnt -= 1;
                    if !((*ptr_to_globals).cmdcnt > 0) {
                      break;
                    }
                  }
                  current_block = 15129665204879337069;
                }
                17498168302144015873 => {
                  current_block = 8681395796513813967;
                }
                1752638907092016026 => {
                  if *(*ptr_to_globals).dot as libc::c_int != '\n' as i32 {
                    (*ptr_to_globals).dot = (*ptr_to_globals).dot.offset(1)
                  }
                  current_block = 8629930936610358348;
                }
                3268579060917229304 => {
                  current_block = 8629930936610358348;
                }
                1895262434596074581 => {
                  current_block = 8908416993177701018;
                }
                _ => {}
              }
              match current_block {
                8629930936610358348 => {}
                15129665204879337069 => {}
                _ => {
                  match current_block {
                    17247297260531395789 => {
                      loop {
                        dot_left();
                        (*ptr_to_globals).cmdcnt -= 1;
                        if !((*ptr_to_globals).cmdcnt > 0) {
                          break;
                        }
                      }
                      current_block = 15129665204879337069;
                    }
                    8681395796513813967 => {
                      current_block = 5591548203144509315;
                    }
                    8908416993177701018 => {
                      current_block = 16124761010012532485;
                    }
                    _ => {}
                  }
                  match current_block {
                    15129665204879337069 => {}
                    _ => {
                      match current_block {
                        16124761010012532485 => {
                          let mut yf: libc::c_int = 0;
                          let mut ml: libc::c_int = 0;
                          let mut whole: libc::c_int = 0;
                          yf = YANKDEL as libc::c_int;
                          if c == 'y' as i32 || c == 'Y' as i32 {
                            yf = YANKONLY as libc::c_int
                          }
                          c1 = 'y' as i32;
                          if c != 'Y' as i32 {
                            c1 = get_one_char()
                          }
                          ml = find_range(&mut p, &mut q, c1 as libc::c_char);
                          place_cursor(0i32, 0);
                          if c1 == 27i32 {
                            c1 = 27i32;
                            c = c1
                          } else if !strchr(b"wW\x00" as *const u8 as *const libc::c_char, c1)
                            .is_null()
                          {
                            ml = 0;
                            if c == 'c' as i32 {
                              while ({
                                let mut bb__isspace: libc::c_uchar =
                                  (*q as libc::c_int - 9i32) as libc::c_uchar;
                                (bb__isspace as libc::c_int == ' ' as i32 - 9i32
                                  || bb__isspace as libc::c_int <= 13i32 - 9i32)
                                  as libc::c_int
                              }) != 0
                                && q > p
                              {
                                q = q.offset(-1)
                              }
                            }
                            (*ptr_to_globals).dot = yank_delete(p, q, ml, yf, 1i32)
                          } else if !strchr(
                            b"^0bBeEft%$ lh\x08\x7f\x00" as *const u8 as *const libc::c_char,
                            c1,
                          )
                          .is_null()
                          {
                            (*ptr_to_globals).dot = yank_delete(p, q, ml, yf, 1i32)
                          } else if !strchr(
                            b"cdykjGHL+-{}\r\n\x00" as *const u8 as *const libc::c_char,
                            c1,
                          )
                          .is_null()
                          {
                            (*ptr_to_globals).dot = yank_delete(p, q, ml, yf, 1i32);
                            whole = 1i32
                          } else {
                            c1 = 27i32;
                            c = c1;
                            ml = 0;
                            indicate_error();
                          }
                          if ml != 0 && whole != 0 {
                            if c == 'c' as i32 {
                              (*ptr_to_globals).dot = char_insert(
                                (*ptr_to_globals).dot,
                                '\n' as i32 as libc::c_char,
                                2i32,
                              );
                              if whole != 0
                                && (*ptr_to_globals).dot != (*ptr_to_globals).end.offset(-1)
                              {
                                dot_prev();
                              }
                            } else if c == 'd' as i32 {
                              dot_begin();
                              dot_skip_over_ws();
                            }
                          }
                          if c1 != 27i32 {
                            if c == 'c' as i32 {
                              strcpy(
                                buf.as_mut_ptr(),
                                b"Change\x00" as *const u8 as *const libc::c_char,
                              );
                              current_block = 8629930936610358348;
                            } else {
                              if c == 'd' as i32 {
                                strcpy(
                                  buf.as_mut_ptr(),
                                  b"Delete\x00" as *const u8 as *const libc::c_char,
                                );
                              }
                              if c == 'y' as i32 || c == 'Y' as i32 {
                                strcpy(
                                  buf.as_mut_ptr(),
                                  b"Yank\x00" as *const u8 as *const libc::c_char,
                                );
                              }
                              p = (*ptr_to_globals).reg[(*ptr_to_globals).YDreg as usize];
                              q = p.offset(strlen(p) as isize);
                              cnt = 0;
                              while p <= q {
                                if *p as libc::c_int == '\n' as i32 {
                                  cnt += 1
                                }
                                p = p.offset(1)
                              }
                              status_line(
                                b"%s %u lines (%u chars) using [%c]\x00" as *const u8
                                  as *const libc::c_char,
                                buf.as_mut_ptr(),
                                cnt,
                                strlen((*ptr_to_globals).reg[(*ptr_to_globals).YDreg as usize])
                                  as libc::c_uint,
                                what_reg() as libc::c_int,
                              );
                              end_cmd_q();
                              current_block = 15129665204879337069;
                            }
                          } else {
                            current_block = 15129665204879337069;
                          }
                        }
                        5591548203144509315 => {
                          current_block = 2636677179867529885;
                        }
                        _ => {}
                      }
                      match current_block {
                        15129665204879337069 => {}
                        8629930936610358348 => {}
                        _ => {
                          match current_block {
                            2636677179867529885 => {
                              current_block = 12309206730560524281;
                            }
                            _ => {}
                          }
                          match current_block {
                            12309206730560524281 => {
                              current_block = 3325768110057758661;
                            }
                            _ => {}
                          }
                          match current_block {
                            3325768110057758661 => {
                              current_block = 14815832896553429982;
                            }
                            _ => {}
                          }
                          match current_block {
                            14815832896553429982 => {
                              current_block = 10731695520297161438;
                            }
                            _ => {}
                          }
                          match current_block {
                            10731695520297161438 => {
                              if c == '0' as i32 && (*ptr_to_globals).cmdcnt < 1i32 {
                                dot_begin();
                              } else {
                                (*ptr_to_globals).cmdcnt =
                                  (*ptr_to_globals).cmdcnt * 10i32 + (c - '0' as i32)
                              }
                              current_block = 15129665204879337069;
                            }
                            _ => {}
                          }
                          match current_block {
                            15129665204879337069 => {}
                            _ => {
                              loop {
                                match current_block {
                                  16813369756331276724 => {
                                    msg = std::ptr::null();
                                    current_block = 7392824444931029276;
                                  }
                                  7392824444931029276 => {
                                    dir = FORWARD as libc::c_int;
                                    p = (*ptr_to_globals).dot.offset(1);
                                    if *(*ptr_to_globals).last_search_pattern.offset(0)
                                      as libc::c_int
                                      == '?' as i32
                                    {
                                      dir = BACK as libc::c_int;
                                      p = (*ptr_to_globals).dot.offset(-1)
                                    }
                                    current_block = 4166979493554389389;
                                  }
                                  _ => {
                                    q = char_search(
                                      p,
                                      (*ptr_to_globals).last_search_pattern.offset(1),
                                      dir << 1i32 | FULL as libc::c_int,
                                    );
                                    if !q.is_null() {
                                      (*ptr_to_globals).dot = q;
                                      msg = std::ptr::null()
                                    } else {
                                      p = (*ptr_to_globals).text;
                                      if dir == BACK as libc::c_int {
                                        p = (*ptr_to_globals).end.offset(-1)
                                      }
                                      q = char_search(
                                        p,
                                        (*ptr_to_globals).last_search_pattern.offset(1),
                                        dir << 1i32 | FULL as libc::c_int,
                                      );
                                      if !q.is_null() {
                                        (*ptr_to_globals).dot = q;
                                        msg = b"search hit BOTTOM, continuing at TOP\x00"
                                          as *const u8
                                          as *const libc::c_char;
                                        if dir == BACK as libc::c_int {
                                          msg = b"search hit TOP, continuing at BOTTOM\x00"
                                            as *const u8
                                            as *const libc::c_char
                                        }
                                      } else {
                                        msg = b"Pattern not found\x00" as *const u8
                                          as *const libc::c_char
                                      }
                                    }
                                    if !msg.is_null() {
                                      status_line_bold(
                                        b"%s\x00" as *const u8 as *const libc::c_char,
                                        msg,
                                      );
                                    }
                                    (*ptr_to_globals).cmdcnt -= 1;
                                    if (*ptr_to_globals).cmdcnt > 0 {
                                      current_block = 16813369756331276724;
                                    } else {
                                      break;
                                    }
                                  }
                                }
                              }
                              current_block = 15129665204879337069;
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
        100 => {
          current_block = 1895262434596074581;
          match current_block {
            16992905640583886232 => {
              loop {
                if (*(*ptr_to_globals).dot as libc::c_int - 'a' as i32) as libc::c_uchar
                  as libc::c_int
                  <= 'z' as i32 - 'a' as i32
                {
                  undo_push(
                    (*ptr_to_globals).dot,
                    1i32 as libc::c_uint,
                    1i32 as libc::c_uchar,
                  );
                  *(*ptr_to_globals).dot =
                    bb_ascii_toupper(*(*ptr_to_globals).dot as libc::c_uchar) as libc::c_char;
                  undo_push(
                    (*ptr_to_globals).dot,
                    1i32 as libc::c_uint,
                    2i32 as libc::c_uchar,
                  );
                } else if (*(*ptr_to_globals).dot as libc::c_int - 'A' as i32) as libc::c_uchar
                  as libc::c_int
                  <= 'Z' as i32 - 'A' as i32
                {
                  undo_push(
                    (*ptr_to_globals).dot,
                    1i32 as libc::c_uint,
                    1i32 as libc::c_uchar,
                  );
                  *(*ptr_to_globals).dot =
                    bb_ascii_tolower(*(*ptr_to_globals).dot as libc::c_uchar) as libc::c_char;
                  undo_push(
                    (*ptr_to_globals).dot,
                    1i32 as libc::c_uint,
                    2i32 as libc::c_uchar,
                  );
                }
                dot_right();
                (*ptr_to_globals).cmdcnt -= 1;
                if !((*ptr_to_globals).cmdcnt > 0) {
                  break;
                }
              }
              end_cmd_q();
              current_block = 15129665204879337069;
            }
            8729655159604064397 => {
              c1 = get_one_char();
              cnt = 0;
              if c1 == '.' as i32 {
                cnt = (*ptr_to_globals)
                  .rows
                  .wrapping_sub(2i32 as libc::c_uint)
                  .wrapping_div(2i32 as libc::c_uint) as libc::c_int
              }
              if c1 == '-' as i32 {
                cnt = (*ptr_to_globals).rows.wrapping_sub(2i32 as libc::c_uint) as libc::c_int
              }
              (*ptr_to_globals).screenbegin = begin_line((*ptr_to_globals).dot);
              dot_scroll(cnt, -1i32);
              current_block = 15129665204879337069;
            }
            15899500648299942075 => {
              (*ptr_to_globals).last_forward_char = get_one_char();
              do_cmd(';' as i32);
              if *(*ptr_to_globals).dot as libc::c_int == (*ptr_to_globals).last_forward_char {
                dot_left();
              }
              (*ptr_to_globals).last_forward_char = 0;
              current_block = 15129665204879337069;
            }
            9051390181078481641 => {
              c1 = get_one_char();
              if *(*ptr_to_globals).dot as libc::c_int != '\n' as i32 {
                (*ptr_to_globals).dot =
                  text_hole_delete((*ptr_to_globals).dot, (*ptr_to_globals).dot, 1i32);
                (*ptr_to_globals).dot =
                  char_insert((*ptr_to_globals).dot, c1 as libc::c_char, 2i32);
                dot_left();
              }
              end_cmd_q();
              current_block = 15129665204879337069;
            }
            877115918601926659 => {
              dir = FORWARD as libc::c_int;
              if c == 'b' as i32 {
                dir = BACK as libc::c_int
              }
              while !((*ptr_to_globals).dot.offset(dir as isize) < (*ptr_to_globals).text
                || (*ptr_to_globals).dot.offset(dir as isize) > (*ptr_to_globals).end.offset(-1))
              {
                (*ptr_to_globals).dot = (*ptr_to_globals).dot.offset(dir as isize);
                if ({
                  let mut bb__isspace: libc::c_uchar =
                    (*(*ptr_to_globals).dot as libc::c_int - 9i32) as libc::c_uchar;
                  (bb__isspace as libc::c_int == ' ' as i32 - 9i32
                    || bb__isspace as libc::c_int <= 13i32 - 9i32) as libc::c_int
                }) != 0
                {
                  (*ptr_to_globals).dot = skip_thing(
                    (*ptr_to_globals).dot,
                    if c == 'e' as i32 { 2i32 } else { 1i32 },
                    dir,
                    S_OVER_WS as libc::c_int,
                  )
                }
                if bb_ascii_isalnum(*(*ptr_to_globals).dot as libc::c_uchar) != 0
                  || *(*ptr_to_globals).dot as libc::c_int == '_' as i32
                {
                  (*ptr_to_globals).dot =
                    skip_thing((*ptr_to_globals).dot, 1i32, dir, S_END_ALNUM as libc::c_int)
                } else if *strchrnul(
                  b"!\"#$%&\'()*+,-./:;<=>?@[\\]^_`{|}~\x00" as *const u8 as *const libc::c_char,
                  *(*ptr_to_globals).dot as libc::c_int,
                )
                .offset(0)
                  != 0
                {
                  (*ptr_to_globals).dot =
                    skip_thing((*ptr_to_globals).dot, 1i32, dir, S_END_PUNCT as libc::c_int)
                }
                (*ptr_to_globals).cmdcnt -= 1;
                if !((*ptr_to_globals).cmdcnt > 0) {
                  break;
                }
              }
              current_block = 15129665204879337069;
            }
            1085022737867179637 => {
              dot_begin();
              dot_skip_over_ws();
              current_block = 15129665204879337069;
            }
            3113147720494587438 => {
              c1 = get_one_char();
              if c1 != 'Z' as i32 {
                indicate_error();
              } else if (*ptr_to_globals).modified_count != 0 {
                if 1i32 != 0 && (*ptr_to_globals).readonly_mode as libc::c_int != 0 {
                  status_line_bold(
                    b"\'%s\' is read only\x00" as *const u8 as *const libc::c_char,
                    (*ptr_to_globals).current_filename,
                  );
                } else {
                  cnt = file_write(
                    (*ptr_to_globals).current_filename,
                    (*ptr_to_globals).text,
                    (*ptr_to_globals).end.offset(-1),
                  );
                  if cnt < 0 {
                    if cnt == -1i32 {
                      status_line_bold(b"Write error: %m\x00" as *const u8 as *const libc::c_char);
                    }
                  } else if cnt as libc::c_long
                    == (*ptr_to_globals)
                      .end
                      .offset(-1)
                      .wrapping_offset_from((*ptr_to_globals).text)
                      as libc::c_long
                      + 1
                  {
                    (*ptr_to_globals).editing = 0 as smallint
                  }
                }
              } else {
                (*ptr_to_globals).editing = 0 as smallint
              }
              current_block = 15129665204879337069;
            }
            12960118908218882441 => {
              p = begin_line((*ptr_to_globals).dot);
              if *p.offset(-1i32 as isize) as libc::c_int == '\n' as i32 {
                dot_prev();
                current_block = 2087484904894455135;
              } else {
                dot_begin();
                (*ptr_to_globals).dot =
                  char_insert((*ptr_to_globals).dot, '\n' as i32 as libc::c_char, 1i32);
                dot_prev();
                current_block = 8629930936610358348;
              }
            }
            8720450212473544924 => {
              (*ptr_to_globals).dot = (*ptr_to_globals).screenbegin;
              cnt = 0;
              while (cnt as libc::c_uint)
                < (*ptr_to_globals)
                  .rows
                  .wrapping_sub(1i32 as libc::c_uint)
                  .wrapping_div(2i32 as libc::c_uint)
              {
                (*ptr_to_globals).dot = next_line((*ptr_to_globals).dot);
                cnt += 1
              }
              current_block = 15129665204879337069;
            }
            13015277209715431090 => {
              (*ptr_to_globals).dot = end_screen();
              if (*ptr_to_globals).cmdcnt as libc::c_uint
                > (*ptr_to_globals).rows.wrapping_sub(1i32 as libc::c_uint)
              {
                (*ptr_to_globals).cmdcnt =
                  (*ptr_to_globals).rows.wrapping_sub(1i32 as libc::c_uint) as libc::c_int
              }
              (*ptr_to_globals).cmdcnt -= 1;
              if (*ptr_to_globals).cmdcnt > 0 {
                do_cmd('-' as i32);
              }
              dot_begin();
              dot_skip_over_ws();
              current_block = 15129665204879337069;
            }
            9800435767766781385 => {
              loop {
                dot_end();
                if (*ptr_to_globals).dot < (*ptr_to_globals).end.offset(-1) {
                  undo_push(
                    (*ptr_to_globals).dot,
                    1i32 as libc::c_uint,
                    1i32 as libc::c_uchar,
                  );
                  let fresh15 = (*ptr_to_globals).dot;
                  (*ptr_to_globals).dot = (*ptr_to_globals).dot.offset(1);
                  *fresh15 = ' ' as i32 as libc::c_char;
                  undo_push(
                    (*ptr_to_globals).dot.offset(-1),
                    1i32 as libc::c_uint,
                    2i32 as libc::c_uchar,
                  );
                  while ({
                    let mut bb__isblank: libc::c_uchar = *(*ptr_to_globals).dot as libc::c_uchar;
                    (bb__isblank as libc::c_int == ' ' as i32
                      || bb__isblank as libc::c_int == '\t' as i32)
                      as libc::c_int
                  }) != 0
                  {
                    text_hole_delete((*ptr_to_globals).dot, (*ptr_to_globals).dot, 2i32);
                  }
                }
                (*ptr_to_globals).cmdcnt -= 1;
                if !((*ptr_to_globals).cmdcnt > 0) {
                  break;
                }
              }
              end_cmd_q();
              current_block = 15129665204879337069;
            }
            3432363526595694666 => {
              dot_begin();
              dot_skip_over_ws();
              current_block = 3268579060917229304;
            }
            3494829253343353619 => {
              (*ptr_to_globals).dot = (*ptr_to_globals).screenbegin;
              if (*ptr_to_globals).cmdcnt as libc::c_uint
                > (*ptr_to_globals).rows.wrapping_sub(1i32 as libc::c_uint)
              {
                (*ptr_to_globals).cmdcnt =
                  (*ptr_to_globals).rows.wrapping_sub(1i32 as libc::c_uint) as libc::c_int
              }
              (*ptr_to_globals).cmdcnt -= 1;
              if (*ptr_to_globals).cmdcnt > 0 {
                do_cmd('+' as i32);
              }
              dot_skip_over_ws();
              current_block = 15129665204879337069;
            }
            17973101765331640574 => {
              c1 = get_one_char();
              if c1 != 'g' as i32 {
                buf[0] = 'g' as i32 as libc::c_char;
                buf[1] = if c1 >= 0 { c1 } else { '*' as i32 } as libc::c_char;
                buf[2] = '\u{0}' as i32 as libc::c_char;
                not_implemented(buf.as_mut_ptr());
                current_block = 15129665204879337069;
              } else {
                if (*ptr_to_globals).cmdcnt == 0 {
                  (*ptr_to_globals).cmdcnt = 1i32
                }
                current_block = 11945623545738147997;
              }
            }
            16546625800574160972 => {
              save_dot = (*ptr_to_globals).dot;
              (*ptr_to_globals).dot = dollar_line((*ptr_to_globals).dot);
              (*ptr_to_globals).dot = yank_delete(
                save_dot,
                (*ptr_to_globals).dot,
                0,
                YANKDEL as libc::c_int,
                1i32,
              );
              if c == 'C' as i32 {
                current_block = 8629930936610358348;
              } else {
                if c == 'D' as i32 {
                  end_cmd_q();
                }
                current_block = 15129665204879337069;
              }
            }
            11937696639986586685 => {
              cnt = count_lines((*ptr_to_globals).text, (*ptr_to_globals).dot);
              c1 = get_one_char();
              find_range(&mut p, &mut q, c1 as libc::c_char);
              yank_delete(p, q, 1i32, YANKONLY as libc::c_int, 0);
              p = begin_line(p);
              q = end_line(q);
              i = count_lines(p, q);
              while i > 0 {
                if c == '<' as i32 {
                  if *p as libc::c_int == '\t' as i32 {
                    text_hole_delete(p, p, 0);
                  } else if *p as libc::c_int == ' ' as i32 {
                    j = 0;
                    while *p as libc::c_int == ' ' as i32 && j < (*ptr_to_globals).tabstop {
                      text_hole_delete(p, p, 0);
                      j += 1
                    }
                  }
                } else if c == '>' as i32 {
                  char_insert(p, '\t' as i32 as libc::c_char, 1i32);
                }
                i -= 1;
                p = next_line(p)
              }
              (*ptr_to_globals).dot = find_line(cnt);
              dot_skip_over_ws();
              end_cmd_q();
              current_block = 15129665204879337069;
            }
            17725350714912028156 => {
              p = get_input_line(b":\x00" as *const u8 as *const libc::c_char);
              colon(p);
              current_block = 15129665204879337069;
            }
            14526470074083880812 => {
              q = char_search(
                (*ptr_to_globals).dot,
                b"\n\n\x00" as *const u8 as *const libc::c_char,
                (FORWARD as libc::c_int) << 1i32 | FULL as libc::c_int,
              );
              if !q.is_null() {
                (*ptr_to_globals).dot = next_line(q)
              }
              current_block = 15129665204879337069;
            }
            8893187391306414141 => {
              q = char_search(
                (*ptr_to_globals).dot,
                b"\n\n\x00" as *const u8 as *const libc::c_char,
                ((BACK as libc::c_int as libc::c_uint) << 1i32
                  | FULL as libc::c_int as libc::c_uint) as libc::c_int,
              );
              if !q.is_null() {
                (*ptr_to_globals).dot = next_line(q)
              }
              current_block = 15129665204879337069;
            }
            7021673758293221412 => {
              dir = BACK as libc::c_int;
              p = (*ptr_to_globals).dot.offset(-1);
              if *(*ptr_to_globals).last_search_pattern.offset(0) as libc::c_int == '?' as i32 {
                dir = FORWARD as libc::c_int;
                p = (*ptr_to_globals).dot.offset(1)
              }
              current_block = 4166979493554389389;
            }
            18374191879090272823 => {
              buf[0] = c as libc::c_char;
              buf[1] = '\u{0}' as i32 as libc::c_char;
              q = get_input_line(buf.as_mut_ptr());
              if *q.offset(0) as libc::c_int != 0 && *q.offset(1) == 0 {
                if *(*ptr_to_globals).last_search_pattern.offset(0) != 0 {
                  *(*ptr_to_globals).last_search_pattern.offset(0) = c as libc::c_char
                }
                current_block = 7392824444931029276;
              } else if *q.offset(0) != 0 {
                free((*ptr_to_globals).last_search_pattern as *mut libc::c_void);
                (*ptr_to_globals).last_search_pattern = crate::libbb::xfuncs_printf::xstrdup(q);
                current_block = 7392824444931029276;
              } else {
                current_block = 15129665204879337069;
              }
            }
            16407828456666301883 => {
              if (*ptr_to_globals).last_forward_char == 0 {
                current_block = 15129665204879337069;
              } else {
                loop {
                  q = (*ptr_to_globals).dot.offset(-1);
                  while q >= (*ptr_to_globals).text
                    && *q as libc::c_int != '\n' as i32
                    && *q as libc::c_int != (*ptr_to_globals).last_forward_char
                  {
                    q = q.offset(-1)
                  }
                  if q >= (*ptr_to_globals).text
                    && *q as libc::c_int == (*ptr_to_globals).last_forward_char
                  {
                    (*ptr_to_globals).dot = q
                  }
                  (*ptr_to_globals).cmdcnt -= 1;
                  if !((*ptr_to_globals).cmdcnt > 0) {
                    break;
                  }
                }
                current_block = 15129665204879337069;
              }
            }
            9018432604062702004 => {
              q = (*ptr_to_globals).dot;
              while q < (*ptr_to_globals).end && *q as libc::c_int != '\n' as i32 {
                if !strchr(
                  b"()[]{}\x00" as *const u8 as *const libc::c_char,
                  *q as libc::c_int,
                )
                .is_null()
                {
                  p = find_pair(q, *q);
                  if p.is_null() {
                    indicate_error();
                  } else {
                    (*ptr_to_globals).dot = p
                  }
                  break;
                } else {
                  q = q.offset(1)
                }
              }
              if *q as libc::c_int == '\n' as i32 {
                indicate_error();
              }
              current_block = 15129665204879337069;
            }
            10247103787464459848 => {
              p = (*ptr_to_globals).reg[(*ptr_to_globals).YDreg as usize];
              if p.is_null() {
                status_line_bold(
                  b"Nothing in register %c\x00" as *const u8 as *const libc::c_char,
                  what_reg() as libc::c_int,
                );
              } else {
                if !strchr(p, '\n' as i32).is_null() {
                  if c == 'P' as i32 {
                    dot_begin();
                  }
                  if c == 'p' as i32 {
                    if end_line((*ptr_to_globals).dot) == (*ptr_to_globals).end.offset(-1) {
                      (*ptr_to_globals).dot = (*ptr_to_globals).end
                    } else {
                      dot_next();
                    }
                  }
                } else if c == 'p' as i32 {
                  dot_right();
                }
                string_insert((*ptr_to_globals).dot, p, 1i32);
                end_cmd_q();
              }
              current_block = 15129665204879337069;
            }
            15260732871948875843 => {
              c1 = (get_one_char() | 0x20i32) - 'a' as i32;
              if c1 as libc::c_uint <= 25i32 as libc::c_uint {
                (*ptr_to_globals).mark[c1 as usize] = (*ptr_to_globals).dot
              } else {
                indicate_error();
              }
              current_block = 15129665204879337069;
            }
            12738322036487086035 => {
              c1 = get_one_char() | 0x20i32;
              if (c1 - 'a' as i32) as libc::c_uint <= 25i32 as libc::c_uint {
                c1 = c1 - 'a' as i32;
                q = (*ptr_to_globals).mark[c1 as usize];
                if (*ptr_to_globals).text <= q && q < (*ptr_to_globals).end {
                  (*ptr_to_globals).dot = q;
                  dot_begin();
                  dot_skip_over_ws();
                }
              } else if c1 == '\'' as i32 {
                (*ptr_to_globals).dot = swap_context((*ptr_to_globals).dot);
                dot_begin();
                dot_skip_over_ws();
              } else {
                indicate_error();
              }
              current_block = 15129665204879337069;
            }
            13255096073384561358 => {
              c1 = (get_one_char() | 0x20i32) - 'a' as i32;
              if c1 as libc::c_uint <= 25i32 as libc::c_uint {
                (*ptr_to_globals).YDreg = c1 as smalluint
              } else {
                indicate_error();
              }
              current_block = 15129665204879337069;
            }
            10258711639984089377 => {
              if (*ptr_to_globals).cmd_mode as libc::c_int == 0 {
                indicate_error();
              }
              (*ptr_to_globals).cmd_mode = 0 as smallint;
              undo_queue_commit();
              end_cmd_q();
              (*ptr_to_globals).last_status_cksum = 0;
              current_block = 15129665204879337069;
            }
            11439127087547047736 => {
              buf[0] = c as libc::c_char;
              buf[1] = '\u{0}' as i32 as libc::c_char;
              not_implemented(buf.as_mut_ptr());
              end_cmd_q();
              current_block = 17440971994642376514;
            }
            7961798899781870241 => {
              dot_scroll(
                (*ptr_to_globals).rows.wrapping_sub(2i32 as libc::c_uint) as libc::c_int,
                -1i32,
              );
              current_block = 15129665204879337069;
            }
            9426343755402444879 => {
              dot_scroll(
                (*ptr_to_globals)
                  .rows
                  .wrapping_sub(2i32 as libc::c_uint)
                  .wrapping_div(2i32 as libc::c_uint) as libc::c_int,
                1i32,
              );
              current_block = 15129665204879337069;
            }
            13352459794680105913 => {
              dot_scroll(1i32, 1i32);
              current_block = 15129665204879337069;
            }
            14142272253464333006 => {
              dot_scroll(
                (*ptr_to_globals).rows.wrapping_sub(2i32 as libc::c_uint) as libc::c_int,
                1i32,
              );
              current_block = 15129665204879337069;
            }
            10758177197742640066 => {
              (*ptr_to_globals).last_status_cksum = 0;
              current_block = 15129665204879337069;
            }
            6152256259730122749 => {
              current_block = 7534742345255184552;
            }
            12883932598258173301 => {
              current_block = 8800996768013373992;
            }
            11242998110520238401 => {
              redraw(1i32);
              current_block = 15129665204879337069;
            }
            13619733043935729992 => {
              loop {
                dot_next();
                dot_skip_over_ws();
                (*ptr_to_globals).cmdcnt -= 1;
                if !((*ptr_to_globals).cmdcnt > 0) {
                  break;
                }
              }
              current_block = 15129665204879337069;
            }
            9339065157412720613 => {
              dot_scroll(
                (*ptr_to_globals)
                  .rows
                  .wrapping_sub(2i32 as libc::c_uint)
                  .wrapping_div(2i32 as libc::c_uint) as libc::c_int,
                -1i32,
              );
              current_block = 15129665204879337069;
            }
            11447082683497798022 => {
              dot_scroll(1i32, -1i32);
              current_block = 15129665204879337069;
            }
            5182000506326660482 => {
              current_block = 13993698454868426881;
            }
            1105010766850597332 => {
              if !(*ptr_to_globals).reg[27].is_null() {
                p = begin_line((*ptr_to_globals).dot);
                q = end_line((*ptr_to_globals).dot);
                p = text_hole_delete(p, q, 1i32);
                p = p.offset(string_insert(p, (*ptr_to_globals).reg[27], 2i32) as isize);
                (*ptr_to_globals).dot = p;
                dot_skip_over_ws();
              }
              current_block = 15129665204879337069;
            }
            8616046655533110204 => {
              undo_pop();
              current_block = 15129665204879337069;
            }
            5127767458142431603 => {
              loop {
                (*ptr_to_globals).dot = end_line((*ptr_to_globals).dot);
                (*ptr_to_globals).cmdcnt -= 1;
                if (*ptr_to_globals).cmdcnt <= 0 {
                  break;
                }
                dot_next();
              }
              current_block = 15129665204879337069;
            }
            222014967776118151 => {
              (*ptr_to_globals).last_forward_char = get_one_char();
              current_block = 7856905509180742666;
            }
            11209792479411604110 => {
              loop {
                dot_prev();
                dot_skip_over_ws();
                (*ptr_to_globals).cmdcnt -= 1;
                if !((*ptr_to_globals).cmdcnt > 0) {
                  break;
                }
              }
              current_block = 15129665204879337069;
            }
            3364823792826654116 => {
              if (*ptr_to_globals).lmc_len != 0 {
                (*ptr_to_globals).ioq_start = crate::libbb::xfuncs_printf::xstrndup(
                  (*ptr_to_globals).last_modifying_cmd.as_mut_ptr(),
                  (*ptr_to_globals).lmc_len,
                );
                (*ptr_to_globals).ioq = (*ptr_to_globals).ioq_start
              }
              current_block = 15129665204879337069;
            }
            18096603330221575131 => {
              current_block = 17498168302144015873;
            }
            16891123271837848903 => {
              dot_end();
              current_block = 1752638907092016026;
            }
            8517235759107662071 => {
              current_block = 5847749760081351726;
            }
            12525254419223051704 => {
              if (*ptr_to_globals).dot < (*ptr_to_globals).end.offset(-1) {
                (*ptr_to_globals).dot = yank_delete(
                  (*ptr_to_globals).dot,
                  (*ptr_to_globals).dot,
                  1i32,
                  YANKDEL as libc::c_int,
                  1i32,
                )
              }
              current_block = 15129665204879337069;
            }
            15232911949322867522 => {
              current_block = 17251831742223396249;
            }
            10863374208794025069 => {
              current_block = 1895262434596074581;
            }
            451126677064669119 => {
              loop {
                dot_prev();
                (*ptr_to_globals).dot = move_to_col(
                  (*ptr_to_globals).dot,
                  (*ptr_to_globals).ccol + (*ptr_to_globals).offset,
                );
                (*ptr_to_globals).cmdcnt -= 1;
                if !((*ptr_to_globals).cmdcnt > 0) {
                  break;
                }
              }
              current_block = 15129665204879337069;
            }
            4611735929166613116 => {
              loop {
                if bb_ascii_isalnum(*(*ptr_to_globals).dot as libc::c_uchar) != 0
                  || *(*ptr_to_globals).dot as libc::c_int == '_' as i32
                {
                  (*ptr_to_globals).dot = skip_thing(
                    (*ptr_to_globals).dot,
                    1i32,
                    FORWARD as libc::c_int,
                    S_END_ALNUM as libc::c_int,
                  )
                } else if *strchrnul(
                  b"!\"#$%&\'()*+,-./:;<=>?@[\\]^_`{|}~\x00" as *const u8 as *const libc::c_char,
                  *(*ptr_to_globals).dot as libc::c_int,
                )
                .offset(0)
                  != 0
                {
                  (*ptr_to_globals).dot = skip_thing(
                    (*ptr_to_globals).dot,
                    1i32,
                    FORWARD as libc::c_int,
                    S_END_PUNCT as libc::c_int,
                  )
                }
                if (*ptr_to_globals).dot < (*ptr_to_globals).end.offset(-1) {
                  (*ptr_to_globals).dot = (*ptr_to_globals).dot.offset(1)
                }
                if ({
                  let mut bb__isspace: libc::c_uchar =
                    (*(*ptr_to_globals).dot as libc::c_int - 9i32) as libc::c_uchar;
                  (bb__isspace as libc::c_int == ' ' as i32 - 9i32
                    || bb__isspace as libc::c_int <= 13i32 - 9i32) as libc::c_int
                }) != 0
                {
                  (*ptr_to_globals).dot = skip_thing(
                    (*ptr_to_globals).dot,
                    2i32,
                    FORWARD as libc::c_int,
                    S_OVER_WS as libc::c_int,
                  )
                }
                (*ptr_to_globals).cmdcnt -= 1;
                if !((*ptr_to_globals).cmdcnt > 0) {
                  break;
                }
              }
              current_block = 15129665204879337069;
            }
            4386451087681909888 => {
              (*ptr_to_globals).dot =
                move_to_col((*ptr_to_globals).dot, (*ptr_to_globals).cmdcnt - 1i32);
              current_block = 15129665204879337069;
            }
            1296397779060594135 => {
              dot_begin();
              current_block = 15129665204879337069;
            }
            _ => {}
          }
          match current_block {
            15129665204879337069 => {}
            8629930936610358348 => {}
            _ => {
              match current_block {
                17251831742223396249 => {
                  dir = 0;
                  if c == 'X' as i32 {
                    dir = -1i32
                  }
                  loop {
                    if *(*ptr_to_globals).dot.offset(dir as isize) as libc::c_int != '\n' as i32 {
                      if c == 'X' as i32 {
                        (*ptr_to_globals).dot = (*ptr_to_globals).dot.offset(-1)
                      }
                      (*ptr_to_globals).dot = yank_delete(
                        (*ptr_to_globals).dot,
                        (*ptr_to_globals).dot,
                        0,
                        YANKDEL as libc::c_int,
                        1i32,
                      )
                    }
                    (*ptr_to_globals).cmdcnt -= 1;
                    if !((*ptr_to_globals).cmdcnt > 0) {
                      break;
                    }
                  }
                  end_cmd_q();
                  if c == 's' as i32 {
                    current_block = 8629930936610358348;
                  } else {
                    current_block = 15129665204879337069;
                  }
                }
                2087484904894455135 => {
                  dot_end();
                  (*ptr_to_globals).dot =
                    char_insert((*ptr_to_globals).dot, '\n' as i32 as libc::c_char, 1i32);
                  current_block = 8629930936610358348;
                }
                11945623545738147997 => {
                  (*ptr_to_globals).dot = (*ptr_to_globals).end.offset(-1);
                  if (*ptr_to_globals).cmdcnt > 0 {
                    (*ptr_to_globals).dot = find_line((*ptr_to_globals).cmdcnt)
                  }
                  dot_skip_over_ws();
                  current_block = 15129665204879337069;
                }
                5847749760081351726 => {
                  dir = FORWARD as libc::c_int;
                  if c == 'B' as i32 {
                    dir = BACK as libc::c_int
                  }
                  loop {
                    if c == 'W' as i32
                      || ({
                        let mut bb__isspace: libc::c_uchar =
                          (*(*ptr_to_globals).dot.offset(dir as isize) as libc::c_int - 9i32)
                            as libc::c_uchar;
                        (bb__isspace as libc::c_int == ' ' as i32 - 9i32
                          || bb__isspace as libc::c_int <= 13i32 - 9i32)
                          as libc::c_int
                      }) != 0
                    {
                      (*ptr_to_globals).dot =
                        skip_thing((*ptr_to_globals).dot, 1i32, dir, S_TO_WS as libc::c_int);
                      (*ptr_to_globals).dot =
                        skip_thing((*ptr_to_globals).dot, 2i32, dir, S_OVER_WS as libc::c_int)
                    }
                    if c != 'W' as i32 {
                      (*ptr_to_globals).dot =
                        skip_thing((*ptr_to_globals).dot, 1i32, dir, S_BEFORE_WS as libc::c_int)
                    }
                    (*ptr_to_globals).cmdcnt -= 1;
                    if !((*ptr_to_globals).cmdcnt > 0) {
                      break;
                    }
                  }
                  current_block = 15129665204879337069;
                }
                17440971994642376514 => {
                  current_block = 15129665204879337069;
                }
                7534742345255184552 => {
                  current_block = 17247297260531395789;
                }
                8800996768013373992 => {
                  loop {
                    dot_next();
                    (*ptr_to_globals).dot = move_to_col(
                      (*ptr_to_globals).dot,
                      (*ptr_to_globals).ccol + (*ptr_to_globals).offset,
                    );
                    (*ptr_to_globals).cmdcnt -= 1;
                    if !((*ptr_to_globals).cmdcnt > 0) {
                      break;
                    }
                  }
                  current_block = 15129665204879337069;
                }
                13993698454868426881 => {
                  loop {
                    dot_right();
                    (*ptr_to_globals).cmdcnt -= 1;
                    if !((*ptr_to_globals).cmdcnt > 0) {
                      break;
                    }
                  }
                  current_block = 15129665204879337069;
                }
                7856905509180742666 => {
                  while !((*ptr_to_globals).last_forward_char == 0) {
                    q = (*ptr_to_globals).dot.offset(1);
                    while q < (*ptr_to_globals).end.offset(-1)
                      && *q as libc::c_int != '\n' as i32
                      && *q as libc::c_int != (*ptr_to_globals).last_forward_char
                    {
                      q = q.offset(1)
                    }
                    if *q as libc::c_int == (*ptr_to_globals).last_forward_char {
                      (*ptr_to_globals).dot = q
                    }
                    (*ptr_to_globals).cmdcnt -= 1;
                    if !((*ptr_to_globals).cmdcnt > 0) {
                      break;
                    }
                  }
                  current_block = 15129665204879337069;
                }
                17498168302144015873 => {
                  current_block = 8681395796513813967;
                }
                1752638907092016026 => {
                  if *(*ptr_to_globals).dot as libc::c_int != '\n' as i32 {
                    (*ptr_to_globals).dot = (*ptr_to_globals).dot.offset(1)
                  }
                  current_block = 8629930936610358348;
                }
                3268579060917229304 => {
                  current_block = 8629930936610358348;
                }
                1895262434596074581 => {
                  current_block = 8908416993177701018;
                }
                _ => {}
              }
              match current_block {
                8629930936610358348 => {}
                15129665204879337069 => {}
                _ => {
                  match current_block {
                    17247297260531395789 => {
                      loop {
                        dot_left();
                        (*ptr_to_globals).cmdcnt -= 1;
                        if !((*ptr_to_globals).cmdcnt > 0) {
                          break;
                        }
                      }
                      current_block = 15129665204879337069;
                    }
                    8681395796513813967 => {
                      current_block = 5591548203144509315;
                    }
                    8908416993177701018 => {
                      current_block = 16124761010012532485;
                    }
                    _ => {}
                  }
                  match current_block {
                    15129665204879337069 => {}
                    _ => {
                      match current_block {
                        16124761010012532485 => {
                          let mut yf: libc::c_int = 0;
                          let mut ml: libc::c_int = 0;
                          let mut whole: libc::c_int = 0;
                          yf = YANKDEL as libc::c_int;
                          if c == 'y' as i32 || c == 'Y' as i32 {
                            yf = YANKONLY as libc::c_int
                          }
                          c1 = 'y' as i32;
                          if c != 'Y' as i32 {
                            c1 = get_one_char()
                          }
                          ml = find_range(&mut p, &mut q, c1 as libc::c_char);
                          place_cursor(0i32, 0);
                          if c1 == 27i32 {
                            c1 = 27i32;
                            c = c1
                          } else if !strchr(b"wW\x00" as *const u8 as *const libc::c_char, c1)
                            .is_null()
                          {
                            ml = 0;
                            if c == 'c' as i32 {
                              while ({
                                let mut bb__isspace: libc::c_uchar =
                                  (*q as libc::c_int - 9i32) as libc::c_uchar;
                                (bb__isspace as libc::c_int == ' ' as i32 - 9i32
                                  || bb__isspace as libc::c_int <= 13i32 - 9i32)
                                  as libc::c_int
                              }) != 0
                                && q > p
                              {
                                q = q.offset(-1)
                              }
                            }
                            (*ptr_to_globals).dot = yank_delete(p, q, ml, yf, 1i32)
                          } else if !strchr(
                            b"^0bBeEft%$ lh\x08\x7f\x00" as *const u8 as *const libc::c_char,
                            c1,
                          )
                          .is_null()
                          {
                            (*ptr_to_globals).dot = yank_delete(p, q, ml, yf, 1i32)
                          } else if !strchr(
                            b"cdykjGHL+-{}\r\n\x00" as *const u8 as *const libc::c_char,
                            c1,
                          )
                          .is_null()
                          {
                            (*ptr_to_globals).dot = yank_delete(p, q, ml, yf, 1i32);
                            whole = 1i32
                          } else {
                            c1 = 27i32;
                            c = c1;
                            ml = 0;
                            indicate_error();
                          }
                          if ml != 0 && whole != 0 {
                            if c == 'c' as i32 {
                              (*ptr_to_globals).dot = char_insert(
                                (*ptr_to_globals).dot,
                                '\n' as i32 as libc::c_char,
                                2i32,
                              );
                              if whole != 0
                                && (*ptr_to_globals).dot != (*ptr_to_globals).end.offset(-1)
                              {
                                dot_prev();
                              }
                            } else if c == 'd' as i32 {
                              dot_begin();
                              dot_skip_over_ws();
                            }
                          }
                          if c1 != 27i32 {
                            if c == 'c' as i32 {
                              strcpy(
                                buf.as_mut_ptr(),
                                b"Change\x00" as *const u8 as *const libc::c_char,
                              );
                              current_block = 8629930936610358348;
                            } else {
                              if c == 'd' as i32 {
                                strcpy(
                                  buf.as_mut_ptr(),
                                  b"Delete\x00" as *const u8 as *const libc::c_char,
                                );
                              }
                              if c == 'y' as i32 || c == 'Y' as i32 {
                                strcpy(
                                  buf.as_mut_ptr(),
                                  b"Yank\x00" as *const u8 as *const libc::c_char,
                                );
                              }
                              p = (*ptr_to_globals).reg[(*ptr_to_globals).YDreg as usize];
                              q = p.offset(strlen(p) as isize);
                              cnt = 0;
                              while p <= q {
                                if *p as libc::c_int == '\n' as i32 {
                                  cnt += 1
                                }
                                p = p.offset(1)
                              }
                              status_line(
                                b"%s %u lines (%u chars) using [%c]\x00" as *const u8
                                  as *const libc::c_char,
                                buf.as_mut_ptr(),
                                cnt,
                                strlen((*ptr_to_globals).reg[(*ptr_to_globals).YDreg as usize])
                                  as libc::c_uint,
                                what_reg() as libc::c_int,
                              );
                              end_cmd_q();
                              current_block = 15129665204879337069;
                            }
                          } else {
                            current_block = 15129665204879337069;
                          }
                        }
                        5591548203144509315 => {
                          current_block = 2636677179867529885;
                        }
                        _ => {}
                      }
                      match current_block {
                        15129665204879337069 => {}
                        8629930936610358348 => {}
                        _ => {
                          match current_block {
                            2636677179867529885 => {
                              current_block = 12309206730560524281;
                            }
                            _ => {}
                          }
                          match current_block {
                            12309206730560524281 => {
                              current_block = 3325768110057758661;
                            }
                            _ => {}
                          }
                          match current_block {
                            3325768110057758661 => {
                              current_block = 14815832896553429982;
                            }
                            _ => {}
                          }
                          match current_block {
                            14815832896553429982 => {
                              current_block = 10731695520297161438;
                            }
                            _ => {}
                          }
                          match current_block {
                            10731695520297161438 => {
                              if c == '0' as i32 && (*ptr_to_globals).cmdcnt < 1i32 {
                                dot_begin();
                              } else {
                                (*ptr_to_globals).cmdcnt =
                                  (*ptr_to_globals).cmdcnt * 10i32 + (c - '0' as i32)
                              }
                              current_block = 15129665204879337069;
                            }
                            _ => {}
                          }
                          match current_block {
                            15129665204879337069 => {}
                            _ => {
                              loop {
                                match current_block {
                                  16813369756331276724 => {
                                    msg = std::ptr::null();
                                    current_block = 7392824444931029276;
                                  }
                                  7392824444931029276 => {
                                    dir = FORWARD as libc::c_int;
                                    p = (*ptr_to_globals).dot.offset(1);
                                    if *(*ptr_to_globals).last_search_pattern.offset(0)
                                      as libc::c_int
                                      == '?' as i32
                                    {
                                      dir = BACK as libc::c_int;
                                      p = (*ptr_to_globals).dot.offset(-1)
                                    }
                                    current_block = 4166979493554389389;
                                  }
                                  _ => {
                                    q = char_search(
                                      p,
                                      (*ptr_to_globals).last_search_pattern.offset(1),
                                      dir << 1i32 | FULL as libc::c_int,
                                    );
                                    if !q.is_null() {
                                      (*ptr_to_globals).dot = q;
                                      msg = std::ptr::null()
                                    } else {
                                      p = (*ptr_to_globals).text;
                                      if dir == BACK as libc::c_int {
                                        p = (*ptr_to_globals).end.offset(-1)
                                      }
                                      q = char_search(
                                        p,
                                        (*ptr_to_globals).last_search_pattern.offset(1),
                                        dir << 1i32 | FULL as libc::c_int,
                                      );
                                      if !q.is_null() {
                                        (*ptr_to_globals).dot = q;
                                        msg = b"search hit BOTTOM, continuing at TOP\x00"
                                          as *const u8
                                          as *const libc::c_char;
                                        if dir == BACK as libc::c_int {
                                          msg = b"search hit TOP, continuing at BOTTOM\x00"
                                            as *const u8
                                            as *const libc::c_char
                                        }
                                      } else {
                                        msg = b"Pattern not found\x00" as *const u8
                                          as *const libc::c_char
                                      }
                                    }
                                    if !msg.is_null() {
                                      status_line_bold(
                                        b"%s\x00" as *const u8 as *const libc::c_char,
                                        msg,
                                      );
                                    }
                                    (*ptr_to_globals).cmdcnt -= 1;
                                    if (*ptr_to_globals).cmdcnt > 0 {
                                      current_block = 16813369756331276724;
                                    } else {
                                      break;
                                    }
                                  }
                                }
                              }
                              current_block = 15129665204879337069;
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
        121 => {
          current_block = 8908416993177701018;
          match current_block {
            16992905640583886232 => {
              loop {
                if (*(*ptr_to_globals).dot as libc::c_int - 'a' as i32) as libc::c_uchar
                  as libc::c_int
                  <= 'z' as i32 - 'a' as i32
                {
                  undo_push(
                    (*ptr_to_globals).dot,
                    1i32 as libc::c_uint,
                    1i32 as libc::c_uchar,
                  );
                  *(*ptr_to_globals).dot =
                    bb_ascii_toupper(*(*ptr_to_globals).dot as libc::c_uchar) as libc::c_char;
                  undo_push(
                    (*ptr_to_globals).dot,
                    1i32 as libc::c_uint,
                    2i32 as libc::c_uchar,
                  );
                } else if (*(*ptr_to_globals).dot as libc::c_int - 'A' as i32) as libc::c_uchar
                  as libc::c_int
                  <= 'Z' as i32 - 'A' as i32
                {
                  undo_push(
                    (*ptr_to_globals).dot,
                    1i32 as libc::c_uint,
                    1i32 as libc::c_uchar,
                  );
                  *(*ptr_to_globals).dot =
                    bb_ascii_tolower(*(*ptr_to_globals).dot as libc::c_uchar) as libc::c_char;
                  undo_push(
                    (*ptr_to_globals).dot,
                    1i32 as libc::c_uint,
                    2i32 as libc::c_uchar,
                  );
                }
                dot_right();
                (*ptr_to_globals).cmdcnt -= 1;
                if !((*ptr_to_globals).cmdcnt > 0) {
                  break;
                }
              }
              end_cmd_q();
              current_block = 15129665204879337069;
            }
            8729655159604064397 => {
              c1 = get_one_char();
              cnt = 0;
              if c1 == '.' as i32 {
                cnt = (*ptr_to_globals)
                  .rows
                  .wrapping_sub(2i32 as libc::c_uint)
                  .wrapping_div(2i32 as libc::c_uint) as libc::c_int
              }
              if c1 == '-' as i32 {
                cnt = (*ptr_to_globals).rows.wrapping_sub(2i32 as libc::c_uint) as libc::c_int
              }
              (*ptr_to_globals).screenbegin = begin_line((*ptr_to_globals).dot);
              dot_scroll(cnt, -1i32);
              current_block = 15129665204879337069;
            }
            15899500648299942075 => {
              (*ptr_to_globals).last_forward_char = get_one_char();
              do_cmd(';' as i32);
              if *(*ptr_to_globals).dot as libc::c_int == (*ptr_to_globals).last_forward_char {
                dot_left();
              }
              (*ptr_to_globals).last_forward_char = 0;
              current_block = 15129665204879337069;
            }
            9051390181078481641 => {
              c1 = get_one_char();
              if *(*ptr_to_globals).dot as libc::c_int != '\n' as i32 {
                (*ptr_to_globals).dot =
                  text_hole_delete((*ptr_to_globals).dot, (*ptr_to_globals).dot, 1i32);
                (*ptr_to_globals).dot =
                  char_insert((*ptr_to_globals).dot, c1 as libc::c_char, 2i32);
                dot_left();
              }
              end_cmd_q();
              current_block = 15129665204879337069;
            }
            877115918601926659 => {
              dir = FORWARD as libc::c_int;
              if c == 'b' as i32 {
                dir = BACK as libc::c_int
              }
              while !((*ptr_to_globals).dot.offset(dir as isize) < (*ptr_to_globals).text
                || (*ptr_to_globals).dot.offset(dir as isize) > (*ptr_to_globals).end.offset(-1))
              {
                (*ptr_to_globals).dot = (*ptr_to_globals).dot.offset(dir as isize);
                if ({
                  let mut bb__isspace: libc::c_uchar =
                    (*(*ptr_to_globals).dot as libc::c_int - 9i32) as libc::c_uchar;
                  (bb__isspace as libc::c_int == ' ' as i32 - 9i32
                    || bb__isspace as libc::c_int <= 13i32 - 9i32) as libc::c_int
                }) != 0
                {
                  (*ptr_to_globals).dot = skip_thing(
                    (*ptr_to_globals).dot,
                    if c == 'e' as i32 { 2i32 } else { 1i32 },
                    dir,
                    S_OVER_WS as libc::c_int,
                  )
                }
                if bb_ascii_isalnum(*(*ptr_to_globals).dot as libc::c_uchar) != 0
                  || *(*ptr_to_globals).dot as libc::c_int == '_' as i32
                {
                  (*ptr_to_globals).dot =
                    skip_thing((*ptr_to_globals).dot, 1i32, dir, S_END_ALNUM as libc::c_int)
                } else if *strchrnul(
                  b"!\"#$%&\'()*+,-./:;<=>?@[\\]^_`{|}~\x00" as *const u8 as *const libc::c_char,
                  *(*ptr_to_globals).dot as libc::c_int,
                )
                .offset(0)
                  != 0
                {
                  (*ptr_to_globals).dot =
                    skip_thing((*ptr_to_globals).dot, 1i32, dir, S_END_PUNCT as libc::c_int)
                }
                (*ptr_to_globals).cmdcnt -= 1;
                if !((*ptr_to_globals).cmdcnt > 0) {
                  break;
                }
              }
              current_block = 15129665204879337069;
            }
            1085022737867179637 => {
              dot_begin();
              dot_skip_over_ws();
              current_block = 15129665204879337069;
            }
            3113147720494587438 => {
              c1 = get_one_char();
              if c1 != 'Z' as i32 {
                indicate_error();
              } else if (*ptr_to_globals).modified_count != 0 {
                if 1i32 != 0 && (*ptr_to_globals).readonly_mode as libc::c_int != 0 {
                  status_line_bold(
                    b"\'%s\' is read only\x00" as *const u8 as *const libc::c_char,
                    (*ptr_to_globals).current_filename,
                  );
                } else {
                  cnt = file_write(
                    (*ptr_to_globals).current_filename,
                    (*ptr_to_globals).text,
                    (*ptr_to_globals).end.offset(-1),
                  );
                  if cnt < 0 {
                    if cnt == -1i32 {
                      status_line_bold(b"Write error: %m\x00" as *const u8 as *const libc::c_char);
                    }
                  } else if cnt as libc::c_long
                    == (*ptr_to_globals)
                      .end
                      .offset(-1)
                      .wrapping_offset_from((*ptr_to_globals).text)
                      as libc::c_long
                      + 1
                  {
                    (*ptr_to_globals).editing = 0 as smallint
                  }
                }
              } else {
                (*ptr_to_globals).editing = 0 as smallint
              }
              current_block = 15129665204879337069;
            }
            12960118908218882441 => {
              p = begin_line((*ptr_to_globals).dot);
              if *p.offset(-1i32 as isize) as libc::c_int == '\n' as i32 {
                dot_prev();
                current_block = 2087484904894455135;
              } else {
                dot_begin();
                (*ptr_to_globals).dot =
                  char_insert((*ptr_to_globals).dot, '\n' as i32 as libc::c_char, 1i32);
                dot_prev();
                current_block = 8629930936610358348;
              }
            }
            8720450212473544924 => {
              (*ptr_to_globals).dot = (*ptr_to_globals).screenbegin;
              cnt = 0;
              while (cnt as libc::c_uint)
                < (*ptr_to_globals)
                  .rows
                  .wrapping_sub(1i32 as libc::c_uint)
                  .wrapping_div(2i32 as libc::c_uint)
              {
                (*ptr_to_globals).dot = next_line((*ptr_to_globals).dot);
                cnt += 1
              }
              current_block = 15129665204879337069;
            }
            13015277209715431090 => {
              (*ptr_to_globals).dot = end_screen();
              if (*ptr_to_globals).cmdcnt as libc::c_uint
                > (*ptr_to_globals).rows.wrapping_sub(1i32 as libc::c_uint)
              {
                (*ptr_to_globals).cmdcnt =
                  (*ptr_to_globals).rows.wrapping_sub(1i32 as libc::c_uint) as libc::c_int
              }
              (*ptr_to_globals).cmdcnt -= 1;
              if (*ptr_to_globals).cmdcnt > 0 {
                do_cmd('-' as i32);
              }
              dot_begin();
              dot_skip_over_ws();
              current_block = 15129665204879337069;
            }
            9800435767766781385 => {
              loop {
                dot_end();
                if (*ptr_to_globals).dot < (*ptr_to_globals).end.offset(-1) {
                  undo_push(
                    (*ptr_to_globals).dot,
                    1i32 as libc::c_uint,
                    1i32 as libc::c_uchar,
                  );
                  let fresh15 = (*ptr_to_globals).dot;
                  (*ptr_to_globals).dot = (*ptr_to_globals).dot.offset(1);
                  *fresh15 = ' ' as i32 as libc::c_char;
                  undo_push(
                    (*ptr_to_globals).dot.offset(-1),
                    1i32 as libc::c_uint,
                    2i32 as libc::c_uchar,
                  );
                  while ({
                    let mut bb__isblank: libc::c_uchar = *(*ptr_to_globals).dot as libc::c_uchar;
                    (bb__isblank as libc::c_int == ' ' as i32
                      || bb__isblank as libc::c_int == '\t' as i32)
                      as libc::c_int
                  }) != 0
                  {
                    text_hole_delete((*ptr_to_globals).dot, (*ptr_to_globals).dot, 2i32);
                  }
                }
                (*ptr_to_globals).cmdcnt -= 1;
                if !((*ptr_to_globals).cmdcnt > 0) {
                  break;
                }
              }
              end_cmd_q();
              current_block = 15129665204879337069;
            }
            3432363526595694666 => {
              dot_begin();
              dot_skip_over_ws();
              current_block = 3268579060917229304;
            }
            3494829253343353619 => {
              (*ptr_to_globals).dot = (*ptr_to_globals).screenbegin;
              if (*ptr_to_globals).cmdcnt as libc::c_uint
                > (*ptr_to_globals).rows.wrapping_sub(1i32 as libc::c_uint)
              {
                (*ptr_to_globals).cmdcnt =
                  (*ptr_to_globals).rows.wrapping_sub(1i32 as libc::c_uint) as libc::c_int
              }
              (*ptr_to_globals).cmdcnt -= 1;
              if (*ptr_to_globals).cmdcnt > 0 {
                do_cmd('+' as i32);
              }
              dot_skip_over_ws();
              current_block = 15129665204879337069;
            }
            17973101765331640574 => {
              c1 = get_one_char();
              if c1 != 'g' as i32 {
                buf[0] = 'g' as i32 as libc::c_char;
                buf[1] = if c1 >= 0 { c1 } else { '*' as i32 } as libc::c_char;
                buf[2] = '\u{0}' as i32 as libc::c_char;
                not_implemented(buf.as_mut_ptr());
                current_block = 15129665204879337069;
              } else {
                if (*ptr_to_globals).cmdcnt == 0 {
                  (*ptr_to_globals).cmdcnt = 1i32
                }
                current_block = 11945623545738147997;
              }
            }
            16546625800574160972 => {
              save_dot = (*ptr_to_globals).dot;
              (*ptr_to_globals).dot = dollar_line((*ptr_to_globals).dot);
              (*ptr_to_globals).dot = yank_delete(
                save_dot,
                (*ptr_to_globals).dot,
                0,
                YANKDEL as libc::c_int,
                1i32,
              );
              if c == 'C' as i32 {
                current_block = 8629930936610358348;
              } else {
                if c == 'D' as i32 {
                  end_cmd_q();
                }
                current_block = 15129665204879337069;
              }
            }
            11937696639986586685 => {
              cnt = count_lines((*ptr_to_globals).text, (*ptr_to_globals).dot);
              c1 = get_one_char();
              find_range(&mut p, &mut q, c1 as libc::c_char);
              yank_delete(p, q, 1i32, YANKONLY as libc::c_int, 0);
              p = begin_line(p);
              q = end_line(q);
              i = count_lines(p, q);
              while i > 0 {
                if c == '<' as i32 {
                  if *p as libc::c_int == '\t' as i32 {
                    text_hole_delete(p, p, 0);
                  } else if *p as libc::c_int == ' ' as i32 {
                    j = 0;
                    while *p as libc::c_int == ' ' as i32 && j < (*ptr_to_globals).tabstop {
                      text_hole_delete(p, p, 0);
                      j += 1
                    }
                  }
                } else if c == '>' as i32 {
                  char_insert(p, '\t' as i32 as libc::c_char, 1i32);
                }
                i -= 1;
                p = next_line(p)
              }
              (*ptr_to_globals).dot = find_line(cnt);
              dot_skip_over_ws();
              end_cmd_q();
              current_block = 15129665204879337069;
            }
            17725350714912028156 => {
              p = get_input_line(b":\x00" as *const u8 as *const libc::c_char);
              colon(p);
              current_block = 15129665204879337069;
            }
            14526470074083880812 => {
              q = char_search(
                (*ptr_to_globals).dot,
                b"\n\n\x00" as *const u8 as *const libc::c_char,
                (FORWARD as libc::c_int) << 1i32 | FULL as libc::c_int,
              );
              if !q.is_null() {
                (*ptr_to_globals).dot = next_line(q)
              }
              current_block = 15129665204879337069;
            }
            8893187391306414141 => {
              q = char_search(
                (*ptr_to_globals).dot,
                b"\n\n\x00" as *const u8 as *const libc::c_char,
                ((BACK as libc::c_int as libc::c_uint) << 1i32
                  | FULL as libc::c_int as libc::c_uint) as libc::c_int,
              );
              if !q.is_null() {
                (*ptr_to_globals).dot = next_line(q)
              }
              current_block = 15129665204879337069;
            }
            7021673758293221412 => {
              dir = BACK as libc::c_int;
              p = (*ptr_to_globals).dot.offset(-1);
              if *(*ptr_to_globals).last_search_pattern.offset(0) as libc::c_int == '?' as i32 {
                dir = FORWARD as libc::c_int;
                p = (*ptr_to_globals).dot.offset(1)
              }
              current_block = 4166979493554389389;
            }
            18374191879090272823 => {
              buf[0] = c as libc::c_char;
              buf[1] = '\u{0}' as i32 as libc::c_char;
              q = get_input_line(buf.as_mut_ptr());
              if *q.offset(0) as libc::c_int != 0 && *q.offset(1) == 0 {
                if *(*ptr_to_globals).last_search_pattern.offset(0) != 0 {
                  *(*ptr_to_globals).last_search_pattern.offset(0) = c as libc::c_char
                }
                current_block = 7392824444931029276;
              } else if *q.offset(0) != 0 {
                free((*ptr_to_globals).last_search_pattern as *mut libc::c_void);
                (*ptr_to_globals).last_search_pattern = crate::libbb::xfuncs_printf::xstrdup(q);
                current_block = 7392824444931029276;
              } else {
                current_block = 15129665204879337069;
              }
            }
            16407828456666301883 => {
              if (*ptr_to_globals).last_forward_char == 0 {
                current_block = 15129665204879337069;
              } else {
                loop {
                  q = (*ptr_to_globals).dot.offset(-1);
                  while q >= (*ptr_to_globals).text
                    && *q as libc::c_int != '\n' as i32
                    && *q as libc::c_int != (*ptr_to_globals).last_forward_char
                  {
                    q = q.offset(-1)
                  }
                  if q >= (*ptr_to_globals).text
                    && *q as libc::c_int == (*ptr_to_globals).last_forward_char
                  {
                    (*ptr_to_globals).dot = q
                  }
                  (*ptr_to_globals).cmdcnt -= 1;
                  if !((*ptr_to_globals).cmdcnt > 0) {
                    break;
                  }
                }
                current_block = 15129665204879337069;
              }
            }
            9018432604062702004 => {
              q = (*ptr_to_globals).dot;
              while q < (*ptr_to_globals).end && *q as libc::c_int != '\n' as i32 {
                if !strchr(
                  b"()[]{}\x00" as *const u8 as *const libc::c_char,
                  *q as libc::c_int,
                )
                .is_null()
                {
                  p = find_pair(q, *q);
                  if p.is_null() {
                    indicate_error();
                  } else {
                    (*ptr_to_globals).dot = p
                  }
                  break;
                } else {
                  q = q.offset(1)
                }
              }
              if *q as libc::c_int == '\n' as i32 {
                indicate_error();
              }
              current_block = 15129665204879337069;
            }
            10247103787464459848 => {
              p = (*ptr_to_globals).reg[(*ptr_to_globals).YDreg as usize];
              if p.is_null() {
                status_line_bold(
                  b"Nothing in register %c\x00" as *const u8 as *const libc::c_char,
                  what_reg() as libc::c_int,
                );
              } else {
                if !strchr(p, '\n' as i32).is_null() {
                  if c == 'P' as i32 {
                    dot_begin();
                  }
                  if c == 'p' as i32 {
                    if end_line((*ptr_to_globals).dot) == (*ptr_to_globals).end.offset(-1) {
                      (*ptr_to_globals).dot = (*ptr_to_globals).end
                    } else {
                      dot_next();
                    }
                  }
                } else if c == 'p' as i32 {
                  dot_right();
                }
                string_insert((*ptr_to_globals).dot, p, 1i32);
                end_cmd_q();
              }
              current_block = 15129665204879337069;
            }
            15260732871948875843 => {
              c1 = (get_one_char() | 0x20i32) - 'a' as i32;
              if c1 as libc::c_uint <= 25i32 as libc::c_uint {
                (*ptr_to_globals).mark[c1 as usize] = (*ptr_to_globals).dot
              } else {
                indicate_error();
              }
              current_block = 15129665204879337069;
            }
            12738322036487086035 => {
              c1 = get_one_char() | 0x20i32;
              if (c1 - 'a' as i32) as libc::c_uint <= 25i32 as libc::c_uint {
                c1 = c1 - 'a' as i32;
                q = (*ptr_to_globals).mark[c1 as usize];
                if (*ptr_to_globals).text <= q && q < (*ptr_to_globals).end {
                  (*ptr_to_globals).dot = q;
                  dot_begin();
                  dot_skip_over_ws();
                }
              } else if c1 == '\'' as i32 {
                (*ptr_to_globals).dot = swap_context((*ptr_to_globals).dot);
                dot_begin();
                dot_skip_over_ws();
              } else {
                indicate_error();
              }
              current_block = 15129665204879337069;
            }
            13255096073384561358 => {
              c1 = (get_one_char() | 0x20i32) - 'a' as i32;
              if c1 as libc::c_uint <= 25i32 as libc::c_uint {
                (*ptr_to_globals).YDreg = c1 as smalluint
              } else {
                indicate_error();
              }
              current_block = 15129665204879337069;
            }
            10258711639984089377 => {
              if (*ptr_to_globals).cmd_mode as libc::c_int == 0 {
                indicate_error();
              }
              (*ptr_to_globals).cmd_mode = 0 as smallint;
              undo_queue_commit();
              end_cmd_q();
              (*ptr_to_globals).last_status_cksum = 0;
              current_block = 15129665204879337069;
            }
            11439127087547047736 => {
              buf[0] = c as libc::c_char;
              buf[1] = '\u{0}' as i32 as libc::c_char;
              not_implemented(buf.as_mut_ptr());
              end_cmd_q();
              current_block = 17440971994642376514;
            }
            7961798899781870241 => {
              dot_scroll(
                (*ptr_to_globals).rows.wrapping_sub(2i32 as libc::c_uint) as libc::c_int,
                -1i32,
              );
              current_block = 15129665204879337069;
            }
            9426343755402444879 => {
              dot_scroll(
                (*ptr_to_globals)
                  .rows
                  .wrapping_sub(2i32 as libc::c_uint)
                  .wrapping_div(2i32 as libc::c_uint) as libc::c_int,
                1i32,
              );
              current_block = 15129665204879337069;
            }
            13352459794680105913 => {
              dot_scroll(1i32, 1i32);
              current_block = 15129665204879337069;
            }
            14142272253464333006 => {
              dot_scroll(
                (*ptr_to_globals).rows.wrapping_sub(2i32 as libc::c_uint) as libc::c_int,
                1i32,
              );
              current_block = 15129665204879337069;
            }
            10758177197742640066 => {
              (*ptr_to_globals).last_status_cksum = 0;
              current_block = 15129665204879337069;
            }
            6152256259730122749 => {
              current_block = 7534742345255184552;
            }
            12883932598258173301 => {
              current_block = 8800996768013373992;
            }
            11242998110520238401 => {
              redraw(1i32);
              current_block = 15129665204879337069;
            }
            13619733043935729992 => {
              loop {
                dot_next();
                dot_skip_over_ws();
                (*ptr_to_globals).cmdcnt -= 1;
                if !((*ptr_to_globals).cmdcnt > 0) {
                  break;
                }
              }
              current_block = 15129665204879337069;
            }
            9339065157412720613 => {
              dot_scroll(
                (*ptr_to_globals)
                  .rows
                  .wrapping_sub(2i32 as libc::c_uint)
                  .wrapping_div(2i32 as libc::c_uint) as libc::c_int,
                -1i32,
              );
              current_block = 15129665204879337069;
            }
            11447082683497798022 => {
              dot_scroll(1i32, -1i32);
              current_block = 15129665204879337069;
            }
            5182000506326660482 => {
              current_block = 13993698454868426881;
            }
            1105010766850597332 => {
              if !(*ptr_to_globals).reg[27].is_null() {
                p = begin_line((*ptr_to_globals).dot);
                q = end_line((*ptr_to_globals).dot);
                p = text_hole_delete(p, q, 1i32);
                p = p.offset(string_insert(p, (*ptr_to_globals).reg[27], 2i32) as isize);
                (*ptr_to_globals).dot = p;
                dot_skip_over_ws();
              }
              current_block = 15129665204879337069;
            }
            8616046655533110204 => {
              undo_pop();
              current_block = 15129665204879337069;
            }
            5127767458142431603 => {
              loop {
                (*ptr_to_globals).dot = end_line((*ptr_to_globals).dot);
                (*ptr_to_globals).cmdcnt -= 1;
                if (*ptr_to_globals).cmdcnt <= 0 {
                  break;
                }
                dot_next();
              }
              current_block = 15129665204879337069;
            }
            222014967776118151 => {
              (*ptr_to_globals).last_forward_char = get_one_char();
              current_block = 7856905509180742666;
            }
            11209792479411604110 => {
              loop {
                dot_prev();
                dot_skip_over_ws();
                (*ptr_to_globals).cmdcnt -= 1;
                if !((*ptr_to_globals).cmdcnt > 0) {
                  break;
                }
              }
              current_block = 15129665204879337069;
            }
            3364823792826654116 => {
              if (*ptr_to_globals).lmc_len != 0 {
                (*ptr_to_globals).ioq_start = crate::libbb::xfuncs_printf::xstrndup(
                  (*ptr_to_globals).last_modifying_cmd.as_mut_ptr(),
                  (*ptr_to_globals).lmc_len,
                );
                (*ptr_to_globals).ioq = (*ptr_to_globals).ioq_start
              }
              current_block = 15129665204879337069;
            }
            18096603330221575131 => {
              current_block = 17498168302144015873;
            }
            16891123271837848903 => {
              dot_end();
              current_block = 1752638907092016026;
            }
            8517235759107662071 => {
              current_block = 5847749760081351726;
            }
            12525254419223051704 => {
              if (*ptr_to_globals).dot < (*ptr_to_globals).end.offset(-1) {
                (*ptr_to_globals).dot = yank_delete(
                  (*ptr_to_globals).dot,
                  (*ptr_to_globals).dot,
                  1i32,
                  YANKDEL as libc::c_int,
                  1i32,
                )
              }
              current_block = 15129665204879337069;
            }
            15232911949322867522 => {
              current_block = 17251831742223396249;
            }
            10863374208794025069 => {
              current_block = 1895262434596074581;
            }
            451126677064669119 => {
              loop {
                dot_prev();
                (*ptr_to_globals).dot = move_to_col(
                  (*ptr_to_globals).dot,
                  (*ptr_to_globals).ccol + (*ptr_to_globals).offset,
                );
                (*ptr_to_globals).cmdcnt -= 1;
                if !((*ptr_to_globals).cmdcnt > 0) {
                  break;
                }
              }
              current_block = 15129665204879337069;
            }
            4611735929166613116 => {
              loop {
                if bb_ascii_isalnum(*(*ptr_to_globals).dot as libc::c_uchar) != 0
                  || *(*ptr_to_globals).dot as libc::c_int == '_' as i32
                {
                  (*ptr_to_globals).dot = skip_thing(
                    (*ptr_to_globals).dot,
                    1i32,
                    FORWARD as libc::c_int,
                    S_END_ALNUM as libc::c_int,
                  )
                } else if *strchrnul(
                  b"!\"#$%&\'()*+,-./:;<=>?@[\\]^_`{|}~\x00" as *const u8 as *const libc::c_char,
                  *(*ptr_to_globals).dot as libc::c_int,
                )
                .offset(0)
                  != 0
                {
                  (*ptr_to_globals).dot = skip_thing(
                    (*ptr_to_globals).dot,
                    1i32,
                    FORWARD as libc::c_int,
                    S_END_PUNCT as libc::c_int,
                  )
                }
                if (*ptr_to_globals).dot < (*ptr_to_globals).end.offset(-1) {
                  (*ptr_to_globals).dot = (*ptr_to_globals).dot.offset(1)
                }
                if ({
                  let mut bb__isspace: libc::c_uchar =
                    (*(*ptr_to_globals).dot as libc::c_int - 9i32) as libc::c_uchar;
                  (bb__isspace as libc::c_int == ' ' as i32 - 9i32
                    || bb__isspace as libc::c_int <= 13i32 - 9i32) as libc::c_int
                }) != 0
                {
                  (*ptr_to_globals).dot = skip_thing(
                    (*ptr_to_globals).dot,
                    2i32,
                    FORWARD as libc::c_int,
                    S_OVER_WS as libc::c_int,
                  )
                }
                (*ptr_to_globals).cmdcnt -= 1;
                if !((*ptr_to_globals).cmdcnt > 0) {
                  break;
                }
              }
              current_block = 15129665204879337069;
            }
            4386451087681909888 => {
              (*ptr_to_globals).dot =
                move_to_col((*ptr_to_globals).dot, (*ptr_to_globals).cmdcnt - 1i32);
              current_block = 15129665204879337069;
            }
            1296397779060594135 => {
              dot_begin();
              current_block = 15129665204879337069;
            }
            _ => {}
          }
          match current_block {
            15129665204879337069 => {}
            8629930936610358348 => {}
            _ => {
              match current_block {
                17251831742223396249 => {
                  dir = 0;
                  if c == 'X' as i32 {
                    dir = -1i32
                  }
                  loop {
                    if *(*ptr_to_globals).dot.offset(dir as isize) as libc::c_int != '\n' as i32 {
                      if c == 'X' as i32 {
                        (*ptr_to_globals).dot = (*ptr_to_globals).dot.offset(-1)
                      }
                      (*ptr_to_globals).dot = yank_delete(
                        (*ptr_to_globals).dot,
                        (*ptr_to_globals).dot,
                        0,
                        YANKDEL as libc::c_int,
                        1i32,
                      )
                    }
                    (*ptr_to_globals).cmdcnt -= 1;
                    if !((*ptr_to_globals).cmdcnt > 0) {
                      break;
                    }
                  }
                  end_cmd_q();
                  if c == 's' as i32 {
                    current_block = 8629930936610358348;
                  } else {
                    current_block = 15129665204879337069;
                  }
                }
                2087484904894455135 => {
                  dot_end();
                  (*ptr_to_globals).dot =
                    char_insert((*ptr_to_globals).dot, '\n' as i32 as libc::c_char, 1i32);
                  current_block = 8629930936610358348;
                }
                11945623545738147997 => {
                  (*ptr_to_globals).dot = (*ptr_to_globals).end.offset(-1);
                  if (*ptr_to_globals).cmdcnt > 0 {
                    (*ptr_to_globals).dot = find_line((*ptr_to_globals).cmdcnt)
                  }
                  dot_skip_over_ws();
                  current_block = 15129665204879337069;
                }
                5847749760081351726 => {
                  dir = FORWARD as libc::c_int;
                  if c == 'B' as i32 {
                    dir = BACK as libc::c_int
                  }
                  loop {
                    if c == 'W' as i32
                      || ({
                        let mut bb__isspace: libc::c_uchar =
                          (*(*ptr_to_globals).dot.offset(dir as isize) as libc::c_int - 9i32)
                            as libc::c_uchar;
                        (bb__isspace as libc::c_int == ' ' as i32 - 9i32
                          || bb__isspace as libc::c_int <= 13i32 - 9i32)
                          as libc::c_int
                      }) != 0
                    {
                      (*ptr_to_globals).dot =
                        skip_thing((*ptr_to_globals).dot, 1i32, dir, S_TO_WS as libc::c_int);
                      (*ptr_to_globals).dot =
                        skip_thing((*ptr_to_globals).dot, 2i32, dir, S_OVER_WS as libc::c_int)
                    }
                    if c != 'W' as i32 {
                      (*ptr_to_globals).dot =
                        skip_thing((*ptr_to_globals).dot, 1i32, dir, S_BEFORE_WS as libc::c_int)
                    }
                    (*ptr_to_globals).cmdcnt -= 1;
                    if !((*ptr_to_globals).cmdcnt > 0) {
                      break;
                    }
                  }
                  current_block = 15129665204879337069;
                }
                17440971994642376514 => {
                  current_block = 15129665204879337069;
                }
                7534742345255184552 => {
                  current_block = 17247297260531395789;
                }
                8800996768013373992 => {
                  loop {
                    dot_next();
                    (*ptr_to_globals).dot = move_to_col(
                      (*ptr_to_globals).dot,
                      (*ptr_to_globals).ccol + (*ptr_to_globals).offset,
                    );
                    (*ptr_to_globals).cmdcnt -= 1;
                    if !((*ptr_to_globals).cmdcnt > 0) {
                      break;
                    }
                  }
                  current_block = 15129665204879337069;
                }
                13993698454868426881 => {
                  loop {
                    dot_right();
                    (*ptr_to_globals).cmdcnt -= 1;
                    if !((*ptr_to_globals).cmdcnt > 0) {
                      break;
                    }
                  }
                  current_block = 15129665204879337069;
                }
                7856905509180742666 => {
                  while !((*ptr_to_globals).last_forward_char == 0) {
                    q = (*ptr_to_globals).dot.offset(1);
                    while q < (*ptr_to_globals).end.offset(-1)
                      && *q as libc::c_int != '\n' as i32
                      && *q as libc::c_int != (*ptr_to_globals).last_forward_char
                    {
                      q = q.offset(1)
                    }
                    if *q as libc::c_int == (*ptr_to_globals).last_forward_char {
                      (*ptr_to_globals).dot = q
                    }
                    (*ptr_to_globals).cmdcnt -= 1;
                    if !((*ptr_to_globals).cmdcnt > 0) {
                      break;
                    }
                  }
                  current_block = 15129665204879337069;
                }
                17498168302144015873 => {
                  current_block = 8681395796513813967;
                }
                1752638907092016026 => {
                  if *(*ptr_to_globals).dot as libc::c_int != '\n' as i32 {
                    (*ptr_to_globals).dot = (*ptr_to_globals).dot.offset(1)
                  }
                  current_block = 8629930936610358348;
                }
                3268579060917229304 => {
                  current_block = 8629930936610358348;
                }
                1895262434596074581 => {
                  current_block = 8908416993177701018;
                }
                _ => {}
              }
              match current_block {
                8629930936610358348 => {}
                15129665204879337069 => {}
                _ => {
                  match current_block {
                    17247297260531395789 => {
                      loop {
                        dot_left();
                        (*ptr_to_globals).cmdcnt -= 1;
                        if !((*ptr_to_globals).cmdcnt > 0) {
                          break;
                        }
                      }
                      current_block = 15129665204879337069;
                    }
                    8681395796513813967 => {
                      current_block = 5591548203144509315;
                    }
                    8908416993177701018 => {
                      current_block = 16124761010012532485;
                    }
                    _ => {}
                  }
                  match current_block {
                    15129665204879337069 => {}
                    _ => {
                      match current_block {
                        16124761010012532485 => {
                          let mut yf: libc::c_int = 0;
                          let mut ml: libc::c_int = 0;
                          let mut whole: libc::c_int = 0;
                          yf = YANKDEL as libc::c_int;
                          if c == 'y' as i32 || c == 'Y' as i32 {
                            yf = YANKONLY as libc::c_int
                          }
                          c1 = 'y' as i32;
                          if c != 'Y' as i32 {
                            c1 = get_one_char()
                          }
                          ml = find_range(&mut p, &mut q, c1 as libc::c_char);
                          place_cursor(0i32, 0);
                          if c1 == 27i32 {
                            c1 = 27i32;
                            c = c1
                          } else if !strchr(b"wW\x00" as *const u8 as *const libc::c_char, c1)
                            .is_null()
                          {
                            ml = 0;
                            if c == 'c' as i32 {
                              while ({
                                let mut bb__isspace: libc::c_uchar =
                                  (*q as libc::c_int - 9i32) as libc::c_uchar;
                                (bb__isspace as libc::c_int == ' ' as i32 - 9i32
                                  || bb__isspace as libc::c_int <= 13i32 - 9i32)
                                  as libc::c_int
                              }) != 0
                                && q > p
                              {
                                q = q.offset(-1)
                              }
                            }
                            (*ptr_to_globals).dot = yank_delete(p, q, ml, yf, 1i32)
                          } else if !strchr(
                            b"^0bBeEft%$ lh\x08\x7f\x00" as *const u8 as *const libc::c_char,
                            c1,
                          )
                          .is_null()
                          {
                            (*ptr_to_globals).dot = yank_delete(p, q, ml, yf, 1i32)
                          } else if !strchr(
                            b"cdykjGHL+-{}\r\n\x00" as *const u8 as *const libc::c_char,
                            c1,
                          )
                          .is_null()
                          {
                            (*ptr_to_globals).dot = yank_delete(p, q, ml, yf, 1i32);
                            whole = 1i32
                          } else {
                            c1 = 27i32;
                            c = c1;
                            ml = 0;
                            indicate_error();
                          }
                          if ml != 0 && whole != 0 {
                            if c == 'c' as i32 {
                              (*ptr_to_globals).dot = char_insert(
                                (*ptr_to_globals).dot,
                                '\n' as i32 as libc::c_char,
                                2i32,
                              );
                              if whole != 0
                                && (*ptr_to_globals).dot != (*ptr_to_globals).end.offset(-1)
                              {
                                dot_prev();
                              }
                            } else if c == 'd' as i32 {
                              dot_begin();
                              dot_skip_over_ws();
                            }
                          }
                          if c1 != 27i32 {
                            if c == 'c' as i32 {
                              strcpy(
                                buf.as_mut_ptr(),
                                b"Change\x00" as *const u8 as *const libc::c_char,
                              );
                              current_block = 8629930936610358348;
                            } else {
                              if c == 'd' as i32 {
                                strcpy(
                                  buf.as_mut_ptr(),
                                  b"Delete\x00" as *const u8 as *const libc::c_char,
                                );
                              }
                              if c == 'y' as i32 || c == 'Y' as i32 {
                                strcpy(
                                  buf.as_mut_ptr(),
                                  b"Yank\x00" as *const u8 as *const libc::c_char,
                                );
                              }
                              p = (*ptr_to_globals).reg[(*ptr_to_globals).YDreg as usize];
                              q = p.offset(strlen(p) as isize);
                              cnt = 0;
                              while p <= q {
                                if *p as libc::c_int == '\n' as i32 {
                                  cnt += 1
                                }
                                p = p.offset(1)
                              }
                              status_line(
                                b"%s %u lines (%u chars) using [%c]\x00" as *const u8
                                  as *const libc::c_char,
                                buf.as_mut_ptr(),
                                cnt,
                                strlen((*ptr_to_globals).reg[(*ptr_to_globals).YDreg as usize])
                                  as libc::c_uint,
                                what_reg() as libc::c_int,
                              );
                              end_cmd_q();
                              current_block = 15129665204879337069;
                            }
                          } else {
                            current_block = 15129665204879337069;
                          }
                        }
                        5591548203144509315 => {
                          current_block = 2636677179867529885;
                        }
                        _ => {}
                      }
                      match current_block {
                        15129665204879337069 => {}
                        8629930936610358348 => {}
                        _ => {
                          match current_block {
                            2636677179867529885 => {
                              current_block = 12309206730560524281;
                            }
                            _ => {}
                          }
                          match current_block {
                            12309206730560524281 => {
                              current_block = 3325768110057758661;
                            }
                            _ => {}
                          }
                          match current_block {
                            3325768110057758661 => {
                              current_block = 14815832896553429982;
                            }
                            _ => {}
                          }
                          match current_block {
                            14815832896553429982 => {
                              current_block = 10731695520297161438;
                            }
                            _ => {}
                          }
                          match current_block {
                            10731695520297161438 => {
                              if c == '0' as i32 && (*ptr_to_globals).cmdcnt < 1i32 {
                                dot_begin();
                              } else {
                                (*ptr_to_globals).cmdcnt =
                                  (*ptr_to_globals).cmdcnt * 10i32 + (c - '0' as i32)
                              }
                              current_block = 15129665204879337069;
                            }
                            _ => {}
                          }
                          match current_block {
                            15129665204879337069 => {}
                            _ => {
                              loop {
                                match current_block {
                                  16813369756331276724 => {
                                    msg = std::ptr::null();
                                    current_block = 7392824444931029276;
                                  }
                                  7392824444931029276 => {
                                    dir = FORWARD as libc::c_int;
                                    p = (*ptr_to_globals).dot.offset(1);
                                    if *(*ptr_to_globals).last_search_pattern.offset(0)
                                      as libc::c_int
                                      == '?' as i32
                                    {
                                      dir = BACK as libc::c_int;
                                      p = (*ptr_to_globals).dot.offset(-1)
                                    }
                                    current_block = 4166979493554389389;
                                  }
                                  _ => {
                                    q = char_search(
                                      p,
                                      (*ptr_to_globals).last_search_pattern.offset(1),
                                      dir << 1i32 | FULL as libc::c_int,
                                    );
                                    if !q.is_null() {
                                      (*ptr_to_globals).dot = q;
                                      msg = std::ptr::null()
                                    } else {
                                      p = (*ptr_to_globals).text;
                                      if dir == BACK as libc::c_int {
                                        p = (*ptr_to_globals).end.offset(-1)
                                      }
                                      q = char_search(
                                        p,
                                        (*ptr_to_globals).last_search_pattern.offset(1),
                                        dir << 1i32 | FULL as libc::c_int,
                                      );
                                      if !q.is_null() {
                                        (*ptr_to_globals).dot = q;
                                        msg = b"search hit BOTTOM, continuing at TOP\x00"
                                          as *const u8
                                          as *const libc::c_char;
                                        if dir == BACK as libc::c_int {
                                          msg = b"search hit TOP, continuing at BOTTOM\x00"
                                            as *const u8
                                            as *const libc::c_char
                                        }
                                      } else {
                                        msg = b"Pattern not found\x00" as *const u8
                                          as *const libc::c_char
                                      }
                                    }
                                    if !msg.is_null() {
                                      status_line_bold(
                                        b"%s\x00" as *const u8 as *const libc::c_char,
                                        msg,
                                      );
                                    }
                                    (*ptr_to_globals).cmdcnt -= 1;
                                    if (*ptr_to_globals).cmdcnt > 0 {
                                      current_block = 16813369756331276724;
                                    } else {
                                      break;
                                    }
                                  }
                                }
                              }
                              current_block = 15129665204879337069;
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
        89 => {
          current_block = 16124761010012532485;
          match current_block {
            16992905640583886232 => {
              loop {
                if (*(*ptr_to_globals).dot as libc::c_int - 'a' as i32) as libc::c_uchar
                  as libc::c_int
                  <= 'z' as i32 - 'a' as i32
                {
                  undo_push(
                    (*ptr_to_globals).dot,
                    1i32 as libc::c_uint,
                    1i32 as libc::c_uchar,
                  );
                  *(*ptr_to_globals).dot =
                    bb_ascii_toupper(*(*ptr_to_globals).dot as libc::c_uchar) as libc::c_char;
                  undo_push(
                    (*ptr_to_globals).dot,
                    1i32 as libc::c_uint,
                    2i32 as libc::c_uchar,
                  );
                } else if (*(*ptr_to_globals).dot as libc::c_int - 'A' as i32) as libc::c_uchar
                  as libc::c_int
                  <= 'Z' as i32 - 'A' as i32
                {
                  undo_push(
                    (*ptr_to_globals).dot,
                    1i32 as libc::c_uint,
                    1i32 as libc::c_uchar,
                  );
                  *(*ptr_to_globals).dot =
                    bb_ascii_tolower(*(*ptr_to_globals).dot as libc::c_uchar) as libc::c_char;
                  undo_push(
                    (*ptr_to_globals).dot,
                    1i32 as libc::c_uint,
                    2i32 as libc::c_uchar,
                  );
                }
                dot_right();
                (*ptr_to_globals).cmdcnt -= 1;
                if !((*ptr_to_globals).cmdcnt > 0) {
                  break;
                }
              }
              end_cmd_q();
              current_block = 15129665204879337069;
            }
            8729655159604064397 => {
              c1 = get_one_char();
              cnt = 0;
              if c1 == '.' as i32 {
                cnt = (*ptr_to_globals)
                  .rows
                  .wrapping_sub(2i32 as libc::c_uint)
                  .wrapping_div(2i32 as libc::c_uint) as libc::c_int
              }
              if c1 == '-' as i32 {
                cnt = (*ptr_to_globals).rows.wrapping_sub(2i32 as libc::c_uint) as libc::c_int
              }
              (*ptr_to_globals).screenbegin = begin_line((*ptr_to_globals).dot);
              dot_scroll(cnt, -1i32);
              current_block = 15129665204879337069;
            }
            15899500648299942075 => {
              (*ptr_to_globals).last_forward_char = get_one_char();
              do_cmd(';' as i32);
              if *(*ptr_to_globals).dot as libc::c_int == (*ptr_to_globals).last_forward_char {
                dot_left();
              }
              (*ptr_to_globals).last_forward_char = 0;
              current_block = 15129665204879337069;
            }
            9051390181078481641 => {
              c1 = get_one_char();
              if *(*ptr_to_globals).dot as libc::c_int != '\n' as i32 {
                (*ptr_to_globals).dot =
                  text_hole_delete((*ptr_to_globals).dot, (*ptr_to_globals).dot, 1i32);
                (*ptr_to_globals).dot =
                  char_insert((*ptr_to_globals).dot, c1 as libc::c_char, 2i32);
                dot_left();
              }
              end_cmd_q();
              current_block = 15129665204879337069;
            }
            877115918601926659 => {
              dir = FORWARD as libc::c_int;
              if c == 'b' as i32 {
                dir = BACK as libc::c_int
              }
              while !((*ptr_to_globals).dot.offset(dir as isize) < (*ptr_to_globals).text
                || (*ptr_to_globals).dot.offset(dir as isize) > (*ptr_to_globals).end.offset(-1))
              {
                (*ptr_to_globals).dot = (*ptr_to_globals).dot.offset(dir as isize);
                if ({
                  let mut bb__isspace: libc::c_uchar =
                    (*(*ptr_to_globals).dot as libc::c_int - 9i32) as libc::c_uchar;
                  (bb__isspace as libc::c_int == ' ' as i32 - 9i32
                    || bb__isspace as libc::c_int <= 13i32 - 9i32) as libc::c_int
                }) != 0
                {
                  (*ptr_to_globals).dot = skip_thing(
                    (*ptr_to_globals).dot,
                    if c == 'e' as i32 { 2i32 } else { 1i32 },
                    dir,
                    S_OVER_WS as libc::c_int,
                  )
                }
                if bb_ascii_isalnum(*(*ptr_to_globals).dot as libc::c_uchar) != 0
                  || *(*ptr_to_globals).dot as libc::c_int == '_' as i32
                {
                  (*ptr_to_globals).dot =
                    skip_thing((*ptr_to_globals).dot, 1i32, dir, S_END_ALNUM as libc::c_int)
                } else if *strchrnul(
                  b"!\"#$%&\'()*+,-./:;<=>?@[\\]^_`{|}~\x00" as *const u8 as *const libc::c_char,
                  *(*ptr_to_globals).dot as libc::c_int,
                )
                .offset(0)
                  != 0
                {
                  (*ptr_to_globals).dot =
                    skip_thing((*ptr_to_globals).dot, 1i32, dir, S_END_PUNCT as libc::c_int)
                }
                (*ptr_to_globals).cmdcnt -= 1;
                if !((*ptr_to_globals).cmdcnt > 0) {
                  break;
                }
              }
              current_block = 15129665204879337069;
            }
            1085022737867179637 => {
              dot_begin();
              dot_skip_over_ws();
              current_block = 15129665204879337069;
            }
            3113147720494587438 => {
              c1 = get_one_char();
              if c1 != 'Z' as i32 {
                indicate_error();
              } else if (*ptr_to_globals).modified_count != 0 {
                if 1i32 != 0 && (*ptr_to_globals).readonly_mode as libc::c_int != 0 {
                  status_line_bold(
                    b"\'%s\' is read only\x00" as *const u8 as *const libc::c_char,
                    (*ptr_to_globals).current_filename,
                  );
                } else {
                  cnt = file_write(
                    (*ptr_to_globals).current_filename,
                    (*ptr_to_globals).text,
                    (*ptr_to_globals).end.offset(-1),
                  );
                  if cnt < 0 {
                    if cnt == -1i32 {
                      status_line_bold(b"Write error: %m\x00" as *const u8 as *const libc::c_char);
                    }
                  } else if cnt as libc::c_long
                    == (*ptr_to_globals)
                      .end
                      .offset(-1)
                      .wrapping_offset_from((*ptr_to_globals).text)
                      as libc::c_long
                      + 1
                  {
                    (*ptr_to_globals).editing = 0 as smallint
                  }
                }
              } else {
                (*ptr_to_globals).editing = 0 as smallint
              }
              current_block = 15129665204879337069;
            }
            12960118908218882441 => {
              p = begin_line((*ptr_to_globals).dot);
              if *p.offset(-1i32 as isize) as libc::c_int == '\n' as i32 {
                dot_prev();
                current_block = 2087484904894455135;
              } else {
                dot_begin();
                (*ptr_to_globals).dot =
                  char_insert((*ptr_to_globals).dot, '\n' as i32 as libc::c_char, 1i32);
                dot_prev();
                current_block = 8629930936610358348;
              }
            }
            8720450212473544924 => {
              (*ptr_to_globals).dot = (*ptr_to_globals).screenbegin;
              cnt = 0;
              while (cnt as libc::c_uint)
                < (*ptr_to_globals)
                  .rows
                  .wrapping_sub(1i32 as libc::c_uint)
                  .wrapping_div(2i32 as libc::c_uint)
              {
                (*ptr_to_globals).dot = next_line((*ptr_to_globals).dot);
                cnt += 1
              }
              current_block = 15129665204879337069;
            }
            13015277209715431090 => {
              (*ptr_to_globals).dot = end_screen();
              if (*ptr_to_globals).cmdcnt as libc::c_uint
                > (*ptr_to_globals).rows.wrapping_sub(1i32 as libc::c_uint)
              {
                (*ptr_to_globals).cmdcnt =
                  (*ptr_to_globals).rows.wrapping_sub(1i32 as libc::c_uint) as libc::c_int
              }
              (*ptr_to_globals).cmdcnt -= 1;
              if (*ptr_to_globals).cmdcnt > 0 {
                do_cmd('-' as i32);
              }
              dot_begin();
              dot_skip_over_ws();
              current_block = 15129665204879337069;
            }
            9800435767766781385 => {
              loop {
                dot_end();
                if (*ptr_to_globals).dot < (*ptr_to_globals).end.offset(-1) {
                  undo_push(
                    (*ptr_to_globals).dot,
                    1i32 as libc::c_uint,
                    1i32 as libc::c_uchar,
                  );
                  let fresh15 = (*ptr_to_globals).dot;
                  (*ptr_to_globals).dot = (*ptr_to_globals).dot.offset(1);
                  *fresh15 = ' ' as i32 as libc::c_char;
                  undo_push(
                    (*ptr_to_globals).dot.offset(-1),
                    1i32 as libc::c_uint,
                    2i32 as libc::c_uchar,
                  );
                  while ({
                    let mut bb__isblank: libc::c_uchar = *(*ptr_to_globals).dot as libc::c_uchar;
                    (bb__isblank as libc::c_int == ' ' as i32
                      || bb__isblank as libc::c_int == '\t' as i32)
                      as libc::c_int
                  }) != 0
                  {
                    text_hole_delete((*ptr_to_globals).dot, (*ptr_to_globals).dot, 2i32);
                  }
                }
                (*ptr_to_globals).cmdcnt -= 1;
                if !((*ptr_to_globals).cmdcnt > 0) {
                  break;
                }
              }
              end_cmd_q();
              current_block = 15129665204879337069;
            }
            3432363526595694666 => {
              dot_begin();
              dot_skip_over_ws();
              current_block = 3268579060917229304;
            }
            3494829253343353619 => {
              (*ptr_to_globals).dot = (*ptr_to_globals).screenbegin;
              if (*ptr_to_globals).cmdcnt as libc::c_uint
                > (*ptr_to_globals).rows.wrapping_sub(1i32 as libc::c_uint)
              {
                (*ptr_to_globals).cmdcnt =
                  (*ptr_to_globals).rows.wrapping_sub(1i32 as libc::c_uint) as libc::c_int
              }
              (*ptr_to_globals).cmdcnt -= 1;
              if (*ptr_to_globals).cmdcnt > 0 {
                do_cmd('+' as i32);
              }
              dot_skip_over_ws();
              current_block = 15129665204879337069;
            }
            17973101765331640574 => {
              c1 = get_one_char();
              if c1 != 'g' as i32 {
                buf[0] = 'g' as i32 as libc::c_char;
                buf[1] = if c1 >= 0 { c1 } else { '*' as i32 } as libc::c_char;
                buf[2] = '\u{0}' as i32 as libc::c_char;
                not_implemented(buf.as_mut_ptr());
                current_block = 15129665204879337069;
              } else {
                if (*ptr_to_globals).cmdcnt == 0 {
                  (*ptr_to_globals).cmdcnt = 1i32
                }
                current_block = 11945623545738147997;
              }
            }
            16546625800574160972 => {
              save_dot = (*ptr_to_globals).dot;
              (*ptr_to_globals).dot = dollar_line((*ptr_to_globals).dot);
              (*ptr_to_globals).dot = yank_delete(
                save_dot,
                (*ptr_to_globals).dot,
                0,
                YANKDEL as libc::c_int,
                1i32,
              );
              if c == 'C' as i32 {
                current_block = 8629930936610358348;
              } else {
                if c == 'D' as i32 {
                  end_cmd_q();
                }
                current_block = 15129665204879337069;
              }
            }
            11937696639986586685 => {
              cnt = count_lines((*ptr_to_globals).text, (*ptr_to_globals).dot);
              c1 = get_one_char();
              find_range(&mut p, &mut q, c1 as libc::c_char);
              yank_delete(p, q, 1i32, YANKONLY as libc::c_int, 0);
              p = begin_line(p);
              q = end_line(q);
              i = count_lines(p, q);
              while i > 0 {
                if c == '<' as i32 {
                  if *p as libc::c_int == '\t' as i32 {
                    text_hole_delete(p, p, 0);
                  } else if *p as libc::c_int == ' ' as i32 {
                    j = 0;
                    while *p as libc::c_int == ' ' as i32 && j < (*ptr_to_globals).tabstop {
                      text_hole_delete(p, p, 0);
                      j += 1
                    }
                  }
                } else if c == '>' as i32 {
                  char_insert(p, '\t' as i32 as libc::c_char, 1i32);
                }
                i -= 1;
                p = next_line(p)
              }
              (*ptr_to_globals).dot = find_line(cnt);
              dot_skip_over_ws();
              end_cmd_q();
              current_block = 15129665204879337069;
            }
            17725350714912028156 => {
              p = get_input_line(b":\x00" as *const u8 as *const libc::c_char);
              colon(p);
              current_block = 15129665204879337069;
            }
            14526470074083880812 => {
              q = char_search(
                (*ptr_to_globals).dot,
                b"\n\n\x00" as *const u8 as *const libc::c_char,
                (FORWARD as libc::c_int) << 1i32 | FULL as libc::c_int,
              );
              if !q.is_null() {
                (*ptr_to_globals).dot = next_line(q)
              }
              current_block = 15129665204879337069;
            }
            8893187391306414141 => {
              q = char_search(
                (*ptr_to_globals).dot,
                b"\n\n\x00" as *const u8 as *const libc::c_char,
                ((BACK as libc::c_int as libc::c_uint) << 1i32
                  | FULL as libc::c_int as libc::c_uint) as libc::c_int,
              );
              if !q.is_null() {
                (*ptr_to_globals).dot = next_line(q)
              }
              current_block = 15129665204879337069;
            }
            7021673758293221412 => {
              dir = BACK as libc::c_int;
              p = (*ptr_to_globals).dot.offset(-1);
              if *(*ptr_to_globals).last_search_pattern.offset(0) as libc::c_int == '?' as i32 {
                dir = FORWARD as libc::c_int;
                p = (*ptr_to_globals).dot.offset(1)
              }
              current_block = 4166979493554389389;
            }
            18374191879090272823 => {
              buf[0] = c as libc::c_char;
              buf[1] = '\u{0}' as i32 as libc::c_char;
              q = get_input_line(buf.as_mut_ptr());
              if *q.offset(0) as libc::c_int != 0 && *q.offset(1) == 0 {
                if *(*ptr_to_globals).last_search_pattern.offset(0) != 0 {
                  *(*ptr_to_globals).last_search_pattern.offset(0) = c as libc::c_char
                }
                current_block = 7392824444931029276;
              } else if *q.offset(0) != 0 {
                free((*ptr_to_globals).last_search_pattern as *mut libc::c_void);
                (*ptr_to_globals).last_search_pattern = crate::libbb::xfuncs_printf::xstrdup(q);
                current_block = 7392824444931029276;
              } else {
                current_block = 15129665204879337069;
              }
            }
            16407828456666301883 => {
              if (*ptr_to_globals).last_forward_char == 0 {
                current_block = 15129665204879337069;
              } else {
                loop {
                  q = (*ptr_to_globals).dot.offset(-1);
                  while q >= (*ptr_to_globals).text
                    && *q as libc::c_int != '\n' as i32
                    && *q as libc::c_int != (*ptr_to_globals).last_forward_char
                  {
                    q = q.offset(-1)
                  }
                  if q >= (*ptr_to_globals).text
                    && *q as libc::c_int == (*ptr_to_globals).last_forward_char
                  {
                    (*ptr_to_globals).dot = q
                  }
                  (*ptr_to_globals).cmdcnt -= 1;
                  if !((*ptr_to_globals).cmdcnt > 0) {
                    break;
                  }
                }
                current_block = 15129665204879337069;
              }
            }
            9018432604062702004 => {
              q = (*ptr_to_globals).dot;
              while q < (*ptr_to_globals).end && *q as libc::c_int != '\n' as i32 {
                if !strchr(
                  b"()[]{}\x00" as *const u8 as *const libc::c_char,
                  *q as libc::c_int,
                )
                .is_null()
                {
                  p = find_pair(q, *q);
                  if p.is_null() {
                    indicate_error();
                  } else {
                    (*ptr_to_globals).dot = p
                  }
                  break;
                } else {
                  q = q.offset(1)
                }
              }
              if *q as libc::c_int == '\n' as i32 {
                indicate_error();
              }
              current_block = 15129665204879337069;
            }
            10247103787464459848 => {
              p = (*ptr_to_globals).reg[(*ptr_to_globals).YDreg as usize];
              if p.is_null() {
                status_line_bold(
                  b"Nothing in register %c\x00" as *const u8 as *const libc::c_char,
                  what_reg() as libc::c_int,
                );
              } else {
                if !strchr(p, '\n' as i32).is_null() {
                  if c == 'P' as i32 {
                    dot_begin();
                  }
                  if c == 'p' as i32 {
                    if end_line((*ptr_to_globals).dot) == (*ptr_to_globals).end.offset(-1) {
                      (*ptr_to_globals).dot = (*ptr_to_globals).end
                    } else {
                      dot_next();
                    }
                  }
                } else if c == 'p' as i32 {
                  dot_right();
                }
                string_insert((*ptr_to_globals).dot, p, 1i32);
                end_cmd_q();
              }
              current_block = 15129665204879337069;
            }
            15260732871948875843 => {
              c1 = (get_one_char() | 0x20i32) - 'a' as i32;
              if c1 as libc::c_uint <= 25i32 as libc::c_uint {
                (*ptr_to_globals).mark[c1 as usize] = (*ptr_to_globals).dot
              } else {
                indicate_error();
              }
              current_block = 15129665204879337069;
            }
            12738322036487086035 => {
              c1 = get_one_char() | 0x20i32;
              if (c1 - 'a' as i32) as libc::c_uint <= 25i32 as libc::c_uint {
                c1 = c1 - 'a' as i32;
                q = (*ptr_to_globals).mark[c1 as usize];
                if (*ptr_to_globals).text <= q && q < (*ptr_to_globals).end {
                  (*ptr_to_globals).dot = q;
                  dot_begin();
                  dot_skip_over_ws();
                }
              } else if c1 == '\'' as i32 {
                (*ptr_to_globals).dot = swap_context((*ptr_to_globals).dot);
                dot_begin();
                dot_skip_over_ws();
              } else {
                indicate_error();
              }
              current_block = 15129665204879337069;
            }
            13255096073384561358 => {
              c1 = (get_one_char() | 0x20i32) - 'a' as i32;
              if c1 as libc::c_uint <= 25i32 as libc::c_uint {
                (*ptr_to_globals).YDreg = c1 as smalluint
              } else {
                indicate_error();
              }
              current_block = 15129665204879337069;
            }
            10258711639984089377 => {
              if (*ptr_to_globals).cmd_mode as libc::c_int == 0 {
                indicate_error();
              }
              (*ptr_to_globals).cmd_mode = 0 as smallint;
              undo_queue_commit();
              end_cmd_q();
              (*ptr_to_globals).last_status_cksum = 0;
              current_block = 15129665204879337069;
            }
            11439127087547047736 => {
              buf[0] = c as libc::c_char;
              buf[1] = '\u{0}' as i32 as libc::c_char;
              not_implemented(buf.as_mut_ptr());
              end_cmd_q();
              current_block = 17440971994642376514;
            }
            7961798899781870241 => {
              dot_scroll(
                (*ptr_to_globals).rows.wrapping_sub(2i32 as libc::c_uint) as libc::c_int,
                -1i32,
              );
              current_block = 15129665204879337069;
            }
            9426343755402444879 => {
              dot_scroll(
                (*ptr_to_globals)
                  .rows
                  .wrapping_sub(2i32 as libc::c_uint)
                  .wrapping_div(2i32 as libc::c_uint) as libc::c_int,
                1i32,
              );
              current_block = 15129665204879337069;
            }
            13352459794680105913 => {
              dot_scroll(1i32, 1i32);
              current_block = 15129665204879337069;
            }
            14142272253464333006 => {
              dot_scroll(
                (*ptr_to_globals).rows.wrapping_sub(2i32 as libc::c_uint) as libc::c_int,
                1i32,
              );
              current_block = 15129665204879337069;
            }
            10758177197742640066 => {
              (*ptr_to_globals).last_status_cksum = 0;
              current_block = 15129665204879337069;
            }
            6152256259730122749 => {
              current_block = 7534742345255184552;
            }
            12883932598258173301 => {
              current_block = 8800996768013373992;
            }
            11242998110520238401 => {
              redraw(1i32);
              current_block = 15129665204879337069;
            }
            13619733043935729992 => {
              loop {
                dot_next();
                dot_skip_over_ws();
                (*ptr_to_globals).cmdcnt -= 1;
                if !((*ptr_to_globals).cmdcnt > 0) {
                  break;
                }
              }
              current_block = 15129665204879337069;
            }
            9339065157412720613 => {
              dot_scroll(
                (*ptr_to_globals)
                  .rows
                  .wrapping_sub(2i32 as libc::c_uint)
                  .wrapping_div(2i32 as libc::c_uint) as libc::c_int,
                -1i32,
              );
              current_block = 15129665204879337069;
            }
            11447082683497798022 => {
              dot_scroll(1i32, -1i32);
              current_block = 15129665204879337069;
            }
            5182000506326660482 => {
              current_block = 13993698454868426881;
            }
            1105010766850597332 => {
              if !(*ptr_to_globals).reg[27].is_null() {
                p = begin_line((*ptr_to_globals).dot);
                q = end_line((*ptr_to_globals).dot);
                p = text_hole_delete(p, q, 1i32);
                p = p.offset(string_insert(p, (*ptr_to_globals).reg[27], 2i32) as isize);
                (*ptr_to_globals).dot = p;
                dot_skip_over_ws();
              }
              current_block = 15129665204879337069;
            }
            8616046655533110204 => {
              undo_pop();
              current_block = 15129665204879337069;
            }
            5127767458142431603 => {
              loop {
                (*ptr_to_globals).dot = end_line((*ptr_to_globals).dot);
                (*ptr_to_globals).cmdcnt -= 1;
                if (*ptr_to_globals).cmdcnt <= 0 {
                  break;
                }
                dot_next();
              }
              current_block = 15129665204879337069;
            }
            222014967776118151 => {
              (*ptr_to_globals).last_forward_char = get_one_char();
              current_block = 7856905509180742666;
            }
            11209792479411604110 => {
              loop {
                dot_prev();
                dot_skip_over_ws();
                (*ptr_to_globals).cmdcnt -= 1;
                if !((*ptr_to_globals).cmdcnt > 0) {
                  break;
                }
              }
              current_block = 15129665204879337069;
            }
            3364823792826654116 => {
              if (*ptr_to_globals).lmc_len != 0 {
                (*ptr_to_globals).ioq_start = crate::libbb::xfuncs_printf::xstrndup(
                  (*ptr_to_globals).last_modifying_cmd.as_mut_ptr(),
                  (*ptr_to_globals).lmc_len,
                );
                (*ptr_to_globals).ioq = (*ptr_to_globals).ioq_start
              }
              current_block = 15129665204879337069;
            }
            18096603330221575131 => {
              current_block = 17498168302144015873;
            }
            16891123271837848903 => {
              dot_end();
              current_block = 1752638907092016026;
            }
            8517235759107662071 => {
              current_block = 5847749760081351726;
            }
            12525254419223051704 => {
              if (*ptr_to_globals).dot < (*ptr_to_globals).end.offset(-1) {
                (*ptr_to_globals).dot = yank_delete(
                  (*ptr_to_globals).dot,
                  (*ptr_to_globals).dot,
                  1i32,
                  YANKDEL as libc::c_int,
                  1i32,
                )
              }
              current_block = 15129665204879337069;
            }
            15232911949322867522 => {
              current_block = 17251831742223396249;
            }
            10863374208794025069 => {
              current_block = 1895262434596074581;
            }
            451126677064669119 => {
              loop {
                dot_prev();
                (*ptr_to_globals).dot = move_to_col(
                  (*ptr_to_globals).dot,
                  (*ptr_to_globals).ccol + (*ptr_to_globals).offset,
                );
                (*ptr_to_globals).cmdcnt -= 1;
                if !((*ptr_to_globals).cmdcnt > 0) {
                  break;
                }
              }
              current_block = 15129665204879337069;
            }
            4611735929166613116 => {
              loop {
                if bb_ascii_isalnum(*(*ptr_to_globals).dot as libc::c_uchar) != 0
                  || *(*ptr_to_globals).dot as libc::c_int == '_' as i32
                {
                  (*ptr_to_globals).dot = skip_thing(
                    (*ptr_to_globals).dot,
                    1i32,
                    FORWARD as libc::c_int,
                    S_END_ALNUM as libc::c_int,
                  )
                } else if *strchrnul(
                  b"!\"#$%&\'()*+,-./:;<=>?@[\\]^_`{|}~\x00" as *const u8 as *const libc::c_char,
                  *(*ptr_to_globals).dot as libc::c_int,
                )
                .offset(0)
                  != 0
                {
                  (*ptr_to_globals).dot = skip_thing(
                    (*ptr_to_globals).dot,
                    1i32,
                    FORWARD as libc::c_int,
                    S_END_PUNCT as libc::c_int,
                  )
                }
                if (*ptr_to_globals).dot < (*ptr_to_globals).end.offset(-1) {
                  (*ptr_to_globals).dot = (*ptr_to_globals).dot.offset(1)
                }
                if ({
                  let mut bb__isspace: libc::c_uchar =
                    (*(*ptr_to_globals).dot as libc::c_int - 9i32) as libc::c_uchar;
                  (bb__isspace as libc::c_int == ' ' as i32 - 9i32
                    || bb__isspace as libc::c_int <= 13i32 - 9i32) as libc::c_int
                }) != 0
                {
                  (*ptr_to_globals).dot = skip_thing(
                    (*ptr_to_globals).dot,
                    2i32,
                    FORWARD as libc::c_int,
                    S_OVER_WS as libc::c_int,
                  )
                }
                (*ptr_to_globals).cmdcnt -= 1;
                if !((*ptr_to_globals).cmdcnt > 0) {
                  break;
                }
              }
              current_block = 15129665204879337069;
            }
            4386451087681909888 => {
              (*ptr_to_globals).dot =
                move_to_col((*ptr_to_globals).dot, (*ptr_to_globals).cmdcnt - 1i32);
              current_block = 15129665204879337069;
            }
            1296397779060594135 => {
              dot_begin();
              current_block = 15129665204879337069;
            }
            _ => {}
          }
          match current_block {
            15129665204879337069 => {}
            8629930936610358348 => {}
            _ => {
              match current_block {
                17251831742223396249 => {
                  dir = 0;
                  if c == 'X' as i32 {
                    dir = -1i32
                  }
                  loop {
                    if *(*ptr_to_globals).dot.offset(dir as isize) as libc::c_int != '\n' as i32 {
                      if c == 'X' as i32 {
                        (*ptr_to_globals).dot = (*ptr_to_globals).dot.offset(-1)
                      }
                      (*ptr_to_globals).dot = yank_delete(
                        (*ptr_to_globals).dot,
                        (*ptr_to_globals).dot,
                        0,
                        YANKDEL as libc::c_int,
                        1i32,
                      )
                    }
                    (*ptr_to_globals).cmdcnt -= 1;
                    if !((*ptr_to_globals).cmdcnt > 0) {
                      break;
                    }
                  }
                  end_cmd_q();
                  if c == 's' as i32 {
                    current_block = 8629930936610358348;
                  } else {
                    current_block = 15129665204879337069;
                  }
                }
                2087484904894455135 => {
                  dot_end();
                  (*ptr_to_globals).dot =
                    char_insert((*ptr_to_globals).dot, '\n' as i32 as libc::c_char, 1i32);
                  current_block = 8629930936610358348;
                }
                11945623545738147997 => {
                  (*ptr_to_globals).dot = (*ptr_to_globals).end.offset(-1);
                  if (*ptr_to_globals).cmdcnt > 0 {
                    (*ptr_to_globals).dot = find_line((*ptr_to_globals).cmdcnt)
                  }
                  dot_skip_over_ws();
                  current_block = 15129665204879337069;
                }
                5847749760081351726 => {
                  dir = FORWARD as libc::c_int;
                  if c == 'B' as i32 {
                    dir = BACK as libc::c_int
                  }
                  loop {
                    if c == 'W' as i32
                      || ({
                        let mut bb__isspace: libc::c_uchar =
                          (*(*ptr_to_globals).dot.offset(dir as isize) as libc::c_int - 9i32)
                            as libc::c_uchar;
                        (bb__isspace as libc::c_int == ' ' as i32 - 9i32
                          || bb__isspace as libc::c_int <= 13i32 - 9i32)
                          as libc::c_int
                      }) != 0
                    {
                      (*ptr_to_globals).dot =
                        skip_thing((*ptr_to_globals).dot, 1i32, dir, S_TO_WS as libc::c_int);
                      (*ptr_to_globals).dot =
                        skip_thing((*ptr_to_globals).dot, 2i32, dir, S_OVER_WS as libc::c_int)
                    }
                    if c != 'W' as i32 {
                      (*ptr_to_globals).dot =
                        skip_thing((*ptr_to_globals).dot, 1i32, dir, S_BEFORE_WS as libc::c_int)
                    }
                    (*ptr_to_globals).cmdcnt -= 1;
                    if !((*ptr_to_globals).cmdcnt > 0) {
                      break;
                    }
                  }
                  current_block = 15129665204879337069;
                }
                17440971994642376514 => {
                  current_block = 15129665204879337069;
                }
                7534742345255184552 => {
                  current_block = 17247297260531395789;
                }
                8800996768013373992 => {
                  loop {
                    dot_next();
                    (*ptr_to_globals).dot = move_to_col(
                      (*ptr_to_globals).dot,
                      (*ptr_to_globals).ccol + (*ptr_to_globals).offset,
                    );
                    (*ptr_to_globals).cmdcnt -= 1;
                    if !((*ptr_to_globals).cmdcnt > 0) {
                      break;
                    }
                  }
                  current_block = 15129665204879337069;
                }
                13993698454868426881 => {
                  loop {
                    dot_right();
                    (*ptr_to_globals).cmdcnt -= 1;
                    if !((*ptr_to_globals).cmdcnt > 0) {
                      break;
                    }
                  }
                  current_block = 15129665204879337069;
                }
                7856905509180742666 => {
                  while !((*ptr_to_globals).last_forward_char == 0) {
                    q = (*ptr_to_globals).dot.offset(1);
                    while q < (*ptr_to_globals).end.offset(-1)
                      && *q as libc::c_int != '\n' as i32
                      && *q as libc::c_int != (*ptr_to_globals).last_forward_char
                    {
                      q = q.offset(1)
                    }
                    if *q as libc::c_int == (*ptr_to_globals).last_forward_char {
                      (*ptr_to_globals).dot = q
                    }
                    (*ptr_to_globals).cmdcnt -= 1;
                    if !((*ptr_to_globals).cmdcnt > 0) {
                      break;
                    }
                  }
                  current_block = 15129665204879337069;
                }
                17498168302144015873 => {
                  current_block = 8681395796513813967;
                }
                1752638907092016026 => {
                  if *(*ptr_to_globals).dot as libc::c_int != '\n' as i32 {
                    (*ptr_to_globals).dot = (*ptr_to_globals).dot.offset(1)
                  }
                  current_block = 8629930936610358348;
                }
                3268579060917229304 => {
                  current_block = 8629930936610358348;
                }
                1895262434596074581 => {
                  current_block = 8908416993177701018;
                }
                _ => {}
              }
              match current_block {
                8629930936610358348 => {}
                15129665204879337069 => {}
                _ => {
                  match current_block {
                    17247297260531395789 => {
                      loop {
                        dot_left();
                        (*ptr_to_globals).cmdcnt -= 1;
                        if !((*ptr_to_globals).cmdcnt > 0) {
                          break;
                        }
                      }
                      current_block = 15129665204879337069;
                    }
                    8681395796513813967 => {
                      current_block = 5591548203144509315;
                    }
                    8908416993177701018 => {
                      current_block = 16124761010012532485;
                    }
                    _ => {}
                  }
                  match current_block {
                    15129665204879337069 => {}
                    _ => {
                      match current_block {
                        16124761010012532485 => {
                          let mut yf: libc::c_int = 0;
                          let mut ml: libc::c_int = 0;
                          let mut whole: libc::c_int = 0;
                          yf = YANKDEL as libc::c_int;
                          if c == 'y' as i32 || c == 'Y' as i32 {
                            yf = YANKONLY as libc::c_int
                          }
                          c1 = 'y' as i32;
                          if c != 'Y' as i32 {
                            c1 = get_one_char()
                          }
                          ml = find_range(&mut p, &mut q, c1 as libc::c_char);
                          place_cursor(0i32, 0);
                          if c1 == 27i32 {
                            c1 = 27i32;
                            c = c1
                          } else if !strchr(b"wW\x00" as *const u8 as *const libc::c_char, c1)
                            .is_null()
                          {
                            ml = 0;
                            if c == 'c' as i32 {
                              while ({
                                let mut bb__isspace: libc::c_uchar =
                                  (*q as libc::c_int - 9i32) as libc::c_uchar;
                                (bb__isspace as libc::c_int == ' ' as i32 - 9i32
                                  || bb__isspace as libc::c_int <= 13i32 - 9i32)
                                  as libc::c_int
                              }) != 0
                                && q > p
                              {
                                q = q.offset(-1)
                              }
                            }
                            (*ptr_to_globals).dot = yank_delete(p, q, ml, yf, 1i32)
                          } else if !strchr(
                            b"^0bBeEft%$ lh\x08\x7f\x00" as *const u8 as *const libc::c_char,
                            c1,
                          )
                          .is_null()
                          {
                            (*ptr_to_globals).dot = yank_delete(p, q, ml, yf, 1i32)
                          } else if !strchr(
                            b"cdykjGHL+-{}\r\n\x00" as *const u8 as *const libc::c_char,
                            c1,
                          )
                          .is_null()
                          {
                            (*ptr_to_globals).dot = yank_delete(p, q, ml, yf, 1i32);
                            whole = 1i32
                          } else {
                            c1 = 27i32;
                            c = c1;
                            ml = 0;
                            indicate_error();
                          }
                          if ml != 0 && whole != 0 {
                            if c == 'c' as i32 {
                              (*ptr_to_globals).dot = char_insert(
                                (*ptr_to_globals).dot,
                                '\n' as i32 as libc::c_char,
                                2i32,
                              );
                              if whole != 0
                                && (*ptr_to_globals).dot != (*ptr_to_globals).end.offset(-1)
                              {
                                dot_prev();
                              }
                            } else if c == 'd' as i32 {
                              dot_begin();
                              dot_skip_over_ws();
                            }
                          }
                          if c1 != 27i32 {
                            if c == 'c' as i32 {
                              strcpy(
                                buf.as_mut_ptr(),
                                b"Change\x00" as *const u8 as *const libc::c_char,
                              );
                              current_block = 8629930936610358348;
                            } else {
                              if c == 'd' as i32 {
                                strcpy(
                                  buf.as_mut_ptr(),
                                  b"Delete\x00" as *const u8 as *const libc::c_char,
                                );
                              }
                              if c == 'y' as i32 || c == 'Y' as i32 {
                                strcpy(
                                  buf.as_mut_ptr(),
                                  b"Yank\x00" as *const u8 as *const libc::c_char,
                                );
                              }
                              p = (*ptr_to_globals).reg[(*ptr_to_globals).YDreg as usize];
                              q = p.offset(strlen(p) as isize);
                              cnt = 0;
                              while p <= q {
                                if *p as libc::c_int == '\n' as i32 {
                                  cnt += 1
                                }
                                p = p.offset(1)
                              }
                              status_line(
                                b"%s %u lines (%u chars) using [%c]\x00" as *const u8
                                  as *const libc::c_char,
                                buf.as_mut_ptr(),
                                cnt,
                                strlen((*ptr_to_globals).reg[(*ptr_to_globals).YDreg as usize])
                                  as libc::c_uint,
                                what_reg() as libc::c_int,
                              );
                              end_cmd_q();
                              current_block = 15129665204879337069;
                            }
                          } else {
                            current_block = 15129665204879337069;
                          }
                        }
                        5591548203144509315 => {
                          current_block = 2636677179867529885;
                        }
                        _ => {}
                      }
                      match current_block {
                        15129665204879337069 => {}
                        8629930936610358348 => {}
                        _ => {
                          match current_block {
                            2636677179867529885 => {
                              current_block = 12309206730560524281;
                            }
                            _ => {}
                          }
                          match current_block {
                            12309206730560524281 => {
                              current_block = 3325768110057758661;
                            }
                            _ => {}
                          }
                          match current_block {
                            3325768110057758661 => {
                              current_block = 14815832896553429982;
                            }
                            _ => {}
                          }
                          match current_block {
                            14815832896553429982 => {
                              current_block = 10731695520297161438;
                            }
                            _ => {}
                          }
                          match current_block {
                            10731695520297161438 => {
                              if c == '0' as i32 && (*ptr_to_globals).cmdcnt < 1i32 {
                                dot_begin();
                              } else {
                                (*ptr_to_globals).cmdcnt =
                                  (*ptr_to_globals).cmdcnt * 10i32 + (c - '0' as i32)
                              }
                              current_block = 15129665204879337069;
                            }
                            _ => {}
                          }
                          match current_block {
                            15129665204879337069 => {}
                            _ => {
                              loop {
                                match current_block {
                                  16813369756331276724 => {
                                    msg = std::ptr::null();
                                    current_block = 7392824444931029276;
                                  }
                                  7392824444931029276 => {
                                    dir = FORWARD as libc::c_int;
                                    p = (*ptr_to_globals).dot.offset(1);
                                    if *(*ptr_to_globals).last_search_pattern.offset(0)
                                      as libc::c_int
                                      == '?' as i32
                                    {
                                      dir = BACK as libc::c_int;
                                      p = (*ptr_to_globals).dot.offset(-1)
                                    }
                                    current_block = 4166979493554389389;
                                  }
                                  _ => {
                                    q = char_search(
                                      p,
                                      (*ptr_to_globals).last_search_pattern.offset(1),
                                      dir << 1i32 | FULL as libc::c_int,
                                    );
                                    if !q.is_null() {
                                      (*ptr_to_globals).dot = q;
                                      msg = std::ptr::null()
                                    } else {
                                      p = (*ptr_to_globals).text;
                                      if dir == BACK as libc::c_int {
                                        p = (*ptr_to_globals).end.offset(-1)
                                      }
                                      q = char_search(
                                        p,
                                        (*ptr_to_globals).last_search_pattern.offset(1),
                                        dir << 1i32 | FULL as libc::c_int,
                                      );
                                      if !q.is_null() {
                                        (*ptr_to_globals).dot = q;
                                        msg = b"search hit BOTTOM, continuing at TOP\x00"
                                          as *const u8
                                          as *const libc::c_char;
                                        if dir == BACK as libc::c_int {
                                          msg = b"search hit TOP, continuing at BOTTOM\x00"
                                            as *const u8
                                            as *const libc::c_char
                                        }
                                      } else {
                                        msg = b"Pattern not found\x00" as *const u8
                                          as *const libc::c_char
                                      }
                                    }
                                    if !msg.is_null() {
                                      status_line_bold(
                                        b"%s\x00" as *const u8 as *const libc::c_char,
                                        msg,
                                      );
                                    }
                                    (*ptr_to_globals).cmdcnt -= 1;
                                    if (*ptr_to_globals).cmdcnt > 0 {
                                      current_block = 16813369756331276724;
                                    } else {
                                      break;
                                    }
                                  }
                                }
                              }
                              current_block = 15129665204879337069;
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
        107 | -2 => {
          current_block = 451126677064669119;
          match current_block {
            16992905640583886232 => {
              loop {
                if (*(*ptr_to_globals).dot as libc::c_int - 'a' as i32) as libc::c_uchar
                  as libc::c_int
                  <= 'z' as i32 - 'a' as i32
                {
                  undo_push(
                    (*ptr_to_globals).dot,
                    1i32 as libc::c_uint,
                    1i32 as libc::c_uchar,
                  );
                  *(*ptr_to_globals).dot =
                    bb_ascii_toupper(*(*ptr_to_globals).dot as libc::c_uchar) as libc::c_char;
                  undo_push(
                    (*ptr_to_globals).dot,
                    1i32 as libc::c_uint,
                    2i32 as libc::c_uchar,
                  );
                } else if (*(*ptr_to_globals).dot as libc::c_int - 'A' as i32) as libc::c_uchar
                  as libc::c_int
                  <= 'Z' as i32 - 'A' as i32
                {
                  undo_push(
                    (*ptr_to_globals).dot,
                    1i32 as libc::c_uint,
                    1i32 as libc::c_uchar,
                  );
                  *(*ptr_to_globals).dot =
                    bb_ascii_tolower(*(*ptr_to_globals).dot as libc::c_uchar) as libc::c_char;
                  undo_push(
                    (*ptr_to_globals).dot,
                    1i32 as libc::c_uint,
                    2i32 as libc::c_uchar,
                  );
                }
                dot_right();
                (*ptr_to_globals).cmdcnt -= 1;
                if !((*ptr_to_globals).cmdcnt > 0) {
                  break;
                }
              }
              end_cmd_q();
              current_block = 15129665204879337069;
            }
            8729655159604064397 => {
              c1 = get_one_char();
              cnt = 0;
              if c1 == '.' as i32 {
                cnt = (*ptr_to_globals)
                  .rows
                  .wrapping_sub(2i32 as libc::c_uint)
                  .wrapping_div(2i32 as libc::c_uint) as libc::c_int
              }
              if c1 == '-' as i32 {
                cnt = (*ptr_to_globals).rows.wrapping_sub(2i32 as libc::c_uint) as libc::c_int
              }
              (*ptr_to_globals).screenbegin = begin_line((*ptr_to_globals).dot);
              dot_scroll(cnt, -1i32);
              current_block = 15129665204879337069;
            }
            15899500648299942075 => {
              (*ptr_to_globals).last_forward_char = get_one_char();
              do_cmd(';' as i32);
              if *(*ptr_to_globals).dot as libc::c_int == (*ptr_to_globals).last_forward_char {
                dot_left();
              }
              (*ptr_to_globals).last_forward_char = 0;
              current_block = 15129665204879337069;
            }
            9051390181078481641 => {
              c1 = get_one_char();
              if *(*ptr_to_globals).dot as libc::c_int != '\n' as i32 {
                (*ptr_to_globals).dot =
                  text_hole_delete((*ptr_to_globals).dot, (*ptr_to_globals).dot, 1i32);
                (*ptr_to_globals).dot =
                  char_insert((*ptr_to_globals).dot, c1 as libc::c_char, 2i32);
                dot_left();
              }
              end_cmd_q();
              current_block = 15129665204879337069;
            }
            877115918601926659 => {
              dir = FORWARD as libc::c_int;
              if c == 'b' as i32 {
                dir = BACK as libc::c_int
              }
              while !((*ptr_to_globals).dot.offset(dir as isize) < (*ptr_to_globals).text
                || (*ptr_to_globals).dot.offset(dir as isize) > (*ptr_to_globals).end.offset(-1))
              {
                (*ptr_to_globals).dot = (*ptr_to_globals).dot.offset(dir as isize);
                if ({
                  let mut bb__isspace: libc::c_uchar =
                    (*(*ptr_to_globals).dot as libc::c_int - 9i32) as libc::c_uchar;
                  (bb__isspace as libc::c_int == ' ' as i32 - 9i32
                    || bb__isspace as libc::c_int <= 13i32 - 9i32) as libc::c_int
                }) != 0
                {
                  (*ptr_to_globals).dot = skip_thing(
                    (*ptr_to_globals).dot,
                    if c == 'e' as i32 { 2i32 } else { 1i32 },
                    dir,
                    S_OVER_WS as libc::c_int,
                  )
                }
                if bb_ascii_isalnum(*(*ptr_to_globals).dot as libc::c_uchar) != 0
                  || *(*ptr_to_globals).dot as libc::c_int == '_' as i32
                {
                  (*ptr_to_globals).dot =
                    skip_thing((*ptr_to_globals).dot, 1i32, dir, S_END_ALNUM as libc::c_int)
                } else if *strchrnul(
                  b"!\"#$%&\'()*+,-./:;<=>?@[\\]^_`{|}~\x00" as *const u8 as *const libc::c_char,
                  *(*ptr_to_globals).dot as libc::c_int,
                )
                .offset(0)
                  != 0
                {
                  (*ptr_to_globals).dot =
                    skip_thing((*ptr_to_globals).dot, 1i32, dir, S_END_PUNCT as libc::c_int)
                }
                (*ptr_to_globals).cmdcnt -= 1;
                if !((*ptr_to_globals).cmdcnt > 0) {
                  break;
                }
              }
              current_block = 15129665204879337069;
            }
            1085022737867179637 => {
              dot_begin();
              dot_skip_over_ws();
              current_block = 15129665204879337069;
            }
            3113147720494587438 => {
              c1 = get_one_char();
              if c1 != 'Z' as i32 {
                indicate_error();
              } else if (*ptr_to_globals).modified_count != 0 {
                if 1i32 != 0 && (*ptr_to_globals).readonly_mode as libc::c_int != 0 {
                  status_line_bold(
                    b"\'%s\' is read only\x00" as *const u8 as *const libc::c_char,
                    (*ptr_to_globals).current_filename,
                  );
                } else {
                  cnt = file_write(
                    (*ptr_to_globals).current_filename,
                    (*ptr_to_globals).text,
                    (*ptr_to_globals).end.offset(-1),
                  );
                  if cnt < 0 {
                    if cnt == -1i32 {
                      status_line_bold(b"Write error: %m\x00" as *const u8 as *const libc::c_char);
                    }
                  } else if cnt as libc::c_long
                    == (*ptr_to_globals)
                      .end
                      .offset(-1)
                      .wrapping_offset_from((*ptr_to_globals).text)
                      as libc::c_long
                      + 1
                  {
                    (*ptr_to_globals).editing = 0 as smallint
                  }
                }
              } else {
                (*ptr_to_globals).editing = 0 as smallint
              }
              current_block = 15129665204879337069;
            }
            12960118908218882441 => {
              p = begin_line((*ptr_to_globals).dot);
              if *p.offset(-1i32 as isize) as libc::c_int == '\n' as i32 {
                dot_prev();
                current_block = 2087484904894455135;
              } else {
                dot_begin();
                (*ptr_to_globals).dot =
                  char_insert((*ptr_to_globals).dot, '\n' as i32 as libc::c_char, 1i32);
                dot_prev();
                current_block = 8629930936610358348;
              }
            }
            8720450212473544924 => {
              (*ptr_to_globals).dot = (*ptr_to_globals).screenbegin;
              cnt = 0;
              while (cnt as libc::c_uint)
                < (*ptr_to_globals)
                  .rows
                  .wrapping_sub(1i32 as libc::c_uint)
                  .wrapping_div(2i32 as libc::c_uint)
              {
                (*ptr_to_globals).dot = next_line((*ptr_to_globals).dot);
                cnt += 1
              }
              current_block = 15129665204879337069;
            }
            13015277209715431090 => {
              (*ptr_to_globals).dot = end_screen();
              if (*ptr_to_globals).cmdcnt as libc::c_uint
                > (*ptr_to_globals).rows.wrapping_sub(1i32 as libc::c_uint)
              {
                (*ptr_to_globals).cmdcnt =
                  (*ptr_to_globals).rows.wrapping_sub(1i32 as libc::c_uint) as libc::c_int
              }
              (*ptr_to_globals).cmdcnt -= 1;
              if (*ptr_to_globals).cmdcnt > 0 {
                do_cmd('-' as i32);
              }
              dot_begin();
              dot_skip_over_ws();
              current_block = 15129665204879337069;
            }
            9800435767766781385 => {
              loop {
                dot_end();
                if (*ptr_to_globals).dot < (*ptr_to_globals).end.offset(-1) {
                  undo_push(
                    (*ptr_to_globals).dot,
                    1i32 as libc::c_uint,
                    1i32 as libc::c_uchar,
                  );
                  let fresh15 = (*ptr_to_globals).dot;
                  (*ptr_to_globals).dot = (*ptr_to_globals).dot.offset(1);
                  *fresh15 = ' ' as i32 as libc::c_char;
                  undo_push(
                    (*ptr_to_globals).dot.offset(-1),
                    1i32 as libc::c_uint,
                    2i32 as libc::c_uchar,
                  );
                  while ({
                    let mut bb__isblank: libc::c_uchar = *(*ptr_to_globals).dot as libc::c_uchar;
                    (bb__isblank as libc::c_int == ' ' as i32
                      || bb__isblank as libc::c_int == '\t' as i32)
                      as libc::c_int
                  }) != 0
                  {
                    text_hole_delete((*ptr_to_globals).dot, (*ptr_to_globals).dot, 2i32);
                  }
                }
                (*ptr_to_globals).cmdcnt -= 1;
                if !((*ptr_to_globals).cmdcnt > 0) {
                  break;
                }
              }
              end_cmd_q();
              current_block = 15129665204879337069;
            }
            3432363526595694666 => {
              dot_begin();
              dot_skip_over_ws();
              current_block = 3268579060917229304;
            }
            3494829253343353619 => {
              (*ptr_to_globals).dot = (*ptr_to_globals).screenbegin;
              if (*ptr_to_globals).cmdcnt as libc::c_uint
                > (*ptr_to_globals).rows.wrapping_sub(1i32 as libc::c_uint)
              {
                (*ptr_to_globals).cmdcnt =
                  (*ptr_to_globals).rows.wrapping_sub(1i32 as libc::c_uint) as libc::c_int
              }
              (*ptr_to_globals).cmdcnt -= 1;
              if (*ptr_to_globals).cmdcnt > 0 {
                do_cmd('+' as i32);
              }
              dot_skip_over_ws();
              current_block = 15129665204879337069;
            }
            17973101765331640574 => {
              c1 = get_one_char();
              if c1 != 'g' as i32 {
                buf[0] = 'g' as i32 as libc::c_char;
                buf[1] = if c1 >= 0 { c1 } else { '*' as i32 } as libc::c_char;
                buf[2] = '\u{0}' as i32 as libc::c_char;
                not_implemented(buf.as_mut_ptr());
                current_block = 15129665204879337069;
              } else {
                if (*ptr_to_globals).cmdcnt == 0 {
                  (*ptr_to_globals).cmdcnt = 1i32
                }
                current_block = 11945623545738147997;
              }
            }
            16546625800574160972 => {
              save_dot = (*ptr_to_globals).dot;
              (*ptr_to_globals).dot = dollar_line((*ptr_to_globals).dot);
              (*ptr_to_globals).dot = yank_delete(
                save_dot,
                (*ptr_to_globals).dot,
                0,
                YANKDEL as libc::c_int,
                1i32,
              );
              if c == 'C' as i32 {
                current_block = 8629930936610358348;
              } else {
                if c == 'D' as i32 {
                  end_cmd_q();
                }
                current_block = 15129665204879337069;
              }
            }
            11937696639986586685 => {
              cnt = count_lines((*ptr_to_globals).text, (*ptr_to_globals).dot);
              c1 = get_one_char();
              find_range(&mut p, &mut q, c1 as libc::c_char);
              yank_delete(p, q, 1i32, YANKONLY as libc::c_int, 0);
              p = begin_line(p);
              q = end_line(q);
              i = count_lines(p, q);
              while i > 0 {
                if c == '<' as i32 {
                  if *p as libc::c_int == '\t' as i32 {
                    text_hole_delete(p, p, 0);
                  } else if *p as libc::c_int == ' ' as i32 {
                    j = 0;
                    while *p as libc::c_int == ' ' as i32 && j < (*ptr_to_globals).tabstop {
                      text_hole_delete(p, p, 0);
                      j += 1
                    }
                  }
                } else if c == '>' as i32 {
                  char_insert(p, '\t' as i32 as libc::c_char, 1i32);
                }
                i -= 1;
                p = next_line(p)
              }
              (*ptr_to_globals).dot = find_line(cnt);
              dot_skip_over_ws();
              end_cmd_q();
              current_block = 15129665204879337069;
            }
            17725350714912028156 => {
              p = get_input_line(b":\x00" as *const u8 as *const libc::c_char);
              colon(p);
              current_block = 15129665204879337069;
            }
            14526470074083880812 => {
              q = char_search(
                (*ptr_to_globals).dot,
                b"\n\n\x00" as *const u8 as *const libc::c_char,
                (FORWARD as libc::c_int) << 1i32 | FULL as libc::c_int,
              );
              if !q.is_null() {
                (*ptr_to_globals).dot = next_line(q)
              }
              current_block = 15129665204879337069;
            }
            8893187391306414141 => {
              q = char_search(
                (*ptr_to_globals).dot,
                b"\n\n\x00" as *const u8 as *const libc::c_char,
                ((BACK as libc::c_int as libc::c_uint) << 1i32
                  | FULL as libc::c_int as libc::c_uint) as libc::c_int,
              );
              if !q.is_null() {
                (*ptr_to_globals).dot = next_line(q)
              }
              current_block = 15129665204879337069;
            }
            7021673758293221412 => {
              dir = BACK as libc::c_int;
              p = (*ptr_to_globals).dot.offset(-1);
              if *(*ptr_to_globals).last_search_pattern.offset(0) as libc::c_int == '?' as i32 {
                dir = FORWARD as libc::c_int;
                p = (*ptr_to_globals).dot.offset(1)
              }
              current_block = 4166979493554389389;
            }
            18374191879090272823 => {
              buf[0] = c as libc::c_char;
              buf[1] = '\u{0}' as i32 as libc::c_char;
              q = get_input_line(buf.as_mut_ptr());
              if *q.offset(0) as libc::c_int != 0 && *q.offset(1) == 0 {
                if *(*ptr_to_globals).last_search_pattern.offset(0) != 0 {
                  *(*ptr_to_globals).last_search_pattern.offset(0) = c as libc::c_char
                }
                current_block = 7392824444931029276;
              } else if *q.offset(0) != 0 {
                free((*ptr_to_globals).last_search_pattern as *mut libc::c_void);
                (*ptr_to_globals).last_search_pattern = crate::libbb::xfuncs_printf::xstrdup(q);
                current_block = 7392824444931029276;
              } else {
                current_block = 15129665204879337069;
              }
            }
            16407828456666301883 => {
              if (*ptr_to_globals).last_forward_char == 0 {
                current_block = 15129665204879337069;
              } else {
                loop {
                  q = (*ptr_to_globals).dot.offset(-1);
                  while q >= (*ptr_to_globals).text
                    && *q as libc::c_int != '\n' as i32
                    && *q as libc::c_int != (*ptr_to_globals).last_forward_char
                  {
                    q = q.offset(-1)
                  }
                  if q >= (*ptr_to_globals).text
                    && *q as libc::c_int == (*ptr_to_globals).last_forward_char
                  {
                    (*ptr_to_globals).dot = q
                  }
                  (*ptr_to_globals).cmdcnt -= 1;
                  if !((*ptr_to_globals).cmdcnt > 0) {
                    break;
                  }
                }
                current_block = 15129665204879337069;
              }
            }
            9018432604062702004 => {
              q = (*ptr_to_globals).dot;
              while q < (*ptr_to_globals).end && *q as libc::c_int != '\n' as i32 {
                if !strchr(
                  b"()[]{}\x00" as *const u8 as *const libc::c_char,
                  *q as libc::c_int,
                )
                .is_null()
                {
                  p = find_pair(q, *q);
                  if p.is_null() {
                    indicate_error();
                  } else {
                    (*ptr_to_globals).dot = p
                  }
                  break;
                } else {
                  q = q.offset(1)
                }
              }
              if *q as libc::c_int == '\n' as i32 {
                indicate_error();
              }
              current_block = 15129665204879337069;
            }
            10247103787464459848 => {
              p = (*ptr_to_globals).reg[(*ptr_to_globals).YDreg as usize];
              if p.is_null() {
                status_line_bold(
                  b"Nothing in register %c\x00" as *const u8 as *const libc::c_char,
                  what_reg() as libc::c_int,
                );
              } else {
                if !strchr(p, '\n' as i32).is_null() {
                  if c == 'P' as i32 {
                    dot_begin();
                  }
                  if c == 'p' as i32 {
                    if end_line((*ptr_to_globals).dot) == (*ptr_to_globals).end.offset(-1) {
                      (*ptr_to_globals).dot = (*ptr_to_globals).end
                    } else {
                      dot_next();
                    }
                  }
                } else if c == 'p' as i32 {
                  dot_right();
                }
                string_insert((*ptr_to_globals).dot, p, 1i32);
                end_cmd_q();
              }
              current_block = 15129665204879337069;
            }
            15260732871948875843 => {
              c1 = (get_one_char() | 0x20i32) - 'a' as i32;
              if c1 as libc::c_uint <= 25i32 as libc::c_uint {
                (*ptr_to_globals).mark[c1 as usize] = (*ptr_to_globals).dot
              } else {
                indicate_error();
              }
              current_block = 15129665204879337069;
            }
            12738322036487086035 => {
              c1 = get_one_char() | 0x20i32;
              if (c1 - 'a' as i32) as libc::c_uint <= 25i32 as libc::c_uint {
                c1 = c1 - 'a' as i32;
                q = (*ptr_to_globals).mark[c1 as usize];
                if (*ptr_to_globals).text <= q && q < (*ptr_to_globals).end {
                  (*ptr_to_globals).dot = q;
                  dot_begin();
                  dot_skip_over_ws();
                }
              } else if c1 == '\'' as i32 {
                (*ptr_to_globals).dot = swap_context((*ptr_to_globals).dot);
                dot_begin();
                dot_skip_over_ws();
              } else {
                indicate_error();
              }
              current_block = 15129665204879337069;
            }
            13255096073384561358 => {
              c1 = (get_one_char() | 0x20i32) - 'a' as i32;
              if c1 as libc::c_uint <= 25i32 as libc::c_uint {
                (*ptr_to_globals).YDreg = c1 as smalluint
              } else {
                indicate_error();
              }
              current_block = 15129665204879337069;
            }
            10258711639984089377 => {
              if (*ptr_to_globals).cmd_mode as libc::c_int == 0 {
                indicate_error();
              }
              (*ptr_to_globals).cmd_mode = 0 as smallint;
              undo_queue_commit();
              end_cmd_q();
              (*ptr_to_globals).last_status_cksum = 0;
              current_block = 15129665204879337069;
            }
            11439127087547047736 => {
              buf[0] = c as libc::c_char;
              buf[1] = '\u{0}' as i32 as libc::c_char;
              not_implemented(buf.as_mut_ptr());
              end_cmd_q();
              current_block = 17440971994642376514;
            }
            7961798899781870241 => {
              dot_scroll(
                (*ptr_to_globals).rows.wrapping_sub(2i32 as libc::c_uint) as libc::c_int,
                -1i32,
              );
              current_block = 15129665204879337069;
            }
            9426343755402444879 => {
              dot_scroll(
                (*ptr_to_globals)
                  .rows
                  .wrapping_sub(2i32 as libc::c_uint)
                  .wrapping_div(2i32 as libc::c_uint) as libc::c_int,
                1i32,
              );
              current_block = 15129665204879337069;
            }
            13352459794680105913 => {
              dot_scroll(1i32, 1i32);
              current_block = 15129665204879337069;
            }
            14142272253464333006 => {
              dot_scroll(
                (*ptr_to_globals).rows.wrapping_sub(2i32 as libc::c_uint) as libc::c_int,
                1i32,
              );
              current_block = 15129665204879337069;
            }
            10758177197742640066 => {
              (*ptr_to_globals).last_status_cksum = 0;
              current_block = 15129665204879337069;
            }
            6152256259730122749 => {
              current_block = 7534742345255184552;
            }
            12883932598258173301 => {
              current_block = 8800996768013373992;
            }
            11242998110520238401 => {
              redraw(1i32);
              current_block = 15129665204879337069;
            }
            13619733043935729992 => {
              loop {
                dot_next();
                dot_skip_over_ws();
                (*ptr_to_globals).cmdcnt -= 1;
                if !((*ptr_to_globals).cmdcnt > 0) {
                  break;
                }
              }
              current_block = 15129665204879337069;
            }
            9339065157412720613 => {
              dot_scroll(
                (*ptr_to_globals)
                  .rows
                  .wrapping_sub(2i32 as libc::c_uint)
                  .wrapping_div(2i32 as libc::c_uint) as libc::c_int,
                -1i32,
              );
              current_block = 15129665204879337069;
            }
            11447082683497798022 => {
              dot_scroll(1i32, -1i32);
              current_block = 15129665204879337069;
            }
            5182000506326660482 => {
              current_block = 13993698454868426881;
            }
            1105010766850597332 => {
              if !(*ptr_to_globals).reg[27].is_null() {
                p = begin_line((*ptr_to_globals).dot);
                q = end_line((*ptr_to_globals).dot);
                p = text_hole_delete(p, q, 1i32);
                p = p.offset(string_insert(p, (*ptr_to_globals).reg[27], 2i32) as isize);
                (*ptr_to_globals).dot = p;
                dot_skip_over_ws();
              }
              current_block = 15129665204879337069;
            }
            8616046655533110204 => {
              undo_pop();
              current_block = 15129665204879337069;
            }
            5127767458142431603 => {
              loop {
                (*ptr_to_globals).dot = end_line((*ptr_to_globals).dot);
                (*ptr_to_globals).cmdcnt -= 1;
                if (*ptr_to_globals).cmdcnt <= 0 {
                  break;
                }
                dot_next();
              }
              current_block = 15129665204879337069;
            }
            222014967776118151 => {
              (*ptr_to_globals).last_forward_char = get_one_char();
              current_block = 7856905509180742666;
            }
            11209792479411604110 => {
              loop {
                dot_prev();
                dot_skip_over_ws();
                (*ptr_to_globals).cmdcnt -= 1;
                if !((*ptr_to_globals).cmdcnt > 0) {
                  break;
                }
              }
              current_block = 15129665204879337069;
            }
            3364823792826654116 => {
              if (*ptr_to_globals).lmc_len != 0 {
                (*ptr_to_globals).ioq_start = crate::libbb::xfuncs_printf::xstrndup(
                  (*ptr_to_globals).last_modifying_cmd.as_mut_ptr(),
                  (*ptr_to_globals).lmc_len,
                );
                (*ptr_to_globals).ioq = (*ptr_to_globals).ioq_start
              }
              current_block = 15129665204879337069;
            }
            18096603330221575131 => {
              current_block = 17498168302144015873;
            }
            16891123271837848903 => {
              dot_end();
              current_block = 1752638907092016026;
            }
            8517235759107662071 => {
              current_block = 5847749760081351726;
            }
            12525254419223051704 => {
              if (*ptr_to_globals).dot < (*ptr_to_globals).end.offset(-1) {
                (*ptr_to_globals).dot = yank_delete(
                  (*ptr_to_globals).dot,
                  (*ptr_to_globals).dot,
                  1i32,
                  YANKDEL as libc::c_int,
                  1i32,
                )
              }
              current_block = 15129665204879337069;
            }
            15232911949322867522 => {
              current_block = 17251831742223396249;
            }
            10863374208794025069 => {
              current_block = 1895262434596074581;
            }
            451126677064669119 => {
              loop {
                dot_prev();
                (*ptr_to_globals).dot = move_to_col(
                  (*ptr_to_globals).dot,
                  (*ptr_to_globals).ccol + (*ptr_to_globals).offset,
                );
                (*ptr_to_globals).cmdcnt -= 1;
                if !((*ptr_to_globals).cmdcnt > 0) {
                  break;
                }
              }
              current_block = 15129665204879337069;
            }
            4611735929166613116 => {
              loop {
                if bb_ascii_isalnum(*(*ptr_to_globals).dot as libc::c_uchar) != 0
                  || *(*ptr_to_globals).dot as libc::c_int == '_' as i32
                {
                  (*ptr_to_globals).dot = skip_thing(
                    (*ptr_to_globals).dot,
                    1i32,
                    FORWARD as libc::c_int,
                    S_END_ALNUM as libc::c_int,
                  )
                } else if *strchrnul(
                  b"!\"#$%&\'()*+,-./:;<=>?@[\\]^_`{|}~\x00" as *const u8 as *const libc::c_char,
                  *(*ptr_to_globals).dot as libc::c_int,
                )
                .offset(0)
                  != 0
                {
                  (*ptr_to_globals).dot = skip_thing(
                    (*ptr_to_globals).dot,
                    1i32,
                    FORWARD as libc::c_int,
                    S_END_PUNCT as libc::c_int,
                  )
                }
                if (*ptr_to_globals).dot < (*ptr_to_globals).end.offset(-1) {
                  (*ptr_to_globals).dot = (*ptr_to_globals).dot.offset(1)
                }
                if ({
                  let mut bb__isspace: libc::c_uchar =
                    (*(*ptr_to_globals).dot as libc::c_int - 9i32) as libc::c_uchar;
                  (bb__isspace as libc::c_int == ' ' as i32 - 9i32
                    || bb__isspace as libc::c_int <= 13i32 - 9i32) as libc::c_int
                }) != 0
                {
                  (*ptr_to_globals).dot = skip_thing(
                    (*ptr_to_globals).dot,
                    2i32,
                    FORWARD as libc::c_int,
                    S_OVER_WS as libc::c_int,
                  )
                }
                (*ptr_to_globals).cmdcnt -= 1;
                if !((*ptr_to_globals).cmdcnt > 0) {
                  break;
                }
              }
              current_block = 15129665204879337069;
            }
            4386451087681909888 => {
              (*ptr_to_globals).dot =
                move_to_col((*ptr_to_globals).dot, (*ptr_to_globals).cmdcnt - 1i32);
              current_block = 15129665204879337069;
            }
            1296397779060594135 => {
              dot_begin();
              current_block = 15129665204879337069;
            }
            _ => {}
          }
          match current_block {
            15129665204879337069 => {}
            8629930936610358348 => {}
            _ => {
              match current_block {
                17251831742223396249 => {
                  dir = 0;
                  if c == 'X' as i32 {
                    dir = -1i32
                  }
                  loop {
                    if *(*ptr_to_globals).dot.offset(dir as isize) as libc::c_int != '\n' as i32 {
                      if c == 'X' as i32 {
                        (*ptr_to_globals).dot = (*ptr_to_globals).dot.offset(-1)
                      }
                      (*ptr_to_globals).dot = yank_delete(
                        (*ptr_to_globals).dot,
                        (*ptr_to_globals).dot,
                        0,
                        YANKDEL as libc::c_int,
                        1i32,
                      )
                    }
                    (*ptr_to_globals).cmdcnt -= 1;
                    if !((*ptr_to_globals).cmdcnt > 0) {
                      break;
                    }
                  }
                  end_cmd_q();
                  if c == 's' as i32 {
                    current_block = 8629930936610358348;
                  } else {
                    current_block = 15129665204879337069;
                  }
                }
                2087484904894455135 => {
                  dot_end();
                  (*ptr_to_globals).dot =
                    char_insert((*ptr_to_globals).dot, '\n' as i32 as libc::c_char, 1i32);
                  current_block = 8629930936610358348;
                }
                11945623545738147997 => {
                  (*ptr_to_globals).dot = (*ptr_to_globals).end.offset(-1);
                  if (*ptr_to_globals).cmdcnt > 0 {
                    (*ptr_to_globals).dot = find_line((*ptr_to_globals).cmdcnt)
                  }
                  dot_skip_over_ws();
                  current_block = 15129665204879337069;
                }
                5847749760081351726 => {
                  dir = FORWARD as libc::c_int;
                  if c == 'B' as i32 {
                    dir = BACK as libc::c_int
                  }
                  loop {
                    if c == 'W' as i32
                      || ({
                        let mut bb__isspace: libc::c_uchar =
                          (*(*ptr_to_globals).dot.offset(dir as isize) as libc::c_int - 9i32)
                            as libc::c_uchar;
                        (bb__isspace as libc::c_int == ' ' as i32 - 9i32
                          || bb__isspace as libc::c_int <= 13i32 - 9i32)
                          as libc::c_int
                      }) != 0
                    {
                      (*ptr_to_globals).dot =
                        skip_thing((*ptr_to_globals).dot, 1i32, dir, S_TO_WS as libc::c_int);
                      (*ptr_to_globals).dot =
                        skip_thing((*ptr_to_globals).dot, 2i32, dir, S_OVER_WS as libc::c_int)
                    }
                    if c != 'W' as i32 {
                      (*ptr_to_globals).dot =
                        skip_thing((*ptr_to_globals).dot, 1i32, dir, S_BEFORE_WS as libc::c_int)
                    }
                    (*ptr_to_globals).cmdcnt -= 1;
                    if !((*ptr_to_globals).cmdcnt > 0) {
                      break;
                    }
                  }
                  current_block = 15129665204879337069;
                }
                17440971994642376514 => {
                  current_block = 15129665204879337069;
                }
                7534742345255184552 => {
                  current_block = 17247297260531395789;
                }
                8800996768013373992 => {
                  loop {
                    dot_next();
                    (*ptr_to_globals).dot = move_to_col(
                      (*ptr_to_globals).dot,
                      (*ptr_to_globals).ccol + (*ptr_to_globals).offset,
                    );
                    (*ptr_to_globals).cmdcnt -= 1;
                    if !((*ptr_to_globals).cmdcnt > 0) {
                      break;
                    }
                  }
                  current_block = 15129665204879337069;
                }
                13993698454868426881 => {
                  loop {
                    dot_right();
                    (*ptr_to_globals).cmdcnt -= 1;
                    if !((*ptr_to_globals).cmdcnt > 0) {
                      break;
                    }
                  }
                  current_block = 15129665204879337069;
                }
                7856905509180742666 => {
                  while !((*ptr_to_globals).last_forward_char == 0) {
                    q = (*ptr_to_globals).dot.offset(1);
                    while q < (*ptr_to_globals).end.offset(-1)
                      && *q as libc::c_int != '\n' as i32
                      && *q as libc::c_int != (*ptr_to_globals).last_forward_char
                    {
                      q = q.offset(1)
                    }
                    if *q as libc::c_int == (*ptr_to_globals).last_forward_char {
                      (*ptr_to_globals).dot = q
                    }
                    (*ptr_to_globals).cmdcnt -= 1;
                    if !((*ptr_to_globals).cmdcnt > 0) {
                      break;
                    }
                  }
                  current_block = 15129665204879337069;
                }
                17498168302144015873 => {
                  current_block = 8681395796513813967;
                }
                1752638907092016026 => {
                  if *(*ptr_to_globals).dot as libc::c_int != '\n' as i32 {
                    (*ptr_to_globals).dot = (*ptr_to_globals).dot.offset(1)
                  }
                  current_block = 8629930936610358348;
                }
                3268579060917229304 => {
                  current_block = 8629930936610358348;
                }
                1895262434596074581 => {
                  current_block = 8908416993177701018;
                }
                _ => {}
              }
              match current_block {
                8629930936610358348 => {}
                15129665204879337069 => {}
                _ => {
                  match current_block {
                    17247297260531395789 => {
                      loop {
                        dot_left();
                        (*ptr_to_globals).cmdcnt -= 1;
                        if !((*ptr_to_globals).cmdcnt > 0) {
                          break;
                        }
                      }
                      current_block = 15129665204879337069;
                    }
                    8681395796513813967 => {
                      current_block = 5591548203144509315;
                    }
                    8908416993177701018 => {
                      current_block = 16124761010012532485;
                    }
                    _ => {}
                  }
                  match current_block {
                    15129665204879337069 => {}
                    _ => {
                      match current_block {
                        16124761010012532485 => {
                          let mut yf: libc::c_int = 0;
                          let mut ml: libc::c_int = 0;
                          let mut whole: libc::c_int = 0;
                          yf = YANKDEL as libc::c_int;
                          if c == 'y' as i32 || c == 'Y' as i32 {
                            yf = YANKONLY as libc::c_int
                          }
                          c1 = 'y' as i32;
                          if c != 'Y' as i32 {
                            c1 = get_one_char()
                          }
                          ml = find_range(&mut p, &mut q, c1 as libc::c_char);
                          place_cursor(0i32, 0);
                          if c1 == 27i32 {
                            c1 = 27i32;
                            c = c1
                          } else if !strchr(b"wW\x00" as *const u8 as *const libc::c_char, c1)
                            .is_null()
                          {
                            ml = 0;
                            if c == 'c' as i32 {
                              while ({
                                let mut bb__isspace: libc::c_uchar =
                                  (*q as libc::c_int - 9i32) as libc::c_uchar;
                                (bb__isspace as libc::c_int == ' ' as i32 - 9i32
                                  || bb__isspace as libc::c_int <= 13i32 - 9i32)
                                  as libc::c_int
                              }) != 0
                                && q > p
                              {
                                q = q.offset(-1)
                              }
                            }
                            (*ptr_to_globals).dot = yank_delete(p, q, ml, yf, 1i32)
                          } else if !strchr(
                            b"^0bBeEft%$ lh\x08\x7f\x00" as *const u8 as *const libc::c_char,
                            c1,
                          )
                          .is_null()
                          {
                            (*ptr_to_globals).dot = yank_delete(p, q, ml, yf, 1i32)
                          } else if !strchr(
                            b"cdykjGHL+-{}\r\n\x00" as *const u8 as *const libc::c_char,
                            c1,
                          )
                          .is_null()
                          {
                            (*ptr_to_globals).dot = yank_delete(p, q, ml, yf, 1i32);
                            whole = 1i32
                          } else {
                            c1 = 27i32;
                            c = c1;
                            ml = 0;
                            indicate_error();
                          }
                          if ml != 0 && whole != 0 {
                            if c == 'c' as i32 {
                              (*ptr_to_globals).dot = char_insert(
                                (*ptr_to_globals).dot,
                                '\n' as i32 as libc::c_char,
                                2i32,
                              );
                              if whole != 0
                                && (*ptr_to_globals).dot != (*ptr_to_globals).end.offset(-1)
                              {
                                dot_prev();
                              }
                            } else if c == 'd' as i32 {
                              dot_begin();
                              dot_skip_over_ws();
                            }
                          }
                          if c1 != 27i32 {
                            if c == 'c' as i32 {
                              strcpy(
                                buf.as_mut_ptr(),
                                b"Change\x00" as *const u8 as *const libc::c_char,
                              );
                              current_block = 8629930936610358348;
                            } else {
                              if c == 'd' as i32 {
                                strcpy(
                                  buf.as_mut_ptr(),
                                  b"Delete\x00" as *const u8 as *const libc::c_char,
                                );
                              }
                              if c == 'y' as i32 || c == 'Y' as i32 {
                                strcpy(
                                  buf.as_mut_ptr(),
                                  b"Yank\x00" as *const u8 as *const libc::c_char,
                                );
                              }
                              p = (*ptr_to_globals).reg[(*ptr_to_globals).YDreg as usize];
                              q = p.offset(strlen(p) as isize);
                              cnt = 0;
                              while p <= q {
                                if *p as libc::c_int == '\n' as i32 {
                                  cnt += 1
                                }
                                p = p.offset(1)
                              }
                              status_line(
                                b"%s %u lines (%u chars) using [%c]\x00" as *const u8
                                  as *const libc::c_char,
                                buf.as_mut_ptr(),
                                cnt,
                                strlen((*ptr_to_globals).reg[(*ptr_to_globals).YDreg as usize])
                                  as libc::c_uint,
                                what_reg() as libc::c_int,
                              );
                              end_cmd_q();
                              current_block = 15129665204879337069;
                            }
                          } else {
                            current_block = 15129665204879337069;
                          }
                        }
                        5591548203144509315 => {
                          current_block = 2636677179867529885;
                        }
                        _ => {}
                      }
                      match current_block {
                        15129665204879337069 => {}
                        8629930936610358348 => {}
                        _ => {
                          match current_block {
                            2636677179867529885 => {
                              current_block = 12309206730560524281;
                            }
                            _ => {}
                          }
                          match current_block {
                            12309206730560524281 => {
                              current_block = 3325768110057758661;
                            }
                            _ => {}
                          }
                          match current_block {
                            3325768110057758661 => {
                              current_block = 14815832896553429982;
                            }
                            _ => {}
                          }
                          match current_block {
                            14815832896553429982 => {
                              current_block = 10731695520297161438;
                            }
                            _ => {}
                          }
                          match current_block {
                            10731695520297161438 => {
                              if c == '0' as i32 && (*ptr_to_globals).cmdcnt < 1i32 {
                                dot_begin();
                              } else {
                                (*ptr_to_globals).cmdcnt =
                                  (*ptr_to_globals).cmdcnt * 10i32 + (c - '0' as i32)
                              }
                              current_block = 15129665204879337069;
                            }
                            _ => {}
                          }
                          match current_block {
                            15129665204879337069 => {}
                            _ => {
                              loop {
                                match current_block {
                                  16813369756331276724 => {
                                    msg = std::ptr::null();
                                    current_block = 7392824444931029276;
                                  }
                                  7392824444931029276 => {
                                    dir = FORWARD as libc::c_int;
                                    p = (*ptr_to_globals).dot.offset(1);
                                    if *(*ptr_to_globals).last_search_pattern.offset(0)
                                      as libc::c_int
                                      == '?' as i32
                                    {
                                      dir = BACK as libc::c_int;
                                      p = (*ptr_to_globals).dot.offset(-1)
                                    }
                                    current_block = 4166979493554389389;
                                  }
                                  _ => {
                                    q = char_search(
                                      p,
                                      (*ptr_to_globals).last_search_pattern.offset(1),
                                      dir << 1i32 | FULL as libc::c_int,
                                    );
                                    if !q.is_null() {
                                      (*ptr_to_globals).dot = q;
                                      msg = std::ptr::null()
                                    } else {
                                      p = (*ptr_to_globals).text;
                                      if dir == BACK as libc::c_int {
                                        p = (*ptr_to_globals).end.offset(-1)
                                      }
                                      q = char_search(
                                        p,
                                        (*ptr_to_globals).last_search_pattern.offset(1),
                                        dir << 1i32 | FULL as libc::c_int,
                                      );
                                      if !q.is_null() {
                                        (*ptr_to_globals).dot = q;
                                        msg = b"search hit BOTTOM, continuing at TOP\x00"
                                          as *const u8
                                          as *const libc::c_char;
                                        if dir == BACK as libc::c_int {
                                          msg = b"search hit TOP, continuing at BOTTOM\x00"
                                            as *const u8
                                            as *const libc::c_char
                                        }
                                      } else {
                                        msg = b"Pattern not found\x00" as *const u8
                                          as *const libc::c_char
                                      }
                                    }
                                    if !msg.is_null() {
                                      status_line_bold(
                                        b"%s\x00" as *const u8 as *const libc::c_char,
                                        msg,
                                      );
                                    }
                                    (*ptr_to_globals).cmdcnt -= 1;
                                    if (*ptr_to_globals).cmdcnt > 0 {
                                      current_block = 16813369756331276724;
                                    } else {
                                      break;
                                    }
                                  }
                                }
                              }
                              current_block = 15129665204879337069;
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
        114 => {
          current_block = 9051390181078481641;
          match current_block {
            16992905640583886232 => {
              loop {
                if (*(*ptr_to_globals).dot as libc::c_int - 'a' as i32) as libc::c_uchar
                  as libc::c_int
                  <= 'z' as i32 - 'a' as i32
                {
                  undo_push(
                    (*ptr_to_globals).dot,
                    1i32 as libc::c_uint,
                    1i32 as libc::c_uchar,
                  );
                  *(*ptr_to_globals).dot =
                    bb_ascii_toupper(*(*ptr_to_globals).dot as libc::c_uchar) as libc::c_char;
                  undo_push(
                    (*ptr_to_globals).dot,
                    1i32 as libc::c_uint,
                    2i32 as libc::c_uchar,
                  );
                } else if (*(*ptr_to_globals).dot as libc::c_int - 'A' as i32) as libc::c_uchar
                  as libc::c_int
                  <= 'Z' as i32 - 'A' as i32
                {
                  undo_push(
                    (*ptr_to_globals).dot,
                    1i32 as libc::c_uint,
                    1i32 as libc::c_uchar,
                  );
                  *(*ptr_to_globals).dot =
                    bb_ascii_tolower(*(*ptr_to_globals).dot as libc::c_uchar) as libc::c_char;
                  undo_push(
                    (*ptr_to_globals).dot,
                    1i32 as libc::c_uint,
                    2i32 as libc::c_uchar,
                  );
                }
                dot_right();
                (*ptr_to_globals).cmdcnt -= 1;
                if !((*ptr_to_globals).cmdcnt > 0) {
                  break;
                }
              }
              end_cmd_q();
              current_block = 15129665204879337069;
            }
            8729655159604064397 => {
              c1 = get_one_char();
              cnt = 0;
              if c1 == '.' as i32 {
                cnt = (*ptr_to_globals)
                  .rows
                  .wrapping_sub(2i32 as libc::c_uint)
                  .wrapping_div(2i32 as libc::c_uint) as libc::c_int
              }
              if c1 == '-' as i32 {
                cnt = (*ptr_to_globals).rows.wrapping_sub(2i32 as libc::c_uint) as libc::c_int
              }
              (*ptr_to_globals).screenbegin = begin_line((*ptr_to_globals).dot);
              dot_scroll(cnt, -1i32);
              current_block = 15129665204879337069;
            }
            15899500648299942075 => {
              (*ptr_to_globals).last_forward_char = get_one_char();
              do_cmd(';' as i32);
              if *(*ptr_to_globals).dot as libc::c_int == (*ptr_to_globals).last_forward_char {
                dot_left();
              }
              (*ptr_to_globals).last_forward_char = 0;
              current_block = 15129665204879337069;
            }
            9051390181078481641 => {
              c1 = get_one_char();
              if *(*ptr_to_globals).dot as libc::c_int != '\n' as i32 {
                (*ptr_to_globals).dot =
                  text_hole_delete((*ptr_to_globals).dot, (*ptr_to_globals).dot, 1i32);
                (*ptr_to_globals).dot =
                  char_insert((*ptr_to_globals).dot, c1 as libc::c_char, 2i32);
                dot_left();
              }
              end_cmd_q();
              current_block = 15129665204879337069;
            }
            877115918601926659 => {
              dir = FORWARD as libc::c_int;
              if c == 'b' as i32 {
                dir = BACK as libc::c_int
              }
              while !((*ptr_to_globals).dot.offset(dir as isize) < (*ptr_to_globals).text
                || (*ptr_to_globals).dot.offset(dir as isize) > (*ptr_to_globals).end.offset(-1))
              {
                (*ptr_to_globals).dot = (*ptr_to_globals).dot.offset(dir as isize);
                if ({
                  let mut bb__isspace: libc::c_uchar =
                    (*(*ptr_to_globals).dot as libc::c_int - 9i32) as libc::c_uchar;
                  (bb__isspace as libc::c_int == ' ' as i32 - 9i32
                    || bb__isspace as libc::c_int <= 13i32 - 9i32) as libc::c_int
                }) != 0
                {
                  (*ptr_to_globals).dot = skip_thing(
                    (*ptr_to_globals).dot,
                    if c == 'e' as i32 { 2i32 } else { 1i32 },
                    dir,
                    S_OVER_WS as libc::c_int,
                  )
                }
                if bb_ascii_isalnum(*(*ptr_to_globals).dot as libc::c_uchar) != 0
                  || *(*ptr_to_globals).dot as libc::c_int == '_' as i32
                {
                  (*ptr_to_globals).dot =
                    skip_thing((*ptr_to_globals).dot, 1i32, dir, S_END_ALNUM as libc::c_int)
                } else if *strchrnul(
                  b"!\"#$%&\'()*+,-./:;<=>?@[\\]^_`{|}~\x00" as *const u8 as *const libc::c_char,
                  *(*ptr_to_globals).dot as libc::c_int,
                )
                .offset(0)
                  != 0
                {
                  (*ptr_to_globals).dot =
                    skip_thing((*ptr_to_globals).dot, 1i32, dir, S_END_PUNCT as libc::c_int)
                }
                (*ptr_to_globals).cmdcnt -= 1;
                if !((*ptr_to_globals).cmdcnt > 0) {
                  break;
                }
              }
              current_block = 15129665204879337069;
            }
            1085022737867179637 => {
              dot_begin();
              dot_skip_over_ws();
              current_block = 15129665204879337069;
            }
            3113147720494587438 => {
              c1 = get_one_char();
              if c1 != 'Z' as i32 {
                indicate_error();
              } else if (*ptr_to_globals).modified_count != 0 {
                if 1i32 != 0 && (*ptr_to_globals).readonly_mode as libc::c_int != 0 {
                  status_line_bold(
                    b"\'%s\' is read only\x00" as *const u8 as *const libc::c_char,
                    (*ptr_to_globals).current_filename,
                  );
                } else {
                  cnt = file_write(
                    (*ptr_to_globals).current_filename,
                    (*ptr_to_globals).text,
                    (*ptr_to_globals).end.offset(-1),
                  );
                  if cnt < 0 {
                    if cnt == -1i32 {
                      status_line_bold(b"Write error: %m\x00" as *const u8 as *const libc::c_char);
                    }
                  } else if cnt as libc::c_long
                    == (*ptr_to_globals)
                      .end
                      .offset(-1)
                      .wrapping_offset_from((*ptr_to_globals).text)
                      as libc::c_long
                      + 1
                  {
                    (*ptr_to_globals).editing = 0 as smallint
                  }
                }
              } else {
                (*ptr_to_globals).editing = 0 as smallint
              }
              current_block = 15129665204879337069;
            }
            12960118908218882441 => {
              p = begin_line((*ptr_to_globals).dot);
              if *p.offset(-1i32 as isize) as libc::c_int == '\n' as i32 {
                dot_prev();
                current_block = 2087484904894455135;
              } else {
                dot_begin();
                (*ptr_to_globals).dot =
                  char_insert((*ptr_to_globals).dot, '\n' as i32 as libc::c_char, 1i32);
                dot_prev();
                current_block = 8629930936610358348;
              }
            }
            8720450212473544924 => {
              (*ptr_to_globals).dot = (*ptr_to_globals).screenbegin;
              cnt = 0;
              while (cnt as libc::c_uint)
                < (*ptr_to_globals)
                  .rows
                  .wrapping_sub(1i32 as libc::c_uint)
                  .wrapping_div(2i32 as libc::c_uint)
              {
                (*ptr_to_globals).dot = next_line((*ptr_to_globals).dot);
                cnt += 1
              }
              current_block = 15129665204879337069;
            }
            13015277209715431090 => {
              (*ptr_to_globals).dot = end_screen();
              if (*ptr_to_globals).cmdcnt as libc::c_uint
                > (*ptr_to_globals).rows.wrapping_sub(1i32 as libc::c_uint)
              {
                (*ptr_to_globals).cmdcnt =
                  (*ptr_to_globals).rows.wrapping_sub(1i32 as libc::c_uint) as libc::c_int
              }
              (*ptr_to_globals).cmdcnt -= 1;
              if (*ptr_to_globals).cmdcnt > 0 {
                do_cmd('-' as i32);
              }
              dot_begin();
              dot_skip_over_ws();
              current_block = 15129665204879337069;
            }
            9800435767766781385 => {
              loop {
                dot_end();
                if (*ptr_to_globals).dot < (*ptr_to_globals).end.offset(-1) {
                  undo_push(
                    (*ptr_to_globals).dot,
                    1i32 as libc::c_uint,
                    1i32 as libc::c_uchar,
                  );
                  let fresh15 = (*ptr_to_globals).dot;
                  (*ptr_to_globals).dot = (*ptr_to_globals).dot.offset(1);
                  *fresh15 = ' ' as i32 as libc::c_char;
                  undo_push(
                    (*ptr_to_globals).dot.offset(-1),
                    1i32 as libc::c_uint,
                    2i32 as libc::c_uchar,
                  );
                  while ({
                    let mut bb__isblank: libc::c_uchar = *(*ptr_to_globals).dot as libc::c_uchar;
                    (bb__isblank as libc::c_int == ' ' as i32
                      || bb__isblank as libc::c_int == '\t' as i32)
                      as libc::c_int
                  }) != 0
                  {
                    text_hole_delete((*ptr_to_globals).dot, (*ptr_to_globals).dot, 2i32);
                  }
                }
                (*ptr_to_globals).cmdcnt -= 1;
                if !((*ptr_to_globals).cmdcnt > 0) {
                  break;
                }
              }
              end_cmd_q();
              current_block = 15129665204879337069;
            }
            3432363526595694666 => {
              dot_begin();
              dot_skip_over_ws();
              current_block = 3268579060917229304;
            }
            3494829253343353619 => {
              (*ptr_to_globals).dot = (*ptr_to_globals).screenbegin;
              if (*ptr_to_globals).cmdcnt as libc::c_uint
                > (*ptr_to_globals).rows.wrapping_sub(1i32 as libc::c_uint)
              {
                (*ptr_to_globals).cmdcnt =
                  (*ptr_to_globals).rows.wrapping_sub(1i32 as libc::c_uint) as libc::c_int
              }
              (*ptr_to_globals).cmdcnt -= 1;
              if (*ptr_to_globals).cmdcnt > 0 {
                do_cmd('+' as i32);
              }
              dot_skip_over_ws();
              current_block = 15129665204879337069;
            }
            17973101765331640574 => {
              c1 = get_one_char();
              if c1 != 'g' as i32 {
                buf[0] = 'g' as i32 as libc::c_char;
                buf[1] = if c1 >= 0 { c1 } else { '*' as i32 } as libc::c_char;
                buf[2] = '\u{0}' as i32 as libc::c_char;
                not_implemented(buf.as_mut_ptr());
                current_block = 15129665204879337069;
              } else {
                if (*ptr_to_globals).cmdcnt == 0 {
                  (*ptr_to_globals).cmdcnt = 1i32
                }
                current_block = 11945623545738147997;
              }
            }
            16546625800574160972 => {
              save_dot = (*ptr_to_globals).dot;
              (*ptr_to_globals).dot = dollar_line((*ptr_to_globals).dot);
              (*ptr_to_globals).dot = yank_delete(
                save_dot,
                (*ptr_to_globals).dot,
                0,
                YANKDEL as libc::c_int,
                1i32,
              );
              if c == 'C' as i32 {
                current_block = 8629930936610358348;
              } else {
                if c == 'D' as i32 {
                  end_cmd_q();
                }
                current_block = 15129665204879337069;
              }
            }
            11937696639986586685 => {
              cnt = count_lines((*ptr_to_globals).text, (*ptr_to_globals).dot);
              c1 = get_one_char();
              find_range(&mut p, &mut q, c1 as libc::c_char);
              yank_delete(p, q, 1i32, YANKONLY as libc::c_int, 0);
              p = begin_line(p);
              q = end_line(q);
              i = count_lines(p, q);
              while i > 0 {
                if c == '<' as i32 {
                  if *p as libc::c_int == '\t' as i32 {
                    text_hole_delete(p, p, 0);
                  } else if *p as libc::c_int == ' ' as i32 {
                    j = 0;
                    while *p as libc::c_int == ' ' as i32 && j < (*ptr_to_globals).tabstop {
                      text_hole_delete(p, p, 0);
                      j += 1
                    }
                  }
                } else if c == '>' as i32 {
                  char_insert(p, '\t' as i32 as libc::c_char, 1i32);
                }
                i -= 1;
                p = next_line(p)
              }
              (*ptr_to_globals).dot = find_line(cnt);
              dot_skip_over_ws();
              end_cmd_q();
              current_block = 15129665204879337069;
            }
            17725350714912028156 => {
              p = get_input_line(b":\x00" as *const u8 as *const libc::c_char);
              colon(p);
              current_block = 15129665204879337069;
            }
            14526470074083880812 => {
              q = char_search(
                (*ptr_to_globals).dot,
                b"\n\n\x00" as *const u8 as *const libc::c_char,
                (FORWARD as libc::c_int) << 1i32 | FULL as libc::c_int,
              );
              if !q.is_null() {
                (*ptr_to_globals).dot = next_line(q)
              }
              current_block = 15129665204879337069;
            }
            8893187391306414141 => {
              q = char_search(
                (*ptr_to_globals).dot,
                b"\n\n\x00" as *const u8 as *const libc::c_char,
                ((BACK as libc::c_int as libc::c_uint) << 1i32
                  | FULL as libc::c_int as libc::c_uint) as libc::c_int,
              );
              if !q.is_null() {
                (*ptr_to_globals).dot = next_line(q)
              }
              current_block = 15129665204879337069;
            }
            7021673758293221412 => {
              dir = BACK as libc::c_int;
              p = (*ptr_to_globals).dot.offset(-1);
              if *(*ptr_to_globals).last_search_pattern.offset(0) as libc::c_int == '?' as i32 {
                dir = FORWARD as libc::c_int;
                p = (*ptr_to_globals).dot.offset(1)
              }
              current_block = 4166979493554389389;
            }
            18374191879090272823 => {
              buf[0] = c as libc::c_char;
              buf[1] = '\u{0}' as i32 as libc::c_char;
              q = get_input_line(buf.as_mut_ptr());
              if *q.offset(0) as libc::c_int != 0 && *q.offset(1) == 0 {
                if *(*ptr_to_globals).last_search_pattern.offset(0) != 0 {
                  *(*ptr_to_globals).last_search_pattern.offset(0) = c as libc::c_char
                }
                current_block = 7392824444931029276;
              } else if *q.offset(0) != 0 {
                free((*ptr_to_globals).last_search_pattern as *mut libc::c_void);
                (*ptr_to_globals).last_search_pattern = crate::libbb::xfuncs_printf::xstrdup(q);
                current_block = 7392824444931029276;
              } else {
                current_block = 15129665204879337069;
              }
            }
            16407828456666301883 => {
              if (*ptr_to_globals).last_forward_char == 0 {
                current_block = 15129665204879337069;
              } else {
                loop {
                  q = (*ptr_to_globals).dot.offset(-1);
                  while q >= (*ptr_to_globals).text
                    && *q as libc::c_int != '\n' as i32
                    && *q as libc::c_int != (*ptr_to_globals).last_forward_char
                  {
                    q = q.offset(-1)
                  }
                  if q >= (*ptr_to_globals).text
                    && *q as libc::c_int == (*ptr_to_globals).last_forward_char
                  {
                    (*ptr_to_globals).dot = q
                  }
                  (*ptr_to_globals).cmdcnt -= 1;
                  if !((*ptr_to_globals).cmdcnt > 0) {
                    break;
                  }
                }
                current_block = 15129665204879337069;
              }
            }
            9018432604062702004 => {
              q = (*ptr_to_globals).dot;
              while q < (*ptr_to_globals).end && *q as libc::c_int != '\n' as i32 {
                if !strchr(
                  b"()[]{}\x00" as *const u8 as *const libc::c_char,
                  *q as libc::c_int,
                )
                .is_null()
                {
                  p = find_pair(q, *q);
                  if p.is_null() {
                    indicate_error();
                  } else {
                    (*ptr_to_globals).dot = p
                  }
                  break;
                } else {
                  q = q.offset(1)
                }
              }
              if *q as libc::c_int == '\n' as i32 {
                indicate_error();
              }
              current_block = 15129665204879337069;
            }
            10247103787464459848 => {
              p = (*ptr_to_globals).reg[(*ptr_to_globals).YDreg as usize];
              if p.is_null() {
                status_line_bold(
                  b"Nothing in register %c\x00" as *const u8 as *const libc::c_char,
                  what_reg() as libc::c_int,
                );
              } else {
                if !strchr(p, '\n' as i32).is_null() {
                  if c == 'P' as i32 {
                    dot_begin();
                  }
                  if c == 'p' as i32 {
                    if end_line((*ptr_to_globals).dot) == (*ptr_to_globals).end.offset(-1) {
                      (*ptr_to_globals).dot = (*ptr_to_globals).end
                    } else {
                      dot_next();
                    }
                  }
                } else if c == 'p' as i32 {
                  dot_right();
                }
                string_insert((*ptr_to_globals).dot, p, 1i32);
                end_cmd_q();
              }
              current_block = 15129665204879337069;
            }
            15260732871948875843 => {
              c1 = (get_one_char() | 0x20i32) - 'a' as i32;
              if c1 as libc::c_uint <= 25i32 as libc::c_uint {
                (*ptr_to_globals).mark[c1 as usize] = (*ptr_to_globals).dot
              } else {
                indicate_error();
              }
              current_block = 15129665204879337069;
            }
            12738322036487086035 => {
              c1 = get_one_char() | 0x20i32;
              if (c1 - 'a' as i32) as libc::c_uint <= 25i32 as libc::c_uint {
                c1 = c1 - 'a' as i32;
                q = (*ptr_to_globals).mark[c1 as usize];
                if (*ptr_to_globals).text <= q && q < (*ptr_to_globals).end {
                  (*ptr_to_globals).dot = q;
                  dot_begin();
                  dot_skip_over_ws();
                }
              } else if c1 == '\'' as i32 {
                (*ptr_to_globals).dot = swap_context((*ptr_to_globals).dot);
                dot_begin();
                dot_skip_over_ws();
              } else {
                indicate_error();
              }
              current_block = 15129665204879337069;
            }
            13255096073384561358 => {
              c1 = (get_one_char() | 0x20i32) - 'a' as i32;
              if c1 as libc::c_uint <= 25i32 as libc::c_uint {
                (*ptr_to_globals).YDreg = c1 as smalluint
              } else {
                indicate_error();
              }
              current_block = 15129665204879337069;
            }
            10258711639984089377 => {
              if (*ptr_to_globals).cmd_mode as libc::c_int == 0 {
                indicate_error();
              }
              (*ptr_to_globals).cmd_mode = 0 as smallint;
              undo_queue_commit();
              end_cmd_q();
              (*ptr_to_globals).last_status_cksum = 0;
              current_block = 15129665204879337069;
            }
            11439127087547047736 => {
              buf[0] = c as libc::c_char;
              buf[1] = '\u{0}' as i32 as libc::c_char;
              not_implemented(buf.as_mut_ptr());
              end_cmd_q();
              current_block = 17440971994642376514;
            }
            7961798899781870241 => {
              dot_scroll(
                (*ptr_to_globals).rows.wrapping_sub(2i32 as libc::c_uint) as libc::c_int,
                -1i32,
              );
              current_block = 15129665204879337069;
            }
            9426343755402444879 => {
              dot_scroll(
                (*ptr_to_globals)
                  .rows
                  .wrapping_sub(2i32 as libc::c_uint)
                  .wrapping_div(2i32 as libc::c_uint) as libc::c_int,
                1i32,
              );
              current_block = 15129665204879337069;
            }
            13352459794680105913 => {
              dot_scroll(1i32, 1i32);
              current_block = 15129665204879337069;
            }
            14142272253464333006 => {
              dot_scroll(
                (*ptr_to_globals).rows.wrapping_sub(2i32 as libc::c_uint) as libc::c_int,
                1i32,
              );
              current_block = 15129665204879337069;
            }
            10758177197742640066 => {
              (*ptr_to_globals).last_status_cksum = 0;
              current_block = 15129665204879337069;
            }
            6152256259730122749 => {
              current_block = 7534742345255184552;
            }
            12883932598258173301 => {
              current_block = 8800996768013373992;
            }
            11242998110520238401 => {
              redraw(1i32);
              current_block = 15129665204879337069;
            }
            13619733043935729992 => {
              loop {
                dot_next();
                dot_skip_over_ws();
                (*ptr_to_globals).cmdcnt -= 1;
                if !((*ptr_to_globals).cmdcnt > 0) {
                  break;
                }
              }
              current_block = 15129665204879337069;
            }
            9339065157412720613 => {
              dot_scroll(
                (*ptr_to_globals)
                  .rows
                  .wrapping_sub(2i32 as libc::c_uint)
                  .wrapping_div(2i32 as libc::c_uint) as libc::c_int,
                -1i32,
              );
              current_block = 15129665204879337069;
            }
            11447082683497798022 => {
              dot_scroll(1i32, -1i32);
              current_block = 15129665204879337069;
            }
            5182000506326660482 => {
              current_block = 13993698454868426881;
            }
            1105010766850597332 => {
              if !(*ptr_to_globals).reg[27].is_null() {
                p = begin_line((*ptr_to_globals).dot);
                q = end_line((*ptr_to_globals).dot);
                p = text_hole_delete(p, q, 1i32);
                p = p.offset(string_insert(p, (*ptr_to_globals).reg[27], 2i32) as isize);
                (*ptr_to_globals).dot = p;
                dot_skip_over_ws();
              }
              current_block = 15129665204879337069;
            }
            8616046655533110204 => {
              undo_pop();
              current_block = 15129665204879337069;
            }
            5127767458142431603 => {
              loop {
                (*ptr_to_globals).dot = end_line((*ptr_to_globals).dot);
                (*ptr_to_globals).cmdcnt -= 1;
                if (*ptr_to_globals).cmdcnt <= 0 {
                  break;
                }
                dot_next();
              }
              current_block = 15129665204879337069;
            }
            222014967776118151 => {
              (*ptr_to_globals).last_forward_char = get_one_char();
              current_block = 7856905509180742666;
            }
            11209792479411604110 => {
              loop {
                dot_prev();
                dot_skip_over_ws();
                (*ptr_to_globals).cmdcnt -= 1;
                if !((*ptr_to_globals).cmdcnt > 0) {
                  break;
                }
              }
              current_block = 15129665204879337069;
            }
            3364823792826654116 => {
              if (*ptr_to_globals).lmc_len != 0 {
                (*ptr_to_globals).ioq_start = crate::libbb::xfuncs_printf::xstrndup(
                  (*ptr_to_globals).last_modifying_cmd.as_mut_ptr(),
                  (*ptr_to_globals).lmc_len,
                );
                (*ptr_to_globals).ioq = (*ptr_to_globals).ioq_start
              }
              current_block = 15129665204879337069;
            }
            18096603330221575131 => {
              current_block = 17498168302144015873;
            }
            16891123271837848903 => {
              dot_end();
              current_block = 1752638907092016026;
            }
            8517235759107662071 => {
              current_block = 5847749760081351726;
            }
            12525254419223051704 => {
              if (*ptr_to_globals).dot < (*ptr_to_globals).end.offset(-1) {
                (*ptr_to_globals).dot = yank_delete(
                  (*ptr_to_globals).dot,
                  (*ptr_to_globals).dot,
                  1i32,
                  YANKDEL as libc::c_int,
                  1i32,
                )
              }
              current_block = 15129665204879337069;
            }
            15232911949322867522 => {
              current_block = 17251831742223396249;
            }
            10863374208794025069 => {
              current_block = 1895262434596074581;
            }
            451126677064669119 => {
              loop {
                dot_prev();
                (*ptr_to_globals).dot = move_to_col(
                  (*ptr_to_globals).dot,
                  (*ptr_to_globals).ccol + (*ptr_to_globals).offset,
                );
                (*ptr_to_globals).cmdcnt -= 1;
                if !((*ptr_to_globals).cmdcnt > 0) {
                  break;
                }
              }
              current_block = 15129665204879337069;
            }
            4611735929166613116 => {
              loop {
                if bb_ascii_isalnum(*(*ptr_to_globals).dot as libc::c_uchar) != 0
                  || *(*ptr_to_globals).dot as libc::c_int == '_' as i32
                {
                  (*ptr_to_globals).dot = skip_thing(
                    (*ptr_to_globals).dot,
                    1i32,
                    FORWARD as libc::c_int,
                    S_END_ALNUM as libc::c_int,
                  )
                } else if *strchrnul(
                  b"!\"#$%&\'()*+,-./:;<=>?@[\\]^_`{|}~\x00" as *const u8 as *const libc::c_char,
                  *(*ptr_to_globals).dot as libc::c_int,
                )
                .offset(0)
                  != 0
                {
                  (*ptr_to_globals).dot = skip_thing(
                    (*ptr_to_globals).dot,
                    1i32,
                    FORWARD as libc::c_int,
                    S_END_PUNCT as libc::c_int,
                  )
                }
                if (*ptr_to_globals).dot < (*ptr_to_globals).end.offset(-1) {
                  (*ptr_to_globals).dot = (*ptr_to_globals).dot.offset(1)
                }
                if ({
                  let mut bb__isspace: libc::c_uchar =
                    (*(*ptr_to_globals).dot as libc::c_int - 9i32) as libc::c_uchar;
                  (bb__isspace as libc::c_int == ' ' as i32 - 9i32
                    || bb__isspace as libc::c_int <= 13i32 - 9i32) as libc::c_int
                }) != 0
                {
                  (*ptr_to_globals).dot = skip_thing(
                    (*ptr_to_globals).dot,
                    2i32,
                    FORWARD as libc::c_int,
                    S_OVER_WS as libc::c_int,
                  )
                }
                (*ptr_to_globals).cmdcnt -= 1;
                if !((*ptr_to_globals).cmdcnt > 0) {
                  break;
                }
              }
              current_block = 15129665204879337069;
            }
            4386451087681909888 => {
              (*ptr_to_globals).dot =
                move_to_col((*ptr_to_globals).dot, (*ptr_to_globals).cmdcnt - 1i32);
              current_block = 15129665204879337069;
            }
            1296397779060594135 => {
              dot_begin();
              current_block = 15129665204879337069;
            }
            _ => {}
          }
          match current_block {
            15129665204879337069 => {}
            8629930936610358348 => {}
            _ => {
              match current_block {
                17251831742223396249 => {
                  dir = 0;
                  if c == 'X' as i32 {
                    dir = -1i32
                  }
                  loop {
                    if *(*ptr_to_globals).dot.offset(dir as isize) as libc::c_int != '\n' as i32 {
                      if c == 'X' as i32 {
                        (*ptr_to_globals).dot = (*ptr_to_globals).dot.offset(-1)
                      }
                      (*ptr_to_globals).dot = yank_delete(
                        (*ptr_to_globals).dot,
                        (*ptr_to_globals).dot,
                        0,
                        YANKDEL as libc::c_int,
                        1i32,
                      )
                    }
                    (*ptr_to_globals).cmdcnt -= 1;
                    if !((*ptr_to_globals).cmdcnt > 0) {
                      break;
                    }
                  }
                  end_cmd_q();
                  if c == 's' as i32 {
                    current_block = 8629930936610358348;
                  } else {
                    current_block = 15129665204879337069;
                  }
                }
                2087484904894455135 => {
                  dot_end();
                  (*ptr_to_globals).dot =
                    char_insert((*ptr_to_globals).dot, '\n' as i32 as libc::c_char, 1i32);
                  current_block = 8629930936610358348;
                }
                11945623545738147997 => {
                  (*ptr_to_globals).dot = (*ptr_to_globals).end.offset(-1);
                  if (*ptr_to_globals).cmdcnt > 0 {
                    (*ptr_to_globals).dot = find_line((*ptr_to_globals).cmdcnt)
                  }
                  dot_skip_over_ws();
                  current_block = 15129665204879337069;
                }
                5847749760081351726 => {
                  dir = FORWARD as libc::c_int;
                  if c == 'B' as i32 {
                    dir = BACK as libc::c_int
                  }
                  loop {
                    if c == 'W' as i32
                      || ({
                        let mut bb__isspace: libc::c_uchar =
                          (*(*ptr_to_globals).dot.offset(dir as isize) as libc::c_int - 9i32)
                            as libc::c_uchar;
                        (bb__isspace as libc::c_int == ' ' as i32 - 9i32
                          || bb__isspace as libc::c_int <= 13i32 - 9i32)
                          as libc::c_int
                      }) != 0
                    {
                      (*ptr_to_globals).dot =
                        skip_thing((*ptr_to_globals).dot, 1i32, dir, S_TO_WS as libc::c_int);
                      (*ptr_to_globals).dot =
                        skip_thing((*ptr_to_globals).dot, 2i32, dir, S_OVER_WS as libc::c_int)
                    }
                    if c != 'W' as i32 {
                      (*ptr_to_globals).dot =
                        skip_thing((*ptr_to_globals).dot, 1i32, dir, S_BEFORE_WS as libc::c_int)
                    }
                    (*ptr_to_globals).cmdcnt -= 1;
                    if !((*ptr_to_globals).cmdcnt > 0) {
                      break;
                    }
                  }
                  current_block = 15129665204879337069;
                }
                17440971994642376514 => {
                  current_block = 15129665204879337069;
                }
                7534742345255184552 => {
                  current_block = 17247297260531395789;
                }
                8800996768013373992 => {
                  loop {
                    dot_next();
                    (*ptr_to_globals).dot = move_to_col(
                      (*ptr_to_globals).dot,
                      (*ptr_to_globals).ccol + (*ptr_to_globals).offset,
                    );
                    (*ptr_to_globals).cmdcnt -= 1;
                    if !((*ptr_to_globals).cmdcnt > 0) {
                      break;
                    }
                  }
                  current_block = 15129665204879337069;
                }
                13993698454868426881 => {
                  loop {
                    dot_right();
                    (*ptr_to_globals).cmdcnt -= 1;
                    if !((*ptr_to_globals).cmdcnt > 0) {
                      break;
                    }
                  }
                  current_block = 15129665204879337069;
                }
                7856905509180742666 => {
                  while !((*ptr_to_globals).last_forward_char == 0) {
                    q = (*ptr_to_globals).dot.offset(1);
                    while q < (*ptr_to_globals).end.offset(-1)
                      && *q as libc::c_int != '\n' as i32
                      && *q as libc::c_int != (*ptr_to_globals).last_forward_char
                    {
                      q = q.offset(1)
                    }
                    if *q as libc::c_int == (*ptr_to_globals).last_forward_char {
                      (*ptr_to_globals).dot = q
                    }
                    (*ptr_to_globals).cmdcnt -= 1;
                    if !((*ptr_to_globals).cmdcnt > 0) {
                      break;
                    }
                  }
                  current_block = 15129665204879337069;
                }
                17498168302144015873 => {
                  current_block = 8681395796513813967;
                }
                1752638907092016026 => {
                  if *(*ptr_to_globals).dot as libc::c_int != '\n' as i32 {
                    (*ptr_to_globals).dot = (*ptr_to_globals).dot.offset(1)
                  }
                  current_block = 8629930936610358348;
                }
                3268579060917229304 => {
                  current_block = 8629930936610358348;
                }
                1895262434596074581 => {
                  current_block = 8908416993177701018;
                }
                _ => {}
              }
              match current_block {
                8629930936610358348 => {}
                15129665204879337069 => {}
                _ => {
                  match current_block {
                    17247297260531395789 => {
                      loop {
                        dot_left();
                        (*ptr_to_globals).cmdcnt -= 1;
                        if !((*ptr_to_globals).cmdcnt > 0) {
                          break;
                        }
                      }
                      current_block = 15129665204879337069;
                    }
                    8681395796513813967 => {
                      current_block = 5591548203144509315;
                    }
                    8908416993177701018 => {
                      current_block = 16124761010012532485;
                    }
                    _ => {}
                  }
                  match current_block {
                    15129665204879337069 => {}
                    _ => {
                      match current_block {
                        16124761010012532485 => {
                          let mut yf: libc::c_int = 0;
                          let mut ml: libc::c_int = 0;
                          let mut whole: libc::c_int = 0;
                          yf = YANKDEL as libc::c_int;
                          if c == 'y' as i32 || c == 'Y' as i32 {
                            yf = YANKONLY as libc::c_int
                          }
                          c1 = 'y' as i32;
                          if c != 'Y' as i32 {
                            c1 = get_one_char()
                          }
                          ml = find_range(&mut p, &mut q, c1 as libc::c_char);
                          place_cursor(0i32, 0);
                          if c1 == 27i32 {
                            c1 = 27i32;
                            c = c1
                          } else if !strchr(b"wW\x00" as *const u8 as *const libc::c_char, c1)
                            .is_null()
                          {
                            ml = 0;
                            if c == 'c' as i32 {
                              while ({
                                let mut bb__isspace: libc::c_uchar =
                                  (*q as libc::c_int - 9i32) as libc::c_uchar;
                                (bb__isspace as libc::c_int == ' ' as i32 - 9i32
                                  || bb__isspace as libc::c_int <= 13i32 - 9i32)
                                  as libc::c_int
                              }) != 0
                                && q > p
                              {
                                q = q.offset(-1)
                              }
                            }
                            (*ptr_to_globals).dot = yank_delete(p, q, ml, yf, 1i32)
                          } else if !strchr(
                            b"^0bBeEft%$ lh\x08\x7f\x00" as *const u8 as *const libc::c_char,
                            c1,
                          )
                          .is_null()
                          {
                            (*ptr_to_globals).dot = yank_delete(p, q, ml, yf, 1i32)
                          } else if !strchr(
                            b"cdykjGHL+-{}\r\n\x00" as *const u8 as *const libc::c_char,
                            c1,
                          )
                          .is_null()
                          {
                            (*ptr_to_globals).dot = yank_delete(p, q, ml, yf, 1i32);
                            whole = 1i32
                          } else {
                            c1 = 27i32;
                            c = c1;
                            ml = 0;
                            indicate_error();
                          }
                          if ml != 0 && whole != 0 {
                            if c == 'c' as i32 {
                              (*ptr_to_globals).dot = char_insert(
                                (*ptr_to_globals).dot,
                                '\n' as i32 as libc::c_char,
                                2i32,
                              );
                              if whole != 0
                                && (*ptr_to_globals).dot != (*ptr_to_globals).end.offset(-1)
                              {
                                dot_prev();
                              }
                            } else if c == 'd' as i32 {
                              dot_begin();
                              dot_skip_over_ws();
                            }
                          }
                          if c1 != 27i32 {
                            if c == 'c' as i32 {
                              strcpy(
                                buf.as_mut_ptr(),
                                b"Change\x00" as *const u8 as *const libc::c_char,
                              );
                              current_block = 8629930936610358348;
                            } else {
                              if c == 'd' as i32 {
                                strcpy(
                                  buf.as_mut_ptr(),
                                  b"Delete\x00" as *const u8 as *const libc::c_char,
                                );
                              }
                              if c == 'y' as i32 || c == 'Y' as i32 {
                                strcpy(
                                  buf.as_mut_ptr(),
                                  b"Yank\x00" as *const u8 as *const libc::c_char,
                                );
                              }
                              p = (*ptr_to_globals).reg[(*ptr_to_globals).YDreg as usize];
                              q = p.offset(strlen(p) as isize);
                              cnt = 0;
                              while p <= q {
                                if *p as libc::c_int == '\n' as i32 {
                                  cnt += 1
                                }
                                p = p.offset(1)
                              }
                              status_line(
                                b"%s %u lines (%u chars) using [%c]\x00" as *const u8
                                  as *const libc::c_char,
                                buf.as_mut_ptr(),
                                cnt,
                                strlen((*ptr_to_globals).reg[(*ptr_to_globals).YDreg as usize])
                                  as libc::c_uint,
                                what_reg() as libc::c_int,
                              );
                              end_cmd_q();
                              current_block = 15129665204879337069;
                            }
                          } else {
                            current_block = 15129665204879337069;
                          }
                        }
                        5591548203144509315 => {
                          current_block = 2636677179867529885;
                        }
                        _ => {}
                      }
                      match current_block {
                        15129665204879337069 => {}
                        8629930936610358348 => {}
                        _ => {
                          match current_block {
                            2636677179867529885 => {
                              current_block = 12309206730560524281;
                            }
                            _ => {}
                          }
                          match current_block {
                            12309206730560524281 => {
                              current_block = 3325768110057758661;
                            }
                            _ => {}
                          }
                          match current_block {
                            3325768110057758661 => {
                              current_block = 14815832896553429982;
                            }
                            _ => {}
                          }
                          match current_block {
                            14815832896553429982 => {
                              current_block = 10731695520297161438;
                            }
                            _ => {}
                          }
                          match current_block {
                            10731695520297161438 => {
                              if c == '0' as i32 && (*ptr_to_globals).cmdcnt < 1i32 {
                                dot_begin();
                              } else {
                                (*ptr_to_globals).cmdcnt =
                                  (*ptr_to_globals).cmdcnt * 10i32 + (c - '0' as i32)
                              }
                              current_block = 15129665204879337069;
                            }
                            _ => {}
                          }
                          match current_block {
                            15129665204879337069 => {}
                            _ => {
                              loop {
                                match current_block {
                                  16813369756331276724 => {
                                    msg = std::ptr::null();
                                    current_block = 7392824444931029276;
                                  }
                                  7392824444931029276 => {
                                    dir = FORWARD as libc::c_int;
                                    p = (*ptr_to_globals).dot.offset(1);
                                    if *(*ptr_to_globals).last_search_pattern.offset(0)
                                      as libc::c_int
                                      == '?' as i32
                                    {
                                      dir = BACK as libc::c_int;
                                      p = (*ptr_to_globals).dot.offset(-1)
                                    }
                                    current_block = 4166979493554389389;
                                  }
                                  _ => {
                                    q = char_search(
                                      p,
                                      (*ptr_to_globals).last_search_pattern.offset(1),
                                      dir << 1i32 | FULL as libc::c_int,
                                    );
                                    if !q.is_null() {
                                      (*ptr_to_globals).dot = q;
                                      msg = std::ptr::null()
                                    } else {
                                      p = (*ptr_to_globals).text;
                                      if dir == BACK as libc::c_int {
                                        p = (*ptr_to_globals).end.offset(-1)
                                      }
                                      q = char_search(
                                        p,
                                        (*ptr_to_globals).last_search_pattern.offset(1),
                                        dir << 1i32 | FULL as libc::c_int,
                                      );
                                      if !q.is_null() {
                                        (*ptr_to_globals).dot = q;
                                        msg = b"search hit BOTTOM, continuing at TOP\x00"
                                          as *const u8
                                          as *const libc::c_char;
                                        if dir == BACK as libc::c_int {
                                          msg = b"search hit TOP, continuing at BOTTOM\x00"
                                            as *const u8
                                            as *const libc::c_char
                                        }
                                      } else {
                                        msg = b"Pattern not found\x00" as *const u8
                                          as *const libc::c_char
                                      }
                                    }
                                    if !msg.is_null() {
                                      status_line_bold(
                                        b"%s\x00" as *const u8 as *const libc::c_char,
                                        msg,
                                      );
                                    }
                                    (*ptr_to_globals).cmdcnt -= 1;
                                    if (*ptr_to_globals).cmdcnt > 0 {
                                      current_block = 16813369756331276724;
                                    } else {
                                      break;
                                    }
                                  }
                                }
                              }
                              current_block = 15129665204879337069;
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
        116 => {
          current_block = 15899500648299942075;
          match current_block {
            16992905640583886232 => {
              loop {
                if (*(*ptr_to_globals).dot as libc::c_int - 'a' as i32) as libc::c_uchar
                  as libc::c_int
                  <= 'z' as i32 - 'a' as i32
                {
                  undo_push(
                    (*ptr_to_globals).dot,
                    1i32 as libc::c_uint,
                    1i32 as libc::c_uchar,
                  );
                  *(*ptr_to_globals).dot =
                    bb_ascii_toupper(*(*ptr_to_globals).dot as libc::c_uchar) as libc::c_char;
                  undo_push(
                    (*ptr_to_globals).dot,
                    1i32 as libc::c_uint,
                    2i32 as libc::c_uchar,
                  );
                } else if (*(*ptr_to_globals).dot as libc::c_int - 'A' as i32) as libc::c_uchar
                  as libc::c_int
                  <= 'Z' as i32 - 'A' as i32
                {
                  undo_push(
                    (*ptr_to_globals).dot,
                    1i32 as libc::c_uint,
                    1i32 as libc::c_uchar,
                  );
                  *(*ptr_to_globals).dot =
                    bb_ascii_tolower(*(*ptr_to_globals).dot as libc::c_uchar) as libc::c_char;
                  undo_push(
                    (*ptr_to_globals).dot,
                    1i32 as libc::c_uint,
                    2i32 as libc::c_uchar,
                  );
                }
                dot_right();
                (*ptr_to_globals).cmdcnt -= 1;
                if !((*ptr_to_globals).cmdcnt > 0) {
                  break;
                }
              }
              end_cmd_q();
              current_block = 15129665204879337069;
            }
            8729655159604064397 => {
              c1 = get_one_char();
              cnt = 0;
              if c1 == '.' as i32 {
                cnt = (*ptr_to_globals)
                  .rows
                  .wrapping_sub(2i32 as libc::c_uint)
                  .wrapping_div(2i32 as libc::c_uint) as libc::c_int
              }
              if c1 == '-' as i32 {
                cnt = (*ptr_to_globals).rows.wrapping_sub(2i32 as libc::c_uint) as libc::c_int
              }
              (*ptr_to_globals).screenbegin = begin_line((*ptr_to_globals).dot);
              dot_scroll(cnt, -1i32);
              current_block = 15129665204879337069;
            }
            15899500648299942075 => {
              (*ptr_to_globals).last_forward_char = get_one_char();
              do_cmd(';' as i32);
              if *(*ptr_to_globals).dot as libc::c_int == (*ptr_to_globals).last_forward_char {
                dot_left();
              }
              (*ptr_to_globals).last_forward_char = 0;
              current_block = 15129665204879337069;
            }
            9051390181078481641 => {
              c1 = get_one_char();
              if *(*ptr_to_globals).dot as libc::c_int != '\n' as i32 {
                (*ptr_to_globals).dot =
                  text_hole_delete((*ptr_to_globals).dot, (*ptr_to_globals).dot, 1i32);
                (*ptr_to_globals).dot =
                  char_insert((*ptr_to_globals).dot, c1 as libc::c_char, 2i32);
                dot_left();
              }
              end_cmd_q();
              current_block = 15129665204879337069;
            }
            877115918601926659 => {
              dir = FORWARD as libc::c_int;
              if c == 'b' as i32 {
                dir = BACK as libc::c_int
              }
              while !((*ptr_to_globals).dot.offset(dir as isize) < (*ptr_to_globals).text
                || (*ptr_to_globals).dot.offset(dir as isize) > (*ptr_to_globals).end.offset(-1))
              {
                (*ptr_to_globals).dot = (*ptr_to_globals).dot.offset(dir as isize);
                if ({
                  let mut bb__isspace: libc::c_uchar =
                    (*(*ptr_to_globals).dot as libc::c_int - 9i32) as libc::c_uchar;
                  (bb__isspace as libc::c_int == ' ' as i32 - 9i32
                    || bb__isspace as libc::c_int <= 13i32 - 9i32) as libc::c_int
                }) != 0
                {
                  (*ptr_to_globals).dot = skip_thing(
                    (*ptr_to_globals).dot,
                    if c == 'e' as i32 { 2i32 } else { 1i32 },
                    dir,
                    S_OVER_WS as libc::c_int,
                  )
                }
                if bb_ascii_isalnum(*(*ptr_to_globals).dot as libc::c_uchar) != 0
                  || *(*ptr_to_globals).dot as libc::c_int == '_' as i32
                {
                  (*ptr_to_globals).dot =
                    skip_thing((*ptr_to_globals).dot, 1i32, dir, S_END_ALNUM as libc::c_int)
                } else if *strchrnul(
                  b"!\"#$%&\'()*+,-./:;<=>?@[\\]^_`{|}~\x00" as *const u8 as *const libc::c_char,
                  *(*ptr_to_globals).dot as libc::c_int,
                )
                .offset(0)
                  != 0
                {
                  (*ptr_to_globals).dot =
                    skip_thing((*ptr_to_globals).dot, 1i32, dir, S_END_PUNCT as libc::c_int)
                }
                (*ptr_to_globals).cmdcnt -= 1;
                if !((*ptr_to_globals).cmdcnt > 0) {
                  break;
                }
              }
              current_block = 15129665204879337069;
            }
            1085022737867179637 => {
              dot_begin();
              dot_skip_over_ws();
              current_block = 15129665204879337069;
            }
            3113147720494587438 => {
              c1 = get_one_char();
              if c1 != 'Z' as i32 {
                indicate_error();
              } else if (*ptr_to_globals).modified_count != 0 {
                if 1i32 != 0 && (*ptr_to_globals).readonly_mode as libc::c_int != 0 {
                  status_line_bold(
                    b"\'%s\' is read only\x00" as *const u8 as *const libc::c_char,
                    (*ptr_to_globals).current_filename,
                  );
                } else {
                  cnt = file_write(
                    (*ptr_to_globals).current_filename,
                    (*ptr_to_globals).text,
                    (*ptr_to_globals).end.offset(-1),
                  );
                  if cnt < 0 {
                    if cnt == -1i32 {
                      status_line_bold(b"Write error: %m\x00" as *const u8 as *const libc::c_char);
                    }
                  } else if cnt as libc::c_long
                    == (*ptr_to_globals)
                      .end
                      .offset(-1)
                      .wrapping_offset_from((*ptr_to_globals).text)
                      as libc::c_long
                      + 1
                  {
                    (*ptr_to_globals).editing = 0 as smallint
                  }
                }
              } else {
                (*ptr_to_globals).editing = 0 as smallint
              }
              current_block = 15129665204879337069;
            }
            12960118908218882441 => {
              p = begin_line((*ptr_to_globals).dot);
              if *p.offset(-1i32 as isize) as libc::c_int == '\n' as i32 {
                dot_prev();
                current_block = 2087484904894455135;
              } else {
                dot_begin();
                (*ptr_to_globals).dot =
                  char_insert((*ptr_to_globals).dot, '\n' as i32 as libc::c_char, 1i32);
                dot_prev();
                current_block = 8629930936610358348;
              }
            }
            8720450212473544924 => {
              (*ptr_to_globals).dot = (*ptr_to_globals).screenbegin;
              cnt = 0;
              while (cnt as libc::c_uint)
                < (*ptr_to_globals)
                  .rows
                  .wrapping_sub(1i32 as libc::c_uint)
                  .wrapping_div(2i32 as libc::c_uint)
              {
                (*ptr_to_globals).dot = next_line((*ptr_to_globals).dot);
                cnt += 1
              }
              current_block = 15129665204879337069;
            }
            13015277209715431090 => {
              (*ptr_to_globals).dot = end_screen();
              if (*ptr_to_globals).cmdcnt as libc::c_uint
                > (*ptr_to_globals).rows.wrapping_sub(1i32 as libc::c_uint)
              {
                (*ptr_to_globals).cmdcnt =
                  (*ptr_to_globals).rows.wrapping_sub(1i32 as libc::c_uint) as libc::c_int
              }
              (*ptr_to_globals).cmdcnt -= 1;
              if (*ptr_to_globals).cmdcnt > 0 {
                do_cmd('-' as i32);
              }
              dot_begin();
              dot_skip_over_ws();
              current_block = 15129665204879337069;
            }
            9800435767766781385 => {
              loop {
                dot_end();
                if (*ptr_to_globals).dot < (*ptr_to_globals).end.offset(-1) {
                  undo_push(
                    (*ptr_to_globals).dot,
                    1i32 as libc::c_uint,
                    1i32 as libc::c_uchar,
                  );
                  let fresh15 = (*ptr_to_globals).dot;
                  (*ptr_to_globals).dot = (*ptr_to_globals).dot.offset(1);
                  *fresh15 = ' ' as i32 as libc::c_char;
                  undo_push(
                    (*ptr_to_globals).dot.offset(-1),
                    1i32 as libc::c_uint,
                    2i32 as libc::c_uchar,
                  );
                  while ({
                    let mut bb__isblank: libc::c_uchar = *(*ptr_to_globals).dot as libc::c_uchar;
                    (bb__isblank as libc::c_int == ' ' as i32
                      || bb__isblank as libc::c_int == '\t' as i32)
                      as libc::c_int
                  }) != 0
                  {
                    text_hole_delete((*ptr_to_globals).dot, (*ptr_to_globals).dot, 2i32);
                  }
                }
                (*ptr_to_globals).cmdcnt -= 1;
                if !((*ptr_to_globals).cmdcnt > 0) {
                  break;
                }
              }
              end_cmd_q();
              current_block = 15129665204879337069;
            }
            3432363526595694666 => {
              dot_begin();
              dot_skip_over_ws();
              current_block = 3268579060917229304;
            }
            3494829253343353619 => {
              (*ptr_to_globals).dot = (*ptr_to_globals).screenbegin;
              if (*ptr_to_globals).cmdcnt as libc::c_uint
                > (*ptr_to_globals).rows.wrapping_sub(1i32 as libc::c_uint)
              {
                (*ptr_to_globals).cmdcnt =
                  (*ptr_to_globals).rows.wrapping_sub(1i32 as libc::c_uint) as libc::c_int
              }
              (*ptr_to_globals).cmdcnt -= 1;
              if (*ptr_to_globals).cmdcnt > 0 {
                do_cmd('+' as i32);
              }
              dot_skip_over_ws();
              current_block = 15129665204879337069;
            }
            17973101765331640574 => {
              c1 = get_one_char();
              if c1 != 'g' as i32 {
                buf[0] = 'g' as i32 as libc::c_char;
                buf[1] = if c1 >= 0 { c1 } else { '*' as i32 } as libc::c_char;
                buf[2] = '\u{0}' as i32 as libc::c_char;
                not_implemented(buf.as_mut_ptr());
                current_block = 15129665204879337069;
              } else {
                if (*ptr_to_globals).cmdcnt == 0 {
                  (*ptr_to_globals).cmdcnt = 1i32
                }
                current_block = 11945623545738147997;
              }
            }
            16546625800574160972 => {
              save_dot = (*ptr_to_globals).dot;
              (*ptr_to_globals).dot = dollar_line((*ptr_to_globals).dot);
              (*ptr_to_globals).dot = yank_delete(
                save_dot,
                (*ptr_to_globals).dot,
                0,
                YANKDEL as libc::c_int,
                1i32,
              );
              if c == 'C' as i32 {
                current_block = 8629930936610358348;
              } else {
                if c == 'D' as i32 {
                  end_cmd_q();
                }
                current_block = 15129665204879337069;
              }
            }
            11937696639986586685 => {
              cnt = count_lines((*ptr_to_globals).text, (*ptr_to_globals).dot);
              c1 = get_one_char();
              find_range(&mut p, &mut q, c1 as libc::c_char);
              yank_delete(p, q, 1i32, YANKONLY as libc::c_int, 0);
              p = begin_line(p);
              q = end_line(q);
              i = count_lines(p, q);
              while i > 0 {
                if c == '<' as i32 {
                  if *p as libc::c_int == '\t' as i32 {
                    text_hole_delete(p, p, 0);
                  } else if *p as libc::c_int == ' ' as i32 {
                    j = 0;
                    while *p as libc::c_int == ' ' as i32 && j < (*ptr_to_globals).tabstop {
                      text_hole_delete(p, p, 0);
                      j += 1
                    }
                  }
                } else if c == '>' as i32 {
                  char_insert(p, '\t' as i32 as libc::c_char, 1i32);
                }
                i -= 1;
                p = next_line(p)
              }
              (*ptr_to_globals).dot = find_line(cnt);
              dot_skip_over_ws();
              end_cmd_q();
              current_block = 15129665204879337069;
            }
            17725350714912028156 => {
              p = get_input_line(b":\x00" as *const u8 as *const libc::c_char);
              colon(p);
              current_block = 15129665204879337069;
            }
            14526470074083880812 => {
              q = char_search(
                (*ptr_to_globals).dot,
                b"\n\n\x00" as *const u8 as *const libc::c_char,
                (FORWARD as libc::c_int) << 1i32 | FULL as libc::c_int,
              );
              if !q.is_null() {
                (*ptr_to_globals).dot = next_line(q)
              }
              current_block = 15129665204879337069;
            }
            8893187391306414141 => {
              q = char_search(
                (*ptr_to_globals).dot,
                b"\n\n\x00" as *const u8 as *const libc::c_char,
                ((BACK as libc::c_int as libc::c_uint) << 1i32
                  | FULL as libc::c_int as libc::c_uint) as libc::c_int,
              );
              if !q.is_null() {
                (*ptr_to_globals).dot = next_line(q)
              }
              current_block = 15129665204879337069;
            }
            7021673758293221412 => {
              dir = BACK as libc::c_int;
              p = (*ptr_to_globals).dot.offset(-1);
              if *(*ptr_to_globals).last_search_pattern.offset(0) as libc::c_int == '?' as i32 {
                dir = FORWARD as libc::c_int;
                p = (*ptr_to_globals).dot.offset(1)
              }
              current_block = 4166979493554389389;
            }
            18374191879090272823 => {
              buf[0] = c as libc::c_char;
              buf[1] = '\u{0}' as i32 as libc::c_char;
              q = get_input_line(buf.as_mut_ptr());
              if *q.offset(0) as libc::c_int != 0 && *q.offset(1) == 0 {
                if *(*ptr_to_globals).last_search_pattern.offset(0) != 0 {
                  *(*ptr_to_globals).last_search_pattern.offset(0) = c as libc::c_char
                }
                current_block = 7392824444931029276;
              } else if *q.offset(0) != 0 {
                free((*ptr_to_globals).last_search_pattern as *mut libc::c_void);
                (*ptr_to_globals).last_search_pattern = crate::libbb::xfuncs_printf::xstrdup(q);
                current_block = 7392824444931029276;
              } else {
                current_block = 15129665204879337069;
              }
            }
            16407828456666301883 => {
              if (*ptr_to_globals).last_forward_char == 0 {
                current_block = 15129665204879337069;
              } else {
                loop {
                  q = (*ptr_to_globals).dot.offset(-1);
                  while q >= (*ptr_to_globals).text
                    && *q as libc::c_int != '\n' as i32
                    && *q as libc::c_int != (*ptr_to_globals).last_forward_char
                  {
                    q = q.offset(-1)
                  }
                  if q >= (*ptr_to_globals).text
                    && *q as libc::c_int == (*ptr_to_globals).last_forward_char
                  {
                    (*ptr_to_globals).dot = q
                  }
                  (*ptr_to_globals).cmdcnt -= 1;
                  if !((*ptr_to_globals).cmdcnt > 0) {
                    break;
                  }
                }
                current_block = 15129665204879337069;
              }
            }
            9018432604062702004 => {
              q = (*ptr_to_globals).dot;
              while q < (*ptr_to_globals).end && *q as libc::c_int != '\n' as i32 {
                if !strchr(
                  b"()[]{}\x00" as *const u8 as *const libc::c_char,
                  *q as libc::c_int,
                )
                .is_null()
                {
                  p = find_pair(q, *q);
                  if p.is_null() {
                    indicate_error();
                  } else {
                    (*ptr_to_globals).dot = p
                  }
                  break;
                } else {
                  q = q.offset(1)
                }
              }
              if *q as libc::c_int == '\n' as i32 {
                indicate_error();
              }
              current_block = 15129665204879337069;
            }
            10247103787464459848 => {
              p = (*ptr_to_globals).reg[(*ptr_to_globals).YDreg as usize];
              if p.is_null() {
                status_line_bold(
                  b"Nothing in register %c\x00" as *const u8 as *const libc::c_char,
                  what_reg() as libc::c_int,
                );
              } else {
                if !strchr(p, '\n' as i32).is_null() {
                  if c == 'P' as i32 {
                    dot_begin();
                  }
                  if c == 'p' as i32 {
                    if end_line((*ptr_to_globals).dot) == (*ptr_to_globals).end.offset(-1) {
                      (*ptr_to_globals).dot = (*ptr_to_globals).end
                    } else {
                      dot_next();
                    }
                  }
                } else if c == 'p' as i32 {
                  dot_right();
                }
                string_insert((*ptr_to_globals).dot, p, 1i32);
                end_cmd_q();
              }
              current_block = 15129665204879337069;
            }
            15260732871948875843 => {
              c1 = (get_one_char() | 0x20i32) - 'a' as i32;
              if c1 as libc::c_uint <= 25i32 as libc::c_uint {
                (*ptr_to_globals).mark[c1 as usize] = (*ptr_to_globals).dot
              } else {
                indicate_error();
              }
              current_block = 15129665204879337069;
            }
            12738322036487086035 => {
              c1 = get_one_char() | 0x20i32;
              if (c1 - 'a' as i32) as libc::c_uint <= 25i32 as libc::c_uint {
                c1 = c1 - 'a' as i32;
                q = (*ptr_to_globals).mark[c1 as usize];
                if (*ptr_to_globals).text <= q && q < (*ptr_to_globals).end {
                  (*ptr_to_globals).dot = q;
                  dot_begin();
                  dot_skip_over_ws();
                }
              } else if c1 == '\'' as i32 {
                (*ptr_to_globals).dot = swap_context((*ptr_to_globals).dot);
                dot_begin();
                dot_skip_over_ws();
              } else {
                indicate_error();
              }
              current_block = 15129665204879337069;
            }
            13255096073384561358 => {
              c1 = (get_one_char() | 0x20i32) - 'a' as i32;
              if c1 as libc::c_uint <= 25i32 as libc::c_uint {
                (*ptr_to_globals).YDreg = c1 as smalluint
              } else {
                indicate_error();
              }
              current_block = 15129665204879337069;
            }
            10258711639984089377 => {
              if (*ptr_to_globals).cmd_mode as libc::c_int == 0 {
                indicate_error();
              }
              (*ptr_to_globals).cmd_mode = 0 as smallint;
              undo_queue_commit();
              end_cmd_q();
              (*ptr_to_globals).last_status_cksum = 0;
              current_block = 15129665204879337069;
            }
            11439127087547047736 => {
              buf[0] = c as libc::c_char;
              buf[1] = '\u{0}' as i32 as libc::c_char;
              not_implemented(buf.as_mut_ptr());
              end_cmd_q();
              current_block = 17440971994642376514;
            }
            7961798899781870241 => {
              dot_scroll(
                (*ptr_to_globals).rows.wrapping_sub(2i32 as libc::c_uint) as libc::c_int,
                -1i32,
              );
              current_block = 15129665204879337069;
            }
            9426343755402444879 => {
              dot_scroll(
                (*ptr_to_globals)
                  .rows
                  .wrapping_sub(2i32 as libc::c_uint)
                  .wrapping_div(2i32 as libc::c_uint) as libc::c_int,
                1i32,
              );
              current_block = 15129665204879337069;
            }
            13352459794680105913 => {
              dot_scroll(1i32, 1i32);
              current_block = 15129665204879337069;
            }
            14142272253464333006 => {
              dot_scroll(
                (*ptr_to_globals).rows.wrapping_sub(2i32 as libc::c_uint) as libc::c_int,
                1i32,
              );
              current_block = 15129665204879337069;
            }
            10758177197742640066 => {
              (*ptr_to_globals).last_status_cksum = 0;
              current_block = 15129665204879337069;
            }
            6152256259730122749 => {
              current_block = 7534742345255184552;
            }
            12883932598258173301 => {
              current_block = 8800996768013373992;
            }
            11242998110520238401 => {
              redraw(1i32);
              current_block = 15129665204879337069;
            }
            13619733043935729992 => {
              loop {
                dot_next();
                dot_skip_over_ws();
                (*ptr_to_globals).cmdcnt -= 1;
                if !((*ptr_to_globals).cmdcnt > 0) {
                  break;
                }
              }
              current_block = 15129665204879337069;
            }
            9339065157412720613 => {
              dot_scroll(
                (*ptr_to_globals)
                  .rows
                  .wrapping_sub(2i32 as libc::c_uint)
                  .wrapping_div(2i32 as libc::c_uint) as libc::c_int,
                -1i32,
              );
              current_block = 15129665204879337069;
            }
            11447082683497798022 => {
              dot_scroll(1i32, -1i32);
              current_block = 15129665204879337069;
            }
            5182000506326660482 => {
              current_block = 13993698454868426881;
            }
            1105010766850597332 => {
              if !(*ptr_to_globals).reg[27].is_null() {
                p = begin_line((*ptr_to_globals).dot);
                q = end_line((*ptr_to_globals).dot);
                p = text_hole_delete(p, q, 1i32);
                p = p.offset(string_insert(p, (*ptr_to_globals).reg[27], 2i32) as isize);
                (*ptr_to_globals).dot = p;
                dot_skip_over_ws();
              }
              current_block = 15129665204879337069;
            }
            8616046655533110204 => {
              undo_pop();
              current_block = 15129665204879337069;
            }
            5127767458142431603 => {
              loop {
                (*ptr_to_globals).dot = end_line((*ptr_to_globals).dot);
                (*ptr_to_globals).cmdcnt -= 1;
                if (*ptr_to_globals).cmdcnt <= 0 {
                  break;
                }
                dot_next();
              }
              current_block = 15129665204879337069;
            }
            222014967776118151 => {
              (*ptr_to_globals).last_forward_char = get_one_char();
              current_block = 7856905509180742666;
            }
            11209792479411604110 => {
              loop {
                dot_prev();
                dot_skip_over_ws();
                (*ptr_to_globals).cmdcnt -= 1;
                if !((*ptr_to_globals).cmdcnt > 0) {
                  break;
                }
              }
              current_block = 15129665204879337069;
            }
            3364823792826654116 => {
              if (*ptr_to_globals).lmc_len != 0 {
                (*ptr_to_globals).ioq_start = crate::libbb::xfuncs_printf::xstrndup(
                  (*ptr_to_globals).last_modifying_cmd.as_mut_ptr(),
                  (*ptr_to_globals).lmc_len,
                );
                (*ptr_to_globals).ioq = (*ptr_to_globals).ioq_start
              }
              current_block = 15129665204879337069;
            }
            18096603330221575131 => {
              current_block = 17498168302144015873;
            }
            16891123271837848903 => {
              dot_end();
              current_block = 1752638907092016026;
            }
            8517235759107662071 => {
              current_block = 5847749760081351726;
            }
            12525254419223051704 => {
              if (*ptr_to_globals).dot < (*ptr_to_globals).end.offset(-1) {
                (*ptr_to_globals).dot = yank_delete(
                  (*ptr_to_globals).dot,
                  (*ptr_to_globals).dot,
                  1i32,
                  YANKDEL as libc::c_int,
                  1i32,
                )
              }
              current_block = 15129665204879337069;
            }
            15232911949322867522 => {
              current_block = 17251831742223396249;
            }
            10863374208794025069 => {
              current_block = 1895262434596074581;
            }
            451126677064669119 => {
              loop {
                dot_prev();
                (*ptr_to_globals).dot = move_to_col(
                  (*ptr_to_globals).dot,
                  (*ptr_to_globals).ccol + (*ptr_to_globals).offset,
                );
                (*ptr_to_globals).cmdcnt -= 1;
                if !((*ptr_to_globals).cmdcnt > 0) {
                  break;
                }
              }
              current_block = 15129665204879337069;
            }
            4611735929166613116 => {
              loop {
                if bb_ascii_isalnum(*(*ptr_to_globals).dot as libc::c_uchar) != 0
                  || *(*ptr_to_globals).dot as libc::c_int == '_' as i32
                {
                  (*ptr_to_globals).dot = skip_thing(
                    (*ptr_to_globals).dot,
                    1i32,
                    FORWARD as libc::c_int,
                    S_END_ALNUM as libc::c_int,
                  )
                } else if *strchrnul(
                  b"!\"#$%&\'()*+,-./:;<=>?@[\\]^_`{|}~\x00" as *const u8 as *const libc::c_char,
                  *(*ptr_to_globals).dot as libc::c_int,
                )
                .offset(0)
                  != 0
                {
                  (*ptr_to_globals).dot = skip_thing(
                    (*ptr_to_globals).dot,
                    1i32,
                    FORWARD as libc::c_int,
                    S_END_PUNCT as libc::c_int,
                  )
                }
                if (*ptr_to_globals).dot < (*ptr_to_globals).end.offset(-1) {
                  (*ptr_to_globals).dot = (*ptr_to_globals).dot.offset(1)
                }
                if ({
                  let mut bb__isspace: libc::c_uchar =
                    (*(*ptr_to_globals).dot as libc::c_int - 9i32) as libc::c_uchar;
                  (bb__isspace as libc::c_int == ' ' as i32 - 9i32
                    || bb__isspace as libc::c_int <= 13i32 - 9i32) as libc::c_int
                }) != 0
                {
                  (*ptr_to_globals).dot = skip_thing(
                    (*ptr_to_globals).dot,
                    2i32,
                    FORWARD as libc::c_int,
                    S_OVER_WS as libc::c_int,
                  )
                }
                (*ptr_to_globals).cmdcnt -= 1;
                if !((*ptr_to_globals).cmdcnt > 0) {
                  break;
                }
              }
              current_block = 15129665204879337069;
            }
            4386451087681909888 => {
              (*ptr_to_globals).dot =
                move_to_col((*ptr_to_globals).dot, (*ptr_to_globals).cmdcnt - 1i32);
              current_block = 15129665204879337069;
            }
            1296397779060594135 => {
              dot_begin();
              current_block = 15129665204879337069;
            }
            _ => {}
          }
          match current_block {
            15129665204879337069 => {}
            8629930936610358348 => {}
            _ => {
              match current_block {
                17251831742223396249 => {
                  dir = 0;
                  if c == 'X' as i32 {
                    dir = -1i32
                  }
                  loop {
                    if *(*ptr_to_globals).dot.offset(dir as isize) as libc::c_int != '\n' as i32 {
                      if c == 'X' as i32 {
                        (*ptr_to_globals).dot = (*ptr_to_globals).dot.offset(-1)
                      }
                      (*ptr_to_globals).dot = yank_delete(
                        (*ptr_to_globals).dot,
                        (*ptr_to_globals).dot,
                        0,
                        YANKDEL as libc::c_int,
                        1i32,
                      )
                    }
                    (*ptr_to_globals).cmdcnt -= 1;
                    if !((*ptr_to_globals).cmdcnt > 0) {
                      break;
                    }
                  }
                  end_cmd_q();
                  if c == 's' as i32 {
                    current_block = 8629930936610358348;
                  } else {
                    current_block = 15129665204879337069;
                  }
                }
                2087484904894455135 => {
                  dot_end();
                  (*ptr_to_globals).dot =
                    char_insert((*ptr_to_globals).dot, '\n' as i32 as libc::c_char, 1i32);
                  current_block = 8629930936610358348;
                }
                11945623545738147997 => {
                  (*ptr_to_globals).dot = (*ptr_to_globals).end.offset(-1);
                  if (*ptr_to_globals).cmdcnt > 0 {
                    (*ptr_to_globals).dot = find_line((*ptr_to_globals).cmdcnt)
                  }
                  dot_skip_over_ws();
                  current_block = 15129665204879337069;
                }
                5847749760081351726 => {
                  dir = FORWARD as libc::c_int;
                  if c == 'B' as i32 {
                    dir = BACK as libc::c_int
                  }
                  loop {
                    if c == 'W' as i32
                      || ({
                        let mut bb__isspace: libc::c_uchar =
                          (*(*ptr_to_globals).dot.offset(dir as isize) as libc::c_int - 9i32)
                            as libc::c_uchar;
                        (bb__isspace as libc::c_int == ' ' as i32 - 9i32
                          || bb__isspace as libc::c_int <= 13i32 - 9i32)
                          as libc::c_int
                      }) != 0
                    {
                      (*ptr_to_globals).dot =
                        skip_thing((*ptr_to_globals).dot, 1i32, dir, S_TO_WS as libc::c_int);
                      (*ptr_to_globals).dot =
                        skip_thing((*ptr_to_globals).dot, 2i32, dir, S_OVER_WS as libc::c_int)
                    }
                    if c != 'W' as i32 {
                      (*ptr_to_globals).dot =
                        skip_thing((*ptr_to_globals).dot, 1i32, dir, S_BEFORE_WS as libc::c_int)
                    }
                    (*ptr_to_globals).cmdcnt -= 1;
                    if !((*ptr_to_globals).cmdcnt > 0) {
                      break;
                    }
                  }
                  current_block = 15129665204879337069;
                }
                17440971994642376514 => {
                  current_block = 15129665204879337069;
                }
                7534742345255184552 => {
                  current_block = 17247297260531395789;
                }
                8800996768013373992 => {
                  loop {
                    dot_next();
                    (*ptr_to_globals).dot = move_to_col(
                      (*ptr_to_globals).dot,
                      (*ptr_to_globals).ccol + (*ptr_to_globals).offset,
                    );
                    (*ptr_to_globals).cmdcnt -= 1;
                    if !((*ptr_to_globals).cmdcnt > 0) {
                      break;
                    }
                  }
                  current_block = 15129665204879337069;
                }
                13993698454868426881 => {
                  loop {
                    dot_right();
                    (*ptr_to_globals).cmdcnt -= 1;
                    if !((*ptr_to_globals).cmdcnt > 0) {
                      break;
                    }
                  }
                  current_block = 15129665204879337069;
                }
                7856905509180742666 => {
                  while !((*ptr_to_globals).last_forward_char == 0) {
                    q = (*ptr_to_globals).dot.offset(1);
                    while q < (*ptr_to_globals).end.offset(-1)
                      && *q as libc::c_int != '\n' as i32
                      && *q as libc::c_int != (*ptr_to_globals).last_forward_char
                    {
                      q = q.offset(1)
                    }
                    if *q as libc::c_int == (*ptr_to_globals).last_forward_char {
                      (*ptr_to_globals).dot = q
                    }
                    (*ptr_to_globals).cmdcnt -= 1;
                    if !((*ptr_to_globals).cmdcnt > 0) {
                      break;
                    }
                  }
                  current_block = 15129665204879337069;
                }
                17498168302144015873 => {
                  current_block = 8681395796513813967;
                }
                1752638907092016026 => {
                  if *(*ptr_to_globals).dot as libc::c_int != '\n' as i32 {
                    (*ptr_to_globals).dot = (*ptr_to_globals).dot.offset(1)
                  }
                  current_block = 8629930936610358348;
                }
                3268579060917229304 => {
                  current_block = 8629930936610358348;
                }
                1895262434596074581 => {
                  current_block = 8908416993177701018;
                }
                _ => {}
              }
              match current_block {
                8629930936610358348 => {}
                15129665204879337069 => {}
                _ => {
                  match current_block {
                    17247297260531395789 => {
                      loop {
                        dot_left();
                        (*ptr_to_globals).cmdcnt -= 1;
                        if !((*ptr_to_globals).cmdcnt > 0) {
                          break;
                        }
                      }
                      current_block = 15129665204879337069;
                    }
                    8681395796513813967 => {
                      current_block = 5591548203144509315;
                    }
                    8908416993177701018 => {
                      current_block = 16124761010012532485;
                    }
                    _ => {}
                  }
                  match current_block {
                    15129665204879337069 => {}
                    _ => {
                      match current_block {
                        16124761010012532485 => {
                          let mut yf: libc::c_int = 0;
                          let mut ml: libc::c_int = 0;
                          let mut whole: libc::c_int = 0;
                          yf = YANKDEL as libc::c_int;
                          if c == 'y' as i32 || c == 'Y' as i32 {
                            yf = YANKONLY as libc::c_int
                          }
                          c1 = 'y' as i32;
                          if c != 'Y' as i32 {
                            c1 = get_one_char()
                          }
                          ml = find_range(&mut p, &mut q, c1 as libc::c_char);
                          place_cursor(0i32, 0);
                          if c1 == 27i32 {
                            c1 = 27i32;
                            c = c1
                          } else if !strchr(b"wW\x00" as *const u8 as *const libc::c_char, c1)
                            .is_null()
                          {
                            ml = 0;
                            if c == 'c' as i32 {
                              while ({
                                let mut bb__isspace: libc::c_uchar =
                                  (*q as libc::c_int - 9i32) as libc::c_uchar;
                                (bb__isspace as libc::c_int == ' ' as i32 - 9i32
                                  || bb__isspace as libc::c_int <= 13i32 - 9i32)
                                  as libc::c_int
                              }) != 0
                                && q > p
                              {
                                q = q.offset(-1)
                              }
                            }
                            (*ptr_to_globals).dot = yank_delete(p, q, ml, yf, 1i32)
                          } else if !strchr(
                            b"^0bBeEft%$ lh\x08\x7f\x00" as *const u8 as *const libc::c_char,
                            c1,
                          )
                          .is_null()
                          {
                            (*ptr_to_globals).dot = yank_delete(p, q, ml, yf, 1i32)
                          } else if !strchr(
                            b"cdykjGHL+-{}\r\n\x00" as *const u8 as *const libc::c_char,
                            c1,
                          )
                          .is_null()
                          {
                            (*ptr_to_globals).dot = yank_delete(p, q, ml, yf, 1i32);
                            whole = 1i32
                          } else {
                            c1 = 27i32;
                            c = c1;
                            ml = 0;
                            indicate_error();
                          }
                          if ml != 0 && whole != 0 {
                            if c == 'c' as i32 {
                              (*ptr_to_globals).dot = char_insert(
                                (*ptr_to_globals).dot,
                                '\n' as i32 as libc::c_char,
                                2i32,
                              );
                              if whole != 0
                                && (*ptr_to_globals).dot != (*ptr_to_globals).end.offset(-1)
                              {
                                dot_prev();
                              }
                            } else if c == 'd' as i32 {
                              dot_begin();
                              dot_skip_over_ws();
                            }
                          }
                          if c1 != 27i32 {
                            if c == 'c' as i32 {
                              strcpy(
                                buf.as_mut_ptr(),
                                b"Change\x00" as *const u8 as *const libc::c_char,
                              );
                              current_block = 8629930936610358348;
                            } else {
                              if c == 'd' as i32 {
                                strcpy(
                                  buf.as_mut_ptr(),
                                  b"Delete\x00" as *const u8 as *const libc::c_char,
                                );
                              }
                              if c == 'y' as i32 || c == 'Y' as i32 {
                                strcpy(
                                  buf.as_mut_ptr(),
                                  b"Yank\x00" as *const u8 as *const libc::c_char,
                                );
                              }
                              p = (*ptr_to_globals).reg[(*ptr_to_globals).YDreg as usize];
                              q = p.offset(strlen(p) as isize);
                              cnt = 0;
                              while p <= q {
                                if *p as libc::c_int == '\n' as i32 {
                                  cnt += 1
                                }
                                p = p.offset(1)
                              }
                              status_line(
                                b"%s %u lines (%u chars) using [%c]\x00" as *const u8
                                  as *const libc::c_char,
                                buf.as_mut_ptr(),
                                cnt,
                                strlen((*ptr_to_globals).reg[(*ptr_to_globals).YDreg as usize])
                                  as libc::c_uint,
                                what_reg() as libc::c_int,
                              );
                              end_cmd_q();
                              current_block = 15129665204879337069;
                            }
                          } else {
                            current_block = 15129665204879337069;
                          }
                        }
                        5591548203144509315 => {
                          current_block = 2636677179867529885;
                        }
                        _ => {}
                      }
                      match current_block {
                        15129665204879337069 => {}
                        8629930936610358348 => {}
                        _ => {
                          match current_block {
                            2636677179867529885 => {
                              current_block = 12309206730560524281;
                            }
                            _ => {}
                          }
                          match current_block {
                            12309206730560524281 => {
                              current_block = 3325768110057758661;
                            }
                            _ => {}
                          }
                          match current_block {
                            3325768110057758661 => {
                              current_block = 14815832896553429982;
                            }
                            _ => {}
                          }
                          match current_block {
                            14815832896553429982 => {
                              current_block = 10731695520297161438;
                            }
                            _ => {}
                          }
                          match current_block {
                            10731695520297161438 => {
                              if c == '0' as i32 && (*ptr_to_globals).cmdcnt < 1i32 {
                                dot_begin();
                              } else {
                                (*ptr_to_globals).cmdcnt =
                                  (*ptr_to_globals).cmdcnt * 10i32 + (c - '0' as i32)
                              }
                              current_block = 15129665204879337069;
                            }
                            _ => {}
                          }
                          match current_block {
                            15129665204879337069 => {}
                            _ => {
                              loop {
                                match current_block {
                                  16813369756331276724 => {
                                    msg = std::ptr::null();
                                    current_block = 7392824444931029276;
                                  }
                                  7392824444931029276 => {
                                    dir = FORWARD as libc::c_int;
                                    p = (*ptr_to_globals).dot.offset(1);
                                    if *(*ptr_to_globals).last_search_pattern.offset(0)
                                      as libc::c_int
                                      == '?' as i32
                                    {
                                      dir = BACK as libc::c_int;
                                      p = (*ptr_to_globals).dot.offset(-1)
                                    }
                                    current_block = 4166979493554389389;
                                  }
                                  _ => {
                                    q = char_search(
                                      p,
                                      (*ptr_to_globals).last_search_pattern.offset(1),
                                      dir << 1i32 | FULL as libc::c_int,
                                    );
                                    if !q.is_null() {
                                      (*ptr_to_globals).dot = q;
                                      msg = std::ptr::null()
                                    } else {
                                      p = (*ptr_to_globals).text;
                                      if dir == BACK as libc::c_int {
                                        p = (*ptr_to_globals).end.offset(-1)
                                      }
                                      q = char_search(
                                        p,
                                        (*ptr_to_globals).last_search_pattern.offset(1),
                                        dir << 1i32 | FULL as libc::c_int,
                                      );
                                      if !q.is_null() {
                                        (*ptr_to_globals).dot = q;
                                        msg = b"search hit BOTTOM, continuing at TOP\x00"
                                          as *const u8
                                          as *const libc::c_char;
                                        if dir == BACK as libc::c_int {
                                          msg = b"search hit TOP, continuing at BOTTOM\x00"
                                            as *const u8
                                            as *const libc::c_char
                                        }
                                      } else {
                                        msg = b"Pattern not found\x00" as *const u8
                                          as *const libc::c_char
                                      }
                                    }
                                    if !msg.is_null() {
                                      status_line_bold(
                                        b"%s\x00" as *const u8 as *const libc::c_char,
                                        msg,
                                      );
                                    }
                                    (*ptr_to_globals).cmdcnt -= 1;
                                    if (*ptr_to_globals).cmdcnt > 0 {
                                      current_block = 16813369756331276724;
                                    } else {
                                      break;
                                    }
                                  }
                                }
                              }
                              current_block = 15129665204879337069;
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
        119 => {
          current_block = 4611735929166613116;
          match current_block {
            16992905640583886232 => {
              loop {
                if (*(*ptr_to_globals).dot as libc::c_int - 'a' as i32) as libc::c_uchar
                  as libc::c_int
                  <= 'z' as i32 - 'a' as i32
                {
                  undo_push(
                    (*ptr_to_globals).dot,
                    1i32 as libc::c_uint,
                    1i32 as libc::c_uchar,
                  );
                  *(*ptr_to_globals).dot =
                    bb_ascii_toupper(*(*ptr_to_globals).dot as libc::c_uchar) as libc::c_char;
                  undo_push(
                    (*ptr_to_globals).dot,
                    1i32 as libc::c_uint,
                    2i32 as libc::c_uchar,
                  );
                } else if (*(*ptr_to_globals).dot as libc::c_int - 'A' as i32) as libc::c_uchar
                  as libc::c_int
                  <= 'Z' as i32 - 'A' as i32
                {
                  undo_push(
                    (*ptr_to_globals).dot,
                    1i32 as libc::c_uint,
                    1i32 as libc::c_uchar,
                  );
                  *(*ptr_to_globals).dot =
                    bb_ascii_tolower(*(*ptr_to_globals).dot as libc::c_uchar) as libc::c_char;
                  undo_push(
                    (*ptr_to_globals).dot,
                    1i32 as libc::c_uint,
                    2i32 as libc::c_uchar,
                  );
                }
                dot_right();
                (*ptr_to_globals).cmdcnt -= 1;
                if !((*ptr_to_globals).cmdcnt > 0) {
                  break;
                }
              }
              end_cmd_q();
              current_block = 15129665204879337069;
            }
            8729655159604064397 => {
              c1 = get_one_char();
              cnt = 0;
              if c1 == '.' as i32 {
                cnt = (*ptr_to_globals)
                  .rows
                  .wrapping_sub(2i32 as libc::c_uint)
                  .wrapping_div(2i32 as libc::c_uint) as libc::c_int
              }
              if c1 == '-' as i32 {
                cnt = (*ptr_to_globals).rows.wrapping_sub(2i32 as libc::c_uint) as libc::c_int
              }
              (*ptr_to_globals).screenbegin = begin_line((*ptr_to_globals).dot);
              dot_scroll(cnt, -1i32);
              current_block = 15129665204879337069;
            }
            15899500648299942075 => {
              (*ptr_to_globals).last_forward_char = get_one_char();
              do_cmd(';' as i32);
              if *(*ptr_to_globals).dot as libc::c_int == (*ptr_to_globals).last_forward_char {
                dot_left();
              }
              (*ptr_to_globals).last_forward_char = 0;
              current_block = 15129665204879337069;
            }
            9051390181078481641 => {
              c1 = get_one_char();
              if *(*ptr_to_globals).dot as libc::c_int != '\n' as i32 {
                (*ptr_to_globals).dot =
                  text_hole_delete((*ptr_to_globals).dot, (*ptr_to_globals).dot, 1i32);
                (*ptr_to_globals).dot =
                  char_insert((*ptr_to_globals).dot, c1 as libc::c_char, 2i32);
                dot_left();
              }
              end_cmd_q();
              current_block = 15129665204879337069;
            }
            877115918601926659 => {
              dir = FORWARD as libc::c_int;
              if c == 'b' as i32 {
                dir = BACK as libc::c_int
              }
              while !((*ptr_to_globals).dot.offset(dir as isize) < (*ptr_to_globals).text
                || (*ptr_to_globals).dot.offset(dir as isize) > (*ptr_to_globals).end.offset(-1))
              {
                (*ptr_to_globals).dot = (*ptr_to_globals).dot.offset(dir as isize);
                if ({
                  let mut bb__isspace: libc::c_uchar =
                    (*(*ptr_to_globals).dot as libc::c_int - 9i32) as libc::c_uchar;
                  (bb__isspace as libc::c_int == ' ' as i32 - 9i32
                    || bb__isspace as libc::c_int <= 13i32 - 9i32) as libc::c_int
                }) != 0
                {
                  (*ptr_to_globals).dot = skip_thing(
                    (*ptr_to_globals).dot,
                    if c == 'e' as i32 { 2i32 } else { 1i32 },
                    dir,
                    S_OVER_WS as libc::c_int,
                  )
                }
                if bb_ascii_isalnum(*(*ptr_to_globals).dot as libc::c_uchar) != 0
                  || *(*ptr_to_globals).dot as libc::c_int == '_' as i32
                {
                  (*ptr_to_globals).dot =
                    skip_thing((*ptr_to_globals).dot, 1i32, dir, S_END_ALNUM as libc::c_int)
                } else if *strchrnul(
                  b"!\"#$%&\'()*+,-./:;<=>?@[\\]^_`{|}~\x00" as *const u8 as *const libc::c_char,
                  *(*ptr_to_globals).dot as libc::c_int,
                )
                .offset(0)
                  != 0
                {
                  (*ptr_to_globals).dot =
                    skip_thing((*ptr_to_globals).dot, 1i32, dir, S_END_PUNCT as libc::c_int)
                }
                (*ptr_to_globals).cmdcnt -= 1;
                if !((*ptr_to_globals).cmdcnt > 0) {
                  break;
                }
              }
              current_block = 15129665204879337069;
            }
            1085022737867179637 => {
              dot_begin();
              dot_skip_over_ws();
              current_block = 15129665204879337069;
            }
            3113147720494587438 => {
              c1 = get_one_char();
              if c1 != 'Z' as i32 {
                indicate_error();
              } else if (*ptr_to_globals).modified_count != 0 {
                if 1i32 != 0 && (*ptr_to_globals).readonly_mode as libc::c_int != 0 {
                  status_line_bold(
                    b"\'%s\' is read only\x00" as *const u8 as *const libc::c_char,
                    (*ptr_to_globals).current_filename,
                  );
                } else {
                  cnt = file_write(
                    (*ptr_to_globals).current_filename,
                    (*ptr_to_globals).text,
                    (*ptr_to_globals).end.offset(-1),
                  );
                  if cnt < 0 {
                    if cnt == -1i32 {
                      status_line_bold(b"Write error: %m\x00" as *const u8 as *const libc::c_char);
                    }
                  } else if cnt as libc::c_long
                    == (*ptr_to_globals)
                      .end
                      .offset(-1)
                      .wrapping_offset_from((*ptr_to_globals).text)
                      as libc::c_long
                      + 1
                  {
                    (*ptr_to_globals).editing = 0 as smallint
                  }
                }
              } else {
                (*ptr_to_globals).editing = 0 as smallint
              }
              current_block = 15129665204879337069;
            }
            12960118908218882441 => {
              p = begin_line((*ptr_to_globals).dot);
              if *p.offset(-1i32 as isize) as libc::c_int == '\n' as i32 {
                dot_prev();
                current_block = 2087484904894455135;
              } else {
                dot_begin();
                (*ptr_to_globals).dot =
                  char_insert((*ptr_to_globals).dot, '\n' as i32 as libc::c_char, 1i32);
                dot_prev();
                current_block = 8629930936610358348;
              }
            }
            8720450212473544924 => {
              (*ptr_to_globals).dot = (*ptr_to_globals).screenbegin;
              cnt = 0;
              while (cnt as libc::c_uint)
                < (*ptr_to_globals)
                  .rows
                  .wrapping_sub(1i32 as libc::c_uint)
                  .wrapping_div(2i32 as libc::c_uint)
              {
                (*ptr_to_globals).dot = next_line((*ptr_to_globals).dot);
                cnt += 1
              }
              current_block = 15129665204879337069;
            }
            13015277209715431090 => {
              (*ptr_to_globals).dot = end_screen();
              if (*ptr_to_globals).cmdcnt as libc::c_uint
                > (*ptr_to_globals).rows.wrapping_sub(1i32 as libc::c_uint)
              {
                (*ptr_to_globals).cmdcnt =
                  (*ptr_to_globals).rows.wrapping_sub(1i32 as libc::c_uint) as libc::c_int
              }
              (*ptr_to_globals).cmdcnt -= 1;
              if (*ptr_to_globals).cmdcnt > 0 {
                do_cmd('-' as i32);
              }
              dot_begin();
              dot_skip_over_ws();
              current_block = 15129665204879337069;
            }
            9800435767766781385 => {
              loop {
                dot_end();
                if (*ptr_to_globals).dot < (*ptr_to_globals).end.offset(-1) {
                  undo_push(
                    (*ptr_to_globals).dot,
                    1i32 as libc::c_uint,
                    1i32 as libc::c_uchar,
                  );
                  let fresh15 = (*ptr_to_globals).dot;
                  (*ptr_to_globals).dot = (*ptr_to_globals).dot.offset(1);
                  *fresh15 = ' ' as i32 as libc::c_char;
                  undo_push(
                    (*ptr_to_globals).dot.offset(-1),
                    1i32 as libc::c_uint,
                    2i32 as libc::c_uchar,
                  );
                  while ({
                    let mut bb__isblank: libc::c_uchar = *(*ptr_to_globals).dot as libc::c_uchar;
                    (bb__isblank as libc::c_int == ' ' as i32
                      || bb__isblank as libc::c_int == '\t' as i32)
                      as libc::c_int
                  }) != 0
                  {
                    text_hole_delete((*ptr_to_globals).dot, (*ptr_to_globals).dot, 2i32);
                  }
                }
                (*ptr_to_globals).cmdcnt -= 1;
                if !((*ptr_to_globals).cmdcnt > 0) {
                  break;
                }
              }
              end_cmd_q();
              current_block = 15129665204879337069;
            }
            3432363526595694666 => {
              dot_begin();
              dot_skip_over_ws();
              current_block = 3268579060917229304;
            }
            3494829253343353619 => {
              (*ptr_to_globals).dot = (*ptr_to_globals).screenbegin;
              if (*ptr_to_globals).cmdcnt as libc::c_uint
                > (*ptr_to_globals).rows.wrapping_sub(1i32 as libc::c_uint)
              {
                (*ptr_to_globals).cmdcnt =
                  (*ptr_to_globals).rows.wrapping_sub(1i32 as libc::c_uint) as libc::c_int
              }
              (*ptr_to_globals).cmdcnt -= 1;
              if (*ptr_to_globals).cmdcnt > 0 {
                do_cmd('+' as i32);
              }
              dot_skip_over_ws();
              current_block = 15129665204879337069;
            }
            17973101765331640574 => {
              c1 = get_one_char();
              if c1 != 'g' as i32 {
                buf[0] = 'g' as i32 as libc::c_char;
                buf[1] = if c1 >= 0 { c1 } else { '*' as i32 } as libc::c_char;
                buf[2] = '\u{0}' as i32 as libc::c_char;
                not_implemented(buf.as_mut_ptr());
                current_block = 15129665204879337069;
              } else {
                if (*ptr_to_globals).cmdcnt == 0 {
                  (*ptr_to_globals).cmdcnt = 1i32
                }
                current_block = 11945623545738147997;
              }
            }
            16546625800574160972 => {
              save_dot = (*ptr_to_globals).dot;
              (*ptr_to_globals).dot = dollar_line((*ptr_to_globals).dot);
              (*ptr_to_globals).dot = yank_delete(
                save_dot,
                (*ptr_to_globals).dot,
                0,
                YANKDEL as libc::c_int,
                1i32,
              );
              if c == 'C' as i32 {
                current_block = 8629930936610358348;
              } else {
                if c == 'D' as i32 {
                  end_cmd_q();
                }
                current_block = 15129665204879337069;
              }
            }
            11937696639986586685 => {
              cnt = count_lines((*ptr_to_globals).text, (*ptr_to_globals).dot);
              c1 = get_one_char();
              find_range(&mut p, &mut q, c1 as libc::c_char);
              yank_delete(p, q, 1i32, YANKONLY as libc::c_int, 0);
              p = begin_line(p);
              q = end_line(q);
              i = count_lines(p, q);
              while i > 0 {
                if c == '<' as i32 {
                  if *p as libc::c_int == '\t' as i32 {
                    text_hole_delete(p, p, 0);
                  } else if *p as libc::c_int == ' ' as i32 {
                    j = 0;
                    while *p as libc::c_int == ' ' as i32 && j < (*ptr_to_globals).tabstop {
                      text_hole_delete(p, p, 0);
                      j += 1
                    }
                  }
                } else if c == '>' as i32 {
                  char_insert(p, '\t' as i32 as libc::c_char, 1i32);
                }
                i -= 1;
                p = next_line(p)
              }
              (*ptr_to_globals).dot = find_line(cnt);
              dot_skip_over_ws();
              end_cmd_q();
              current_block = 15129665204879337069;
            }
            17725350714912028156 => {
              p = get_input_line(b":\x00" as *const u8 as *const libc::c_char);
              colon(p);
              current_block = 15129665204879337069;
            }
            14526470074083880812 => {
              q = char_search(
                (*ptr_to_globals).dot,
                b"\n\n\x00" as *const u8 as *const libc::c_char,
                (FORWARD as libc::c_int) << 1i32 | FULL as libc::c_int,
              );
              if !q.is_null() {
                (*ptr_to_globals).dot = next_line(q)
              }
              current_block = 15129665204879337069;
            }
            8893187391306414141 => {
              q = char_search(
                (*ptr_to_globals).dot,
                b"\n\n\x00" as *const u8 as *const libc::c_char,
                ((BACK as libc::c_int as libc::c_uint) << 1i32
                  | FULL as libc::c_int as libc::c_uint) as libc::c_int,
              );
              if !q.is_null() {
                (*ptr_to_globals).dot = next_line(q)
              }
              current_block = 15129665204879337069;
            }
            7021673758293221412 => {
              dir = BACK as libc::c_int;
              p = (*ptr_to_globals).dot.offset(-1);
              if *(*ptr_to_globals).last_search_pattern.offset(0) as libc::c_int == '?' as i32 {
                dir = FORWARD as libc::c_int;
                p = (*ptr_to_globals).dot.offset(1)
              }
              current_block = 4166979493554389389;
            }
            18374191879090272823 => {
              buf[0] = c as libc::c_char;
              buf[1] = '\u{0}' as i32 as libc::c_char;
              q = get_input_line(buf.as_mut_ptr());
              if *q.offset(0) as libc::c_int != 0 && *q.offset(1) == 0 {
                if *(*ptr_to_globals).last_search_pattern.offset(0) != 0 {
                  *(*ptr_to_globals).last_search_pattern.offset(0) = c as libc::c_char
                }
                current_block = 7392824444931029276;
              } else if *q.offset(0) != 0 {
                free((*ptr_to_globals).last_search_pattern as *mut libc::c_void);
                (*ptr_to_globals).last_search_pattern = crate::libbb::xfuncs_printf::xstrdup(q);
                current_block = 7392824444931029276;
              } else {
                current_block = 15129665204879337069;
              }
            }
            16407828456666301883 => {
              if (*ptr_to_globals).last_forward_char == 0 {
                current_block = 15129665204879337069;
              } else {
                loop {
                  q = (*ptr_to_globals).dot.offset(-1);
                  while q >= (*ptr_to_globals).text
                    && *q as libc::c_int != '\n' as i32
                    && *q as libc::c_int != (*ptr_to_globals).last_forward_char
                  {
                    q = q.offset(-1)
                  }
                  if q >= (*ptr_to_globals).text
                    && *q as libc::c_int == (*ptr_to_globals).last_forward_char
                  {
                    (*ptr_to_globals).dot = q
                  }
                  (*ptr_to_globals).cmdcnt -= 1;
                  if !((*ptr_to_globals).cmdcnt > 0) {
                    break;
                  }
                }
                current_block = 15129665204879337069;
              }
            }
            9018432604062702004 => {
              q = (*ptr_to_globals).dot;
              while q < (*ptr_to_globals).end && *q as libc::c_int != '\n' as i32 {
                if !strchr(
                  b"()[]{}\x00" as *const u8 as *const libc::c_char,
                  *q as libc::c_int,
                )
                .is_null()
                {
                  p = find_pair(q, *q);
                  if p.is_null() {
                    indicate_error();
                  } else {
                    (*ptr_to_globals).dot = p
                  }
                  break;
                } else {
                  q = q.offset(1)
                }
              }
              if *q as libc::c_int == '\n' as i32 {
                indicate_error();
              }
              current_block = 15129665204879337069;
            }
            10247103787464459848 => {
              p = (*ptr_to_globals).reg[(*ptr_to_globals).YDreg as usize];
              if p.is_null() {
                status_line_bold(
                  b"Nothing in register %c\x00" as *const u8 as *const libc::c_char,
                  what_reg() as libc::c_int,
                );
              } else {
                if !strchr(p, '\n' as i32).is_null() {
                  if c == 'P' as i32 {
                    dot_begin();
                  }
                  if c == 'p' as i32 {
                    if end_line((*ptr_to_globals).dot) == (*ptr_to_globals).end.offset(-1) {
                      (*ptr_to_globals).dot = (*ptr_to_globals).end
                    } else {
                      dot_next();
                    }
                  }
                } else if c == 'p' as i32 {
                  dot_right();
                }
                string_insert((*ptr_to_globals).dot, p, 1i32);
                end_cmd_q();
              }
              current_block = 15129665204879337069;
            }
            15260732871948875843 => {
              c1 = (get_one_char() | 0x20i32) - 'a' as i32;
              if c1 as libc::c_uint <= 25i32 as libc::c_uint {
                (*ptr_to_globals).mark[c1 as usize] = (*ptr_to_globals).dot
              } else {
                indicate_error();
              }
              current_block = 15129665204879337069;
            }
            12738322036487086035 => {
              c1 = get_one_char() | 0x20i32;
              if (c1 - 'a' as i32) as libc::c_uint <= 25i32 as libc::c_uint {
                c1 = c1 - 'a' as i32;
                q = (*ptr_to_globals).mark[c1 as usize];
                if (*ptr_to_globals).text <= q && q < (*ptr_to_globals).end {
                  (*ptr_to_globals).dot = q;
                  dot_begin();
                  dot_skip_over_ws();
                }
              } else if c1 == '\'' as i32 {
                (*ptr_to_globals).dot = swap_context((*ptr_to_globals).dot);
                dot_begin();
                dot_skip_over_ws();
              } else {
                indicate_error();
              }
              current_block = 15129665204879337069;
            }
            13255096073384561358 => {
              c1 = (get_one_char() | 0x20i32) - 'a' as i32;
              if c1 as libc::c_uint <= 25i32 as libc::c_uint {
                (*ptr_to_globals).YDreg = c1 as smalluint
              } else {
                indicate_error();
              }
              current_block = 15129665204879337069;
            }
            10258711639984089377 => {
              if (*ptr_to_globals).cmd_mode as libc::c_int == 0 {
                indicate_error();
              }
              (*ptr_to_globals).cmd_mode = 0 as smallint;
              undo_queue_commit();
              end_cmd_q();
              (*ptr_to_globals).last_status_cksum = 0;
              current_block = 15129665204879337069;
            }
            11439127087547047736 => {
              buf[0] = c as libc::c_char;
              buf[1] = '\u{0}' as i32 as libc::c_char;
              not_implemented(buf.as_mut_ptr());
              end_cmd_q();
              current_block = 17440971994642376514;
            }
            7961798899781870241 => {
              dot_scroll(
                (*ptr_to_globals).rows.wrapping_sub(2i32 as libc::c_uint) as libc::c_int,
                -1i32,
              );
              current_block = 15129665204879337069;
            }
            9426343755402444879 => {
              dot_scroll(
                (*ptr_to_globals)
                  .rows
                  .wrapping_sub(2i32 as libc::c_uint)
                  .wrapping_div(2i32 as libc::c_uint) as libc::c_int,
                1i32,
              );
              current_block = 15129665204879337069;
            }
            13352459794680105913 => {
              dot_scroll(1i32, 1i32);
              current_block = 15129665204879337069;
            }
            14142272253464333006 => {
              dot_scroll(
                (*ptr_to_globals).rows.wrapping_sub(2i32 as libc::c_uint) as libc::c_int,
                1i32,
              );
              current_block = 15129665204879337069;
            }
            10758177197742640066 => {
              (*ptr_to_globals).last_status_cksum = 0;
              current_block = 15129665204879337069;
            }
            6152256259730122749 => {
              current_block = 7534742345255184552;
            }
            12883932598258173301 => {
              current_block = 8800996768013373992;
            }
            11242998110520238401 => {
              redraw(1i32);
              current_block = 15129665204879337069;
            }
            13619733043935729992 => {
              loop {
                dot_next();
                dot_skip_over_ws();
                (*ptr_to_globals).cmdcnt -= 1;
                if !((*ptr_to_globals).cmdcnt > 0) {
                  break;
                }
              }
              current_block = 15129665204879337069;
            }
            9339065157412720613 => {
              dot_scroll(
                (*ptr_to_globals)
                  .rows
                  .wrapping_sub(2i32 as libc::c_uint)
                  .wrapping_div(2i32 as libc::c_uint) as libc::c_int,
                -1i32,
              );
              current_block = 15129665204879337069;
            }
            11447082683497798022 => {
              dot_scroll(1i32, -1i32);
              current_block = 15129665204879337069;
            }
            5182000506326660482 => {
              current_block = 13993698454868426881;
            }
            1105010766850597332 => {
              if !(*ptr_to_globals).reg[27].is_null() {
                p = begin_line((*ptr_to_globals).dot);
                q = end_line((*ptr_to_globals).dot);
                p = text_hole_delete(p, q, 1i32);
                p = p.offset(string_insert(p, (*ptr_to_globals).reg[27], 2i32) as isize);
                (*ptr_to_globals).dot = p;
                dot_skip_over_ws();
              }
              current_block = 15129665204879337069;
            }
            8616046655533110204 => {
              undo_pop();
              current_block = 15129665204879337069;
            }
            5127767458142431603 => {
              loop {
                (*ptr_to_globals).dot = end_line((*ptr_to_globals).dot);
                (*ptr_to_globals).cmdcnt -= 1;
                if (*ptr_to_globals).cmdcnt <= 0 {
                  break;
                }
                dot_next();
              }
              current_block = 15129665204879337069;
            }
            222014967776118151 => {
              (*ptr_to_globals).last_forward_char = get_one_char();
              current_block = 7856905509180742666;
            }
            11209792479411604110 => {
              loop {
                dot_prev();
                dot_skip_over_ws();
                (*ptr_to_globals).cmdcnt -= 1;
                if !((*ptr_to_globals).cmdcnt > 0) {
                  break;
                }
              }
              current_block = 15129665204879337069;
            }
            3364823792826654116 => {
              if (*ptr_to_globals).lmc_len != 0 {
                (*ptr_to_globals).ioq_start = crate::libbb::xfuncs_printf::xstrndup(
                  (*ptr_to_globals).last_modifying_cmd.as_mut_ptr(),
                  (*ptr_to_globals).lmc_len,
                );
                (*ptr_to_globals).ioq = (*ptr_to_globals).ioq_start
              }
              current_block = 15129665204879337069;
            }
            18096603330221575131 => {
              current_block = 17498168302144015873;
            }
            16891123271837848903 => {
              dot_end();
              current_block = 1752638907092016026;
            }
            8517235759107662071 => {
              current_block = 5847749760081351726;
            }
            12525254419223051704 => {
              if (*ptr_to_globals).dot < (*ptr_to_globals).end.offset(-1) {
                (*ptr_to_globals).dot = yank_delete(
                  (*ptr_to_globals).dot,
                  (*ptr_to_globals).dot,
                  1i32,
                  YANKDEL as libc::c_int,
                  1i32,
                )
              }
              current_block = 15129665204879337069;
            }
            15232911949322867522 => {
              current_block = 17251831742223396249;
            }
            10863374208794025069 => {
              current_block = 1895262434596074581;
            }
            451126677064669119 => {
              loop {
                dot_prev();
                (*ptr_to_globals).dot = move_to_col(
                  (*ptr_to_globals).dot,
                  (*ptr_to_globals).ccol + (*ptr_to_globals).offset,
                );
                (*ptr_to_globals).cmdcnt -= 1;
                if !((*ptr_to_globals).cmdcnt > 0) {
                  break;
                }
              }
              current_block = 15129665204879337069;
            }
            4611735929166613116 => {
              loop {
                if bb_ascii_isalnum(*(*ptr_to_globals).dot as libc::c_uchar) != 0
                  || *(*ptr_to_globals).dot as libc::c_int == '_' as i32
                {
                  (*ptr_to_globals).dot = skip_thing(
                    (*ptr_to_globals).dot,
                    1i32,
                    FORWARD as libc::c_int,
                    S_END_ALNUM as libc::c_int,
                  )
                } else if *strchrnul(
                  b"!\"#$%&\'()*+,-./:;<=>?@[\\]^_`{|}~\x00" as *const u8 as *const libc::c_char,
                  *(*ptr_to_globals).dot as libc::c_int,
                )
                .offset(0)
                  != 0
                {
                  (*ptr_to_globals).dot = skip_thing(
                    (*ptr_to_globals).dot,
                    1i32,
                    FORWARD as libc::c_int,
                    S_END_PUNCT as libc::c_int,
                  )
                }
                if (*ptr_to_globals).dot < (*ptr_to_globals).end.offset(-1) {
                  (*ptr_to_globals).dot = (*ptr_to_globals).dot.offset(1)
                }
                if ({
                  let mut bb__isspace: libc::c_uchar =
                    (*(*ptr_to_globals).dot as libc::c_int - 9i32) as libc::c_uchar;
                  (bb__isspace as libc::c_int == ' ' as i32 - 9i32
                    || bb__isspace as libc::c_int <= 13i32 - 9i32) as libc::c_int
                }) != 0
                {
                  (*ptr_to_globals).dot = skip_thing(
                    (*ptr_to_globals).dot,
                    2i32,
                    FORWARD as libc::c_int,
                    S_OVER_WS as libc::c_int,
                  )
                }
                (*ptr_to_globals).cmdcnt -= 1;
                if !((*ptr_to_globals).cmdcnt > 0) {
                  break;
                }
              }
              current_block = 15129665204879337069;
            }
            4386451087681909888 => {
              (*ptr_to_globals).dot =
                move_to_col((*ptr_to_globals).dot, (*ptr_to_globals).cmdcnt - 1i32);
              current_block = 15129665204879337069;
            }
            1296397779060594135 => {
              dot_begin();
              current_block = 15129665204879337069;
            }
            _ => {}
          }
          match current_block {
            15129665204879337069 => {}
            8629930936610358348 => {}
            _ => {
              match current_block {
                17251831742223396249 => {
                  dir = 0;
                  if c == 'X' as i32 {
                    dir = -1i32
                  }
                  loop {
                    if *(*ptr_to_globals).dot.offset(dir as isize) as libc::c_int != '\n' as i32 {
                      if c == 'X' as i32 {
                        (*ptr_to_globals).dot = (*ptr_to_globals).dot.offset(-1)
                      }
                      (*ptr_to_globals).dot = yank_delete(
                        (*ptr_to_globals).dot,
                        (*ptr_to_globals).dot,
                        0,
                        YANKDEL as libc::c_int,
                        1i32,
                      )
                    }
                    (*ptr_to_globals).cmdcnt -= 1;
                    if !((*ptr_to_globals).cmdcnt > 0) {
                      break;
                    }
                  }
                  end_cmd_q();
                  if c == 's' as i32 {
                    current_block = 8629930936610358348;
                  } else {
                    current_block = 15129665204879337069;
                  }
                }
                2087484904894455135 => {
                  dot_end();
                  (*ptr_to_globals).dot =
                    char_insert((*ptr_to_globals).dot, '\n' as i32 as libc::c_char, 1i32);
                  current_block = 8629930936610358348;
                }
                11945623545738147997 => {
                  (*ptr_to_globals).dot = (*ptr_to_globals).end.offset(-1);
                  if (*ptr_to_globals).cmdcnt > 0 {
                    (*ptr_to_globals).dot = find_line((*ptr_to_globals).cmdcnt)
                  }
                  dot_skip_over_ws();
                  current_block = 15129665204879337069;
                }
                5847749760081351726 => {
                  dir = FORWARD as libc::c_int;
                  if c == 'B' as i32 {
                    dir = BACK as libc::c_int
                  }
                  loop {
                    if c == 'W' as i32
                      || ({
                        let mut bb__isspace: libc::c_uchar =
                          (*(*ptr_to_globals).dot.offset(dir as isize) as libc::c_int - 9i32)
                            as libc::c_uchar;
                        (bb__isspace as libc::c_int == ' ' as i32 - 9i32
                          || bb__isspace as libc::c_int <= 13i32 - 9i32)
                          as libc::c_int
                      }) != 0
                    {
                      (*ptr_to_globals).dot =
                        skip_thing((*ptr_to_globals).dot, 1i32, dir, S_TO_WS as libc::c_int);
                      (*ptr_to_globals).dot =
                        skip_thing((*ptr_to_globals).dot, 2i32, dir, S_OVER_WS as libc::c_int)
                    }
                    if c != 'W' as i32 {
                      (*ptr_to_globals).dot =
                        skip_thing((*ptr_to_globals).dot, 1i32, dir, S_BEFORE_WS as libc::c_int)
                    }
                    (*ptr_to_globals).cmdcnt -= 1;
                    if !((*ptr_to_globals).cmdcnt > 0) {
                      break;
                    }
                  }
                  current_block = 15129665204879337069;
                }
                17440971994642376514 => {
                  current_block = 15129665204879337069;
                }
                7534742345255184552 => {
                  current_block = 17247297260531395789;
                }
                8800996768013373992 => {
                  loop {
                    dot_next();
                    (*ptr_to_globals).dot = move_to_col(
                      (*ptr_to_globals).dot,
                      (*ptr_to_globals).ccol + (*ptr_to_globals).offset,
                    );
                    (*ptr_to_globals).cmdcnt -= 1;
                    if !((*ptr_to_globals).cmdcnt > 0) {
                      break;
                    }
                  }
                  current_block = 15129665204879337069;
                }
                13993698454868426881 => {
                  loop {
                    dot_right();
                    (*ptr_to_globals).cmdcnt -= 1;
                    if !((*ptr_to_globals).cmdcnt > 0) {
                      break;
                    }
                  }
                  current_block = 15129665204879337069;
                }
                7856905509180742666 => {
                  while !((*ptr_to_globals).last_forward_char == 0) {
                    q = (*ptr_to_globals).dot.offset(1);
                    while q < (*ptr_to_globals).end.offset(-1)
                      && *q as libc::c_int != '\n' as i32
                      && *q as libc::c_int != (*ptr_to_globals).last_forward_char
                    {
                      q = q.offset(1)
                    }
                    if *q as libc::c_int == (*ptr_to_globals).last_forward_char {
                      (*ptr_to_globals).dot = q
                    }
                    (*ptr_to_globals).cmdcnt -= 1;
                    if !((*ptr_to_globals).cmdcnt > 0) {
                      break;
                    }
                  }
                  current_block = 15129665204879337069;
                }
                17498168302144015873 => {
                  current_block = 8681395796513813967;
                }
                1752638907092016026 => {
                  if *(*ptr_to_globals).dot as libc::c_int != '\n' as i32 {
                    (*ptr_to_globals).dot = (*ptr_to_globals).dot.offset(1)
                  }
                  current_block = 8629930936610358348;
                }
                3268579060917229304 => {
                  current_block = 8629930936610358348;
                }
                1895262434596074581 => {
                  current_block = 8908416993177701018;
                }
                _ => {}
              }
              match current_block {
                8629930936610358348 => {}
                15129665204879337069 => {}
                _ => {
                  match current_block {
                    17247297260531395789 => {
                      loop {
                        dot_left();
                        (*ptr_to_globals).cmdcnt -= 1;
                        if !((*ptr_to_globals).cmdcnt > 0) {
                          break;
                        }
                      }
                      current_block = 15129665204879337069;
                    }
                    8681395796513813967 => {
                      current_block = 5591548203144509315;
                    }
                    8908416993177701018 => {
                      current_block = 16124761010012532485;
                    }
                    _ => {}
                  }
                  match current_block {
                    15129665204879337069 => {}
                    _ => {
                      match current_block {
                        16124761010012532485 => {
                          let mut yf: libc::c_int = 0;
                          let mut ml: libc::c_int = 0;
                          let mut whole: libc::c_int = 0;
                          yf = YANKDEL as libc::c_int;
                          if c == 'y' as i32 || c == 'Y' as i32 {
                            yf = YANKONLY as libc::c_int
                          }
                          c1 = 'y' as i32;
                          if c != 'Y' as i32 {
                            c1 = get_one_char()
                          }
                          ml = find_range(&mut p, &mut q, c1 as libc::c_char);
                          place_cursor(0i32, 0);
                          if c1 == 27i32 {
                            c1 = 27i32;
                            c = c1
                          } else if !strchr(b"wW\x00" as *const u8 as *const libc::c_char, c1)
                            .is_null()
                          {
                            ml = 0;
                            if c == 'c' as i32 {
                              while ({
                                let mut bb__isspace: libc::c_uchar =
                                  (*q as libc::c_int - 9i32) as libc::c_uchar;
                                (bb__isspace as libc::c_int == ' ' as i32 - 9i32
                                  || bb__isspace as libc::c_int <= 13i32 - 9i32)
                                  as libc::c_int
                              }) != 0
                                && q > p
                              {
                                q = q.offset(-1)
                              }
                            }
                            (*ptr_to_globals).dot = yank_delete(p, q, ml, yf, 1i32)
                          } else if !strchr(
                            b"^0bBeEft%$ lh\x08\x7f\x00" as *const u8 as *const libc::c_char,
                            c1,
                          )
                          .is_null()
                          {
                            (*ptr_to_globals).dot = yank_delete(p, q, ml, yf, 1i32)
                          } else if !strchr(
                            b"cdykjGHL+-{}\r\n\x00" as *const u8 as *const libc::c_char,
                            c1,
                          )
                          .is_null()
                          {
                            (*ptr_to_globals).dot = yank_delete(p, q, ml, yf, 1i32);
                            whole = 1i32
                          } else {
                            c1 = 27i32;
                            c = c1;
                            ml = 0;
                            indicate_error();
                          }
                          if ml != 0 && whole != 0 {
                            if c == 'c' as i32 {
                              (*ptr_to_globals).dot = char_insert(
                                (*ptr_to_globals).dot,
                                '\n' as i32 as libc::c_char,
                                2i32,
                              );
                              if whole != 0
                                && (*ptr_to_globals).dot != (*ptr_to_globals).end.offset(-1)
                              {
                                dot_prev();
                              }
                            } else if c == 'd' as i32 {
                              dot_begin();
                              dot_skip_over_ws();
                            }
                          }
                          if c1 != 27i32 {
                            if c == 'c' as i32 {
                              strcpy(
                                buf.as_mut_ptr(),
                                b"Change\x00" as *const u8 as *const libc::c_char,
                              );
                              current_block = 8629930936610358348;
                            } else {
                              if c == 'd' as i32 {
                                strcpy(
                                  buf.as_mut_ptr(),
                                  b"Delete\x00" as *const u8 as *const libc::c_char,
                                );
                              }
                              if c == 'y' as i32 || c == 'Y' as i32 {
                                strcpy(
                                  buf.as_mut_ptr(),
                                  b"Yank\x00" as *const u8 as *const libc::c_char,
                                );
                              }
                              p = (*ptr_to_globals).reg[(*ptr_to_globals).YDreg as usize];
                              q = p.offset(strlen(p) as isize);
                              cnt = 0;
                              while p <= q {
                                if *p as libc::c_int == '\n' as i32 {
                                  cnt += 1
                                }
                                p = p.offset(1)
                              }
                              status_line(
                                b"%s %u lines (%u chars) using [%c]\x00" as *const u8
                                  as *const libc::c_char,
                                buf.as_mut_ptr(),
                                cnt,
                                strlen((*ptr_to_globals).reg[(*ptr_to_globals).YDreg as usize])
                                  as libc::c_uint,
                                what_reg() as libc::c_int,
                              );
                              end_cmd_q();
                              current_block = 15129665204879337069;
                            }
                          } else {
                            current_block = 15129665204879337069;
                          }
                        }
                        5591548203144509315 => {
                          current_block = 2636677179867529885;
                        }
                        _ => {}
                      }
                      match current_block {
                        15129665204879337069 => {}
                        8629930936610358348 => {}
                        _ => {
                          match current_block {
                            2636677179867529885 => {
                              current_block = 12309206730560524281;
                            }
                            _ => {}
                          }
                          match current_block {
                            12309206730560524281 => {
                              current_block = 3325768110057758661;
                            }
                            _ => {}
                          }
                          match current_block {
                            3325768110057758661 => {
                              current_block = 14815832896553429982;
                            }
                            _ => {}
                          }
                          match current_block {
                            14815832896553429982 => {
                              current_block = 10731695520297161438;
                            }
                            _ => {}
                          }
                          match current_block {
                            10731695520297161438 => {
                              if c == '0' as i32 && (*ptr_to_globals).cmdcnt < 1i32 {
                                dot_begin();
                              } else {
                                (*ptr_to_globals).cmdcnt =
                                  (*ptr_to_globals).cmdcnt * 10i32 + (c - '0' as i32)
                              }
                              current_block = 15129665204879337069;
                            }
                            _ => {}
                          }
                          match current_block {
                            15129665204879337069 => {}
                            _ => {
                              loop {
                                match current_block {
                                  16813369756331276724 => {
                                    msg = std::ptr::null();
                                    current_block = 7392824444931029276;
                                  }
                                  7392824444931029276 => {
                                    dir = FORWARD as libc::c_int;
                                    p = (*ptr_to_globals).dot.offset(1);
                                    if *(*ptr_to_globals).last_search_pattern.offset(0)
                                      as libc::c_int
                                      == '?' as i32
                                    {
                                      dir = BACK as libc::c_int;
                                      p = (*ptr_to_globals).dot.offset(-1)
                                    }
                                    current_block = 4166979493554389389;
                                  }
                                  _ => {
                                    q = char_search(
                                      p,
                                      (*ptr_to_globals).last_search_pattern.offset(1),
                                      dir << 1i32 | FULL as libc::c_int,
                                    );
                                    if !q.is_null() {
                                      (*ptr_to_globals).dot = q;
                                      msg = std::ptr::null()
                                    } else {
                                      p = (*ptr_to_globals).text;
                                      if dir == BACK as libc::c_int {
                                        p = (*ptr_to_globals).end.offset(-1)
                                      }
                                      q = char_search(
                                        p,
                                        (*ptr_to_globals).last_search_pattern.offset(1),
                                        dir << 1i32 | FULL as libc::c_int,
                                      );
                                      if !q.is_null() {
                                        (*ptr_to_globals).dot = q;
                                        msg = b"search hit BOTTOM, continuing at TOP\x00"
                                          as *const u8
                                          as *const libc::c_char;
                                        if dir == BACK as libc::c_int {
                                          msg = b"search hit TOP, continuing at BOTTOM\x00"
                                            as *const u8
                                            as *const libc::c_char
                                        }
                                      } else {
                                        msg = b"Pattern not found\x00" as *const u8
                                          as *const libc::c_char
                                      }
                                    }
                                    if !msg.is_null() {
                                      status_line_bold(
                                        b"%s\x00" as *const u8 as *const libc::c_char,
                                        msg,
                                      );
                                    }
                                    (*ptr_to_globals).cmdcnt -= 1;
                                    if (*ptr_to_globals).cmdcnt > 0 {
                                      current_block = 16813369756331276724;
                                    } else {
                                      break;
                                    }
                                  }
                                }
                              }
                              current_block = 15129665204879337069;
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
        122 => {
          current_block = 8729655159604064397;
          match current_block {
            16992905640583886232 => {
              loop {
                if (*(*ptr_to_globals).dot as libc::c_int - 'a' as i32) as libc::c_uchar
                  as libc::c_int
                  <= 'z' as i32 - 'a' as i32
                {
                  undo_push(
                    (*ptr_to_globals).dot,
                    1i32 as libc::c_uint,
                    1i32 as libc::c_uchar,
                  );
                  *(*ptr_to_globals).dot =
                    bb_ascii_toupper(*(*ptr_to_globals).dot as libc::c_uchar) as libc::c_char;
                  undo_push(
                    (*ptr_to_globals).dot,
                    1i32 as libc::c_uint,
                    2i32 as libc::c_uchar,
                  );
                } else if (*(*ptr_to_globals).dot as libc::c_int - 'A' as i32) as libc::c_uchar
                  as libc::c_int
                  <= 'Z' as i32 - 'A' as i32
                {
                  undo_push(
                    (*ptr_to_globals).dot,
                    1i32 as libc::c_uint,
                    1i32 as libc::c_uchar,
                  );
                  *(*ptr_to_globals).dot =
                    bb_ascii_tolower(*(*ptr_to_globals).dot as libc::c_uchar) as libc::c_char;
                  undo_push(
                    (*ptr_to_globals).dot,
                    1i32 as libc::c_uint,
                    2i32 as libc::c_uchar,
                  );
                }
                dot_right();
                (*ptr_to_globals).cmdcnt -= 1;
                if !((*ptr_to_globals).cmdcnt > 0) {
                  break;
                }
              }
              end_cmd_q();
              current_block = 15129665204879337069;
            }
            8729655159604064397 => {
              c1 = get_one_char();
              cnt = 0;
              if c1 == '.' as i32 {
                cnt = (*ptr_to_globals)
                  .rows
                  .wrapping_sub(2i32 as libc::c_uint)
                  .wrapping_div(2i32 as libc::c_uint) as libc::c_int
              }
              if c1 == '-' as i32 {
                cnt = (*ptr_to_globals).rows.wrapping_sub(2i32 as libc::c_uint) as libc::c_int
              }
              (*ptr_to_globals).screenbegin = begin_line((*ptr_to_globals).dot);
              dot_scroll(cnt, -1i32);
              current_block = 15129665204879337069;
            }
            15899500648299942075 => {
              (*ptr_to_globals).last_forward_char = get_one_char();
              do_cmd(';' as i32);
              if *(*ptr_to_globals).dot as libc::c_int == (*ptr_to_globals).last_forward_char {
                dot_left();
              }
              (*ptr_to_globals).last_forward_char = 0;
              current_block = 15129665204879337069;
            }
            9051390181078481641 => {
              c1 = get_one_char();
              if *(*ptr_to_globals).dot as libc::c_int != '\n' as i32 {
                (*ptr_to_globals).dot =
                  text_hole_delete((*ptr_to_globals).dot, (*ptr_to_globals).dot, 1i32);
                (*ptr_to_globals).dot =
                  char_insert((*ptr_to_globals).dot, c1 as libc::c_char, 2i32);
                dot_left();
              }
              end_cmd_q();
              current_block = 15129665204879337069;
            }
            877115918601926659 => {
              dir = FORWARD as libc::c_int;
              if c == 'b' as i32 {
                dir = BACK as libc::c_int
              }
              while !((*ptr_to_globals).dot.offset(dir as isize) < (*ptr_to_globals).text
                || (*ptr_to_globals).dot.offset(dir as isize) > (*ptr_to_globals).end.offset(-1))
              {
                (*ptr_to_globals).dot = (*ptr_to_globals).dot.offset(dir as isize);
                if ({
                  let mut bb__isspace: libc::c_uchar =
                    (*(*ptr_to_globals).dot as libc::c_int - 9i32) as libc::c_uchar;
                  (bb__isspace as libc::c_int == ' ' as i32 - 9i32
                    || bb__isspace as libc::c_int <= 13i32 - 9i32) as libc::c_int
                }) != 0
                {
                  (*ptr_to_globals).dot = skip_thing(
                    (*ptr_to_globals).dot,
                    if c == 'e' as i32 { 2i32 } else { 1i32 },
                    dir,
                    S_OVER_WS as libc::c_int,
                  )
                }
                if bb_ascii_isalnum(*(*ptr_to_globals).dot as libc::c_uchar) != 0
                  || *(*ptr_to_globals).dot as libc::c_int == '_' as i32
                {
                  (*ptr_to_globals).dot =
                    skip_thing((*ptr_to_globals).dot, 1i32, dir, S_END_ALNUM as libc::c_int)
                } else if *strchrnul(
                  b"!\"#$%&\'()*+,-./:;<=>?@[\\]^_`{|}~\x00" as *const u8 as *const libc::c_char,
                  *(*ptr_to_globals).dot as libc::c_int,
                )
                .offset(0)
                  != 0
                {
                  (*ptr_to_globals).dot =
                    skip_thing((*ptr_to_globals).dot, 1i32, dir, S_END_PUNCT as libc::c_int)
                }
                (*ptr_to_globals).cmdcnt -= 1;
                if !((*ptr_to_globals).cmdcnt > 0) {
                  break;
                }
              }
              current_block = 15129665204879337069;
            }
            1085022737867179637 => {
              dot_begin();
              dot_skip_over_ws();
              current_block = 15129665204879337069;
            }
            3113147720494587438 => {
              c1 = get_one_char();
              if c1 != 'Z' as i32 {
                indicate_error();
              } else if (*ptr_to_globals).modified_count != 0 {
                if 1i32 != 0 && (*ptr_to_globals).readonly_mode as libc::c_int != 0 {
                  status_line_bold(
                    b"\'%s\' is read only\x00" as *const u8 as *const libc::c_char,
                    (*ptr_to_globals).current_filename,
                  );
                } else {
                  cnt = file_write(
                    (*ptr_to_globals).current_filename,
                    (*ptr_to_globals).text,
                    (*ptr_to_globals).end.offset(-1),
                  );
                  if cnt < 0 {
                    if cnt == -1i32 {
                      status_line_bold(b"Write error: %m\x00" as *const u8 as *const libc::c_char);
                    }
                  } else if cnt as libc::c_long
                    == (*ptr_to_globals)
                      .end
                      .offset(-1)
                      .wrapping_offset_from((*ptr_to_globals).text)
                      as libc::c_long
                      + 1
                  {
                    (*ptr_to_globals).editing = 0 as smallint
                  }
                }
              } else {
                (*ptr_to_globals).editing = 0 as smallint
              }
              current_block = 15129665204879337069;
            }
            12960118908218882441 => {
              p = begin_line((*ptr_to_globals).dot);
              if *p.offset(-1i32 as isize) as libc::c_int == '\n' as i32 {
                dot_prev();
                current_block = 2087484904894455135;
              } else {
                dot_begin();
                (*ptr_to_globals).dot =
                  char_insert((*ptr_to_globals).dot, '\n' as i32 as libc::c_char, 1i32);
                dot_prev();
                current_block = 8629930936610358348;
              }
            }
            8720450212473544924 => {
              (*ptr_to_globals).dot = (*ptr_to_globals).screenbegin;
              cnt = 0;
              while (cnt as libc::c_uint)
                < (*ptr_to_globals)
                  .rows
                  .wrapping_sub(1i32 as libc::c_uint)
                  .wrapping_div(2i32 as libc::c_uint)
              {
                (*ptr_to_globals).dot = next_line((*ptr_to_globals).dot);
                cnt += 1
              }
              current_block = 15129665204879337069;
            }
            13015277209715431090 => {
              (*ptr_to_globals).dot = end_screen();
              if (*ptr_to_globals).cmdcnt as libc::c_uint
                > (*ptr_to_globals).rows.wrapping_sub(1i32 as libc::c_uint)
              {
                (*ptr_to_globals).cmdcnt =
                  (*ptr_to_globals).rows.wrapping_sub(1i32 as libc::c_uint) as libc::c_int
              }
              (*ptr_to_globals).cmdcnt -= 1;
              if (*ptr_to_globals).cmdcnt > 0 {
                do_cmd('-' as i32);
              }
              dot_begin();
              dot_skip_over_ws();
              current_block = 15129665204879337069;
            }
            9800435767766781385 => {
              loop {
                dot_end();
                if (*ptr_to_globals).dot < (*ptr_to_globals).end.offset(-1) {
                  undo_push(
                    (*ptr_to_globals).dot,
                    1i32 as libc::c_uint,
                    1i32 as libc::c_uchar,
                  );
                  let fresh15 = (*ptr_to_globals).dot;
                  (*ptr_to_globals).dot = (*ptr_to_globals).dot.offset(1);
                  *fresh15 = ' ' as i32 as libc::c_char;
                  undo_push(
                    (*ptr_to_globals).dot.offset(-1),
                    1i32 as libc::c_uint,
                    2i32 as libc::c_uchar,
                  );
                  while ({
                    let mut bb__isblank: libc::c_uchar = *(*ptr_to_globals).dot as libc::c_uchar;
                    (bb__isblank as libc::c_int == ' ' as i32
                      || bb__isblank as libc::c_int == '\t' as i32)
                      as libc::c_int
                  }) != 0
                  {
                    text_hole_delete((*ptr_to_globals).dot, (*ptr_to_globals).dot, 2i32);
                  }
                }
                (*ptr_to_globals).cmdcnt -= 1;
                if !((*ptr_to_globals).cmdcnt > 0) {
                  break;
                }
              }
              end_cmd_q();
              current_block = 15129665204879337069;
            }
            3432363526595694666 => {
              dot_begin();
              dot_skip_over_ws();
              current_block = 3268579060917229304;
            }
            3494829253343353619 => {
              (*ptr_to_globals).dot = (*ptr_to_globals).screenbegin;
              if (*ptr_to_globals).cmdcnt as libc::c_uint
                > (*ptr_to_globals).rows.wrapping_sub(1i32 as libc::c_uint)
              {
                (*ptr_to_globals).cmdcnt =
                  (*ptr_to_globals).rows.wrapping_sub(1i32 as libc::c_uint) as libc::c_int
              }
              (*ptr_to_globals).cmdcnt -= 1;
              if (*ptr_to_globals).cmdcnt > 0 {
                do_cmd('+' as i32);
              }
              dot_skip_over_ws();
              current_block = 15129665204879337069;
            }
            17973101765331640574 => {
              c1 = get_one_char();
              if c1 != 'g' as i32 {
                buf[0] = 'g' as i32 as libc::c_char;
                buf[1] = if c1 >= 0 { c1 } else { '*' as i32 } as libc::c_char;
                buf[2] = '\u{0}' as i32 as libc::c_char;
                not_implemented(buf.as_mut_ptr());
                current_block = 15129665204879337069;
              } else {
                if (*ptr_to_globals).cmdcnt == 0 {
                  (*ptr_to_globals).cmdcnt = 1i32
                }
                current_block = 11945623545738147997;
              }
            }
            16546625800574160972 => {
              save_dot = (*ptr_to_globals).dot;
              (*ptr_to_globals).dot = dollar_line((*ptr_to_globals).dot);
              (*ptr_to_globals).dot = yank_delete(
                save_dot,
                (*ptr_to_globals).dot,
                0,
                YANKDEL as libc::c_int,
                1i32,
              );
              if c == 'C' as i32 {
                current_block = 8629930936610358348;
              } else {
                if c == 'D' as i32 {
                  end_cmd_q();
                }
                current_block = 15129665204879337069;
              }
            }
            11937696639986586685 => {
              cnt = count_lines((*ptr_to_globals).text, (*ptr_to_globals).dot);
              c1 = get_one_char();
              find_range(&mut p, &mut q, c1 as libc::c_char);
              yank_delete(p, q, 1i32, YANKONLY as libc::c_int, 0);
              p = begin_line(p);
              q = end_line(q);
              i = count_lines(p, q);
              while i > 0 {
                if c == '<' as i32 {
                  if *p as libc::c_int == '\t' as i32 {
                    text_hole_delete(p, p, 0);
                  } else if *p as libc::c_int == ' ' as i32 {
                    j = 0;
                    while *p as libc::c_int == ' ' as i32 && j < (*ptr_to_globals).tabstop {
                      text_hole_delete(p, p, 0);
                      j += 1
                    }
                  }
                } else if c == '>' as i32 {
                  char_insert(p, '\t' as i32 as libc::c_char, 1i32);
                }
                i -= 1;
                p = next_line(p)
              }
              (*ptr_to_globals).dot = find_line(cnt);
              dot_skip_over_ws();
              end_cmd_q();
              current_block = 15129665204879337069;
            }
            17725350714912028156 => {
              p = get_input_line(b":\x00" as *const u8 as *const libc::c_char);
              colon(p);
              current_block = 15129665204879337069;
            }
            14526470074083880812 => {
              q = char_search(
                (*ptr_to_globals).dot,
                b"\n\n\x00" as *const u8 as *const libc::c_char,
                (FORWARD as libc::c_int) << 1i32 | FULL as libc::c_int,
              );
              if !q.is_null() {
                (*ptr_to_globals).dot = next_line(q)
              }
              current_block = 15129665204879337069;
            }
            8893187391306414141 => {
              q = char_search(
                (*ptr_to_globals).dot,
                b"\n\n\x00" as *const u8 as *const libc::c_char,
                ((BACK as libc::c_int as libc::c_uint) << 1i32
                  | FULL as libc::c_int as libc::c_uint) as libc::c_int,
              );
              if !q.is_null() {
                (*ptr_to_globals).dot = next_line(q)
              }
              current_block = 15129665204879337069;
            }
            7021673758293221412 => {
              dir = BACK as libc::c_int;
              p = (*ptr_to_globals).dot.offset(-1);
              if *(*ptr_to_globals).last_search_pattern.offset(0) as libc::c_int == '?' as i32 {
                dir = FORWARD as libc::c_int;
                p = (*ptr_to_globals).dot.offset(1)
              }
              current_block = 4166979493554389389;
            }
            18374191879090272823 => {
              buf[0] = c as libc::c_char;
              buf[1] = '\u{0}' as i32 as libc::c_char;
              q = get_input_line(buf.as_mut_ptr());
              if *q.offset(0) as libc::c_int != 0 && *q.offset(1) == 0 {
                if *(*ptr_to_globals).last_search_pattern.offset(0) != 0 {
                  *(*ptr_to_globals).last_search_pattern.offset(0) = c as libc::c_char
                }
                current_block = 7392824444931029276;
              } else if *q.offset(0) != 0 {
                free((*ptr_to_globals).last_search_pattern as *mut libc::c_void);
                (*ptr_to_globals).last_search_pattern = crate::libbb::xfuncs_printf::xstrdup(q);
                current_block = 7392824444931029276;
              } else {
                current_block = 15129665204879337069;
              }
            }
            16407828456666301883 => {
              if (*ptr_to_globals).last_forward_char == 0 {
                current_block = 15129665204879337069;
              } else {
                loop {
                  q = (*ptr_to_globals).dot.offset(-1);
                  while q >= (*ptr_to_globals).text
                    && *q as libc::c_int != '\n' as i32
                    && *q as libc::c_int != (*ptr_to_globals).last_forward_char
                  {
                    q = q.offset(-1)
                  }
                  if q >= (*ptr_to_globals).text
                    && *q as libc::c_int == (*ptr_to_globals).last_forward_char
                  {
                    (*ptr_to_globals).dot = q
                  }
                  (*ptr_to_globals).cmdcnt -= 1;
                  if !((*ptr_to_globals).cmdcnt > 0) {
                    break;
                  }
                }
                current_block = 15129665204879337069;
              }
            }
            9018432604062702004 => {
              q = (*ptr_to_globals).dot;
              while q < (*ptr_to_globals).end && *q as libc::c_int != '\n' as i32 {
                if !strchr(
                  b"()[]{}\x00" as *const u8 as *const libc::c_char,
                  *q as libc::c_int,
                )
                .is_null()
                {
                  p = find_pair(q, *q);
                  if p.is_null() {
                    indicate_error();
                  } else {
                    (*ptr_to_globals).dot = p
                  }
                  break;
                } else {
                  q = q.offset(1)
                }
              }
              if *q as libc::c_int == '\n' as i32 {
                indicate_error();
              }
              current_block = 15129665204879337069;
            }
            10247103787464459848 => {
              p = (*ptr_to_globals).reg[(*ptr_to_globals).YDreg as usize];
              if p.is_null() {
                status_line_bold(
                  b"Nothing in register %c\x00" as *const u8 as *const libc::c_char,
                  what_reg() as libc::c_int,
                );
              } else {
                if !strchr(p, '\n' as i32).is_null() {
                  if c == 'P' as i32 {
                    dot_begin();
                  }
                  if c == 'p' as i32 {
                    if end_line((*ptr_to_globals).dot) == (*ptr_to_globals).end.offset(-1) {
                      (*ptr_to_globals).dot = (*ptr_to_globals).end
                    } else {
                      dot_next();
                    }
                  }
                } else if c == 'p' as i32 {
                  dot_right();
                }
                string_insert((*ptr_to_globals).dot, p, 1i32);
                end_cmd_q();
              }
              current_block = 15129665204879337069;
            }
            15260732871948875843 => {
              c1 = (get_one_char() | 0x20i32) - 'a' as i32;
              if c1 as libc::c_uint <= 25i32 as libc::c_uint {
                (*ptr_to_globals).mark[c1 as usize] = (*ptr_to_globals).dot
              } else {
                indicate_error();
              }
              current_block = 15129665204879337069;
            }
            12738322036487086035 => {
              c1 = get_one_char() | 0x20i32;
              if (c1 - 'a' as i32) as libc::c_uint <= 25i32 as libc::c_uint {
                c1 = c1 - 'a' as i32;
                q = (*ptr_to_globals).mark[c1 as usize];
                if (*ptr_to_globals).text <= q && q < (*ptr_to_globals).end {
                  (*ptr_to_globals).dot = q;
                  dot_begin();
                  dot_skip_over_ws();
                }
              } else if c1 == '\'' as i32 {
                (*ptr_to_globals).dot = swap_context((*ptr_to_globals).dot);
                dot_begin();
                dot_skip_over_ws();
              } else {
                indicate_error();
              }
              current_block = 15129665204879337069;
            }
            13255096073384561358 => {
              c1 = (get_one_char() | 0x20i32) - 'a' as i32;
              if c1 as libc::c_uint <= 25i32 as libc::c_uint {
                (*ptr_to_globals).YDreg = c1 as smalluint
              } else {
                indicate_error();
              }
              current_block = 15129665204879337069;
            }
            10258711639984089377 => {
              if (*ptr_to_globals).cmd_mode as libc::c_int == 0 {
                indicate_error();
              }
              (*ptr_to_globals).cmd_mode = 0 as smallint;
              undo_queue_commit();
              end_cmd_q();
              (*ptr_to_globals).last_status_cksum = 0;
              current_block = 15129665204879337069;
            }
            11439127087547047736 => {
              buf[0] = c as libc::c_char;
              buf[1] = '\u{0}' as i32 as libc::c_char;
              not_implemented(buf.as_mut_ptr());
              end_cmd_q();
              current_block = 17440971994642376514;
            }
            7961798899781870241 => {
              dot_scroll(
                (*ptr_to_globals).rows.wrapping_sub(2i32 as libc::c_uint) as libc::c_int,
                -1i32,
              );
              current_block = 15129665204879337069;
            }
            9426343755402444879 => {
              dot_scroll(
                (*ptr_to_globals)
                  .rows
                  .wrapping_sub(2i32 as libc::c_uint)
                  .wrapping_div(2i32 as libc::c_uint) as libc::c_int,
                1i32,
              );
              current_block = 15129665204879337069;
            }
            13352459794680105913 => {
              dot_scroll(1i32, 1i32);
              current_block = 15129665204879337069;
            }
            14142272253464333006 => {
              dot_scroll(
                (*ptr_to_globals).rows.wrapping_sub(2i32 as libc::c_uint) as libc::c_int,
                1i32,
              );
              current_block = 15129665204879337069;
            }
            10758177197742640066 => {
              (*ptr_to_globals).last_status_cksum = 0;
              current_block = 15129665204879337069;
            }
            6152256259730122749 => {
              current_block = 7534742345255184552;
            }
            12883932598258173301 => {
              current_block = 8800996768013373992;
            }
            11242998110520238401 => {
              redraw(1i32);
              current_block = 15129665204879337069;
            }
            13619733043935729992 => {
              loop {
                dot_next();
                dot_skip_over_ws();
                (*ptr_to_globals).cmdcnt -= 1;
                if !((*ptr_to_globals).cmdcnt > 0) {
                  break;
                }
              }
              current_block = 15129665204879337069;
            }
            9339065157412720613 => {
              dot_scroll(
                (*ptr_to_globals)
                  .rows
                  .wrapping_sub(2i32 as libc::c_uint)
                  .wrapping_div(2i32 as libc::c_uint) as libc::c_int,
                -1i32,
              );
              current_block = 15129665204879337069;
            }
            11447082683497798022 => {
              dot_scroll(1i32, -1i32);
              current_block = 15129665204879337069;
            }
            5182000506326660482 => {
              current_block = 13993698454868426881;
            }
            1105010766850597332 => {
              if !(*ptr_to_globals).reg[27].is_null() {
                p = begin_line((*ptr_to_globals).dot);
                q = end_line((*ptr_to_globals).dot);
                p = text_hole_delete(p, q, 1i32);
                p = p.offset(string_insert(p, (*ptr_to_globals).reg[27], 2i32) as isize);
                (*ptr_to_globals).dot = p;
                dot_skip_over_ws();
              }
              current_block = 15129665204879337069;
            }
            8616046655533110204 => {
              undo_pop();
              current_block = 15129665204879337069;
            }
            5127767458142431603 => {
              loop {
                (*ptr_to_globals).dot = end_line((*ptr_to_globals).dot);
                (*ptr_to_globals).cmdcnt -= 1;
                if (*ptr_to_globals).cmdcnt <= 0 {
                  break;
                }
                dot_next();
              }
              current_block = 15129665204879337069;
            }
            222014967776118151 => {
              (*ptr_to_globals).last_forward_char = get_one_char();
              current_block = 7856905509180742666;
            }
            11209792479411604110 => {
              loop {
                dot_prev();
                dot_skip_over_ws();
                (*ptr_to_globals).cmdcnt -= 1;
                if !((*ptr_to_globals).cmdcnt > 0) {
                  break;
                }
              }
              current_block = 15129665204879337069;
            }
            3364823792826654116 => {
              if (*ptr_to_globals).lmc_len != 0 {
                (*ptr_to_globals).ioq_start = crate::libbb::xfuncs_printf::xstrndup(
                  (*ptr_to_globals).last_modifying_cmd.as_mut_ptr(),
                  (*ptr_to_globals).lmc_len,
                );
                (*ptr_to_globals).ioq = (*ptr_to_globals).ioq_start
              }
              current_block = 15129665204879337069;
            }
            18096603330221575131 => {
              current_block = 17498168302144015873;
            }
            16891123271837848903 => {
              dot_end();
              current_block = 1752638907092016026;
            }
            8517235759107662071 => {
              current_block = 5847749760081351726;
            }
            12525254419223051704 => {
              if (*ptr_to_globals).dot < (*ptr_to_globals).end.offset(-1) {
                (*ptr_to_globals).dot = yank_delete(
                  (*ptr_to_globals).dot,
                  (*ptr_to_globals).dot,
                  1i32,
                  YANKDEL as libc::c_int,
                  1i32,
                )
              }
              current_block = 15129665204879337069;
            }
            15232911949322867522 => {
              current_block = 17251831742223396249;
            }
            10863374208794025069 => {
              current_block = 1895262434596074581;
            }
            451126677064669119 => {
              loop {
                dot_prev();
                (*ptr_to_globals).dot = move_to_col(
                  (*ptr_to_globals).dot,
                  (*ptr_to_globals).ccol + (*ptr_to_globals).offset,
                );
                (*ptr_to_globals).cmdcnt -= 1;
                if !((*ptr_to_globals).cmdcnt > 0) {
                  break;
                }
              }
              current_block = 15129665204879337069;
            }
            4611735929166613116 => {
              loop {
                if bb_ascii_isalnum(*(*ptr_to_globals).dot as libc::c_uchar) != 0
                  || *(*ptr_to_globals).dot as libc::c_int == '_' as i32
                {
                  (*ptr_to_globals).dot = skip_thing(
                    (*ptr_to_globals).dot,
                    1i32,
                    FORWARD as libc::c_int,
                    S_END_ALNUM as libc::c_int,
                  )
                } else if *strchrnul(
                  b"!\"#$%&\'()*+,-./:;<=>?@[\\]^_`{|}~\x00" as *const u8 as *const libc::c_char,
                  *(*ptr_to_globals).dot as libc::c_int,
                )
                .offset(0)
                  != 0
                {
                  (*ptr_to_globals).dot = skip_thing(
                    (*ptr_to_globals).dot,
                    1i32,
                    FORWARD as libc::c_int,
                    S_END_PUNCT as libc::c_int,
                  )
                }
                if (*ptr_to_globals).dot < (*ptr_to_globals).end.offset(-1) {
                  (*ptr_to_globals).dot = (*ptr_to_globals).dot.offset(1)
                }
                if ({
                  let mut bb__isspace: libc::c_uchar =
                    (*(*ptr_to_globals).dot as libc::c_int - 9i32) as libc::c_uchar;
                  (bb__isspace as libc::c_int == ' ' as i32 - 9i32
                    || bb__isspace as libc::c_int <= 13i32 - 9i32) as libc::c_int
                }) != 0
                {
                  (*ptr_to_globals).dot = skip_thing(
                    (*ptr_to_globals).dot,
                    2i32,
                    FORWARD as libc::c_int,
                    S_OVER_WS as libc::c_int,
                  )
                }
                (*ptr_to_globals).cmdcnt -= 1;
                if !((*ptr_to_globals).cmdcnt > 0) {
                  break;
                }
              }
              current_block = 15129665204879337069;
            }
            4386451087681909888 => {
              (*ptr_to_globals).dot =
                move_to_col((*ptr_to_globals).dot, (*ptr_to_globals).cmdcnt - 1i32);
              current_block = 15129665204879337069;
            }
            1296397779060594135 => {
              dot_begin();
              current_block = 15129665204879337069;
            }
            _ => {}
          }
          match current_block {
            15129665204879337069 => {}
            8629930936610358348 => {}
            _ => {
              match current_block {
                17251831742223396249 => {
                  dir = 0;
                  if c == 'X' as i32 {
                    dir = -1i32
                  }
                  loop {
                    if *(*ptr_to_globals).dot.offset(dir as isize) as libc::c_int != '\n' as i32 {
                      if c == 'X' as i32 {
                        (*ptr_to_globals).dot = (*ptr_to_globals).dot.offset(-1)
                      }
                      (*ptr_to_globals).dot = yank_delete(
                        (*ptr_to_globals).dot,
                        (*ptr_to_globals).dot,
                        0,
                        YANKDEL as libc::c_int,
                        1i32,
                      )
                    }
                    (*ptr_to_globals).cmdcnt -= 1;
                    if !((*ptr_to_globals).cmdcnt > 0) {
                      break;
                    }
                  }
                  end_cmd_q();
                  if c == 's' as i32 {
                    current_block = 8629930936610358348;
                  } else {
                    current_block = 15129665204879337069;
                  }
                }
                2087484904894455135 => {
                  dot_end();
                  (*ptr_to_globals).dot =
                    char_insert((*ptr_to_globals).dot, '\n' as i32 as libc::c_char, 1i32);
                  current_block = 8629930936610358348;
                }
                11945623545738147997 => {
                  (*ptr_to_globals).dot = (*ptr_to_globals).end.offset(-1);
                  if (*ptr_to_globals).cmdcnt > 0 {
                    (*ptr_to_globals).dot = find_line((*ptr_to_globals).cmdcnt)
                  }
                  dot_skip_over_ws();
                  current_block = 15129665204879337069;
                }
                5847749760081351726 => {
                  dir = FORWARD as libc::c_int;
                  if c == 'B' as i32 {
                    dir = BACK as libc::c_int
                  }
                  loop {
                    if c == 'W' as i32
                      || ({
                        let mut bb__isspace: libc::c_uchar =
                          (*(*ptr_to_globals).dot.offset(dir as isize) as libc::c_int - 9i32)
                            as libc::c_uchar;
                        (bb__isspace as libc::c_int == ' ' as i32 - 9i32
                          || bb__isspace as libc::c_int <= 13i32 - 9i32)
                          as libc::c_int
                      }) != 0
                    {
                      (*ptr_to_globals).dot =
                        skip_thing((*ptr_to_globals).dot, 1i32, dir, S_TO_WS as libc::c_int);
                      (*ptr_to_globals).dot =
                        skip_thing((*ptr_to_globals).dot, 2i32, dir, S_OVER_WS as libc::c_int)
                    }
                    if c != 'W' as i32 {
                      (*ptr_to_globals).dot =
                        skip_thing((*ptr_to_globals).dot, 1i32, dir, S_BEFORE_WS as libc::c_int)
                    }
                    (*ptr_to_globals).cmdcnt -= 1;
                    if !((*ptr_to_globals).cmdcnt > 0) {
                      break;
                    }
                  }
                  current_block = 15129665204879337069;
                }
                17440971994642376514 => {
                  current_block = 15129665204879337069;
                }
                7534742345255184552 => {
                  current_block = 17247297260531395789;
                }
                8800996768013373992 => {
                  loop {
                    dot_next();
                    (*ptr_to_globals).dot = move_to_col(
                      (*ptr_to_globals).dot,
                      (*ptr_to_globals).ccol + (*ptr_to_globals).offset,
                    );
                    (*ptr_to_globals).cmdcnt -= 1;
                    if !((*ptr_to_globals).cmdcnt > 0) {
                      break;
                    }
                  }
                  current_block = 15129665204879337069;
                }
                13993698454868426881 => {
                  loop {
                    dot_right();
                    (*ptr_to_globals).cmdcnt -= 1;
                    if !((*ptr_to_globals).cmdcnt > 0) {
                      break;
                    }
                  }
                  current_block = 15129665204879337069;
                }
                7856905509180742666 => {
                  while !((*ptr_to_globals).last_forward_char == 0) {
                    q = (*ptr_to_globals).dot.offset(1);
                    while q < (*ptr_to_globals).end.offset(-1)
                      && *q as libc::c_int != '\n' as i32
                      && *q as libc::c_int != (*ptr_to_globals).last_forward_char
                    {
                      q = q.offset(1)
                    }
                    if *q as libc::c_int == (*ptr_to_globals).last_forward_char {
                      (*ptr_to_globals).dot = q
                    }
                    (*ptr_to_globals).cmdcnt -= 1;
                    if !((*ptr_to_globals).cmdcnt > 0) {
                      break;
                    }
                  }
                  current_block = 15129665204879337069;
                }
                17498168302144015873 => {
                  current_block = 8681395796513813967;
                }
                1752638907092016026 => {
                  if *(*ptr_to_globals).dot as libc::c_int != '\n' as i32 {
                    (*ptr_to_globals).dot = (*ptr_to_globals).dot.offset(1)
                  }
                  current_block = 8629930936610358348;
                }
                3268579060917229304 => {
                  current_block = 8629930936610358348;
                }
                1895262434596074581 => {
                  current_block = 8908416993177701018;
                }
                _ => {}
              }
              match current_block {
                8629930936610358348 => {}
                15129665204879337069 => {}
                _ => {
                  match current_block {
                    17247297260531395789 => {
                      loop {
                        dot_left();
                        (*ptr_to_globals).cmdcnt -= 1;
                        if !((*ptr_to_globals).cmdcnt > 0) {
                          break;
                        }
                      }
                      current_block = 15129665204879337069;
                    }
                    8681395796513813967 => {
                      current_block = 5591548203144509315;
                    }
                    8908416993177701018 => {
                      current_block = 16124761010012532485;
                    }
                    _ => {}
                  }
                  match current_block {
                    15129665204879337069 => {}
                    _ => {
                      match current_block {
                        16124761010012532485 => {
                          let mut yf: libc::c_int = 0;
                          let mut ml: libc::c_int = 0;
                          let mut whole: libc::c_int = 0;
                          yf = YANKDEL as libc::c_int;
                          if c == 'y' as i32 || c == 'Y' as i32 {
                            yf = YANKONLY as libc::c_int
                          }
                          c1 = 'y' as i32;
                          if c != 'Y' as i32 {
                            c1 = get_one_char()
                          }
                          ml = find_range(&mut p, &mut q, c1 as libc::c_char);
                          place_cursor(0i32, 0);
                          if c1 == 27i32 {
                            c1 = 27i32;
                            c = c1
                          } else if !strchr(b"wW\x00" as *const u8 as *const libc::c_char, c1)
                            .is_null()
                          {
                            ml = 0;
                            if c == 'c' as i32 {
                              while ({
                                let mut bb__isspace: libc::c_uchar =
                                  (*q as libc::c_int - 9i32) as libc::c_uchar;
                                (bb__isspace as libc::c_int == ' ' as i32 - 9i32
                                  || bb__isspace as libc::c_int <= 13i32 - 9i32)
                                  as libc::c_int
                              }) != 0
                                && q > p
                              {
                                q = q.offset(-1)
                              }
                            }
                            (*ptr_to_globals).dot = yank_delete(p, q, ml, yf, 1i32)
                          } else if !strchr(
                            b"^0bBeEft%$ lh\x08\x7f\x00" as *const u8 as *const libc::c_char,
                            c1,
                          )
                          .is_null()
                          {
                            (*ptr_to_globals).dot = yank_delete(p, q, ml, yf, 1i32)
                          } else if !strchr(
                            b"cdykjGHL+-{}\r\n\x00" as *const u8 as *const libc::c_char,
                            c1,
                          )
                          .is_null()
                          {
                            (*ptr_to_globals).dot = yank_delete(p, q, ml, yf, 1i32);
                            whole = 1i32
                          } else {
                            c1 = 27i32;
                            c = c1;
                            ml = 0;
                            indicate_error();
                          }
                          if ml != 0 && whole != 0 {
                            if c == 'c' as i32 {
                              (*ptr_to_globals).dot = char_insert(
                                (*ptr_to_globals).dot,
                                '\n' as i32 as libc::c_char,
                                2i32,
                              );
                              if whole != 0
                                && (*ptr_to_globals).dot != (*ptr_to_globals).end.offset(-1)
                              {
                                dot_prev();
                              }
                            } else if c == 'd' as i32 {
                              dot_begin();
                              dot_skip_over_ws();
                            }
                          }
                          if c1 != 27i32 {
                            if c == 'c' as i32 {
                              strcpy(
                                buf.as_mut_ptr(),
                                b"Change\x00" as *const u8 as *const libc::c_char,
                              );
                              current_block = 8629930936610358348;
                            } else {
                              if c == 'd' as i32 {
                                strcpy(
                                  buf.as_mut_ptr(),
                                  b"Delete\x00" as *const u8 as *const libc::c_char,
                                );
                              }
                              if c == 'y' as i32 || c == 'Y' as i32 {
                                strcpy(
                                  buf.as_mut_ptr(),
                                  b"Yank\x00" as *const u8 as *const libc::c_char,
                                );
                              }
                              p = (*ptr_to_globals).reg[(*ptr_to_globals).YDreg as usize];
                              q = p.offset(strlen(p) as isize);
                              cnt = 0;
                              while p <= q {
                                if *p as libc::c_int == '\n' as i32 {
                                  cnt += 1
                                }
                                p = p.offset(1)
                              }
                              status_line(
                                b"%s %u lines (%u chars) using [%c]\x00" as *const u8
                                  as *const libc::c_char,
                                buf.as_mut_ptr(),
                                cnt,
                                strlen((*ptr_to_globals).reg[(*ptr_to_globals).YDreg as usize])
                                  as libc::c_uint,
                                what_reg() as libc::c_int,
                              );
                              end_cmd_q();
                              current_block = 15129665204879337069;
                            }
                          } else {
                            current_block = 15129665204879337069;
                          }
                        }
                        5591548203144509315 => {
                          current_block = 2636677179867529885;
                        }
                        _ => {}
                      }
                      match current_block {
                        15129665204879337069 => {}
                        8629930936610358348 => {}
                        _ => {
                          match current_block {
                            2636677179867529885 => {
                              current_block = 12309206730560524281;
                            }
                            _ => {}
                          }
                          match current_block {
                            12309206730560524281 => {
                              current_block = 3325768110057758661;
                            }
                            _ => {}
                          }
                          match current_block {
                            3325768110057758661 => {
                              current_block = 14815832896553429982;
                            }
                            _ => {}
                          }
                          match current_block {
                            14815832896553429982 => {
                              current_block = 10731695520297161438;
                            }
                            _ => {}
                          }
                          match current_block {
                            10731695520297161438 => {
                              if c == '0' as i32 && (*ptr_to_globals).cmdcnt < 1i32 {
                                dot_begin();
                              } else {
                                (*ptr_to_globals).cmdcnt =
                                  (*ptr_to_globals).cmdcnt * 10i32 + (c - '0' as i32)
                              }
                              current_block = 15129665204879337069;
                            }
                            _ => {}
                          }
                          match current_block {
                            15129665204879337069 => {}
                            _ => {
                              loop {
                                match current_block {
                                  16813369756331276724 => {
                                    msg = std::ptr::null();
                                    current_block = 7392824444931029276;
                                  }
                                  7392824444931029276 => {
                                    dir = FORWARD as libc::c_int;
                                    p = (*ptr_to_globals).dot.offset(1);
                                    if *(*ptr_to_globals).last_search_pattern.offset(0)
                                      as libc::c_int
                                      == '?' as i32
                                    {
                                      dir = BACK as libc::c_int;
                                      p = (*ptr_to_globals).dot.offset(-1)
                                    }
                                    current_block = 4166979493554389389;
                                  }
                                  _ => {
                                    q = char_search(
                                      p,
                                      (*ptr_to_globals).last_search_pattern.offset(1),
                                      dir << 1i32 | FULL as libc::c_int,
                                    );
                                    if !q.is_null() {
                                      (*ptr_to_globals).dot = q;
                                      msg = std::ptr::null()
                                    } else {
                                      p = (*ptr_to_globals).text;
                                      if dir == BACK as libc::c_int {
                                        p = (*ptr_to_globals).end.offset(-1)
                                      }
                                      q = char_search(
                                        p,
                                        (*ptr_to_globals).last_search_pattern.offset(1),
                                        dir << 1i32 | FULL as libc::c_int,
                                      );
                                      if !q.is_null() {
                                        (*ptr_to_globals).dot = q;
                                        msg = b"search hit BOTTOM, continuing at TOP\x00"
                                          as *const u8
                                          as *const libc::c_char;
                                        if dir == BACK as libc::c_int {
                                          msg = b"search hit TOP, continuing at BOTTOM\x00"
                                            as *const u8
                                            as *const libc::c_char
                                        }
                                      } else {
                                        msg = b"Pattern not found\x00" as *const u8
                                          as *const libc::c_char
                                      }
                                    }
                                    if !msg.is_null() {
                                      status_line_bold(
                                        b"%s\x00" as *const u8 as *const libc::c_char,
                                        msg,
                                      );
                                    }
                                    (*ptr_to_globals).cmdcnt -= 1;
                                    if (*ptr_to_globals).cmdcnt > 0 {
                                      current_block = 16813369756331276724;
                                    } else {
                                      break;
                                    }
                                  }
                                }
                              }
                              current_block = 15129665204879337069;
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
        124 => {
          current_block = 4386451087681909888;
          match current_block {
            16992905640583886232 => {
              loop {
                if (*(*ptr_to_globals).dot as libc::c_int - 'a' as i32) as libc::c_uchar
                  as libc::c_int
                  <= 'z' as i32 - 'a' as i32
                {
                  undo_push(
                    (*ptr_to_globals).dot,
                    1i32 as libc::c_uint,
                    1i32 as libc::c_uchar,
                  );
                  *(*ptr_to_globals).dot =
                    bb_ascii_toupper(*(*ptr_to_globals).dot as libc::c_uchar) as libc::c_char;
                  undo_push(
                    (*ptr_to_globals).dot,
                    1i32 as libc::c_uint,
                    2i32 as libc::c_uchar,
                  );
                } else if (*(*ptr_to_globals).dot as libc::c_int - 'A' as i32) as libc::c_uchar
                  as libc::c_int
                  <= 'Z' as i32 - 'A' as i32
                {
                  undo_push(
                    (*ptr_to_globals).dot,
                    1i32 as libc::c_uint,
                    1i32 as libc::c_uchar,
                  );
                  *(*ptr_to_globals).dot =
                    bb_ascii_tolower(*(*ptr_to_globals).dot as libc::c_uchar) as libc::c_char;
                  undo_push(
                    (*ptr_to_globals).dot,
                    1i32 as libc::c_uint,
                    2i32 as libc::c_uchar,
                  );
                }
                dot_right();
                (*ptr_to_globals).cmdcnt -= 1;
                if !((*ptr_to_globals).cmdcnt > 0) {
                  break;
                }
              }
              end_cmd_q();
              current_block = 15129665204879337069;
            }
            8729655159604064397 => {
              c1 = get_one_char();
              cnt = 0;
              if c1 == '.' as i32 {
                cnt = (*ptr_to_globals)
                  .rows
                  .wrapping_sub(2i32 as libc::c_uint)
                  .wrapping_div(2i32 as libc::c_uint) as libc::c_int
              }
              if c1 == '-' as i32 {
                cnt = (*ptr_to_globals).rows.wrapping_sub(2i32 as libc::c_uint) as libc::c_int
              }
              (*ptr_to_globals).screenbegin = begin_line((*ptr_to_globals).dot);
              dot_scroll(cnt, -1i32);
              current_block = 15129665204879337069;
            }
            15899500648299942075 => {
              (*ptr_to_globals).last_forward_char = get_one_char();
              do_cmd(';' as i32);
              if *(*ptr_to_globals).dot as libc::c_int == (*ptr_to_globals).last_forward_char {
                dot_left();
              }
              (*ptr_to_globals).last_forward_char = 0;
              current_block = 15129665204879337069;
            }
            9051390181078481641 => {
              c1 = get_one_char();
              if *(*ptr_to_globals).dot as libc::c_int != '\n' as i32 {
                (*ptr_to_globals).dot =
                  text_hole_delete((*ptr_to_globals).dot, (*ptr_to_globals).dot, 1i32);
                (*ptr_to_globals).dot =
                  char_insert((*ptr_to_globals).dot, c1 as libc::c_char, 2i32);
                dot_left();
              }
              end_cmd_q();
              current_block = 15129665204879337069;
            }
            877115918601926659 => {
              dir = FORWARD as libc::c_int;
              if c == 'b' as i32 {
                dir = BACK as libc::c_int
              }
              while !((*ptr_to_globals).dot.offset(dir as isize) < (*ptr_to_globals).text
                || (*ptr_to_globals).dot.offset(dir as isize) > (*ptr_to_globals).end.offset(-1))
              {
                (*ptr_to_globals).dot = (*ptr_to_globals).dot.offset(dir as isize);
                if ({
                  let mut bb__isspace: libc::c_uchar =
                    (*(*ptr_to_globals).dot as libc::c_int - 9i32) as libc::c_uchar;
                  (bb__isspace as libc::c_int == ' ' as i32 - 9i32
                    || bb__isspace as libc::c_int <= 13i32 - 9i32) as libc::c_int
                }) != 0
                {
                  (*ptr_to_globals).dot = skip_thing(
                    (*ptr_to_globals).dot,
                    if c == 'e' as i32 { 2i32 } else { 1i32 },
                    dir,
                    S_OVER_WS as libc::c_int,
                  )
                }
                if bb_ascii_isalnum(*(*ptr_to_globals).dot as libc::c_uchar) != 0
                  || *(*ptr_to_globals).dot as libc::c_int == '_' as i32
                {
                  (*ptr_to_globals).dot =
                    skip_thing((*ptr_to_globals).dot, 1i32, dir, S_END_ALNUM as libc::c_int)
                } else if *strchrnul(
                  b"!\"#$%&\'()*+,-./:;<=>?@[\\]^_`{|}~\x00" as *const u8 as *const libc::c_char,
                  *(*ptr_to_globals).dot as libc::c_int,
                )
                .offset(0)
                  != 0
                {
                  (*ptr_to_globals).dot =
                    skip_thing((*ptr_to_globals).dot, 1i32, dir, S_END_PUNCT as libc::c_int)
                }
                (*ptr_to_globals).cmdcnt -= 1;
                if !((*ptr_to_globals).cmdcnt > 0) {
                  break;
                }
              }
              current_block = 15129665204879337069;
            }
            1085022737867179637 => {
              dot_begin();
              dot_skip_over_ws();
              current_block = 15129665204879337069;
            }
            3113147720494587438 => {
              c1 = get_one_char();
              if c1 != 'Z' as i32 {
                indicate_error();
              } else if (*ptr_to_globals).modified_count != 0 {
                if 1i32 != 0 && (*ptr_to_globals).readonly_mode as libc::c_int != 0 {
                  status_line_bold(
                    b"\'%s\' is read only\x00" as *const u8 as *const libc::c_char,
                    (*ptr_to_globals).current_filename,
                  );
                } else {
                  cnt = file_write(
                    (*ptr_to_globals).current_filename,
                    (*ptr_to_globals).text,
                    (*ptr_to_globals).end.offset(-1),
                  );
                  if cnt < 0 {
                    if cnt == -1i32 {
                      status_line_bold(b"Write error: %m\x00" as *const u8 as *const libc::c_char);
                    }
                  } else if cnt as libc::c_long
                    == (*ptr_to_globals)
                      .end
                      .offset(-1)
                      .wrapping_offset_from((*ptr_to_globals).text)
                      as libc::c_long
                      + 1
                  {
                    (*ptr_to_globals).editing = 0 as smallint
                  }
                }
              } else {
                (*ptr_to_globals).editing = 0 as smallint
              }
              current_block = 15129665204879337069;
            }
            12960118908218882441 => {
              p = begin_line((*ptr_to_globals).dot);
              if *p.offset(-1i32 as isize) as libc::c_int == '\n' as i32 {
                dot_prev();
                current_block = 2087484904894455135;
              } else {
                dot_begin();
                (*ptr_to_globals).dot =
                  char_insert((*ptr_to_globals).dot, '\n' as i32 as libc::c_char, 1i32);
                dot_prev();
                current_block = 8629930936610358348;
              }
            }
            8720450212473544924 => {
              (*ptr_to_globals).dot = (*ptr_to_globals).screenbegin;
              cnt = 0;
              while (cnt as libc::c_uint)
                < (*ptr_to_globals)
                  .rows
                  .wrapping_sub(1i32 as libc::c_uint)
                  .wrapping_div(2i32 as libc::c_uint)
              {
                (*ptr_to_globals).dot = next_line((*ptr_to_globals).dot);
                cnt += 1
              }
              current_block = 15129665204879337069;
            }
            13015277209715431090 => {
              (*ptr_to_globals).dot = end_screen();
              if (*ptr_to_globals).cmdcnt as libc::c_uint
                > (*ptr_to_globals).rows.wrapping_sub(1i32 as libc::c_uint)
              {
                (*ptr_to_globals).cmdcnt =
                  (*ptr_to_globals).rows.wrapping_sub(1i32 as libc::c_uint) as libc::c_int
              }
              (*ptr_to_globals).cmdcnt -= 1;
              if (*ptr_to_globals).cmdcnt > 0 {
                do_cmd('-' as i32);
              }
              dot_begin();
              dot_skip_over_ws();
              current_block = 15129665204879337069;
            }
            9800435767766781385 => {
              loop {
                dot_end();
                if (*ptr_to_globals).dot < (*ptr_to_globals).end.offset(-1) {
                  undo_push(
                    (*ptr_to_globals).dot,
                    1i32 as libc::c_uint,
                    1i32 as libc::c_uchar,
                  );
                  let fresh15 = (*ptr_to_globals).dot;
                  (*ptr_to_globals).dot = (*ptr_to_globals).dot.offset(1);
                  *fresh15 = ' ' as i32 as libc::c_char;
                  undo_push(
                    (*ptr_to_globals).dot.offset(-1),
                    1i32 as libc::c_uint,
                    2i32 as libc::c_uchar,
                  );
                  while ({
                    let mut bb__isblank: libc::c_uchar = *(*ptr_to_globals).dot as libc::c_uchar;
                    (bb__isblank as libc::c_int == ' ' as i32
                      || bb__isblank as libc::c_int == '\t' as i32)
                      as libc::c_int
                  }) != 0
                  {
                    text_hole_delete((*ptr_to_globals).dot, (*ptr_to_globals).dot, 2i32);
                  }
                }
                (*ptr_to_globals).cmdcnt -= 1;
                if !((*ptr_to_globals).cmdcnt > 0) {
                  break;
                }
              }
              end_cmd_q();
              current_block = 15129665204879337069;
            }
            3432363526595694666 => {
              dot_begin();
              dot_skip_over_ws();
              current_block = 3268579060917229304;
            }
            3494829253343353619 => {
              (*ptr_to_globals).dot = (*ptr_to_globals).screenbegin;
              if (*ptr_to_globals).cmdcnt as libc::c_uint
                > (*ptr_to_globals).rows.wrapping_sub(1i32 as libc::c_uint)
              {
                (*ptr_to_globals).cmdcnt =
                  (*ptr_to_globals).rows.wrapping_sub(1i32 as libc::c_uint) as libc::c_int
              }
              (*ptr_to_globals).cmdcnt -= 1;
              if (*ptr_to_globals).cmdcnt > 0 {
                do_cmd('+' as i32);
              }
              dot_skip_over_ws();
              current_block = 15129665204879337069;
            }
            17973101765331640574 => {
              c1 = get_one_char();
              if c1 != 'g' as i32 {
                buf[0] = 'g' as i32 as libc::c_char;
                buf[1] = if c1 >= 0 { c1 } else { '*' as i32 } as libc::c_char;
                buf[2] = '\u{0}' as i32 as libc::c_char;
                not_implemented(buf.as_mut_ptr());
                current_block = 15129665204879337069;
              } else {
                if (*ptr_to_globals).cmdcnt == 0 {
                  (*ptr_to_globals).cmdcnt = 1i32
                }
                current_block = 11945623545738147997;
              }
            }
            16546625800574160972 => {
              save_dot = (*ptr_to_globals).dot;
              (*ptr_to_globals).dot = dollar_line((*ptr_to_globals).dot);
              (*ptr_to_globals).dot = yank_delete(
                save_dot,
                (*ptr_to_globals).dot,
                0,
                YANKDEL as libc::c_int,
                1i32,
              );
              if c == 'C' as i32 {
                current_block = 8629930936610358348;
              } else {
                if c == 'D' as i32 {
                  end_cmd_q();
                }
                current_block = 15129665204879337069;
              }
            }
            11937696639986586685 => {
              cnt = count_lines((*ptr_to_globals).text, (*ptr_to_globals).dot);
              c1 = get_one_char();
              find_range(&mut p, &mut q, c1 as libc::c_char);
              yank_delete(p, q, 1i32, YANKONLY as libc::c_int, 0);
              p = begin_line(p);
              q = end_line(q);
              i = count_lines(p, q);
              while i > 0 {
                if c == '<' as i32 {
                  if *p as libc::c_int == '\t' as i32 {
                    text_hole_delete(p, p, 0);
                  } else if *p as libc::c_int == ' ' as i32 {
                    j = 0;
                    while *p as libc::c_int == ' ' as i32 && j < (*ptr_to_globals).tabstop {
                      text_hole_delete(p, p, 0);
                      j += 1
                    }
                  }
                } else if c == '>' as i32 {
                  char_insert(p, '\t' as i32 as libc::c_char, 1i32);
                }
                i -= 1;
                p = next_line(p)
              }
              (*ptr_to_globals).dot = find_line(cnt);
              dot_skip_over_ws();
              end_cmd_q();
              current_block = 15129665204879337069;
            }
            17725350714912028156 => {
              p = get_input_line(b":\x00" as *const u8 as *const libc::c_char);
              colon(p);
              current_block = 15129665204879337069;
            }
            14526470074083880812 => {
              q = char_search(
                (*ptr_to_globals).dot,
                b"\n\n\x00" as *const u8 as *const libc::c_char,
                (FORWARD as libc::c_int) << 1i32 | FULL as libc::c_int,
              );
              if !q.is_null() {
                (*ptr_to_globals).dot = next_line(q)
              }
              current_block = 15129665204879337069;
            }
            8893187391306414141 => {
              q = char_search(
                (*ptr_to_globals).dot,
                b"\n\n\x00" as *const u8 as *const libc::c_char,
                ((BACK as libc::c_int as libc::c_uint) << 1i32
                  | FULL as libc::c_int as libc::c_uint) as libc::c_int,
              );
              if !q.is_null() {
                (*ptr_to_globals).dot = next_line(q)
              }
              current_block = 15129665204879337069;
            }
            7021673758293221412 => {
              dir = BACK as libc::c_int;
              p = (*ptr_to_globals).dot.offset(-1);
              if *(*ptr_to_globals).last_search_pattern.offset(0) as libc::c_int == '?' as i32 {
                dir = FORWARD as libc::c_int;
                p = (*ptr_to_globals).dot.offset(1)
              }
              current_block = 4166979493554389389;
            }
            18374191879090272823 => {
              buf[0] = c as libc::c_char;
              buf[1] = '\u{0}' as i32 as libc::c_char;
              q = get_input_line(buf.as_mut_ptr());
              if *q.offset(0) as libc::c_int != 0 && *q.offset(1) == 0 {
                if *(*ptr_to_globals).last_search_pattern.offset(0) != 0 {
                  *(*ptr_to_globals).last_search_pattern.offset(0) = c as libc::c_char
                }
                current_block = 7392824444931029276;
              } else if *q.offset(0) != 0 {
                free((*ptr_to_globals).last_search_pattern as *mut libc::c_void);
                (*ptr_to_globals).last_search_pattern = crate::libbb::xfuncs_printf::xstrdup(q);
                current_block = 7392824444931029276;
              } else {
                current_block = 15129665204879337069;
              }
            }
            16407828456666301883 => {
              if (*ptr_to_globals).last_forward_char == 0 {
                current_block = 15129665204879337069;
              } else {
                loop {
                  q = (*ptr_to_globals).dot.offset(-1);
                  while q >= (*ptr_to_globals).text
                    && *q as libc::c_int != '\n' as i32
                    && *q as libc::c_int != (*ptr_to_globals).last_forward_char
                  {
                    q = q.offset(-1)
                  }
                  if q >= (*ptr_to_globals).text
                    && *q as libc::c_int == (*ptr_to_globals).last_forward_char
                  {
                    (*ptr_to_globals).dot = q
                  }
                  (*ptr_to_globals).cmdcnt -= 1;
                  if !((*ptr_to_globals).cmdcnt > 0) {
                    break;
                  }
                }
                current_block = 15129665204879337069;
              }
            }
            9018432604062702004 => {
              q = (*ptr_to_globals).dot;
              while q < (*ptr_to_globals).end && *q as libc::c_int != '\n' as i32 {
                if !strchr(
                  b"()[]{}\x00" as *const u8 as *const libc::c_char,
                  *q as libc::c_int,
                )
                .is_null()
                {
                  p = find_pair(q, *q);
                  if p.is_null() {
                    indicate_error();
                  } else {
                    (*ptr_to_globals).dot = p
                  }
                  break;
                } else {
                  q = q.offset(1)
                }
              }
              if *q as libc::c_int == '\n' as i32 {
                indicate_error();
              }
              current_block = 15129665204879337069;
            }
            10247103787464459848 => {
              p = (*ptr_to_globals).reg[(*ptr_to_globals).YDreg as usize];
              if p.is_null() {
                status_line_bold(
                  b"Nothing in register %c\x00" as *const u8 as *const libc::c_char,
                  what_reg() as libc::c_int,
                );
              } else {
                if !strchr(p, '\n' as i32).is_null() {
                  if c == 'P' as i32 {
                    dot_begin();
                  }
                  if c == 'p' as i32 {
                    if end_line((*ptr_to_globals).dot) == (*ptr_to_globals).end.offset(-1) {
                      (*ptr_to_globals).dot = (*ptr_to_globals).end
                    } else {
                      dot_next();
                    }
                  }
                } else if c == 'p' as i32 {
                  dot_right();
                }
                string_insert((*ptr_to_globals).dot, p, 1i32);
                end_cmd_q();
              }
              current_block = 15129665204879337069;
            }
            15260732871948875843 => {
              c1 = (get_one_char() | 0x20i32) - 'a' as i32;
              if c1 as libc::c_uint <= 25i32 as libc::c_uint {
                (*ptr_to_globals).mark[c1 as usize] = (*ptr_to_globals).dot
              } else {
                indicate_error();
              }
              current_block = 15129665204879337069;
            }
            12738322036487086035 => {
              c1 = get_one_char() | 0x20i32;
              if (c1 - 'a' as i32) as libc::c_uint <= 25i32 as libc::c_uint {
                c1 = c1 - 'a' as i32;
                q = (*ptr_to_globals).mark[c1 as usize];
                if (*ptr_to_globals).text <= q && q < (*ptr_to_globals).end {
                  (*ptr_to_globals).dot = q;
                  dot_begin();
                  dot_skip_over_ws();
                }
              } else if c1 == '\'' as i32 {
                (*ptr_to_globals).dot = swap_context((*ptr_to_globals).dot);
                dot_begin();
                dot_skip_over_ws();
              } else {
                indicate_error();
              }
              current_block = 15129665204879337069;
            }
            13255096073384561358 => {
              c1 = (get_one_char() | 0x20i32) - 'a' as i32;
              if c1 as libc::c_uint <= 25i32 as libc::c_uint {
                (*ptr_to_globals).YDreg = c1 as smalluint
              } else {
                indicate_error();
              }
              current_block = 15129665204879337069;
            }
            10258711639984089377 => {
              if (*ptr_to_globals).cmd_mode as libc::c_int == 0 {
                indicate_error();
              }
              (*ptr_to_globals).cmd_mode = 0 as smallint;
              undo_queue_commit();
              end_cmd_q();
              (*ptr_to_globals).last_status_cksum = 0;
              current_block = 15129665204879337069;
            }
            11439127087547047736 => {
              buf[0] = c as libc::c_char;
              buf[1] = '\u{0}' as i32 as libc::c_char;
              not_implemented(buf.as_mut_ptr());
              end_cmd_q();
              current_block = 17440971994642376514;
            }
            7961798899781870241 => {
              dot_scroll(
                (*ptr_to_globals).rows.wrapping_sub(2i32 as libc::c_uint) as libc::c_int,
                -1i32,
              );
              current_block = 15129665204879337069;
            }
            9426343755402444879 => {
              dot_scroll(
                (*ptr_to_globals)
                  .rows
                  .wrapping_sub(2i32 as libc::c_uint)
                  .wrapping_div(2i32 as libc::c_uint) as libc::c_int,
                1i32,
              );
              current_block = 15129665204879337069;
            }
            13352459794680105913 => {
              dot_scroll(1i32, 1i32);
              current_block = 15129665204879337069;
            }
            14142272253464333006 => {
              dot_scroll(
                (*ptr_to_globals).rows.wrapping_sub(2i32 as libc::c_uint) as libc::c_int,
                1i32,
              );
              current_block = 15129665204879337069;
            }
            10758177197742640066 => {
              (*ptr_to_globals).last_status_cksum = 0;
              current_block = 15129665204879337069;
            }
            6152256259730122749 => {
              current_block = 7534742345255184552;
            }
            12883932598258173301 => {
              current_block = 8800996768013373992;
            }
            11242998110520238401 => {
              redraw(1i32);
              current_block = 15129665204879337069;
            }
            13619733043935729992 => {
              loop {
                dot_next();
                dot_skip_over_ws();
                (*ptr_to_globals).cmdcnt -= 1;
                if !((*ptr_to_globals).cmdcnt > 0) {
                  break;
                }
              }
              current_block = 15129665204879337069;
            }
            9339065157412720613 => {
              dot_scroll(
                (*ptr_to_globals)
                  .rows
                  .wrapping_sub(2i32 as libc::c_uint)
                  .wrapping_div(2i32 as libc::c_uint) as libc::c_int,
                -1i32,
              );
              current_block = 15129665204879337069;
            }
            11447082683497798022 => {
              dot_scroll(1i32, -1i32);
              current_block = 15129665204879337069;
            }
            5182000506326660482 => {
              current_block = 13993698454868426881;
            }
            1105010766850597332 => {
              if !(*ptr_to_globals).reg[27].is_null() {
                p = begin_line((*ptr_to_globals).dot);
                q = end_line((*ptr_to_globals).dot);
                p = text_hole_delete(p, q, 1i32);
                p = p.offset(string_insert(p, (*ptr_to_globals).reg[27], 2i32) as isize);
                (*ptr_to_globals).dot = p;
                dot_skip_over_ws();
              }
              current_block = 15129665204879337069;
            }
            8616046655533110204 => {
              undo_pop();
              current_block = 15129665204879337069;
            }
            5127767458142431603 => {
              loop {
                (*ptr_to_globals).dot = end_line((*ptr_to_globals).dot);
                (*ptr_to_globals).cmdcnt -= 1;
                if (*ptr_to_globals).cmdcnt <= 0 {
                  break;
                }
                dot_next();
              }
              current_block = 15129665204879337069;
            }
            222014967776118151 => {
              (*ptr_to_globals).last_forward_char = get_one_char();
              current_block = 7856905509180742666;
            }
            11209792479411604110 => {
              loop {
                dot_prev();
                dot_skip_over_ws();
                (*ptr_to_globals).cmdcnt -= 1;
                if !((*ptr_to_globals).cmdcnt > 0) {
                  break;
                }
              }
              current_block = 15129665204879337069;
            }
            3364823792826654116 => {
              if (*ptr_to_globals).lmc_len != 0 {
                (*ptr_to_globals).ioq_start = crate::libbb::xfuncs_printf::xstrndup(
                  (*ptr_to_globals).last_modifying_cmd.as_mut_ptr(),
                  (*ptr_to_globals).lmc_len,
                );
                (*ptr_to_globals).ioq = (*ptr_to_globals).ioq_start
              }
              current_block = 15129665204879337069;
            }
            18096603330221575131 => {
              current_block = 17498168302144015873;
            }
            16891123271837848903 => {
              dot_end();
              current_block = 1752638907092016026;
            }
            8517235759107662071 => {
              current_block = 5847749760081351726;
            }
            12525254419223051704 => {
              if (*ptr_to_globals).dot < (*ptr_to_globals).end.offset(-1) {
                (*ptr_to_globals).dot = yank_delete(
                  (*ptr_to_globals).dot,
                  (*ptr_to_globals).dot,
                  1i32,
                  YANKDEL as libc::c_int,
                  1i32,
                )
              }
              current_block = 15129665204879337069;
            }
            15232911949322867522 => {
              current_block = 17251831742223396249;
            }
            10863374208794025069 => {
              current_block = 1895262434596074581;
            }
            451126677064669119 => {
              loop {
                dot_prev();
                (*ptr_to_globals).dot = move_to_col(
                  (*ptr_to_globals).dot,
                  (*ptr_to_globals).ccol + (*ptr_to_globals).offset,
                );
                (*ptr_to_globals).cmdcnt -= 1;
                if !((*ptr_to_globals).cmdcnt > 0) {
                  break;
                }
              }
              current_block = 15129665204879337069;
            }
            4611735929166613116 => {
              loop {
                if bb_ascii_isalnum(*(*ptr_to_globals).dot as libc::c_uchar) != 0
                  || *(*ptr_to_globals).dot as libc::c_int == '_' as i32
                {
                  (*ptr_to_globals).dot = skip_thing(
                    (*ptr_to_globals).dot,
                    1i32,
                    FORWARD as libc::c_int,
                    S_END_ALNUM as libc::c_int,
                  )
                } else if *strchrnul(
                  b"!\"#$%&\'()*+,-./:;<=>?@[\\]^_`{|}~\x00" as *const u8 as *const libc::c_char,
                  *(*ptr_to_globals).dot as libc::c_int,
                )
                .offset(0)
                  != 0
                {
                  (*ptr_to_globals).dot = skip_thing(
                    (*ptr_to_globals).dot,
                    1i32,
                    FORWARD as libc::c_int,
                    S_END_PUNCT as libc::c_int,
                  )
                }
                if (*ptr_to_globals).dot < (*ptr_to_globals).end.offset(-1) {
                  (*ptr_to_globals).dot = (*ptr_to_globals).dot.offset(1)
                }
                if ({
                  let mut bb__isspace: libc::c_uchar =
                    (*(*ptr_to_globals).dot as libc::c_int - 9i32) as libc::c_uchar;
                  (bb__isspace as libc::c_int == ' ' as i32 - 9i32
                    || bb__isspace as libc::c_int <= 13i32 - 9i32) as libc::c_int
                }) != 0
                {
                  (*ptr_to_globals).dot = skip_thing(
                    (*ptr_to_globals).dot,
                    2i32,
                    FORWARD as libc::c_int,
                    S_OVER_WS as libc::c_int,
                  )
                }
                (*ptr_to_globals).cmdcnt -= 1;
                if !((*ptr_to_globals).cmdcnt > 0) {
                  break;
                }
              }
              current_block = 15129665204879337069;
            }
            4386451087681909888 => {
              (*ptr_to_globals).dot =
                move_to_col((*ptr_to_globals).dot, (*ptr_to_globals).cmdcnt - 1i32);
              current_block = 15129665204879337069;
            }
            1296397779060594135 => {
              dot_begin();
              current_block = 15129665204879337069;
            }
            _ => {}
          }
          match current_block {
            15129665204879337069 => {}
            8629930936610358348 => {}
            _ => {
              match current_block {
                17251831742223396249 => {
                  dir = 0;
                  if c == 'X' as i32 {
                    dir = -1i32
                  }
                  loop {
                    if *(*ptr_to_globals).dot.offset(dir as isize) as libc::c_int != '\n' as i32 {
                      if c == 'X' as i32 {
                        (*ptr_to_globals).dot = (*ptr_to_globals).dot.offset(-1)
                      }
                      (*ptr_to_globals).dot = yank_delete(
                        (*ptr_to_globals).dot,
                        (*ptr_to_globals).dot,
                        0,
                        YANKDEL as libc::c_int,
                        1i32,
                      )
                    }
                    (*ptr_to_globals).cmdcnt -= 1;
                    if !((*ptr_to_globals).cmdcnt > 0) {
                      break;
                    }
                  }
                  end_cmd_q();
                  if c == 's' as i32 {
                    current_block = 8629930936610358348;
                  } else {
                    current_block = 15129665204879337069;
                  }
                }
                2087484904894455135 => {
                  dot_end();
                  (*ptr_to_globals).dot =
                    char_insert((*ptr_to_globals).dot, '\n' as i32 as libc::c_char, 1i32);
                  current_block = 8629930936610358348;
                }
                11945623545738147997 => {
                  (*ptr_to_globals).dot = (*ptr_to_globals).end.offset(-1);
                  if (*ptr_to_globals).cmdcnt > 0 {
                    (*ptr_to_globals).dot = find_line((*ptr_to_globals).cmdcnt)
                  }
                  dot_skip_over_ws();
                  current_block = 15129665204879337069;
                }
                5847749760081351726 => {
                  dir = FORWARD as libc::c_int;
                  if c == 'B' as i32 {
                    dir = BACK as libc::c_int
                  }
                  loop {
                    if c == 'W' as i32
                      || ({
                        let mut bb__isspace: libc::c_uchar =
                          (*(*ptr_to_globals).dot.offset(dir as isize) as libc::c_int - 9i32)
                            as libc::c_uchar;
                        (bb__isspace as libc::c_int == ' ' as i32 - 9i32
                          || bb__isspace as libc::c_int <= 13i32 - 9i32)
                          as libc::c_int
                      }) != 0
                    {
                      (*ptr_to_globals).dot =
                        skip_thing((*ptr_to_globals).dot, 1i32, dir, S_TO_WS as libc::c_int);
                      (*ptr_to_globals).dot =
                        skip_thing((*ptr_to_globals).dot, 2i32, dir, S_OVER_WS as libc::c_int)
                    }
                    if c != 'W' as i32 {
                      (*ptr_to_globals).dot =
                        skip_thing((*ptr_to_globals).dot, 1i32, dir, S_BEFORE_WS as libc::c_int)
                    }
                    (*ptr_to_globals).cmdcnt -= 1;
                    if !((*ptr_to_globals).cmdcnt > 0) {
                      break;
                    }
                  }
                  current_block = 15129665204879337069;
                }
                17440971994642376514 => {
                  current_block = 15129665204879337069;
                }
                7534742345255184552 => {
                  current_block = 17247297260531395789;
                }
                8800996768013373992 => {
                  loop {
                    dot_next();
                    (*ptr_to_globals).dot = move_to_col(
                      (*ptr_to_globals).dot,
                      (*ptr_to_globals).ccol + (*ptr_to_globals).offset,
                    );
                    (*ptr_to_globals).cmdcnt -= 1;
                    if !((*ptr_to_globals).cmdcnt > 0) {
                      break;
                    }
                  }
                  current_block = 15129665204879337069;
                }
                13993698454868426881 => {
                  loop {
                    dot_right();
                    (*ptr_to_globals).cmdcnt -= 1;
                    if !((*ptr_to_globals).cmdcnt > 0) {
                      break;
                    }
                  }
                  current_block = 15129665204879337069;
                }
                7856905509180742666 => {
                  while !((*ptr_to_globals).last_forward_char == 0) {
                    q = (*ptr_to_globals).dot.offset(1);
                    while q < (*ptr_to_globals).end.offset(-1)
                      && *q as libc::c_int != '\n' as i32
                      && *q as libc::c_int != (*ptr_to_globals).last_forward_char
                    {
                      q = q.offset(1)
                    }
                    if *q as libc::c_int == (*ptr_to_globals).last_forward_char {
                      (*ptr_to_globals).dot = q
                    }
                    (*ptr_to_globals).cmdcnt -= 1;
                    if !((*ptr_to_globals).cmdcnt > 0) {
                      break;
                    }
                  }
                  current_block = 15129665204879337069;
                }
                17498168302144015873 => {
                  current_block = 8681395796513813967;
                }
                1752638907092016026 => {
                  if *(*ptr_to_globals).dot as libc::c_int != '\n' as i32 {
                    (*ptr_to_globals).dot = (*ptr_to_globals).dot.offset(1)
                  }
                  current_block = 8629930936610358348;
                }
                3268579060917229304 => {
                  current_block = 8629930936610358348;
                }
                1895262434596074581 => {
                  current_block = 8908416993177701018;
                }
                _ => {}
              }
              match current_block {
                8629930936610358348 => {}
                15129665204879337069 => {}
                _ => {
                  match current_block {
                    17247297260531395789 => {
                      loop {
                        dot_left();
                        (*ptr_to_globals).cmdcnt -= 1;
                        if !((*ptr_to_globals).cmdcnt > 0) {
                          break;
                        }
                      }
                      current_block = 15129665204879337069;
                    }
                    8681395796513813967 => {
                      current_block = 5591548203144509315;
                    }
                    8908416993177701018 => {
                      current_block = 16124761010012532485;
                    }
                    _ => {}
                  }
                  match current_block {
                    15129665204879337069 => {}
                    _ => {
                      match current_block {
                        16124761010012532485 => {
                          let mut yf: libc::c_int = 0;
                          let mut ml: libc::c_int = 0;
                          let mut whole: libc::c_int = 0;
                          yf = YANKDEL as libc::c_int;
                          if c == 'y' as i32 || c == 'Y' as i32 {
                            yf = YANKONLY as libc::c_int
                          }
                          c1 = 'y' as i32;
                          if c != 'Y' as i32 {
                            c1 = get_one_char()
                          }
                          ml = find_range(&mut p, &mut q, c1 as libc::c_char);
                          place_cursor(0i32, 0);
                          if c1 == 27i32 {
                            c1 = 27i32;
                            c = c1
                          } else if !strchr(b"wW\x00" as *const u8 as *const libc::c_char, c1)
                            .is_null()
                          {
                            ml = 0;
                            if c == 'c' as i32 {
                              while ({
                                let mut bb__isspace: libc::c_uchar =
                                  (*q as libc::c_int - 9i32) as libc::c_uchar;
                                (bb__isspace as libc::c_int == ' ' as i32 - 9i32
                                  || bb__isspace as libc::c_int <= 13i32 - 9i32)
                                  as libc::c_int
                              }) != 0
                                && q > p
                              {
                                q = q.offset(-1)
                              }
                            }
                            (*ptr_to_globals).dot = yank_delete(p, q, ml, yf, 1i32)
                          } else if !strchr(
                            b"^0bBeEft%$ lh\x08\x7f\x00" as *const u8 as *const libc::c_char,
                            c1,
                          )
                          .is_null()
                          {
                            (*ptr_to_globals).dot = yank_delete(p, q, ml, yf, 1i32)
                          } else if !strchr(
                            b"cdykjGHL+-{}\r\n\x00" as *const u8 as *const libc::c_char,
                            c1,
                          )
                          .is_null()
                          {
                            (*ptr_to_globals).dot = yank_delete(p, q, ml, yf, 1i32);
                            whole = 1i32
                          } else {
                            c1 = 27i32;
                            c = c1;
                            ml = 0;
                            indicate_error();
                          }
                          if ml != 0 && whole != 0 {
                            if c == 'c' as i32 {
                              (*ptr_to_globals).dot = char_insert(
                                (*ptr_to_globals).dot,
                                '\n' as i32 as libc::c_char,
                                2i32,
                              );
                              if whole != 0
                                && (*ptr_to_globals).dot != (*ptr_to_globals).end.offset(-1)
                              {
                                dot_prev();
                              }
                            } else if c == 'd' as i32 {
                              dot_begin();
                              dot_skip_over_ws();
                            }
                          }
                          if c1 != 27i32 {
                            if c == 'c' as i32 {
                              strcpy(
                                buf.as_mut_ptr(),
                                b"Change\x00" as *const u8 as *const libc::c_char,
                              );
                              current_block = 8629930936610358348;
                            } else {
                              if c == 'd' as i32 {
                                strcpy(
                                  buf.as_mut_ptr(),
                                  b"Delete\x00" as *const u8 as *const libc::c_char,
                                );
                              }
                              if c == 'y' as i32 || c == 'Y' as i32 {
                                strcpy(
                                  buf.as_mut_ptr(),
                                  b"Yank\x00" as *const u8 as *const libc::c_char,
                                );
                              }
                              p = (*ptr_to_globals).reg[(*ptr_to_globals).YDreg as usize];
                              q = p.offset(strlen(p) as isize);
                              cnt = 0;
                              while p <= q {
                                if *p as libc::c_int == '\n' as i32 {
                                  cnt += 1
                                }
                                p = p.offset(1)
                              }
                              status_line(
                                b"%s %u lines (%u chars) using [%c]\x00" as *const u8
                                  as *const libc::c_char,
                                buf.as_mut_ptr(),
                                cnt,
                                strlen((*ptr_to_globals).reg[(*ptr_to_globals).YDreg as usize])
                                  as libc::c_uint,
                                what_reg() as libc::c_int,
                              );
                              end_cmd_q();
                              current_block = 15129665204879337069;
                            }
                          } else {
                            current_block = 15129665204879337069;
                          }
                        }
                        5591548203144509315 => {
                          current_block = 2636677179867529885;
                        }
                        _ => {}
                      }
                      match current_block {
                        15129665204879337069 => {}
                        8629930936610358348 => {}
                        _ => {
                          match current_block {
                            2636677179867529885 => {
                              current_block = 12309206730560524281;
                            }
                            _ => {}
                          }
                          match current_block {
                            12309206730560524281 => {
                              current_block = 3325768110057758661;
                            }
                            _ => {}
                          }
                          match current_block {
                            3325768110057758661 => {
                              current_block = 14815832896553429982;
                            }
                            _ => {}
                          }
                          match current_block {
                            14815832896553429982 => {
                              current_block = 10731695520297161438;
                            }
                            _ => {}
                          }
                          match current_block {
                            10731695520297161438 => {
                              if c == '0' as i32 && (*ptr_to_globals).cmdcnt < 1i32 {
                                dot_begin();
                              } else {
                                (*ptr_to_globals).cmdcnt =
                                  (*ptr_to_globals).cmdcnt * 10i32 + (c - '0' as i32)
                              }
                              current_block = 15129665204879337069;
                            }
                            _ => {}
                          }
                          match current_block {
                            15129665204879337069 => {}
                            _ => {
                              loop {
                                match current_block {
                                  16813369756331276724 => {
                                    msg = std::ptr::null();
                                    current_block = 7392824444931029276;
                                  }
                                  7392824444931029276 => {
                                    dir = FORWARD as libc::c_int;
                                    p = (*ptr_to_globals).dot.offset(1);
                                    if *(*ptr_to_globals).last_search_pattern.offset(0)
                                      as libc::c_int
                                      == '?' as i32
                                    {
                                      dir = BACK as libc::c_int;
                                      p = (*ptr_to_globals).dot.offset(-1)
                                    }
                                    current_block = 4166979493554389389;
                                  }
                                  _ => {
                                    q = char_search(
                                      p,
                                      (*ptr_to_globals).last_search_pattern.offset(1),
                                      dir << 1i32 | FULL as libc::c_int,
                                    );
                                    if !q.is_null() {
                                      (*ptr_to_globals).dot = q;
                                      msg = std::ptr::null()
                                    } else {
                                      p = (*ptr_to_globals).text;
                                      if dir == BACK as libc::c_int {
                                        p = (*ptr_to_globals).end.offset(-1)
                                      }
                                      q = char_search(
                                        p,
                                        (*ptr_to_globals).last_search_pattern.offset(1),
                                        dir << 1i32 | FULL as libc::c_int,
                                      );
                                      if !q.is_null() {
                                        (*ptr_to_globals).dot = q;
                                        msg = b"search hit BOTTOM, continuing at TOP\x00"
                                          as *const u8
                                          as *const libc::c_char;
                                        if dir == BACK as libc::c_int {
                                          msg = b"search hit TOP, continuing at BOTTOM\x00"
                                            as *const u8
                                            as *const libc::c_char
                                        }
                                      } else {
                                        msg = b"Pattern not found\x00" as *const u8
                                          as *const libc::c_char
                                      }
                                    }
                                    if !msg.is_null() {
                                      status_line_bold(
                                        b"%s\x00" as *const u8 as *const libc::c_char,
                                        msg,
                                      );
                                    }
                                    (*ptr_to_globals).cmdcnt -= 1;
                                    if (*ptr_to_globals).cmdcnt > 0 {
                                      current_block = 16813369756331276724;
                                    } else {
                                      break;
                                    }
                                  }
                                }
                              }
                              current_block = 15129665204879337069;
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
        126 => {
          current_block = 16992905640583886232;
          match current_block {
            16992905640583886232 => {
              loop {
                if (*(*ptr_to_globals).dot as libc::c_int - 'a' as i32) as libc::c_uchar
                  as libc::c_int
                  <= 'z' as i32 - 'a' as i32
                {
                  undo_push(
                    (*ptr_to_globals).dot,
                    1i32 as libc::c_uint,
                    1i32 as libc::c_uchar,
                  );
                  *(*ptr_to_globals).dot =
                    bb_ascii_toupper(*(*ptr_to_globals).dot as libc::c_uchar) as libc::c_char;
                  undo_push(
                    (*ptr_to_globals).dot,
                    1i32 as libc::c_uint,
                    2i32 as libc::c_uchar,
                  );
                } else if (*(*ptr_to_globals).dot as libc::c_int - 'A' as i32) as libc::c_uchar
                  as libc::c_int
                  <= 'Z' as i32 - 'A' as i32
                {
                  undo_push(
                    (*ptr_to_globals).dot,
                    1i32 as libc::c_uint,
                    1i32 as libc::c_uchar,
                  );
                  *(*ptr_to_globals).dot =
                    bb_ascii_tolower(*(*ptr_to_globals).dot as libc::c_uchar) as libc::c_char;
                  undo_push(
                    (*ptr_to_globals).dot,
                    1i32 as libc::c_uint,
                    2i32 as libc::c_uchar,
                  );
                }
                dot_right();
                (*ptr_to_globals).cmdcnt -= 1;
                if !((*ptr_to_globals).cmdcnt > 0) {
                  break;
                }
              }
              end_cmd_q();
              current_block = 15129665204879337069;
            }
            8729655159604064397 => {
              c1 = get_one_char();
              cnt = 0;
              if c1 == '.' as i32 {
                cnt = (*ptr_to_globals)
                  .rows
                  .wrapping_sub(2i32 as libc::c_uint)
                  .wrapping_div(2i32 as libc::c_uint) as libc::c_int
              }
              if c1 == '-' as i32 {
                cnt = (*ptr_to_globals).rows.wrapping_sub(2i32 as libc::c_uint) as libc::c_int
              }
              (*ptr_to_globals).screenbegin = begin_line((*ptr_to_globals).dot);
              dot_scroll(cnt, -1i32);
              current_block = 15129665204879337069;
            }
            15899500648299942075 => {
              (*ptr_to_globals).last_forward_char = get_one_char();
              do_cmd(';' as i32);
              if *(*ptr_to_globals).dot as libc::c_int == (*ptr_to_globals).last_forward_char {
                dot_left();
              }
              (*ptr_to_globals).last_forward_char = 0;
              current_block = 15129665204879337069;
            }
            9051390181078481641 => {
              c1 = get_one_char();
              if *(*ptr_to_globals).dot as libc::c_int != '\n' as i32 {
                (*ptr_to_globals).dot =
                  text_hole_delete((*ptr_to_globals).dot, (*ptr_to_globals).dot, 1i32);
                (*ptr_to_globals).dot =
                  char_insert((*ptr_to_globals).dot, c1 as libc::c_char, 2i32);
                dot_left();
              }
              end_cmd_q();
              current_block = 15129665204879337069;
            }
            877115918601926659 => {
              dir = FORWARD as libc::c_int;
              if c == 'b' as i32 {
                dir = BACK as libc::c_int
              }
              while !((*ptr_to_globals).dot.offset(dir as isize) < (*ptr_to_globals).text
                || (*ptr_to_globals).dot.offset(dir as isize) > (*ptr_to_globals).end.offset(-1))
              {
                (*ptr_to_globals).dot = (*ptr_to_globals).dot.offset(dir as isize);
                if ({
                  let mut bb__isspace: libc::c_uchar =
                    (*(*ptr_to_globals).dot as libc::c_int - 9i32) as libc::c_uchar;
                  (bb__isspace as libc::c_int == ' ' as i32 - 9i32
                    || bb__isspace as libc::c_int <= 13i32 - 9i32) as libc::c_int
                }) != 0
                {
                  (*ptr_to_globals).dot = skip_thing(
                    (*ptr_to_globals).dot,
                    if c == 'e' as i32 { 2i32 } else { 1i32 },
                    dir,
                    S_OVER_WS as libc::c_int,
                  )
                }
                if bb_ascii_isalnum(*(*ptr_to_globals).dot as libc::c_uchar) != 0
                  || *(*ptr_to_globals).dot as libc::c_int == '_' as i32
                {
                  (*ptr_to_globals).dot =
                    skip_thing((*ptr_to_globals).dot, 1i32, dir, S_END_ALNUM as libc::c_int)
                } else if *strchrnul(
                  b"!\"#$%&\'()*+,-./:;<=>?@[\\]^_`{|}~\x00" as *const u8 as *const libc::c_char,
                  *(*ptr_to_globals).dot as libc::c_int,
                )
                .offset(0)
                  != 0
                {
                  (*ptr_to_globals).dot =
                    skip_thing((*ptr_to_globals).dot, 1i32, dir, S_END_PUNCT as libc::c_int)
                }
                (*ptr_to_globals).cmdcnt -= 1;
                if !((*ptr_to_globals).cmdcnt > 0) {
                  break;
                }
              }
              current_block = 15129665204879337069;
            }
            1085022737867179637 => {
              dot_begin();
              dot_skip_over_ws();
              current_block = 15129665204879337069;
            }
            3113147720494587438 => {
              c1 = get_one_char();
              if c1 != 'Z' as i32 {
                indicate_error();
              } else if (*ptr_to_globals).modified_count != 0 {
                if 1i32 != 0 && (*ptr_to_globals).readonly_mode as libc::c_int != 0 {
                  status_line_bold(
                    b"\'%s\' is read only\x00" as *const u8 as *const libc::c_char,
                    (*ptr_to_globals).current_filename,
                  );
                } else {
                  cnt = file_write(
                    (*ptr_to_globals).current_filename,
                    (*ptr_to_globals).text,
                    (*ptr_to_globals).end.offset(-1),
                  );
                  if cnt < 0 {
                    if cnt == -1i32 {
                      status_line_bold(b"Write error: %m\x00" as *const u8 as *const libc::c_char);
                    }
                  } else if cnt as libc::c_long
                    == (*ptr_to_globals)
                      .end
                      .offset(-1)
                      .wrapping_offset_from((*ptr_to_globals).text)
                      as libc::c_long
                      + 1
                  {
                    (*ptr_to_globals).editing = 0 as smallint
                  }
                }
              } else {
                (*ptr_to_globals).editing = 0 as smallint
              }
              current_block = 15129665204879337069;
            }
            12960118908218882441 => {
              p = begin_line((*ptr_to_globals).dot);
              if *p.offset(-1i32 as isize) as libc::c_int == '\n' as i32 {
                dot_prev();
                current_block = 2087484904894455135;
              } else {
                dot_begin();
                (*ptr_to_globals).dot =
                  char_insert((*ptr_to_globals).dot, '\n' as i32 as libc::c_char, 1i32);
                dot_prev();
                current_block = 8629930936610358348;
              }
            }
            8720450212473544924 => {
              (*ptr_to_globals).dot = (*ptr_to_globals).screenbegin;
              cnt = 0;
              while (cnt as libc::c_uint)
                < (*ptr_to_globals)
                  .rows
                  .wrapping_sub(1i32 as libc::c_uint)
                  .wrapping_div(2i32 as libc::c_uint)
              {
                (*ptr_to_globals).dot = next_line((*ptr_to_globals).dot);
                cnt += 1
              }
              current_block = 15129665204879337069;
            }
            13015277209715431090 => {
              (*ptr_to_globals).dot = end_screen();
              if (*ptr_to_globals).cmdcnt as libc::c_uint
                > (*ptr_to_globals).rows.wrapping_sub(1i32 as libc::c_uint)
              {
                (*ptr_to_globals).cmdcnt =
                  (*ptr_to_globals).rows.wrapping_sub(1i32 as libc::c_uint) as libc::c_int
              }
              (*ptr_to_globals).cmdcnt -= 1;
              if (*ptr_to_globals).cmdcnt > 0 {
                do_cmd('-' as i32);
              }
              dot_begin();
              dot_skip_over_ws();
              current_block = 15129665204879337069;
            }
            9800435767766781385 => {
              loop {
                dot_end();
                if (*ptr_to_globals).dot < (*ptr_to_globals).end.offset(-1) {
                  undo_push(
                    (*ptr_to_globals).dot,
                    1i32 as libc::c_uint,
                    1i32 as libc::c_uchar,
                  );
                  let fresh15 = (*ptr_to_globals).dot;
                  (*ptr_to_globals).dot = (*ptr_to_globals).dot.offset(1);
                  *fresh15 = ' ' as i32 as libc::c_char;
                  undo_push(
                    (*ptr_to_globals).dot.offset(-1),
                    1i32 as libc::c_uint,
                    2i32 as libc::c_uchar,
                  );
                  while ({
                    let mut bb__isblank: libc::c_uchar = *(*ptr_to_globals).dot as libc::c_uchar;
                    (bb__isblank as libc::c_int == ' ' as i32
                      || bb__isblank as libc::c_int == '\t' as i32)
                      as libc::c_int
                  }) != 0
                  {
                    text_hole_delete((*ptr_to_globals).dot, (*ptr_to_globals).dot, 2i32);
                  }
                }
                (*ptr_to_globals).cmdcnt -= 1;
                if !((*ptr_to_globals).cmdcnt > 0) {
                  break;
                }
              }
              end_cmd_q();
              current_block = 15129665204879337069;
            }
            3432363526595694666 => {
              dot_begin();
              dot_skip_over_ws();
              current_block = 3268579060917229304;
            }
            3494829253343353619 => {
              (*ptr_to_globals).dot = (*ptr_to_globals).screenbegin;
              if (*ptr_to_globals).cmdcnt as libc::c_uint
                > (*ptr_to_globals).rows.wrapping_sub(1i32 as libc::c_uint)
              {
                (*ptr_to_globals).cmdcnt =
                  (*ptr_to_globals).rows.wrapping_sub(1i32 as libc::c_uint) as libc::c_int
              }
              (*ptr_to_globals).cmdcnt -= 1;
              if (*ptr_to_globals).cmdcnt > 0 {
                do_cmd('+' as i32);
              }
              dot_skip_over_ws();
              current_block = 15129665204879337069;
            }
            17973101765331640574 => {
              c1 = get_one_char();
              if c1 != 'g' as i32 {
                buf[0] = 'g' as i32 as libc::c_char;
                buf[1] = if c1 >= 0 { c1 } else { '*' as i32 } as libc::c_char;
                buf[2] = '\u{0}' as i32 as libc::c_char;
                not_implemented(buf.as_mut_ptr());
                current_block = 15129665204879337069;
              } else {
                if (*ptr_to_globals).cmdcnt == 0 {
                  (*ptr_to_globals).cmdcnt = 1i32
                }
                current_block = 11945623545738147997;
              }
            }
            16546625800574160972 => {
              save_dot = (*ptr_to_globals).dot;
              (*ptr_to_globals).dot = dollar_line((*ptr_to_globals).dot);
              (*ptr_to_globals).dot = yank_delete(
                save_dot,
                (*ptr_to_globals).dot,
                0,
                YANKDEL as libc::c_int,
                1i32,
              );
              if c == 'C' as i32 {
                current_block = 8629930936610358348;
              } else {
                if c == 'D' as i32 {
                  end_cmd_q();
                }
                current_block = 15129665204879337069;
              }
            }
            11937696639986586685 => {
              cnt = count_lines((*ptr_to_globals).text, (*ptr_to_globals).dot);
              c1 = get_one_char();
              find_range(&mut p, &mut q, c1 as libc::c_char);
              yank_delete(p, q, 1i32, YANKONLY as libc::c_int, 0);
              p = begin_line(p);
              q = end_line(q);
              i = count_lines(p, q);
              while i > 0 {
                if c == '<' as i32 {
                  if *p as libc::c_int == '\t' as i32 {
                    text_hole_delete(p, p, 0);
                  } else if *p as libc::c_int == ' ' as i32 {
                    j = 0;
                    while *p as libc::c_int == ' ' as i32 && j < (*ptr_to_globals).tabstop {
                      text_hole_delete(p, p, 0);
                      j += 1
                    }
                  }
                } else if c == '>' as i32 {
                  char_insert(p, '\t' as i32 as libc::c_char, 1i32);
                }
                i -= 1;
                p = next_line(p)
              }
              (*ptr_to_globals).dot = find_line(cnt);
              dot_skip_over_ws();
              end_cmd_q();
              current_block = 15129665204879337069;
            }
            17725350714912028156 => {
              p = get_input_line(b":\x00" as *const u8 as *const libc::c_char);
              colon(p);
              current_block = 15129665204879337069;
            }
            14526470074083880812 => {
              q = char_search(
                (*ptr_to_globals).dot,
                b"\n\n\x00" as *const u8 as *const libc::c_char,
                (FORWARD as libc::c_int) << 1i32 | FULL as libc::c_int,
              );
              if !q.is_null() {
                (*ptr_to_globals).dot = next_line(q)
              }
              current_block = 15129665204879337069;
            }
            8893187391306414141 => {
              q = char_search(
                (*ptr_to_globals).dot,
                b"\n\n\x00" as *const u8 as *const libc::c_char,
                ((BACK as libc::c_int as libc::c_uint) << 1i32
                  | FULL as libc::c_int as libc::c_uint) as libc::c_int,
              );
              if !q.is_null() {
                (*ptr_to_globals).dot = next_line(q)
              }
              current_block = 15129665204879337069;
            }
            7021673758293221412 => {
              dir = BACK as libc::c_int;
              p = (*ptr_to_globals).dot.offset(-1);
              if *(*ptr_to_globals).last_search_pattern.offset(0) as libc::c_int == '?' as i32 {
                dir = FORWARD as libc::c_int;
                p = (*ptr_to_globals).dot.offset(1)
              }
              current_block = 4166979493554389389;
            }
            18374191879090272823 => {
              buf[0] = c as libc::c_char;
              buf[1] = '\u{0}' as i32 as libc::c_char;
              q = get_input_line(buf.as_mut_ptr());
              if *q.offset(0) as libc::c_int != 0 && *q.offset(1) == 0 {
                if *(*ptr_to_globals).last_search_pattern.offset(0) != 0 {
                  *(*ptr_to_globals).last_search_pattern.offset(0) = c as libc::c_char
                }
                current_block = 7392824444931029276;
              } else if *q.offset(0) != 0 {
                free((*ptr_to_globals).last_search_pattern as *mut libc::c_void);
                (*ptr_to_globals).last_search_pattern = crate::libbb::xfuncs_printf::xstrdup(q);
                current_block = 7392824444931029276;
              } else {
                current_block = 15129665204879337069;
              }
            }
            16407828456666301883 => {
              if (*ptr_to_globals).last_forward_char == 0 {
                current_block = 15129665204879337069;
              } else {
                loop {
                  q = (*ptr_to_globals).dot.offset(-1);
                  while q >= (*ptr_to_globals).text
                    && *q as libc::c_int != '\n' as i32
                    && *q as libc::c_int != (*ptr_to_globals).last_forward_char
                  {
                    q = q.offset(-1)
                  }
                  if q >= (*ptr_to_globals).text
                    && *q as libc::c_int == (*ptr_to_globals).last_forward_char
                  {
                    (*ptr_to_globals).dot = q
                  }
                  (*ptr_to_globals).cmdcnt -= 1;
                  if !((*ptr_to_globals).cmdcnt > 0) {
                    break;
                  }
                }
                current_block = 15129665204879337069;
              }
            }
            9018432604062702004 => {
              q = (*ptr_to_globals).dot;
              while q < (*ptr_to_globals).end && *q as libc::c_int != '\n' as i32 {
                if !strchr(
                  b"()[]{}\x00" as *const u8 as *const libc::c_char,
                  *q as libc::c_int,
                )
                .is_null()
                {
                  p = find_pair(q, *q);
                  if p.is_null() {
                    indicate_error();
                  } else {
                    (*ptr_to_globals).dot = p
                  }
                  break;
                } else {
                  q = q.offset(1)
                }
              }
              if *q as libc::c_int == '\n' as i32 {
                indicate_error();
              }
              current_block = 15129665204879337069;
            }
            10247103787464459848 => {
              p = (*ptr_to_globals).reg[(*ptr_to_globals).YDreg as usize];
              if p.is_null() {
                status_line_bold(
                  b"Nothing in register %c\x00" as *const u8 as *const libc::c_char,
                  what_reg() as libc::c_int,
                );
              } else {
                if !strchr(p, '\n' as i32).is_null() {
                  if c == 'P' as i32 {
                    dot_begin();
                  }
                  if c == 'p' as i32 {
                    if end_line((*ptr_to_globals).dot) == (*ptr_to_globals).end.offset(-1) {
                      (*ptr_to_globals).dot = (*ptr_to_globals).end
                    } else {
                      dot_next();
                    }
                  }
                } else if c == 'p' as i32 {
                  dot_right();
                }
                string_insert((*ptr_to_globals).dot, p, 1i32);
                end_cmd_q();
              }
              current_block = 15129665204879337069;
            }
            15260732871948875843 => {
              c1 = (get_one_char() | 0x20i32) - 'a' as i32;
              if c1 as libc::c_uint <= 25i32 as libc::c_uint {
                (*ptr_to_globals).mark[c1 as usize] = (*ptr_to_globals).dot
              } else {
                indicate_error();
              }
              current_block = 15129665204879337069;
            }
            12738322036487086035 => {
              c1 = get_one_char() | 0x20i32;
              if (c1 - 'a' as i32) as libc::c_uint <= 25i32 as libc::c_uint {
                c1 = c1 - 'a' as i32;
                q = (*ptr_to_globals).mark[c1 as usize];
                if (*ptr_to_globals).text <= q && q < (*ptr_to_globals).end {
                  (*ptr_to_globals).dot = q;
                  dot_begin();
                  dot_skip_over_ws();
                }
              } else if c1 == '\'' as i32 {
                (*ptr_to_globals).dot = swap_context((*ptr_to_globals).dot);
                dot_begin();
                dot_skip_over_ws();
              } else {
                indicate_error();
              }
              current_block = 15129665204879337069;
            }
            13255096073384561358 => {
              c1 = (get_one_char() | 0x20i32) - 'a' as i32;
              if c1 as libc::c_uint <= 25i32 as libc::c_uint {
                (*ptr_to_globals).YDreg = c1 as smalluint
              } else {
                indicate_error();
              }
              current_block = 15129665204879337069;
            }
            10258711639984089377 => {
              if (*ptr_to_globals).cmd_mode as libc::c_int == 0 {
                indicate_error();
              }
              (*ptr_to_globals).cmd_mode = 0 as smallint;
              undo_queue_commit();
              end_cmd_q();
              (*ptr_to_globals).last_status_cksum = 0;
              current_block = 15129665204879337069;
            }
            11439127087547047736 => {
              buf[0] = c as libc::c_char;
              buf[1] = '\u{0}' as i32 as libc::c_char;
              not_implemented(buf.as_mut_ptr());
              end_cmd_q();
              current_block = 17440971994642376514;
            }
            7961798899781870241 => {
              dot_scroll(
                (*ptr_to_globals).rows.wrapping_sub(2i32 as libc::c_uint) as libc::c_int,
                -1i32,
              );
              current_block = 15129665204879337069;
            }
            9426343755402444879 => {
              dot_scroll(
                (*ptr_to_globals)
                  .rows
                  .wrapping_sub(2i32 as libc::c_uint)
                  .wrapping_div(2i32 as libc::c_uint) as libc::c_int,
                1i32,
              );
              current_block = 15129665204879337069;
            }
            13352459794680105913 => {
              dot_scroll(1i32, 1i32);
              current_block = 15129665204879337069;
            }
            14142272253464333006 => {
              dot_scroll(
                (*ptr_to_globals).rows.wrapping_sub(2i32 as libc::c_uint) as libc::c_int,
                1i32,
              );
              current_block = 15129665204879337069;
            }
            10758177197742640066 => {
              (*ptr_to_globals).last_status_cksum = 0;
              current_block = 15129665204879337069;
            }
            6152256259730122749 => {
              current_block = 7534742345255184552;
            }
            12883932598258173301 => {
              current_block = 8800996768013373992;
            }
            11242998110520238401 => {
              redraw(1i32);
              current_block = 15129665204879337069;
            }
            13619733043935729992 => {
              loop {
                dot_next();
                dot_skip_over_ws();
                (*ptr_to_globals).cmdcnt -= 1;
                if !((*ptr_to_globals).cmdcnt > 0) {
                  break;
                }
              }
              current_block = 15129665204879337069;
            }
            9339065157412720613 => {
              dot_scroll(
                (*ptr_to_globals)
                  .rows
                  .wrapping_sub(2i32 as libc::c_uint)
                  .wrapping_div(2i32 as libc::c_uint) as libc::c_int,
                -1i32,
              );
              current_block = 15129665204879337069;
            }
            11447082683497798022 => {
              dot_scroll(1i32, -1i32);
              current_block = 15129665204879337069;
            }
            5182000506326660482 => {
              current_block = 13993698454868426881;
            }
            1105010766850597332 => {
              if !(*ptr_to_globals).reg[27].is_null() {
                p = begin_line((*ptr_to_globals).dot);
                q = end_line((*ptr_to_globals).dot);
                p = text_hole_delete(p, q, 1i32);
                p = p.offset(string_insert(p, (*ptr_to_globals).reg[27], 2i32) as isize);
                (*ptr_to_globals).dot = p;
                dot_skip_over_ws();
              }
              current_block = 15129665204879337069;
            }
            8616046655533110204 => {
              undo_pop();
              current_block = 15129665204879337069;
            }
            5127767458142431603 => {
              loop {
                (*ptr_to_globals).dot = end_line((*ptr_to_globals).dot);
                (*ptr_to_globals).cmdcnt -= 1;
                if (*ptr_to_globals).cmdcnt <= 0 {
                  break;
                }
                dot_next();
              }
              current_block = 15129665204879337069;
            }
            222014967776118151 => {
              (*ptr_to_globals).last_forward_char = get_one_char();
              current_block = 7856905509180742666;
            }
            11209792479411604110 => {
              loop {
                dot_prev();
                dot_skip_over_ws();
                (*ptr_to_globals).cmdcnt -= 1;
                if !((*ptr_to_globals).cmdcnt > 0) {
                  break;
                }
              }
              current_block = 15129665204879337069;
            }
            3364823792826654116 => {
              if (*ptr_to_globals).lmc_len != 0 {
                (*ptr_to_globals).ioq_start = crate::libbb::xfuncs_printf::xstrndup(
                  (*ptr_to_globals).last_modifying_cmd.as_mut_ptr(),
                  (*ptr_to_globals).lmc_len,
                );
                (*ptr_to_globals).ioq = (*ptr_to_globals).ioq_start
              }
              current_block = 15129665204879337069;
            }
            18096603330221575131 => {
              current_block = 17498168302144015873;
            }
            16891123271837848903 => {
              dot_end();
              current_block = 1752638907092016026;
            }
            8517235759107662071 => {
              current_block = 5847749760081351726;
            }
            12525254419223051704 => {
              if (*ptr_to_globals).dot < (*ptr_to_globals).end.offset(-1) {
                (*ptr_to_globals).dot = yank_delete(
                  (*ptr_to_globals).dot,
                  (*ptr_to_globals).dot,
                  1i32,
                  YANKDEL as libc::c_int,
                  1i32,
                )
              }
              current_block = 15129665204879337069;
            }
            15232911949322867522 => {
              current_block = 17251831742223396249;
            }
            10863374208794025069 => {
              current_block = 1895262434596074581;
            }
            451126677064669119 => {
              loop {
                dot_prev();
                (*ptr_to_globals).dot = move_to_col(
                  (*ptr_to_globals).dot,
                  (*ptr_to_globals).ccol + (*ptr_to_globals).offset,
                );
                (*ptr_to_globals).cmdcnt -= 1;
                if !((*ptr_to_globals).cmdcnt > 0) {
                  break;
                }
              }
              current_block = 15129665204879337069;
            }
            4611735929166613116 => {
              loop {
                if bb_ascii_isalnum(*(*ptr_to_globals).dot as libc::c_uchar) != 0
                  || *(*ptr_to_globals).dot as libc::c_int == '_' as i32
                {
                  (*ptr_to_globals).dot = skip_thing(
                    (*ptr_to_globals).dot,
                    1i32,
                    FORWARD as libc::c_int,
                    S_END_ALNUM as libc::c_int,
                  )
                } else if *strchrnul(
                  b"!\"#$%&\'()*+,-./:;<=>?@[\\]^_`{|}~\x00" as *const u8 as *const libc::c_char,
                  *(*ptr_to_globals).dot as libc::c_int,
                )
                .offset(0)
                  != 0
                {
                  (*ptr_to_globals).dot = skip_thing(
                    (*ptr_to_globals).dot,
                    1i32,
                    FORWARD as libc::c_int,
                    S_END_PUNCT as libc::c_int,
                  )
                }
                if (*ptr_to_globals).dot < (*ptr_to_globals).end.offset(-1) {
                  (*ptr_to_globals).dot = (*ptr_to_globals).dot.offset(1)
                }
                if ({
                  let mut bb__isspace: libc::c_uchar =
                    (*(*ptr_to_globals).dot as libc::c_int - 9i32) as libc::c_uchar;
                  (bb__isspace as libc::c_int == ' ' as i32 - 9i32
                    || bb__isspace as libc::c_int <= 13i32 - 9i32) as libc::c_int
                }) != 0
                {
                  (*ptr_to_globals).dot = skip_thing(
                    (*ptr_to_globals).dot,
                    2i32,
                    FORWARD as libc::c_int,
                    S_OVER_WS as libc::c_int,
                  )
                }
                (*ptr_to_globals).cmdcnt -= 1;
                if !((*ptr_to_globals).cmdcnt > 0) {
                  break;
                }
              }
              current_block = 15129665204879337069;
            }
            4386451087681909888 => {
              (*ptr_to_globals).dot =
                move_to_col((*ptr_to_globals).dot, (*ptr_to_globals).cmdcnt - 1i32);
              current_block = 15129665204879337069;
            }
            1296397779060594135 => {
              dot_begin();
              current_block = 15129665204879337069;
            }
            _ => {}
          }
          match current_block {
            15129665204879337069 => {}
            8629930936610358348 => {}
            _ => {
              match current_block {
                17251831742223396249 => {
                  dir = 0;
                  if c == 'X' as i32 {
                    dir = -1i32
                  }
                  loop {
                    if *(*ptr_to_globals).dot.offset(dir as isize) as libc::c_int != '\n' as i32 {
                      if c == 'X' as i32 {
                        (*ptr_to_globals).dot = (*ptr_to_globals).dot.offset(-1)
                      }
                      (*ptr_to_globals).dot = yank_delete(
                        (*ptr_to_globals).dot,
                        (*ptr_to_globals).dot,
                        0,
                        YANKDEL as libc::c_int,
                        1i32,
                      )
                    }
                    (*ptr_to_globals).cmdcnt -= 1;
                    if !((*ptr_to_globals).cmdcnt > 0) {
                      break;
                    }
                  }
                  end_cmd_q();
                  if c == 's' as i32 {
                    current_block = 8629930936610358348;
                  } else {
                    current_block = 15129665204879337069;
                  }
                }
                2087484904894455135 => {
                  dot_end();
                  (*ptr_to_globals).dot =
                    char_insert((*ptr_to_globals).dot, '\n' as i32 as libc::c_char, 1i32);
                  current_block = 8629930936610358348;
                }
                11945623545738147997 => {
                  (*ptr_to_globals).dot = (*ptr_to_globals).end.offset(-1);
                  if (*ptr_to_globals).cmdcnt > 0 {
                    (*ptr_to_globals).dot = find_line((*ptr_to_globals).cmdcnt)
                  }
                  dot_skip_over_ws();
                  current_block = 15129665204879337069;
                }
                5847749760081351726 => {
                  dir = FORWARD as libc::c_int;
                  if c == 'B' as i32 {
                    dir = BACK as libc::c_int
                  }
                  loop {
                    if c == 'W' as i32
                      || ({
                        let mut bb__isspace: libc::c_uchar =
                          (*(*ptr_to_globals).dot.offset(dir as isize) as libc::c_int - 9i32)
                            as libc::c_uchar;
                        (bb__isspace as libc::c_int == ' ' as i32 - 9i32
                          || bb__isspace as libc::c_int <= 13i32 - 9i32)
                          as libc::c_int
                      }) != 0
                    {
                      (*ptr_to_globals).dot =
                        skip_thing((*ptr_to_globals).dot, 1i32, dir, S_TO_WS as libc::c_int);
                      (*ptr_to_globals).dot =
                        skip_thing((*ptr_to_globals).dot, 2i32, dir, S_OVER_WS as libc::c_int)
                    }
                    if c != 'W' as i32 {
                      (*ptr_to_globals).dot =
                        skip_thing((*ptr_to_globals).dot, 1i32, dir, S_BEFORE_WS as libc::c_int)
                    }
                    (*ptr_to_globals).cmdcnt -= 1;
                    if !((*ptr_to_globals).cmdcnt > 0) {
                      break;
                    }
                  }
                  current_block = 15129665204879337069;
                }
                17440971994642376514 => {
                  current_block = 15129665204879337069;
                }
                7534742345255184552 => {
                  current_block = 17247297260531395789;
                }
                8800996768013373992 => {
                  loop {
                    dot_next();
                    (*ptr_to_globals).dot = move_to_col(
                      (*ptr_to_globals).dot,
                      (*ptr_to_globals).ccol + (*ptr_to_globals).offset,
                    );
                    (*ptr_to_globals).cmdcnt -= 1;
                    if !((*ptr_to_globals).cmdcnt > 0) {
                      break;
                    }
                  }
                  current_block = 15129665204879337069;
                }
                13993698454868426881 => {
                  loop {
                    dot_right();
                    (*ptr_to_globals).cmdcnt -= 1;
                    if !((*ptr_to_globals).cmdcnt > 0) {
                      break;
                    }
                  }
                  current_block = 15129665204879337069;
                }
                7856905509180742666 => {
                  while !((*ptr_to_globals).last_forward_char == 0) {
                    q = (*ptr_to_globals).dot.offset(1);
                    while q < (*ptr_to_globals).end.offset(-1)
                      && *q as libc::c_int != '\n' as i32
                      && *q as libc::c_int != (*ptr_to_globals).last_forward_char
                    {
                      q = q.offset(1)
                    }
                    if *q as libc::c_int == (*ptr_to_globals).last_forward_char {
                      (*ptr_to_globals).dot = q
                    }
                    (*ptr_to_globals).cmdcnt -= 1;
                    if !((*ptr_to_globals).cmdcnt > 0) {
                      break;
                    }
                  }
                  current_block = 15129665204879337069;
                }
                17498168302144015873 => {
                  current_block = 8681395796513813967;
                }
                1752638907092016026 => {
                  if *(*ptr_to_globals).dot as libc::c_int != '\n' as i32 {
                    (*ptr_to_globals).dot = (*ptr_to_globals).dot.offset(1)
                  }
                  current_block = 8629930936610358348;
                }
                3268579060917229304 => {
                  current_block = 8629930936610358348;
                }
                1895262434596074581 => {
                  current_block = 8908416993177701018;
                }
                _ => {}
              }
              match current_block {
                8629930936610358348 => {}
                15129665204879337069 => {}
                _ => {
                  match current_block {
                    17247297260531395789 => {
                      loop {
                        dot_left();
                        (*ptr_to_globals).cmdcnt -= 1;
                        if !((*ptr_to_globals).cmdcnt > 0) {
                          break;
                        }
                      }
                      current_block = 15129665204879337069;
                    }
                    8681395796513813967 => {
                      current_block = 5591548203144509315;
                    }
                    8908416993177701018 => {
                      current_block = 16124761010012532485;
                    }
                    _ => {}
                  }
                  match current_block {
                    15129665204879337069 => {}
                    _ => {
                      match current_block {
                        16124761010012532485 => {
                          let mut yf: libc::c_int = 0;
                          let mut ml: libc::c_int = 0;
                          let mut whole: libc::c_int = 0;
                          yf = YANKDEL as libc::c_int;
                          if c == 'y' as i32 || c == 'Y' as i32 {
                            yf = YANKONLY as libc::c_int
                          }
                          c1 = 'y' as i32;
                          if c != 'Y' as i32 {
                            c1 = get_one_char()
                          }
                          ml = find_range(&mut p, &mut q, c1 as libc::c_char);
                          place_cursor(0i32, 0);
                          if c1 == 27i32 {
                            c1 = 27i32;
                            c = c1
                          } else if !strchr(b"wW\x00" as *const u8 as *const libc::c_char, c1)
                            .is_null()
                          {
                            ml = 0;
                            if c == 'c' as i32 {
                              while ({
                                let mut bb__isspace: libc::c_uchar =
                                  (*q as libc::c_int - 9i32) as libc::c_uchar;
                                (bb__isspace as libc::c_int == ' ' as i32 - 9i32
                                  || bb__isspace as libc::c_int <= 13i32 - 9i32)
                                  as libc::c_int
                              }) != 0
                                && q > p
                              {
                                q = q.offset(-1)
                              }
                            }
                            (*ptr_to_globals).dot = yank_delete(p, q, ml, yf, 1i32)
                          } else if !strchr(
                            b"^0bBeEft%$ lh\x08\x7f\x00" as *const u8 as *const libc::c_char,
                            c1,
                          )
                          .is_null()
                          {
                            (*ptr_to_globals).dot = yank_delete(p, q, ml, yf, 1i32)
                          } else if !strchr(
                            b"cdykjGHL+-{}\r\n\x00" as *const u8 as *const libc::c_char,
                            c1,
                          )
                          .is_null()
                          {
                            (*ptr_to_globals).dot = yank_delete(p, q, ml, yf, 1i32);
                            whole = 1i32
                          } else {
                            c1 = 27i32;
                            c = c1;
                            ml = 0;
                            indicate_error();
                          }
                          if ml != 0 && whole != 0 {
                            if c == 'c' as i32 {
                              (*ptr_to_globals).dot = char_insert(
                                (*ptr_to_globals).dot,
                                '\n' as i32 as libc::c_char,
                                2i32,
                              );
                              if whole != 0
                                && (*ptr_to_globals).dot != (*ptr_to_globals).end.offset(-1)
                              {
                                dot_prev();
                              }
                            } else if c == 'd' as i32 {
                              dot_begin();
                              dot_skip_over_ws();
                            }
                          }
                          if c1 != 27i32 {
                            if c == 'c' as i32 {
                              strcpy(
                                buf.as_mut_ptr(),
                                b"Change\x00" as *const u8 as *const libc::c_char,
                              );
                              current_block = 8629930936610358348;
                            } else {
                              if c == 'd' as i32 {
                                strcpy(
                                  buf.as_mut_ptr(),
                                  b"Delete\x00" as *const u8 as *const libc::c_char,
                                );
                              }
                              if c == 'y' as i32 || c == 'Y' as i32 {
                                strcpy(
                                  buf.as_mut_ptr(),
                                  b"Yank\x00" as *const u8 as *const libc::c_char,
                                );
                              }
                              p = (*ptr_to_globals).reg[(*ptr_to_globals).YDreg as usize];
                              q = p.offset(strlen(p) as isize);
                              cnt = 0;
                              while p <= q {
                                if *p as libc::c_int == '\n' as i32 {
                                  cnt += 1
                                }
                                p = p.offset(1)
                              }
                              status_line(
                                b"%s %u lines (%u chars) using [%c]\x00" as *const u8
                                  as *const libc::c_char,
                                buf.as_mut_ptr(),
                                cnt,
                                strlen((*ptr_to_globals).reg[(*ptr_to_globals).YDreg as usize])
                                  as libc::c_uint,
                                what_reg() as libc::c_int,
                              );
                              end_cmd_q();
                              current_block = 15129665204879337069;
                            }
                          } else {
                            current_block = 15129665204879337069;
                          }
                        }
                        5591548203144509315 => {
                          current_block = 2636677179867529885;
                        }
                        _ => {}
                      }
                      match current_block {
                        15129665204879337069 => {}
                        8629930936610358348 => {}
                        _ => {
                          match current_block {
                            2636677179867529885 => {
                              current_block = 12309206730560524281;
                            }
                            _ => {}
                          }
                          match current_block {
                            12309206730560524281 => {
                              current_block = 3325768110057758661;
                            }
                            _ => {}
                          }
                          match current_block {
                            3325768110057758661 => {
                              current_block = 14815832896553429982;
                            }
                            _ => {}
                          }
                          match current_block {
                            14815832896553429982 => {
                              current_block = 10731695520297161438;
                            }
                            _ => {}
                          }
                          match current_block {
                            10731695520297161438 => {
                              if c == '0' as i32 && (*ptr_to_globals).cmdcnt < 1i32 {
                                dot_begin();
                              } else {
                                (*ptr_to_globals).cmdcnt =
                                  (*ptr_to_globals).cmdcnt * 10i32 + (c - '0' as i32)
                              }
                              current_block = 15129665204879337069;
                            }
                            _ => {}
                          }
                          match current_block {
                            15129665204879337069 => {}
                            _ => {
                              loop {
                                match current_block {
                                  16813369756331276724 => {
                                    msg = std::ptr::null();
                                    current_block = 7392824444931029276;
                                  }
                                  7392824444931029276 => {
                                    dir = FORWARD as libc::c_int;
                                    p = (*ptr_to_globals).dot.offset(1);
                                    if *(*ptr_to_globals).last_search_pattern.offset(0)
                                      as libc::c_int
                                      == '?' as i32
                                    {
                                      dir = BACK as libc::c_int;
                                      p = (*ptr_to_globals).dot.offset(-1)
                                    }
                                    current_block = 4166979493554389389;
                                  }
                                  _ => {
                                    q = char_search(
                                      p,
                                      (*ptr_to_globals).last_search_pattern.offset(1),
                                      dir << 1i32 | FULL as libc::c_int,
                                    );
                                    if !q.is_null() {
                                      (*ptr_to_globals).dot = q;
                                      msg = std::ptr::null()
                                    } else {
                                      p = (*ptr_to_globals).text;
                                      if dir == BACK as libc::c_int {
                                        p = (*ptr_to_globals).end.offset(-1)
                                      }
                                      q = char_search(
                                        p,
                                        (*ptr_to_globals).last_search_pattern.offset(1),
                                        dir << 1i32 | FULL as libc::c_int,
                                      );
                                      if !q.is_null() {
                                        (*ptr_to_globals).dot = q;
                                        msg = b"search hit BOTTOM, continuing at TOP\x00"
                                          as *const u8
                                          as *const libc::c_char;
                                        if dir == BACK as libc::c_int {
                                          msg = b"search hit TOP, continuing at BOTTOM\x00"
                                            as *const u8
                                            as *const libc::c_char
                                        }
                                      } else {
                                        msg = b"Pattern not found\x00" as *const u8
                                          as *const libc::c_char
                                      }
                                    }
                                    if !msg.is_null() {
                                      status_line_bold(
                                        b"%s\x00" as *const u8 as *const libc::c_char,
                                        msg,
                                      );
                                    }
                                    (*ptr_to_globals).cmdcnt -= 1;
                                    if (*ptr_to_globals).cmdcnt > 0 {
                                      current_block = 16813369756331276724;
                                    } else {
                                      break;
                                    }
                                  }
                                }
                              }
                              current_block = 15129665204879337069;
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
        -6 => {
          current_block = 1296397779060594135;
          match current_block {
            16992905640583886232 => {
              loop {
                if (*(*ptr_to_globals).dot as libc::c_int - 'a' as i32) as libc::c_uchar
                  as libc::c_int
                  <= 'z' as i32 - 'a' as i32
                {
                  undo_push(
                    (*ptr_to_globals).dot,
                    1i32 as libc::c_uint,
                    1i32 as libc::c_uchar,
                  );
                  *(*ptr_to_globals).dot =
                    bb_ascii_toupper(*(*ptr_to_globals).dot as libc::c_uchar) as libc::c_char;
                  undo_push(
                    (*ptr_to_globals).dot,
                    1i32 as libc::c_uint,
                    2i32 as libc::c_uchar,
                  );
                } else if (*(*ptr_to_globals).dot as libc::c_int - 'A' as i32) as libc::c_uchar
                  as libc::c_int
                  <= 'Z' as i32 - 'A' as i32
                {
                  undo_push(
                    (*ptr_to_globals).dot,
                    1i32 as libc::c_uint,
                    1i32 as libc::c_uchar,
                  );
                  *(*ptr_to_globals).dot =
                    bb_ascii_tolower(*(*ptr_to_globals).dot as libc::c_uchar) as libc::c_char;
                  undo_push(
                    (*ptr_to_globals).dot,
                    1i32 as libc::c_uint,
                    2i32 as libc::c_uchar,
                  );
                }
                dot_right();
                (*ptr_to_globals).cmdcnt -= 1;
                if !((*ptr_to_globals).cmdcnt > 0) {
                  break;
                }
              }
              end_cmd_q();
              current_block = 15129665204879337069;
            }
            8729655159604064397 => {
              c1 = get_one_char();
              cnt = 0;
              if c1 == '.' as i32 {
                cnt = (*ptr_to_globals)
                  .rows
                  .wrapping_sub(2i32 as libc::c_uint)
                  .wrapping_div(2i32 as libc::c_uint) as libc::c_int
              }
              if c1 == '-' as i32 {
                cnt = (*ptr_to_globals).rows.wrapping_sub(2i32 as libc::c_uint) as libc::c_int
              }
              (*ptr_to_globals).screenbegin = begin_line((*ptr_to_globals).dot);
              dot_scroll(cnt, -1i32);
              current_block = 15129665204879337069;
            }
            15899500648299942075 => {
              (*ptr_to_globals).last_forward_char = get_one_char();
              do_cmd(';' as i32);
              if *(*ptr_to_globals).dot as libc::c_int == (*ptr_to_globals).last_forward_char {
                dot_left();
              }
              (*ptr_to_globals).last_forward_char = 0;
              current_block = 15129665204879337069;
            }
            9051390181078481641 => {
              c1 = get_one_char();
              if *(*ptr_to_globals).dot as libc::c_int != '\n' as i32 {
                (*ptr_to_globals).dot =
                  text_hole_delete((*ptr_to_globals).dot, (*ptr_to_globals).dot, 1i32);
                (*ptr_to_globals).dot =
                  char_insert((*ptr_to_globals).dot, c1 as libc::c_char, 2i32);
                dot_left();
              }
              end_cmd_q();
              current_block = 15129665204879337069;
            }
            877115918601926659 => {
              dir = FORWARD as libc::c_int;
              if c == 'b' as i32 {
                dir = BACK as libc::c_int
              }
              while !((*ptr_to_globals).dot.offset(dir as isize) < (*ptr_to_globals).text
                || (*ptr_to_globals).dot.offset(dir as isize) > (*ptr_to_globals).end.offset(-1))
              {
                (*ptr_to_globals).dot = (*ptr_to_globals).dot.offset(dir as isize);
                if ({
                  let mut bb__isspace: libc::c_uchar =
                    (*(*ptr_to_globals).dot as libc::c_int - 9i32) as libc::c_uchar;
                  (bb__isspace as libc::c_int == ' ' as i32 - 9i32
                    || bb__isspace as libc::c_int <= 13i32 - 9i32) as libc::c_int
                }) != 0
                {
                  (*ptr_to_globals).dot = skip_thing(
                    (*ptr_to_globals).dot,
                    if c == 'e' as i32 { 2i32 } else { 1i32 },
                    dir,
                    S_OVER_WS as libc::c_int,
                  )
                }
                if bb_ascii_isalnum(*(*ptr_to_globals).dot as libc::c_uchar) != 0
                  || *(*ptr_to_globals).dot as libc::c_int == '_' as i32
                {
                  (*ptr_to_globals).dot =
                    skip_thing((*ptr_to_globals).dot, 1i32, dir, S_END_ALNUM as libc::c_int)
                } else if *strchrnul(
                  b"!\"#$%&\'()*+,-./:;<=>?@[\\]^_`{|}~\x00" as *const u8 as *const libc::c_char,
                  *(*ptr_to_globals).dot as libc::c_int,
                )
                .offset(0)
                  != 0
                {
                  (*ptr_to_globals).dot =
                    skip_thing((*ptr_to_globals).dot, 1i32, dir, S_END_PUNCT as libc::c_int)
                }
                (*ptr_to_globals).cmdcnt -= 1;
                if !((*ptr_to_globals).cmdcnt > 0) {
                  break;
                }
              }
              current_block = 15129665204879337069;
            }
            1085022737867179637 => {
              dot_begin();
              dot_skip_over_ws();
              current_block = 15129665204879337069;
            }
            3113147720494587438 => {
              c1 = get_one_char();
              if c1 != 'Z' as i32 {
                indicate_error();
              } else if (*ptr_to_globals).modified_count != 0 {
                if 1i32 != 0 && (*ptr_to_globals).readonly_mode as libc::c_int != 0 {
                  status_line_bold(
                    b"\'%s\' is read only\x00" as *const u8 as *const libc::c_char,
                    (*ptr_to_globals).current_filename,
                  );
                } else {
                  cnt = file_write(
                    (*ptr_to_globals).current_filename,
                    (*ptr_to_globals).text,
                    (*ptr_to_globals).end.offset(-1),
                  );
                  if cnt < 0 {
                    if cnt == -1i32 {
                      status_line_bold(b"Write error: %m\x00" as *const u8 as *const libc::c_char);
                    }
                  } else if cnt as libc::c_long
                    == (*ptr_to_globals)
                      .end
                      .offset(-1)
                      .wrapping_offset_from((*ptr_to_globals).text)
                      as libc::c_long
                      + 1
                  {
                    (*ptr_to_globals).editing = 0 as smallint
                  }
                }
              } else {
                (*ptr_to_globals).editing = 0 as smallint
              }
              current_block = 15129665204879337069;
            }
            12960118908218882441 => {
              p = begin_line((*ptr_to_globals).dot);
              if *p.offset(-1i32 as isize) as libc::c_int == '\n' as i32 {
                dot_prev();
                current_block = 2087484904894455135;
              } else {
                dot_begin();
                (*ptr_to_globals).dot =
                  char_insert((*ptr_to_globals).dot, '\n' as i32 as libc::c_char, 1i32);
                dot_prev();
                current_block = 8629930936610358348;
              }
            }
            8720450212473544924 => {
              (*ptr_to_globals).dot = (*ptr_to_globals).screenbegin;
              cnt = 0;
              while (cnt as libc::c_uint)
                < (*ptr_to_globals)
                  .rows
                  .wrapping_sub(1i32 as libc::c_uint)
                  .wrapping_div(2i32 as libc::c_uint)
              {
                (*ptr_to_globals).dot = next_line((*ptr_to_globals).dot);
                cnt += 1
              }
              current_block = 15129665204879337069;
            }
            13015277209715431090 => {
              (*ptr_to_globals).dot = end_screen();
              if (*ptr_to_globals).cmdcnt as libc::c_uint
                > (*ptr_to_globals).rows.wrapping_sub(1i32 as libc::c_uint)
              {
                (*ptr_to_globals).cmdcnt =
                  (*ptr_to_globals).rows.wrapping_sub(1i32 as libc::c_uint) as libc::c_int
              }
              (*ptr_to_globals).cmdcnt -= 1;
              if (*ptr_to_globals).cmdcnt > 0 {
                do_cmd('-' as i32);
              }
              dot_begin();
              dot_skip_over_ws();
              current_block = 15129665204879337069;
            }
            9800435767766781385 => {
              loop {
                dot_end();
                if (*ptr_to_globals).dot < (*ptr_to_globals).end.offset(-1) {
                  undo_push(
                    (*ptr_to_globals).dot,
                    1i32 as libc::c_uint,
                    1i32 as libc::c_uchar,
                  );
                  let fresh15 = (*ptr_to_globals).dot;
                  (*ptr_to_globals).dot = (*ptr_to_globals).dot.offset(1);
                  *fresh15 = ' ' as i32 as libc::c_char;
                  undo_push(
                    (*ptr_to_globals).dot.offset(-1),
                    1i32 as libc::c_uint,
                    2i32 as libc::c_uchar,
                  );
                  while ({
                    let mut bb__isblank: libc::c_uchar = *(*ptr_to_globals).dot as libc::c_uchar;
                    (bb__isblank as libc::c_int == ' ' as i32
                      || bb__isblank as libc::c_int == '\t' as i32)
                      as libc::c_int
                  }) != 0
                  {
                    text_hole_delete((*ptr_to_globals).dot, (*ptr_to_globals).dot, 2i32);
                  }
                }
                (*ptr_to_globals).cmdcnt -= 1;
                if !((*ptr_to_globals).cmdcnt > 0) {
                  break;
                }
              }
              end_cmd_q();
              current_block = 15129665204879337069;
            }
            3432363526595694666 => {
              dot_begin();
              dot_skip_over_ws();
              current_block = 3268579060917229304;
            }
            3494829253343353619 => {
              (*ptr_to_globals).dot = (*ptr_to_globals).screenbegin;
              if (*ptr_to_globals).cmdcnt as libc::c_uint
                > (*ptr_to_globals).rows.wrapping_sub(1i32 as libc::c_uint)
              {
                (*ptr_to_globals).cmdcnt =
                  (*ptr_to_globals).rows.wrapping_sub(1i32 as libc::c_uint) as libc::c_int
              }
              (*ptr_to_globals).cmdcnt -= 1;
              if (*ptr_to_globals).cmdcnt > 0 {
                do_cmd('+' as i32);
              }
              dot_skip_over_ws();
              current_block = 15129665204879337069;
            }
            17973101765331640574 => {
              c1 = get_one_char();
              if c1 != 'g' as i32 {
                buf[0] = 'g' as i32 as libc::c_char;
                buf[1] = if c1 >= 0 { c1 } else { '*' as i32 } as libc::c_char;
                buf[2] = '\u{0}' as i32 as libc::c_char;
                not_implemented(buf.as_mut_ptr());
                current_block = 15129665204879337069;
              } else {
                if (*ptr_to_globals).cmdcnt == 0 {
                  (*ptr_to_globals).cmdcnt = 1i32
                }
                current_block = 11945623545738147997;
              }
            }
            16546625800574160972 => {
              save_dot = (*ptr_to_globals).dot;
              (*ptr_to_globals).dot = dollar_line((*ptr_to_globals).dot);
              (*ptr_to_globals).dot = yank_delete(
                save_dot,
                (*ptr_to_globals).dot,
                0,
                YANKDEL as libc::c_int,
                1i32,
              );
              if c == 'C' as i32 {
                current_block = 8629930936610358348;
              } else {
                if c == 'D' as i32 {
                  end_cmd_q();
                }
                current_block = 15129665204879337069;
              }
            }
            11937696639986586685 => {
              cnt = count_lines((*ptr_to_globals).text, (*ptr_to_globals).dot);
              c1 = get_one_char();
              find_range(&mut p, &mut q, c1 as libc::c_char);
              yank_delete(p, q, 1i32, YANKONLY as libc::c_int, 0);
              p = begin_line(p);
              q = end_line(q);
              i = count_lines(p, q);
              while i > 0 {
                if c == '<' as i32 {
                  if *p as libc::c_int == '\t' as i32 {
                    text_hole_delete(p, p, 0);
                  } else if *p as libc::c_int == ' ' as i32 {
                    j = 0;
                    while *p as libc::c_int == ' ' as i32 && j < (*ptr_to_globals).tabstop {
                      text_hole_delete(p, p, 0);
                      j += 1
                    }
                  }
                } else if c == '>' as i32 {
                  char_insert(p, '\t' as i32 as libc::c_char, 1i32);
                }
                i -= 1;
                p = next_line(p)
              }
              (*ptr_to_globals).dot = find_line(cnt);
              dot_skip_over_ws();
              end_cmd_q();
              current_block = 15129665204879337069;
            }
            17725350714912028156 => {
              p = get_input_line(b":\x00" as *const u8 as *const libc::c_char);
              colon(p);
              current_block = 15129665204879337069;
            }
            14526470074083880812 => {
              q = char_search(
                (*ptr_to_globals).dot,
                b"\n\n\x00" as *const u8 as *const libc::c_char,
                (FORWARD as libc::c_int) << 1i32 | FULL as libc::c_int,
              );
              if !q.is_null() {
                (*ptr_to_globals).dot = next_line(q)
              }
              current_block = 15129665204879337069;
            }
            8893187391306414141 => {
              q = char_search(
                (*ptr_to_globals).dot,
                b"\n\n\x00" as *const u8 as *const libc::c_char,
                ((BACK as libc::c_int as libc::c_uint) << 1i32
                  | FULL as libc::c_int as libc::c_uint) as libc::c_int,
              );
              if !q.is_null() {
                (*ptr_to_globals).dot = next_line(q)
              }
              current_block = 15129665204879337069;
            }
            7021673758293221412 => {
              dir = BACK as libc::c_int;
              p = (*ptr_to_globals).dot.offset(-1);
              if *(*ptr_to_globals).last_search_pattern.offset(0) as libc::c_int == '?' as i32 {
                dir = FORWARD as libc::c_int;
                p = (*ptr_to_globals).dot.offset(1)
              }
              current_block = 4166979493554389389;
            }
            18374191879090272823 => {
              buf[0] = c as libc::c_char;
              buf[1] = '\u{0}' as i32 as libc::c_char;
              q = get_input_line(buf.as_mut_ptr());
              if *q.offset(0) as libc::c_int != 0 && *q.offset(1) == 0 {
                if *(*ptr_to_globals).last_search_pattern.offset(0) != 0 {
                  *(*ptr_to_globals).last_search_pattern.offset(0) = c as libc::c_char
                }
                current_block = 7392824444931029276;
              } else if *q.offset(0) != 0 {
                free((*ptr_to_globals).last_search_pattern as *mut libc::c_void);
                (*ptr_to_globals).last_search_pattern = crate::libbb::xfuncs_printf::xstrdup(q);
                current_block = 7392824444931029276;
              } else {
                current_block = 15129665204879337069;
              }
            }
            16407828456666301883 => {
              if (*ptr_to_globals).last_forward_char == 0 {
                current_block = 15129665204879337069;
              } else {
                loop {
                  q = (*ptr_to_globals).dot.offset(-1);
                  while q >= (*ptr_to_globals).text
                    && *q as libc::c_int != '\n' as i32
                    && *q as libc::c_int != (*ptr_to_globals).last_forward_char
                  {
                    q = q.offset(-1)
                  }
                  if q >= (*ptr_to_globals).text
                    && *q as libc::c_int == (*ptr_to_globals).last_forward_char
                  {
                    (*ptr_to_globals).dot = q
                  }
                  (*ptr_to_globals).cmdcnt -= 1;
                  if !((*ptr_to_globals).cmdcnt > 0) {
                    break;
                  }
                }
                current_block = 15129665204879337069;
              }
            }
            9018432604062702004 => {
              q = (*ptr_to_globals).dot;
              while q < (*ptr_to_globals).end && *q as libc::c_int != '\n' as i32 {
                if !strchr(
                  b"()[]{}\x00" as *const u8 as *const libc::c_char,
                  *q as libc::c_int,
                )
                .is_null()
                {
                  p = find_pair(q, *q);
                  if p.is_null() {
                    indicate_error();
                  } else {
                    (*ptr_to_globals).dot = p
                  }
                  break;
                } else {
                  q = q.offset(1)
                }
              }
              if *q as libc::c_int == '\n' as i32 {
                indicate_error();
              }
              current_block = 15129665204879337069;
            }
            10247103787464459848 => {
              p = (*ptr_to_globals).reg[(*ptr_to_globals).YDreg as usize];
              if p.is_null() {
                status_line_bold(
                  b"Nothing in register %c\x00" as *const u8 as *const libc::c_char,
                  what_reg() as libc::c_int,
                );
              } else {
                if !strchr(p, '\n' as i32).is_null() {
                  if c == 'P' as i32 {
                    dot_begin();
                  }
                  if c == 'p' as i32 {
                    if end_line((*ptr_to_globals).dot) == (*ptr_to_globals).end.offset(-1) {
                      (*ptr_to_globals).dot = (*ptr_to_globals).end
                    } else {
                      dot_next();
                    }
                  }
                } else if c == 'p' as i32 {
                  dot_right();
                }
                string_insert((*ptr_to_globals).dot, p, 1i32);
                end_cmd_q();
              }
              current_block = 15129665204879337069;
            }
            15260732871948875843 => {
              c1 = (get_one_char() | 0x20i32) - 'a' as i32;
              if c1 as libc::c_uint <= 25i32 as libc::c_uint {
                (*ptr_to_globals).mark[c1 as usize] = (*ptr_to_globals).dot
              } else {
                indicate_error();
              }
              current_block = 15129665204879337069;
            }
            12738322036487086035 => {
              c1 = get_one_char() | 0x20i32;
              if (c1 - 'a' as i32) as libc::c_uint <= 25i32 as libc::c_uint {
                c1 = c1 - 'a' as i32;
                q = (*ptr_to_globals).mark[c1 as usize];
                if (*ptr_to_globals).text <= q && q < (*ptr_to_globals).end {
                  (*ptr_to_globals).dot = q;
                  dot_begin();
                  dot_skip_over_ws();
                }
              } else if c1 == '\'' as i32 {
                (*ptr_to_globals).dot = swap_context((*ptr_to_globals).dot);
                dot_begin();
                dot_skip_over_ws();
              } else {
                indicate_error();
              }
              current_block = 15129665204879337069;
            }
            13255096073384561358 => {
              c1 = (get_one_char() | 0x20i32) - 'a' as i32;
              if c1 as libc::c_uint <= 25i32 as libc::c_uint {
                (*ptr_to_globals).YDreg = c1 as smalluint
              } else {
                indicate_error();
              }
              current_block = 15129665204879337069;
            }
            10258711639984089377 => {
              if (*ptr_to_globals).cmd_mode as libc::c_int == 0 {
                indicate_error();
              }
              (*ptr_to_globals).cmd_mode = 0 as smallint;
              undo_queue_commit();
              end_cmd_q();
              (*ptr_to_globals).last_status_cksum = 0;
              current_block = 15129665204879337069;
            }
            11439127087547047736 => {
              buf[0] = c as libc::c_char;
              buf[1] = '\u{0}' as i32 as libc::c_char;
              not_implemented(buf.as_mut_ptr());
              end_cmd_q();
              current_block = 17440971994642376514;
            }
            7961798899781870241 => {
              dot_scroll(
                (*ptr_to_globals).rows.wrapping_sub(2i32 as libc::c_uint) as libc::c_int,
                -1i32,
              );
              current_block = 15129665204879337069;
            }
            9426343755402444879 => {
              dot_scroll(
                (*ptr_to_globals)
                  .rows
                  .wrapping_sub(2i32 as libc::c_uint)
                  .wrapping_div(2i32 as libc::c_uint) as libc::c_int,
                1i32,
              );
              current_block = 15129665204879337069;
            }
            13352459794680105913 => {
              dot_scroll(1i32, 1i32);
              current_block = 15129665204879337069;
            }
            14142272253464333006 => {
              dot_scroll(
                (*ptr_to_globals).rows.wrapping_sub(2i32 as libc::c_uint) as libc::c_int,
                1i32,
              );
              current_block = 15129665204879337069;
            }
            10758177197742640066 => {
              (*ptr_to_globals).last_status_cksum = 0;
              current_block = 15129665204879337069;
            }
            6152256259730122749 => {
              current_block = 7534742345255184552;
            }
            12883932598258173301 => {
              current_block = 8800996768013373992;
            }
            11242998110520238401 => {
              redraw(1i32);
              current_block = 15129665204879337069;
            }
            13619733043935729992 => {
              loop {
                dot_next();
                dot_skip_over_ws();
                (*ptr_to_globals).cmdcnt -= 1;
                if !((*ptr_to_globals).cmdcnt > 0) {
                  break;
                }
              }
              current_block = 15129665204879337069;
            }
            9339065157412720613 => {
              dot_scroll(
                (*ptr_to_globals)
                  .rows
                  .wrapping_sub(2i32 as libc::c_uint)
                  .wrapping_div(2i32 as libc::c_uint) as libc::c_int,
                -1i32,
              );
              current_block = 15129665204879337069;
            }
            11447082683497798022 => {
              dot_scroll(1i32, -1i32);
              current_block = 15129665204879337069;
            }
            5182000506326660482 => {
              current_block = 13993698454868426881;
            }
            1105010766850597332 => {
              if !(*ptr_to_globals).reg[27].is_null() {
                p = begin_line((*ptr_to_globals).dot);
                q = end_line((*ptr_to_globals).dot);
                p = text_hole_delete(p, q, 1i32);
                p = p.offset(string_insert(p, (*ptr_to_globals).reg[27], 2i32) as isize);
                (*ptr_to_globals).dot = p;
                dot_skip_over_ws();
              }
              current_block = 15129665204879337069;
            }
            8616046655533110204 => {
              undo_pop();
              current_block = 15129665204879337069;
            }
            5127767458142431603 => {
              loop {
                (*ptr_to_globals).dot = end_line((*ptr_to_globals).dot);
                (*ptr_to_globals).cmdcnt -= 1;
                if (*ptr_to_globals).cmdcnt <= 0 {
                  break;
                }
                dot_next();
              }
              current_block = 15129665204879337069;
            }
            222014967776118151 => {
              (*ptr_to_globals).last_forward_char = get_one_char();
              current_block = 7856905509180742666;
            }
            11209792479411604110 => {
              loop {
                dot_prev();
                dot_skip_over_ws();
                (*ptr_to_globals).cmdcnt -= 1;
                if !((*ptr_to_globals).cmdcnt > 0) {
                  break;
                }
              }
              current_block = 15129665204879337069;
            }
            3364823792826654116 => {
              if (*ptr_to_globals).lmc_len != 0 {
                (*ptr_to_globals).ioq_start = crate::libbb::xfuncs_printf::xstrndup(
                  (*ptr_to_globals).last_modifying_cmd.as_mut_ptr(),
                  (*ptr_to_globals).lmc_len,
                );
                (*ptr_to_globals).ioq = (*ptr_to_globals).ioq_start
              }
              current_block = 15129665204879337069;
            }
            18096603330221575131 => {
              current_block = 17498168302144015873;
            }
            16891123271837848903 => {
              dot_end();
              current_block = 1752638907092016026;
            }
            8517235759107662071 => {
              current_block = 5847749760081351726;
            }
            12525254419223051704 => {
              if (*ptr_to_globals).dot < (*ptr_to_globals).end.offset(-1) {
                (*ptr_to_globals).dot = yank_delete(
                  (*ptr_to_globals).dot,
                  (*ptr_to_globals).dot,
                  1i32,
                  YANKDEL as libc::c_int,
                  1i32,
                )
              }
              current_block = 15129665204879337069;
            }
            15232911949322867522 => {
              current_block = 17251831742223396249;
            }
            10863374208794025069 => {
              current_block = 1895262434596074581;
            }
            451126677064669119 => {
              loop {
                dot_prev();
                (*ptr_to_globals).dot = move_to_col(
                  (*ptr_to_globals).dot,
                  (*ptr_to_globals).ccol + (*ptr_to_globals).offset,
                );
                (*ptr_to_globals).cmdcnt -= 1;
                if !((*ptr_to_globals).cmdcnt > 0) {
                  break;
                }
              }
              current_block = 15129665204879337069;
            }
            4611735929166613116 => {
              loop {
                if bb_ascii_isalnum(*(*ptr_to_globals).dot as libc::c_uchar) != 0
                  || *(*ptr_to_globals).dot as libc::c_int == '_' as i32
                {
                  (*ptr_to_globals).dot = skip_thing(
                    (*ptr_to_globals).dot,
                    1i32,
                    FORWARD as libc::c_int,
                    S_END_ALNUM as libc::c_int,
                  )
                } else if *strchrnul(
                  b"!\"#$%&\'()*+,-./:;<=>?@[\\]^_`{|}~\x00" as *const u8 as *const libc::c_char,
                  *(*ptr_to_globals).dot as libc::c_int,
                )
                .offset(0)
                  != 0
                {
                  (*ptr_to_globals).dot = skip_thing(
                    (*ptr_to_globals).dot,
                    1i32,
                    FORWARD as libc::c_int,
                    S_END_PUNCT as libc::c_int,
                  )
                }
                if (*ptr_to_globals).dot < (*ptr_to_globals).end.offset(-1) {
                  (*ptr_to_globals).dot = (*ptr_to_globals).dot.offset(1)
                }
                if ({
                  let mut bb__isspace: libc::c_uchar =
                    (*(*ptr_to_globals).dot as libc::c_int - 9i32) as libc::c_uchar;
                  (bb__isspace as libc::c_int == ' ' as i32 - 9i32
                    || bb__isspace as libc::c_int <= 13i32 - 9i32) as libc::c_int
                }) != 0
                {
                  (*ptr_to_globals).dot = skip_thing(
                    (*ptr_to_globals).dot,
                    2i32,
                    FORWARD as libc::c_int,
                    S_OVER_WS as libc::c_int,
                  )
                }
                (*ptr_to_globals).cmdcnt -= 1;
                if !((*ptr_to_globals).cmdcnt > 0) {
                  break;
                }
              }
              current_block = 15129665204879337069;
            }
            4386451087681909888 => {
              (*ptr_to_globals).dot =
                move_to_col((*ptr_to_globals).dot, (*ptr_to_globals).cmdcnt - 1i32);
              current_block = 15129665204879337069;
            }
            1296397779060594135 => {
              dot_begin();
              current_block = 15129665204879337069;
            }
            _ => {}
          }
          match current_block {
            15129665204879337069 => {}
            8629930936610358348 => {}
            _ => {
              match current_block {
                17251831742223396249 => {
                  dir = 0;
                  if c == 'X' as i32 {
                    dir = -1i32
                  }
                  loop {
                    if *(*ptr_to_globals).dot.offset(dir as isize) as libc::c_int != '\n' as i32 {
                      if c == 'X' as i32 {
                        (*ptr_to_globals).dot = (*ptr_to_globals).dot.offset(-1)
                      }
                      (*ptr_to_globals).dot = yank_delete(
                        (*ptr_to_globals).dot,
                        (*ptr_to_globals).dot,
                        0,
                        YANKDEL as libc::c_int,
                        1i32,
                      )
                    }
                    (*ptr_to_globals).cmdcnt -= 1;
                    if !((*ptr_to_globals).cmdcnt > 0) {
                      break;
                    }
                  }
                  end_cmd_q();
                  if c == 's' as i32 {
                    current_block = 8629930936610358348;
                  } else {
                    current_block = 15129665204879337069;
                  }
                }
                2087484904894455135 => {
                  dot_end();
                  (*ptr_to_globals).dot =
                    char_insert((*ptr_to_globals).dot, '\n' as i32 as libc::c_char, 1i32);
                  current_block = 8629930936610358348;
                }
                11945623545738147997 => {
                  (*ptr_to_globals).dot = (*ptr_to_globals).end.offset(-1);
                  if (*ptr_to_globals).cmdcnt > 0 {
                    (*ptr_to_globals).dot = find_line((*ptr_to_globals).cmdcnt)
                  }
                  dot_skip_over_ws();
                  current_block = 15129665204879337069;
                }
                5847749760081351726 => {
                  dir = FORWARD as libc::c_int;
                  if c == 'B' as i32 {
                    dir = BACK as libc::c_int
                  }
                  loop {
                    if c == 'W' as i32
                      || ({
                        let mut bb__isspace: libc::c_uchar =
                          (*(*ptr_to_globals).dot.offset(dir as isize) as libc::c_int - 9i32)
                            as libc::c_uchar;
                        (bb__isspace as libc::c_int == ' ' as i32 - 9i32
                          || bb__isspace as libc::c_int <= 13i32 - 9i32)
                          as libc::c_int
                      }) != 0
                    {
                      (*ptr_to_globals).dot =
                        skip_thing((*ptr_to_globals).dot, 1i32, dir, S_TO_WS as libc::c_int);
                      (*ptr_to_globals).dot =
                        skip_thing((*ptr_to_globals).dot, 2i32, dir, S_OVER_WS as libc::c_int)
                    }
                    if c != 'W' as i32 {
                      (*ptr_to_globals).dot =
                        skip_thing((*ptr_to_globals).dot, 1i32, dir, S_BEFORE_WS as libc::c_int)
                    }
                    (*ptr_to_globals).cmdcnt -= 1;
                    if !((*ptr_to_globals).cmdcnt > 0) {
                      break;
                    }
                  }
                  current_block = 15129665204879337069;
                }
                17440971994642376514 => {
                  current_block = 15129665204879337069;
                }
                7534742345255184552 => {
                  current_block = 17247297260531395789;
                }
                8800996768013373992 => {
                  loop {
                    dot_next();
                    (*ptr_to_globals).dot = move_to_col(
                      (*ptr_to_globals).dot,
                      (*ptr_to_globals).ccol + (*ptr_to_globals).offset,
                    );
                    (*ptr_to_globals).cmdcnt -= 1;
                    if !((*ptr_to_globals).cmdcnt > 0) {
                      break;
                    }
                  }
                  current_block = 15129665204879337069;
                }
                13993698454868426881 => {
                  loop {
                    dot_right();
                    (*ptr_to_globals).cmdcnt -= 1;
                    if !((*ptr_to_globals).cmdcnt > 0) {
                      break;
                    }
                  }
                  current_block = 15129665204879337069;
                }
                7856905509180742666 => {
                  while !((*ptr_to_globals).last_forward_char == 0) {
                    q = (*ptr_to_globals).dot.offset(1);
                    while q < (*ptr_to_globals).end.offset(-1)
                      && *q as libc::c_int != '\n' as i32
                      && *q as libc::c_int != (*ptr_to_globals).last_forward_char
                    {
                      q = q.offset(1)
                    }
                    if *q as libc::c_int == (*ptr_to_globals).last_forward_char {
                      (*ptr_to_globals).dot = q
                    }
                    (*ptr_to_globals).cmdcnt -= 1;
                    if !((*ptr_to_globals).cmdcnt > 0) {
                      break;
                    }
                  }
                  current_block = 15129665204879337069;
                }
                17498168302144015873 => {
                  current_block = 8681395796513813967;
                }
                1752638907092016026 => {
                  if *(*ptr_to_globals).dot as libc::c_int != '\n' as i32 {
                    (*ptr_to_globals).dot = (*ptr_to_globals).dot.offset(1)
                  }
                  current_block = 8629930936610358348;
                }
                3268579060917229304 => {
                  current_block = 8629930936610358348;
                }
                1895262434596074581 => {
                  current_block = 8908416993177701018;
                }
                _ => {}
              }
              match current_block {
                8629930936610358348 => {}
                15129665204879337069 => {}
                _ => {
                  match current_block {
                    17247297260531395789 => {
                      loop {
                        dot_left();
                        (*ptr_to_globals).cmdcnt -= 1;
                        if !((*ptr_to_globals).cmdcnt > 0) {
                          break;
                        }
                      }
                      current_block = 15129665204879337069;
                    }
                    8681395796513813967 => {
                      current_block = 5591548203144509315;
                    }
                    8908416993177701018 => {
                      current_block = 16124761010012532485;
                    }
                    _ => {}
                  }
                  match current_block {
                    15129665204879337069 => {}
                    _ => {
                      match current_block {
                        16124761010012532485 => {
                          let mut yf: libc::c_int = 0;
                          let mut ml: libc::c_int = 0;
                          let mut whole: libc::c_int = 0;
                          yf = YANKDEL as libc::c_int;
                          if c == 'y' as i32 || c == 'Y' as i32 {
                            yf = YANKONLY as libc::c_int
                          }
                          c1 = 'y' as i32;
                          if c != 'Y' as i32 {
                            c1 = get_one_char()
                          }
                          ml = find_range(&mut p, &mut q, c1 as libc::c_char);
                          place_cursor(0i32, 0);
                          if c1 == 27i32 {
                            c1 = 27i32;
                            c = c1
                          } else if !strchr(b"wW\x00" as *const u8 as *const libc::c_char, c1)
                            .is_null()
                          {
                            ml = 0;
                            if c == 'c' as i32 {
                              while ({
                                let mut bb__isspace: libc::c_uchar =
                                  (*q as libc::c_int - 9i32) as libc::c_uchar;
                                (bb__isspace as libc::c_int == ' ' as i32 - 9i32
                                  || bb__isspace as libc::c_int <= 13i32 - 9i32)
                                  as libc::c_int
                              }) != 0
                                && q > p
                              {
                                q = q.offset(-1)
                              }
                            }
                            (*ptr_to_globals).dot = yank_delete(p, q, ml, yf, 1i32)
                          } else if !strchr(
                            b"^0bBeEft%$ lh\x08\x7f\x00" as *const u8 as *const libc::c_char,
                            c1,
                          )
                          .is_null()
                          {
                            (*ptr_to_globals).dot = yank_delete(p, q, ml, yf, 1i32)
                          } else if !strchr(
                            b"cdykjGHL+-{}\r\n\x00" as *const u8 as *const libc::c_char,
                            c1,
                          )
                          .is_null()
                          {
                            (*ptr_to_globals).dot = yank_delete(p, q, ml, yf, 1i32);
                            whole = 1i32
                          } else {
                            c1 = 27i32;
                            c = c1;
                            ml = 0;
                            indicate_error();
                          }
                          if ml != 0 && whole != 0 {
                            if c == 'c' as i32 {
                              (*ptr_to_globals).dot = char_insert(
                                (*ptr_to_globals).dot,
                                '\n' as i32 as libc::c_char,
                                2i32,
                              );
                              if whole != 0
                                && (*ptr_to_globals).dot != (*ptr_to_globals).end.offset(-1)
                              {
                                dot_prev();
                              }
                            } else if c == 'd' as i32 {
                              dot_begin();
                              dot_skip_over_ws();
                            }
                          }
                          if c1 != 27i32 {
                            if c == 'c' as i32 {
                              strcpy(
                                buf.as_mut_ptr(),
                                b"Change\x00" as *const u8 as *const libc::c_char,
                              );
                              current_block = 8629930936610358348;
                            } else {
                              if c == 'd' as i32 {
                                strcpy(
                                  buf.as_mut_ptr(),
                                  b"Delete\x00" as *const u8 as *const libc::c_char,
                                );
                              }
                              if c == 'y' as i32 || c == 'Y' as i32 {
                                strcpy(
                                  buf.as_mut_ptr(),
                                  b"Yank\x00" as *const u8 as *const libc::c_char,
                                );
                              }
                              p = (*ptr_to_globals).reg[(*ptr_to_globals).YDreg as usize];
                              q = p.offset(strlen(p) as isize);
                              cnt = 0;
                              while p <= q {
                                if *p as libc::c_int == '\n' as i32 {
                                  cnt += 1
                                }
                                p = p.offset(1)
                              }
                              status_line(
                                b"%s %u lines (%u chars) using [%c]\x00" as *const u8
                                  as *const libc::c_char,
                                buf.as_mut_ptr(),
                                cnt,
                                strlen((*ptr_to_globals).reg[(*ptr_to_globals).YDreg as usize])
                                  as libc::c_uint,
                                what_reg() as libc::c_int,
                              );
                              end_cmd_q();
                              current_block = 15129665204879337069;
                            }
                          } else {
                            current_block = 15129665204879337069;
                          }
                        }
                        5591548203144509315 => {
                          current_block = 2636677179867529885;
                        }
                        _ => {}
                      }
                      match current_block {
                        15129665204879337069 => {}
                        8629930936610358348 => {}
                        _ => {
                          match current_block {
                            2636677179867529885 => {
                              current_block = 12309206730560524281;
                            }
                            _ => {}
                          }
                          match current_block {
                            12309206730560524281 => {
                              current_block = 3325768110057758661;
                            }
                            _ => {}
                          }
                          match current_block {
                            3325768110057758661 => {
                              current_block = 14815832896553429982;
                            }
                            _ => {}
                          }
                          match current_block {
                            14815832896553429982 => {
                              current_block = 10731695520297161438;
                            }
                            _ => {}
                          }
                          match current_block {
                            10731695520297161438 => {
                              if c == '0' as i32 && (*ptr_to_globals).cmdcnt < 1i32 {
                                dot_begin();
                              } else {
                                (*ptr_to_globals).cmdcnt =
                                  (*ptr_to_globals).cmdcnt * 10i32 + (c - '0' as i32)
                              }
                              current_block = 15129665204879337069;
                            }
                            _ => {}
                          }
                          match current_block {
                            15129665204879337069 => {}
                            _ => {
                              loop {
                                match current_block {
                                  16813369756331276724 => {
                                    msg = std::ptr::null();
                                    current_block = 7392824444931029276;
                                  }
                                  7392824444931029276 => {
                                    dir = FORWARD as libc::c_int;
                                    p = (*ptr_to_globals).dot.offset(1);
                                    if *(*ptr_to_globals).last_search_pattern.offset(0)
                                      as libc::c_int
                                      == '?' as i32
                                    {
                                      dir = BACK as libc::c_int;
                                      p = (*ptr_to_globals).dot.offset(-1)
                                    }
                                    current_block = 4166979493554389389;
                                  }
                                  _ => {
                                    q = char_search(
                                      p,
                                      (*ptr_to_globals).last_search_pattern.offset(1),
                                      dir << 1i32 | FULL as libc::c_int,
                                    );
                                    if !q.is_null() {
                                      (*ptr_to_globals).dot = q;
                                      msg = std::ptr::null()
                                    } else {
                                      p = (*ptr_to_globals).text;
                                      if dir == BACK as libc::c_int {
                                        p = (*ptr_to_globals).end.offset(-1)
                                      }
                                      q = char_search(
                                        p,
                                        (*ptr_to_globals).last_search_pattern.offset(1),
                                        dir << 1i32 | FULL as libc::c_int,
                                      );
                                      if !q.is_null() {
                                        (*ptr_to_globals).dot = q;
                                        msg = b"search hit BOTTOM, continuing at TOP\x00"
                                          as *const u8
                                          as *const libc::c_char;
                                        if dir == BACK as libc::c_int {
                                          msg = b"search hit TOP, continuing at BOTTOM\x00"
                                            as *const u8
                                            as *const libc::c_char
                                        }
                                      } else {
                                        msg = b"Pattern not found\x00" as *const u8
                                          as *const libc::c_char
                                      }
                                    }
                                    if !msg.is_null() {
                                      status_line_bold(
                                        b"%s\x00" as *const u8 as *const libc::c_char,
                                        msg,
                                      );
                                    }
                                    (*ptr_to_globals).cmdcnt -= 1;
                                    if (*ptr_to_globals).cmdcnt > 0 {
                                      current_block = 16813369756331276724;
                                    } else {
                                      break;
                                    }
                                  }
                                }
                              }
                              current_block = 15129665204879337069;
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
        _ => {
          current_block = 11439127087547047736;
          match current_block {
            16992905640583886232 => {
              loop {
                if (*(*ptr_to_globals).dot as libc::c_int - 'a' as i32) as libc::c_uchar
                  as libc::c_int
                  <= 'z' as i32 - 'a' as i32
                {
                  undo_push(
                    (*ptr_to_globals).dot,
                    1i32 as libc::c_uint,
                    1i32 as libc::c_uchar,
                  );
                  *(*ptr_to_globals).dot =
                    bb_ascii_toupper(*(*ptr_to_globals).dot as libc::c_uchar) as libc::c_char;
                  undo_push(
                    (*ptr_to_globals).dot,
                    1i32 as libc::c_uint,
                    2i32 as libc::c_uchar,
                  );
                } else if (*(*ptr_to_globals).dot as libc::c_int - 'A' as i32) as libc::c_uchar
                  as libc::c_int
                  <= 'Z' as i32 - 'A' as i32
                {
                  undo_push(
                    (*ptr_to_globals).dot,
                    1i32 as libc::c_uint,
                    1i32 as libc::c_uchar,
                  );
                  *(*ptr_to_globals).dot =
                    bb_ascii_tolower(*(*ptr_to_globals).dot as libc::c_uchar) as libc::c_char;
                  undo_push(
                    (*ptr_to_globals).dot,
                    1i32 as libc::c_uint,
                    2i32 as libc::c_uchar,
                  );
                }
                dot_right();
                (*ptr_to_globals).cmdcnt -= 1;
                if !((*ptr_to_globals).cmdcnt > 0) {
                  break;
                }
              }
              end_cmd_q();
              current_block = 15129665204879337069;
            }
            8729655159604064397 => {
              c1 = get_one_char();
              cnt = 0;
              if c1 == '.' as i32 {
                cnt = (*ptr_to_globals)
                  .rows
                  .wrapping_sub(2i32 as libc::c_uint)
                  .wrapping_div(2i32 as libc::c_uint) as libc::c_int
              }
              if c1 == '-' as i32 {
                cnt = (*ptr_to_globals).rows.wrapping_sub(2i32 as libc::c_uint) as libc::c_int
              }
              (*ptr_to_globals).screenbegin = begin_line((*ptr_to_globals).dot);
              dot_scroll(cnt, -1i32);
              current_block = 15129665204879337069;
            }
            15899500648299942075 => {
              (*ptr_to_globals).last_forward_char = get_one_char();
              do_cmd(';' as i32);
              if *(*ptr_to_globals).dot as libc::c_int == (*ptr_to_globals).last_forward_char {
                dot_left();
              }
              (*ptr_to_globals).last_forward_char = 0;
              current_block = 15129665204879337069;
            }
            9051390181078481641 => {
              c1 = get_one_char();
              if *(*ptr_to_globals).dot as libc::c_int != '\n' as i32 {
                (*ptr_to_globals).dot =
                  text_hole_delete((*ptr_to_globals).dot, (*ptr_to_globals).dot, 1i32);
                (*ptr_to_globals).dot =
                  char_insert((*ptr_to_globals).dot, c1 as libc::c_char, 2i32);
                dot_left();
              }
              end_cmd_q();
              current_block = 15129665204879337069;
            }
            877115918601926659 => {
              dir = FORWARD as libc::c_int;
              if c == 'b' as i32 {
                dir = BACK as libc::c_int
              }
              while !((*ptr_to_globals).dot.offset(dir as isize) < (*ptr_to_globals).text
                || (*ptr_to_globals).dot.offset(dir as isize) > (*ptr_to_globals).end.offset(-1))
              {
                (*ptr_to_globals).dot = (*ptr_to_globals).dot.offset(dir as isize);
                if ({
                  let mut bb__isspace: libc::c_uchar =
                    (*(*ptr_to_globals).dot as libc::c_int - 9i32) as libc::c_uchar;
                  (bb__isspace as libc::c_int == ' ' as i32 - 9i32
                    || bb__isspace as libc::c_int <= 13i32 - 9i32) as libc::c_int
                }) != 0
                {
                  (*ptr_to_globals).dot = skip_thing(
                    (*ptr_to_globals).dot,
                    if c == 'e' as i32 { 2i32 } else { 1i32 },
                    dir,
                    S_OVER_WS as libc::c_int,
                  )
                }
                if bb_ascii_isalnum(*(*ptr_to_globals).dot as libc::c_uchar) != 0
                  || *(*ptr_to_globals).dot as libc::c_int == '_' as i32
                {
                  (*ptr_to_globals).dot =
                    skip_thing((*ptr_to_globals).dot, 1i32, dir, S_END_ALNUM as libc::c_int)
                } else if *strchrnul(
                  b"!\"#$%&\'()*+,-./:;<=>?@[\\]^_`{|}~\x00" as *const u8 as *const libc::c_char,
                  *(*ptr_to_globals).dot as libc::c_int,
                )
                .offset(0)
                  != 0
                {
                  (*ptr_to_globals).dot =
                    skip_thing((*ptr_to_globals).dot, 1i32, dir, S_END_PUNCT as libc::c_int)
                }
                (*ptr_to_globals).cmdcnt -= 1;
                if !((*ptr_to_globals).cmdcnt > 0) {
                  break;
                }
              }
              current_block = 15129665204879337069;
            }
            1085022737867179637 => {
              dot_begin();
              dot_skip_over_ws();
              current_block = 15129665204879337069;
            }
            3113147720494587438 => {
              c1 = get_one_char();
              if c1 != 'Z' as i32 {
                indicate_error();
              } else if (*ptr_to_globals).modified_count != 0 {
                if 1i32 != 0 && (*ptr_to_globals).readonly_mode as libc::c_int != 0 {
                  status_line_bold(
                    b"\'%s\' is read only\x00" as *const u8 as *const libc::c_char,
                    (*ptr_to_globals).current_filename,
                  );
                } else {
                  cnt = file_write(
                    (*ptr_to_globals).current_filename,
                    (*ptr_to_globals).text,
                    (*ptr_to_globals).end.offset(-1),
                  );
                  if cnt < 0 {
                    if cnt == -1i32 {
                      status_line_bold(b"Write error: %m\x00" as *const u8 as *const libc::c_char);
                    }
                  } else if cnt as libc::c_long
                    == (*ptr_to_globals)
                      .end
                      .offset(-1)
                      .wrapping_offset_from((*ptr_to_globals).text)
                      as libc::c_long
                      + 1
                  {
                    (*ptr_to_globals).editing = 0 as smallint
                  }
                }
              } else {
                (*ptr_to_globals).editing = 0 as smallint
              }
              current_block = 15129665204879337069;
            }
            12960118908218882441 => {
              p = begin_line((*ptr_to_globals).dot);
              if *p.offset(-1i32 as isize) as libc::c_int == '\n' as i32 {
                dot_prev();
                current_block = 2087484904894455135;
              } else {
                dot_begin();
                (*ptr_to_globals).dot =
                  char_insert((*ptr_to_globals).dot, '\n' as i32 as libc::c_char, 1i32);
                dot_prev();
                current_block = 8629930936610358348;
              }
            }
            8720450212473544924 => {
              (*ptr_to_globals).dot = (*ptr_to_globals).screenbegin;
              cnt = 0;
              while (cnt as libc::c_uint)
                < (*ptr_to_globals)
                  .rows
                  .wrapping_sub(1i32 as libc::c_uint)
                  .wrapping_div(2i32 as libc::c_uint)
              {
                (*ptr_to_globals).dot = next_line((*ptr_to_globals).dot);
                cnt += 1
              }
              current_block = 15129665204879337069;
            }
            13015277209715431090 => {
              (*ptr_to_globals).dot = end_screen();
              if (*ptr_to_globals).cmdcnt as libc::c_uint
                > (*ptr_to_globals).rows.wrapping_sub(1i32 as libc::c_uint)
              {
                (*ptr_to_globals).cmdcnt =
                  (*ptr_to_globals).rows.wrapping_sub(1i32 as libc::c_uint) as libc::c_int
              }
              (*ptr_to_globals).cmdcnt -= 1;
              if (*ptr_to_globals).cmdcnt > 0 {
                do_cmd('-' as i32);
              }
              dot_begin();
              dot_skip_over_ws();
              current_block = 15129665204879337069;
            }
            9800435767766781385 => {
              loop {
                dot_end();
                if (*ptr_to_globals).dot < (*ptr_to_globals).end.offset(-1) {
                  undo_push(
                    (*ptr_to_globals).dot,
                    1i32 as libc::c_uint,
                    1i32 as libc::c_uchar,
                  );
                  let fresh15 = (*ptr_to_globals).dot;
                  (*ptr_to_globals).dot = (*ptr_to_globals).dot.offset(1);
                  *fresh15 = ' ' as i32 as libc::c_char;
                  undo_push(
                    (*ptr_to_globals).dot.offset(-1),
                    1i32 as libc::c_uint,
                    2i32 as libc::c_uchar,
                  );
                  while ({
                    let mut bb__isblank: libc::c_uchar = *(*ptr_to_globals).dot as libc::c_uchar;
                    (bb__isblank as libc::c_int == ' ' as i32
                      || bb__isblank as libc::c_int == '\t' as i32)
                      as libc::c_int
                  }) != 0
                  {
                    text_hole_delete((*ptr_to_globals).dot, (*ptr_to_globals).dot, 2i32);
                  }
                }
                (*ptr_to_globals).cmdcnt -= 1;
                if !((*ptr_to_globals).cmdcnt > 0) {
                  break;
                }
              }
              end_cmd_q();
              current_block = 15129665204879337069;
            }
            3432363526595694666 => {
              dot_begin();
              dot_skip_over_ws();
              current_block = 3268579060917229304;
            }
            3494829253343353619 => {
              (*ptr_to_globals).dot = (*ptr_to_globals).screenbegin;
              if (*ptr_to_globals).cmdcnt as libc::c_uint
                > (*ptr_to_globals).rows.wrapping_sub(1i32 as libc::c_uint)
              {
                (*ptr_to_globals).cmdcnt =
                  (*ptr_to_globals).rows.wrapping_sub(1i32 as libc::c_uint) as libc::c_int
              }
              (*ptr_to_globals).cmdcnt -= 1;
              if (*ptr_to_globals).cmdcnt > 0 {
                do_cmd('+' as i32);
              }
              dot_skip_over_ws();
              current_block = 15129665204879337069;
            }
            17973101765331640574 => {
              c1 = get_one_char();
              if c1 != 'g' as i32 {
                buf[0] = 'g' as i32 as libc::c_char;
                buf[1] = if c1 >= 0 { c1 } else { '*' as i32 } as libc::c_char;
                buf[2] = '\u{0}' as i32 as libc::c_char;
                not_implemented(buf.as_mut_ptr());
                current_block = 15129665204879337069;
              } else {
                if (*ptr_to_globals).cmdcnt == 0 {
                  (*ptr_to_globals).cmdcnt = 1i32
                }
                current_block = 11945623545738147997;
              }
            }
            16546625800574160972 => {
              save_dot = (*ptr_to_globals).dot;
              (*ptr_to_globals).dot = dollar_line((*ptr_to_globals).dot);
              (*ptr_to_globals).dot = yank_delete(
                save_dot,
                (*ptr_to_globals).dot,
                0,
                YANKDEL as libc::c_int,
                1i32,
              );
              if c == 'C' as i32 {
                current_block = 8629930936610358348;
              } else {
                if c == 'D' as i32 {
                  end_cmd_q();
                }
                current_block = 15129665204879337069;
              }
            }
            11937696639986586685 => {
              cnt = count_lines((*ptr_to_globals).text, (*ptr_to_globals).dot);
              c1 = get_one_char();
              find_range(&mut p, &mut q, c1 as libc::c_char);
              yank_delete(p, q, 1i32, YANKONLY as libc::c_int, 0);
              p = begin_line(p);
              q = end_line(q);
              i = count_lines(p, q);
              while i > 0 {
                if c == '<' as i32 {
                  if *p as libc::c_int == '\t' as i32 {
                    text_hole_delete(p, p, 0);
                  } else if *p as libc::c_int == ' ' as i32 {
                    j = 0;
                    while *p as libc::c_int == ' ' as i32 && j < (*ptr_to_globals).tabstop {
                      text_hole_delete(p, p, 0);
                      j += 1
                    }
                  }
                } else if c == '>' as i32 {
                  char_insert(p, '\t' as i32 as libc::c_char, 1i32);
                }
                i -= 1;
                p = next_line(p)
              }
              (*ptr_to_globals).dot = find_line(cnt);
              dot_skip_over_ws();
              end_cmd_q();
              current_block = 15129665204879337069;
            }
            17725350714912028156 => {
              p = get_input_line(b":\x00" as *const u8 as *const libc::c_char);
              colon(p);
              current_block = 15129665204879337069;
            }
            14526470074083880812 => {
              q = char_search(
                (*ptr_to_globals).dot,
                b"\n\n\x00" as *const u8 as *const libc::c_char,
                (FORWARD as libc::c_int) << 1i32 | FULL as libc::c_int,
              );
              if !q.is_null() {
                (*ptr_to_globals).dot = next_line(q)
              }
              current_block = 15129665204879337069;
            }
            8893187391306414141 => {
              q = char_search(
                (*ptr_to_globals).dot,
                b"\n\n\x00" as *const u8 as *const libc::c_char,
                ((BACK as libc::c_int as libc::c_uint) << 1i32
                  | FULL as libc::c_int as libc::c_uint) as libc::c_int,
              );
              if !q.is_null() {
                (*ptr_to_globals).dot = next_line(q)
              }
              current_block = 15129665204879337069;
            }
            7021673758293221412 => {
              dir = BACK as libc::c_int;
              p = (*ptr_to_globals).dot.offset(-1);
              if *(*ptr_to_globals).last_search_pattern.offset(0) as libc::c_int == '?' as i32 {
                dir = FORWARD as libc::c_int;
                p = (*ptr_to_globals).dot.offset(1)
              }
              current_block = 4166979493554389389;
            }
            18374191879090272823 => {
              buf[0] = c as libc::c_char;
              buf[1] = '\u{0}' as i32 as libc::c_char;
              q = get_input_line(buf.as_mut_ptr());
              if *q.offset(0) as libc::c_int != 0 && *q.offset(1) == 0 {
                if *(*ptr_to_globals).last_search_pattern.offset(0) != 0 {
                  *(*ptr_to_globals).last_search_pattern.offset(0) = c as libc::c_char
                }
                current_block = 7392824444931029276;
              } else if *q.offset(0) != 0 {
                free((*ptr_to_globals).last_search_pattern as *mut libc::c_void);
                (*ptr_to_globals).last_search_pattern = crate::libbb::xfuncs_printf::xstrdup(q);
                current_block = 7392824444931029276;
              } else {
                current_block = 15129665204879337069;
              }
            }
            16407828456666301883 => {
              if (*ptr_to_globals).last_forward_char == 0 {
                current_block = 15129665204879337069;
              } else {
                loop {
                  q = (*ptr_to_globals).dot.offset(-1);
                  while q >= (*ptr_to_globals).text
                    && *q as libc::c_int != '\n' as i32
                    && *q as libc::c_int != (*ptr_to_globals).last_forward_char
                  {
                    q = q.offset(-1)
                  }
                  if q >= (*ptr_to_globals).text
                    && *q as libc::c_int == (*ptr_to_globals).last_forward_char
                  {
                    (*ptr_to_globals).dot = q
                  }
                  (*ptr_to_globals).cmdcnt -= 1;
                  if !((*ptr_to_globals).cmdcnt > 0) {
                    break;
                  }
                }
                current_block = 15129665204879337069;
              }
            }
            9018432604062702004 => {
              q = (*ptr_to_globals).dot;
              while q < (*ptr_to_globals).end && *q as libc::c_int != '\n' as i32 {
                if !strchr(
                  b"()[]{}\x00" as *const u8 as *const libc::c_char,
                  *q as libc::c_int,
                )
                .is_null()
                {
                  p = find_pair(q, *q);
                  if p.is_null() {
                    indicate_error();
                  } else {
                    (*ptr_to_globals).dot = p
                  }
                  break;
                } else {
                  q = q.offset(1)
                }
              }
              if *q as libc::c_int == '\n' as i32 {
                indicate_error();
              }
              current_block = 15129665204879337069;
            }
            10247103787464459848 => {
              p = (*ptr_to_globals).reg[(*ptr_to_globals).YDreg as usize];
              if p.is_null() {
                status_line_bold(
                  b"Nothing in register %c\x00" as *const u8 as *const libc::c_char,
                  what_reg() as libc::c_int,
                );
              } else {
                if !strchr(p, '\n' as i32).is_null() {
                  if c == 'P' as i32 {
                    dot_begin();
                  }
                  if c == 'p' as i32 {
                    if end_line((*ptr_to_globals).dot) == (*ptr_to_globals).end.offset(-1) {
                      (*ptr_to_globals).dot = (*ptr_to_globals).end
                    } else {
                      dot_next();
                    }
                  }
                } else if c == 'p' as i32 {
                  dot_right();
                }
                string_insert((*ptr_to_globals).dot, p, 1i32);
                end_cmd_q();
              }
              current_block = 15129665204879337069;
            }
            15260732871948875843 => {
              c1 = (get_one_char() | 0x20i32) - 'a' as i32;
              if c1 as libc::c_uint <= 25i32 as libc::c_uint {
                (*ptr_to_globals).mark[c1 as usize] = (*ptr_to_globals).dot
              } else {
                indicate_error();
              }
              current_block = 15129665204879337069;
            }
            12738322036487086035 => {
              c1 = get_one_char() | 0x20i32;
              if (c1 - 'a' as i32) as libc::c_uint <= 25i32 as libc::c_uint {
                c1 = c1 - 'a' as i32;
                q = (*ptr_to_globals).mark[c1 as usize];
                if (*ptr_to_globals).text <= q && q < (*ptr_to_globals).end {
                  (*ptr_to_globals).dot = q;
                  dot_begin();
                  dot_skip_over_ws();
                }
              } else if c1 == '\'' as i32 {
                (*ptr_to_globals).dot = swap_context((*ptr_to_globals).dot);
                dot_begin();
                dot_skip_over_ws();
              } else {
                indicate_error();
              }
              current_block = 15129665204879337069;
            }
            13255096073384561358 => {
              c1 = (get_one_char() | 0x20i32) - 'a' as i32;
              if c1 as libc::c_uint <= 25i32 as libc::c_uint {
                (*ptr_to_globals).YDreg = c1 as smalluint
              } else {
                indicate_error();
              }
              current_block = 15129665204879337069;
            }
            10258711639984089377 => {
              if (*ptr_to_globals).cmd_mode as libc::c_int == 0 {
                indicate_error();
              }
              (*ptr_to_globals).cmd_mode = 0 as smallint;
              undo_queue_commit();
              end_cmd_q();
              (*ptr_to_globals).last_status_cksum = 0;
              current_block = 15129665204879337069;
            }
            11439127087547047736 => {
              buf[0] = c as libc::c_char;
              buf[1] = '\u{0}' as i32 as libc::c_char;
              not_implemented(buf.as_mut_ptr());
              end_cmd_q();
              current_block = 17440971994642376514;
            }
            7961798899781870241 => {
              dot_scroll(
                (*ptr_to_globals).rows.wrapping_sub(2i32 as libc::c_uint) as libc::c_int,
                -1i32,
              );
              current_block = 15129665204879337069;
            }
            9426343755402444879 => {
              dot_scroll(
                (*ptr_to_globals)
                  .rows
                  .wrapping_sub(2i32 as libc::c_uint)
                  .wrapping_div(2i32 as libc::c_uint) as libc::c_int,
                1i32,
              );
              current_block = 15129665204879337069;
            }
            13352459794680105913 => {
              dot_scroll(1i32, 1i32);
              current_block = 15129665204879337069;
            }
            14142272253464333006 => {
              dot_scroll(
                (*ptr_to_globals).rows.wrapping_sub(2i32 as libc::c_uint) as libc::c_int,
                1i32,
              );
              current_block = 15129665204879337069;
            }
            10758177197742640066 => {
              (*ptr_to_globals).last_status_cksum = 0;
              current_block = 15129665204879337069;
            }
            6152256259730122749 => {
              current_block = 7534742345255184552;
            }
            12883932598258173301 => {
              current_block = 8800996768013373992;
            }
            11242998110520238401 => {
              redraw(1i32);
              current_block = 15129665204879337069;
            }
            13619733043935729992 => {
              loop {
                dot_next();
                dot_skip_over_ws();
                (*ptr_to_globals).cmdcnt -= 1;
                if !((*ptr_to_globals).cmdcnt > 0) {
                  break;
                }
              }
              current_block = 15129665204879337069;
            }
            9339065157412720613 => {
              dot_scroll(
                (*ptr_to_globals)
                  .rows
                  .wrapping_sub(2i32 as libc::c_uint)
                  .wrapping_div(2i32 as libc::c_uint) as libc::c_int,
                -1i32,
              );
              current_block = 15129665204879337069;
            }
            11447082683497798022 => {
              dot_scroll(1i32, -1i32);
              current_block = 15129665204879337069;
            }
            5182000506326660482 => {
              current_block = 13993698454868426881;
            }
            1105010766850597332 => {
              if !(*ptr_to_globals).reg[27].is_null() {
                p = begin_line((*ptr_to_globals).dot);
                q = end_line((*ptr_to_globals).dot);
                p = text_hole_delete(p, q, 1i32);
                p = p.offset(string_insert(p, (*ptr_to_globals).reg[27], 2i32) as isize);
                (*ptr_to_globals).dot = p;
                dot_skip_over_ws();
              }
              current_block = 15129665204879337069;
            }
            8616046655533110204 => {
              undo_pop();
              current_block = 15129665204879337069;
            }
            5127767458142431603 => {
              loop {
                (*ptr_to_globals).dot = end_line((*ptr_to_globals).dot);
                (*ptr_to_globals).cmdcnt -= 1;
                if (*ptr_to_globals).cmdcnt <= 0 {
                  break;
                }
                dot_next();
              }
              current_block = 15129665204879337069;
            }
            222014967776118151 => {
              (*ptr_to_globals).last_forward_char = get_one_char();
              current_block = 7856905509180742666;
            }
            11209792479411604110 => {
              loop {
                dot_prev();
                dot_skip_over_ws();
                (*ptr_to_globals).cmdcnt -= 1;
                if !((*ptr_to_globals).cmdcnt > 0) {
                  break;
                }
              }
              current_block = 15129665204879337069;
            }
            3364823792826654116 => {
              if (*ptr_to_globals).lmc_len != 0 {
                (*ptr_to_globals).ioq_start = crate::libbb::xfuncs_printf::xstrndup(
                  (*ptr_to_globals).last_modifying_cmd.as_mut_ptr(),
                  (*ptr_to_globals).lmc_len,
                );
                (*ptr_to_globals).ioq = (*ptr_to_globals).ioq_start
              }
              current_block = 15129665204879337069;
            }
            18096603330221575131 => {
              current_block = 17498168302144015873;
            }
            16891123271837848903 => {
              dot_end();
              current_block = 1752638907092016026;
            }
            8517235759107662071 => {
              current_block = 5847749760081351726;
            }
            12525254419223051704 => {
              if (*ptr_to_globals).dot < (*ptr_to_globals).end.offset(-1) {
                (*ptr_to_globals).dot = yank_delete(
                  (*ptr_to_globals).dot,
                  (*ptr_to_globals).dot,
                  1i32,
                  YANKDEL as libc::c_int,
                  1i32,
                )
              }
              current_block = 15129665204879337069;
            }
            15232911949322867522 => {
              current_block = 17251831742223396249;
            }
            10863374208794025069 => {
              current_block = 1895262434596074581;
            }
            451126677064669119 => {
              loop {
                dot_prev();
                (*ptr_to_globals).dot = move_to_col(
                  (*ptr_to_globals).dot,
                  (*ptr_to_globals).ccol + (*ptr_to_globals).offset,
                );
                (*ptr_to_globals).cmdcnt -= 1;
                if !((*ptr_to_globals).cmdcnt > 0) {
                  break;
                }
              }
              current_block = 15129665204879337069;
            }
            4611735929166613116 => {
              loop {
                if bb_ascii_isalnum(*(*ptr_to_globals).dot as libc::c_uchar) != 0
                  || *(*ptr_to_globals).dot as libc::c_int == '_' as i32
                {
                  (*ptr_to_globals).dot = skip_thing(
                    (*ptr_to_globals).dot,
                    1i32,
                    FORWARD as libc::c_int,
                    S_END_ALNUM as libc::c_int,
                  )
                } else if *strchrnul(
                  b"!\"#$%&\'()*+,-./:;<=>?@[\\]^_`{|}~\x00" as *const u8 as *const libc::c_char,
                  *(*ptr_to_globals).dot as libc::c_int,
                )
                .offset(0)
                  != 0
                {
                  (*ptr_to_globals).dot = skip_thing(
                    (*ptr_to_globals).dot,
                    1i32,
                    FORWARD as libc::c_int,
                    S_END_PUNCT as libc::c_int,
                  )
                }
                if (*ptr_to_globals).dot < (*ptr_to_globals).end.offset(-1) {
                  (*ptr_to_globals).dot = (*ptr_to_globals).dot.offset(1)
                }
                if ({
                  let mut bb__isspace: libc::c_uchar =
                    (*(*ptr_to_globals).dot as libc::c_int - 9i32) as libc::c_uchar;
                  (bb__isspace as libc::c_int == ' ' as i32 - 9i32
                    || bb__isspace as libc::c_int <= 13i32 - 9i32) as libc::c_int
                }) != 0
                {
                  (*ptr_to_globals).dot = skip_thing(
                    (*ptr_to_globals).dot,
                    2i32,
                    FORWARD as libc::c_int,
                    S_OVER_WS as libc::c_int,
                  )
                }
                (*ptr_to_globals).cmdcnt -= 1;
                if !((*ptr_to_globals).cmdcnt > 0) {
                  break;
                }
              }
              current_block = 15129665204879337069;
            }
            4386451087681909888 => {
              (*ptr_to_globals).dot =
                move_to_col((*ptr_to_globals).dot, (*ptr_to_globals).cmdcnt - 1i32);
              current_block = 15129665204879337069;
            }
            1296397779060594135 => {
              dot_begin();
              current_block = 15129665204879337069;
            }
            _ => {}
          }
          match current_block {
            15129665204879337069 => {}
            8629930936610358348 => {}
            _ => {
              match current_block {
                17251831742223396249 => {
                  dir = 0;
                  if c == 'X' as i32 {
                    dir = -1i32
                  }
                  loop {
                    if *(*ptr_to_globals).dot.offset(dir as isize) as libc::c_int != '\n' as i32 {
                      if c == 'X' as i32 {
                        (*ptr_to_globals).dot = (*ptr_to_globals).dot.offset(-1)
                      }
                      (*ptr_to_globals).dot = yank_delete(
                        (*ptr_to_globals).dot,
                        (*ptr_to_globals).dot,
                        0,
                        YANKDEL as libc::c_int,
                        1i32,
                      )
                    }
                    (*ptr_to_globals).cmdcnt -= 1;
                    if !((*ptr_to_globals).cmdcnt > 0) {
                      break;
                    }
                  }
                  end_cmd_q();
                  if c == 's' as i32 {
                    current_block = 8629930936610358348;
                  } else {
                    current_block = 15129665204879337069;
                  }
                }
                2087484904894455135 => {
                  dot_end();
                  (*ptr_to_globals).dot =
                    char_insert((*ptr_to_globals).dot, '\n' as i32 as libc::c_char, 1i32);
                  current_block = 8629930936610358348;
                }
                11945623545738147997 => {
                  (*ptr_to_globals).dot = (*ptr_to_globals).end.offset(-1);
                  if (*ptr_to_globals).cmdcnt > 0 {
                    (*ptr_to_globals).dot = find_line((*ptr_to_globals).cmdcnt)
                  }
                  dot_skip_over_ws();
                  current_block = 15129665204879337069;
                }
                5847749760081351726 => {
                  dir = FORWARD as libc::c_int;
                  if c == 'B' as i32 {
                    dir = BACK as libc::c_int
                  }
                  loop {
                    if c == 'W' as i32
                      || ({
                        let mut bb__isspace: libc::c_uchar =
                          (*(*ptr_to_globals).dot.offset(dir as isize) as libc::c_int - 9i32)
                            as libc::c_uchar;
                        (bb__isspace as libc::c_int == ' ' as i32 - 9i32
                          || bb__isspace as libc::c_int <= 13i32 - 9i32)
                          as libc::c_int
                      }) != 0
                    {
                      (*ptr_to_globals).dot =
                        skip_thing((*ptr_to_globals).dot, 1i32, dir, S_TO_WS as libc::c_int);
                      (*ptr_to_globals).dot =
                        skip_thing((*ptr_to_globals).dot, 2i32, dir, S_OVER_WS as libc::c_int)
                    }
                    if c != 'W' as i32 {
                      (*ptr_to_globals).dot =
                        skip_thing((*ptr_to_globals).dot, 1i32, dir, S_BEFORE_WS as libc::c_int)
                    }
                    (*ptr_to_globals).cmdcnt -= 1;
                    if !((*ptr_to_globals).cmdcnt > 0) {
                      break;
                    }
                  }
                  current_block = 15129665204879337069;
                }
                17440971994642376514 => {
                  current_block = 15129665204879337069;
                }
                7534742345255184552 => {
                  current_block = 17247297260531395789;
                }
                8800996768013373992 => {
                  loop {
                    dot_next();
                    (*ptr_to_globals).dot = move_to_col(
                      (*ptr_to_globals).dot,
                      (*ptr_to_globals).ccol + (*ptr_to_globals).offset,
                    );
                    (*ptr_to_globals).cmdcnt -= 1;
                    if !((*ptr_to_globals).cmdcnt > 0) {
                      break;
                    }
                  }
                  current_block = 15129665204879337069;
                }
                13993698454868426881 => {
                  loop {
                    dot_right();
                    (*ptr_to_globals).cmdcnt -= 1;
                    if !((*ptr_to_globals).cmdcnt > 0) {
                      break;
                    }
                  }
                  current_block = 15129665204879337069;
                }
                7856905509180742666 => {
                  while !((*ptr_to_globals).last_forward_char == 0) {
                    q = (*ptr_to_globals).dot.offset(1);
                    while q < (*ptr_to_globals).end.offset(-1)
                      && *q as libc::c_int != '\n' as i32
                      && *q as libc::c_int != (*ptr_to_globals).last_forward_char
                    {
                      q = q.offset(1)
                    }
                    if *q as libc::c_int == (*ptr_to_globals).last_forward_char {
                      (*ptr_to_globals).dot = q
                    }
                    (*ptr_to_globals).cmdcnt -= 1;
                    if !((*ptr_to_globals).cmdcnt > 0) {
                      break;
                    }
                  }
                  current_block = 15129665204879337069;
                }
                17498168302144015873 => {
                  current_block = 8681395796513813967;
                }
                1752638907092016026 => {
                  if *(*ptr_to_globals).dot as libc::c_int != '\n' as i32 {
                    (*ptr_to_globals).dot = (*ptr_to_globals).dot.offset(1)
                  }
                  current_block = 8629930936610358348;
                }
                3268579060917229304 => {
                  current_block = 8629930936610358348;
                }
                1895262434596074581 => {
                  current_block = 8908416993177701018;
                }
                _ => {}
              }
              match current_block {
                8629930936610358348 => {}
                15129665204879337069 => {}
                _ => {
                  match current_block {
                    17247297260531395789 => {
                      loop {
                        dot_left();
                        (*ptr_to_globals).cmdcnt -= 1;
                        if !((*ptr_to_globals).cmdcnt > 0) {
                          break;
                        }
                      }
                      current_block = 15129665204879337069;
                    }
                    8681395796513813967 => {
                      current_block = 5591548203144509315;
                    }
                    8908416993177701018 => {
                      current_block = 16124761010012532485;
                    }
                    _ => {}
                  }
                  match current_block {
                    15129665204879337069 => {}
                    _ => {
                      match current_block {
                        16124761010012532485 => {
                          let mut yf: libc::c_int = 0;
                          let mut ml: libc::c_int = 0;
                          let mut whole: libc::c_int = 0;
                          yf = YANKDEL as libc::c_int;
                          if c == 'y' as i32 || c == 'Y' as i32 {
                            yf = YANKONLY as libc::c_int
                          }
                          c1 = 'y' as i32;
                          if c != 'Y' as i32 {
                            c1 = get_one_char()
                          }
                          ml = find_range(&mut p, &mut q, c1 as libc::c_char);
                          place_cursor(0i32, 0);
                          if c1 == 27i32 {
                            c1 = 27i32;
                            c = c1
                          } else if !strchr(b"wW\x00" as *const u8 as *const libc::c_char, c1)
                            .is_null()
                          {
                            ml = 0;
                            if c == 'c' as i32 {
                              while ({
                                let mut bb__isspace: libc::c_uchar =
                                  (*q as libc::c_int - 9i32) as libc::c_uchar;
                                (bb__isspace as libc::c_int == ' ' as i32 - 9i32
                                  || bb__isspace as libc::c_int <= 13i32 - 9i32)
                                  as libc::c_int
                              }) != 0
                                && q > p
                              {
                                q = q.offset(-1)
                              }
                            }
                            (*ptr_to_globals).dot = yank_delete(p, q, ml, yf, 1i32)
                          } else if !strchr(
                            b"^0bBeEft%$ lh\x08\x7f\x00" as *const u8 as *const libc::c_char,
                            c1,
                          )
                          .is_null()
                          {
                            (*ptr_to_globals).dot = yank_delete(p, q, ml, yf, 1i32)
                          } else if !strchr(
                            b"cdykjGHL+-{}\r\n\x00" as *const u8 as *const libc::c_char,
                            c1,
                          )
                          .is_null()
                          {
                            (*ptr_to_globals).dot = yank_delete(p, q, ml, yf, 1i32);
                            whole = 1i32
                          } else {
                            c1 = 27i32;
                            c = c1;
                            ml = 0;
                            indicate_error();
                          }
                          if ml != 0 && whole != 0 {
                            if c == 'c' as i32 {
                              (*ptr_to_globals).dot = char_insert(
                                (*ptr_to_globals).dot,
                                '\n' as i32 as libc::c_char,
                                2i32,
                              );
                              if whole != 0
                                && (*ptr_to_globals).dot != (*ptr_to_globals).end.offset(-1)
                              {
                                dot_prev();
                              }
                            } else if c == 'd' as i32 {
                              dot_begin();
                              dot_skip_over_ws();
                            }
                          }
                          if c1 != 27i32 {
                            if c == 'c' as i32 {
                              strcpy(
                                buf.as_mut_ptr(),
                                b"Change\x00" as *const u8 as *const libc::c_char,
                              );
                              current_block = 8629930936610358348;
                            } else {
                              if c == 'd' as i32 {
                                strcpy(
                                  buf.as_mut_ptr(),
                                  b"Delete\x00" as *const u8 as *const libc::c_char,
                                );
                              }
                              if c == 'y' as i32 || c == 'Y' as i32 {
                                strcpy(
                                  buf.as_mut_ptr(),
                                  b"Yank\x00" as *const u8 as *const libc::c_char,
                                );
                              }
                              p = (*ptr_to_globals).reg[(*ptr_to_globals).YDreg as usize];
                              q = p.offset(strlen(p) as isize);
                              cnt = 0;
                              while p <= q {
                                if *p as libc::c_int == '\n' as i32 {
                                  cnt += 1
                                }
                                p = p.offset(1)
                              }
                              status_line(
                                b"%s %u lines (%u chars) using [%c]\x00" as *const u8
                                  as *const libc::c_char,
                                buf.as_mut_ptr(),
                                cnt,
                                strlen((*ptr_to_globals).reg[(*ptr_to_globals).YDreg as usize])
                                  as libc::c_uint,
                                what_reg() as libc::c_int,
                              );
                              end_cmd_q();
                              current_block = 15129665204879337069;
                            }
                          } else {
                            current_block = 15129665204879337069;
                          }
                        }
                        5591548203144509315 => {
                          current_block = 2636677179867529885;
                        }
                        _ => {}
                      }
                      match current_block {
                        15129665204879337069 => {}
                        8629930936610358348 => {}
                        _ => {
                          match current_block {
                            2636677179867529885 => {
                              current_block = 12309206730560524281;
                            }
                            _ => {}
                          }
                          match current_block {
                            12309206730560524281 => {
                              current_block = 3325768110057758661;
                            }
                            _ => {}
                          }
                          match current_block {
                            3325768110057758661 => {
                              current_block = 14815832896553429982;
                            }
                            _ => {}
                          }
                          match current_block {
                            14815832896553429982 => {
                              current_block = 10731695520297161438;
                            }
                            _ => {}
                          }
                          match current_block {
                            10731695520297161438 => {
                              if c == '0' as i32 && (*ptr_to_globals).cmdcnt < 1i32 {
                                dot_begin();
                              } else {
                                (*ptr_to_globals).cmdcnt =
                                  (*ptr_to_globals).cmdcnt * 10i32 + (c - '0' as i32)
                              }
                              current_block = 15129665204879337069;
                            }
                            _ => {}
                          }
                          match current_block {
                            15129665204879337069 => {}
                            _ => {
                              loop {
                                match current_block {
                                  16813369756331276724 => {
                                    msg = std::ptr::null();
                                    current_block = 7392824444931029276;
                                  }
                                  7392824444931029276 => {
                                    dir = FORWARD as libc::c_int;
                                    p = (*ptr_to_globals).dot.offset(1);
                                    if *(*ptr_to_globals).last_search_pattern.offset(0)
                                      as libc::c_int
                                      == '?' as i32
                                    {
                                      dir = BACK as libc::c_int;
                                      p = (*ptr_to_globals).dot.offset(-1)
                                    }
                                    current_block = 4166979493554389389;
                                  }
                                  _ => {
                                    q = char_search(
                                      p,
                                      (*ptr_to_globals).last_search_pattern.offset(1),
                                      dir << 1i32 | FULL as libc::c_int,
                                    );
                                    if !q.is_null() {
                                      (*ptr_to_globals).dot = q;
                                      msg = std::ptr::null()
                                    } else {
                                      p = (*ptr_to_globals).text;
                                      if dir == BACK as libc::c_int {
                                        p = (*ptr_to_globals).end.offset(-1)
                                      }
                                      q = char_search(
                                        p,
                                        (*ptr_to_globals).last_search_pattern.offset(1),
                                        dir << 1i32 | FULL as libc::c_int,
                                      );
                                      if !q.is_null() {
                                        (*ptr_to_globals).dot = q;
                                        msg = b"search hit BOTTOM, continuing at TOP\x00"
                                          as *const u8
                                          as *const libc::c_char;
                                        if dir == BACK as libc::c_int {
                                          msg = b"search hit TOP, continuing at BOTTOM\x00"
                                            as *const u8
                                            as *const libc::c_char
                                        }
                                      } else {
                                        msg = b"Pattern not found\x00" as *const u8
                                          as *const libc::c_char
                                      }
                                    }
                                    if !msg.is_null() {
                                      status_line_bold(
                                        b"%s\x00" as *const u8 as *const libc::c_char,
                                        msg,
                                      );
                                    }
                                    (*ptr_to_globals).cmdcnt -= 1;
                                    if (*ptr_to_globals).cmdcnt > 0 {
                                      current_block = 16813369756331276724;
                                    } else {
                                      break;
                                    }
                                  }
                                }
                              }
                              current_block = 15129665204879337069;
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
    _ => {}
  }
  match current_block {
    14485563909071777978 =>
    // R- continuous Replace char
    {
      (*ptr_to_globals).cmd_mode = 2i32 as smallint;
      undo_queue_commit();
    }
    8629930936610358348 =>
    // Cursor Key Insert
    {
      (*ptr_to_globals).cmd_mode = 1i32 as smallint; // commit queue when cmd_mode changes
      undo_queue_commit();
    }
    _ => {}
  }
  // user changed mind and erased the "/"-  do nothing
  // if text[] just became empty, add back an empty line
  if (*ptr_to_globals).end == (*ptr_to_globals).text {
    char_insert((*ptr_to_globals).text, '\n' as i32 as libc::c_char, 0); // start empty buf with dummy line
    (*ptr_to_globals).dot = (*ptr_to_globals).text
  }
  // it is OK for dot to exactly equal to end, otherwise check dot validity
  if (*ptr_to_globals).dot != (*ptr_to_globals).end {
    (*ptr_to_globals).dot = bound_dot((*ptr_to_globals).dot)
    // make sure "dot" is valid
  } // update the current context
  check_context(c as libc::c_char); // cmd was not a number, reset cmdcnt
  if !((c - '0' as i32) as libc::c_uchar as libc::c_int <= 9i32) {
    (*ptr_to_globals).cmdcnt = 0
  }
  cnt = (*ptr_to_globals)
    .dot
    .wrapping_offset_from(begin_line((*ptr_to_globals).dot)) as libc::c_long as libc::c_int;
  // Try to stay off of the Newline
  if *(*ptr_to_globals).dot as libc::c_int == '\n' as i32
    && cnt > 0
    && (*ptr_to_globals).cmd_mode as libc::c_int == 0
  {
    (*ptr_to_globals).dot = (*ptr_to_globals).dot.offset(-1)
  };
}
// NB!  the CRASHME code is unmaintained, and doesn't currently build
unsafe extern "C" fn edit_file(mut fn_0: *mut libc::c_char) {
  let mut c: libc::c_int = 0; // 0 = exit, 1 = one file, 2 = multiple files
  let mut sig: libc::c_int = 0;
  (*ptr_to_globals).editing = 1i32 as smallint;
  rawmode();
  (*ptr_to_globals).rows = 24i32 as libc::c_uint;
  (*ptr_to_globals).columns = 80i32 as libc::c_uint;
  (*ptr_to_globals).get_rowcol_error = query_screen_dimensions();
  if (*ptr_to_globals).get_rowcol_error != 0 {
    /* TODO? && no input on stdin */
    let mut k: u64 = 0; // get memory for virtual screen
    write1(b"\x1b[999;999H\x1b[6n\x00" as *const u8 as *const libc::c_char); // default Yank/Delete reg
    crate::libbb::xfuncs_printf::fflush_all();
    k = crate::libbb::read_key::read_key(0i32, (*ptr_to_globals).readbuffer.as_mut_ptr(), 100i32)
      as u64;
    if k as i32 == KEYCODE_CURSOR_POS as libc::c_int {
      let mut rc: u32 = (k >> 32i32) as u32;
      (*ptr_to_globals).columns = rc & 0x7fffi32 as libc::c_uint;
      if (*ptr_to_globals).columns > MAX_SCR_COLS as libc::c_int as libc::c_uint {
        (*ptr_to_globals).columns = MAX_SCR_COLS as libc::c_int as libc::c_uint
      }
      (*ptr_to_globals).rows = rc >> 16i32 & 0x7fffi32 as libc::c_uint;
      if (*ptr_to_globals).rows > MAX_SCR_ROWS as libc::c_int as libc::c_uint {
        (*ptr_to_globals).rows = MAX_SCR_ROWS as libc::c_int as libc::c_uint
      }
    }
  }
  new_screen(
    (*ptr_to_globals).rows as libc::c_int,
    (*ptr_to_globals).columns as libc::c_int,
  );
  init_text_buffer(fn_0);
  (*ptr_to_globals).YDreg = 26i32 as smalluint;
  //	Ureg = 27; - const		// hold orig line for "U" cmd
  (*ptr_to_globals).mark[27] = (*ptr_to_globals).text; // init "previous context"
  (*ptr_to_globals).mark[26] = (*ptr_to_globals).mark[27];
  (*ptr_to_globals).last_forward_char = '\u{0}' as i32;
  (*ptr_to_globals).crow = 0;
  (*ptr_to_globals).ccol = 0;
  signal(
    28i32,
    Some(winch_handler as unsafe extern "C" fn(_: libc::c_int) -> ()),
  );
  signal(
    20i32,
    Some(tstp_handler as unsafe extern "C" fn(_: libc::c_int) -> ()),
  );
  sig = __sigsetjmp((*ptr_to_globals).restart.as_mut_ptr(), 1i32);
  if sig != 0 {
    (*ptr_to_globals).dot = (*ptr_to_globals).text;
    (*ptr_to_globals).screenbegin = (*ptr_to_globals).dot
  }
  // int_handler() can jump to "restart",
  // must install handler *after* initializing "restart"
  signal(
    2i32,
    Some(int_handler as unsafe extern "C" fn(_: libc::c_int) -> ()),
  ); // 0=command  1=insert  2='R'eplace
  (*ptr_to_globals).cmd_mode = 0 as smallint; // no horizontal offset
  (*ptr_to_globals).cmdcnt = 0; // dont force every col re-draw
  (*ptr_to_globals).tabstop = 8i32;
  (*ptr_to_globals).offset = 0;
  c = '\u{0}' as i32;
  free((*ptr_to_globals).ioq_start as *mut libc::c_void);
  (*ptr_to_globals).ioq_start = std::ptr::null_mut::<libc::c_char>();
  (*ptr_to_globals).lmc_len = 0;
  (*ptr_to_globals).adding2q = 0 as smallint;
  let mut p: *mut libc::c_char = std::ptr::null_mut::<libc::c_char>();
  let mut q: *mut libc::c_char = std::ptr::null_mut::<libc::c_char>();
  let mut n: libc::c_int = 0;
  loop {
    p = (*ptr_to_globals).initial_cmds[n as usize];
    if p.is_null() {
      break;
    }
    loop {
      q = p;
      p = strchr(q, '\n' as i32);
      if !p.is_null() {
        while *p as libc::c_int == '\n' as i32 {
          let fresh16 = p;
          p = p.offset(1);
          *fresh16 = '\u{0}' as i32 as libc::c_char
        }
      }
      if *q != 0 {
        colon(q);
      }
      if p.is_null() {
        break;
      }
    }
    free((*ptr_to_globals).initial_cmds[n as usize] as *mut libc::c_void);
    (*ptr_to_globals).initial_cmds[n as usize] = std::ptr::null_mut::<libc::c_char>();
    n += 1
  }
  redraw(0i32);
  //------This is the main Vi cmd handling loop -----------------------
  while (*ptr_to_globals).editing as libc::c_int > 0 {
    c = get_one_char(); // get a cmd from user
                        // save a copy of the current line- for the 'U" command
    if begin_line((*ptr_to_globals).dot) != (*ptr_to_globals).edit_file__cur_line {
      (*ptr_to_globals).edit_file__cur_line = begin_line((*ptr_to_globals).dot);
      text_yank(
        begin_line((*ptr_to_globals).dot),
        end_line((*ptr_to_globals).dot),
        27i32,
      );
    }
    // If c is a command that changes text[],
    // (re)start remembering the input for the "." command.
    if (*ptr_to_globals).adding2q == 0
      && (*ptr_to_globals).ioq_start.is_null()
      && (*ptr_to_globals).cmd_mode as libc::c_int == 0
      && c > '\u{0}' as i32
      && c < 0x7fi32
      && !strchr(modifying_cmds.as_ptr(), c).is_null()
    {
      start_new_cmd_q(c as libc::c_char); // execute the user command
    }
    do_cmd(c);
    // poll to see if there is input already waiting. if we are
    // not able to display output fast enough to keep up, skip
    // the display update until we catch up with input.
    if (*ptr_to_globals).readbuffer[0] == 0 && mysleep(0i32) == 0 {
      // no input pending - so update output
      refresh(0i32);
      show_status_line();
    }
  }
  //-------------------------------------------------------------------
  go_bottom_and_clear_to_eol();
  cookmode();
}
pub unsafe fn vi_main(mut argc: libc::c_int, mut argv: *mut *mut libc::c_char) -> libc::c_int {
  let mut c: libc::c_int = 0;
  let ref mut fresh17 =
    *(not_const_pp(&ptr_to_globals as *const *mut globals as *const libc::c_void)
      as *mut *mut globals);
  *fresh17 = crate::libbb::xfuncs_printf::xzalloc(::std::mem::size_of::<globals>() as libc::c_ulong)
    as *mut globals;
  llvm_asm!("" : : : "memory" : "volatile");
  (*ptr_to_globals).last_modified_count = -1i32;
  (*ptr_to_globals).last_search_pattern =
    crate::libbb::xfuncs_printf::xzalloc(2i32 as size_t) as *mut libc::c_char;
  //undo_stack_tail = NULL; - already is
  (*ptr_to_globals).undo_queue_state = 64i32 as libc::c_char;
  //undo_q = 0; - already is
  // autoindent is not default in vim 7.3
  (*ptr_to_globals).vi_setops = (2i32 | 4i32) as smallint;
  //  1-  process $HOME/.exrc file (not inplemented yet)
  //  2-  process EXINIT variable from environment
  //  3-  process command line args
  let mut p: *mut libc::c_char = getenv(b"EXINIT\x00" as *const u8 as *const libc::c_char);
  if !p.is_null() && *p as libc::c_int != 0 {
    (*ptr_to_globals).initial_cmds[0] =
      crate::libbb::xfuncs_printf::xstrndup(p, MAX_INPUT_LEN as libc::c_int)
  }
  loop {
    c = getopt(
      argc,
      argv,
      b"hCRHc:\x00" as *const u8 as *const libc::c_char,
    );
    if !(c != -1i32) {
      break;
    }
    let mut current_block_18: u64;
    match c {
      82 => {
        // Read-only flag
        (*ptr_to_globals).readonly_mode =
          ((*ptr_to_globals).readonly_mode as libc::c_int | 0x2i32) as smallint;
        current_block_18 = 2668756484064249700;
      }
      99 => {
        // cmd line vi command
        if *optarg != 0 {
          (*ptr_to_globals).initial_cmds
            [((*ptr_to_globals).initial_cmds[0] != std::ptr::null_mut()) as libc::c_int as usize] =
            crate::libbb::xfuncs_printf::xstrndup(optarg, MAX_INPUT_LEN as libc::c_int)
        }
        current_block_18 = 2668756484064249700;
      }
      72 => {
        show_help();
        current_block_18 = 10980373766549670452;
      }
      _ => {
        current_block_18 = 10980373766549670452;
      }
    }
    match current_block_18 {
      2668756484064249700 => {}
      _ =>
      // fall through
      {
        crate::libbb::appletlib::bb_show_usage();
      }
    }
  }
  argv = argv.offset(optind as isize);
  (*ptr_to_globals).cmdline_filecnt = argc - optind;
  // "Save cursor, use alternate screen buffer, clear screen"
  write1(b"\x1b[?1049h\x00" as *const u8 as *const libc::c_char);
  // This is the main file handling loop
  optind = 0; // might be NULL on 1st iteration
  loop {
    edit_file(*argv.offset(optind as isize));
    // NB: optind can be changed by ":next" and ":rewind" commands
    optind += 1;
    if optind >= (*ptr_to_globals).cmdline_filecnt {
      break;
    }
  }
  // "Use normal screen buffer, restore cursor"
  write1(b"\x1b[?1049l\x00" as *const u8 as *const libc::c_char);
  return 0;
}
